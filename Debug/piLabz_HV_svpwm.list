
piLabz_HV_svpwm.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000ce80  080001e0  080001e0  000011e0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000003c8  0800d060  0800d060  0000e060  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800d428  0800d428  0000f35c  2**0
                  CONTENTS
  4 .ARM          00000008  0800d428  0800d428  0000e428  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800d430  0800d430  0000f35c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800d430  0800d430  0000e430  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800d434  0800d434  0000e434  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000035c  20000000  0800d438  0000f000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000016c8  2000035c  0800d794  0000f35c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20001a24  0800d794  0000fa24  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000f35c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001ba06  00000000  00000000  0000f38c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003ceb  00000000  00000000  0002ad92  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000017d0  00000000  00000000  0002ea80  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00001263  00000000  00000000  00030250  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00020ccd  00000000  00000000  000314b3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001cb23  00000000  00000000  00052180  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000ce169  00000000  00000000  0006eca3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0013ce0c  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00007320  00000000  00000000  0013ce50  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000069  00000000  00000000  00144170  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e0 <__do_global_dtors_aux>:
 80001e0:	b510      	push	{r4, lr}
 80001e2:	4c05      	ldr	r4, [pc, #20]	@ (80001f8 <__do_global_dtors_aux+0x18>)
 80001e4:	7823      	ldrb	r3, [r4, #0]
 80001e6:	b933      	cbnz	r3, 80001f6 <__do_global_dtors_aux+0x16>
 80001e8:	4b04      	ldr	r3, [pc, #16]	@ (80001fc <__do_global_dtors_aux+0x1c>)
 80001ea:	b113      	cbz	r3, 80001f2 <__do_global_dtors_aux+0x12>
 80001ec:	4804      	ldr	r0, [pc, #16]	@ (8000200 <__do_global_dtors_aux+0x20>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	2301      	movs	r3, #1
 80001f4:	7023      	strb	r3, [r4, #0]
 80001f6:	bd10      	pop	{r4, pc}
 80001f8:	2000035c 	.word	0x2000035c
 80001fc:	00000000 	.word	0x00000000
 8000200:	0800d048 	.word	0x0800d048

08000204 <frame_dummy>:
 8000204:	b508      	push	{r3, lr}
 8000206:	4b03      	ldr	r3, [pc, #12]	@ (8000214 <frame_dummy+0x10>)
 8000208:	b11b      	cbz	r3, 8000212 <frame_dummy+0xe>
 800020a:	4903      	ldr	r1, [pc, #12]	@ (8000218 <frame_dummy+0x14>)
 800020c:	4803      	ldr	r0, [pc, #12]	@ (800021c <frame_dummy+0x18>)
 800020e:	f3af 8000 	nop.w
 8000212:	bd08      	pop	{r3, pc}
 8000214:	00000000 	.word	0x00000000
 8000218:	20000360 	.word	0x20000360
 800021c:	0800d048 	.word	0x0800d048

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	@ 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <strlen>:
 80002c0:	4603      	mov	r3, r0
 80002c2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002c6:	2a00      	cmp	r2, #0
 80002c8:	d1fb      	bne.n	80002c2 <strlen+0x2>
 80002ca:	1a18      	subs	r0, r3, r0
 80002cc:	3801      	subs	r0, #1
 80002ce:	4770      	bx	lr

080002d0 <__aeabi_drsub>:
 80002d0:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80002d4:	e002      	b.n	80002dc <__adddf3>
 80002d6:	bf00      	nop

080002d8 <__aeabi_dsub>:
 80002d8:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080002dc <__adddf3>:
 80002dc:	b530      	push	{r4, r5, lr}
 80002de:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002e2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002e6:	ea94 0f05 	teq	r4, r5
 80002ea:	bf08      	it	eq
 80002ec:	ea90 0f02 	teqeq	r0, r2
 80002f0:	bf1f      	itttt	ne
 80002f2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002f6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002fa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002fe:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000302:	f000 80e2 	beq.w	80004ca <__adddf3+0x1ee>
 8000306:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800030a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800030e:	bfb8      	it	lt
 8000310:	426d      	neglt	r5, r5
 8000312:	dd0c      	ble.n	800032e <__adddf3+0x52>
 8000314:	442c      	add	r4, r5
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	ea82 0000 	eor.w	r0, r2, r0
 8000322:	ea83 0101 	eor.w	r1, r3, r1
 8000326:	ea80 0202 	eor.w	r2, r0, r2
 800032a:	ea81 0303 	eor.w	r3, r1, r3
 800032e:	2d36      	cmp	r5, #54	@ 0x36
 8000330:	bf88      	it	hi
 8000332:	bd30      	pophi	{r4, r5, pc}
 8000334:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000338:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800033c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000340:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000344:	d002      	beq.n	800034c <__adddf3+0x70>
 8000346:	4240      	negs	r0, r0
 8000348:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800034c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000350:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000354:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000358:	d002      	beq.n	8000360 <__adddf3+0x84>
 800035a:	4252      	negs	r2, r2
 800035c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000360:	ea94 0f05 	teq	r4, r5
 8000364:	f000 80a7 	beq.w	80004b6 <__adddf3+0x1da>
 8000368:	f1a4 0401 	sub.w	r4, r4, #1
 800036c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000370:	db0d      	blt.n	800038e <__adddf3+0xb2>
 8000372:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000376:	fa22 f205 	lsr.w	r2, r2, r5
 800037a:	1880      	adds	r0, r0, r2
 800037c:	f141 0100 	adc.w	r1, r1, #0
 8000380:	fa03 f20e 	lsl.w	r2, r3, lr
 8000384:	1880      	adds	r0, r0, r2
 8000386:	fa43 f305 	asr.w	r3, r3, r5
 800038a:	4159      	adcs	r1, r3
 800038c:	e00e      	b.n	80003ac <__adddf3+0xd0>
 800038e:	f1a5 0520 	sub.w	r5, r5, #32
 8000392:	f10e 0e20 	add.w	lr, lr, #32
 8000396:	2a01      	cmp	r2, #1
 8000398:	fa03 fc0e 	lsl.w	ip, r3, lr
 800039c:	bf28      	it	cs
 800039e:	f04c 0c02 	orrcs.w	ip, ip, #2
 80003a2:	fa43 f305 	asr.w	r3, r3, r5
 80003a6:	18c0      	adds	r0, r0, r3
 80003a8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80003ac:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80003b0:	d507      	bpl.n	80003c2 <__adddf3+0xe6>
 80003b2:	f04f 0e00 	mov.w	lr, #0
 80003b6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003ba:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003be:	eb6e 0101 	sbc.w	r1, lr, r1
 80003c2:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80003c6:	d31b      	bcc.n	8000400 <__adddf3+0x124>
 80003c8:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80003cc:	d30c      	bcc.n	80003e8 <__adddf3+0x10c>
 80003ce:	0849      	lsrs	r1, r1, #1
 80003d0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003d4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003d8:	f104 0401 	add.w	r4, r4, #1
 80003dc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003e0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003e4:	f080 809a 	bcs.w	800051c <__adddf3+0x240>
 80003e8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003ec:	bf08      	it	eq
 80003ee:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003f2:	f150 0000 	adcs.w	r0, r0, #0
 80003f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003fa:	ea41 0105 	orr.w	r1, r1, r5
 80003fe:	bd30      	pop	{r4, r5, pc}
 8000400:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000404:	4140      	adcs	r0, r0
 8000406:	eb41 0101 	adc.w	r1, r1, r1
 800040a:	3c01      	subs	r4, #1
 800040c:	bf28      	it	cs
 800040e:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 8000412:	d2e9      	bcs.n	80003e8 <__adddf3+0x10c>
 8000414:	f091 0f00 	teq	r1, #0
 8000418:	bf04      	itt	eq
 800041a:	4601      	moveq	r1, r0
 800041c:	2000      	moveq	r0, #0
 800041e:	fab1 f381 	clz	r3, r1
 8000422:	bf08      	it	eq
 8000424:	3320      	addeq	r3, #32
 8000426:	f1a3 030b 	sub.w	r3, r3, #11
 800042a:	f1b3 0220 	subs.w	r2, r3, #32
 800042e:	da0c      	bge.n	800044a <__adddf3+0x16e>
 8000430:	320c      	adds	r2, #12
 8000432:	dd08      	ble.n	8000446 <__adddf3+0x16a>
 8000434:	f102 0c14 	add.w	ip, r2, #20
 8000438:	f1c2 020c 	rsb	r2, r2, #12
 800043c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000440:	fa21 f102 	lsr.w	r1, r1, r2
 8000444:	e00c      	b.n	8000460 <__adddf3+0x184>
 8000446:	f102 0214 	add.w	r2, r2, #20
 800044a:	bfd8      	it	le
 800044c:	f1c2 0c20 	rsble	ip, r2, #32
 8000450:	fa01 f102 	lsl.w	r1, r1, r2
 8000454:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000458:	bfdc      	itt	le
 800045a:	ea41 010c 	orrle.w	r1, r1, ip
 800045e:	4090      	lslle	r0, r2
 8000460:	1ae4      	subs	r4, r4, r3
 8000462:	bfa2      	ittt	ge
 8000464:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000468:	4329      	orrge	r1, r5
 800046a:	bd30      	popge	{r4, r5, pc}
 800046c:	ea6f 0404 	mvn.w	r4, r4
 8000470:	3c1f      	subs	r4, #31
 8000472:	da1c      	bge.n	80004ae <__adddf3+0x1d2>
 8000474:	340c      	adds	r4, #12
 8000476:	dc0e      	bgt.n	8000496 <__adddf3+0x1ba>
 8000478:	f104 0414 	add.w	r4, r4, #20
 800047c:	f1c4 0220 	rsb	r2, r4, #32
 8000480:	fa20 f004 	lsr.w	r0, r0, r4
 8000484:	fa01 f302 	lsl.w	r3, r1, r2
 8000488:	ea40 0003 	orr.w	r0, r0, r3
 800048c:	fa21 f304 	lsr.w	r3, r1, r4
 8000490:	ea45 0103 	orr.w	r1, r5, r3
 8000494:	bd30      	pop	{r4, r5, pc}
 8000496:	f1c4 040c 	rsb	r4, r4, #12
 800049a:	f1c4 0220 	rsb	r2, r4, #32
 800049e:	fa20 f002 	lsr.w	r0, r0, r2
 80004a2:	fa01 f304 	lsl.w	r3, r1, r4
 80004a6:	ea40 0003 	orr.w	r0, r0, r3
 80004aa:	4629      	mov	r1, r5
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	fa21 f004 	lsr.w	r0, r1, r4
 80004b2:	4629      	mov	r1, r5
 80004b4:	bd30      	pop	{r4, r5, pc}
 80004b6:	f094 0f00 	teq	r4, #0
 80004ba:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80004be:	bf06      	itte	eq
 80004c0:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80004c4:	3401      	addeq	r4, #1
 80004c6:	3d01      	subne	r5, #1
 80004c8:	e74e      	b.n	8000368 <__adddf3+0x8c>
 80004ca:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ce:	bf18      	it	ne
 80004d0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004d4:	d029      	beq.n	800052a <__adddf3+0x24e>
 80004d6:	ea94 0f05 	teq	r4, r5
 80004da:	bf08      	it	eq
 80004dc:	ea90 0f02 	teqeq	r0, r2
 80004e0:	d005      	beq.n	80004ee <__adddf3+0x212>
 80004e2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004e6:	bf04      	itt	eq
 80004e8:	4619      	moveq	r1, r3
 80004ea:	4610      	moveq	r0, r2
 80004ec:	bd30      	pop	{r4, r5, pc}
 80004ee:	ea91 0f03 	teq	r1, r3
 80004f2:	bf1e      	ittt	ne
 80004f4:	2100      	movne	r1, #0
 80004f6:	2000      	movne	r0, #0
 80004f8:	bd30      	popne	{r4, r5, pc}
 80004fa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004fe:	d105      	bne.n	800050c <__adddf3+0x230>
 8000500:	0040      	lsls	r0, r0, #1
 8000502:	4149      	adcs	r1, r1
 8000504:	bf28      	it	cs
 8000506:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 800050a:	bd30      	pop	{r4, r5, pc}
 800050c:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000510:	bf3c      	itt	cc
 8000512:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 8000516:	bd30      	popcc	{r4, r5, pc}
 8000518:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800051c:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000520:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000524:	f04f 0000 	mov.w	r0, #0
 8000528:	bd30      	pop	{r4, r5, pc}
 800052a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800052e:	bf1a      	itte	ne
 8000530:	4619      	movne	r1, r3
 8000532:	4610      	movne	r0, r2
 8000534:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000538:	bf1c      	itt	ne
 800053a:	460b      	movne	r3, r1
 800053c:	4602      	movne	r2, r0
 800053e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000542:	bf06      	itte	eq
 8000544:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000548:	ea91 0f03 	teqeq	r1, r3
 800054c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000550:	bd30      	pop	{r4, r5, pc}
 8000552:	bf00      	nop

08000554 <__aeabi_ui2d>:
 8000554:	f090 0f00 	teq	r0, #0
 8000558:	bf04      	itt	eq
 800055a:	2100      	moveq	r1, #0
 800055c:	4770      	bxeq	lr
 800055e:	b530      	push	{r4, r5, lr}
 8000560:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000564:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000568:	f04f 0500 	mov.w	r5, #0
 800056c:	f04f 0100 	mov.w	r1, #0
 8000570:	e750      	b.n	8000414 <__adddf3+0x138>
 8000572:	bf00      	nop

08000574 <__aeabi_i2d>:
 8000574:	f090 0f00 	teq	r0, #0
 8000578:	bf04      	itt	eq
 800057a:	2100      	moveq	r1, #0
 800057c:	4770      	bxeq	lr
 800057e:	b530      	push	{r4, r5, lr}
 8000580:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000584:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000588:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800058c:	bf48      	it	mi
 800058e:	4240      	negmi	r0, r0
 8000590:	f04f 0100 	mov.w	r1, #0
 8000594:	e73e      	b.n	8000414 <__adddf3+0x138>
 8000596:	bf00      	nop

08000598 <__aeabi_f2d>:
 8000598:	0042      	lsls	r2, r0, #1
 800059a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800059e:	ea4f 0131 	mov.w	r1, r1, rrx
 80005a2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80005a6:	bf1f      	itttt	ne
 80005a8:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 80005ac:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80005b0:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80005b4:	4770      	bxne	lr
 80005b6:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80005ba:	bf08      	it	eq
 80005bc:	4770      	bxeq	lr
 80005be:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80005c2:	bf04      	itt	eq
 80005c4:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80005c8:	4770      	bxeq	lr
 80005ca:	b530      	push	{r4, r5, lr}
 80005cc:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80005d0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005d4:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005d8:	e71c      	b.n	8000414 <__adddf3+0x138>
 80005da:	bf00      	nop

080005dc <__aeabi_ul2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f04f 0500 	mov.w	r5, #0
 80005ea:	e00a      	b.n	8000602 <__aeabi_l2d+0x16>

080005ec <__aeabi_l2d>:
 80005ec:	ea50 0201 	orrs.w	r2, r0, r1
 80005f0:	bf08      	it	eq
 80005f2:	4770      	bxeq	lr
 80005f4:	b530      	push	{r4, r5, lr}
 80005f6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005fa:	d502      	bpl.n	8000602 <__aeabi_l2d+0x16>
 80005fc:	4240      	negs	r0, r0
 80005fe:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000602:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000606:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800060a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800060e:	f43f aed8 	beq.w	80003c2 <__adddf3+0xe6>
 8000612:	f04f 0203 	mov.w	r2, #3
 8000616:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800061a:	bf18      	it	ne
 800061c:	3203      	addne	r2, #3
 800061e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000622:	bf18      	it	ne
 8000624:	3203      	addne	r2, #3
 8000626:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800062a:	f1c2 0320 	rsb	r3, r2, #32
 800062e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000632:	fa20 f002 	lsr.w	r0, r0, r2
 8000636:	fa01 fe03 	lsl.w	lr, r1, r3
 800063a:	ea40 000e 	orr.w	r0, r0, lr
 800063e:	fa21 f102 	lsr.w	r1, r1, r2
 8000642:	4414      	add	r4, r2
 8000644:	e6bd      	b.n	80003c2 <__adddf3+0xe6>
 8000646:	bf00      	nop

08000648 <__aeabi_dmul>:
 8000648:	b570      	push	{r4, r5, r6, lr}
 800064a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800064e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000652:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000656:	bf1d      	ittte	ne
 8000658:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800065c:	ea94 0f0c 	teqne	r4, ip
 8000660:	ea95 0f0c 	teqne	r5, ip
 8000664:	f000 f8de 	bleq	8000824 <__aeabi_dmul+0x1dc>
 8000668:	442c      	add	r4, r5
 800066a:	ea81 0603 	eor.w	r6, r1, r3
 800066e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000672:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000676:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800067a:	bf18      	it	ne
 800067c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000680:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000684:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000688:	d038      	beq.n	80006fc <__aeabi_dmul+0xb4>
 800068a:	fba0 ce02 	umull	ip, lr, r0, r2
 800068e:	f04f 0500 	mov.w	r5, #0
 8000692:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000696:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800069a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800069e:	f04f 0600 	mov.w	r6, #0
 80006a2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80006a6:	f09c 0f00 	teq	ip, #0
 80006aa:	bf18      	it	ne
 80006ac:	f04e 0e01 	orrne.w	lr, lr, #1
 80006b0:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80006b4:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 80006b8:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 80006bc:	d204      	bcs.n	80006c8 <__aeabi_dmul+0x80>
 80006be:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006c2:	416d      	adcs	r5, r5
 80006c4:	eb46 0606 	adc.w	r6, r6, r6
 80006c8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006cc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006d0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006d4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006d8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006dc:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006e0:	bf88      	it	hi
 80006e2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006e6:	d81e      	bhi.n	8000726 <__aeabi_dmul+0xde>
 80006e8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006ec:	bf08      	it	eq
 80006ee:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006f2:	f150 0000 	adcs.w	r0, r0, #0
 80006f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006fa:	bd70      	pop	{r4, r5, r6, pc}
 80006fc:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000700:	ea46 0101 	orr.w	r1, r6, r1
 8000704:	ea40 0002 	orr.w	r0, r0, r2
 8000708:	ea81 0103 	eor.w	r1, r1, r3
 800070c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000710:	bfc2      	ittt	gt
 8000712:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000716:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800071a:	bd70      	popgt	{r4, r5, r6, pc}
 800071c:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000720:	f04f 0e00 	mov.w	lr, #0
 8000724:	3c01      	subs	r4, #1
 8000726:	f300 80ab 	bgt.w	8000880 <__aeabi_dmul+0x238>
 800072a:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 800072e:	bfde      	ittt	le
 8000730:	2000      	movle	r0, #0
 8000732:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 8000736:	bd70      	pople	{r4, r5, r6, pc}
 8000738:	f1c4 0400 	rsb	r4, r4, #0
 800073c:	3c20      	subs	r4, #32
 800073e:	da35      	bge.n	80007ac <__aeabi_dmul+0x164>
 8000740:	340c      	adds	r4, #12
 8000742:	dc1b      	bgt.n	800077c <__aeabi_dmul+0x134>
 8000744:	f104 0414 	add.w	r4, r4, #20
 8000748:	f1c4 0520 	rsb	r5, r4, #32
 800074c:	fa00 f305 	lsl.w	r3, r0, r5
 8000750:	fa20 f004 	lsr.w	r0, r0, r4
 8000754:	fa01 f205 	lsl.w	r2, r1, r5
 8000758:	ea40 0002 	orr.w	r0, r0, r2
 800075c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000760:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000764:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000768:	fa21 f604 	lsr.w	r6, r1, r4
 800076c:	eb42 0106 	adc.w	r1, r2, r6
 8000770:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000774:	bf08      	it	eq
 8000776:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800077a:	bd70      	pop	{r4, r5, r6, pc}
 800077c:	f1c4 040c 	rsb	r4, r4, #12
 8000780:	f1c4 0520 	rsb	r5, r4, #32
 8000784:	fa00 f304 	lsl.w	r3, r0, r4
 8000788:	fa20 f005 	lsr.w	r0, r0, r5
 800078c:	fa01 f204 	lsl.w	r2, r1, r4
 8000790:	ea40 0002 	orr.w	r0, r0, r2
 8000794:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000798:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800079c:	f141 0100 	adc.w	r1, r1, #0
 80007a0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007a4:	bf08      	it	eq
 80007a6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007aa:	bd70      	pop	{r4, r5, r6, pc}
 80007ac:	f1c4 0520 	rsb	r5, r4, #32
 80007b0:	fa00 f205 	lsl.w	r2, r0, r5
 80007b4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007b8:	fa20 f304 	lsr.w	r3, r0, r4
 80007bc:	fa01 f205 	lsl.w	r2, r1, r5
 80007c0:	ea43 0302 	orr.w	r3, r3, r2
 80007c4:	fa21 f004 	lsr.w	r0, r1, r4
 80007c8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007cc:	fa21 f204 	lsr.w	r2, r1, r4
 80007d0:	ea20 0002 	bic.w	r0, r0, r2
 80007d4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007d8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007dc:	bf08      	it	eq
 80007de:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007e2:	bd70      	pop	{r4, r5, r6, pc}
 80007e4:	f094 0f00 	teq	r4, #0
 80007e8:	d10f      	bne.n	800080a <__aeabi_dmul+0x1c2>
 80007ea:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007ee:	0040      	lsls	r0, r0, #1
 80007f0:	eb41 0101 	adc.w	r1, r1, r1
 80007f4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007f8:	bf08      	it	eq
 80007fa:	3c01      	subeq	r4, #1
 80007fc:	d0f7      	beq.n	80007ee <__aeabi_dmul+0x1a6>
 80007fe:	ea41 0106 	orr.w	r1, r1, r6
 8000802:	f095 0f00 	teq	r5, #0
 8000806:	bf18      	it	ne
 8000808:	4770      	bxne	lr
 800080a:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 800080e:	0052      	lsls	r2, r2, #1
 8000810:	eb43 0303 	adc.w	r3, r3, r3
 8000814:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000818:	bf08      	it	eq
 800081a:	3d01      	subeq	r5, #1
 800081c:	d0f7      	beq.n	800080e <__aeabi_dmul+0x1c6>
 800081e:	ea43 0306 	orr.w	r3, r3, r6
 8000822:	4770      	bx	lr
 8000824:	ea94 0f0c 	teq	r4, ip
 8000828:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800082c:	bf18      	it	ne
 800082e:	ea95 0f0c 	teqne	r5, ip
 8000832:	d00c      	beq.n	800084e <__aeabi_dmul+0x206>
 8000834:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000838:	bf18      	it	ne
 800083a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800083e:	d1d1      	bne.n	80007e4 <__aeabi_dmul+0x19c>
 8000840:	ea81 0103 	eor.w	r1, r1, r3
 8000844:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000848:	f04f 0000 	mov.w	r0, #0
 800084c:	bd70      	pop	{r4, r5, r6, pc}
 800084e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000852:	bf06      	itte	eq
 8000854:	4610      	moveq	r0, r2
 8000856:	4619      	moveq	r1, r3
 8000858:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800085c:	d019      	beq.n	8000892 <__aeabi_dmul+0x24a>
 800085e:	ea94 0f0c 	teq	r4, ip
 8000862:	d102      	bne.n	800086a <__aeabi_dmul+0x222>
 8000864:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000868:	d113      	bne.n	8000892 <__aeabi_dmul+0x24a>
 800086a:	ea95 0f0c 	teq	r5, ip
 800086e:	d105      	bne.n	800087c <__aeabi_dmul+0x234>
 8000870:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000874:	bf1c      	itt	ne
 8000876:	4610      	movne	r0, r2
 8000878:	4619      	movne	r1, r3
 800087a:	d10a      	bne.n	8000892 <__aeabi_dmul+0x24a>
 800087c:	ea81 0103 	eor.w	r1, r1, r3
 8000880:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000884:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000888:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800088c:	f04f 0000 	mov.w	r0, #0
 8000890:	bd70      	pop	{r4, r5, r6, pc}
 8000892:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000896:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800089a:	bd70      	pop	{r4, r5, r6, pc}

0800089c <__aeabi_ddiv>:
 800089c:	b570      	push	{r4, r5, r6, lr}
 800089e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80008a2:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80008a6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80008aa:	bf1d      	ittte	ne
 80008ac:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008b0:	ea94 0f0c 	teqne	r4, ip
 80008b4:	ea95 0f0c 	teqne	r5, ip
 80008b8:	f000 f8a7 	bleq	8000a0a <__aeabi_ddiv+0x16e>
 80008bc:	eba4 0405 	sub.w	r4, r4, r5
 80008c0:	ea81 0e03 	eor.w	lr, r1, r3
 80008c4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008cc:	f000 8088 	beq.w	80009e0 <__aeabi_ddiv+0x144>
 80008d0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008d4:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80008d8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008dc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008e0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008e4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008e8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ec:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008f0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008f4:	429d      	cmp	r5, r3
 80008f6:	bf08      	it	eq
 80008f8:	4296      	cmpeq	r6, r2
 80008fa:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008fe:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 8000902:	d202      	bcs.n	800090a <__aeabi_ddiv+0x6e>
 8000904:	085b      	lsrs	r3, r3, #1
 8000906:	ea4f 0232 	mov.w	r2, r2, rrx
 800090a:	1ab6      	subs	r6, r6, r2
 800090c:	eb65 0503 	sbc.w	r5, r5, r3
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 800091a:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 800091e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000922:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000926:	bf22      	ittt	cs
 8000928:	1ab6      	subcs	r6, r6, r2
 800092a:	4675      	movcs	r5, lr
 800092c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	ebb6 0e02 	subs.w	lr, r6, r2
 800093a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800093e:	bf22      	ittt	cs
 8000940:	1ab6      	subcs	r6, r6, r2
 8000942:	4675      	movcs	r5, lr
 8000944:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000948:	085b      	lsrs	r3, r3, #1
 800094a:	ea4f 0232 	mov.w	r2, r2, rrx
 800094e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000952:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000956:	bf22      	ittt	cs
 8000958:	1ab6      	subcs	r6, r6, r2
 800095a:	4675      	movcs	r5, lr
 800095c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000960:	085b      	lsrs	r3, r3, #1
 8000962:	ea4f 0232 	mov.w	r2, r2, rrx
 8000966:	ebb6 0e02 	subs.w	lr, r6, r2
 800096a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800096e:	bf22      	ittt	cs
 8000970:	1ab6      	subcs	r6, r6, r2
 8000972:	4675      	movcs	r5, lr
 8000974:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000978:	ea55 0e06 	orrs.w	lr, r5, r6
 800097c:	d018      	beq.n	80009b0 <__aeabi_ddiv+0x114>
 800097e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000982:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000986:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800098a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800098e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000992:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000996:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800099a:	d1c0      	bne.n	800091e <__aeabi_ddiv+0x82>
 800099c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80009a0:	d10b      	bne.n	80009ba <__aeabi_ddiv+0x11e>
 80009a2:	ea41 0100 	orr.w	r1, r1, r0
 80009a6:	f04f 0000 	mov.w	r0, #0
 80009aa:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 80009ae:	e7b6      	b.n	800091e <__aeabi_ddiv+0x82>
 80009b0:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80009b4:	bf04      	itt	eq
 80009b6:	4301      	orreq	r1, r0
 80009b8:	2000      	moveq	r0, #0
 80009ba:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80009be:	bf88      	it	hi
 80009c0:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80009c4:	f63f aeaf 	bhi.w	8000726 <__aeabi_dmul+0xde>
 80009c8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009cc:	bf04      	itt	eq
 80009ce:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009d2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009d6:	f150 0000 	adcs.w	r0, r0, #0
 80009da:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009de:	bd70      	pop	{r4, r5, r6, pc}
 80009e0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009e4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009e8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ec:	bfc2      	ittt	gt
 80009ee:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009f2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009f6:	bd70      	popgt	{r4, r5, r6, pc}
 80009f8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009fc:	f04f 0e00 	mov.w	lr, #0
 8000a00:	3c01      	subs	r4, #1
 8000a02:	e690      	b.n	8000726 <__aeabi_dmul+0xde>
 8000a04:	ea45 0e06 	orr.w	lr, r5, r6
 8000a08:	e68d      	b.n	8000726 <__aeabi_dmul+0xde>
 8000a0a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000a0e:	ea94 0f0c 	teq	r4, ip
 8000a12:	bf08      	it	eq
 8000a14:	ea95 0f0c 	teqeq	r5, ip
 8000a18:	f43f af3b 	beq.w	8000892 <__aeabi_dmul+0x24a>
 8000a1c:	ea94 0f0c 	teq	r4, ip
 8000a20:	d10a      	bne.n	8000a38 <__aeabi_ddiv+0x19c>
 8000a22:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a26:	f47f af34 	bne.w	8000892 <__aeabi_dmul+0x24a>
 8000a2a:	ea95 0f0c 	teq	r5, ip
 8000a2e:	f47f af25 	bne.w	800087c <__aeabi_dmul+0x234>
 8000a32:	4610      	mov	r0, r2
 8000a34:	4619      	mov	r1, r3
 8000a36:	e72c      	b.n	8000892 <__aeabi_dmul+0x24a>
 8000a38:	ea95 0f0c 	teq	r5, ip
 8000a3c:	d106      	bne.n	8000a4c <__aeabi_ddiv+0x1b0>
 8000a3e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a42:	f43f aefd 	beq.w	8000840 <__aeabi_dmul+0x1f8>
 8000a46:	4610      	mov	r0, r2
 8000a48:	4619      	mov	r1, r3
 8000a4a:	e722      	b.n	8000892 <__aeabi_dmul+0x24a>
 8000a4c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a56:	f47f aec5 	bne.w	80007e4 <__aeabi_dmul+0x19c>
 8000a5a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a5e:	f47f af0d 	bne.w	800087c <__aeabi_dmul+0x234>
 8000a62:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a66:	f47f aeeb 	bne.w	8000840 <__aeabi_dmul+0x1f8>
 8000a6a:	e712      	b.n	8000892 <__aeabi_dmul+0x24a>

08000a6c <__gedf2>:
 8000a6c:	f04f 3cff 	mov.w	ip, #4294967295	@ 0xffffffff
 8000a70:	e006      	b.n	8000a80 <__cmpdf2+0x4>
 8000a72:	bf00      	nop

08000a74 <__ledf2>:
 8000a74:	f04f 0c01 	mov.w	ip, #1
 8000a78:	e002      	b.n	8000a80 <__cmpdf2+0x4>
 8000a7a:	bf00      	nop

08000a7c <__cmpdf2>:
 8000a7c:	f04f 0c01 	mov.w	ip, #1
 8000a80:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a84:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a88:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a8c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a90:	bf18      	it	ne
 8000a92:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a96:	d01b      	beq.n	8000ad0 <__cmpdf2+0x54>
 8000a98:	b001      	add	sp, #4
 8000a9a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a9e:	bf0c      	ite	eq
 8000aa0:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000aa4:	ea91 0f03 	teqne	r1, r3
 8000aa8:	bf02      	ittt	eq
 8000aaa:	ea90 0f02 	teqeq	r0, r2
 8000aae:	2000      	moveq	r0, #0
 8000ab0:	4770      	bxeq	lr
 8000ab2:	f110 0f00 	cmn.w	r0, #0
 8000ab6:	ea91 0f03 	teq	r1, r3
 8000aba:	bf58      	it	pl
 8000abc:	4299      	cmppl	r1, r3
 8000abe:	bf08      	it	eq
 8000ac0:	4290      	cmpeq	r0, r2
 8000ac2:	bf2c      	ite	cs
 8000ac4:	17d8      	asrcs	r0, r3, #31
 8000ac6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aca:	f040 0001 	orr.w	r0, r0, #1
 8000ace:	4770      	bx	lr
 8000ad0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad8:	d102      	bne.n	8000ae0 <__cmpdf2+0x64>
 8000ada:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ade:	d107      	bne.n	8000af0 <__cmpdf2+0x74>
 8000ae0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ae4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ae8:	d1d6      	bne.n	8000a98 <__cmpdf2+0x1c>
 8000aea:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aee:	d0d3      	beq.n	8000a98 <__cmpdf2+0x1c>
 8000af0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000af4:	4770      	bx	lr
 8000af6:	bf00      	nop

08000af8 <__aeabi_cdrcmple>:
 8000af8:	4684      	mov	ip, r0
 8000afa:	4610      	mov	r0, r2
 8000afc:	4662      	mov	r2, ip
 8000afe:	468c      	mov	ip, r1
 8000b00:	4619      	mov	r1, r3
 8000b02:	4663      	mov	r3, ip
 8000b04:	e000      	b.n	8000b08 <__aeabi_cdcmpeq>
 8000b06:	bf00      	nop

08000b08 <__aeabi_cdcmpeq>:
 8000b08:	b501      	push	{r0, lr}
 8000b0a:	f7ff ffb7 	bl	8000a7c <__cmpdf2>
 8000b0e:	2800      	cmp	r0, #0
 8000b10:	bf48      	it	mi
 8000b12:	f110 0f00 	cmnmi.w	r0, #0
 8000b16:	bd01      	pop	{r0, pc}

08000b18 <__aeabi_dcmpeq>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff fff4 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b20:	bf0c      	ite	eq
 8000b22:	2001      	moveq	r0, #1
 8000b24:	2000      	movne	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmplt>:
 8000b2c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b30:	f7ff ffea 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b34:	bf34      	ite	cc
 8000b36:	2001      	movcc	r0, #1
 8000b38:	2000      	movcs	r0, #0
 8000b3a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3e:	bf00      	nop

08000b40 <__aeabi_dcmple>:
 8000b40:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b44:	f7ff ffe0 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b48:	bf94      	ite	ls
 8000b4a:	2001      	movls	r0, #1
 8000b4c:	2000      	movhi	r0, #0
 8000b4e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b52:	bf00      	nop

08000b54 <__aeabi_dcmpge>:
 8000b54:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b58:	f7ff ffce 	bl	8000af8 <__aeabi_cdrcmple>
 8000b5c:	bf94      	ite	ls
 8000b5e:	2001      	movls	r0, #1
 8000b60:	2000      	movhi	r0, #0
 8000b62:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b66:	bf00      	nop

08000b68 <__aeabi_dcmpgt>:
 8000b68:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b6c:	f7ff ffc4 	bl	8000af8 <__aeabi_cdrcmple>
 8000b70:	bf34      	ite	cc
 8000b72:	2001      	movcc	r0, #1
 8000b74:	2000      	movcs	r0, #0
 8000b76:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b7a:	bf00      	nop

08000b7c <__aeabi_dcmpun>:
 8000b7c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b84:	d102      	bne.n	8000b8c <__aeabi_dcmpun+0x10>
 8000b86:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b8a:	d10a      	bne.n	8000ba2 <__aeabi_dcmpun+0x26>
 8000b8c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b90:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b94:	d102      	bne.n	8000b9c <__aeabi_dcmpun+0x20>
 8000b96:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b9a:	d102      	bne.n	8000ba2 <__aeabi_dcmpun+0x26>
 8000b9c:	f04f 0000 	mov.w	r0, #0
 8000ba0:	4770      	bx	lr
 8000ba2:	f04f 0001 	mov.w	r0, #1
 8000ba6:	4770      	bx	lr

08000ba8 <__aeabi_d2iz>:
 8000ba8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bac:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000bb0:	d215      	bcs.n	8000bde <__aeabi_d2iz+0x36>
 8000bb2:	d511      	bpl.n	8000bd8 <__aeabi_d2iz+0x30>
 8000bb4:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000bb8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bbc:	d912      	bls.n	8000be4 <__aeabi_d2iz+0x3c>
 8000bbe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000bc6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bca:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000bce:	fa23 f002 	lsr.w	r0, r3, r2
 8000bd2:	bf18      	it	ne
 8000bd4:	4240      	negne	r0, r0
 8000bd6:	4770      	bx	lr
 8000bd8:	f04f 0000 	mov.w	r0, #0
 8000bdc:	4770      	bx	lr
 8000bde:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000be2:	d105      	bne.n	8000bf0 <__aeabi_d2iz+0x48>
 8000be4:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000be8:	bf08      	it	eq
 8000bea:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000bee:	4770      	bx	lr
 8000bf0:	f04f 0000 	mov.w	r0, #0
 8000bf4:	4770      	bx	lr
 8000bf6:	bf00      	nop

08000bf8 <__aeabi_uldivmod>:
 8000bf8:	b953      	cbnz	r3, 8000c10 <__aeabi_uldivmod+0x18>
 8000bfa:	b94a      	cbnz	r2, 8000c10 <__aeabi_uldivmod+0x18>
 8000bfc:	2900      	cmp	r1, #0
 8000bfe:	bf08      	it	eq
 8000c00:	2800      	cmpeq	r0, #0
 8000c02:	bf1c      	itt	ne
 8000c04:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 8000c08:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 8000c0c:	f000 b96a 	b.w	8000ee4 <__aeabi_idiv0>
 8000c10:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c14:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c18:	f000 f806 	bl	8000c28 <__udivmoddi4>
 8000c1c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c20:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c24:	b004      	add	sp, #16
 8000c26:	4770      	bx	lr

08000c28 <__udivmoddi4>:
 8000c28:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c2c:	9d08      	ldr	r5, [sp, #32]
 8000c2e:	460c      	mov	r4, r1
 8000c30:	2b00      	cmp	r3, #0
 8000c32:	d14e      	bne.n	8000cd2 <__udivmoddi4+0xaa>
 8000c34:	4694      	mov	ip, r2
 8000c36:	458c      	cmp	ip, r1
 8000c38:	4686      	mov	lr, r0
 8000c3a:	fab2 f282 	clz	r2, r2
 8000c3e:	d962      	bls.n	8000d06 <__udivmoddi4+0xde>
 8000c40:	b14a      	cbz	r2, 8000c56 <__udivmoddi4+0x2e>
 8000c42:	f1c2 0320 	rsb	r3, r2, #32
 8000c46:	4091      	lsls	r1, r2
 8000c48:	fa20 f303 	lsr.w	r3, r0, r3
 8000c4c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000c50:	4319      	orrs	r1, r3
 8000c52:	fa00 fe02 	lsl.w	lr, r0, r2
 8000c56:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000c5a:	fa1f f68c 	uxth.w	r6, ip
 8000c5e:	fbb1 f4f7 	udiv	r4, r1, r7
 8000c62:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000c66:	fb07 1114 	mls	r1, r7, r4, r1
 8000c6a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c6e:	fb04 f106 	mul.w	r1, r4, r6
 8000c72:	4299      	cmp	r1, r3
 8000c74:	d90a      	bls.n	8000c8c <__udivmoddi4+0x64>
 8000c76:	eb1c 0303 	adds.w	r3, ip, r3
 8000c7a:	f104 30ff 	add.w	r0, r4, #4294967295	@ 0xffffffff
 8000c7e:	f080 8112 	bcs.w	8000ea6 <__udivmoddi4+0x27e>
 8000c82:	4299      	cmp	r1, r3
 8000c84:	f240 810f 	bls.w	8000ea6 <__udivmoddi4+0x27e>
 8000c88:	3c02      	subs	r4, #2
 8000c8a:	4463      	add	r3, ip
 8000c8c:	1a59      	subs	r1, r3, r1
 8000c8e:	fa1f f38e 	uxth.w	r3, lr
 8000c92:	fbb1 f0f7 	udiv	r0, r1, r7
 8000c96:	fb07 1110 	mls	r1, r7, r0, r1
 8000c9a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c9e:	fb00 f606 	mul.w	r6, r0, r6
 8000ca2:	429e      	cmp	r6, r3
 8000ca4:	d90a      	bls.n	8000cbc <__udivmoddi4+0x94>
 8000ca6:	eb1c 0303 	adds.w	r3, ip, r3
 8000caa:	f100 31ff 	add.w	r1, r0, #4294967295	@ 0xffffffff
 8000cae:	f080 80fc 	bcs.w	8000eaa <__udivmoddi4+0x282>
 8000cb2:	429e      	cmp	r6, r3
 8000cb4:	f240 80f9 	bls.w	8000eaa <__udivmoddi4+0x282>
 8000cb8:	4463      	add	r3, ip
 8000cba:	3802      	subs	r0, #2
 8000cbc:	1b9b      	subs	r3, r3, r6
 8000cbe:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000cc2:	2100      	movs	r1, #0
 8000cc4:	b11d      	cbz	r5, 8000cce <__udivmoddi4+0xa6>
 8000cc6:	40d3      	lsrs	r3, r2
 8000cc8:	2200      	movs	r2, #0
 8000cca:	e9c5 3200 	strd	r3, r2, [r5]
 8000cce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cd2:	428b      	cmp	r3, r1
 8000cd4:	d905      	bls.n	8000ce2 <__udivmoddi4+0xba>
 8000cd6:	b10d      	cbz	r5, 8000cdc <__udivmoddi4+0xb4>
 8000cd8:	e9c5 0100 	strd	r0, r1, [r5]
 8000cdc:	2100      	movs	r1, #0
 8000cde:	4608      	mov	r0, r1
 8000ce0:	e7f5      	b.n	8000cce <__udivmoddi4+0xa6>
 8000ce2:	fab3 f183 	clz	r1, r3
 8000ce6:	2900      	cmp	r1, #0
 8000ce8:	d146      	bne.n	8000d78 <__udivmoddi4+0x150>
 8000cea:	42a3      	cmp	r3, r4
 8000cec:	d302      	bcc.n	8000cf4 <__udivmoddi4+0xcc>
 8000cee:	4290      	cmp	r0, r2
 8000cf0:	f0c0 80f0 	bcc.w	8000ed4 <__udivmoddi4+0x2ac>
 8000cf4:	1a86      	subs	r6, r0, r2
 8000cf6:	eb64 0303 	sbc.w	r3, r4, r3
 8000cfa:	2001      	movs	r0, #1
 8000cfc:	2d00      	cmp	r5, #0
 8000cfe:	d0e6      	beq.n	8000cce <__udivmoddi4+0xa6>
 8000d00:	e9c5 6300 	strd	r6, r3, [r5]
 8000d04:	e7e3      	b.n	8000cce <__udivmoddi4+0xa6>
 8000d06:	2a00      	cmp	r2, #0
 8000d08:	f040 8090 	bne.w	8000e2c <__udivmoddi4+0x204>
 8000d0c:	eba1 040c 	sub.w	r4, r1, ip
 8000d10:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000d14:	fa1f f78c 	uxth.w	r7, ip
 8000d18:	2101      	movs	r1, #1
 8000d1a:	fbb4 f6f8 	udiv	r6, r4, r8
 8000d1e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000d22:	fb08 4416 	mls	r4, r8, r6, r4
 8000d26:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000d2a:	fb07 f006 	mul.w	r0, r7, r6
 8000d2e:	4298      	cmp	r0, r3
 8000d30:	d908      	bls.n	8000d44 <__udivmoddi4+0x11c>
 8000d32:	eb1c 0303 	adds.w	r3, ip, r3
 8000d36:	f106 34ff 	add.w	r4, r6, #4294967295	@ 0xffffffff
 8000d3a:	d202      	bcs.n	8000d42 <__udivmoddi4+0x11a>
 8000d3c:	4298      	cmp	r0, r3
 8000d3e:	f200 80cd 	bhi.w	8000edc <__udivmoddi4+0x2b4>
 8000d42:	4626      	mov	r6, r4
 8000d44:	1a1c      	subs	r4, r3, r0
 8000d46:	fa1f f38e 	uxth.w	r3, lr
 8000d4a:	fbb4 f0f8 	udiv	r0, r4, r8
 8000d4e:	fb08 4410 	mls	r4, r8, r0, r4
 8000d52:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000d56:	fb00 f707 	mul.w	r7, r0, r7
 8000d5a:	429f      	cmp	r7, r3
 8000d5c:	d908      	bls.n	8000d70 <__udivmoddi4+0x148>
 8000d5e:	eb1c 0303 	adds.w	r3, ip, r3
 8000d62:	f100 34ff 	add.w	r4, r0, #4294967295	@ 0xffffffff
 8000d66:	d202      	bcs.n	8000d6e <__udivmoddi4+0x146>
 8000d68:	429f      	cmp	r7, r3
 8000d6a:	f200 80b0 	bhi.w	8000ece <__udivmoddi4+0x2a6>
 8000d6e:	4620      	mov	r0, r4
 8000d70:	1bdb      	subs	r3, r3, r7
 8000d72:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000d76:	e7a5      	b.n	8000cc4 <__udivmoddi4+0x9c>
 8000d78:	f1c1 0620 	rsb	r6, r1, #32
 8000d7c:	408b      	lsls	r3, r1
 8000d7e:	fa22 f706 	lsr.w	r7, r2, r6
 8000d82:	431f      	orrs	r7, r3
 8000d84:	fa20 fc06 	lsr.w	ip, r0, r6
 8000d88:	fa04 f301 	lsl.w	r3, r4, r1
 8000d8c:	ea43 030c 	orr.w	r3, r3, ip
 8000d90:	40f4      	lsrs	r4, r6
 8000d92:	fa00 f801 	lsl.w	r8, r0, r1
 8000d96:	0c38      	lsrs	r0, r7, #16
 8000d98:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000d9c:	fbb4 fef0 	udiv	lr, r4, r0
 8000da0:	fa1f fc87 	uxth.w	ip, r7
 8000da4:	fb00 441e 	mls	r4, r0, lr, r4
 8000da8:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000dac:	fb0e f90c 	mul.w	r9, lr, ip
 8000db0:	45a1      	cmp	r9, r4
 8000db2:	fa02 f201 	lsl.w	r2, r2, r1
 8000db6:	d90a      	bls.n	8000dce <__udivmoddi4+0x1a6>
 8000db8:	193c      	adds	r4, r7, r4
 8000dba:	f10e 3aff 	add.w	sl, lr, #4294967295	@ 0xffffffff
 8000dbe:	f080 8084 	bcs.w	8000eca <__udivmoddi4+0x2a2>
 8000dc2:	45a1      	cmp	r9, r4
 8000dc4:	f240 8081 	bls.w	8000eca <__udivmoddi4+0x2a2>
 8000dc8:	f1ae 0e02 	sub.w	lr, lr, #2
 8000dcc:	443c      	add	r4, r7
 8000dce:	eba4 0409 	sub.w	r4, r4, r9
 8000dd2:	fa1f f983 	uxth.w	r9, r3
 8000dd6:	fbb4 f3f0 	udiv	r3, r4, r0
 8000dda:	fb00 4413 	mls	r4, r0, r3, r4
 8000dde:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000de2:	fb03 fc0c 	mul.w	ip, r3, ip
 8000de6:	45a4      	cmp	ip, r4
 8000de8:	d907      	bls.n	8000dfa <__udivmoddi4+0x1d2>
 8000dea:	193c      	adds	r4, r7, r4
 8000dec:	f103 30ff 	add.w	r0, r3, #4294967295	@ 0xffffffff
 8000df0:	d267      	bcs.n	8000ec2 <__udivmoddi4+0x29a>
 8000df2:	45a4      	cmp	ip, r4
 8000df4:	d965      	bls.n	8000ec2 <__udivmoddi4+0x29a>
 8000df6:	3b02      	subs	r3, #2
 8000df8:	443c      	add	r4, r7
 8000dfa:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000dfe:	fba0 9302 	umull	r9, r3, r0, r2
 8000e02:	eba4 040c 	sub.w	r4, r4, ip
 8000e06:	429c      	cmp	r4, r3
 8000e08:	46ce      	mov	lr, r9
 8000e0a:	469c      	mov	ip, r3
 8000e0c:	d351      	bcc.n	8000eb2 <__udivmoddi4+0x28a>
 8000e0e:	d04e      	beq.n	8000eae <__udivmoddi4+0x286>
 8000e10:	b155      	cbz	r5, 8000e28 <__udivmoddi4+0x200>
 8000e12:	ebb8 030e 	subs.w	r3, r8, lr
 8000e16:	eb64 040c 	sbc.w	r4, r4, ip
 8000e1a:	fa04 f606 	lsl.w	r6, r4, r6
 8000e1e:	40cb      	lsrs	r3, r1
 8000e20:	431e      	orrs	r6, r3
 8000e22:	40cc      	lsrs	r4, r1
 8000e24:	e9c5 6400 	strd	r6, r4, [r5]
 8000e28:	2100      	movs	r1, #0
 8000e2a:	e750      	b.n	8000cce <__udivmoddi4+0xa6>
 8000e2c:	f1c2 0320 	rsb	r3, r2, #32
 8000e30:	fa20 f103 	lsr.w	r1, r0, r3
 8000e34:	fa0c fc02 	lsl.w	ip, ip, r2
 8000e38:	fa24 f303 	lsr.w	r3, r4, r3
 8000e3c:	4094      	lsls	r4, r2
 8000e3e:	430c      	orrs	r4, r1
 8000e40:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000e44:	fa00 fe02 	lsl.w	lr, r0, r2
 8000e48:	fa1f f78c 	uxth.w	r7, ip
 8000e4c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000e50:	fb08 3110 	mls	r1, r8, r0, r3
 8000e54:	0c23      	lsrs	r3, r4, #16
 8000e56:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000e5a:	fb00 f107 	mul.w	r1, r0, r7
 8000e5e:	4299      	cmp	r1, r3
 8000e60:	d908      	bls.n	8000e74 <__udivmoddi4+0x24c>
 8000e62:	eb1c 0303 	adds.w	r3, ip, r3
 8000e66:	f100 36ff 	add.w	r6, r0, #4294967295	@ 0xffffffff
 8000e6a:	d22c      	bcs.n	8000ec6 <__udivmoddi4+0x29e>
 8000e6c:	4299      	cmp	r1, r3
 8000e6e:	d92a      	bls.n	8000ec6 <__udivmoddi4+0x29e>
 8000e70:	3802      	subs	r0, #2
 8000e72:	4463      	add	r3, ip
 8000e74:	1a5b      	subs	r3, r3, r1
 8000e76:	b2a4      	uxth	r4, r4
 8000e78:	fbb3 f1f8 	udiv	r1, r3, r8
 8000e7c:	fb08 3311 	mls	r3, r8, r1, r3
 8000e80:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000e84:	fb01 f307 	mul.w	r3, r1, r7
 8000e88:	42a3      	cmp	r3, r4
 8000e8a:	d908      	bls.n	8000e9e <__udivmoddi4+0x276>
 8000e8c:	eb1c 0404 	adds.w	r4, ip, r4
 8000e90:	f101 36ff 	add.w	r6, r1, #4294967295	@ 0xffffffff
 8000e94:	d213      	bcs.n	8000ebe <__udivmoddi4+0x296>
 8000e96:	42a3      	cmp	r3, r4
 8000e98:	d911      	bls.n	8000ebe <__udivmoddi4+0x296>
 8000e9a:	3902      	subs	r1, #2
 8000e9c:	4464      	add	r4, ip
 8000e9e:	1ae4      	subs	r4, r4, r3
 8000ea0:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000ea4:	e739      	b.n	8000d1a <__udivmoddi4+0xf2>
 8000ea6:	4604      	mov	r4, r0
 8000ea8:	e6f0      	b.n	8000c8c <__udivmoddi4+0x64>
 8000eaa:	4608      	mov	r0, r1
 8000eac:	e706      	b.n	8000cbc <__udivmoddi4+0x94>
 8000eae:	45c8      	cmp	r8, r9
 8000eb0:	d2ae      	bcs.n	8000e10 <__udivmoddi4+0x1e8>
 8000eb2:	ebb9 0e02 	subs.w	lr, r9, r2
 8000eb6:	eb63 0c07 	sbc.w	ip, r3, r7
 8000eba:	3801      	subs	r0, #1
 8000ebc:	e7a8      	b.n	8000e10 <__udivmoddi4+0x1e8>
 8000ebe:	4631      	mov	r1, r6
 8000ec0:	e7ed      	b.n	8000e9e <__udivmoddi4+0x276>
 8000ec2:	4603      	mov	r3, r0
 8000ec4:	e799      	b.n	8000dfa <__udivmoddi4+0x1d2>
 8000ec6:	4630      	mov	r0, r6
 8000ec8:	e7d4      	b.n	8000e74 <__udivmoddi4+0x24c>
 8000eca:	46d6      	mov	lr, sl
 8000ecc:	e77f      	b.n	8000dce <__udivmoddi4+0x1a6>
 8000ece:	4463      	add	r3, ip
 8000ed0:	3802      	subs	r0, #2
 8000ed2:	e74d      	b.n	8000d70 <__udivmoddi4+0x148>
 8000ed4:	4606      	mov	r6, r0
 8000ed6:	4623      	mov	r3, r4
 8000ed8:	4608      	mov	r0, r1
 8000eda:	e70f      	b.n	8000cfc <__udivmoddi4+0xd4>
 8000edc:	3e02      	subs	r6, #2
 8000ede:	4463      	add	r3, ip
 8000ee0:	e730      	b.n	8000d44 <__udivmoddi4+0x11c>
 8000ee2:	bf00      	nop

08000ee4 <__aeabi_idiv0>:
 8000ee4:	4770      	bx	lr
 8000ee6:	bf00      	nop

08000ee8 <HAL_UART_TxCpltCallback>:

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */


void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart){
 8000ee8:	b480      	push	{r7}
 8000eea:	b083      	sub	sp, #12
 8000eec:	af00      	add	r7, sp, #0
 8000eee:	6078      	str	r0, [r7, #4]
	hsLog.DMAdataSentOut += 1; // use this and keep a single buffer?
 8000ef0:	4b06      	ldr	r3, [pc, #24]	@ (8000f0c <HAL_UART_TxCpltCallback+0x24>)
 8000ef2:	f893 3fb4 	ldrb.w	r3, [r3, #4020]	@ 0xfb4
 8000ef6:	3301      	adds	r3, #1
 8000ef8:	b2da      	uxtb	r2, r3
 8000efa:	4b04      	ldr	r3, [pc, #16]	@ (8000f0c <HAL_UART_TxCpltCallback+0x24>)
 8000efc:	f883 2fb4 	strb.w	r2, [r3, #4020]	@ 0xfb4
}
 8000f00:	bf00      	nop
 8000f02:	370c      	adds	r7, #12
 8000f04:	46bd      	mov	sp, r7
 8000f06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f0a:	4770      	bx	lr
 8000f0c:	200007b8 	.word	0x200007b8

08000f10 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000f10:	b580      	push	{r7, lr}
 8000f12:	b084      	sub	sp, #16
 8000f14:	af02      	add	r7, sp, #8
 8000f16:	6078      	str	r0, [r7, #4]
	/* TIM1 is set to fire at half the pwm freq, so 10Khz as the pwm freq is 40Khz. Since RPR= 3
	 * is set before the timer is on, the timer fires at the underflow interrupt
	 */
	if (htim->Instance==TIM1){
 8000f18:	687b      	ldr	r3, [r7, #4]
 8000f1a:	681b      	ldr	r3, [r3, #0]
 8000f1c:	4a9e      	ldr	r2, [pc, #632]	@ (8001198 <HAL_TIM_PeriodElapsedCallback+0x288>)
 8000f1e:	4293      	cmp	r3, r2
 8000f20:	f040 82ac 	bne.w	800147c <HAL_TIM_PeriodElapsedCallback+0x56c>
		dt = SysTick->VAL - t0;
 8000f24:	4b9d      	ldr	r3, [pc, #628]	@ (800119c <HAL_TIM_PeriodElapsedCallback+0x28c>)
 8000f26:	689b      	ldr	r3, [r3, #8]
 8000f28:	4a9d      	ldr	r2, [pc, #628]	@ (80011a0 <HAL_TIM_PeriodElapsedCallback+0x290>)
 8000f2a:	6812      	ldr	r2, [r2, #0]
 8000f2c:	1a9b      	subs	r3, r3, r2
 8000f2e:	461a      	mov	r2, r3
 8000f30:	4b9c      	ldr	r3, [pc, #624]	@ (80011a4 <HAL_TIM_PeriodElapsedCallback+0x294>)
 8000f32:	601a      	str	r2, [r3, #0]
		t0 = SysTick->VAL;
 8000f34:	4b99      	ldr	r3, [pc, #612]	@ (800119c <HAL_TIM_PeriodElapsedCallback+0x28c>)
 8000f36:	689b      	ldr	r3, [r3, #8]
 8000f38:	461a      	mov	r2, r3
 8000f3a:	4b99      	ldr	r3, [pc, #612]	@ (80011a0 <HAL_TIM_PeriodElapsedCallback+0x290>)
 8000f3c:	601a      	str	r2, [r3, #0]
		svpwm.loopCounter++;
 8000f3e:	4b9a      	ldr	r3, [pc, #616]	@ (80011a8 <HAL_TIM_PeriodElapsedCallback+0x298>)
 8000f40:	681b      	ldr	r3, [r3, #0]
 8000f42:	3301      	adds	r3, #1
 8000f44:	4a98      	ldr	r2, [pc, #608]	@ (80011a8 <HAL_TIM_PeriodElapsedCallback+0x298>)
 8000f46:	6013      	str	r3, [r2, #0]

		if (readPosition){
 8000f48:	4b98      	ldr	r3, [pc, #608]	@ (80011ac <HAL_TIM_PeriodElapsedCallback+0x29c>)
 8000f4a:	f993 3000 	ldrsb.w	r3, [r3]
 8000f4e:	2b00      	cmp	r3, #0
 8000f50:	d02c      	beq.n	8000fac <HAL_TIM_PeriodElapsedCallback+0x9c>
			PositionSensor_update(&ps,TIM1_DT);
 8000f52:	ed9f 0a97 	vldr	s0, [pc, #604]	@ 80011b0 <HAL_TIM_PeriodElapsedCallback+0x2a0>
 8000f56:	4897      	ldr	r0, [pc, #604]	@ (80011b4 <HAL_TIM_PeriodElapsedCallback+0x2a4>)
 8000f58:	f003 f97e 	bl	8004258 <PositionSensor_update>
			getAveragedVelocityRadSec(&ps);
 8000f5c:	4895      	ldr	r0, [pc, #596]	@ (80011b4 <HAL_TIM_PeriodElapsedCallback+0x2a4>)
 8000f5e:	f003 fa49 	bl	80043f4 <getAveragedVelocityRadSec>
			updateSpeedCalc(&s,&ps);
 8000f62:	4994      	ldr	r1, [pc, #592]	@ (80011b4 <HAL_TIM_PeriodElapsedCallback+0x2a4>)
 8000f64:	4894      	ldr	r0, [pc, #592]	@ (80011b8 <HAL_TIM_PeriodElapsedCallback+0x2a8>)
 8000f66:	f003 ffb1 	bl	8004ecc <updateSpeedCalc>
			actual_elRadians = ps.elecRadians - OL_offsetRadians;
 8000f6a:	4b92      	ldr	r3, [pc, #584]	@ (80011b4 <HAL_TIM_PeriodElapsedCallback+0x2a4>)
 8000f6c:	ed93 7a15 	vldr	s14, [r3, #84]	@ 0x54
 8000f70:	4b92      	ldr	r3, [pc, #584]	@ (80011bc <HAL_TIM_PeriodElapsedCallback+0x2ac>)
 8000f72:	edd3 7a00 	vldr	s15, [r3]
 8000f76:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000f7a:	4b91      	ldr	r3, [pc, #580]	@ (80011c0 <HAL_TIM_PeriodElapsedCallback+0x2b0>)
 8000f7c:	edc3 7a00 	vstr	s15, [r3]
			if (actual_elRadians < 0){ //works For CW
 8000f80:	4b8f      	ldr	r3, [pc, #572]	@ (80011c0 <HAL_TIM_PeriodElapsedCallback+0x2b0>)
 8000f82:	edd3 7a00 	vldr	s15, [r3]
 8000f86:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8000f8a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000f8e:	d50d      	bpl.n	8000fac <HAL_TIM_PeriodElapsedCallback+0x9c>
				temp = 6.28f - actual_elRadians;
 8000f90:	4b8b      	ldr	r3, [pc, #556]	@ (80011c0 <HAL_TIM_PeriodElapsedCallback+0x2b0>)
 8000f92:	edd3 7a00 	vldr	s15, [r3]
 8000f96:	ed9f 7a8b 	vldr	s14, [pc, #556]	@ 80011c4 <HAL_TIM_PeriodElapsedCallback+0x2b4>
 8000f9a:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000f9e:	4b8a      	ldr	r3, [pc, #552]	@ (80011c8 <HAL_TIM_PeriodElapsedCallback+0x2b8>)
 8000fa0:	edc3 7a00 	vstr	s15, [r3]
				actual_elRadians = temp;
 8000fa4:	4b88      	ldr	r3, [pc, #544]	@ (80011c8 <HAL_TIM_PeriodElapsedCallback+0x2b8>)
 8000fa6:	681b      	ldr	r3, [r3, #0]
 8000fa8:	4a85      	ldr	r2, [pc, #532]	@ (80011c0 <HAL_TIM_PeriodElapsedCallback+0x2b0>)
 8000faa:	6013      	str	r3, [r2, #0]
			}
		}

		if (runOL){
 8000fac:	4b87      	ldr	r3, [pc, #540]	@ (80011cc <HAL_TIM_PeriodElapsedCallback+0x2bc>)
 8000fae:	781b      	ldrb	r3, [r3, #0]
 8000fb0:	2b00      	cmp	r3, #0
 8000fb2:	f000 808f 	beq.w	80010d4 <HAL_TIM_PeriodElapsedCallback+0x1c4>
			if (svpwm.loopCounter > lastOL_Counter+OL_delayCycles){
 8000fb6:	4b7c      	ldr	r3, [pc, #496]	@ (80011a8 <HAL_TIM_PeriodElapsedCallback+0x298>)
 8000fb8:	681a      	ldr	r2, [r3, #0]
 8000fba:	4b85      	ldr	r3, [pc, #532]	@ (80011d0 <HAL_TIM_PeriodElapsedCallback+0x2c0>)
 8000fbc:	881b      	ldrh	r3, [r3, #0]
 8000fbe:	4619      	mov	r1, r3
 8000fc0:	4b84      	ldr	r3, [pc, #528]	@ (80011d4 <HAL_TIM_PeriodElapsedCallback+0x2c4>)
 8000fc2:	681b      	ldr	r3, [r3, #0]
 8000fc4:	440b      	add	r3, r1
 8000fc6:	429a      	cmp	r2, r3
 8000fc8:	f340 8084 	ble.w	80010d4 <HAL_TIM_PeriodElapsedCallback+0x1c4>
				OL_elecRadians += d_elecRadians;
 8000fcc:	4b82      	ldr	r3, [pc, #520]	@ (80011d8 <HAL_TIM_PeriodElapsedCallback+0x2c8>)
 8000fce:	ed93 7a00 	vldr	s14, [r3]
 8000fd2:	4b82      	ldr	r3, [pc, #520]	@ (80011dc <HAL_TIM_PeriodElapsedCallback+0x2cc>)
 8000fd4:	edd3 7a00 	vldr	s15, [r3]
 8000fd8:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000fdc:	4b7e      	ldr	r3, [pc, #504]	@ (80011d8 <HAL_TIM_PeriodElapsedCallback+0x2c8>)
 8000fde:	edc3 7a00 	vstr	s15, [r3]
				if (OL_elecRadians >= 6.28f){
 8000fe2:	4b7d      	ldr	r3, [pc, #500]	@ (80011d8 <HAL_TIM_PeriodElapsedCallback+0x2c8>)
 8000fe4:	edd3 7a00 	vldr	s15, [r3]
 8000fe8:	ed9f 7a76 	vldr	s14, [pc, #472]	@ 80011c4 <HAL_TIM_PeriodElapsedCallback+0x2b4>
 8000fec:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000ff0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000ff4:	db03      	blt.n	8000ffe <HAL_TIM_PeriodElapsedCallback+0xee>
					OL_elecRadians = 0;
 8000ff6:	4b78      	ldr	r3, [pc, #480]	@ (80011d8 <HAL_TIM_PeriodElapsedCallback+0x2c8>)
 8000ff8:	f04f 0200 	mov.w	r2, #0
 8000ffc:	601a      	str	r2, [r3, #0]
				}
				if (OL_elecRadians < 0){
 8000ffe:	4b76      	ldr	r3, [pc, #472]	@ (80011d8 <HAL_TIM_PeriodElapsedCallback+0x2c8>)
 8001000:	edd3 7a00 	vldr	s15, [r3]
 8001004:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001008:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800100c:	d502      	bpl.n	8001014 <HAL_TIM_PeriodElapsedCallback+0x104>
					OL_elecRadians = 6.28f;
 800100e:	4b72      	ldr	r3, [pc, #456]	@ (80011d8 <HAL_TIM_PeriodElapsedCallback+0x2c8>)
 8001010:	4a73      	ldr	r2, [pc, #460]	@ (80011e0 <HAL_TIM_PeriodElapsedCallback+0x2d0>)
 8001012:	601a      	str	r2, [r3, #0]
				}
				error_elecRadians = OL_elecRadians - actual_elRadians;
 8001014:	4b70      	ldr	r3, [pc, #448]	@ (80011d8 <HAL_TIM_PeriodElapsedCallback+0x2c8>)
 8001016:	ed93 7a00 	vldr	s14, [r3]
 800101a:	4b69      	ldr	r3, [pc, #420]	@ (80011c0 <HAL_TIM_PeriodElapsedCallback+0x2b0>)
 800101c:	edd3 7a00 	vldr	s15, [r3]
 8001020:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001024:	4b6f      	ldr	r3, [pc, #444]	@ (80011e4 <HAL_TIM_PeriodElapsedCallback+0x2d4>)
 8001026:	edc3 7a00 	vstr	s15, [r3]
				posPID.out = ExecPID(&posPID,OL_elecRadians,actual_elRadians,-0.5,0.5);
 800102a:	4b6b      	ldr	r3, [pc, #428]	@ (80011d8 <HAL_TIM_PeriodElapsedCallback+0x2c8>)
 800102c:	edd3 7a00 	vldr	s15, [r3]
 8001030:	4b63      	ldr	r3, [pc, #396]	@ (80011c0 <HAL_TIM_PeriodElapsedCallback+0x2b0>)
 8001032:	ed93 7a00 	vldr	s14, [r3]
 8001036:	eef6 1a00 	vmov.f32	s3, #96	@ 0x3f000000  0.5
 800103a:	eebe 1a00 	vmov.f32	s2, #224	@ 0xbf000000 -0.5
 800103e:	eef0 0a47 	vmov.f32	s1, s14
 8001042:	eeb0 0a67 	vmov.f32	s0, s15
 8001046:	4868      	ldr	r0, [pc, #416]	@ (80011e8 <HAL_TIM_PeriodElapsedCallback+0x2d8>)
 8001048:	f002 fb66 	bl	8003718 <ExecPID>
 800104c:	eef0 7a40 	vmov.f32	s15, s0
 8001050:	4b65      	ldr	r3, [pc, #404]	@ (80011e8 <HAL_TIM_PeriodElapsedCallback+0x2d8>)
 8001052:	edc3 7a09 	vstr	s15, [r3, #36]	@ 0x24
				svpwm.voltagePercent = r.currentDutyF/TIMER1_ARR;
 8001056:	4b65      	ldr	r3, [pc, #404]	@ (80011ec <HAL_TIM_PeriodElapsedCallback+0x2dc>)
 8001058:	ed93 7a01 	vldr	s14, [r3, #4]
 800105c:	eddf 6a64 	vldr	s13, [pc, #400]	@ 80011f0 <HAL_TIM_PeriodElapsedCallback+0x2e0>
 8001060:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001064:	4b50      	ldr	r3, [pc, #320]	@ (80011a8 <HAL_TIM_PeriodElapsedCallback+0x298>)
 8001066:	edc3 7a01 	vstr	s15, [r3, #4]
				correctionPercent = posPID.out;
 800106a:	4b5f      	ldr	r3, [pc, #380]	@ (80011e8 <HAL_TIM_PeriodElapsedCallback+0x2d8>)
 800106c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800106e:	4a61      	ldr	r2, [pc, #388]	@ (80011f4 <HAL_TIM_PeriodElapsedCallback+0x2e4>)
 8001070:	6013      	str	r3, [r2, #0]
				out2  = svpwm.voltagePercent + correctionPercent;
 8001072:	4b4d      	ldr	r3, [pc, #308]	@ (80011a8 <HAL_TIM_PeriodElapsedCallback+0x298>)
 8001074:	ed93 7a01 	vldr	s14, [r3, #4]
 8001078:	4b5e      	ldr	r3, [pc, #376]	@ (80011f4 <HAL_TIM_PeriodElapsedCallback+0x2e4>)
 800107a:	edd3 7a00 	vldr	s15, [r3]
 800107e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001082:	4b5d      	ldr	r3, [pc, #372]	@ (80011f8 <HAL_TIM_PeriodElapsedCallback+0x2e8>)
 8001084:	edc3 7a00 	vstr	s15, [r3]
				foc.m = svpwm.voltagePercent;
 8001088:	4b47      	ldr	r3, [pc, #284]	@ (80011a8 <HAL_TIM_PeriodElapsedCallback+0x298>)
 800108a:	685b      	ldr	r3, [r3, #4]
 800108c:	4a5b      	ldr	r2, [pc, #364]	@ (80011fc <HAL_TIM_PeriodElapsedCallback+0x2ec>)
 800108e:	6353      	str	r3, [r2, #52]	@ 0x34
				if (addCorrectionPercent){
 8001090:	4b5b      	ldr	r3, [pc, #364]	@ (8001200 <HAL_TIM_PeriodElapsedCallback+0x2f0>)
 8001092:	781b      	ldrb	r3, [r3, #0]
 8001094:	2b00      	cmp	r3, #0
 8001096:	d003      	beq.n	80010a0 <HAL_TIM_PeriodElapsedCallback+0x190>
					foc.m = out2;
 8001098:	4b57      	ldr	r3, [pc, #348]	@ (80011f8 <HAL_TIM_PeriodElapsedCallback+0x2e8>)
 800109a:	681b      	ldr	r3, [r3, #0]
 800109c:	4a57      	ldr	r2, [pc, #348]	@ (80011fc <HAL_TIM_PeriodElapsedCallback+0x2ec>)
 800109e:	6353      	str	r3, [r2, #52]	@ 0x34
				}
				FOC_calcSVPWM(&svpwm,foc.m,OL_elecRadians,0);//PI_BY_2F);
 80010a0:	4b56      	ldr	r3, [pc, #344]	@ (80011fc <HAL_TIM_PeriodElapsedCallback+0x2ec>)
 80010a2:	edd3 7a0d 	vldr	s15, [r3, #52]	@ 0x34
 80010a6:	4b4c      	ldr	r3, [pc, #304]	@ (80011d8 <HAL_TIM_PeriodElapsedCallback+0x2c8>)
 80010a8:	ed93 7a00 	vldr	s14, [r3]
 80010ac:	ed9f 1a55 	vldr	s2, [pc, #340]	@ 8001204 <HAL_TIM_PeriodElapsedCallback+0x2f4>
 80010b0:	eef0 0a47 	vmov.f32	s1, s14
 80010b4:	eeb0 0a67 	vmov.f32	s0, s15
 80010b8:	483b      	ldr	r0, [pc, #236]	@ (80011a8 <HAL_TIM_PeriodElapsedCallback+0x298>)
 80010ba:	f001 fff5 	bl	80030a8 <FOC_calcSVPWM>
				FOC_applyPWM(&svpwm,0,ms.reversePhases);
 80010be:	4b52      	ldr	r3, [pc, #328]	@ (8001208 <HAL_TIM_PeriodElapsedCallback+0x2f8>)
 80010c0:	7a9b      	ldrb	r3, [r3, #10]
 80010c2:	461a      	mov	r2, r3
 80010c4:	2100      	movs	r1, #0
 80010c6:	4838      	ldr	r0, [pc, #224]	@ (80011a8 <HAL_TIM_PeriodElapsedCallback+0x298>)
 80010c8:	f002 f958 	bl	800337c <FOC_applyPWM>
				lastOL_Counter = svpwm.loopCounter;
 80010cc:	4b36      	ldr	r3, [pc, #216]	@ (80011a8 <HAL_TIM_PeriodElapsedCallback+0x298>)
 80010ce:	681b      	ldr	r3, [r3, #0]
 80010d0:	4a40      	ldr	r2, [pc, #256]	@ (80011d4 <HAL_TIM_PeriodElapsedCallback+0x2c4>)
 80010d2:	6013      	str	r3, [r2, #0]
			}
		}

		//only changing the duty cycle and SVPWM
		if (r.rampPhase!=RAMP_WAIT){
 80010d4:	4b45      	ldr	r3, [pc, #276]	@ (80011ec <HAL_TIM_PeriodElapsedCallback+0x2dc>)
 80010d6:	7f1b      	ldrb	r3, [r3, #28]
 80010d8:	2b04      	cmp	r3, #4
 80010da:	f000 80d2 	beq.w	8001282 <HAL_TIM_PeriodElapsedCallback+0x372>
			svpwm.voltagePercent = r.currentDutyF/TIMER1_ARR;
 80010de:	4b43      	ldr	r3, [pc, #268]	@ (80011ec <HAL_TIM_PeriodElapsedCallback+0x2dc>)
 80010e0:	ed93 7a01 	vldr	s14, [r3, #4]
 80010e4:	eddf 6a42 	vldr	s13, [pc, #264]	@ 80011f0 <HAL_TIM_PeriodElapsedCallback+0x2e0>
 80010e8:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80010ec:	4b2e      	ldr	r3, [pc, #184]	@ (80011a8 <HAL_TIM_PeriodElapsedCallback+0x298>)
 80010ee:	edc3 7a01 	vstr	s15, [r3, #4]
			fr.inst_frictionAddition = 0;
 80010f2:	4b46      	ldr	r3, [pc, #280]	@ (800120c <HAL_TIM_PeriodElapsedCallback+0x2fc>)
 80010f4:	f04f 0200 	mov.w	r2, #0
 80010f8:	611a      	str	r2, [r3, #16]
			cg.inst_coggingAddition = 0;
 80010fa:	4b45      	ldr	r3, [pc, #276]	@ (8001210 <HAL_TIM_PeriodElapsedCallback+0x300>)
 80010fc:	f04f 0200 	mov.w	r2, #0
 8001100:	615a      	str	r2, [r3, #20]
			if (fr.frictionCompensationOn){
 8001102:	4b42      	ldr	r3, [pc, #264]	@ (800120c <HAL_TIM_PeriodElapsedCallback+0x2fc>)
 8001104:	781b      	ldrb	r3, [r3, #0]
 8001106:	2b00      	cmp	r3, #0
 8001108:	d006      	beq.n	8001118 <HAL_TIM_PeriodElapsedCallback+0x208>
				lookupFrictionAddition(&fr,ps.encoder_raw); // NOT sure why sign is changing for the two sides..
 800110a:	4b2a      	ldr	r3, [pc, #168]	@ (80011b4 <HAL_TIM_PeriodElapsedCallback+0x2a4>)
 800110c:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8001110:	4619      	mov	r1, r3
 8001112:	483e      	ldr	r0, [pc, #248]	@ (800120c <HAL_TIM_PeriodElapsedCallback+0x2fc>)
 8001114:	f001 fd78 	bl	8002c08 <lookupFrictionAddition>
			}
			if (cg.coggingCompensationOn){
 8001118:	4b3d      	ldr	r3, [pc, #244]	@ (8001210 <HAL_TIM_PeriodElapsedCallback+0x300>)
 800111a:	781b      	ldrb	r3, [r3, #0]
 800111c:	2b00      	cmp	r3, #0
 800111e:	d007      	beq.n	8001130 <HAL_TIM_PeriodElapsedCallback+0x220>
				lookupCoggingAddition(&cg,ps.elecRadians);
 8001120:	4b24      	ldr	r3, [pc, #144]	@ (80011b4 <HAL_TIM_PeriodElapsedCallback+0x2a4>)
 8001122:	edd3 7a15 	vldr	s15, [r3, #84]	@ 0x54
 8001126:	eeb0 0a67 	vmov.f32	s0, s15
 800112a:	4839      	ldr	r0, [pc, #228]	@ (8001210 <HAL_TIM_PeriodElapsedCallback+0x300>)
 800112c:	f001 fdb6 	bl	8002c9c <lookupCoggingAddition>
			}
			if (direction == CW){
 8001130:	4b38      	ldr	r3, [pc, #224]	@ (8001214 <HAL_TIM_PeriodElapsedCallback+0x304>)
 8001132:	f993 3000 	ldrsb.w	r3, [r3]
 8001136:	2b01      	cmp	r3, #1
 8001138:	d170      	bne.n	800121c <HAL_TIM_PeriodElapsedCallback+0x30c>
				foc.m = svpwm.voltagePercent + fr.inst_frictionAddition + cg.inst_coggingAddition;//
 800113a:	4b1b      	ldr	r3, [pc, #108]	@ (80011a8 <HAL_TIM_PeriodElapsedCallback+0x298>)
 800113c:	ed93 7a01 	vldr	s14, [r3, #4]
 8001140:	4b32      	ldr	r3, [pc, #200]	@ (800120c <HAL_TIM_PeriodElapsedCallback+0x2fc>)
 8001142:	edd3 7a04 	vldr	s15, [r3, #16]
 8001146:	ee37 7a27 	vadd.f32	s14, s14, s15
 800114a:	4b31      	ldr	r3, [pc, #196]	@ (8001210 <HAL_TIM_PeriodElapsedCallback+0x300>)
 800114c:	edd3 7a05 	vldr	s15, [r3, #20]
 8001150:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001154:	4b29      	ldr	r3, [pc, #164]	@ (80011fc <HAL_TIM_PeriodElapsedCallback+0x2ec>)
 8001156:	edc3 7a0d 	vstr	s15, [r3, #52]	@ 0x34
				FOC_calcSVPWM(&svpwm,foc.m,ps.elecRadians,PI_BY_3F+ms.encCW_offset);
 800115a:	4b28      	ldr	r3, [pc, #160]	@ (80011fc <HAL_TIM_PeriodElapsedCallback+0x2ec>)
 800115c:	ed93 7a0d 	vldr	s14, [r3, #52]	@ 0x34
 8001160:	4b14      	ldr	r3, [pc, #80]	@ (80011b4 <HAL_TIM_PeriodElapsedCallback+0x2a4>)
 8001162:	edd3 6a15 	vldr	s13, [r3, #84]	@ 0x54
 8001166:	4b28      	ldr	r3, [pc, #160]	@ (8001208 <HAL_TIM_PeriodElapsedCallback+0x2f8>)
 8001168:	edd3 7a00 	vldr	s15, [r3]
 800116c:	ed9f 6a2a 	vldr	s12, [pc, #168]	@ 8001218 <HAL_TIM_PeriodElapsedCallback+0x308>
 8001170:	ee77 7a86 	vadd.f32	s15, s15, s12
 8001174:	eeb0 1a67 	vmov.f32	s2, s15
 8001178:	eef0 0a66 	vmov.f32	s1, s13
 800117c:	eeb0 0a47 	vmov.f32	s0, s14
 8001180:	4809      	ldr	r0, [pc, #36]	@ (80011a8 <HAL_TIM_PeriodElapsedCallback+0x298>)
 8001182:	f001 ff91 	bl	80030a8 <FOC_calcSVPWM>
				FOC_applyPWM(&svpwm,0,ms.reversePhases);
 8001186:	4b20      	ldr	r3, [pc, #128]	@ (8001208 <HAL_TIM_PeriodElapsedCallback+0x2f8>)
 8001188:	7a9b      	ldrb	r3, [r3, #10]
 800118a:	461a      	mov	r2, r3
 800118c:	2100      	movs	r1, #0
 800118e:	4806      	ldr	r0, [pc, #24]	@ (80011a8 <HAL_TIM_PeriodElapsedCallback+0x298>)
 8001190:	f002 f8f4 	bl	800337c <FOC_applyPWM>
 8001194:	e075      	b.n	8001282 <HAL_TIM_PeriodElapsedCallback+0x372>
 8001196:	bf00      	nop
 8001198:	40012c00 	.word	0x40012c00
 800119c:	e000e010 	.word	0xe000e010
 80011a0:	200018a4 	.word	0x200018a4
 80011a4:	200018a0 	.word	0x200018a0
 80011a8:	200006e4 	.word	0x200006e4
 80011ac:	20001865 	.word	0x20001865
 80011b0:	38d1b717 	.word	0x38d1b717
 80011b4:	200005f8 	.word	0x200005f8
 80011b8:	20000668 	.word	0x20000668
 80011bc:	20001880 	.word	0x20001880
 80011c0:	2000187c 	.word	0x2000187c
 80011c4:	40c8f5c3 	.word	0x40c8f5c3
 80011c8:	20001884 	.word	0x20001884
 80011cc:	20001870 	.word	0x20001870
 80011d0:	20000002 	.word	0x20000002
 80011d4:	20001874 	.word	0x20001874
 80011d8:	20001868 	.word	0x20001868
 80011dc:	2000186c 	.word	0x2000186c
 80011e0:	40c8f5c3 	.word	0x40c8f5c3
 80011e4:	20001878 	.word	0x20001878
 80011e8:	200017a4 	.word	0x200017a4
 80011ec:	20000718 	.word	0x20000718
 80011f0:	449c2000 	.word	0x449c2000
 80011f4:	20001888 	.word	0x20001888
 80011f8:	20001890 	.word	0x20001890
 80011fc:	20000748 	.word	0x20000748
 8001200:	2000188c 	.word	0x2000188c
 8001204:	00000000 	.word	0x00000000
 8001208:	2000070c 	.word	0x2000070c
 800120c:	20001824 	.word	0x20001824
 8001210:	20001838 	.word	0x20001838
 8001214:	20000000 	.word	0x20000000
 8001218:	3f860a92 	.word	0x3f860a92
			}else if (direction == CCW){
 800121c:	4bae      	ldr	r3, [pc, #696]	@ (80014d8 <HAL_TIM_PeriodElapsedCallback+0x5c8>)
 800121e:	f993 3000 	ldrsb.w	r3, [r3]
 8001222:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8001226:	d12c      	bne.n	8001282 <HAL_TIM_PeriodElapsedCallback+0x372>
				foc.m = svpwm.voltagePercent - fr.inst_frictionAddition + cg.inst_coggingAddition;//
 8001228:	4bac      	ldr	r3, [pc, #688]	@ (80014dc <HAL_TIM_PeriodElapsedCallback+0x5cc>)
 800122a:	ed93 7a01 	vldr	s14, [r3, #4]
 800122e:	4bac      	ldr	r3, [pc, #688]	@ (80014e0 <HAL_TIM_PeriodElapsedCallback+0x5d0>)
 8001230:	edd3 7a04 	vldr	s15, [r3, #16]
 8001234:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001238:	4baa      	ldr	r3, [pc, #680]	@ (80014e4 <HAL_TIM_PeriodElapsedCallback+0x5d4>)
 800123a:	edd3 7a05 	vldr	s15, [r3, #20]
 800123e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001242:	4ba9      	ldr	r3, [pc, #676]	@ (80014e8 <HAL_TIM_PeriodElapsedCallback+0x5d8>)
 8001244:	edc3 7a0d 	vstr	s15, [r3, #52]	@ 0x34
				FOC_calcSVPWM(&svpwm,foc.m,ps.elecRadians,-PI_BY_3F+ms.encCCW_offset);
 8001248:	4ba7      	ldr	r3, [pc, #668]	@ (80014e8 <HAL_TIM_PeriodElapsedCallback+0x5d8>)
 800124a:	ed93 7a0d 	vldr	s14, [r3, #52]	@ 0x34
 800124e:	4ba7      	ldr	r3, [pc, #668]	@ (80014ec <HAL_TIM_PeriodElapsedCallback+0x5dc>)
 8001250:	edd3 6a15 	vldr	s13, [r3, #84]	@ 0x54
 8001254:	4ba6      	ldr	r3, [pc, #664]	@ (80014f0 <HAL_TIM_PeriodElapsedCallback+0x5e0>)
 8001256:	edd3 7a01 	vldr	s15, [r3, #4]
 800125a:	ed9f 6aa6 	vldr	s12, [pc, #664]	@ 80014f4 <HAL_TIM_PeriodElapsedCallback+0x5e4>
 800125e:	ee77 7ac6 	vsub.f32	s15, s15, s12
 8001262:	eeb0 1a67 	vmov.f32	s2, s15
 8001266:	eef0 0a66 	vmov.f32	s1, s13
 800126a:	eeb0 0a47 	vmov.f32	s0, s14
 800126e:	489b      	ldr	r0, [pc, #620]	@ (80014dc <HAL_TIM_PeriodElapsedCallback+0x5cc>)
 8001270:	f001 ff1a 	bl	80030a8 <FOC_calcSVPWM>
				FOC_applyPWM(&svpwm,0,ms.reversePhases);
 8001274:	4b9e      	ldr	r3, [pc, #632]	@ (80014f0 <HAL_TIM_PeriodElapsedCallback+0x5e0>)
 8001276:	7a9b      	ldrb	r3, [r3, #10]
 8001278:	461a      	mov	r2, r3
 800127a:	2100      	movs	r1, #0
 800127c:	4897      	ldr	r0, [pc, #604]	@ (80014dc <HAL_TIM_PeriodElapsedCallback+0x5cc>)
 800127e:	f002 f87d 	bl	800337c <FOC_applyPWM>
			}else{}
		} //closes RAMP wait

		if (rampRPM.rampPhase!=RAMP_WAIT){
 8001282:	4b9d      	ldr	r3, [pc, #628]	@ (80014f8 <HAL_TIM_PeriodElapsedCallback+0x5e8>)
 8001284:	7c1b      	ldrb	r3, [r3, #16]
 8001286:	2b04      	cmp	r3, #4
 8001288:	f000 80a7 	beq.w	80013da <HAL_TIM_PeriodElapsedCallback+0x4ca>
			//quick and dirty voltage pid has no anti windup and is limited to only positive nos
			speedPID.out = ExecVoltagePID(&speedPID,rampRPM.instTargetRPM_F,fabs(ps.velocityRPM),0,800); // voltage PID running inside the Hight Task Freq!
 800128c:	4b9a      	ldr	r3, [pc, #616]	@ (80014f8 <HAL_TIM_PeriodElapsedCallback+0x5e8>)
 800128e:	ed93 7a01 	vldr	s14, [r3, #4]
 8001292:	4b96      	ldr	r3, [pc, #600]	@ (80014ec <HAL_TIM_PeriodElapsedCallback+0x5dc>)
 8001294:	edd3 7a19 	vldr	s15, [r3, #100]	@ 0x64
 8001298:	eef0 7ae7 	vabs.f32	s15, s15
 800129c:	eddf 1a97 	vldr	s3, [pc, #604]	@ 80014fc <HAL_TIM_PeriodElapsedCallback+0x5ec>
 80012a0:	ed9f 1a97 	vldr	s2, [pc, #604]	@ 8001500 <HAL_TIM_PeriodElapsedCallback+0x5f0>
 80012a4:	eef0 0a67 	vmov.f32	s1, s15
 80012a8:	eeb0 0a47 	vmov.f32	s0, s14
 80012ac:	4895      	ldr	r0, [pc, #596]	@ (8001504 <HAL_TIM_PeriodElapsedCallback+0x5f4>)
 80012ae:	f002 f9c1 	bl	8003634 <ExecVoltagePID>
 80012b2:	eef0 7a40 	vmov.f32	s15, s0
 80012b6:	4b93      	ldr	r3, [pc, #588]	@ (8001504 <HAL_TIM_PeriodElapsedCallback+0x5f4>)
 80012b8:	edc3 7a09 	vstr	s15, [r3, #36]	@ 0x24
			svpwm.voltagePercent = speedPID.out/TIMER1_ARR;
 80012bc:	4b91      	ldr	r3, [pc, #580]	@ (8001504 <HAL_TIM_PeriodElapsedCallback+0x5f4>)
 80012be:	ed93 7a09 	vldr	s14, [r3, #36]	@ 0x24
 80012c2:	eddf 6a91 	vldr	s13, [pc, #580]	@ 8001508 <HAL_TIM_PeriodElapsedCallback+0x5f8>
 80012c6:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80012ca:	4b84      	ldr	r3, [pc, #528]	@ (80014dc <HAL_TIM_PeriodElapsedCallback+0x5cc>)
 80012cc:	edc3 7a01 	vstr	s15, [r3, #4]

			fr.inst_frictionAddition = 0;
 80012d0:	4b83      	ldr	r3, [pc, #524]	@ (80014e0 <HAL_TIM_PeriodElapsedCallback+0x5d0>)
 80012d2:	f04f 0200 	mov.w	r2, #0
 80012d6:	611a      	str	r2, [r3, #16]
			cg.inst_coggingAddition = 0;
 80012d8:	4b82      	ldr	r3, [pc, #520]	@ (80014e4 <HAL_TIM_PeriodElapsedCallback+0x5d4>)
 80012da:	f04f 0200 	mov.w	r2, #0
 80012de:	615a      	str	r2, [r3, #20]
			if (fr.frictionCompensationOn){
 80012e0:	4b7f      	ldr	r3, [pc, #508]	@ (80014e0 <HAL_TIM_PeriodElapsedCallback+0x5d0>)
 80012e2:	781b      	ldrb	r3, [r3, #0]
 80012e4:	2b00      	cmp	r3, #0
 80012e6:	d006      	beq.n	80012f6 <HAL_TIM_PeriodElapsedCallback+0x3e6>
				lookupFrictionAddition(&fr,ps.encoder_raw); // NOT sure why sign is changing for the two sides..
 80012e8:	4b80      	ldr	r3, [pc, #512]	@ (80014ec <HAL_TIM_PeriodElapsedCallback+0x5dc>)
 80012ea:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 80012ee:	4619      	mov	r1, r3
 80012f0:	487b      	ldr	r0, [pc, #492]	@ (80014e0 <HAL_TIM_PeriodElapsedCallback+0x5d0>)
 80012f2:	f001 fc89 	bl	8002c08 <lookupFrictionAddition>
			}
			if (cg.coggingCompensationOn){
 80012f6:	4b7b      	ldr	r3, [pc, #492]	@ (80014e4 <HAL_TIM_PeriodElapsedCallback+0x5d4>)
 80012f8:	781b      	ldrb	r3, [r3, #0]
 80012fa:	2b00      	cmp	r3, #0
 80012fc:	d007      	beq.n	800130e <HAL_TIM_PeriodElapsedCallback+0x3fe>
				lookupCoggingAddition(&cg,ps.elecRadians);
 80012fe:	4b7b      	ldr	r3, [pc, #492]	@ (80014ec <HAL_TIM_PeriodElapsedCallback+0x5dc>)
 8001300:	edd3 7a15 	vldr	s15, [r3, #84]	@ 0x54
 8001304:	eeb0 0a67 	vmov.f32	s0, s15
 8001308:	4876      	ldr	r0, [pc, #472]	@ (80014e4 <HAL_TIM_PeriodElapsedCallback+0x5d4>)
 800130a:	f001 fcc7 	bl	8002c9c <lookupCoggingAddition>
			}

			if (direction == CW){
 800130e:	4b72      	ldr	r3, [pc, #456]	@ (80014d8 <HAL_TIM_PeriodElapsedCallback+0x5c8>)
 8001310:	f993 3000 	ldrsb.w	r3, [r3]
 8001314:	2b01      	cmp	r3, #1
 8001316:	d12d      	bne.n	8001374 <HAL_TIM_PeriodElapsedCallback+0x464>
				foc.m = svpwm.voltagePercent + fr.inst_frictionAddition + cg.inst_coggingAddition;//
 8001318:	4b70      	ldr	r3, [pc, #448]	@ (80014dc <HAL_TIM_PeriodElapsedCallback+0x5cc>)
 800131a:	ed93 7a01 	vldr	s14, [r3, #4]
 800131e:	4b70      	ldr	r3, [pc, #448]	@ (80014e0 <HAL_TIM_PeriodElapsedCallback+0x5d0>)
 8001320:	edd3 7a04 	vldr	s15, [r3, #16]
 8001324:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001328:	4b6e      	ldr	r3, [pc, #440]	@ (80014e4 <HAL_TIM_PeriodElapsedCallback+0x5d4>)
 800132a:	edd3 7a05 	vldr	s15, [r3, #20]
 800132e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001332:	4b6d      	ldr	r3, [pc, #436]	@ (80014e8 <HAL_TIM_PeriodElapsedCallback+0x5d8>)
 8001334:	edc3 7a0d 	vstr	s15, [r3, #52]	@ 0x34
				FOC_calcSVPWM(&svpwm,foc.m,ps.elecRadians,PI_BY_3F+ms.encCW_offset);
 8001338:	4b6b      	ldr	r3, [pc, #428]	@ (80014e8 <HAL_TIM_PeriodElapsedCallback+0x5d8>)
 800133a:	ed93 7a0d 	vldr	s14, [r3, #52]	@ 0x34
 800133e:	4b6b      	ldr	r3, [pc, #428]	@ (80014ec <HAL_TIM_PeriodElapsedCallback+0x5dc>)
 8001340:	edd3 6a15 	vldr	s13, [r3, #84]	@ 0x54
 8001344:	4b6a      	ldr	r3, [pc, #424]	@ (80014f0 <HAL_TIM_PeriodElapsedCallback+0x5e0>)
 8001346:	edd3 7a00 	vldr	s15, [r3]
 800134a:	ed9f 6a6a 	vldr	s12, [pc, #424]	@ 80014f4 <HAL_TIM_PeriodElapsedCallback+0x5e4>
 800134e:	ee77 7a86 	vadd.f32	s15, s15, s12
 8001352:	eeb0 1a67 	vmov.f32	s2, s15
 8001356:	eef0 0a66 	vmov.f32	s1, s13
 800135a:	eeb0 0a47 	vmov.f32	s0, s14
 800135e:	485f      	ldr	r0, [pc, #380]	@ (80014dc <HAL_TIM_PeriodElapsedCallback+0x5cc>)
 8001360:	f001 fea2 	bl	80030a8 <FOC_calcSVPWM>
				FOC_applyPWM(&svpwm,0,ms.reversePhases);
 8001364:	4b62      	ldr	r3, [pc, #392]	@ (80014f0 <HAL_TIM_PeriodElapsedCallback+0x5e0>)
 8001366:	7a9b      	ldrb	r3, [r3, #10]
 8001368:	461a      	mov	r2, r3
 800136a:	2100      	movs	r1, #0
 800136c:	485b      	ldr	r0, [pc, #364]	@ (80014dc <HAL_TIM_PeriodElapsedCallback+0x5cc>)
 800136e:	f002 f805 	bl	800337c <FOC_applyPWM>
 8001372:	e032      	b.n	80013da <HAL_TIM_PeriodElapsedCallback+0x4ca>
			}else if (direction == CCW){
 8001374:	4b58      	ldr	r3, [pc, #352]	@ (80014d8 <HAL_TIM_PeriodElapsedCallback+0x5c8>)
 8001376:	f993 3000 	ldrsb.w	r3, [r3]
 800137a:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800137e:	d12c      	bne.n	80013da <HAL_TIM_PeriodElapsedCallback+0x4ca>
				foc.m = svpwm.voltagePercent - fr.inst_frictionAddition + cg.inst_coggingAddition;//
 8001380:	4b56      	ldr	r3, [pc, #344]	@ (80014dc <HAL_TIM_PeriodElapsedCallback+0x5cc>)
 8001382:	ed93 7a01 	vldr	s14, [r3, #4]
 8001386:	4b56      	ldr	r3, [pc, #344]	@ (80014e0 <HAL_TIM_PeriodElapsedCallback+0x5d0>)
 8001388:	edd3 7a04 	vldr	s15, [r3, #16]
 800138c:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001390:	4b54      	ldr	r3, [pc, #336]	@ (80014e4 <HAL_TIM_PeriodElapsedCallback+0x5d4>)
 8001392:	edd3 7a05 	vldr	s15, [r3, #20]
 8001396:	ee77 7a27 	vadd.f32	s15, s14, s15
 800139a:	4b53      	ldr	r3, [pc, #332]	@ (80014e8 <HAL_TIM_PeriodElapsedCallback+0x5d8>)
 800139c:	edc3 7a0d 	vstr	s15, [r3, #52]	@ 0x34
				FOC_calcSVPWM(&svpwm,svpwm.voltagePercent,ps.elecRadians,-PI_BY_3F+ms.encCCW_offset);
 80013a0:	4b4e      	ldr	r3, [pc, #312]	@ (80014dc <HAL_TIM_PeriodElapsedCallback+0x5cc>)
 80013a2:	ed93 7a01 	vldr	s14, [r3, #4]
 80013a6:	4b51      	ldr	r3, [pc, #324]	@ (80014ec <HAL_TIM_PeriodElapsedCallback+0x5dc>)
 80013a8:	edd3 6a15 	vldr	s13, [r3, #84]	@ 0x54
 80013ac:	4b50      	ldr	r3, [pc, #320]	@ (80014f0 <HAL_TIM_PeriodElapsedCallback+0x5e0>)
 80013ae:	edd3 7a01 	vldr	s15, [r3, #4]
 80013b2:	ed9f 6a50 	vldr	s12, [pc, #320]	@ 80014f4 <HAL_TIM_PeriodElapsedCallback+0x5e4>
 80013b6:	ee77 7ac6 	vsub.f32	s15, s15, s12
 80013ba:	eeb0 1a67 	vmov.f32	s2, s15
 80013be:	eef0 0a66 	vmov.f32	s1, s13
 80013c2:	eeb0 0a47 	vmov.f32	s0, s14
 80013c6:	4845      	ldr	r0, [pc, #276]	@ (80014dc <HAL_TIM_PeriodElapsedCallback+0x5cc>)
 80013c8:	f001 fe6e 	bl	80030a8 <FOC_calcSVPWM>
				FOC_applyPWM(&svpwm,0,ms.reversePhases);
 80013cc:	4b48      	ldr	r3, [pc, #288]	@ (80014f0 <HAL_TIM_PeriodElapsedCallback+0x5e0>)
 80013ce:	7a9b      	ldrb	r3, [r3, #10]
 80013d0:	461a      	mov	r2, r3
 80013d2:	2100      	movs	r1, #0
 80013d4:	4841      	ldr	r0, [pc, #260]	@ (80014dc <HAL_TIM_PeriodElapsedCallback+0x5cc>)
 80013d6:	f001 ffd1 	bl	800337c <FOC_applyPWM>
			}else{}

		} //closes RAMP wait

		//Logging
		if (hsLog.enable){
 80013da:	4b4c      	ldr	r3, [pc, #304]	@ (800150c <HAL_TIM_PeriodElapsedCallback+0x5fc>)
 80013dc:	781b      	ldrb	r3, [r3, #0]
 80013de:	2b00      	cmp	r3, #0
 80013e0:	d044      	beq.n	800146c <HAL_TIM_PeriodElapsedCallback+0x55c>
			if(hsLog.addDatas == 0){
 80013e2:	4b4a      	ldr	r3, [pc, #296]	@ (800150c <HAL_TIM_PeriodElapsedCallback+0x5fc>)
 80013e4:	f8d3 3fc0 	ldr.w	r3, [r3, #4032]	@ 0xfc0
 80013e8:	2b00      	cmp	r3, #0
 80013ea:	d104      	bne.n	80013f6 <HAL_TIM_PeriodElapsedCallback+0x4e6>
				hsLog.startLoopIndex = svpwm.loopCounter;
 80013ec:	4b3b      	ldr	r3, [pc, #236]	@ (80014dc <HAL_TIM_PeriodElapsedCallback+0x5cc>)
 80013ee:	681b      	ldr	r3, [r3, #0]
 80013f0:	4a46      	ldr	r2, [pc, #280]	@ (800150c <HAL_TIM_PeriodElapsedCallback+0x5fc>)
 80013f2:	f8c2 3fb8 	str.w	r3, [r2, #4024]	@ 0xfb8
			}
			if (hsLog.bufferIndex < HSARRAYSIZE - HSLOGSIZE-1){
 80013f6:	4b45      	ldr	r3, [pc, #276]	@ (800150c <HAL_TIM_PeriodElapsedCallback+0x5fc>)
 80013f8:	f8b3 3fae 	ldrh.w	r3, [r3, #4014]	@ 0xfae
 80013fc:	f240 72ac 	movw	r2, #1964	@ 0x7ac
 8001400:	4293      	cmp	r3, r2
 8001402:	d816      	bhi.n	8001432 <HAL_TIM_PeriodElapsedCallback+0x522>
				hsLog.bufferIndex = addData(&hsLog, &svpwm, &ps,&foc,&fr,&cg);
 8001404:	4b37      	ldr	r3, [pc, #220]	@ (80014e4 <HAL_TIM_PeriodElapsedCallback+0x5d4>)
 8001406:	9301      	str	r3, [sp, #4]
 8001408:	4b35      	ldr	r3, [pc, #212]	@ (80014e0 <HAL_TIM_PeriodElapsedCallback+0x5d0>)
 800140a:	9300      	str	r3, [sp, #0]
 800140c:	4b36      	ldr	r3, [pc, #216]	@ (80014e8 <HAL_TIM_PeriodElapsedCallback+0x5d8>)
 800140e:	4a37      	ldr	r2, [pc, #220]	@ (80014ec <HAL_TIM_PeriodElapsedCallback+0x5dc>)
 8001410:	4932      	ldr	r1, [pc, #200]	@ (80014dc <HAL_TIM_PeriodElapsedCallback+0x5cc>)
 8001412:	483e      	ldr	r0, [pc, #248]	@ (800150c <HAL_TIM_PeriodElapsedCallback+0x5fc>)
 8001414:	f002 fb98 	bl	8003b48 <addData>
 8001418:	4603      	mov	r3, r0
 800141a:	461a      	mov	r2, r3
 800141c:	4b3b      	ldr	r3, [pc, #236]	@ (800150c <HAL_TIM_PeriodElapsedCallback+0x5fc>)
 800141e:	f8a3 2fae 	strh.w	r2, [r3, #4014]	@ 0xfae
				hsLog.addDatas+=1;
 8001422:	4b3a      	ldr	r3, [pc, #232]	@ (800150c <HAL_TIM_PeriodElapsedCallback+0x5fc>)
 8001424:	f8d3 3fc0 	ldr.w	r3, [r3, #4032]	@ 0xfc0
 8001428:	3301      	adds	r3, #1
 800142a:	4a38      	ldr	r2, [pc, #224]	@ (800150c <HAL_TIM_PeriodElapsedCallback+0x5fc>)
 800142c:	f8c2 3fc0 	str.w	r3, [r2, #4032]	@ 0xfc0
 8001430:	e01c      	b.n	800146c <HAL_TIM_PeriodElapsedCallback+0x55c>
			}else{
				switchBuffers(&hsLog);
 8001432:	4836      	ldr	r0, [pc, #216]	@ (800150c <HAL_TIM_PeriodElapsedCallback+0x5fc>)
 8001434:	f002 fa3c 	bl	80038b0 <switchBuffers>
				hsLog.bufferIndex  = 0;
 8001438:	4b34      	ldr	r3, [pc, #208]	@ (800150c <HAL_TIM_PeriodElapsedCallback+0x5fc>)
 800143a:	2200      	movs	r2, #0
 800143c:	f8a3 2fae 	strh.w	r2, [r3, #4014]	@ 0xfae
				hsLog.bufferIndex = addData(&hsLog, &svpwm, &ps,&foc,&fr,&cg);
 8001440:	4b28      	ldr	r3, [pc, #160]	@ (80014e4 <HAL_TIM_PeriodElapsedCallback+0x5d4>)
 8001442:	9301      	str	r3, [sp, #4]
 8001444:	4b26      	ldr	r3, [pc, #152]	@ (80014e0 <HAL_TIM_PeriodElapsedCallback+0x5d0>)
 8001446:	9300      	str	r3, [sp, #0]
 8001448:	4b27      	ldr	r3, [pc, #156]	@ (80014e8 <HAL_TIM_PeriodElapsedCallback+0x5d8>)
 800144a:	4a28      	ldr	r2, [pc, #160]	@ (80014ec <HAL_TIM_PeriodElapsedCallback+0x5dc>)
 800144c:	4923      	ldr	r1, [pc, #140]	@ (80014dc <HAL_TIM_PeriodElapsedCallback+0x5cc>)
 800144e:	482f      	ldr	r0, [pc, #188]	@ (800150c <HAL_TIM_PeriodElapsedCallback+0x5fc>)
 8001450:	f002 fb7a 	bl	8003b48 <addData>
 8001454:	4603      	mov	r3, r0
 8001456:	461a      	mov	r2, r3
 8001458:	4b2c      	ldr	r3, [pc, #176]	@ (800150c <HAL_TIM_PeriodElapsedCallback+0x5fc>)
 800145a:	f8a3 2fae 	strh.w	r2, [r3, #4014]	@ 0xfae
				hsLog.addDatas+=1;
 800145e:	4b2b      	ldr	r3, [pc, #172]	@ (800150c <HAL_TIM_PeriodElapsedCallback+0x5fc>)
 8001460:	f8d3 3fc0 	ldr.w	r3, [r3, #4032]	@ 0xfc0
 8001464:	3301      	adds	r3, #1
 8001466:	4a29      	ldr	r2, [pc, #164]	@ (800150c <HAL_TIM_PeriodElapsedCallback+0x5fc>)
 8001468:	f8c2 3fc0 	str.w	r3, [r2, #4032]	@ 0xfc0
			}
		}

		dt2 = SysTick->VAL - t0;
 800146c:	4b28      	ldr	r3, [pc, #160]	@ (8001510 <HAL_TIM_PeriodElapsedCallback+0x600>)
 800146e:	689b      	ldr	r3, [r3, #8]
 8001470:	4a28      	ldr	r2, [pc, #160]	@ (8001514 <HAL_TIM_PeriodElapsedCallback+0x604>)
 8001472:	6812      	ldr	r2, [r2, #0]
 8001474:	1a9b      	subs	r3, r3, r2
 8001476:	461a      	mov	r2, r3
 8001478:	4b27      	ldr	r3, [pc, #156]	@ (8001518 <HAL_TIM_PeriodElapsedCallback+0x608>)
 800147a:	601a      	str	r2, [r3, #0]

	}//closes tim1if

	if (htim->Instance ==TIM6){ // 20ms Loop
 800147c:	687b      	ldr	r3, [r7, #4]
 800147e:	681b      	ldr	r3, [r3, #0]
 8001480:	4a26      	ldr	r2, [pc, #152]	@ (800151c <HAL_TIM_PeriodElapsedCallback+0x60c>)
 8001482:	4293      	cmp	r3, r2
 8001484:	d11b      	bne.n	80014be <HAL_TIM_PeriodElapsedCallback+0x5ae>

		if (r.rampPhase != RAMP_WAIT){
 8001486:	4b26      	ldr	r3, [pc, #152]	@ (8001520 <HAL_TIM_PeriodElapsedCallback+0x610>)
 8001488:	7f1b      	ldrb	r3, [r3, #28]
 800148a:	2b04      	cmp	r3, #4
 800148c:	d009      	beq.n	80014a2 <HAL_TIM_PeriodElapsedCallback+0x592>
			ExecRampDuty(&r);
 800148e:	4824      	ldr	r0, [pc, #144]	@ (8001520 <HAL_TIM_PeriodElapsedCallback+0x610>)
 8001490:	f003 f8e2 	bl	8004658 <ExecRampDuty>
			if (r.rampPhase == RAMP_WAIT){
 8001494:	4b22      	ldr	r3, [pc, #136]	@ (8001520 <HAL_TIM_PeriodElapsedCallback+0x610>)
 8001496:	7f1b      	ldrb	r3, [r3, #28]
 8001498:	2b04      	cmp	r3, #4
 800149a:	d102      	bne.n	80014a2 <HAL_TIM_PeriodElapsedCallback+0x592>
				turnOffPWMS = 1;
 800149c:	4b21      	ldr	r3, [pc, #132]	@ (8001524 <HAL_TIM_PeriodElapsedCallback+0x614>)
 800149e:	2201      	movs	r2, #1
 80014a0:	701a      	strb	r2, [r3, #0]
			}
		}

		if (rampRPM.rampPhase != RAMP_WAIT){
 80014a2:	4b15      	ldr	r3, [pc, #84]	@ (80014f8 <HAL_TIM_PeriodElapsedCallback+0x5e8>)
 80014a4:	7c1b      	ldrb	r3, [r3, #16]
 80014a6:	2b04      	cmp	r3, #4
 80014a8:	d009      	beq.n	80014be <HAL_TIM_PeriodElapsedCallback+0x5ae>
			ExecRampRPM(&rampRPM);
 80014aa:	4813      	ldr	r0, [pc, #76]	@ (80014f8 <HAL_TIM_PeriodElapsedCallback+0x5e8>)
 80014ac:	f003 fb21 	bl	8004af2 <ExecRampRPM>
			if (rampRPM.rampPhase == RAMP_WAIT){
 80014b0:	4b11      	ldr	r3, [pc, #68]	@ (80014f8 <HAL_TIM_PeriodElapsedCallback+0x5e8>)
 80014b2:	7c1b      	ldrb	r3, [r3, #16]
 80014b4:	2b04      	cmp	r3, #4
 80014b6:	d102      	bne.n	80014be <HAL_TIM_PeriodElapsedCallback+0x5ae>
				turnOffPWMS = 1;
 80014b8:	4b1a      	ldr	r3, [pc, #104]	@ (8001524 <HAL_TIM_PeriodElapsedCallback+0x614>)
 80014ba:	2201      	movs	r2, #1
 80014bc:	701a      	strb	r2, [r3, #0]
			//sprintf(UART_buffer,"F:%06.2f,%06.2f,%06.2f,%06.2f,%06.2f,%06.2f,%06.2f,%06.2f,%06.2f:E\r\n",rampRPM.instTargetRPM_F,s.RPM,speedPID.error,foc.IqRef,foc.IdRef,foc.Iq,foc.Id,speedPID.KpTerm,speedPID.KiTerm);
			//HAL_UART_Transmit_IT(&huart3,(uint8_t *)UART_buffer,70);
		}*/
	}

	if (htim->Instance ==TIM7){ // 1ms Loop
 80014be:	687b      	ldr	r3, [r7, #4]
 80014c0:	681b      	ldr	r3, [r3, #0]
 80014c2:	4a19      	ldr	r2, [pc, #100]	@ (8001528 <HAL_TIM_PeriodElapsedCallback+0x618>)
 80014c4:	4293      	cmp	r3, r2
 80014c6:	d102      	bne.n	80014ce <HAL_TIM_PeriodElapsedCallback+0x5be>
		 ExecPosTrajectory(&p);
 80014c8:	4818      	ldr	r0, [pc, #96]	@ (800152c <HAL_TIM_PeriodElapsedCallback+0x61c>)
 80014ca:	f002 fd79 	bl	8003fc0 <ExecPosTrajectory>
	}


}
 80014ce:	bf00      	nop
 80014d0:	3708      	adds	r7, #8
 80014d2:	46bd      	mov	sp, r7
 80014d4:	bd80      	pop	{r7, pc}
 80014d6:	bf00      	nop
 80014d8:	20000000 	.word	0x20000000
 80014dc:	200006e4 	.word	0x200006e4
 80014e0:	20001824 	.word	0x20001824
 80014e4:	20001838 	.word	0x20001838
 80014e8:	20000748 	.word	0x20000748
 80014ec:	200005f8 	.word	0x200005f8
 80014f0:	2000070c 	.word	0x2000070c
 80014f4:	3f860a92 	.word	0x3f860a92
 80014f8:	20000788 	.word	0x20000788
 80014fc:	44480000 	.word	0x44480000
 8001500:	00000000 	.word	0x00000000
 8001504:	2000177c 	.word	0x2000177c
 8001508:	449c2000 	.word	0x449c2000
 800150c:	200007b8 	.word	0x200007b8
 8001510:	e000e010 	.word	0xe000e010
 8001514:	200018a4 	.word	0x200018a4
 8001518:	200018a8 	.word	0x200018a8
 800151c:	40001000 	.word	0x40001000
 8001520:	20000718 	.word	0x20000718
 8001524:	20001864 	.word	0x20001864
 8001528:	40001400 	.word	0x40001400
 800152c:	200017cc 	.word	0x200017cc

08001530 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001530:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001532:	b08f      	sub	sp, #60	@ 0x3c
 8001534:	af0e      	add	r7, sp, #56	@ 0x38
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001536:	f003 fd7b 	bl	8005030 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800153a:	f000 fb43 	bl	8001bc4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800153e:	f000 fd8d 	bl	800205c <MX_GPIO_Init>
  MX_DMA_Init();
 8001542:	f000 fd61 	bl	8002008 <MX_DMA_Init>
  MX_SPI1_Init();
 8001546:	f000 fb9b 	bl	8001c80 <MX_SPI1_Init>
  MX_TIM1_Init();
 800154a:	f000 fbd7 	bl	8001cfc <MX_TIM1_Init>
  MX_CORDIC_Init();
 800154e:	f000 fb83 	bl	8001c58 <MX_CORDIC_Init>
  MX_TIM6_Init();
 8001552:	f000 fc9d 	bl	8001e90 <MX_TIM6_Init>
  MX_TIM7_Init();
 8001556:	f000 fcd3 	bl	8001f00 <MX_TIM7_Init>
  MX_USART2_UART_Init();
 800155a:	f000 fd07 	bl	8001f6c <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */

  HW_statesInit(&hw);
 800155e:	48b0      	ldr	r0, [pc, #704]	@ (8001820 <main+0x2f0>)
 8001560:	f001 ffab 	bl	80034ba <HW_statesInit>
  hsLogInit(&hsLog);
 8001564:	48af      	ldr	r0, [pc, #700]	@ (8001824 <main+0x2f4>)
 8001566:	f002 f949 	bl	80037fc <hsLogInit>
  /*This board has no external Eeprom. Till we add the code to use the
  internal flash as an eeprom, we have to keep seperate codes for the 45mm stack
  and the 30 mm stack motor*/

  //---45 mm Values ----//
  ms.encAvg_offset = 5210;//d axis 45mmstack -> Daxis 5210,
 800156a:	4baf      	ldr	r3, [pc, #700]	@ (8001828 <main+0x2f8>)
 800156c:	f241 425a 	movw	r2, #5210	@ 0x145a
 8001570:	811a      	strh	r2, [r3, #8]
  ms.reversePhases = 1;
 8001572:	4bad      	ldr	r3, [pc, #692]	@ (8001828 <main+0x2f8>)
 8001574:	2201      	movs	r2, #1
 8001576:	729a      	strb	r2, [r3, #10]
  ms.encCW_offset = 0; //find these nos by watching where the current is lowest for say 1000 rpm in closed loop
 8001578:	4bab      	ldr	r3, [pc, #684]	@ (8001828 <main+0x2f8>)
 800157a:	f04f 0200 	mov.w	r2, #0
 800157e:	601a      	str	r2, [r3, #0]
  ms.encCCW_offset = -1.3;
 8001580:	4ba9      	ldr	r3, [pc, #676]	@ (8001828 <main+0x2f8>)
 8001582:	4aaa      	ldr	r2, [pc, #680]	@ (800182c <main+0x2fc>)
 8001584:	605a      	str	r2, [r3, #4]
//  ms.encAvg_offset = 3706;
//  ms.reversePhases = 1;
//  ms.encCW_offset = 0; //find these nos by watching where the current is lowest for say 1000 rpm in closed loop
//  ms.encCCW_offset = -1.3;

  setupOK = Encoder_setup(); //setup ABI mode without PWM
 8001586:	f001 fcf2 	bl	8002f6e <Encoder_setup>
 800158a:	4603      	mov	r3, r0
 800158c:	461a      	mov	r2, r3
 800158e:	4ba8      	ldr	r3, [pc, #672]	@ (8001830 <main+0x300>)
 8001590:	701a      	strb	r2, [r3, #0]
  encZeroPosSetup = Encoder_updateZeroPosition(ms.encAvg_offset);
 8001592:	4ba5      	ldr	r3, [pc, #660]	@ (8001828 <main+0x2f8>)
 8001594:	891b      	ldrh	r3, [r3, #8]
 8001596:	4618      	mov	r0, r3
 8001598:	f001 fd08 	bl	8002fac <Encoder_updateZeroPosition>
 800159c:	4603      	mov	r3, r0
 800159e:	461a      	mov	r2, r3
 80015a0:	4ba4      	ldr	r3, [pc, #656]	@ (8001834 <main+0x304>)
 80015a2:	701a      	strb	r2, [r3, #0]
  errorSetupOK = Encoder_enableMagErrors();
 80015a4:	f001 fd24 	bl	8002ff0 <Encoder_enableMagErrors>
 80015a8:	4603      	mov	r3, r0
 80015aa:	461a      	mov	r2, r3
 80015ac:	4ba2      	ldr	r3, [pc, #648]	@ (8001838 <main+0x308>)
 80015ae:	701a      	strb	r2, [r3, #0]
  Cordic_setup(hcordic,sCordicConfig);
 80015b0:	4ea2      	ldr	r6, [pc, #648]	@ (800183c <main+0x30c>)
 80015b2:	4ba3      	ldr	r3, [pc, #652]	@ (8001840 <main+0x310>)
 80015b4:	ac06      	add	r4, sp, #24
 80015b6:	461d      	mov	r5, r3
 80015b8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80015ba:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80015bc:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80015c0:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 80015c4:	466d      	mov	r5, sp
 80015c6:	f106 0410 	add.w	r4, r6, #16
 80015ca:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80015cc:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80015ce:	e894 0003 	ldmia.w	r4, {r0, r1}
 80015d2:	e885 0003 	stmia.w	r5, {r0, r1}
 80015d6:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 80015da:	f001 fb9b 	bl	8002d14 <Cordic_setup>

  //position trajectory setup
  Init_ConstJerk_PosControl(&p);
 80015de:	4899      	ldr	r0, [pc, #612]	@ (8001844 <main+0x314>)
 80015e0:	f002 fbc6 	bl	8003d70 <Init_ConstJerk_PosControl>
  Reset_posControlJC(&p);
 80015e4:	4897      	ldr	r0, [pc, #604]	@ (8001844 <main+0x314>)
 80015e6:	f002 fbdd 	bl	8003da4 <Reset_posControlJC>

  r.rampPhase = RAMP_WAIT;
 80015ea:	4b97      	ldr	r3, [pc, #604]	@ (8001848 <main+0x318>)
 80015ec:	2204      	movs	r2, #4
 80015ee:	771a      	strb	r2, [r3, #28]
  rampRPM.rampPhase = RAMP_WAIT;
 80015f0:	4b96      	ldr	r3, [pc, #600]	@ (800184c <main+0x31c>)
 80015f2:	2204      	movs	r2, #4
 80015f4:	741a      	strb	r2, [r3, #16]

  // plotted and found Kp ki constant values with dbgTorque..
  Init_PID_Terms(&speedPID,3.0f,0.4f,0.0f,0.05f);
 80015f6:	eddf 1a96 	vldr	s3, [pc, #600]	@ 8001850 <main+0x320>
 80015fa:	ed9f 1a96 	vldr	s2, [pc, #600]	@ 8001854 <main+0x324>
 80015fe:	eddf 0a96 	vldr	s1, [pc, #600]	@ 8001858 <main+0x328>
 8001602:	eeb0 0a08 	vmov.f32	s0, #8	@ 0x40400000  3.0
 8001606:	4895      	ldr	r0, [pc, #596]	@ (800185c <main+0x32c>)
 8001608:	f001 ffee 	bl	80035e8 <Init_PID_Terms>
  Init_PID_Terms(&posPID,3.0f,0.001f,0.00f,0.005f);
 800160c:	eddf 1a94 	vldr	s3, [pc, #592]	@ 8001860 <main+0x330>
 8001610:	ed9f 1a90 	vldr	s2, [pc, #576]	@ 8001854 <main+0x324>
 8001614:	eddf 0a93 	vldr	s1, [pc, #588]	@ 8001864 <main+0x334>
 8001618:	eeb0 0a08 	vmov.f32	s0, #8	@ 0x40400000  3.0
 800161c:	4892      	ldr	r0, [pc, #584]	@ (8001868 <main+0x338>)
 800161e:	f001 ffe3 	bl	80035e8 <Init_PID_Terms>

  //only start the timer after youve done calibration properly, cos your reading the ADC in the timer also.
  HAL_TIM_Base_Start_IT(&htim1);
 8001622:	4892      	ldr	r0, [pc, #584]	@ (800186c <main+0x33c>)
 8001624:	f006 f872 	bl	800770c <HAL_TIM_Base_Start_IT>
  htim1.Instance->RCR = 1; // If its after the counter has started, interrupt is on the OVF, and division of interrupt is at (RCR+1), so for 1, divide by 2, for 0->1
 8001628:	4b90      	ldr	r3, [pc, #576]	@ (800186c <main+0x33c>)
 800162a:	681b      	ldr	r3, [r3, #0]
 800162c:	2201      	movs	r2, #1
 800162e:	631a      	str	r2, [r3, #48]	@ 0x30

  HAL_TIM_Base_Start_IT(&htim6); // 20 ms interrupt
 8001630:	488f      	ldr	r0, [pc, #572]	@ (8001870 <main+0x340>)
 8001632:	f006 f86b 	bl	800770c <HAL_TIM_Base_Start_IT>
 // HAL_TIM_Base_Start_IT(&htim7); // 1 ms interrupt
  //first values of the position sensor are noisy. so start reading it here, wait
  //for a while and then turn it off
  readPosition = 1;
 8001636:	4b8f      	ldr	r3, [pc, #572]	@ (8001874 <main+0x344>)
 8001638:	2201      	movs	r2, #1
 800163a:	701a      	strb	r2, [r3, #0]
  HAL_Delay(10);
 800163c:	200a      	movs	r0, #10
 800163e:	f003 fd67 	bl	8005110 <HAL_Delay>
  readPosition = 0;
 8001642:	4b8c      	ldr	r3, [pc, #560]	@ (8001874 <main+0x344>)
 8001644:	2200      	movs	r2, #0
 8001646:	701a      	strb	r2, [r3, #0]


  setMaxFrictionPWM(&fr,frictionMaxPWM);
 8001648:	4b8b      	ldr	r3, [pc, #556]	@ (8001878 <main+0x348>)
 800164a:	881b      	ldrh	r3, [r3, #0]
 800164c:	4619      	mov	r1, r3
 800164e:	488b      	ldr	r0, [pc, #556]	@ (800187c <main+0x34c>)
 8001650:	f001 fabc 	bl	8002bcc <setMaxFrictionPWM>
  setMaxCoggingPWM(&cg,coggingMaxPWM);
 8001654:	4b8a      	ldr	r3, [pc, #552]	@ (8001880 <main+0x350>)
 8001656:	881b      	ldrh	r3, [r3, #0]
 8001658:	4619      	mov	r1, r3
 800165a:	488a      	ldr	r0, [pc, #552]	@ (8001884 <main+0x354>)
 800165c:	f001 fb00 	bl	8002c60 <setMaxCoggingPWM>
  fr.frictionCompensationOn = 0;
 8001660:	4b86      	ldr	r3, [pc, #536]	@ (800187c <main+0x34c>)
 8001662:	2200      	movs	r2, #0
 8001664:	701a      	strb	r2, [r3, #0]
  cg.coggingCompensationOn = 0;
 8001666:	4b87      	ldr	r3, [pc, #540]	@ (8001884 <main+0x354>)
 8001668:	2200      	movs	r2, #0
 800166a:	701a      	strb	r2, [r3, #0]
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {

	  if (turnOffPWMS){
 800166c:	4b86      	ldr	r3, [pc, #536]	@ (8001888 <main+0x358>)
 800166e:	f993 3000 	ldrsb.w	r3, [r3]
 8001672:	2b00      	cmp	r3, #0
 8001674:	d005      	beq.n	8001682 <main+0x152>
		  StopAllPWM(&hw);
 8001676:	486a      	ldr	r0, [pc, #424]	@ (8001820 <main+0x2f0>)
 8001678:	f001 ff62 	bl	8003540 <StopAllPWM>
		  turnOffPWMS = 0;
 800167c:	4b82      	ldr	r3, [pc, #520]	@ (8001888 <main+0x358>)
 800167e:	2200      	movs	r2, #0
 8001680:	701a      	strb	r2, [r3, #0]
	  }

	  if (checkEncoderHealth){
 8001682:	4b82      	ldr	r3, [pc, #520]	@ (800188c <main+0x35c>)
 8001684:	781b      	ldrb	r3, [r3, #0]
 8001686:	2b00      	cmp	r3, #0
 8001688:	d008      	beq.n	800169c <main+0x16c>
		  encoderNOK = Encoder_checkHealth();
 800168a:	f001 fbd9 	bl	8002e40 <Encoder_checkHealth>
 800168e:	4603      	mov	r3, r0
 8001690:	461a      	mov	r2, r3
 8001692:	4b7f      	ldr	r3, [pc, #508]	@ (8001890 <main+0x360>)
 8001694:	701a      	strb	r2, [r3, #0]
		  checkEncoderHealth = 0;
 8001696:	4b7d      	ldr	r3, [pc, #500]	@ (800188c <main+0x35c>)
 8001698:	2200      	movs	r2, #0
 800169a:	701a      	strb	r2, [r3, #0]
	  }

	  if (turnOff_sensors){
 800169c:	4b7d      	ldr	r3, [pc, #500]	@ (8001894 <main+0x364>)
 800169e:	f993 3000 	ldrsb.w	r3, [r3]
 80016a2:	2b00      	cmp	r3, #0
 80016a4:	d008      	beq.n	80016b8 <main+0x188>
		  readPosition = 0;
 80016a6:	4b73      	ldr	r3, [pc, #460]	@ (8001874 <main+0x344>)
 80016a8:	2200      	movs	r2, #0
 80016aa:	701a      	strb	r2, [r3, #0]
		  turnOff_sensors = 0;
 80016ac:	4b79      	ldr	r3, [pc, #484]	@ (8001894 <main+0x364>)
 80016ae:	2200      	movs	r2, #0
 80016b0:	701a      	strb	r2, [r3, #0]
		  turnOffPWMS = 1;
 80016b2:	4b75      	ldr	r3, [pc, #468]	@ (8001888 <main+0x358>)
 80016b4:	2201      	movs	r2, #1
 80016b6:	701a      	strb	r2, [r3, #0]
	  }

	  if (setupPosJC){
 80016b8:	4b77      	ldr	r3, [pc, #476]	@ (8001898 <main+0x368>)
 80016ba:	781b      	ldrb	r3, [r3, #0]
 80016bc:	2b00      	cmp	r3, #0
 80016be:	d012      	beq.n	80016e6 <main+0x1b6>
		  Reset_posControlJC(&p);
 80016c0:	4860      	ldr	r0, [pc, #384]	@ (8001844 <main+0x314>)
 80016c2:	f002 fb6f 	bl	8003da4 <Reset_posControlJC>
		  Setup_posControlJC(&p,pos_targetThetaDeg,pos_targetTime_ms);
 80016c6:	4b75      	ldr	r3, [pc, #468]	@ (800189c <main+0x36c>)
 80016c8:	edd3 7a00 	vldr	s15, [r3]
 80016cc:	4b74      	ldr	r3, [pc, #464]	@ (80018a0 <main+0x370>)
 80016ce:	ed93 7a00 	vldr	s14, [r3]
 80016d2:	eef0 0a47 	vmov.f32	s1, s14
 80016d6:	eeb0 0a67 	vmov.f32	s0, s15
 80016da:	485a      	ldr	r0, [pc, #360]	@ (8001844 <main+0x314>)
 80016dc:	f002 fbb8 	bl	8003e50 <Setup_posControlJC>
		  setupPosJC = 0;
 80016e0:	4b6d      	ldr	r3, [pc, #436]	@ (8001898 <main+0x368>)
 80016e2:	2200      	movs	r2, #0
 80016e4:	701a      	strb	r2, [r3, #0]
	  }

	  if (startPosC){
 80016e6:	4b6f      	ldr	r3, [pc, #444]	@ (80018a4 <main+0x374>)
 80016e8:	781b      	ldrb	r3, [r3, #0]
 80016ea:	2b00      	cmp	r3, #0
 80016ec:	d006      	beq.n	80016fc <main+0x1cc>
		  p.state = POS_RUNNING;
 80016ee:	4b55      	ldr	r3, [pc, #340]	@ (8001844 <main+0x314>)
 80016f0:	2201      	movs	r2, #1
 80016f2:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
		  startPosC = 0;
 80016f6:	4b6b      	ldr	r3, [pc, #428]	@ (80018a4 <main+0x374>)
 80016f8:	2200      	movs	r2, #0
 80016fa:	701a      	strb	r2, [r3, #0]
	  }
	  if (stopPosC){
 80016fc:	4b6a      	ldr	r3, [pc, #424]	@ (80018a8 <main+0x378>)
 80016fe:	781b      	ldrb	r3, [r3, #0]
 8001700:	2b00      	cmp	r3, #0
 8001702:	d006      	beq.n	8001712 <main+0x1e2>
		  p.state = POS_OVER;
 8001704:	4b4f      	ldr	r3, [pc, #316]	@ (8001844 <main+0x314>)
 8001706:	2202      	movs	r2, #2
 8001708:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
		  stopPosC = 0;
 800170c:	4b66      	ldr	r3, [pc, #408]	@ (80018a8 <main+0x378>)
 800170e:	2200      	movs	r2, #0
 8001710:	701a      	strb	r2, [r3, #0]
	  }

	  if (setupFrictionAddition){
 8001712:	4b66      	ldr	r3, [pc, #408]	@ (80018ac <main+0x37c>)
 8001714:	781b      	ldrb	r3, [r3, #0]
 8001716:	2b00      	cmp	r3, #0
 8001718:	d008      	beq.n	800172c <main+0x1fc>
		  setMaxFrictionPWM(&fr,frictionMaxPWM);
 800171a:	4b57      	ldr	r3, [pc, #348]	@ (8001878 <main+0x348>)
 800171c:	881b      	ldrh	r3, [r3, #0]
 800171e:	4619      	mov	r1, r3
 8001720:	4856      	ldr	r0, [pc, #344]	@ (800187c <main+0x34c>)
 8001722:	f001 fa53 	bl	8002bcc <setMaxFrictionPWM>
		  setupFrictionAddition = 0;
 8001726:	4b61      	ldr	r3, [pc, #388]	@ (80018ac <main+0x37c>)
 8001728:	2200      	movs	r2, #0
 800172a:	701a      	strb	r2, [r3, #0]
	  }

	  if (setupCoggingAddition){
 800172c:	4b60      	ldr	r3, [pc, #384]	@ (80018b0 <main+0x380>)
 800172e:	781b      	ldrb	r3, [r3, #0]
 8001730:	2b00      	cmp	r3, #0
 8001732:	d008      	beq.n	8001746 <main+0x216>
		  setMaxCoggingPWM(&cg,coggingMaxPWM);
 8001734:	4b52      	ldr	r3, [pc, #328]	@ (8001880 <main+0x350>)
 8001736:	881b      	ldrh	r3, [r3, #0]
 8001738:	4619      	mov	r1, r3
 800173a:	4852      	ldr	r0, [pc, #328]	@ (8001884 <main+0x354>)
 800173c:	f001 fa90 	bl	8002c60 <setMaxCoggingPWM>
		  setupCoggingAddition = 0;
 8001740:	4b5b      	ldr	r3, [pc, #364]	@ (80018b0 <main+0x380>)
 8001742:	2200      	movs	r2, #0
 8001744:	701a      	strb	r2, [r3, #0]
	  }
	  /*RMF control!
	  change d_elec Radians. MAke negative to change direction.
	  start with a value of 0.005 and slowly increase or decrease.
	  V.IMP -> motor has to rotate clockwise if d_elec is positive*/
	  if (OL_init){ // do with a position Loop
 8001746:	4b5b      	ldr	r3, [pc, #364]	@ (80018b4 <main+0x384>)
 8001748:	781b      	ldrb	r3, [r3, #0]
 800174a:	2b00      	cmp	r3, #0
 800174c:	d01b      	beq.n	8001786 <main+0x256>
		  //turn on the PWMS
		  readPosition = 1;
 800174e:	4b49      	ldr	r3, [pc, #292]	@ (8001874 <main+0x344>)
 8001750:	2201      	movs	r2, #1
 8001752:	701a      	strb	r2, [r3, #0]
		  d_elecRadians = 0.001;
 8001754:	4b58      	ldr	r3, [pc, #352]	@ (80018b8 <main+0x388>)
 8001756:	4a59      	ldr	r2, [pc, #356]	@ (80018bc <main+0x38c>)
 8001758:	601a      	str	r2, [r3, #0]
		  r.currentDutyF = 100;
 800175a:	4b3b      	ldr	r3, [pc, #236]	@ (8001848 <main+0x318>)
 800175c:	4a58      	ldr	r2, [pc, #352]	@ (80018c0 <main+0x390>)
 800175e:	605a      	str	r2, [r3, #4]
		  //turn on the PWMS
		  ZeroAllCCRs(&svpwm);
 8001760:	4858      	ldr	r0, [pc, #352]	@ (80018c4 <main+0x394>)
 8001762:	f001 fe97 	bl	8003494 <ZeroAllCCRs>
		  StartAllPWM(&hw);
 8001766:	482e      	ldr	r0, [pc, #184]	@ (8001820 <main+0x2f0>)
 8001768:	f001 feb4 	bl	80034d4 <StartAllPWM>
		  runOL = 1;
 800176c:	4b56      	ldr	r3, [pc, #344]	@ (80018c8 <main+0x398>)
 800176e:	2201      	movs	r2, #1
 8001770:	701a      	strb	r2, [r3, #0]
		  OL_init = 0;
 8001772:	4b50      	ldr	r3, [pc, #320]	@ (80018b4 <main+0x384>)
 8001774:	2200      	movs	r2, #0
 8001776:	701a      	strb	r2, [r3, #0]
		  //pid stuff
		  HAL_Delay(100); // time for a reading to be taken.
 8001778:	2064      	movs	r0, #100	@ 0x64
 800177a:	f003 fcc9 	bl	8005110 <HAL_Delay>
		  OL_offsetRadians = ps.elecRadians;
 800177e:	4b53      	ldr	r3, [pc, #332]	@ (80018cc <main+0x39c>)
 8001780:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001782:	4a53      	ldr	r2, [pc, #332]	@ (80018d0 <main+0x3a0>)
 8001784:	6013      	str	r3, [r2, #0]
	  }

	  if (OL_stop){
 8001786:	4b53      	ldr	r3, [pc, #332]	@ (80018d4 <main+0x3a4>)
 8001788:	781b      	ldrb	r3, [r3, #0]
 800178a:	2b00      	cmp	r3, #0
 800178c:	d00b      	beq.n	80017a6 <main+0x276>
		  runOL = 0;
 800178e:	4b4e      	ldr	r3, [pc, #312]	@ (80018c8 <main+0x398>)
 8001790:	2200      	movs	r2, #0
 8001792:	701a      	strb	r2, [r3, #0]
		  StopAllPWM(&hw);
 8001794:	4822      	ldr	r0, [pc, #136]	@ (8001820 <main+0x2f0>)
 8001796:	f001 fed3 	bl	8003540 <StopAllPWM>
		  turnOff_sensors =1;
 800179a:	4b3e      	ldr	r3, [pc, #248]	@ (8001894 <main+0x364>)
 800179c:	2201      	movs	r2, #1
 800179e:	701a      	strb	r2, [r3, #0]
		  OL_stop = 0;
 80017a0:	4b4c      	ldr	r3, [pc, #304]	@ (80018d4 <main+0x3a4>)
 80017a2:	2200      	movs	r2, #0
 80017a4:	701a      	strb	r2, [r3, #0]
	  }


	  /*---------------*/
	  //RUN with some DUTY CYCLE
	  if (dbg_rampDuty_RUStart){
 80017a6:	4b4c      	ldr	r3, [pc, #304]	@ (80018d8 <main+0x3a8>)
 80017a8:	781b      	ldrb	r3, [r3, #0]
 80017aa:	2b00      	cmp	r3, #0
 80017ac:	d01a      	beq.n	80017e4 <main+0x2b4>
		readPosition = 1;
 80017ae:	4b31      	ldr	r3, [pc, #196]	@ (8001874 <main+0x344>)
 80017b0:	2201      	movs	r2, #1
 80017b2:	701a      	strb	r2, [r3, #0]
		//direction = CW ; not set here so u can change direction in debug mode. 1 or -1 ONLY!!
		//fill up the Ramp Duty Struct- TargetRPRm,rampUp Time, rampDownTime, and steadY state runTime
		InitRampDutyStruct(&r,targetDuty,5000,5000,300);
 80017b4:	4b49      	ldr	r3, [pc, #292]	@ (80018dc <main+0x3ac>)
 80017b6:	8819      	ldrh	r1, [r3, #0]
 80017b8:	f44f 7396 	mov.w	r3, #300	@ 0x12c
 80017bc:	9300      	str	r3, [sp, #0]
 80017be:	f241 3388 	movw	r3, #5000	@ 0x1388
 80017c2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80017c6:	4820      	ldr	r0, [pc, #128]	@ (8001848 <main+0x318>)
 80017c8:	f002 fe88 	bl	80044dc <InitRampDutyStruct>
		StartRampDuty(&r);
 80017cc:	481e      	ldr	r0, [pc, #120]	@ (8001848 <main+0x318>)
 80017ce:	f002 ff0d 	bl	80045ec <StartRampDuty>
		//turn on the PWMS
		ZeroAllCCRs(&svpwm);
 80017d2:	483c      	ldr	r0, [pc, #240]	@ (80018c4 <main+0x394>)
 80017d4:	f001 fe5e 	bl	8003494 <ZeroAllCCRs>
		StartAllPWM(&hw);
 80017d8:	4811      	ldr	r0, [pc, #68]	@ (8001820 <main+0x2f0>)
 80017da:	f001 fe7b 	bl	80034d4 <StartAllPWM>
		dbg_rampDuty_RUStart = 0;
 80017de:	4b3e      	ldr	r3, [pc, #248]	@ (80018d8 <main+0x3a8>)
 80017e0:	2200      	movs	r2, #0
 80017e2:	701a      	strb	r2, [r3, #0]
	  }

	  if (dbg_rampDuty_RDStart){
 80017e4:	4b3e      	ldr	r3, [pc, #248]	@ (80018e0 <main+0x3b0>)
 80017e6:	781b      	ldrb	r3, [r3, #0]
 80017e8:	2b00      	cmp	r3, #0
 80017ea:	d005      	beq.n	80017f8 <main+0x2c8>
		  StartRampDownDuty(&r);
 80017ec:	4816      	ldr	r0, [pc, #88]	@ (8001848 <main+0x318>)
 80017ee:	f002 ff0a 	bl	8004606 <StartRampDownDuty>
		  dbg_rampDuty_RDStart= 0;
 80017f2:	4b3b      	ldr	r3, [pc, #236]	@ (80018e0 <main+0x3b0>)
 80017f4:	2200      	movs	r2, #0
 80017f6:	701a      	strb	r2, [r3, #0]
		  // change this later to keep track of where rpm becomes zero,
		  // and there make swithc of the PWMs
	  }

	  //Set transition Target and Transition Time in RM
	  if(dbg_rampDuty_ChangeDuty){
 80017f8:	4b3a      	ldr	r3, [pc, #232]	@ (80018e4 <main+0x3b4>)
 80017fa:	781b      	ldrb	r3, [r3, #0]
 80017fc:	2b00      	cmp	r3, #0
 80017fe:	d073      	beq.n	80018e8 <main+0x3b8>
		  ChangeDuty(&r);
 8001800:	4811      	ldr	r0, [pc, #68]	@ (8001848 <main+0x318>)
 8001802:	f003 f81d 	bl	8004840 <ChangeDuty>
		  Recalculate_RampDuty_RampRates(&r,r.transitionTarget);
 8001806:	4b10      	ldr	r3, [pc, #64]	@ (8001848 <main+0x318>)
 8001808:	8bdb      	ldrh	r3, [r3, #30]
 800180a:	4619      	mov	r1, r3
 800180c:	480e      	ldr	r0, [pc, #56]	@ (8001848 <main+0x318>)
 800180e:	f003 f869 	bl	80048e4 <Recalculate_RampDuty_RampRates>
		  r.rampPhase = RAMP_CHANGE;
 8001812:	4b0d      	ldr	r3, [pc, #52]	@ (8001848 <main+0x318>)
 8001814:	2208      	movs	r2, #8
 8001816:	771a      	strb	r2, [r3, #28]
		  dbg_rampDuty_ChangeDuty = 0;
 8001818:	4b32      	ldr	r3, [pc, #200]	@ (80018e4 <main+0x3b4>)
 800181a:	2200      	movs	r2, #0
 800181c:	701a      	strb	r2, [r3, #0]
 800181e:	e063      	b.n	80018e8 <main+0x3b8>
 8001820:	20000708 	.word	0x20000708
 8001824:	200007b8 	.word	0x200007b8
 8001828:	2000070c 	.word	0x2000070c
 800182c:	bfa66666 	.word	0xbfa66666
 8001830:	20001850 	.word	0x20001850
 8001834:	20001852 	.word	0x20001852
 8001838:	20001851 	.word	0x20001851
 800183c:	20000378 	.word	0x20000378
 8001840:	200005dc 	.word	0x200005dc
 8001844:	200017cc 	.word	0x200017cc
 8001848:	20000718 	.word	0x20000718
 800184c:	20000788 	.word	0x20000788
 8001850:	3d4ccccd 	.word	0x3d4ccccd
 8001854:	00000000 	.word	0x00000000
 8001858:	3ecccccd 	.word	0x3ecccccd
 800185c:	2000177c 	.word	0x2000177c
 8001860:	3ba3d70a 	.word	0x3ba3d70a
 8001864:	3a83126f 	.word	0x3a83126f
 8001868:	200017a4 	.word	0x200017a4
 800186c:	20000404 	.word	0x20000404
 8001870:	20000450 	.word	0x20000450
 8001874:	20001865 	.word	0x20001865
 8001878:	20000004 	.word	0x20000004
 800187c:	20001824 	.word	0x20001824
 8001880:	20000006 	.word	0x20000006
 8001884:	20001838 	.word	0x20001838
 8001888:	20001864 	.word	0x20001864
 800188c:	200018be 	.word	0x200018be
 8001890:	200018bf 	.word	0x200018bf
 8001894:	20001866 	.word	0x20001866
 8001898:	20001894 	.word	0x20001894
 800189c:	20001898 	.word	0x20001898
 80018a0:	2000189c 	.word	0x2000189c
 80018a4:	20001895 	.word	0x20001895
 80018a8:	20001896 	.word	0x20001896
 80018ac:	200018bc 	.word	0x200018bc
 80018b0:	200018bd 	.word	0x200018bd
 80018b4:	20001871 	.word	0x20001871
 80018b8:	2000186c 	.word	0x2000186c
 80018bc:	3a83126f 	.word	0x3a83126f
 80018c0:	42c80000 	.word	0x42c80000
 80018c4:	200006e4 	.word	0x200006e4
 80018c8:	20001870 	.word	0x20001870
 80018cc:	200005f8 	.word	0x200005f8
 80018d0:	20001880 	.word	0x20001880
 80018d4:	20001872 	.word	0x20001872
 80018d8:	20001853 	.word	0x20001853
 80018dc:	20001860 	.word	0x20001860
 80018e0:	20001854 	.word	0x20001854
 80018e4:	20001855 	.word	0x20001855
	  }

	  if (dbg_rampDuty_Stop){
 80018e8:	4b98      	ldr	r3, [pc, #608]	@ (8001b4c <main+0x61c>)
 80018ea:	781b      	ldrb	r3, [r3, #0]
 80018ec:	2b00      	cmp	r3, #0
 80018ee:	d008      	beq.n	8001902 <main+0x3d2>
		  // we need to stop the six sector Obj, and then stop the Ramp
		  StopAllPWM(&hw);
 80018f0:	4897      	ldr	r0, [pc, #604]	@ (8001b50 <main+0x620>)
 80018f2:	f001 fe25 	bl	8003540 <StopAllPWM>
		  StopRampDuty(&r);
 80018f6:	4897      	ldr	r0, [pc, #604]	@ (8001b54 <main+0x624>)
 80018f8:	f002 fe96 	bl	8004628 <StopRampDuty>
		  dbg_rampDuty_Stop =0;
 80018fc:	4b93      	ldr	r3, [pc, #588]	@ (8001b4c <main+0x61c>)
 80018fe:	2200      	movs	r2, #0
 8001900:	701a      	strb	r2, [r3, #0]
	  }


	  /*------------------------------------------*/
	  //run with RPM
	  if (dbg_rampRPM_RUStart){
 8001902:	4b95      	ldr	r3, [pc, #596]	@ (8001b58 <main+0x628>)
 8001904:	781b      	ldrb	r3, [r3, #0]
 8001906:	2b00      	cmp	r3, #0
 8001908:	d01d      	beq.n	8001946 <main+0x416>
		//fill up the Ramp Duty Struct- TargetRPRm,rampUp Time, rampDownTime, and steadY state runTime
		InitRampRPMStruct(&rampRPM,targetRPM,10.0f,12.0f,300.0f);
 800190a:	4b94      	ldr	r3, [pc, #592]	@ (8001b5c <main+0x62c>)
 800190c:	881b      	ldrh	r3, [r3, #0]
 800190e:	ed9f 1a94 	vldr	s2, [pc, #592]	@ 8001b60 <main+0x630>
 8001912:	eef2 0a08 	vmov.f32	s1, #40	@ 0x41400000  12.0
 8001916:	eeb2 0a04 	vmov.f32	s0, #36	@ 0x41200000  10.0
 800191a:	4619      	mov	r1, r3
 800191c:	4891      	ldr	r0, [pc, #580]	@ (8001b64 <main+0x634>)
 800191e:	f003 f841 	bl	80049a4 <InitRampRPMStruct>
		readPosition = 1;
 8001922:	4b91      	ldr	r3, [pc, #580]	@ (8001b68 <main+0x638>)
 8001924:	2201      	movs	r2, #1
 8001926:	701a      	strb	r2, [r3, #0]
		Zero_PID_Terms(&speedPID);
 8001928:	4890      	ldr	r0, [pc, #576]	@ (8001b6c <main+0x63c>)
 800192a:	f001 fe43 	bl	80035b4 <Zero_PID_Terms>
		StartRampRPM(&rampRPM); 		// we need to start the Ramp
 800192e:	488d      	ldr	r0, [pc, #564]	@ (8001b64 <main+0x634>)
 8001930:	f003 f8b8 	bl	8004aa4 <StartRampRPM>
		ZeroAllCCRs(&svpwm);
 8001934:	488e      	ldr	r0, [pc, #568]	@ (8001b70 <main+0x640>)
 8001936:	f001 fdad 	bl	8003494 <ZeroAllCCRs>
		StartAllPWM(&hw); 		//turn on the PWMS
 800193a:	4885      	ldr	r0, [pc, #532]	@ (8001b50 <main+0x620>)
 800193c:	f001 fdca 	bl	80034d4 <StartAllPWM>
		//need to reset the timer to allow for calculation of Time to take place
		dbg_rampRPM_RUStart = 0;
 8001940:	4b85      	ldr	r3, [pc, #532]	@ (8001b58 <main+0x628>)
 8001942:	2200      	movs	r2, #0
 8001944:	701a      	strb	r2, [r3, #0]
	  }

	  if (dbg_rampRPM_RDStart){
 8001946:	4b8b      	ldr	r3, [pc, #556]	@ (8001b74 <main+0x644>)
 8001948:	781b      	ldrb	r3, [r3, #0]
 800194a:	2b00      	cmp	r3, #0
 800194c:	d005      	beq.n	800195a <main+0x42a>
		  StartRampDownRPM(&rampRPM);
 800194e:	4885      	ldr	r0, [pc, #532]	@ (8001b64 <main+0x634>)
 8001950:	f003 f8b5 	bl	8004abe <StartRampDownRPM>
		  dbg_rampRPM_RDStart= 0;
 8001954:	4b87      	ldr	r3, [pc, #540]	@ (8001b74 <main+0x644>)
 8001956:	2200      	movs	r2, #0
 8001958:	701a      	strb	r2, [r3, #0]
	  }

	  //Set transition Target and Transition Time in RM
	  if(dbg_rampRPM_ChangeRPM){
 800195a:	4b87      	ldr	r3, [pc, #540]	@ (8001b78 <main+0x648>)
 800195c:	781b      	ldrb	r3, [r3, #0]
 800195e:	2b00      	cmp	r3, #0
 8001960:	d019      	beq.n	8001996 <main+0x466>
		  ChangeRPM(&rampRPM,RPM_transitionTarget,RPM_transitionTime);
 8001962:	4b86      	ldr	r3, [pc, #536]	@ (8001b7c <main+0x64c>)
 8001964:	881b      	ldrh	r3, [r3, #0]
 8001966:	4a86      	ldr	r2, [pc, #536]	@ (8001b80 <main+0x650>)
 8001968:	8812      	ldrh	r2, [r2, #0]
 800196a:	ee07 2a90 	vmov	s15, r2
 800196e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001972:	eeb0 0a67 	vmov.f32	s0, s15
 8001976:	4619      	mov	r1, r3
 8001978:	487a      	ldr	r0, [pc, #488]	@ (8001b64 <main+0x634>)
 800197a:	f003 f9d5 	bl	8004d28 <ChangeRPM>
		  Recalculate_RampRPM_RampRates(&rampRPM,RPM_transitionTarget);
 800197e:	4b7f      	ldr	r3, [pc, #508]	@ (8001b7c <main+0x64c>)
 8001980:	881b      	ldrh	r3, [r3, #0]
 8001982:	4619      	mov	r1, r3
 8001984:	4877      	ldr	r0, [pc, #476]	@ (8001b64 <main+0x634>)
 8001986:	f003 fa4c 	bl	8004e22 <Recalculate_RampRPM_RampRates>
		  rampRPM.rampPhase = RAMP_CHANGE;
 800198a:	4b76      	ldr	r3, [pc, #472]	@ (8001b64 <main+0x634>)
 800198c:	2208      	movs	r2, #8
 800198e:	741a      	strb	r2, [r3, #16]
		  dbg_rampRPM_ChangeRPM = 0;
 8001990:	4b79      	ldr	r3, [pc, #484]	@ (8001b78 <main+0x648>)
 8001992:	2200      	movs	r2, #0
 8001994:	701a      	strb	r2, [r3, #0]
	  }

	  //STOP CLOSED LOOP
	  if (dbg_rampRPM_Stop){
 8001996:	4b7b      	ldr	r3, [pc, #492]	@ (8001b84 <main+0x654>)
 8001998:	781b      	ldrb	r3, [r3, #0]
 800199a:	2b00      	cmp	r3, #0
 800199c:	d008      	beq.n	80019b0 <main+0x480>
		  StopAllPWM(&hw);
 800199e:	486c      	ldr	r0, [pc, #432]	@ (8001b50 <main+0x620>)
 80019a0:	f001 fdce 	bl	8003540 <StopAllPWM>
		  StopRampRPM(&rampRPM);
 80019a4:	486f      	ldr	r0, [pc, #444]	@ (8001b64 <main+0x634>)
 80019a6:	f003 f897 	bl	8004ad8 <StopRampRPM>
		  dbg_rampRPM_Stop =0;
 80019aa:	4b76      	ldr	r3, [pc, #472]	@ (8001b84 <main+0x654>)
 80019ac:	2200      	movs	r2, #0
 80019ae:	701a      	strb	r2, [r3, #0]
	  }

	  /*--------------------------------------------------*/

	  if(checkUartDmA){
 80019b0:	4b75      	ldr	r3, [pc, #468]	@ (8001b88 <main+0x658>)
 80019b2:	781b      	ldrb	r3, [r3, #0]
 80019b4:	2b00      	cmp	r3, #0
 80019b6:	d007      	beq.n	80019c8 <main+0x498>
		  HAL_UART_Transmit_DMA(&huart2,(uint8_t *)"is this Working????\r\n",22);
 80019b8:	2216      	movs	r2, #22
 80019ba:	4974      	ldr	r1, [pc, #464]	@ (8001b8c <main+0x65c>)
 80019bc:	4874      	ldr	r0, [pc, #464]	@ (8001b90 <main+0x660>)
 80019be:	f007 fbbd 	bl	800913c <HAL_UART_Transmit_DMA>
		  checkUartDmA = 0;
 80019c2:	4b71      	ldr	r3, [pc, #452]	@ (8001b88 <main+0x658>)
 80019c4:	2200      	movs	r2, #0
 80019c6:	701a      	strb	r2, [r3, #0]
	  }
	  /*------------------------------------------------*/

	  if (hsLogOn){
 80019c8:	4b72      	ldr	r3, [pc, #456]	@ (8001b94 <main+0x664>)
 80019ca:	781b      	ldrb	r3, [r3, #0]
 80019cc:	2b00      	cmp	r3, #0
 80019ce:	f000 80b9 	beq.w	8001b44 <main+0x614>
		  if (hsLog.firstTime == 0){
 80019d2:	4b71      	ldr	r3, [pc, #452]	@ (8001b98 <main+0x668>)
 80019d4:	785b      	ldrb	r3, [r3, #1]
 80019d6:	2b00      	cmp	r3, #0
 80019d8:	d11f      	bne.n	8001a1a <main+0x4ea>
			  hsLogStart(&hsLog,&ps);
 80019da:	4970      	ldr	r1, [pc, #448]	@ (8001b9c <main+0x66c>)
 80019dc:	486e      	ldr	r0, [pc, #440]	@ (8001b98 <main+0x668>)
 80019de:	f001 ff25 	bl	800382c <hsLogStart>
			  hsLog.end_multiTurns = hsLog.start_multiTurns  + (direction * TWO_PI_F * LOG_TURNS);
 80019e2:	4b6d      	ldr	r3, [pc, #436]	@ (8001b98 <main+0x668>)
 80019e4:	ed93 7a01 	vldr	s14, [r3, #4]
 80019e8:	4b6d      	ldr	r3, [pc, #436]	@ (8001ba0 <main+0x670>)
 80019ea:	f993 3000 	ldrsb.w	r3, [r3]
 80019ee:	ee07 3a90 	vmov	s15, r3
 80019f2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80019f6:	eddf 6a6b 	vldr	s13, [pc, #428]	@ 8001ba4 <main+0x674>
 80019fa:	ee67 7aa6 	vmul.f32	s15, s15, s13
 80019fe:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8001a02:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001a06:	4b64      	ldr	r3, [pc, #400]	@ (8001b98 <main+0x668>)
 8001a08:	edc3 7a02 	vstr	s15, [r3, #8]
			  hsLog.addDatas = 0;
 8001a0c:	4b62      	ldr	r3, [pc, #392]	@ (8001b98 <main+0x668>)
 8001a0e:	2200      	movs	r2, #0
 8001a10:	f8c3 2fc0 	str.w	r2, [r3, #4032]	@ 0xfc0
			  totalBytes = 0;
 8001a14:	4b64      	ldr	r3, [pc, #400]	@ (8001ba8 <main+0x678>)
 8001a16:	2200      	movs	r2, #0
 8001a18:	601a      	str	r2, [r3, #0]
		  }

		  if (hsLog.sendOut == BUFFER1){
 8001a1a:	4b5f      	ldr	r3, [pc, #380]	@ (8001b98 <main+0x668>)
 8001a1c:	f893 3fb0 	ldrb.w	r3, [r3, #4016]	@ 0xfb0
 8001a20:	2b01      	cmp	r3, #1
 8001a22:	d11f      	bne.n	8001a64 <main+0x534>
			  HAL_UART_Transmit_DMA(&huart2,(uint8_t *)hsLog.HSbuffer1,hsLog.sendOutBufferSize);
 8001a24:	4b5c      	ldr	r3, [pc, #368]	@ (8001b98 <main+0x668>)
 8001a26:	f8b3 3fb2 	ldrh.w	r3, [r3, #4018]	@ 0xfb2
 8001a2a:	461a      	mov	r2, r3
 8001a2c:	495f      	ldr	r1, [pc, #380]	@ (8001bac <main+0x67c>)
 8001a2e:	4858      	ldr	r0, [pc, #352]	@ (8001b90 <main+0x660>)
 8001a30:	f007 fb84 	bl	800913c <HAL_UART_Transmit_DMA>
			  //hsLog.DMAdataSentOut = 0;
			  hsLog.sendOut = NOBUFFER;
 8001a34:	4b58      	ldr	r3, [pc, #352]	@ (8001b98 <main+0x668>)
 8001a36:	2200      	movs	r2, #0
 8001a38:	f883 2fb0 	strb.w	r2, [r3, #4016]	@ 0xfb0
			  totalBytes += hsLog.sendOutBufferSize;
 8001a3c:	4b56      	ldr	r3, [pc, #344]	@ (8001b98 <main+0x668>)
 8001a3e:	f8b3 3fb2 	ldrh.w	r3, [r3, #4018]	@ 0xfb2
 8001a42:	461a      	mov	r2, r3
 8001a44:	4b58      	ldr	r3, [pc, #352]	@ (8001ba8 <main+0x678>)
 8001a46:	681b      	ldr	r3, [r3, #0]
 8001a48:	4413      	add	r3, r2
 8001a4a:	4a57      	ldr	r2, [pc, #348]	@ (8001ba8 <main+0x678>)
 8001a4c:	6013      	str	r3, [r2, #0]
			  hsLog.sendOutBufferSize = 0;
 8001a4e:	4b52      	ldr	r3, [pc, #328]	@ (8001b98 <main+0x668>)
 8001a50:	2200      	movs	r2, #0
 8001a52:	f8a3 2fb2 	strh.w	r2, [r3, #4018]	@ 0xfb2
			  buffer1Sent+=1;
 8001a56:	4b56      	ldr	r3, [pc, #344]	@ (8001bb0 <main+0x680>)
 8001a58:	881b      	ldrh	r3, [r3, #0]
 8001a5a:	3301      	adds	r3, #1
 8001a5c:	b29a      	uxth	r2, r3
 8001a5e:	4b54      	ldr	r3, [pc, #336]	@ (8001bb0 <main+0x680>)
 8001a60:	801a      	strh	r2, [r3, #0]
 8001a62:	e023      	b.n	8001aac <main+0x57c>
		  }
		  else if (hsLog.sendOut == BUFFER2){
 8001a64:	4b4c      	ldr	r3, [pc, #304]	@ (8001b98 <main+0x668>)
 8001a66:	f893 3fb0 	ldrb.w	r3, [r3, #4016]	@ 0xfb0
 8001a6a:	2b02      	cmp	r3, #2
 8001a6c:	d11e      	bne.n	8001aac <main+0x57c>
			  HAL_UART_Transmit_DMA(&huart2,(uint8_t *)hsLog.HSbuffer2,hsLog.sendOutBufferSize);
 8001a6e:	4b4a      	ldr	r3, [pc, #296]	@ (8001b98 <main+0x668>)
 8001a70:	f8b3 3fb2 	ldrh.w	r3, [r3, #4018]	@ 0xfb2
 8001a74:	461a      	mov	r2, r3
 8001a76:	494f      	ldr	r1, [pc, #316]	@ (8001bb4 <main+0x684>)
 8001a78:	4845      	ldr	r0, [pc, #276]	@ (8001b90 <main+0x660>)
 8001a7a:	f007 fb5f 	bl	800913c <HAL_UART_Transmit_DMA>
			  //hsLog.DMAdataSentOut = 0;
			  hsLog.sendOut = NOBUFFER;
 8001a7e:	4b46      	ldr	r3, [pc, #280]	@ (8001b98 <main+0x668>)
 8001a80:	2200      	movs	r2, #0
 8001a82:	f883 2fb0 	strb.w	r2, [r3, #4016]	@ 0xfb0
			  totalBytes += hsLog.sendOutBufferSize;
 8001a86:	4b44      	ldr	r3, [pc, #272]	@ (8001b98 <main+0x668>)
 8001a88:	f8b3 3fb2 	ldrh.w	r3, [r3, #4018]	@ 0xfb2
 8001a8c:	461a      	mov	r2, r3
 8001a8e:	4b46      	ldr	r3, [pc, #280]	@ (8001ba8 <main+0x678>)
 8001a90:	681b      	ldr	r3, [r3, #0]
 8001a92:	4413      	add	r3, r2
 8001a94:	4a44      	ldr	r2, [pc, #272]	@ (8001ba8 <main+0x678>)
 8001a96:	6013      	str	r3, [r2, #0]
			  hsLog.sendOutBufferSize = 0;
 8001a98:	4b3f      	ldr	r3, [pc, #252]	@ (8001b98 <main+0x668>)
 8001a9a:	2200      	movs	r2, #0
 8001a9c:	f8a3 2fb2 	strh.w	r2, [r3, #4018]	@ 0xfb2
			  buffer2Sent+=1;
 8001aa0:	4b45      	ldr	r3, [pc, #276]	@ (8001bb8 <main+0x688>)
 8001aa2:	881b      	ldrh	r3, [r3, #0]
 8001aa4:	3301      	adds	r3, #1
 8001aa6:	b29a      	uxth	r2, r3
 8001aa8:	4b43      	ldr	r3, [pc, #268]	@ (8001bb8 <main+0x688>)
 8001aaa:	801a      	strh	r2, [r3, #0]
		  }
		  else {}
		  hsLog_CheckStopConditionReached(&hsLog,&ps,direction);
 8001aac:	4b3c      	ldr	r3, [pc, #240]	@ (8001ba0 <main+0x670>)
 8001aae:	f993 3000 	ldrsb.w	r3, [r3]
 8001ab2:	461a      	mov	r2, r3
 8001ab4:	4939      	ldr	r1, [pc, #228]	@ (8001b9c <main+0x66c>)
 8001ab6:	4838      	ldr	r0, [pc, #224]	@ (8001b98 <main+0x668>)
 8001ab8:	f002 f8ea 	bl	8003c90 <hsLog_CheckStopConditionReached>
		  if (hsLog.stopAndFlushBuffer){
 8001abc:	4b36      	ldr	r3, [pc, #216]	@ (8001b98 <main+0x668>)
 8001abe:	7b1b      	ldrb	r3, [r3, #12]
 8001ac0:	2b00      	cmp	r3, #0
 8001ac2:	f43f add3 	beq.w	800166c <main+0x13c>
			  //stop  the log, send out whatever data
			 hsLog.enable = 0;
 8001ac6:	4b34      	ldr	r3, [pc, #208]	@ (8001b98 <main+0x668>)
 8001ac8:	2200      	movs	r2, #0
 8001aca:	701a      	strb	r2, [r3, #0]
			 hsLog.endLoopIndex = svpwm.loopCounter;
 8001acc:	4b28      	ldr	r3, [pc, #160]	@ (8001b70 <main+0x640>)
 8001ace:	681b      	ldr	r3, [r3, #0]
 8001ad0:	4a31      	ldr	r2, [pc, #196]	@ (8001b98 <main+0x668>)
 8001ad2:	f8c2 3fbc 	str.w	r3, [r2, #4028]	@ 0xfbc
			 if (hsLog.runningBuffer == BUFFER1){
 8001ad6:	4b30      	ldr	r3, [pc, #192]	@ (8001b98 <main+0x668>)
 8001ad8:	7b5b      	ldrb	r3, [r3, #13]
 8001ada:	2b01      	cmp	r3, #1
 8001adc:	d117      	bne.n	8001b0e <main+0x5de>
				HAL_UART_Transmit_DMA(&huart2,(uint8_t *)hsLog.HSbuffer1,hsLog.bufferIndex);
 8001ade:	4b2e      	ldr	r3, [pc, #184]	@ (8001b98 <main+0x668>)
 8001ae0:	f8b3 3fae 	ldrh.w	r3, [r3, #4014]	@ 0xfae
 8001ae4:	461a      	mov	r2, r3
 8001ae6:	4931      	ldr	r1, [pc, #196]	@ (8001bac <main+0x67c>)
 8001ae8:	4829      	ldr	r0, [pc, #164]	@ (8001b90 <main+0x660>)
 8001aea:	f007 fb27 	bl	800913c <HAL_UART_Transmit_DMA>
				buffer1flush+=1;
 8001aee:	4b33      	ldr	r3, [pc, #204]	@ (8001bbc <main+0x68c>)
 8001af0:	881b      	ldrh	r3, [r3, #0]
 8001af2:	3301      	adds	r3, #1
 8001af4:	b29a      	uxth	r2, r3
 8001af6:	4b31      	ldr	r3, [pc, #196]	@ (8001bbc <main+0x68c>)
 8001af8:	801a      	strh	r2, [r3, #0]
				totalBytes += hsLog.sendOutBufferSize;
 8001afa:	4b27      	ldr	r3, [pc, #156]	@ (8001b98 <main+0x668>)
 8001afc:	f8b3 3fb2 	ldrh.w	r3, [r3, #4018]	@ 0xfb2
 8001b00:	461a      	mov	r2, r3
 8001b02:	4b29      	ldr	r3, [pc, #164]	@ (8001ba8 <main+0x678>)
 8001b04:	681b      	ldr	r3, [r3, #0]
 8001b06:	4413      	add	r3, r2
 8001b08:	4a27      	ldr	r2, [pc, #156]	@ (8001ba8 <main+0x678>)
 8001b0a:	6013      	str	r3, [r2, #0]
 8001b0c:	e016      	b.n	8001b3c <main+0x60c>
			 }else{
				HAL_UART_Transmit_DMA(&huart2,(uint8_t *)hsLog.HSbuffer2,hsLog.bufferIndex);
 8001b0e:	4b22      	ldr	r3, [pc, #136]	@ (8001b98 <main+0x668>)
 8001b10:	f8b3 3fae 	ldrh.w	r3, [r3, #4014]	@ 0xfae
 8001b14:	461a      	mov	r2, r3
 8001b16:	4927      	ldr	r1, [pc, #156]	@ (8001bb4 <main+0x684>)
 8001b18:	481d      	ldr	r0, [pc, #116]	@ (8001b90 <main+0x660>)
 8001b1a:	f007 fb0f 	bl	800913c <HAL_UART_Transmit_DMA>
				buffer2flush+=1;
 8001b1e:	4b28      	ldr	r3, [pc, #160]	@ (8001bc0 <main+0x690>)
 8001b20:	881b      	ldrh	r3, [r3, #0]
 8001b22:	3301      	adds	r3, #1
 8001b24:	b29a      	uxth	r2, r3
 8001b26:	4b26      	ldr	r3, [pc, #152]	@ (8001bc0 <main+0x690>)
 8001b28:	801a      	strh	r2, [r3, #0]
				totalBytes += hsLog.sendOutBufferSize;
 8001b2a:	4b1b      	ldr	r3, [pc, #108]	@ (8001b98 <main+0x668>)
 8001b2c:	f8b3 3fb2 	ldrh.w	r3, [r3, #4018]	@ 0xfb2
 8001b30:	461a      	mov	r2, r3
 8001b32:	4b1d      	ldr	r3, [pc, #116]	@ (8001ba8 <main+0x678>)
 8001b34:	681b      	ldr	r3, [r3, #0]
 8001b36:	4413      	add	r3, r2
 8001b38:	4a1b      	ldr	r2, [pc, #108]	@ (8001ba8 <main+0x678>)
 8001b3a:	6013      	str	r3, [r2, #0]
			 }
			 hsLogOn = 0;
 8001b3c:	4b15      	ldr	r3, [pc, #84]	@ (8001b94 <main+0x664>)
 8001b3e:	2200      	movs	r2, #0
 8001b40:	701a      	strb	r2, [r3, #0]
 8001b42:	e593      	b.n	800166c <main+0x13c>
		  }
	  }else{
		  hsLogReset(&hsLog);
 8001b44:	4814      	ldr	r0, [pc, #80]	@ (8001b98 <main+0x668>)
 8001b46:	f001 fe94 	bl	8003872 <hsLogReset>
	  if (turnOffPWMS){
 8001b4a:	e58f      	b.n	800166c <main+0x13c>
 8001b4c:	20001856 	.word	0x20001856
 8001b50:	20000708 	.word	0x20000708
 8001b54:	20000718 	.word	0x20000718
 8001b58:	20001857 	.word	0x20001857
 8001b5c:	20001862 	.word	0x20001862
 8001b60:	43960000 	.word	0x43960000
 8001b64:	20000788 	.word	0x20000788
 8001b68:	20001865 	.word	0x20001865
 8001b6c:	2000177c 	.word	0x2000177c
 8001b70:	200006e4 	.word	0x200006e4
 8001b74:	20001858 	.word	0x20001858
 8001b78:	20001859 	.word	0x20001859
 8001b7c:	2000185e 	.word	0x2000185e
 8001b80:	2000185c 	.word	0x2000185c
 8001b84:	2000185a 	.word	0x2000185a
 8001b88:	200018ad 	.word	0x200018ad
 8001b8c:	0800d060 	.word	0x0800d060
 8001b90:	200004e8 	.word	0x200004e8
 8001b94:	200018ac 	.word	0x200018ac
 8001b98:	200007b8 	.word	0x200007b8
 8001b9c:	200005f8 	.word	0x200005f8
 8001ba0:	20000000 	.word	0x20000000
 8001ba4:	40c90fda 	.word	0x40c90fda
 8001ba8:	200018b8 	.word	0x200018b8
 8001bac:	200007c6 	.word	0x200007c6
 8001bb0:	200018ae 	.word	0x200018ae
 8001bb4:	20000f96 	.word	0x20000f96
 8001bb8:	200018b4 	.word	0x200018b4
 8001bbc:	200018b0 	.word	0x200018b0
 8001bc0:	200018b2 	.word	0x200018b2

08001bc4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001bc4:	b580      	push	{r7, lr}
 8001bc6:	b094      	sub	sp, #80	@ 0x50
 8001bc8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001bca:	f107 0318 	add.w	r3, r7, #24
 8001bce:	2238      	movs	r2, #56	@ 0x38
 8001bd0:	2100      	movs	r1, #0
 8001bd2:	4618      	mov	r0, r3
 8001bd4:	f009 fb17 	bl	800b206 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001bd8:	1d3b      	adds	r3, r7, #4
 8001bda:	2200      	movs	r2, #0
 8001bdc:	601a      	str	r2, [r3, #0]
 8001bde:	605a      	str	r2, [r3, #4]
 8001be0:	609a      	str	r2, [r3, #8]
 8001be2:	60da      	str	r2, [r3, #12]
 8001be4:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001be6:	f44f 7000 	mov.w	r0, #512	@ 0x200
 8001bea:	f004 f93b 	bl	8005e64 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001bee:	2301      	movs	r3, #1
 8001bf0:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001bf2:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8001bf6:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001bf8:	2302      	movs	r3, #2
 8001bfa:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001bfc:	2303      	movs	r3, #3
 8001bfe:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV4;
 8001c00:	2304      	movs	r3, #4
 8001c02:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 75;
 8001c04:	234b      	movs	r3, #75	@ 0x4b
 8001c06:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001c08:	2302      	movs	r3, #2
 8001c0a:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8001c0c:	2302      	movs	r3, #2
 8001c0e:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8001c10:	2302      	movs	r3, #2
 8001c12:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001c14:	f107 0318 	add.w	r3, r7, #24
 8001c18:	4618      	mov	r0, r3
 8001c1a:	f004 f9d7 	bl	8005fcc <HAL_RCC_OscConfig>
 8001c1e:	4603      	mov	r3, r0
 8001c20:	2b00      	cmp	r3, #0
 8001c22:	d001      	beq.n	8001c28 <SystemClock_Config+0x64>
  {
    Error_Handler();
 8001c24:	f000 fa8a 	bl	800213c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001c28:	230f      	movs	r3, #15
 8001c2a:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001c2c:	2303      	movs	r3, #3
 8001c2e:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001c30:	2300      	movs	r3, #0
 8001c32:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001c34:	2300      	movs	r3, #0
 8001c36:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001c38:	2300      	movs	r3, #0
 8001c3a:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8001c3c:	1d3b      	adds	r3, r7, #4
 8001c3e:	2104      	movs	r1, #4
 8001c40:	4618      	mov	r0, r3
 8001c42:	f004 fcd5 	bl	80065f0 <HAL_RCC_ClockConfig>
 8001c46:	4603      	mov	r3, r0
 8001c48:	2b00      	cmp	r3, #0
 8001c4a:	d001      	beq.n	8001c50 <SystemClock_Config+0x8c>
  {
    Error_Handler();
 8001c4c:	f000 fa76 	bl	800213c <Error_Handler>
  }
}
 8001c50:	bf00      	nop
 8001c52:	3750      	adds	r7, #80	@ 0x50
 8001c54:	46bd      	mov	sp, r7
 8001c56:	bd80      	pop	{r7, pc}

08001c58 <MX_CORDIC_Init>:
  * @brief CORDIC Initialization Function
  * @param None
  * @retval None
  */
static void MX_CORDIC_Init(void)
{
 8001c58:	b580      	push	{r7, lr}
 8001c5a:	af00      	add	r7, sp, #0
  /* USER CODE END CORDIC_Init 0 */

  /* USER CODE BEGIN CORDIC_Init 1 */

  /* USER CODE END CORDIC_Init 1 */
  hcordic.Instance = CORDIC;
 8001c5c:	4b06      	ldr	r3, [pc, #24]	@ (8001c78 <MX_CORDIC_Init+0x20>)
 8001c5e:	4a07      	ldr	r2, [pc, #28]	@ (8001c7c <MX_CORDIC_Init+0x24>)
 8001c60:	601a      	str	r2, [r3, #0]
  if (HAL_CORDIC_Init(&hcordic) != HAL_OK)
 8001c62:	4805      	ldr	r0, [pc, #20]	@ (8001c78 <MX_CORDIC_Init+0x20>)
 8001c64:	f003 fa76 	bl	8005154 <HAL_CORDIC_Init>
 8001c68:	4603      	mov	r3, r0
 8001c6a:	2b00      	cmp	r3, #0
 8001c6c:	d001      	beq.n	8001c72 <MX_CORDIC_Init+0x1a>
  {
    Error_Handler();
 8001c6e:	f000 fa65 	bl	800213c <Error_Handler>
  }
  /* USER CODE BEGIN CORDIC_Init 2 */

  /* USER CODE END CORDIC_Init 2 */

}
 8001c72:	bf00      	nop
 8001c74:	bd80      	pop	{r7, pc}
 8001c76:	bf00      	nop
 8001c78:	20000378 	.word	0x20000378
 8001c7c:	40020c00 	.word	0x40020c00

08001c80 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8001c80:	b580      	push	{r7, lr}
 8001c82:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8001c84:	4b1b      	ldr	r3, [pc, #108]	@ (8001cf4 <MX_SPI1_Init+0x74>)
 8001c86:	4a1c      	ldr	r2, [pc, #112]	@ (8001cf8 <MX_SPI1_Init+0x78>)
 8001c88:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8001c8a:	4b1a      	ldr	r3, [pc, #104]	@ (8001cf4 <MX_SPI1_Init+0x74>)
 8001c8c:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8001c90:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8001c92:	4b18      	ldr	r3, [pc, #96]	@ (8001cf4 <MX_SPI1_Init+0x74>)
 8001c94:	2200      	movs	r2, #0
 8001c96:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8001c98:	4b16      	ldr	r3, [pc, #88]	@ (8001cf4 <MX_SPI1_Init+0x74>)
 8001c9a:	f44f 62e0 	mov.w	r2, #1792	@ 0x700
 8001c9e:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001ca0:	4b14      	ldr	r3, [pc, #80]	@ (8001cf4 <MX_SPI1_Init+0x74>)
 8001ca2:	2200      	movs	r2, #0
 8001ca4:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_2EDGE;
 8001ca6:	4b13      	ldr	r3, [pc, #76]	@ (8001cf4 <MX_SPI1_Init+0x74>)
 8001ca8:	2201      	movs	r2, #1
 8001caa:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8001cac:	4b11      	ldr	r3, [pc, #68]	@ (8001cf4 <MX_SPI1_Init+0x74>)
 8001cae:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001cb2:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 8001cb4:	4b0f      	ldr	r3, [pc, #60]	@ (8001cf4 <MX_SPI1_Init+0x74>)
 8001cb6:	2218      	movs	r2, #24
 8001cb8:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001cba:	4b0e      	ldr	r3, [pc, #56]	@ (8001cf4 <MX_SPI1_Init+0x74>)
 8001cbc:	2200      	movs	r2, #0
 8001cbe:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001cc0:	4b0c      	ldr	r3, [pc, #48]	@ (8001cf4 <MX_SPI1_Init+0x74>)
 8001cc2:	2200      	movs	r2, #0
 8001cc4:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001cc6:	4b0b      	ldr	r3, [pc, #44]	@ (8001cf4 <MX_SPI1_Init+0x74>)
 8001cc8:	2200      	movs	r2, #0
 8001cca:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 7;
 8001ccc:	4b09      	ldr	r3, [pc, #36]	@ (8001cf4 <MX_SPI1_Init+0x74>)
 8001cce:	2207      	movs	r2, #7
 8001cd0:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8001cd2:	4b08      	ldr	r3, [pc, #32]	@ (8001cf4 <MX_SPI1_Init+0x74>)
 8001cd4:	2200      	movs	r2, #0
 8001cd6:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 8001cd8:	4b06      	ldr	r3, [pc, #24]	@ (8001cf4 <MX_SPI1_Init+0x74>)
 8001cda:	2200      	movs	r2, #0
 8001cdc:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001cde:	4805      	ldr	r0, [pc, #20]	@ (8001cf4 <MX_SPI1_Init+0x74>)
 8001ce0:	f005 f88e 	bl	8006e00 <HAL_SPI_Init>
 8001ce4:	4603      	mov	r3, r0
 8001ce6:	2b00      	cmp	r3, #0
 8001ce8:	d001      	beq.n	8001cee <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 8001cea:	f000 fa27 	bl	800213c <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8001cee:	bf00      	nop
 8001cf0:	bd80      	pop	{r7, pc}
 8001cf2:	bf00      	nop
 8001cf4:	200003a0 	.word	0x200003a0
 8001cf8:	40013000 	.word	0x40013000

08001cfc <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8001cfc:	b580      	push	{r7, lr}
 8001cfe:	b09c      	sub	sp, #112	@ 0x70
 8001d00:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001d02:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 8001d06:	2200      	movs	r2, #0
 8001d08:	601a      	str	r2, [r3, #0]
 8001d0a:	605a      	str	r2, [r3, #4]
 8001d0c:	609a      	str	r2, [r3, #8]
 8001d0e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001d10:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8001d14:	2200      	movs	r2, #0
 8001d16:	601a      	str	r2, [r3, #0]
 8001d18:	605a      	str	r2, [r3, #4]
 8001d1a:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001d1c:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8001d20:	2200      	movs	r2, #0
 8001d22:	601a      	str	r2, [r3, #0]
 8001d24:	605a      	str	r2, [r3, #4]
 8001d26:	609a      	str	r2, [r3, #8]
 8001d28:	60da      	str	r2, [r3, #12]
 8001d2a:	611a      	str	r2, [r3, #16]
 8001d2c:	615a      	str	r2, [r3, #20]
 8001d2e:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001d30:	1d3b      	adds	r3, r7, #4
 8001d32:	2234      	movs	r2, #52	@ 0x34
 8001d34:	2100      	movs	r1, #0
 8001d36:	4618      	mov	r0, r3
 8001d38:	f009 fa65 	bl	800b206 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001d3c:	4b52      	ldr	r3, [pc, #328]	@ (8001e88 <MX_TIM1_Init+0x18c>)
 8001d3e:	4a53      	ldr	r2, [pc, #332]	@ (8001e8c <MX_TIM1_Init+0x190>)
 8001d40:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 5;
 8001d42:	4b51      	ldr	r3, [pc, #324]	@ (8001e88 <MX_TIM1_Init+0x18c>)
 8001d44:	2205      	movs	r2, #5
 8001d46:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_CENTERALIGNED1;
 8001d48:	4b4f      	ldr	r3, [pc, #316]	@ (8001e88 <MX_TIM1_Init+0x18c>)
 8001d4a:	2220      	movs	r2, #32
 8001d4c:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 1249;
 8001d4e:	4b4e      	ldr	r3, [pc, #312]	@ (8001e88 <MX_TIM1_Init+0x18c>)
 8001d50:	f240 42e1 	movw	r2, #1249	@ 0x4e1
 8001d54:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001d56:	4b4c      	ldr	r3, [pc, #304]	@ (8001e88 <MX_TIM1_Init+0x18c>)
 8001d58:	2200      	movs	r2, #0
 8001d5a:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001d5c:	4b4a      	ldr	r3, [pc, #296]	@ (8001e88 <MX_TIM1_Init+0x18c>)
 8001d5e:	2200      	movs	r2, #0
 8001d60:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001d62:	4b49      	ldr	r3, [pc, #292]	@ (8001e88 <MX_TIM1_Init+0x18c>)
 8001d64:	2200      	movs	r2, #0
 8001d66:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8001d68:	4847      	ldr	r0, [pc, #284]	@ (8001e88 <MX_TIM1_Init+0x18c>)
 8001d6a:	f005 fc77 	bl	800765c <HAL_TIM_Base_Init>
 8001d6e:	4603      	mov	r3, r0
 8001d70:	2b00      	cmp	r3, #0
 8001d72:	d001      	beq.n	8001d78 <MX_TIM1_Init+0x7c>
  {
    Error_Handler();
 8001d74:	f000 f9e2 	bl	800213c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001d78:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001d7c:	663b      	str	r3, [r7, #96]	@ 0x60
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8001d7e:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 8001d82:	4619      	mov	r1, r3
 8001d84:	4840      	ldr	r0, [pc, #256]	@ (8001e88 <MX_TIM1_Init+0x18c>)
 8001d86:	f006 f987 	bl	8008098 <HAL_TIM_ConfigClockSource>
 8001d8a:	4603      	mov	r3, r0
 8001d8c:	2b00      	cmp	r3, #0
 8001d8e:	d001      	beq.n	8001d94 <MX_TIM1_Init+0x98>
  {
    Error_Handler();
 8001d90:	f000 f9d4 	bl	800213c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8001d94:	483c      	ldr	r0, [pc, #240]	@ (8001e88 <MX_TIM1_Init+0x18c>)
 8001d96:	f005 fd23 	bl	80077e0 <HAL_TIM_PWM_Init>
 8001d9a:	4603      	mov	r3, r0
 8001d9c:	2b00      	cmp	r3, #0
 8001d9e:	d001      	beq.n	8001da4 <MX_TIM1_Init+0xa8>
  {
    Error_Handler();
 8001da0:	f000 f9cc 	bl	800213c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001da4:	2300      	movs	r3, #0
 8001da6:	657b      	str	r3, [r7, #84]	@ 0x54
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8001da8:	2300      	movs	r3, #0
 8001daa:	65bb      	str	r3, [r7, #88]	@ 0x58
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001dac:	2300      	movs	r3, #0
 8001dae:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001db0:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8001db4:	4619      	mov	r1, r3
 8001db6:	4834      	ldr	r0, [pc, #208]	@ (8001e88 <MX_TIM1_Init+0x18c>)
 8001db8:	f006 fff6 	bl	8008da8 <HAL_TIMEx_MasterConfigSynchronization>
 8001dbc:	4603      	mov	r3, r0
 8001dbe:	2b00      	cmp	r3, #0
 8001dc0:	d001      	beq.n	8001dc6 <MX_TIM1_Init+0xca>
  {
    Error_Handler();
 8001dc2:	f000 f9bb 	bl	800213c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001dc6:	2360      	movs	r3, #96	@ 0x60
 8001dc8:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.Pulse = 0;
 8001dca:	2300      	movs	r3, #0
 8001dcc:	63fb      	str	r3, [r7, #60]	@ 0x3c
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001dce:	2300      	movs	r3, #0
 8001dd0:	643b      	str	r3, [r7, #64]	@ 0x40
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_LOW;
 8001dd2:	2308      	movs	r3, #8
 8001dd4:	647b      	str	r3, [r7, #68]	@ 0x44
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001dd6:	2300      	movs	r3, #0
 8001dd8:	64bb      	str	r3, [r7, #72]	@ 0x48
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001dda:	2300      	movs	r3, #0
 8001ddc:	64fb      	str	r3, [r7, #76]	@ 0x4c
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_SET;
 8001dde:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8001de2:	653b      	str	r3, [r7, #80]	@ 0x50
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001de4:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8001de8:	2200      	movs	r2, #0
 8001dea:	4619      	mov	r1, r3
 8001dec:	4826      	ldr	r0, [pc, #152]	@ (8001e88 <MX_TIM1_Init+0x18c>)
 8001dee:	f006 f83f 	bl	8007e70 <HAL_TIM_PWM_ConfigChannel>
 8001df2:	4603      	mov	r3, r0
 8001df4:	2b00      	cmp	r3, #0
 8001df6:	d001      	beq.n	8001dfc <MX_TIM1_Init+0x100>
  {
    Error_Handler();
 8001df8:	f000 f9a0 	bl	800213c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001dfc:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8001e00:	2204      	movs	r2, #4
 8001e02:	4619      	mov	r1, r3
 8001e04:	4820      	ldr	r0, [pc, #128]	@ (8001e88 <MX_TIM1_Init+0x18c>)
 8001e06:	f006 f833 	bl	8007e70 <HAL_TIM_PWM_ConfigChannel>
 8001e0a:	4603      	mov	r3, r0
 8001e0c:	2b00      	cmp	r3, #0
 8001e0e:	d001      	beq.n	8001e14 <MX_TIM1_Init+0x118>
  {
    Error_Handler();
 8001e10:	f000 f994 	bl	800213c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8001e14:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8001e18:	2208      	movs	r2, #8
 8001e1a:	4619      	mov	r1, r3
 8001e1c:	481a      	ldr	r0, [pc, #104]	@ (8001e88 <MX_TIM1_Init+0x18c>)
 8001e1e:	f006 f827 	bl	8007e70 <HAL_TIM_PWM_ConfigChannel>
 8001e22:	4603      	mov	r3, r0
 8001e24:	2b00      	cmp	r3, #0
 8001e26:	d001      	beq.n	8001e2c <MX_TIM1_Init+0x130>
  {
    Error_Handler();
 8001e28:	f000 f988 	bl	800213c <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001e2c:	2300      	movs	r3, #0
 8001e2e:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001e30:	2300      	movs	r3, #0
 8001e32:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001e34:	2300      	movs	r3, #0
 8001e36:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 90;
 8001e38:	235a      	movs	r3, #90	@ 0x5a
 8001e3a:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001e3c:	2300      	movs	r3, #0
 8001e3e:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001e40:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001e44:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8001e46:	2300      	movs	r3, #0
 8001e48:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 8001e4a:	2300      	movs	r3, #0
 8001e4c:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8001e4e:	2300      	movs	r3, #0
 8001e50:	627b      	str	r3, [r7, #36]	@ 0x24
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8001e52:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8001e56:	62bb      	str	r3, [r7, #40]	@ 0x28
  sBreakDeadTimeConfig.Break2Filter = 0;
 8001e58:	2300      	movs	r3, #0
 8001e5a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 8001e5c:	2300      	movs	r3, #0
 8001e5e:	633b      	str	r3, [r7, #48]	@ 0x30
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001e60:	2300      	movs	r3, #0
 8001e62:	637b      	str	r3, [r7, #52]	@ 0x34
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8001e64:	1d3b      	adds	r3, r7, #4
 8001e66:	4619      	mov	r1, r3
 8001e68:	4807      	ldr	r0, [pc, #28]	@ (8001e88 <MX_TIM1_Init+0x18c>)
 8001e6a:	f007 f81f 	bl	8008eac <HAL_TIMEx_ConfigBreakDeadTime>
 8001e6e:	4603      	mov	r3, r0
 8001e70:	2b00      	cmp	r3, #0
 8001e72:	d001      	beq.n	8001e78 <MX_TIM1_Init+0x17c>
  {
    Error_Handler();
 8001e74:	f000 f962 	bl	800213c <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8001e78:	4803      	ldr	r0, [pc, #12]	@ (8001e88 <MX_TIM1_Init+0x18c>)
 8001e7a:	f000 fa4b 	bl	8002314 <HAL_TIM_MspPostInit>

}
 8001e7e:	bf00      	nop
 8001e80:	3770      	adds	r7, #112	@ 0x70
 8001e82:	46bd      	mov	sp, r7
 8001e84:	bd80      	pop	{r7, pc}
 8001e86:	bf00      	nop
 8001e88:	20000404 	.word	0x20000404
 8001e8c:	40012c00 	.word	0x40012c00

08001e90 <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 8001e90:	b580      	push	{r7, lr}
 8001e92:	b084      	sub	sp, #16
 8001e94:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001e96:	1d3b      	adds	r3, r7, #4
 8001e98:	2200      	movs	r2, #0
 8001e9a:	601a      	str	r2, [r3, #0]
 8001e9c:	605a      	str	r2, [r3, #4]
 8001e9e:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8001ea0:	4b15      	ldr	r3, [pc, #84]	@ (8001ef8 <MX_TIM6_Init+0x68>)
 8001ea2:	4a16      	ldr	r2, [pc, #88]	@ (8001efc <MX_TIM6_Init+0x6c>)
 8001ea4:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 1249;
 8001ea6:	4b14      	ldr	r3, [pc, #80]	@ (8001ef8 <MX_TIM6_Init+0x68>)
 8001ea8:	f240 42e1 	movw	r2, #1249	@ 0x4e1
 8001eac:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001eae:	4b12      	ldr	r3, [pc, #72]	@ (8001ef8 <MX_TIM6_Init+0x68>)
 8001eb0:	2200      	movs	r2, #0
 8001eb2:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 2399;
 8001eb4:	4b10      	ldr	r3, [pc, #64]	@ (8001ef8 <MX_TIM6_Init+0x68>)
 8001eb6:	f640 125f 	movw	r2, #2399	@ 0x95f
 8001eba:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001ebc:	4b0e      	ldr	r3, [pc, #56]	@ (8001ef8 <MX_TIM6_Init+0x68>)
 8001ebe:	2200      	movs	r2, #0
 8001ec0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8001ec2:	480d      	ldr	r0, [pc, #52]	@ (8001ef8 <MX_TIM6_Init+0x68>)
 8001ec4:	f005 fbca 	bl	800765c <HAL_TIM_Base_Init>
 8001ec8:	4603      	mov	r3, r0
 8001eca:	2b00      	cmp	r3, #0
 8001ecc:	d001      	beq.n	8001ed2 <MX_TIM6_Init+0x42>
  {
    Error_Handler();
 8001ece:	f000 f935 	bl	800213c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001ed2:	2300      	movs	r3, #0
 8001ed4:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001ed6:	2300      	movs	r3, #0
 8001ed8:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8001eda:	1d3b      	adds	r3, r7, #4
 8001edc:	4619      	mov	r1, r3
 8001ede:	4806      	ldr	r0, [pc, #24]	@ (8001ef8 <MX_TIM6_Init+0x68>)
 8001ee0:	f006 ff62 	bl	8008da8 <HAL_TIMEx_MasterConfigSynchronization>
 8001ee4:	4603      	mov	r3, r0
 8001ee6:	2b00      	cmp	r3, #0
 8001ee8:	d001      	beq.n	8001eee <MX_TIM6_Init+0x5e>
  {
    Error_Handler();
 8001eea:	f000 f927 	bl	800213c <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 8001eee:	bf00      	nop
 8001ef0:	3710      	adds	r7, #16
 8001ef2:	46bd      	mov	sp, r7
 8001ef4:	bd80      	pop	{r7, pc}
 8001ef6:	bf00      	nop
 8001ef8:	20000450 	.word	0x20000450
 8001efc:	40001000 	.word	0x40001000

08001f00 <MX_TIM7_Init>:
  * @brief TIM7 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM7_Init(void)
{
 8001f00:	b580      	push	{r7, lr}
 8001f02:	b084      	sub	sp, #16
 8001f04:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM7_Init 0 */

  /* USER CODE END TIM7_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001f06:	1d3b      	adds	r3, r7, #4
 8001f08:	2200      	movs	r2, #0
 8001f0a:	601a      	str	r2, [r3, #0]
 8001f0c:	605a      	str	r2, [r3, #4]
 8001f0e:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM7_Init 1 */

  /* USER CODE END TIM7_Init 1 */
  htim7.Instance = TIM7;
 8001f10:	4b14      	ldr	r3, [pc, #80]	@ (8001f64 <MX_TIM7_Init+0x64>)
 8001f12:	4a15      	ldr	r2, [pc, #84]	@ (8001f68 <MX_TIM7_Init+0x68>)
 8001f14:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 1499;
 8001f16:	4b13      	ldr	r3, [pc, #76]	@ (8001f64 <MX_TIM7_Init+0x64>)
 8001f18:	f240 52db 	movw	r2, #1499	@ 0x5db
 8001f1c:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001f1e:	4b11      	ldr	r3, [pc, #68]	@ (8001f64 <MX_TIM7_Init+0x64>)
 8001f20:	2200      	movs	r2, #0
 8001f22:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 99;
 8001f24:	4b0f      	ldr	r3, [pc, #60]	@ (8001f64 <MX_TIM7_Init+0x64>)
 8001f26:	2263      	movs	r2, #99	@ 0x63
 8001f28:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001f2a:	4b0e      	ldr	r3, [pc, #56]	@ (8001f64 <MX_TIM7_Init+0x64>)
 8001f2c:	2200      	movs	r2, #0
 8001f2e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 8001f30:	480c      	ldr	r0, [pc, #48]	@ (8001f64 <MX_TIM7_Init+0x64>)
 8001f32:	f005 fb93 	bl	800765c <HAL_TIM_Base_Init>
 8001f36:	4603      	mov	r3, r0
 8001f38:	2b00      	cmp	r3, #0
 8001f3a:	d001      	beq.n	8001f40 <MX_TIM7_Init+0x40>
  {
    Error_Handler();
 8001f3c:	f000 f8fe 	bl	800213c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001f40:	2300      	movs	r3, #0
 8001f42:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001f44:	2300      	movs	r3, #0
 8001f46:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 8001f48:	1d3b      	adds	r3, r7, #4
 8001f4a:	4619      	mov	r1, r3
 8001f4c:	4805      	ldr	r0, [pc, #20]	@ (8001f64 <MX_TIM7_Init+0x64>)
 8001f4e:	f006 ff2b 	bl	8008da8 <HAL_TIMEx_MasterConfigSynchronization>
 8001f52:	4603      	mov	r3, r0
 8001f54:	2b00      	cmp	r3, #0
 8001f56:	d001      	beq.n	8001f5c <MX_TIM7_Init+0x5c>
  {
    Error_Handler();
 8001f58:	f000 f8f0 	bl	800213c <Error_Handler>
  }
  /* USER CODE BEGIN TIM7_Init 2 */

  /* USER CODE END TIM7_Init 2 */

}
 8001f5c:	bf00      	nop
 8001f5e:	3710      	adds	r7, #16
 8001f60:	46bd      	mov	sp, r7
 8001f62:	bd80      	pop	{r7, pc}
 8001f64:	2000049c 	.word	0x2000049c
 8001f68:	40001400 	.word	0x40001400

08001f6c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001f6c:	b580      	push	{r7, lr}
 8001f6e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001f70:	4b22      	ldr	r3, [pc, #136]	@ (8001ffc <MX_USART2_UART_Init+0x90>)
 8001f72:	4a23      	ldr	r2, [pc, #140]	@ (8002000 <MX_USART2_UART_Init+0x94>)
 8001f74:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 4800000;
 8001f76:	4b21      	ldr	r3, [pc, #132]	@ (8001ffc <MX_USART2_UART_Init+0x90>)
 8001f78:	4a22      	ldr	r2, [pc, #136]	@ (8002004 <MX_USART2_UART_Init+0x98>)
 8001f7a:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001f7c:	4b1f      	ldr	r3, [pc, #124]	@ (8001ffc <MX_USART2_UART_Init+0x90>)
 8001f7e:	2200      	movs	r2, #0
 8001f80:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001f82:	4b1e      	ldr	r3, [pc, #120]	@ (8001ffc <MX_USART2_UART_Init+0x90>)
 8001f84:	2200      	movs	r2, #0
 8001f86:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001f88:	4b1c      	ldr	r3, [pc, #112]	@ (8001ffc <MX_USART2_UART_Init+0x90>)
 8001f8a:	2200      	movs	r2, #0
 8001f8c:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX;
 8001f8e:	4b1b      	ldr	r3, [pc, #108]	@ (8001ffc <MX_USART2_UART_Init+0x90>)
 8001f90:	2208      	movs	r2, #8
 8001f92:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001f94:	4b19      	ldr	r3, [pc, #100]	@ (8001ffc <MX_USART2_UART_Init+0x90>)
 8001f96:	2200      	movs	r2, #0
 8001f98:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001f9a:	4b18      	ldr	r3, [pc, #96]	@ (8001ffc <MX_USART2_UART_Init+0x90>)
 8001f9c:	2200      	movs	r2, #0
 8001f9e:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001fa0:	4b16      	ldr	r3, [pc, #88]	@ (8001ffc <MX_USART2_UART_Init+0x90>)
 8001fa2:	2200      	movs	r2, #0
 8001fa4:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001fa6:	4b15      	ldr	r3, [pc, #84]	@ (8001ffc <MX_USART2_UART_Init+0x90>)
 8001fa8:	2200      	movs	r2, #0
 8001faa:	625a      	str	r2, [r3, #36]	@ 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001fac:	4b13      	ldr	r3, [pc, #76]	@ (8001ffc <MX_USART2_UART_Init+0x90>)
 8001fae:	2200      	movs	r2, #0
 8001fb0:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001fb2:	4812      	ldr	r0, [pc, #72]	@ (8001ffc <MX_USART2_UART_Init+0x90>)
 8001fb4:	f007 f871 	bl	800909a <HAL_UART_Init>
 8001fb8:	4603      	mov	r3, r0
 8001fba:	2b00      	cmp	r3, #0
 8001fbc:	d001      	beq.n	8001fc2 <MX_USART2_UART_Init+0x56>
  {
    Error_Handler();
 8001fbe:	f000 f8bd 	bl	800213c <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001fc2:	2100      	movs	r1, #0
 8001fc4:	480d      	ldr	r0, [pc, #52]	@ (8001ffc <MX_USART2_UART_Init+0x90>)
 8001fc6:	f008 faf6 	bl	800a5b6 <HAL_UARTEx_SetTxFifoThreshold>
 8001fca:	4603      	mov	r3, r0
 8001fcc:	2b00      	cmp	r3, #0
 8001fce:	d001      	beq.n	8001fd4 <MX_USART2_UART_Init+0x68>
  {
    Error_Handler();
 8001fd0:	f000 f8b4 	bl	800213c <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001fd4:	2100      	movs	r1, #0
 8001fd6:	4809      	ldr	r0, [pc, #36]	@ (8001ffc <MX_USART2_UART_Init+0x90>)
 8001fd8:	f008 fb2b 	bl	800a632 <HAL_UARTEx_SetRxFifoThreshold>
 8001fdc:	4603      	mov	r3, r0
 8001fde:	2b00      	cmp	r3, #0
 8001fe0:	d001      	beq.n	8001fe6 <MX_USART2_UART_Init+0x7a>
  {
    Error_Handler();
 8001fe2:	f000 f8ab 	bl	800213c <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 8001fe6:	4805      	ldr	r0, [pc, #20]	@ (8001ffc <MX_USART2_UART_Init+0x90>)
 8001fe8:	f008 faac 	bl	800a544 <HAL_UARTEx_DisableFifoMode>
 8001fec:	4603      	mov	r3, r0
 8001fee:	2b00      	cmp	r3, #0
 8001ff0:	d001      	beq.n	8001ff6 <MX_USART2_UART_Init+0x8a>
  {
    Error_Handler();
 8001ff2:	f000 f8a3 	bl	800213c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001ff6:	bf00      	nop
 8001ff8:	bd80      	pop	{r7, pc}
 8001ffa:	bf00      	nop
 8001ffc:	200004e8 	.word	0x200004e8
 8002000:	40004400 	.word	0x40004400
 8002004:	00493e00 	.word	0x00493e00

08002008 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8002008:	b580      	push	{r7, lr}
 800200a:	b082      	sub	sp, #8
 800200c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 800200e:	4b12      	ldr	r3, [pc, #72]	@ (8002058 <MX_DMA_Init+0x50>)
 8002010:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002012:	4a11      	ldr	r2, [pc, #68]	@ (8002058 <MX_DMA_Init+0x50>)
 8002014:	f043 0304 	orr.w	r3, r3, #4
 8002018:	6493      	str	r3, [r2, #72]	@ 0x48
 800201a:	4b0f      	ldr	r3, [pc, #60]	@ (8002058 <MX_DMA_Init+0x50>)
 800201c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800201e:	f003 0304 	and.w	r3, r3, #4
 8002022:	607b      	str	r3, [r7, #4]
 8002024:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 8002026:	4b0c      	ldr	r3, [pc, #48]	@ (8002058 <MX_DMA_Init+0x50>)
 8002028:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800202a:	4a0b      	ldr	r2, [pc, #44]	@ (8002058 <MX_DMA_Init+0x50>)
 800202c:	f043 0301 	orr.w	r3, r3, #1
 8002030:	6493      	str	r3, [r2, #72]	@ 0x48
 8002032:	4b09      	ldr	r3, [pc, #36]	@ (8002058 <MX_DMA_Init+0x50>)
 8002034:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002036:	f003 0301 	and.w	r3, r3, #1
 800203a:	603b      	str	r3, [r7, #0]
 800203c:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 800203e:	2200      	movs	r2, #0
 8002040:	2100      	movs	r1, #0
 8002042:	200b      	movs	r0, #11
 8002044:	f003 f9cf 	bl	80053e6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8002048:	200b      	movs	r0, #11
 800204a:	f003 f9e6 	bl	800541a <HAL_NVIC_EnableIRQ>

}
 800204e:	bf00      	nop
 8002050:	3708      	adds	r7, #8
 8002052:	46bd      	mov	sp, r7
 8002054:	bd80      	pop	{r7, pc}
 8002056:	bf00      	nop
 8002058:	40021000 	.word	0x40021000

0800205c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800205c:	b580      	push	{r7, lr}
 800205e:	b088      	sub	sp, #32
 8002060:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002062:	f107 030c 	add.w	r3, r7, #12
 8002066:	2200      	movs	r2, #0
 8002068:	601a      	str	r2, [r3, #0]
 800206a:	605a      	str	r2, [r3, #4]
 800206c:	609a      	str	r2, [r3, #8]
 800206e:	60da      	str	r2, [r3, #12]
 8002070:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8002072:	4b30      	ldr	r3, [pc, #192]	@ (8002134 <MX_GPIO_Init+0xd8>)
 8002074:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002076:	4a2f      	ldr	r2, [pc, #188]	@ (8002134 <MX_GPIO_Init+0xd8>)
 8002078:	f043 0320 	orr.w	r3, r3, #32
 800207c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800207e:	4b2d      	ldr	r3, [pc, #180]	@ (8002134 <MX_GPIO_Init+0xd8>)
 8002080:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002082:	f003 0320 	and.w	r3, r3, #32
 8002086:	60bb      	str	r3, [r7, #8]
 8002088:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800208a:	4b2a      	ldr	r3, [pc, #168]	@ (8002134 <MX_GPIO_Init+0xd8>)
 800208c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800208e:	4a29      	ldr	r2, [pc, #164]	@ (8002134 <MX_GPIO_Init+0xd8>)
 8002090:	f043 0301 	orr.w	r3, r3, #1
 8002094:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002096:	4b27      	ldr	r3, [pc, #156]	@ (8002134 <MX_GPIO_Init+0xd8>)
 8002098:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800209a:	f003 0301 	and.w	r3, r3, #1
 800209e:	607b      	str	r3, [r7, #4]
 80020a0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80020a2:	4b24      	ldr	r3, [pc, #144]	@ (8002134 <MX_GPIO_Init+0xd8>)
 80020a4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80020a6:	4a23      	ldr	r2, [pc, #140]	@ (8002134 <MX_GPIO_Init+0xd8>)
 80020a8:	f043 0302 	orr.w	r3, r3, #2
 80020ac:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80020ae:	4b21      	ldr	r3, [pc, #132]	@ (8002134 <MX_GPIO_Init+0xd8>)
 80020b0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80020b2:	f003 0302 	and.w	r3, r3, #2
 80020b6:	603b      	str	r3, [r7, #0]
 80020b8:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, SPI1_CS_Pin|FAULT_LED_Pin, GPIO_PIN_RESET);
 80020ba:	2200      	movs	r2, #0
 80020bc:	21c0      	movs	r1, #192	@ 0xc0
 80020be:	481e      	ldr	r0, [pc, #120]	@ (8002138 <MX_GPIO_Init+0xdc>)
 80020c0:	f003 fe7a 	bl	8005db8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : ENC_B_Pin */
  GPIO_InitStruct.Pin = ENC_B_Pin;
 80020c4:	2380      	movs	r3, #128	@ 0x80
 80020c6:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80020c8:	2302      	movs	r3, #2
 80020ca:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020cc:	2300      	movs	r3, #0
 80020ce:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80020d0:	2300      	movs	r3, #0
 80020d2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80020d4:	2302      	movs	r3, #2
 80020d6:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(ENC_B_GPIO_Port, &GPIO_InitStruct);
 80020d8:	f107 030c 	add.w	r3, r7, #12
 80020dc:	4619      	mov	r1, r3
 80020de:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80020e2:	f003 fce7 	bl	8005ab4 <HAL_GPIO_Init>

  /*Configure GPIO pin : ENC_INDEX_Pin */
  GPIO_InitStruct.Pin = ENC_INDEX_Pin;
 80020e6:	2301      	movs	r3, #1
 80020e8:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80020ea:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 80020ee:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020f0:	2300      	movs	r3, #0
 80020f2:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(ENC_INDEX_GPIO_Port, &GPIO_InitStruct);
 80020f4:	f107 030c 	add.w	r3, r7, #12
 80020f8:	4619      	mov	r1, r3
 80020fa:	480f      	ldr	r0, [pc, #60]	@ (8002138 <MX_GPIO_Init+0xdc>)
 80020fc:	f003 fcda 	bl	8005ab4 <HAL_GPIO_Init>

  /*Configure GPIO pins : SPI1_CS_Pin FAULT_LED_Pin */
  GPIO_InitStruct.Pin = SPI1_CS_Pin|FAULT_LED_Pin;
 8002100:	23c0      	movs	r3, #192	@ 0xc0
 8002102:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002104:	2301      	movs	r3, #1
 8002106:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002108:	2300      	movs	r3, #0
 800210a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800210c:	2300      	movs	r3, #0
 800210e:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002110:	f107 030c 	add.w	r3, r7, #12
 8002114:	4619      	mov	r1, r3
 8002116:	4808      	ldr	r0, [pc, #32]	@ (8002138 <MX_GPIO_Init+0xdc>)
 8002118:	f003 fccc 	bl	8005ab4 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 3, 0);
 800211c:	2200      	movs	r2, #0
 800211e:	2103      	movs	r1, #3
 8002120:	2006      	movs	r0, #6
 8002122:	f003 f960 	bl	80053e6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8002126:	2006      	movs	r0, #6
 8002128:	f003 f977 	bl	800541a <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800212c:	bf00      	nop
 800212e:	3720      	adds	r7, #32
 8002130:	46bd      	mov	sp, r7
 8002132:	bd80      	pop	{r7, pc}
 8002134:	40021000 	.word	0x40021000
 8002138:	48000400 	.word	0x48000400

0800213c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800213c:	b480      	push	{r7}
 800213e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002140:	b672      	cpsid	i
}
 8002142:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002144:	bf00      	nop
 8002146:	e7fd      	b.n	8002144 <Error_Handler+0x8>

08002148 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002148:	b580      	push	{r7, lr}
 800214a:	b082      	sub	sp, #8
 800214c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800214e:	4b0f      	ldr	r3, [pc, #60]	@ (800218c <HAL_MspInit+0x44>)
 8002150:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002152:	4a0e      	ldr	r2, [pc, #56]	@ (800218c <HAL_MspInit+0x44>)
 8002154:	f043 0301 	orr.w	r3, r3, #1
 8002158:	6613      	str	r3, [r2, #96]	@ 0x60
 800215a:	4b0c      	ldr	r3, [pc, #48]	@ (800218c <HAL_MspInit+0x44>)
 800215c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800215e:	f003 0301 	and.w	r3, r3, #1
 8002162:	607b      	str	r3, [r7, #4]
 8002164:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002166:	4b09      	ldr	r3, [pc, #36]	@ (800218c <HAL_MspInit+0x44>)
 8002168:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800216a:	4a08      	ldr	r2, [pc, #32]	@ (800218c <HAL_MspInit+0x44>)
 800216c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002170:	6593      	str	r3, [r2, #88]	@ 0x58
 8002172:	4b06      	ldr	r3, [pc, #24]	@ (800218c <HAL_MspInit+0x44>)
 8002174:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002176:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800217a:	603b      	str	r3, [r7, #0]
 800217c:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 800217e:	f003 ff15 	bl	8005fac <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002182:	bf00      	nop
 8002184:	3708      	adds	r7, #8
 8002186:	46bd      	mov	sp, r7
 8002188:	bd80      	pop	{r7, pc}
 800218a:	bf00      	nop
 800218c:	40021000 	.word	0x40021000

08002190 <HAL_CORDIC_MspInit>:
* This function configures the hardware resources used in this example
* @param hcordic: CORDIC handle pointer
* @retval None
*/
void HAL_CORDIC_MspInit(CORDIC_HandleTypeDef* hcordic)
{
 8002190:	b480      	push	{r7}
 8002192:	b085      	sub	sp, #20
 8002194:	af00      	add	r7, sp, #0
 8002196:	6078      	str	r0, [r7, #4]
  if(hcordic->Instance==CORDIC)
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	681b      	ldr	r3, [r3, #0]
 800219c:	4a0a      	ldr	r2, [pc, #40]	@ (80021c8 <HAL_CORDIC_MspInit+0x38>)
 800219e:	4293      	cmp	r3, r2
 80021a0:	d10b      	bne.n	80021ba <HAL_CORDIC_MspInit+0x2a>
  {
  /* USER CODE BEGIN CORDIC_MspInit 0 */

  /* USER CODE END CORDIC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CORDIC_CLK_ENABLE();
 80021a2:	4b0a      	ldr	r3, [pc, #40]	@ (80021cc <HAL_CORDIC_MspInit+0x3c>)
 80021a4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80021a6:	4a09      	ldr	r2, [pc, #36]	@ (80021cc <HAL_CORDIC_MspInit+0x3c>)
 80021a8:	f043 0308 	orr.w	r3, r3, #8
 80021ac:	6493      	str	r3, [r2, #72]	@ 0x48
 80021ae:	4b07      	ldr	r3, [pc, #28]	@ (80021cc <HAL_CORDIC_MspInit+0x3c>)
 80021b0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80021b2:	f003 0308 	and.w	r3, r3, #8
 80021b6:	60fb      	str	r3, [r7, #12]
 80021b8:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END CORDIC_MspInit 1 */

  }

}
 80021ba:	bf00      	nop
 80021bc:	3714      	adds	r7, #20
 80021be:	46bd      	mov	sp, r7
 80021c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021c4:	4770      	bx	lr
 80021c6:	bf00      	nop
 80021c8:	40020c00 	.word	0x40020c00
 80021cc:	40021000 	.word	0x40021000

080021d0 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80021d0:	b580      	push	{r7, lr}
 80021d2:	b08a      	sub	sp, #40	@ 0x28
 80021d4:	af00      	add	r7, sp, #0
 80021d6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80021d8:	f107 0314 	add.w	r3, r7, #20
 80021dc:	2200      	movs	r2, #0
 80021de:	601a      	str	r2, [r3, #0]
 80021e0:	605a      	str	r2, [r3, #4]
 80021e2:	609a      	str	r2, [r3, #8]
 80021e4:	60da      	str	r2, [r3, #12]
 80021e6:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	681b      	ldr	r3, [r3, #0]
 80021ec:	4a17      	ldr	r2, [pc, #92]	@ (800224c <HAL_SPI_MspInit+0x7c>)
 80021ee:	4293      	cmp	r3, r2
 80021f0:	d127      	bne.n	8002242 <HAL_SPI_MspInit+0x72>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80021f2:	4b17      	ldr	r3, [pc, #92]	@ (8002250 <HAL_SPI_MspInit+0x80>)
 80021f4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80021f6:	4a16      	ldr	r2, [pc, #88]	@ (8002250 <HAL_SPI_MspInit+0x80>)
 80021f8:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80021fc:	6613      	str	r3, [r2, #96]	@ 0x60
 80021fe:	4b14      	ldr	r3, [pc, #80]	@ (8002250 <HAL_SPI_MspInit+0x80>)
 8002200:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002202:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002206:	613b      	str	r3, [r7, #16]
 8002208:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800220a:	4b11      	ldr	r3, [pc, #68]	@ (8002250 <HAL_SPI_MspInit+0x80>)
 800220c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800220e:	4a10      	ldr	r2, [pc, #64]	@ (8002250 <HAL_SPI_MspInit+0x80>)
 8002210:	f043 0302 	orr.w	r3, r3, #2
 8002214:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002216:	4b0e      	ldr	r3, [pc, #56]	@ (8002250 <HAL_SPI_MspInit+0x80>)
 8002218:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800221a:	f003 0302 	and.w	r3, r3, #2
 800221e:	60fb      	str	r3, [r7, #12]
 8002220:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PB3     ------> SPI1_SCK
    PB4     ------> SPI1_MISO
    PB5     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5;
 8002222:	2338      	movs	r3, #56	@ 0x38
 8002224:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002226:	2302      	movs	r3, #2
 8002228:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800222a:	2300      	movs	r3, #0
 800222c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800222e:	2300      	movs	r3, #0
 8002230:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8002232:	2305      	movs	r3, #5
 8002234:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002236:	f107 0314 	add.w	r3, r7, #20
 800223a:	4619      	mov	r1, r3
 800223c:	4805      	ldr	r0, [pc, #20]	@ (8002254 <HAL_SPI_MspInit+0x84>)
 800223e:	f003 fc39 	bl	8005ab4 <HAL_GPIO_Init>

  /* USER CODE END SPI1_MspInit 1 */

  }

}
 8002242:	bf00      	nop
 8002244:	3728      	adds	r7, #40	@ 0x28
 8002246:	46bd      	mov	sp, r7
 8002248:	bd80      	pop	{r7, pc}
 800224a:	bf00      	nop
 800224c:	40013000 	.word	0x40013000
 8002250:	40021000 	.word	0x40021000
 8002254:	48000400 	.word	0x48000400

08002258 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002258:	b580      	push	{r7, lr}
 800225a:	b086      	sub	sp, #24
 800225c:	af00      	add	r7, sp, #0
 800225e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	681b      	ldr	r3, [r3, #0]
 8002264:	4a27      	ldr	r2, [pc, #156]	@ (8002304 <HAL_TIM_Base_MspInit+0xac>)
 8002266:	4293      	cmp	r3, r2
 8002268:	d114      	bne.n	8002294 <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800226a:	4b27      	ldr	r3, [pc, #156]	@ (8002308 <HAL_TIM_Base_MspInit+0xb0>)
 800226c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800226e:	4a26      	ldr	r2, [pc, #152]	@ (8002308 <HAL_TIM_Base_MspInit+0xb0>)
 8002270:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8002274:	6613      	str	r3, [r2, #96]	@ 0x60
 8002276:	4b24      	ldr	r3, [pc, #144]	@ (8002308 <HAL_TIM_Base_MspInit+0xb0>)
 8002278:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800227a:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800227e:	617b      	str	r3, [r7, #20]
 8002280:	697b      	ldr	r3, [r7, #20]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, 1, 0);
 8002282:	2200      	movs	r2, #0
 8002284:	2101      	movs	r1, #1
 8002286:	2019      	movs	r0, #25
 8002288:	f003 f8ad 	bl	80053e6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 800228c:	2019      	movs	r0, #25
 800228e:	f003 f8c4 	bl	800541a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM7_MspInit 1 */

  /* USER CODE END TIM7_MspInit 1 */
  }

}
 8002292:	e032      	b.n	80022fa <HAL_TIM_Base_MspInit+0xa2>
  else if(htim_base->Instance==TIM6)
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	681b      	ldr	r3, [r3, #0]
 8002298:	4a1c      	ldr	r2, [pc, #112]	@ (800230c <HAL_TIM_Base_MspInit+0xb4>)
 800229a:	4293      	cmp	r3, r2
 800229c:	d114      	bne.n	80022c8 <HAL_TIM_Base_MspInit+0x70>
    __HAL_RCC_TIM6_CLK_ENABLE();
 800229e:	4b1a      	ldr	r3, [pc, #104]	@ (8002308 <HAL_TIM_Base_MspInit+0xb0>)
 80022a0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80022a2:	4a19      	ldr	r2, [pc, #100]	@ (8002308 <HAL_TIM_Base_MspInit+0xb0>)
 80022a4:	f043 0310 	orr.w	r3, r3, #16
 80022a8:	6593      	str	r3, [r2, #88]	@ 0x58
 80022aa:	4b17      	ldr	r3, [pc, #92]	@ (8002308 <HAL_TIM_Base_MspInit+0xb0>)
 80022ac:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80022ae:	f003 0310 	and.w	r3, r3, #16
 80022b2:	613b      	str	r3, [r7, #16]
 80022b4:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 2, 0);
 80022b6:	2200      	movs	r2, #0
 80022b8:	2102      	movs	r1, #2
 80022ba:	2036      	movs	r0, #54	@ 0x36
 80022bc:	f003 f893 	bl	80053e6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 80022c0:	2036      	movs	r0, #54	@ 0x36
 80022c2:	f003 f8aa 	bl	800541a <HAL_NVIC_EnableIRQ>
}
 80022c6:	e018      	b.n	80022fa <HAL_TIM_Base_MspInit+0xa2>
  else if(htim_base->Instance==TIM7)
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	681b      	ldr	r3, [r3, #0]
 80022cc:	4a10      	ldr	r2, [pc, #64]	@ (8002310 <HAL_TIM_Base_MspInit+0xb8>)
 80022ce:	4293      	cmp	r3, r2
 80022d0:	d113      	bne.n	80022fa <HAL_TIM_Base_MspInit+0xa2>
    __HAL_RCC_TIM7_CLK_ENABLE();
 80022d2:	4b0d      	ldr	r3, [pc, #52]	@ (8002308 <HAL_TIM_Base_MspInit+0xb0>)
 80022d4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80022d6:	4a0c      	ldr	r2, [pc, #48]	@ (8002308 <HAL_TIM_Base_MspInit+0xb0>)
 80022d8:	f043 0320 	orr.w	r3, r3, #32
 80022dc:	6593      	str	r3, [r2, #88]	@ 0x58
 80022de:	4b0a      	ldr	r3, [pc, #40]	@ (8002308 <HAL_TIM_Base_MspInit+0xb0>)
 80022e0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80022e2:	f003 0320 	and.w	r3, r3, #32
 80022e6:	60fb      	str	r3, [r7, #12]
 80022e8:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM7_IRQn, 2, 0);
 80022ea:	2200      	movs	r2, #0
 80022ec:	2102      	movs	r1, #2
 80022ee:	2037      	movs	r0, #55	@ 0x37
 80022f0:	f003 f879 	bl	80053e6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM7_IRQn);
 80022f4:	2037      	movs	r0, #55	@ 0x37
 80022f6:	f003 f890 	bl	800541a <HAL_NVIC_EnableIRQ>
}
 80022fa:	bf00      	nop
 80022fc:	3718      	adds	r7, #24
 80022fe:	46bd      	mov	sp, r7
 8002300:	bd80      	pop	{r7, pc}
 8002302:	bf00      	nop
 8002304:	40012c00 	.word	0x40012c00
 8002308:	40021000 	.word	0x40021000
 800230c:	40001000 	.word	0x40001000
 8002310:	40001400 	.word	0x40001400

08002314 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8002314:	b580      	push	{r7, lr}
 8002316:	b08a      	sub	sp, #40	@ 0x28
 8002318:	af00      	add	r7, sp, #0
 800231a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800231c:	f107 0314 	add.w	r3, r7, #20
 8002320:	2200      	movs	r2, #0
 8002322:	601a      	str	r2, [r3, #0]
 8002324:	605a      	str	r2, [r3, #4]
 8002326:	609a      	str	r2, [r3, #8]
 8002328:	60da      	str	r2, [r3, #12]
 800232a:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	681b      	ldr	r3, [r3, #0]
 8002330:	4a29      	ldr	r2, [pc, #164]	@ (80023d8 <HAL_TIM_MspPostInit+0xc4>)
 8002332:	4293      	cmp	r3, r2
 8002334:	d14b      	bne.n	80023ce <HAL_TIM_MspPostInit+0xba>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002336:	4b29      	ldr	r3, [pc, #164]	@ (80023dc <HAL_TIM_MspPostInit+0xc8>)
 8002338:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800233a:	4a28      	ldr	r2, [pc, #160]	@ (80023dc <HAL_TIM_MspPostInit+0xc8>)
 800233c:	f043 0302 	orr.w	r3, r3, #2
 8002340:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002342:	4b26      	ldr	r3, [pc, #152]	@ (80023dc <HAL_TIM_MspPostInit+0xc8>)
 8002344:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002346:	f003 0302 	and.w	r3, r3, #2
 800234a:	613b      	str	r3, [r7, #16]
 800234c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800234e:	4b23      	ldr	r3, [pc, #140]	@ (80023dc <HAL_TIM_MspPostInit+0xc8>)
 8002350:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002352:	4a22      	ldr	r2, [pc, #136]	@ (80023dc <HAL_TIM_MspPostInit+0xc8>)
 8002354:	f043 0301 	orr.w	r3, r3, #1
 8002358:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800235a:	4b20      	ldr	r3, [pc, #128]	@ (80023dc <HAL_TIM_MspPostInit+0xc8>)
 800235c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800235e:	f003 0301 	and.w	r3, r3, #1
 8002362:	60fb      	str	r3, [r7, #12]
 8002364:	68fb      	ldr	r3, [r7, #12]
    PB15     ------> TIM1_CH3N
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    PA10     ------> TIM1_CH3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14;
 8002366:	f44f 43c0 	mov.w	r3, #24576	@ 0x6000
 800236a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800236c:	2302      	movs	r3, #2
 800236e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002370:	2300      	movs	r3, #0
 8002372:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002374:	2300      	movs	r3, #0
 8002376:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_TIM1;
 8002378:	2306      	movs	r3, #6
 800237a:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800237c:	f107 0314 	add.w	r3, r7, #20
 8002380:	4619      	mov	r1, r3
 8002382:	4817      	ldr	r0, [pc, #92]	@ (80023e0 <HAL_TIM_MspPostInit+0xcc>)
 8002384:	f003 fb96 	bl	8005ab4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8002388:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800238c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800238e:	2302      	movs	r3, #2
 8002390:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002392:	2300      	movs	r3, #0
 8002394:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002396:	2300      	movs	r3, #0
 8002398:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_TIM1;
 800239a:	2304      	movs	r3, #4
 800239c:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800239e:	f107 0314 	add.w	r3, r7, #20
 80023a2:	4619      	mov	r1, r3
 80023a4:	480e      	ldr	r0, [pc, #56]	@ (80023e0 <HAL_TIM_MspPostInit+0xcc>)
 80023a6:	f003 fb85 	bl	8005ab4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10;
 80023aa:	f44f 63e0 	mov.w	r3, #1792	@ 0x700
 80023ae:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80023b0:	2302      	movs	r3, #2
 80023b2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80023b4:	2300      	movs	r3, #0
 80023b6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80023b8:	2300      	movs	r3, #0
 80023ba:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_TIM1;
 80023bc:	2306      	movs	r3, #6
 80023be:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80023c0:	f107 0314 	add.w	r3, r7, #20
 80023c4:	4619      	mov	r1, r3
 80023c6:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80023ca:	f003 fb73 	bl	8005ab4 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 80023ce:	bf00      	nop
 80023d0:	3728      	adds	r7, #40	@ 0x28
 80023d2:	46bd      	mov	sp, r7
 80023d4:	bd80      	pop	{r7, pc}
 80023d6:	bf00      	nop
 80023d8:	40012c00 	.word	0x40012c00
 80023dc:	40021000 	.word	0x40021000
 80023e0:	48000400 	.word	0x48000400

080023e4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80023e4:	b580      	push	{r7, lr}
 80023e6:	b09a      	sub	sp, #104	@ 0x68
 80023e8:	af00      	add	r7, sp, #0
 80023ea:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80023ec:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 80023f0:	2200      	movs	r2, #0
 80023f2:	601a      	str	r2, [r3, #0]
 80023f4:	605a      	str	r2, [r3, #4]
 80023f6:	609a      	str	r2, [r3, #8]
 80023f8:	60da      	str	r2, [r3, #12]
 80023fa:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80023fc:	f107 0310 	add.w	r3, r7, #16
 8002400:	2244      	movs	r2, #68	@ 0x44
 8002402:	2100      	movs	r1, #0
 8002404:	4618      	mov	r0, r3
 8002406:	f008 fefe 	bl	800b206 <memset>
  if(huart->Instance==USART2)
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	681b      	ldr	r3, [r3, #0]
 800240e:	4a38      	ldr	r2, [pc, #224]	@ (80024f0 <HAL_UART_MspInit+0x10c>)
 8002410:	4293      	cmp	r3, r2
 8002412:	d168      	bne.n	80024e6 <HAL_UART_MspInit+0x102>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8002414:	2302      	movs	r3, #2
 8002416:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8002418:	2300      	movs	r3, #0
 800241a:	61bb      	str	r3, [r7, #24]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800241c:	f107 0310 	add.w	r3, r7, #16
 8002420:	4618      	mov	r0, r3
 8002422:	f004 fafd 	bl	8006a20 <HAL_RCCEx_PeriphCLKConfig>
 8002426:	4603      	mov	r3, r0
 8002428:	2b00      	cmp	r3, #0
 800242a:	d001      	beq.n	8002430 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 800242c:	f7ff fe86 	bl	800213c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8002430:	4b30      	ldr	r3, [pc, #192]	@ (80024f4 <HAL_UART_MspInit+0x110>)
 8002432:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002434:	4a2f      	ldr	r2, [pc, #188]	@ (80024f4 <HAL_UART_MspInit+0x110>)
 8002436:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800243a:	6593      	str	r3, [r2, #88]	@ 0x58
 800243c:	4b2d      	ldr	r3, [pc, #180]	@ (80024f4 <HAL_UART_MspInit+0x110>)
 800243e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002440:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002444:	60fb      	str	r3, [r7, #12]
 8002446:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002448:	4b2a      	ldr	r3, [pc, #168]	@ (80024f4 <HAL_UART_MspInit+0x110>)
 800244a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800244c:	4a29      	ldr	r2, [pc, #164]	@ (80024f4 <HAL_UART_MspInit+0x110>)
 800244e:	f043 0301 	orr.w	r3, r3, #1
 8002452:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002454:	4b27      	ldr	r3, [pc, #156]	@ (80024f4 <HAL_UART_MspInit+0x110>)
 8002456:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002458:	f003 0301 	and.w	r3, r3, #1
 800245c:	60bb      	str	r3, [r7, #8]
 800245e:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8002460:	230c      	movs	r3, #12
 8002462:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002464:	2302      	movs	r3, #2
 8002466:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002468:	2300      	movs	r3, #0
 800246a:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800246c:	2300      	movs	r3, #0
 800246e:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8002470:	2307      	movs	r3, #7
 8002472:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002474:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8002478:	4619      	mov	r1, r3
 800247a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800247e:	f003 fb19 	bl	8005ab4 <HAL_GPIO_Init>

    /* USART2 DMA Init */
    /* USART2_TX Init */
    hdma_usart2_tx.Instance = DMA1_Channel1;
 8002482:	4b1d      	ldr	r3, [pc, #116]	@ (80024f8 <HAL_UART_MspInit+0x114>)
 8002484:	4a1d      	ldr	r2, [pc, #116]	@ (80024fc <HAL_UART_MspInit+0x118>)
 8002486:	601a      	str	r2, [r3, #0]
    hdma_usart2_tx.Init.Request = DMA_REQUEST_USART2_TX;
 8002488:	4b1b      	ldr	r3, [pc, #108]	@ (80024f8 <HAL_UART_MspInit+0x114>)
 800248a:	221b      	movs	r2, #27
 800248c:	605a      	str	r2, [r3, #4]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800248e:	4b1a      	ldr	r3, [pc, #104]	@ (80024f8 <HAL_UART_MspInit+0x114>)
 8002490:	2210      	movs	r2, #16
 8002492:	609a      	str	r2, [r3, #8]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002494:	4b18      	ldr	r3, [pc, #96]	@ (80024f8 <HAL_UART_MspInit+0x114>)
 8002496:	2200      	movs	r2, #0
 8002498:	60da      	str	r2, [r3, #12]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 800249a:	4b17      	ldr	r3, [pc, #92]	@ (80024f8 <HAL_UART_MspInit+0x114>)
 800249c:	2280      	movs	r2, #128	@ 0x80
 800249e:	611a      	str	r2, [r3, #16]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80024a0:	4b15      	ldr	r3, [pc, #84]	@ (80024f8 <HAL_UART_MspInit+0x114>)
 80024a2:	2200      	movs	r2, #0
 80024a4:	615a      	str	r2, [r3, #20]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80024a6:	4b14      	ldr	r3, [pc, #80]	@ (80024f8 <HAL_UART_MspInit+0x114>)
 80024a8:	2200      	movs	r2, #0
 80024aa:	619a      	str	r2, [r3, #24]
    hdma_usart2_tx.Init.Mode = DMA_NORMAL;
 80024ac:	4b12      	ldr	r3, [pc, #72]	@ (80024f8 <HAL_UART_MspInit+0x114>)
 80024ae:	2200      	movs	r2, #0
 80024b0:	61da      	str	r2, [r3, #28]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_HIGH;
 80024b2:	4b11      	ldr	r3, [pc, #68]	@ (80024f8 <HAL_UART_MspInit+0x114>)
 80024b4:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80024b8:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 80024ba:	480f      	ldr	r0, [pc, #60]	@ (80024f8 <HAL_UART_MspInit+0x114>)
 80024bc:	f002 ffc8 	bl	8005450 <HAL_DMA_Init>
 80024c0:	4603      	mov	r3, r0
 80024c2:	2b00      	cmp	r3, #0
 80024c4:	d001      	beq.n	80024ca <HAL_UART_MspInit+0xe6>
    {
      Error_Handler();
 80024c6:	f7ff fe39 	bl	800213c <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart2_tx);
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	4a0a      	ldr	r2, [pc, #40]	@ (80024f8 <HAL_UART_MspInit+0x114>)
 80024ce:	67da      	str	r2, [r3, #124]	@ 0x7c
 80024d0:	4a09      	ldr	r2, [pc, #36]	@ (80024f8 <HAL_UART_MspInit+0x114>)
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	6293      	str	r3, [r2, #40]	@ 0x28

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 80024d6:	2200      	movs	r2, #0
 80024d8:	2100      	movs	r1, #0
 80024da:	2026      	movs	r0, #38	@ 0x26
 80024dc:	f002 ff83 	bl	80053e6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 80024e0:	2026      	movs	r0, #38	@ 0x26
 80024e2:	f002 ff9a 	bl	800541a <HAL_NVIC_EnableIRQ>

  /* USER CODE END USART2_MspInit 1 */

  }

}
 80024e6:	bf00      	nop
 80024e8:	3768      	adds	r7, #104	@ 0x68
 80024ea:	46bd      	mov	sp, r7
 80024ec:	bd80      	pop	{r7, pc}
 80024ee:	bf00      	nop
 80024f0:	40004400 	.word	0x40004400
 80024f4:	40021000 	.word	0x40021000
 80024f8:	2000057c 	.word	0x2000057c
 80024fc:	40020008 	.word	0x40020008

08002500 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002500:	b480      	push	{r7}
 8002502:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002504:	bf00      	nop
 8002506:	e7fd      	b.n	8002504 <NMI_Handler+0x4>

08002508 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002508:	b480      	push	{r7}
 800250a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800250c:	bf00      	nop
 800250e:	e7fd      	b.n	800250c <HardFault_Handler+0x4>

08002510 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002510:	b480      	push	{r7}
 8002512:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002514:	bf00      	nop
 8002516:	e7fd      	b.n	8002514 <MemManage_Handler+0x4>

08002518 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002518:	b480      	push	{r7}
 800251a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800251c:	bf00      	nop
 800251e:	e7fd      	b.n	800251c <BusFault_Handler+0x4>

08002520 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002520:	b480      	push	{r7}
 8002522:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002524:	bf00      	nop
 8002526:	e7fd      	b.n	8002524 <UsageFault_Handler+0x4>

08002528 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002528:	b480      	push	{r7}
 800252a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800252c:	bf00      	nop
 800252e:	46bd      	mov	sp, r7
 8002530:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002534:	4770      	bx	lr

08002536 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002536:	b480      	push	{r7}
 8002538:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800253a:	bf00      	nop
 800253c:	46bd      	mov	sp, r7
 800253e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002542:	4770      	bx	lr

08002544 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002544:	b480      	push	{r7}
 8002546:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002548:	bf00      	nop
 800254a:	46bd      	mov	sp, r7
 800254c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002550:	4770      	bx	lr

08002552 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002552:	b580      	push	{r7, lr}
 8002554:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002556:	f002 fdbd 	bl	80050d4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800255a:	bf00      	nop
 800255c:	bd80      	pop	{r7, pc}
	...

08002560 <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 8002560:	b580      	push	{r7, lr}
 8002562:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

if (__HAL_GPIO_EXTI_GET_FLAG(ENC_INDEX_Pin))
 8002564:	4b0a      	ldr	r3, [pc, #40]	@ (8002590 <EXTI0_IRQHandler+0x30>)
 8002566:	695b      	ldr	r3, [r3, #20]
 8002568:	f003 0301 	and.w	r3, r3, #1
 800256c:	2b00      	cmp	r3, #0
 800256e:	d009      	beq.n	8002584 <EXTI0_IRQHandler+0x24>
	{ HAL_GPIO_TogglePin(GPIOB,FAULT_LED_Pin);
 8002570:	2180      	movs	r1, #128	@ 0x80
 8002572:	4808      	ldr	r0, [pc, #32]	@ (8002594 <EXTI0_IRQHandler+0x34>)
 8002574:	f003 fc38 	bl	8005de8 <HAL_GPIO_TogglePin>
	interrupt++;
 8002578:	4b07      	ldr	r3, [pc, #28]	@ (8002598 <EXTI0_IRQHandler+0x38>)
 800257a:	781b      	ldrb	r3, [r3, #0]
 800257c:	3301      	adds	r3, #1
 800257e:	b2da      	uxtb	r2, r3
 8002580:	4b05      	ldr	r3, [pc, #20]	@ (8002598 <EXTI0_IRQHandler+0x38>)
 8002582:	701a      	strb	r2, [r3, #0]
	}
  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(ENC_INDEX_Pin);
 8002584:	2001      	movs	r0, #1
 8002586:	f003 fc49 	bl	8005e1c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 800258a:	bf00      	nop
 800258c:	bd80      	pop	{r7, pc}
 800258e:	bf00      	nop
 8002590:	40010400 	.word	0x40010400
 8002594:	48000400 	.word	0x48000400
 8002598:	200018c0 	.word	0x200018c0

0800259c <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 800259c:	b580      	push	{r7, lr}
 800259e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 80025a0:	4802      	ldr	r0, [pc, #8]	@ (80025ac <DMA1_Channel1_IRQHandler+0x10>)
 80025a2:	f003 f938 	bl	8005816 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 80025a6:	bf00      	nop
 80025a8:	bd80      	pop	{r7, pc}
 80025aa:	bf00      	nop
 80025ac:	2000057c 	.word	0x2000057c

080025b0 <TIM1_UP_TIM16_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM16 global interrupt.
  */
void TIM1_UP_TIM16_IRQHandler(void)
{
 80025b0:	b580      	push	{r7, lr}
 80025b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80025b4:	4802      	ldr	r0, [pc, #8]	@ (80025c0 <TIM1_UP_TIM16_IRQHandler+0x10>)
 80025b6:	f005 fb0b 	bl	8007bd0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 1 */
}
 80025ba:	bf00      	nop
 80025bc:	bd80      	pop	{r7, pc}
 80025be:	bf00      	nop
 80025c0:	20000404 	.word	0x20000404

080025c4 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt / USART2 wake-up interrupt through EXTI line 26.
  */
void USART2_IRQHandler(void)
{
 80025c4:	b580      	push	{r7, lr}
 80025c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 80025c8:	4802      	ldr	r0, [pc, #8]	@ (80025d4 <USART2_IRQHandler+0x10>)
 80025ca:	f006 fe37 	bl	800923c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 80025ce:	bf00      	nop
 80025d0:	bd80      	pop	{r7, pc}
 80025d2:	bf00      	nop
 80025d4:	200004e8 	.word	0x200004e8

080025d8 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC3 channel underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 80025d8:	b580      	push	{r7, lr}
 80025da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 80025dc:	4802      	ldr	r0, [pc, #8]	@ (80025e8 <TIM6_DAC_IRQHandler+0x10>)
 80025de:	f005 faf7 	bl	8007bd0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 80025e2:	bf00      	nop
 80025e4:	bd80      	pop	{r7, pc}
 80025e6:	bf00      	nop
 80025e8:	20000450 	.word	0x20000450

080025ec <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 80025ec:	b580      	push	{r7, lr}
 80025ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_IRQn 0 */

  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 80025f0:	4802      	ldr	r0, [pc, #8]	@ (80025fc <TIM7_IRQHandler+0x10>)
 80025f2:	f005 faed 	bl	8007bd0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */

  /* USER CODE END TIM7_IRQn 1 */
}
 80025f6:	bf00      	nop
 80025f8:	bd80      	pop	{r7, pc}
 80025fa:	bf00      	nop
 80025fc:	2000049c 	.word	0x2000049c

08002600 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002600:	b480      	push	{r7}
 8002602:	af00      	add	r7, sp, #0
  return 1;
 8002604:	2301      	movs	r3, #1
}
 8002606:	4618      	mov	r0, r3
 8002608:	46bd      	mov	sp, r7
 800260a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800260e:	4770      	bx	lr

08002610 <_kill>:

int _kill(int pid, int sig)
{
 8002610:	b580      	push	{r7, lr}
 8002612:	b082      	sub	sp, #8
 8002614:	af00      	add	r7, sp, #0
 8002616:	6078      	str	r0, [r7, #4]
 8002618:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 800261a:	f008 fe47 	bl	800b2ac <__errno>
 800261e:	4603      	mov	r3, r0
 8002620:	2216      	movs	r2, #22
 8002622:	601a      	str	r2, [r3, #0]
  return -1;
 8002624:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 8002628:	4618      	mov	r0, r3
 800262a:	3708      	adds	r7, #8
 800262c:	46bd      	mov	sp, r7
 800262e:	bd80      	pop	{r7, pc}

08002630 <_exit>:

void _exit (int status)
{
 8002630:	b580      	push	{r7, lr}
 8002632:	b082      	sub	sp, #8
 8002634:	af00      	add	r7, sp, #0
 8002636:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8002638:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 800263c:	6878      	ldr	r0, [r7, #4]
 800263e:	f7ff ffe7 	bl	8002610 <_kill>
  while (1) {}    /* Make sure we hang here */
 8002642:	bf00      	nop
 8002644:	e7fd      	b.n	8002642 <_exit+0x12>

08002646 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002646:	b580      	push	{r7, lr}
 8002648:	b086      	sub	sp, #24
 800264a:	af00      	add	r7, sp, #0
 800264c:	60f8      	str	r0, [r7, #12]
 800264e:	60b9      	str	r1, [r7, #8]
 8002650:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002652:	2300      	movs	r3, #0
 8002654:	617b      	str	r3, [r7, #20]
 8002656:	e00a      	b.n	800266e <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8002658:	f3af 8000 	nop.w
 800265c:	4601      	mov	r1, r0
 800265e:	68bb      	ldr	r3, [r7, #8]
 8002660:	1c5a      	adds	r2, r3, #1
 8002662:	60ba      	str	r2, [r7, #8]
 8002664:	b2ca      	uxtb	r2, r1
 8002666:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002668:	697b      	ldr	r3, [r7, #20]
 800266a:	3301      	adds	r3, #1
 800266c:	617b      	str	r3, [r7, #20]
 800266e:	697a      	ldr	r2, [r7, #20]
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	429a      	cmp	r2, r3
 8002674:	dbf0      	blt.n	8002658 <_read+0x12>
  }

  return len;
 8002676:	687b      	ldr	r3, [r7, #4]
}
 8002678:	4618      	mov	r0, r3
 800267a:	3718      	adds	r7, #24
 800267c:	46bd      	mov	sp, r7
 800267e:	bd80      	pop	{r7, pc}

08002680 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002680:	b580      	push	{r7, lr}
 8002682:	b086      	sub	sp, #24
 8002684:	af00      	add	r7, sp, #0
 8002686:	60f8      	str	r0, [r7, #12]
 8002688:	60b9      	str	r1, [r7, #8]
 800268a:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800268c:	2300      	movs	r3, #0
 800268e:	617b      	str	r3, [r7, #20]
 8002690:	e009      	b.n	80026a6 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8002692:	68bb      	ldr	r3, [r7, #8]
 8002694:	1c5a      	adds	r2, r3, #1
 8002696:	60ba      	str	r2, [r7, #8]
 8002698:	781b      	ldrb	r3, [r3, #0]
 800269a:	4618      	mov	r0, r3
 800269c:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80026a0:	697b      	ldr	r3, [r7, #20]
 80026a2:	3301      	adds	r3, #1
 80026a4:	617b      	str	r3, [r7, #20]
 80026a6:	697a      	ldr	r2, [r7, #20]
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	429a      	cmp	r2, r3
 80026ac:	dbf1      	blt.n	8002692 <_write+0x12>
  }
  return len;
 80026ae:	687b      	ldr	r3, [r7, #4]
}
 80026b0:	4618      	mov	r0, r3
 80026b2:	3718      	adds	r7, #24
 80026b4:	46bd      	mov	sp, r7
 80026b6:	bd80      	pop	{r7, pc}

080026b8 <_close>:

int _close(int file)
{
 80026b8:	b480      	push	{r7}
 80026ba:	b083      	sub	sp, #12
 80026bc:	af00      	add	r7, sp, #0
 80026be:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80026c0:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 80026c4:	4618      	mov	r0, r3
 80026c6:	370c      	adds	r7, #12
 80026c8:	46bd      	mov	sp, r7
 80026ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026ce:	4770      	bx	lr

080026d0 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80026d0:	b480      	push	{r7}
 80026d2:	b083      	sub	sp, #12
 80026d4:	af00      	add	r7, sp, #0
 80026d6:	6078      	str	r0, [r7, #4]
 80026d8:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80026da:	683b      	ldr	r3, [r7, #0]
 80026dc:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80026e0:	605a      	str	r2, [r3, #4]
  return 0;
 80026e2:	2300      	movs	r3, #0
}
 80026e4:	4618      	mov	r0, r3
 80026e6:	370c      	adds	r7, #12
 80026e8:	46bd      	mov	sp, r7
 80026ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026ee:	4770      	bx	lr

080026f0 <_isatty>:

int _isatty(int file)
{
 80026f0:	b480      	push	{r7}
 80026f2:	b083      	sub	sp, #12
 80026f4:	af00      	add	r7, sp, #0
 80026f6:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80026f8:	2301      	movs	r3, #1
}
 80026fa:	4618      	mov	r0, r3
 80026fc:	370c      	adds	r7, #12
 80026fe:	46bd      	mov	sp, r7
 8002700:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002704:	4770      	bx	lr

08002706 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002706:	b480      	push	{r7}
 8002708:	b085      	sub	sp, #20
 800270a:	af00      	add	r7, sp, #0
 800270c:	60f8      	str	r0, [r7, #12]
 800270e:	60b9      	str	r1, [r7, #8]
 8002710:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8002712:	2300      	movs	r3, #0
}
 8002714:	4618      	mov	r0, r3
 8002716:	3714      	adds	r7, #20
 8002718:	46bd      	mov	sp, r7
 800271a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800271e:	4770      	bx	lr

08002720 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002720:	b580      	push	{r7, lr}
 8002722:	b086      	sub	sp, #24
 8002724:	af00      	add	r7, sp, #0
 8002726:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002728:	4a14      	ldr	r2, [pc, #80]	@ (800277c <_sbrk+0x5c>)
 800272a:	4b15      	ldr	r3, [pc, #84]	@ (8002780 <_sbrk+0x60>)
 800272c:	1ad3      	subs	r3, r2, r3
 800272e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002730:	697b      	ldr	r3, [r7, #20]
 8002732:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002734:	4b13      	ldr	r3, [pc, #76]	@ (8002784 <_sbrk+0x64>)
 8002736:	681b      	ldr	r3, [r3, #0]
 8002738:	2b00      	cmp	r3, #0
 800273a:	d102      	bne.n	8002742 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800273c:	4b11      	ldr	r3, [pc, #68]	@ (8002784 <_sbrk+0x64>)
 800273e:	4a12      	ldr	r2, [pc, #72]	@ (8002788 <_sbrk+0x68>)
 8002740:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002742:	4b10      	ldr	r3, [pc, #64]	@ (8002784 <_sbrk+0x64>)
 8002744:	681a      	ldr	r2, [r3, #0]
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	4413      	add	r3, r2
 800274a:	693a      	ldr	r2, [r7, #16]
 800274c:	429a      	cmp	r2, r3
 800274e:	d207      	bcs.n	8002760 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002750:	f008 fdac 	bl	800b2ac <__errno>
 8002754:	4603      	mov	r3, r0
 8002756:	220c      	movs	r2, #12
 8002758:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800275a:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800275e:	e009      	b.n	8002774 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002760:	4b08      	ldr	r3, [pc, #32]	@ (8002784 <_sbrk+0x64>)
 8002762:	681b      	ldr	r3, [r3, #0]
 8002764:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002766:	4b07      	ldr	r3, [pc, #28]	@ (8002784 <_sbrk+0x64>)
 8002768:	681a      	ldr	r2, [r3, #0]
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	4413      	add	r3, r2
 800276e:	4a05      	ldr	r2, [pc, #20]	@ (8002784 <_sbrk+0x64>)
 8002770:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002772:	68fb      	ldr	r3, [r7, #12]
}
 8002774:	4618      	mov	r0, r3
 8002776:	3718      	adds	r7, #24
 8002778:	46bd      	mov	sp, r7
 800277a:	bd80      	pop	{r7, pc}
 800277c:	20008000 	.word	0x20008000
 8002780:	00000400 	.word	0x00000400
 8002784:	200018c4 	.word	0x200018c4
 8002788:	20001a28 	.word	0x20001a28

0800278c <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 800278c:	b480      	push	{r7}
 800278e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8002790:	4b06      	ldr	r3, [pc, #24]	@ (80027ac <SystemInit+0x20>)
 8002792:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002796:	4a05      	ldr	r2, [pc, #20]	@ (80027ac <SystemInit+0x20>)
 8002798:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800279c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80027a0:	bf00      	nop
 80027a2:	46bd      	mov	sp, r7
 80027a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027a8:	4770      	bx	lr
 80027aa:	bf00      	nop
 80027ac:	e000ed00 	.word	0xe000ed00

080027b0 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80027b0:	480d      	ldr	r0, [pc, #52]	@ (80027e8 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80027b2:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80027b4:	480d      	ldr	r0, [pc, #52]	@ (80027ec <LoopForever+0x6>)
  ldr r1, =_edata
 80027b6:	490e      	ldr	r1, [pc, #56]	@ (80027f0 <LoopForever+0xa>)
  ldr r2, =_sidata
 80027b8:	4a0e      	ldr	r2, [pc, #56]	@ (80027f4 <LoopForever+0xe>)
  movs r3, #0
 80027ba:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 80027bc:	e002      	b.n	80027c4 <LoopCopyDataInit>

080027be <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80027be:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80027c0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80027c2:	3304      	adds	r3, #4

080027c4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80027c4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80027c6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80027c8:	d3f9      	bcc.n	80027be <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80027ca:	4a0b      	ldr	r2, [pc, #44]	@ (80027f8 <LoopForever+0x12>)
  ldr r4, =_ebss
 80027cc:	4c0b      	ldr	r4, [pc, #44]	@ (80027fc <LoopForever+0x16>)
  movs r3, #0
 80027ce:	2300      	movs	r3, #0
  b LoopFillZerobss
 80027d0:	e001      	b.n	80027d6 <LoopFillZerobss>

080027d2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80027d2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80027d4:	3204      	adds	r2, #4

080027d6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80027d6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80027d8:	d3fb      	bcc.n	80027d2 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80027da:	f7ff ffd7 	bl	800278c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80027de:	f008 fd6b 	bl	800b2b8 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80027e2:	f7fe fea5 	bl	8001530 <main>

080027e6 <LoopForever>:

LoopForever:
    b LoopForever
 80027e6:	e7fe      	b.n	80027e6 <LoopForever>
  ldr   r0, =_estack
 80027e8:	20008000 	.word	0x20008000
  ldr r0, =_sdata
 80027ec:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80027f0:	2000035c 	.word	0x2000035c
  ldr r2, =_sidata
 80027f4:	0800d438 	.word	0x0800d438
  ldr r2, =_sbss
 80027f8:	2000035c 	.word	0x2000035c
  ldr r4, =_ebss
 80027fc:	20001a24 	.word	0x20001a24

08002800 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8002800:	e7fe      	b.n	8002800 <ADC1_2_IRQHandler>

08002802 <parityCheck>:
uint8_t checkReadForError(uint16_t data){
	return (data & 0x4000)>>15; // check if 15th bit is 1.
}

// Check Parity of a given data.
bool parityCheck(uint16_t data){
 8002802:	b480      	push	{r7}
 8002804:	b087      	sub	sp, #28
 8002806:	af00      	add	r7, sp, #0
 8002808:	4603      	mov	r3, r0
 800280a:	80fb      	strh	r3, [r7, #6]
  uint16_t count=0;
 800280c:	2300      	movs	r3, #0
 800280e:	82fb      	strh	r3, [r7, #22]
  uint16_t b = 1;
 8002810:	2301      	movs	r3, #1
 8002812:	81fb      	strh	r3, [r7, #14]
  for (int i=0; i<15; i++){
 8002814:	2300      	movs	r3, #0
 8002816:	613b      	str	r3, [r7, #16]
 8002818:	e00d      	b.n	8002836 <parityCheck+0x34>
    if (data & (b << i)) {
 800281a:	88fa      	ldrh	r2, [r7, #6]
 800281c:	89f9      	ldrh	r1, [r7, #14]
 800281e:	693b      	ldr	r3, [r7, #16]
 8002820:	fa01 f303 	lsl.w	r3, r1, r3
 8002824:	4013      	ands	r3, r2
 8002826:	2b00      	cmp	r3, #0
 8002828:	d002      	beq.n	8002830 <parityCheck+0x2e>
      count++;
 800282a:	8afb      	ldrh	r3, [r7, #22]
 800282c:	3301      	adds	r3, #1
 800282e:	82fb      	strh	r3, [r7, #22]
  for (int i=0; i<15; i++){
 8002830:	693b      	ldr	r3, [r7, #16]
 8002832:	3301      	adds	r3, #1
 8002834:	613b      	str	r3, [r7, #16]
 8002836:	693b      	ldr	r3, [r7, #16]
 8002838:	2b0e      	cmp	r3, #14
 800283a:	ddee      	ble.n	800281a <parityCheck+0x18>
    }
  }

  if (count%2==0) {
 800283c:	8afb      	ldrh	r3, [r7, #22]
 800283e:	f003 0301 	and.w	r3, r3, #1
 8002842:	b29b      	uxth	r3, r3
 8002844:	2b00      	cmp	r3, #0
 8002846:	d101      	bne.n	800284c <parityCheck+0x4a>
    return 0;
 8002848:	2300      	movs	r3, #0
 800284a:	e000      	b.n	800284e <parityCheck+0x4c>
  } else {
    return 1;
 800284c:	2301      	movs	r3, #1
  }
}
 800284e:	4618      	mov	r0, r3
 8002850:	371c      	adds	r7, #28
 8002852:	46bd      	mov	sp, r7
 8002854:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002858:	4770      	bx	lr
	...

0800285c <AS5047_SPI_Write>:

//SPI_write and read are polling Fns;Timeout is set for 100ms
uint8_t AS5047_SPI_Write(uint16_t addressFrame, uint16_t valueFrame) {
 800285c:	b580      	push	{r7, lr}
 800285e:	b086      	sub	sp, #24
 8002860:	af02      	add	r7, sp, #8
 8002862:	4603      	mov	r3, r0
 8002864:	460a      	mov	r2, r1
 8002866:	80fb      	strh	r3, [r7, #6]
 8002868:	4613      	mov	r3, r2
 800286a:	80bb      	strh	r3, [r7, #4]

  //write which address needed to be updated.
  txbuf[0] = (addressFrame) >> 8;
 800286c:	88fb      	ldrh	r3, [r7, #6]
 800286e:	0a1b      	lsrs	r3, r3, #8
 8002870:	b29b      	uxth	r3, r3
 8002872:	b2da      	uxtb	r2, r3
 8002874:	4b48      	ldr	r3, [pc, #288]	@ (8002998 <AS5047_SPI_Write+0x13c>)
 8002876:	701a      	strb	r2, [r3, #0]
  txbuf[1] = addressFrame & 0xFF;
 8002878:	88fb      	ldrh	r3, [r7, #6]
 800287a:	b2da      	uxtb	r2, r3
 800287c:	4b46      	ldr	r3, [pc, #280]	@ (8002998 <AS5047_SPI_Write+0x13c>)
 800287e:	705a      	strb	r2, [r3, #1]
  HAL_GPIO_WritePin(SPI1_CS_GPIO_Port, SPI1_CS_Pin, GPIO_PIN_RESET);
 8002880:	2200      	movs	r2, #0
 8002882:	2140      	movs	r1, #64	@ 0x40
 8002884:	4845      	ldr	r0, [pc, #276]	@ (800299c <AS5047_SPI_Write+0x140>)
 8002886:	f003 fa97 	bl	8005db8 <HAL_GPIO_WritePin>
  HAL_SPI_TransmitReceive(&hspi1, (uint8_t*)&txbuf, (uint8_t*)&rxbuf, 2, 100);
 800288a:	2364      	movs	r3, #100	@ 0x64
 800288c:	9300      	str	r3, [sp, #0]
 800288e:	2302      	movs	r3, #2
 8002890:	4a43      	ldr	r2, [pc, #268]	@ (80029a0 <AS5047_SPI_Write+0x144>)
 8002892:	4941      	ldr	r1, [pc, #260]	@ (8002998 <AS5047_SPI_Write+0x13c>)
 8002894:	4843      	ldr	r0, [pc, #268]	@ (80029a4 <AS5047_SPI_Write+0x148>)
 8002896:	f004 fb5e 	bl	8006f56 <HAL_SPI_TransmitReceive>
  while( hspi1.State == HAL_SPI_STATE_BUSY );
 800289a:	bf00      	nop
 800289c:	4b41      	ldr	r3, [pc, #260]	@ (80029a4 <AS5047_SPI_Write+0x148>)
 800289e:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 80028a2:	b2db      	uxtb	r3, r3
 80028a4:	2b02      	cmp	r3, #2
 80028a6:	d0f9      	beq.n	800289c <AS5047_SPI_Write+0x40>
  HAL_GPIO_WritePin(SPI1_CS_GPIO_Port, SPI1_CS_Pin, GPIO_PIN_SET);
 80028a8:	2201      	movs	r2, #1
 80028aa:	2140      	movs	r1, #64	@ 0x40
 80028ac:	483b      	ldr	r0, [pc, #236]	@ (800299c <AS5047_SPI_Write+0x140>)
 80028ae:	f003 fa83 	bl	8005db8 <HAL_GPIO_WritePin>

  uint16_t recievedFrame = ((uint16_t)rxbuf[0])<<8;
 80028b2:	4b3b      	ldr	r3, [pc, #236]	@ (80029a0 <AS5047_SPI_Write+0x144>)
 80028b4:	781b      	ldrb	r3, [r3, #0]
 80028b6:	021b      	lsls	r3, r3, #8
 80028b8:	81fb      	strh	r3, [r7, #14]
  recievedFrame += rxbuf[1];
 80028ba:	4b39      	ldr	r3, [pc, #228]	@ (80029a0 <AS5047_SPI_Write+0x144>)
 80028bc:	785b      	ldrb	r3, [r3, #1]
 80028be:	461a      	mov	r2, r3
 80028c0:	89fb      	ldrh	r3, [r7, #14]
 80028c2:	4413      	add	r3, r2
 80028c4:	81fb      	strh	r3, [r7, #14]

  //this is value that will be stored inside the respective register
  txbuf[0] = (valueFrame) >> 8;
 80028c6:	88bb      	ldrh	r3, [r7, #4]
 80028c8:	0a1b      	lsrs	r3, r3, #8
 80028ca:	b29b      	uxth	r3, r3
 80028cc:	b2da      	uxtb	r2, r3
 80028ce:	4b32      	ldr	r3, [pc, #200]	@ (8002998 <AS5047_SPI_Write+0x13c>)
 80028d0:	701a      	strb	r2, [r3, #0]
  txbuf[1] = valueFrame & 0xFF;
 80028d2:	88bb      	ldrh	r3, [r7, #4]
 80028d4:	b2da      	uxtb	r2, r3
 80028d6:	4b30      	ldr	r3, [pc, #192]	@ (8002998 <AS5047_SPI_Write+0x13c>)
 80028d8:	705a      	strb	r2, [r3, #1]
  HAL_GPIO_WritePin(SPI1_CS_GPIO_Port, SPI1_CS_Pin, GPIO_PIN_RESET);
 80028da:	2200      	movs	r2, #0
 80028dc:	2140      	movs	r1, #64	@ 0x40
 80028de:	482f      	ldr	r0, [pc, #188]	@ (800299c <AS5047_SPI_Write+0x140>)
 80028e0:	f003 fa6a 	bl	8005db8 <HAL_GPIO_WritePin>
  HAL_SPI_TransmitReceive(&hspi1, (uint8_t*)&txbuf, (uint8_t*)&rxbuf, 2, 100);
 80028e4:	2364      	movs	r3, #100	@ 0x64
 80028e6:	9300      	str	r3, [sp, #0]
 80028e8:	2302      	movs	r3, #2
 80028ea:	4a2d      	ldr	r2, [pc, #180]	@ (80029a0 <AS5047_SPI_Write+0x144>)
 80028ec:	492a      	ldr	r1, [pc, #168]	@ (8002998 <AS5047_SPI_Write+0x13c>)
 80028ee:	482d      	ldr	r0, [pc, #180]	@ (80029a4 <AS5047_SPI_Write+0x148>)
 80028f0:	f004 fb31 	bl	8006f56 <HAL_SPI_TransmitReceive>
  while( hspi1.State == HAL_SPI_STATE_BUSY );
 80028f4:	bf00      	nop
 80028f6:	4b2b      	ldr	r3, [pc, #172]	@ (80029a4 <AS5047_SPI_Write+0x148>)
 80028f8:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 80028fc:	b2db      	uxtb	r3, r3
 80028fe:	2b02      	cmp	r3, #2
 8002900:	d0f9      	beq.n	80028f6 <AS5047_SPI_Write+0x9a>
  HAL_GPIO_WritePin(SPI1_CS_GPIO_Port, SPI1_CS_Pin, GPIO_PIN_SET);
 8002902:	2201      	movs	r2, #1
 8002904:	2140      	movs	r1, #64	@ 0x40
 8002906:	4825      	ldr	r0, [pc, #148]	@ (800299c <AS5047_SPI_Write+0x140>)
 8002908:	f003 fa56 	bl	8005db8 <HAL_GPIO_WritePin>

  recievedFrame = ((uint16_t)rxbuf[0])<<8;
 800290c:	4b24      	ldr	r3, [pc, #144]	@ (80029a0 <AS5047_SPI_Write+0x144>)
 800290e:	781b      	ldrb	r3, [r3, #0]
 8002910:	021b      	lsls	r3, r3, #8
 8002912:	81fb      	strh	r3, [r7, #14]
  recievedFrame += rxbuf[1];
 8002914:	4b22      	ldr	r3, [pc, #136]	@ (80029a0 <AS5047_SPI_Write+0x144>)
 8002916:	785b      	ldrb	r3, [r3, #1]
 8002918:	461a      	mov	r2, r3
 800291a:	89fb      	ldrh	r3, [r7, #14]
 800291c:	4413      	add	r3, r2
 800291e:	81fb      	strh	r3, [r7, #14]

  //check if data has been written properly, will receive the written value in the recieve buffer
  txbuf[0] = NOP_FRAME >> 8;
 8002920:	4b1d      	ldr	r3, [pc, #116]	@ (8002998 <AS5047_SPI_Write+0x13c>)
 8002922:	22c0      	movs	r2, #192	@ 0xc0
 8002924:	701a      	strb	r2, [r3, #0]
  txbuf[1] = NOP_FRAME & 0xFF;
 8002926:	4b1c      	ldr	r3, [pc, #112]	@ (8002998 <AS5047_SPI_Write+0x13c>)
 8002928:	2200      	movs	r2, #0
 800292a:	705a      	strb	r2, [r3, #1]
  HAL_GPIO_WritePin(SPI1_CS_GPIO_Port, SPI1_CS_Pin, GPIO_PIN_RESET);
 800292c:	2200      	movs	r2, #0
 800292e:	2140      	movs	r1, #64	@ 0x40
 8002930:	481a      	ldr	r0, [pc, #104]	@ (800299c <AS5047_SPI_Write+0x140>)
 8002932:	f003 fa41 	bl	8005db8 <HAL_GPIO_WritePin>
  HAL_SPI_TransmitReceive(&hspi1, (uint8_t*)&txbuf, (uint8_t*)&rxbuf, 2, 100);
 8002936:	2364      	movs	r3, #100	@ 0x64
 8002938:	9300      	str	r3, [sp, #0]
 800293a:	2302      	movs	r3, #2
 800293c:	4a18      	ldr	r2, [pc, #96]	@ (80029a0 <AS5047_SPI_Write+0x144>)
 800293e:	4916      	ldr	r1, [pc, #88]	@ (8002998 <AS5047_SPI_Write+0x13c>)
 8002940:	4818      	ldr	r0, [pc, #96]	@ (80029a4 <AS5047_SPI_Write+0x148>)
 8002942:	f004 fb08 	bl	8006f56 <HAL_SPI_TransmitReceive>
  while( hspi1.State == HAL_SPI_STATE_BUSY );
 8002946:	bf00      	nop
 8002948:	4b16      	ldr	r3, [pc, #88]	@ (80029a4 <AS5047_SPI_Write+0x148>)
 800294a:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 800294e:	b2db      	uxtb	r3, r3
 8002950:	2b02      	cmp	r3, #2
 8002952:	d0f9      	beq.n	8002948 <AS5047_SPI_Write+0xec>
  HAL_GPIO_WritePin(SPI1_CS_GPIO_Port, SPI1_CS_Pin, GPIO_PIN_SET);
 8002954:	2201      	movs	r2, #1
 8002956:	2140      	movs	r1, #64	@ 0x40
 8002958:	4810      	ldr	r0, [pc, #64]	@ (800299c <AS5047_SPI_Write+0x140>)
 800295a:	f003 fa2d 	bl	8005db8 <HAL_GPIO_WritePin>

  //DEBUG WHY THIS IS NOT WORKING LATER.
  //check if recieved data is same as what we wanted to write
  recievedFrame = ((uint16_t)rxbuf[0])<<8;
 800295e:	4b10      	ldr	r3, [pc, #64]	@ (80029a0 <AS5047_SPI_Write+0x144>)
 8002960:	781b      	ldrb	r3, [r3, #0]
 8002962:	021b      	lsls	r3, r3, #8
 8002964:	81fb      	strh	r3, [r7, #14]
  recievedFrame += rxbuf[1];
 8002966:	4b0e      	ldr	r3, [pc, #56]	@ (80029a0 <AS5047_SPI_Write+0x144>)
 8002968:	785b      	ldrb	r3, [r3, #1]
 800296a:	461a      	mov	r2, r3
 800296c:	89fb      	ldrh	r3, [r7, #14]
 800296e:	4413      	add	r3, r2
 8002970:	81fb      	strh	r3, [r7, #14]

  uint16_t receivedData = recievedFrame & 0x3FFF;
 8002972:	89fb      	ldrh	r3, [r7, #14]
 8002974:	f3c3 030d 	ubfx	r3, r3, #0, #14
 8002978:	81bb      	strh	r3, [r7, #12]
  uint16_t writtenData = valueFrame & 0x3FFF;
 800297a:	88bb      	ldrh	r3, [r7, #4]
 800297c:	f3c3 030d 	ubfx	r3, r3, #0, #14
 8002980:	817b      	strh	r3, [r7, #10]

  if ((writtenData) == receivedData){
 8002982:	897a      	ldrh	r2, [r7, #10]
 8002984:	89bb      	ldrh	r3, [r7, #12]
 8002986:	429a      	cmp	r2, r3
 8002988:	d101      	bne.n	800298e <AS5047_SPI_Write+0x132>
	  return 1;
 800298a:	2301      	movs	r3, #1
 800298c:	e000      	b.n	8002990 <AS5047_SPI_Write+0x134>
  }

  return 0;
 800298e:	2300      	movs	r3, #0
}
 8002990:	4618      	mov	r0, r3
 8002992:	3710      	adds	r7, #16
 8002994:	46bd      	mov	sp, r7
 8002996:	bd80      	pop	{r7, pc}
 8002998:	200018c8 	.word	0x200018c8
 800299c:	48000400 	.word	0x48000400
 80029a0:	200018cc 	.word	0x200018cc
 80029a4:	200003a0 	.word	0x200003a0

080029a8 <AS5047_SPI_Read>:


uint16_t AS5047_SPI_Read(uint16_t command, uint8_t continuousRead) {
 80029a8:	b580      	push	{r7, lr}
 80029aa:	b086      	sub	sp, #24
 80029ac:	af02      	add	r7, sp, #8
 80029ae:	4603      	mov	r3, r0
 80029b0:	460a      	mov	r2, r1
 80029b2:	80fb      	strh	r3, [r7, #6]
 80029b4:	4613      	mov	r3, r2
 80029b6:	717b      	strb	r3, [r7, #5]
  //write command frame.
  uint16_t finalDataVal;
  txbuf[0] = command >> 8U;
 80029b8:	88fb      	ldrh	r3, [r7, #6]
 80029ba:	0a1b      	lsrs	r3, r3, #8
 80029bc:	b29b      	uxth	r3, r3
 80029be:	b2da      	uxtb	r2, r3
 80029c0:	4b27      	ldr	r3, [pc, #156]	@ (8002a60 <AS5047_SPI_Read+0xb8>)
 80029c2:	701a      	strb	r2, [r3, #0]
  txbuf[1] = command & 0xFF;
 80029c4:	88fb      	ldrh	r3, [r7, #6]
 80029c6:	b2da      	uxtb	r2, r3
 80029c8:	4b25      	ldr	r3, [pc, #148]	@ (8002a60 <AS5047_SPI_Read+0xb8>)
 80029ca:	705a      	strb	r2, [r3, #1]
  HAL_GPIO_WritePin(SPI1_CS_GPIO_Port, SPI1_CS_Pin, GPIO_PIN_RESET);
 80029cc:	2200      	movs	r2, #0
 80029ce:	2140      	movs	r1, #64	@ 0x40
 80029d0:	4824      	ldr	r0, [pc, #144]	@ (8002a64 <AS5047_SPI_Read+0xbc>)
 80029d2:	f003 f9f1 	bl	8005db8 <HAL_GPIO_WritePin>
  HAL_SPI_TransmitReceive(&hspi1, (uint8_t*)&txbuf, (uint8_t*)&rxbuf,2,100);
 80029d6:	2364      	movs	r3, #100	@ 0x64
 80029d8:	9300      	str	r3, [sp, #0]
 80029da:	2302      	movs	r3, #2
 80029dc:	4a22      	ldr	r2, [pc, #136]	@ (8002a68 <AS5047_SPI_Read+0xc0>)
 80029de:	4920      	ldr	r1, [pc, #128]	@ (8002a60 <AS5047_SPI_Read+0xb8>)
 80029e0:	4822      	ldr	r0, [pc, #136]	@ (8002a6c <AS5047_SPI_Read+0xc4>)
 80029e2:	f004 fab8 	bl	8006f56 <HAL_SPI_TransmitReceive>
  while( hspi1.State == HAL_SPI_STATE_BUSY );
 80029e6:	bf00      	nop
 80029e8:	4b20      	ldr	r3, [pc, #128]	@ (8002a6c <AS5047_SPI_Read+0xc4>)
 80029ea:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 80029ee:	b2db      	uxtb	r3, r3
 80029f0:	2b02      	cmp	r3, #2
 80029f2:	d0f9      	beq.n	80029e8 <AS5047_SPI_Read+0x40>
  HAL_GPIO_WritePin(SPI1_CS_GPIO_Port, SPI1_CS_Pin, GPIO_PIN_SET);
 80029f4:	2201      	movs	r2, #1
 80029f6:	2140      	movs	r1, #64	@ 0x40
 80029f8:	481a      	ldr	r0, [pc, #104]	@ (8002a64 <AS5047_SPI_Read+0xbc>)
 80029fa:	f003 f9dd 	bl	8005db8 <HAL_GPIO_WritePin>

  if (continuousRead ==0){
 80029fe:	797b      	ldrb	r3, [r7, #5]
 8002a00:	2b00      	cmp	r3, #0
 8002a02:	d11e      	bne.n	8002a42 <AS5047_SPI_Read+0x9a>
	  //this is the NOP command frame for receiving data if you want to read the register once.
	  txbuf[0] = NOP_FRAME >> 8;
 8002a04:	4b16      	ldr	r3, [pc, #88]	@ (8002a60 <AS5047_SPI_Read+0xb8>)
 8002a06:	22c0      	movs	r2, #192	@ 0xc0
 8002a08:	701a      	strb	r2, [r3, #0]
	  txbuf[1] = NOP_FRAME & 0xFF;
 8002a0a:	4b15      	ldr	r3, [pc, #84]	@ (8002a60 <AS5047_SPI_Read+0xb8>)
 8002a0c:	2200      	movs	r2, #0
 8002a0e:	705a      	strb	r2, [r3, #1]
	  HAL_GPIO_WritePin(SPI1_CS_GPIO_Port, SPI1_CS_Pin, GPIO_PIN_RESET);
 8002a10:	2200      	movs	r2, #0
 8002a12:	2140      	movs	r1, #64	@ 0x40
 8002a14:	4813      	ldr	r0, [pc, #76]	@ (8002a64 <AS5047_SPI_Read+0xbc>)
 8002a16:	f003 f9cf 	bl	8005db8 <HAL_GPIO_WritePin>
	  HAL_SPI_TransmitReceive(&hspi1, (uint8_t*)&txbuf, (uint8_t*)&rxbuf,2,100);
 8002a1a:	2364      	movs	r3, #100	@ 0x64
 8002a1c:	9300      	str	r3, [sp, #0]
 8002a1e:	2302      	movs	r3, #2
 8002a20:	4a11      	ldr	r2, [pc, #68]	@ (8002a68 <AS5047_SPI_Read+0xc0>)
 8002a22:	490f      	ldr	r1, [pc, #60]	@ (8002a60 <AS5047_SPI_Read+0xb8>)
 8002a24:	4811      	ldr	r0, [pc, #68]	@ (8002a6c <AS5047_SPI_Read+0xc4>)
 8002a26:	f004 fa96 	bl	8006f56 <HAL_SPI_TransmitReceive>
	  while( hspi1.State == HAL_SPI_STATE_BUSY );
 8002a2a:	bf00      	nop
 8002a2c:	4b0f      	ldr	r3, [pc, #60]	@ (8002a6c <AS5047_SPI_Read+0xc4>)
 8002a2e:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8002a32:	b2db      	uxtb	r3, r3
 8002a34:	2b02      	cmp	r3, #2
 8002a36:	d0f9      	beq.n	8002a2c <AS5047_SPI_Read+0x84>
	  HAL_GPIO_WritePin(SPI1_CS_GPIO_Port, SPI1_CS_Pin, GPIO_PIN_SET);
 8002a38:	2201      	movs	r2, #1
 8002a3a:	2140      	movs	r1, #64	@ 0x40
 8002a3c:	4809      	ldr	r0, [pc, #36]	@ (8002a64 <AS5047_SPI_Read+0xbc>)
 8002a3e:	f003 f9bb 	bl	8005db8 <HAL_GPIO_WritePin>
  }
  finalDataVal = ((uint16_t)rxbuf[0])<<8;
 8002a42:	4b09      	ldr	r3, [pc, #36]	@ (8002a68 <AS5047_SPI_Read+0xc0>)
 8002a44:	781b      	ldrb	r3, [r3, #0]
 8002a46:	021b      	lsls	r3, r3, #8
 8002a48:	81fb      	strh	r3, [r7, #14]
  finalDataVal += rxbuf[1];
 8002a4a:	4b07      	ldr	r3, [pc, #28]	@ (8002a68 <AS5047_SPI_Read+0xc0>)
 8002a4c:	785b      	ldrb	r3, [r3, #1]
 8002a4e:	461a      	mov	r2, r3
 8002a50:	89fb      	ldrh	r3, [r7, #14]
 8002a52:	4413      	add	r3, r2
 8002a54:	81fb      	strh	r3, [r7, #14]

  return finalDataVal;
 8002a56:	89fb      	ldrh	r3, [r7, #14]

}
 8002a58:	4618      	mov	r0, r3
 8002a5a:	3710      	adds	r7, #16
 8002a5c:	46bd      	mov	sp, r7
 8002a5e:	bd80      	pop	{r7, pc}
 8002a60:	200018c8 	.word	0x200018c8
 8002a64:	48000400 	.word	0x48000400
 8002a68:	200018cc 	.word	0x200018cc
 8002a6c:	200003a0 	.word	0x200003a0

08002a70 <AS5047_readRegister>:

uint16_t AS5047_readRegister(uint16_t registerAddress,uint8_t continuousRead){
 8002a70:	b580      	push	{r7, lr}
 8002a72:	b084      	sub	sp, #16
 8002a74:	af00      	add	r7, sp, #0
 8002a76:	4603      	mov	r3, r0
 8002a78:	460a      	mov	r2, r1
 8002a7a:	80fb      	strh	r3, [r7, #6]
 8002a7c:	4613      	mov	r3, r2
 8002a7e:	717b      	strb	r3, [r7, #5]
  CommandFrame command;
  command.raw = 0;
 8002a80:	2300      	movs	r3, #0
 8002a82:	81bb      	strh	r3, [r7, #12]
  command.values.rw = READ;
 8002a84:	7b7b      	ldrb	r3, [r7, #13]
 8002a86:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8002a8a:	737b      	strb	r3, [r7, #13]
  command.values.commandFrame = registerAddress;
 8002a8c:	88fb      	ldrh	r3, [r7, #6]
 8002a8e:	f3c3 030d 	ubfx	r3, r3, #0, #14
 8002a92:	b29a      	uxth	r2, r3
 8002a94:	89bb      	ldrh	r3, [r7, #12]
 8002a96:	f362 030d 	bfi	r3, r2, #0, #14
 8002a9a:	81bb      	strh	r3, [r7, #12]
  command.values.parc = parityCheck(command.raw);
 8002a9c:	89bb      	ldrh	r3, [r7, #12]
 8002a9e:	4618      	mov	r0, r3
 8002aa0:	f7ff feaf 	bl	8002802 <parityCheck>
 8002aa4:	4603      	mov	r3, r0
 8002aa6:	461a      	mov	r2, r3
 8002aa8:	7b7b      	ldrb	r3, [r7, #13]
 8002aaa:	f362 13c7 	bfi	r3, r2, #7, #1
 8002aae:	737b      	strb	r3, [r7, #13]
  uint16_t out= AS5047_SPI_Read(command.raw, continuousRead);
 8002ab0:	89bb      	ldrh	r3, [r7, #12]
 8002ab2:	797a      	ldrb	r2, [r7, #5]
 8002ab4:	4611      	mov	r1, r2
 8002ab6:	4618      	mov	r0, r3
 8002ab8:	f7ff ff76 	bl	80029a8 <AS5047_SPI_Read>
 8002abc:	4603      	mov	r3, r0
 8002abe:	81fb      	strh	r3, [r7, #14]
  return out;
 8002ac0:	89fb      	ldrh	r3, [r7, #14]
}
 8002ac2:	4618      	mov	r0, r3
 8002ac4:	3710      	adds	r7, #16
 8002ac6:	46bd      	mov	sp, r7
 8002ac8:	bd80      	pop	{r7, pc}

08002aca <AS5047_writeRegister>:


void AS5047_writeRegister(uint16_t registerAddress, uint16_t registerValue) {
 8002aca:	b580      	push	{r7, lr}
 8002acc:	b084      	sub	sp, #16
 8002ace:	af00      	add	r7, sp, #0
 8002ad0:	4603      	mov	r3, r0
 8002ad2:	460a      	mov	r2, r1
 8002ad4:	80fb      	strh	r3, [r7, #6]
 8002ad6:	4613      	mov	r3, r2
 8002ad8:	80bb      	strh	r3, [r7, #4]
  CommandFrame command;
  command.raw=0;
 8002ada:	2300      	movs	r3, #0
 8002adc:	81bb      	strh	r3, [r7, #12]
  command.values.rw = WRITE;
 8002ade:	7b7b      	ldrb	r3, [r7, #13]
 8002ae0:	f36f 1386 	bfc	r3, #6, #1
 8002ae4:	737b      	strb	r3, [r7, #13]
  command.values.commandFrame = registerAddress;
 8002ae6:	88fb      	ldrh	r3, [r7, #6]
 8002ae8:	f3c3 030d 	ubfx	r3, r3, #0, #14
 8002aec:	b29a      	uxth	r2, r3
 8002aee:	89bb      	ldrh	r3, [r7, #12]
 8002af0:	f362 030d 	bfi	r3, r2, #0, #14
 8002af4:	81bb      	strh	r3, [r7, #12]
  command.values.parc = parityCheck(command.raw);
 8002af6:	89bb      	ldrh	r3, [r7, #12]
 8002af8:	4618      	mov	r0, r3
 8002afa:	f7ff fe82 	bl	8002802 <parityCheck>
 8002afe:	4603      	mov	r3, r0
 8002b00:	461a      	mov	r2, r3
 8002b02:	7b7b      	ldrb	r3, [r7, #13]
 8002b04:	f362 13c7 	bfi	r3, r2, #7, #1
 8002b08:	737b      	strb	r3, [r7, #13]

  WriteDataFrame contentFrame;
  contentFrame.raw = 0;
 8002b0a:	2300      	movs	r3, #0
 8002b0c:	813b      	strh	r3, [r7, #8]
  contentFrame.values.data = registerValue;
 8002b0e:	88bb      	ldrh	r3, [r7, #4]
 8002b10:	f3c3 030d 	ubfx	r3, r3, #0, #14
 8002b14:	b29a      	uxth	r2, r3
 8002b16:	893b      	ldrh	r3, [r7, #8]
 8002b18:	f362 030d 	bfi	r3, r2, #0, #14
 8002b1c:	813b      	strh	r3, [r7, #8]
  contentFrame.values.low = 0; //always low
 8002b1e:	7a7b      	ldrb	r3, [r7, #9]
 8002b20:	f36f 1386 	bfc	r3, #6, #1
 8002b24:	727b      	strb	r3, [r7, #9]
  contentFrame.values.pard = parityCheck(contentFrame.raw);
 8002b26:	893b      	ldrh	r3, [r7, #8]
 8002b28:	4618      	mov	r0, r3
 8002b2a:	f7ff fe6a 	bl	8002802 <parityCheck>
 8002b2e:	4603      	mov	r3, r0
 8002b30:	461a      	mov	r2, r3
 8002b32:	7a7b      	ldrb	r3, [r7, #9]
 8002b34:	f362 13c7 	bfi	r3, r2, #7, #1
 8002b38:	727b      	strb	r3, [r7, #9]
  //TODO Use the out in the below fn and handle errors
  //uint8_t out = AS5047_SPI_Write(command.raw, contentFrame.raw);
  AS5047_SPI_Write(command.raw, contentFrame.raw);
 8002b3a:	89bb      	ldrh	r3, [r7, #12]
 8002b3c:	893a      	ldrh	r2, [r7, #8]
 8002b3e:	4611      	mov	r1, r2
 8002b40:	4618      	mov	r0, r3
 8002b42:	f7ff fe8b 	bl	800285c <AS5047_SPI_Write>
}
 8002b46:	bf00      	nop
 8002b48:	3710      	adds	r7, #16
 8002b4a:	46bd      	mov	sp, r7
 8002b4c:	bd80      	pop	{r7, pc}

08002b4e <AS5047_ReadZeroValue>:

uint16_t AS5047_ReadZeroValue(void){
 8002b4e:	b580      	push	{r7, lr}
 8002b50:	b082      	sub	sp, #8
 8002b52:	af00      	add	r7, sp, #0
  ZPOSH_frame ZPOS_H;
  ZPOSL_frame ZPOS_L;

  ZPOS_H.raw = AS5047_readRegister(ZPOSM_REG,0);
 8002b54:	2100      	movs	r1, #0
 8002b56:	2016      	movs	r0, #22
 8002b58:	f7ff ff8a 	bl	8002a70 <AS5047_readRegister>
 8002b5c:	4603      	mov	r3, r0
 8002b5e:	b2db      	uxtb	r3, r3
 8002b60:	713b      	strb	r3, [r7, #4]
  ZPOS_L.raw = AS5047_readRegister(ZPOSL_REG,0);
 8002b62:	2100      	movs	r1, #0
 8002b64:	2017      	movs	r0, #23
 8002b66:	f7ff ff83 	bl	8002a70 <AS5047_readRegister>
 8002b6a:	4603      	mov	r3, r0
 8002b6c:	b2db      	uxtb	r3, r3
 8002b6e:	703b      	strb	r3, [r7, #0]

  uint16_t zpos = (ZPOS_H.raw << 6) + (ZPOS_L.raw & 0x3F);
 8002b70:	793b      	ldrb	r3, [r7, #4]
 8002b72:	019b      	lsls	r3, r3, #6
 8002b74:	b29a      	uxth	r2, r3
 8002b76:	783b      	ldrb	r3, [r7, #0]
 8002b78:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8002b7c:	b29b      	uxth	r3, r3
 8002b7e:	4413      	add	r3, r2
 8002b80:	80fb      	strh	r3, [r7, #6]
  return zpos;
 8002b82:	88fb      	ldrh	r3, [r7, #6]
}
 8002b84:	4618      	mov	r0, r3
 8002b86:	3708      	adds	r7, #8
 8002b88:	46bd      	mov	sp, r7
 8002b8a:	bd80      	pop	{r7, pc}

08002b8c <AS5047_WriteZeroValue>:


void AS5047_WriteZeroValue(uint16_t zeroValue){
 8002b8c:	b580      	push	{r7, lr}
 8002b8e:	b084      	sub	sp, #16
 8002b90:	af00      	add	r7, sp, #0
 8002b92:	4603      	mov	r3, r0
 8002b94:	80fb      	strh	r3, [r7, #6]
  ZPOSH_frame ZPOS_H;
  ZPOSL_frame ZPOS_L;

  ZPOS_L.values.zposl = zeroValue & 0x003F;
 8002b96:	88fb      	ldrh	r3, [r7, #6]
 8002b98:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8002b9c:	b2da      	uxtb	r2, r3
 8002b9e:	7a3b      	ldrb	r3, [r7, #8]
 8002ba0:	f362 0305 	bfi	r3, r2, #0, #6
 8002ba4:	723b      	strb	r3, [r7, #8]
  ZPOS_H.values.zposh = (zeroValue >> 6) & 0x00ff;
 8002ba6:	88fb      	ldrh	r3, [r7, #6]
 8002ba8:	099b      	lsrs	r3, r3, #6
 8002baa:	b29b      	uxth	r3, r3
 8002bac:	b2db      	uxtb	r3, r3
 8002bae:	733b      	strb	r3, [r7, #12]

  AS5047_writeRegister(ZPOSM_REG, ZPOS_H.raw);
 8002bb0:	7b3b      	ldrb	r3, [r7, #12]
 8002bb2:	4619      	mov	r1, r3
 8002bb4:	2016      	movs	r0, #22
 8002bb6:	f7ff ff88 	bl	8002aca <AS5047_writeRegister>
  AS5047_writeRegister(ZPOSL_REG, ZPOS_L.raw);
 8002bba:	7a3b      	ldrb	r3, [r7, #8]
 8002bbc:	4619      	mov	r1, r3
 8002bbe:	2017      	movs	r0, #23
 8002bc0:	f7ff ff83 	bl	8002aca <AS5047_writeRegister>

}
 8002bc4:	bf00      	nop
 8002bc6:	3710      	adds	r7, #16
 8002bc8:	46bd      	mov	sp, r7
 8002bca:	bd80      	pop	{r7, pc}

08002bcc <setMaxFrictionPWM>:
		 0.591f, 0.555f, 0.493f, 0.327f, 0.1f, 0.0f, 0.059f, 0.175f, 0.441f,
		 0.561f
};


void setMaxFrictionPWM(friction *f,uint16_t pwm){
 8002bcc:	b480      	push	{r7}
 8002bce:	b083      	sub	sp, #12
 8002bd0:	af00      	add	r7, sp, #0
 8002bd2:	6078      	str	r0, [r7, #4]
 8002bd4:	460b      	mov	r3, r1
 8002bd6:	807b      	strh	r3, [r7, #2]
	f->maxFrictionPWM = pwm;
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	887a      	ldrh	r2, [r7, #2]
 8002bdc:	805a      	strh	r2, [r3, #2]
	f->maxFrictionPercentage = f->maxFrictionPWM /TIMER1_ARR;
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	885b      	ldrh	r3, [r3, #2]
 8002be2:	ee07 3a90 	vmov	s15, r3
 8002be6:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002bea:	eddf 6a06 	vldr	s13, [pc, #24]	@ 8002c04 <setMaxFrictionPWM+0x38>
 8002bee:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	edc3 7a01 	vstr	s15, [r3, #4]
}
 8002bf8:	bf00      	nop
 8002bfa:	370c      	adds	r7, #12
 8002bfc:	46bd      	mov	sp, r7
 8002bfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c02:	4770      	bx	lr
 8002c04:	449c2000 	.word	0x449c2000

08002c08 <lookupFrictionAddition>:

void lookupFrictionAddition(friction *f,uint16_t encoder_raw){
 8002c08:	b480      	push	{r7}
 8002c0a:	b083      	sub	sp, #12
 8002c0c:	af00      	add	r7, sp, #0
 8002c0e:	6078      	str	r0, [r7, #4]
 8002c10:	460b      	mov	r3, r1
 8002c12:	807b      	strh	r3, [r7, #2]
	//divide encoder raw
	f->inst_encoderVal = encoder_raw;
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	887a      	ldrh	r2, [r7, #2]
 8002c18:	811a      	strh	r2, [r3, #8]
	f->inst_idx =f->inst_encoderVal>>DIVISION_RIGHT_SHIFT;
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	891b      	ldrh	r3, [r3, #8]
 8002c1e:	0a5b      	lsrs	r3, r3, #9
 8002c20:	b29b      	uxth	r3, r3
 8002c22:	b2da      	uxtb	r2, r3
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	729a      	strb	r2, [r3, #10]
	f->inst_frictionNorm = frictionNormalized[f->inst_idx];
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	7a9b      	ldrb	r3, [r3, #10]
 8002c2c:	4a0b      	ldr	r2, [pc, #44]	@ (8002c5c <lookupFrictionAddition+0x54>)
 8002c2e:	009b      	lsls	r3, r3, #2
 8002c30:	4413      	add	r3, r2
 8002c32:	681a      	ldr	r2, [r3, #0]
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	60da      	str	r2, [r3, #12]
	f->inst_frictionAddition = f->inst_frictionNorm * f->maxFrictionPercentage;
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	ed93 7a03 	vldr	s14, [r3, #12]
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	edd3 7a01 	vldr	s15, [r3, #4]
 8002c44:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	edc3 7a04 	vstr	s15, [r3, #16]
}
 8002c4e:	bf00      	nop
 8002c50:	370c      	adds	r7, #12
 8002c52:	46bd      	mov	sp, r7
 8002c54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c58:	4770      	bx	lr
 8002c5a:	bf00      	nop
 8002c5c:	2000000c 	.word	0x2000000c

08002c60 <setMaxCoggingPWM>:

void setMaxCoggingPWM(cogging *c,uint16_t pwm){
 8002c60:	b480      	push	{r7}
 8002c62:	b083      	sub	sp, #12
 8002c64:	af00      	add	r7, sp, #0
 8002c66:	6078      	str	r0, [r7, #4]
 8002c68:	460b      	mov	r3, r1
 8002c6a:	807b      	strh	r3, [r7, #2]
	c->maxCoggingPWM = pwm;
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	887a      	ldrh	r2, [r7, #2]
 8002c70:	805a      	strh	r2, [r3, #2]
	c->maxCoggingPercentage = c->maxCoggingPWM /TIMER1_ARR;
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	885b      	ldrh	r3, [r3, #2]
 8002c76:	ee07 3a90 	vmov	s15, r3
 8002c7a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002c7e:	eddf 6a06 	vldr	s13, [pc, #24]	@ 8002c98 <setMaxCoggingPWM+0x38>
 8002c82:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	edc3 7a01 	vstr	s15, [r3, #4]
}
 8002c8c:	bf00      	nop
 8002c8e:	370c      	adds	r7, #12
 8002c90:	46bd      	mov	sp, r7
 8002c92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c96:	4770      	bx	lr
 8002c98:	449c2000 	.word	0x449c2000

08002c9c <lookupCoggingAddition>:

void lookupCoggingAddition(cogging *c,float elecRadians){
 8002c9c:	b480      	push	{r7}
 8002c9e:	b085      	sub	sp, #20
 8002ca0:	af00      	add	r7, sp, #0
 8002ca2:	60f8      	str	r0, [r7, #12]
 8002ca4:	ed87 0a02 	vstr	s0, [r7, #8]
	//divide encoder raw
	c->inst_elecRadians = elecRadians;
 8002ca8:	68fb      	ldr	r3, [r7, #12]
 8002caa:	68ba      	ldr	r2, [r7, #8]
 8002cac:	609a      	str	r2, [r3, #8]
	c->inst_idx = c->inst_elecRadians/TWO_PI_F * COGGING_ARR_SIZE ;
 8002cae:	68fb      	ldr	r3, [r7, #12]
 8002cb0:	ed93 7a02 	vldr	s14, [r3, #8]
 8002cb4:	eddf 6a14 	vldr	s13, [pc, #80]	@ 8002d08 <lookupCoggingAddition+0x6c>
 8002cb8:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002cbc:	ed9f 7a13 	vldr	s14, [pc, #76]	@ 8002d0c <lookupCoggingAddition+0x70>
 8002cc0:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002cc4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002cc8:	edc7 7a01 	vstr	s15, [r7, #4]
 8002ccc:	793b      	ldrb	r3, [r7, #4]
 8002cce:	b2da      	uxtb	r2, r3
 8002cd0:	68fb      	ldr	r3, [r7, #12]
 8002cd2:	731a      	strb	r2, [r3, #12]
	c->inst_coggingNorm = coggingNormalized[c->inst_idx];
 8002cd4:	68fb      	ldr	r3, [r7, #12]
 8002cd6:	7b1b      	ldrb	r3, [r3, #12]
 8002cd8:	4a0d      	ldr	r2, [pc, #52]	@ (8002d10 <lookupCoggingAddition+0x74>)
 8002cda:	009b      	lsls	r3, r3, #2
 8002cdc:	4413      	add	r3, r2
 8002cde:	681a      	ldr	r2, [r3, #0]
 8002ce0:	68fb      	ldr	r3, [r7, #12]
 8002ce2:	611a      	str	r2, [r3, #16]
	c->inst_coggingAddition = c->inst_coggingNorm * c->maxCoggingPercentage;
 8002ce4:	68fb      	ldr	r3, [r7, #12]
 8002ce6:	ed93 7a04 	vldr	s14, [r3, #16]
 8002cea:	68fb      	ldr	r3, [r7, #12]
 8002cec:	edd3 7a01 	vldr	s15, [r3, #4]
 8002cf0:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002cf4:	68fb      	ldr	r3, [r7, #12]
 8002cf6:	edc3 7a05 	vstr	s15, [r3, #20]
}
 8002cfa:	bf00      	nop
 8002cfc:	3714      	adds	r7, #20
 8002cfe:	46bd      	mov	sp, r7
 8002d00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d04:	4770      	bx	lr
 8002d06:	bf00      	nop
 8002d08:	40c90fda 	.word	0x40c90fda
 8002d0c:	42800000 	.word	0x42800000
 8002d10:	2000008c 	.word	0x2000008c

08002d14 <Cordic_setup>:
 */

#include "MathConstants.h"
#include "Cordic.h"

void Cordic_setup(CORDIC_HandleTypeDef hcordic,CORDIC_ConfigTypeDef sCordicConfig){
 8002d14:	b084      	sub	sp, #16
 8002d16:	b580      	push	{r7, lr}
 8002d18:	af00      	add	r7, sp, #0
 8002d1a:	f107 0c08 	add.w	ip, r7, #8
 8002d1e:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
	sCordicConfig.Function         = CORDIC_FUNCTION_SINE;     /* sine function */
 8002d22:	2301      	movs	r3, #1
 8002d24:	633b      	str	r3, [r7, #48]	@ 0x30
	sCordicConfig.Precision        = CORDIC_PRECISION_6CYCLES; /* 1.15 -> 2^-7 residual error  */
 8002d26:	2360      	movs	r3, #96	@ 0x60
 8002d28:	64bb      	str	r3, [r7, #72]	@ 0x48
	sCordicConfig.Scale            = CORDIC_SCALE_0;           /* no scale */
 8002d2a:	2300      	movs	r3, #0
 8002d2c:	637b      	str	r3, [r7, #52]	@ 0x34
	sCordicConfig.NbWrite          = CORDIC_NBWRITE_1;         /* One input data: angle. Second input data (modulus) is 1 after cordic reset */
 8002d2e:	2300      	movs	r3, #0
 8002d30:	643b      	str	r3, [r7, #64]	@ 0x40
	sCordicConfig.NbRead           = CORDIC_NBREAD_1;          /* One output data: sine */
 8002d32:	2300      	movs	r3, #0
 8002d34:	647b      	str	r3, [r7, #68]	@ 0x44
	sCordicConfig.InSize           = CORDIC_INSIZE_16BITS;     /* q1.15 format for input data */
 8002d36:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8002d3a:	63bb      	str	r3, [r7, #56]	@ 0x38
	sCordicConfig.OutSize          = CORDIC_OUTSIZE_16BITS;    /* q1.15 format for output data */
 8002d3c:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 8002d40:	63fb      	str	r3, [r7, #60]	@ 0x3c
	HAL_CORDIC_Configure(&hcordic, &sCordicConfig);
 8002d42:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8002d46:	4619      	mov	r1, r3
 8002d48:	f107 0008 	add.w	r0, r7, #8
 8002d4c:	f002 fa34 	bl	80051b8 <HAL_CORDIC_Configure>
}
 8002d50:	bf00      	nop
 8002d52:	46bd      	mov	sp, r7
 8002d54:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8002d58:	b004      	add	sp, #16
 8002d5a:	4770      	bx	lr

08002d5c <RunCordic_TwoSines>:
	short out1 = out0&0xffff;
	*sin_out = (float)out1/32768.0f;
	*cos_out = (float)out2/32768.0f;
}

void RunCordic_TwoSines(CORDIC_HandleTypeDef hcordic,float theta1,float theta2,float *sin1 , float *sin2) {
 8002d5c:	b084      	sub	sp, #16
 8002d5e:	b480      	push	{r7}
 8002d60:	b087      	sub	sp, #28
 8002d62:	af00      	add	r7, sp, #0
 8002d64:	f107 0c20 	add.w	ip, r7, #32
 8002d68:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
 8002d6c:	ed87 0a01 	vstr	s0, [r7, #4]
 8002d70:	edc7 0a00 	vstr	s1, [r7]
	MODIFY_REG(hcordic.Instance->CSR,CORDIC_CSR_FUNC,SINE_FUNCTION);
 8002d74:	6a3b      	ldr	r3, [r7, #32]
 8002d76:	681b      	ldr	r3, [r3, #0]
 8002d78:	f023 020f 	bic.w	r2, r3, #15
 8002d7c:	6a3b      	ldr	r3, [r7, #32]
 8002d7e:	f042 0201 	orr.w	r2, r2, #1
 8002d82:	601a      	str	r2, [r3, #0]
	//meant to calculate theta and 60-theta,while doing SVPWM
	int32_t cordicin = 0x7fff0000;   //  mag = 1
 8002d84:	4b2a      	ldr	r3, [pc, #168]	@ (8002e30 <RunCordic_TwoSines+0xd4>)
 8002d86:	617b      	str	r3, [r7, #20]
	short thetashort = theta1*10435;
 8002d88:	edd7 7a01 	vldr	s15, [r7, #4]
 8002d8c:	ed9f 7a29 	vldr	s14, [pc, #164]	@ 8002e34 <RunCordic_TwoSines+0xd8>
 8002d90:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002d94:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002d98:	ee17 3a90 	vmov	r3, s15
 8002d9c:	827b      	strh	r3, [r7, #18]
	cordicin += thetashort;
 8002d9e:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8002da2:	697a      	ldr	r2, [r7, #20]
 8002da4:	4413      	add	r3, r2
 8002da6:	617b      	str	r3, [r7, #20]

	CORDIC->WDATA = cordicin;
 8002da8:	4a23      	ldr	r2, [pc, #140]	@ (8002e38 <RunCordic_TwoSines+0xdc>)
 8002daa:	697b      	ldr	r3, [r7, #20]
 8002dac:	6053      	str	r3, [r2, #4]
	int32_t out0 = CORDIC->RDATA;
 8002dae:	4b22      	ldr	r3, [pc, #136]	@ (8002e38 <RunCordic_TwoSines+0xdc>)
 8002db0:	689b      	ldr	r3, [r3, #8]
 8002db2:	60fb      	str	r3, [r7, #12]

	short out1 = out0&0xffff;
 8002db4:	68fb      	ldr	r3, [r7, #12]
 8002db6:	817b      	strh	r3, [r7, #10]
	*sin1 = (float)out1/32768.0f;
 8002db8:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8002dbc:	ee07 3a90 	vmov	s15, r3
 8002dc0:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002dc4:	eddf 6a1d 	vldr	s13, [pc, #116]	@ 8002e3c <RunCordic_TwoSines+0xe0>
 8002dc8:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002dcc:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8002dce:	edc3 7a00 	vstr	s15, [r3]

	//----------------------------------
	cordicin = 0x7fff0000;
 8002dd2:	4b17      	ldr	r3, [pc, #92]	@ (8002e30 <RunCordic_TwoSines+0xd4>)
 8002dd4:	617b      	str	r3, [r7, #20]
	thetashort = theta2*10435;
 8002dd6:	edd7 7a00 	vldr	s15, [r7]
 8002dda:	ed9f 7a16 	vldr	s14, [pc, #88]	@ 8002e34 <RunCordic_TwoSines+0xd8>
 8002dde:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002de2:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002de6:	ee17 3a90 	vmov	r3, s15
 8002dea:	827b      	strh	r3, [r7, #18]
	cordicin += thetashort;
 8002dec:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8002df0:	697a      	ldr	r2, [r7, #20]
 8002df2:	4413      	add	r3, r2
 8002df4:	617b      	str	r3, [r7, #20]

	CORDIC->WDATA = cordicin;
 8002df6:	4a10      	ldr	r2, [pc, #64]	@ (8002e38 <RunCordic_TwoSines+0xdc>)
 8002df8:	697b      	ldr	r3, [r7, #20]
 8002dfa:	6053      	str	r3, [r2, #4]
	out0 = CORDIC->RDATA;
 8002dfc:	4b0e      	ldr	r3, [pc, #56]	@ (8002e38 <RunCordic_TwoSines+0xdc>)
 8002dfe:	689b      	ldr	r3, [r3, #8]
 8002e00:	60fb      	str	r3, [r7, #12]

	out1 = out0&0xffff;
 8002e02:	68fb      	ldr	r3, [r7, #12]
 8002e04:	817b      	strh	r3, [r7, #10]
	*sin2 = (float)out1/32768.0f;
 8002e06:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8002e0a:	ee07 3a90 	vmov	s15, r3
 8002e0e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002e12:	eddf 6a0a 	vldr	s13, [pc, #40]	@ 8002e3c <RunCordic_TwoSines+0xe0>
 8002e16:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002e1a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8002e1c:	edc3 7a00 	vstr	s15, [r3]

}
 8002e20:	bf00      	nop
 8002e22:	371c      	adds	r7, #28
 8002e24:	46bd      	mov	sp, r7
 8002e26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e2a:	b004      	add	sp, #16
 8002e2c:	4770      	bx	lr
 8002e2e:	bf00      	nop
 8002e30:	7fff0000 	.word	0x7fff0000
 8002e34:	46230c00 	.word	0x46230c00
 8002e38:	40020c00 	.word	0x40020c00
 8002e3c:	47000000 	.word	0x47000000

08002e40 <Encoder_checkHealth>:
 */

#include "AS5x47P.h"
#include "EncoderFns.h"

uint8_t Encoder_checkHealth(void){
 8002e40:	b580      	push	{r7, lr}
 8002e42:	b082      	sub	sp, #8
 8002e44:	af00      	add	r7, sp, #0
	Diaagc diag;
	diag.raw = AS5047_SPI_Read(DIAGC_READ_FRAME,0);
 8002e46:	2100      	movs	r1, #0
 8002e48:	f64f 70fc 	movw	r0, #65532	@ 0xfffc
 8002e4c:	f7ff fdac 	bl	80029a8 <AS5047_SPI_Read>
 8002e50:	4603      	mov	r3, r0
 8002e52:	80bb      	strh	r3, [r7, #4]
	if(diag.values.magh == 1){
 8002e54:	797b      	ldrb	r3, [r7, #5]
 8002e56:	f003 0304 	and.w	r3, r3, #4
 8002e5a:	b2db      	uxtb	r3, r3
 8002e5c:	2b00      	cmp	r3, #0
 8002e5e:	d001      	beq.n	8002e64 <Encoder_checkHealth+0x24>
		return 1;
 8002e60:	2301      	movs	r3, #1
 8002e62:	e010      	b.n	8002e86 <Encoder_checkHealth+0x46>
	}else if (diag.values.magl == 1){
 8002e64:	797b      	ldrb	r3, [r7, #5]
 8002e66:	f003 0308 	and.w	r3, r3, #8
 8002e6a:	b2db      	uxtb	r3, r3
 8002e6c:	2b00      	cmp	r3, #0
 8002e6e:	d001      	beq.n	8002e74 <Encoder_checkHealth+0x34>
		return 2;
 8002e70:	2302      	movs	r3, #2
 8002e72:	e008      	b.n	8002e86 <Encoder_checkHealth+0x46>
	}else if (diag.values.cof == 1){
 8002e74:	797b      	ldrb	r3, [r7, #5]
 8002e76:	f003 0302 	and.w	r3, r3, #2
 8002e7a:	b2db      	uxtb	r3, r3
 8002e7c:	2b00      	cmp	r3, #0
 8002e7e:	d001      	beq.n	8002e84 <Encoder_checkHealth+0x44>
		return 3;
 8002e80:	2303      	movs	r3, #3
 8002e82:	e000      	b.n	8002e86 <Encoder_checkHealth+0x46>
	}else{
		return 0;
 8002e84:	2300      	movs	r3, #0
	}
}
 8002e86:	4618      	mov	r0, r3
 8002e88:	3708      	adds	r7, #8
 8002e8a:	46bd      	mov	sp, r7
 8002e8c:	bd80      	pop	{r7, pc}

08002e8e <SetupABIwithoutPWM>:


void SetupABIwithoutPWM(void){
 8002e8e:	b580      	push	{r7, lr}
 8002e90:	b082      	sub	sp, #8
 8002e92:	af00      	add	r7, sp, #0
  // we setup ABI with 2000 resolution but we dont use it, becuase we directly read
  // the angle through SPI. But we want to set this up so that we get the index pin
  // signal which we can probe.
  Settings1 settings1;
  settings1.raw = 0;
 8002e94:	2300      	movs	r3, #0
 8002e96:	80bb      	strh	r3, [r7, #4]
  settings1.values.factorySetting = 1;
 8002e98:	793b      	ldrb	r3, [r7, #4]
 8002e9a:	f043 0301 	orr.w	r3, r3, #1
 8002e9e:	713b      	strb	r3, [r7, #4]
  settings1.values.not_used = 0;
 8002ea0:	793b      	ldrb	r3, [r7, #4]
 8002ea2:	f36f 0341 	bfc	r3, #1, #1
 8002ea6:	713b      	strb	r3, [r7, #4]
  settings1.values.dir = 0;  // By definition A leads B for CW direction. for us seen from the front, rotating in a CW direction gives A leading B.
 8002ea8:	793b      	ldrb	r3, [r7, #4]
 8002eaa:	f36f 0382 	bfc	r3, #2, #1
 8002eae:	713b      	strb	r3, [r7, #4]
  settings1.values.uvw_abi = 0; // 0-ABI with W pin as PWM, 1-UVW with I pin as PWM
 8002eb0:	793b      	ldrb	r3, [r7, #4]
 8002eb2:	f36f 03c3 	bfc	r3, #3, #1
 8002eb6:	713b      	strb	r3, [r7, #4]
  settings1.values.daecdis = 0;
 8002eb8:	793b      	ldrb	r3, [r7, #4]
 8002eba:	f36f 1304 	bfc	r3, #4, #1
 8002ebe:	713b      	strb	r3, [r7, #4]
  settings1.values.abibin = 0; // ABI-decimal or binary.
 8002ec0:	793b      	ldrb	r3, [r7, #4]
 8002ec2:	f36f 1345 	bfc	r3, #5, #1
 8002ec6:	713b      	strb	r3, [r7, #4]
  settings1.values.dataselect = 0; //1 is cordic Angle, 0 is dynamic angle compensation. Remove for very slow speeds.
 8002ec8:	793b      	ldrb	r3, [r7, #4]
 8002eca:	f36f 1386 	bfc	r3, #6, #1
 8002ece:	713b      	strb	r3, [r7, #4]
  settings1.values.pwmon = 0; //sets pwm on W pin if 1.
 8002ed0:	793b      	ldrb	r3, [r7, #4]
 8002ed2:	f36f 13c7 	bfc	r3, #7, #1
 8002ed6:	713b      	strb	r3, [r7, #4]

  AS5047_writeRegister(SETTINGS1_REG, settings1.raw);
 8002ed8:	88bb      	ldrh	r3, [r7, #4]
 8002eda:	4619      	mov	r1, r3
 8002edc:	2018      	movs	r0, #24
 8002ede:	f7ff fdf4 	bl	8002aca <AS5047_writeRegister>

  Settings2 settings2;
  settings2.raw = 0;
 8002ee2:	2300      	movs	r3, #0
 8002ee4:	703b      	strb	r3, [r7, #0]
  settings2.values.abires = 0; // with abibin sets the resolution
 8002ee6:	783b      	ldrb	r3, [r7, #0]
 8002ee8:	f36f 1347 	bfc	r3, #5, #3
 8002eec:	703b      	strb	r3, [r7, #0]
  settings2.values.uvwpp = 4; // 5 pole pairs - 0b100
 8002eee:	783b      	ldrb	r3, [r7, #0]
 8002ef0:	2204      	movs	r2, #4
 8002ef2:	f362 0302 	bfi	r3, r2, #0, #3
 8002ef6:	703b      	strb	r3, [r7, #0]
  AS5047_writeRegister(SETTINGS2_REG,settings2.raw);
 8002ef8:	783b      	ldrb	r3, [r7, #0]
 8002efa:	4619      	mov	r1, r3
 8002efc:	2019      	movs	r0, #25
 8002efe:	f7ff fde4 	bl	8002aca <AS5047_writeRegister>
}
 8002f02:	bf00      	nop
 8002f04:	3708      	adds	r7, #8
 8002f06:	46bd      	mov	sp, r7
 8002f08:	bd80      	pop	{r7, pc}

08002f0a <Check_ABI_SetCorrectly>:

uint8_t Check_ABI_SetCorrectly(Settings1 settings1, Settings2 settings2){
 8002f0a:	b480      	push	{r7}
 8002f0c:	b083      	sub	sp, #12
 8002f0e:	af00      	add	r7, sp, #0
 8002f10:	80b8      	strh	r0, [r7, #4]
 8002f12:	7039      	strb	r1, [r7, #0]
  if ((settings1.values.uvw_abi == 0) && (settings1.values.abibin == 0 ) && (settings1.values.pwmon == 0 ) && ( settings1.values.dir == 0)
 8002f14:	793b      	ldrb	r3, [r7, #4]
 8002f16:	f003 0308 	and.w	r3, r3, #8
 8002f1a:	b2db      	uxtb	r3, r3
 8002f1c:	2b00      	cmp	r3, #0
 8002f1e:	d11f      	bne.n	8002f60 <Check_ABI_SetCorrectly+0x56>
 8002f20:	793b      	ldrb	r3, [r7, #4]
 8002f22:	f003 0320 	and.w	r3, r3, #32
 8002f26:	b2db      	uxtb	r3, r3
 8002f28:	2b00      	cmp	r3, #0
 8002f2a:	d119      	bne.n	8002f60 <Check_ABI_SetCorrectly+0x56>
 8002f2c:	793b      	ldrb	r3, [r7, #4]
 8002f2e:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 8002f32:	b2db      	uxtb	r3, r3
 8002f34:	2b00      	cmp	r3, #0
 8002f36:	d113      	bne.n	8002f60 <Check_ABI_SetCorrectly+0x56>
 8002f38:	793b      	ldrb	r3, [r7, #4]
 8002f3a:	f003 0304 	and.w	r3, r3, #4
 8002f3e:	b2db      	uxtb	r3, r3
 8002f40:	2b00      	cmp	r3, #0
 8002f42:	d10d      	bne.n	8002f60 <Check_ABI_SetCorrectly+0x56>
      && (settings2.values.abires == 0)  && ( settings2.values.uvwpp == 4)){
 8002f44:	783b      	ldrb	r3, [r7, #0]
 8002f46:	f023 031f 	bic.w	r3, r3, #31
 8002f4a:	b2db      	uxtb	r3, r3
 8002f4c:	2b00      	cmp	r3, #0
 8002f4e:	d107      	bne.n	8002f60 <Check_ABI_SetCorrectly+0x56>
 8002f50:	783b      	ldrb	r3, [r7, #0]
 8002f52:	f003 0307 	and.w	r3, r3, #7
 8002f56:	b2db      	uxtb	r3, r3
 8002f58:	2b04      	cmp	r3, #4
 8002f5a:	d101      	bne.n	8002f60 <Check_ABI_SetCorrectly+0x56>
        return 1;
 8002f5c:	2301      	movs	r3, #1
 8002f5e:	e000      	b.n	8002f62 <Check_ABI_SetCorrectly+0x58>
      }
  else{
    return 0;
 8002f60:	2300      	movs	r3, #0
  }
}
 8002f62:	4618      	mov	r0, r3
 8002f64:	370c      	adds	r7, #12
 8002f66:	46bd      	mov	sp, r7
 8002f68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f6c:	4770      	bx	lr

08002f6e <Encoder_setup>:


uint8_t Encoder_setup(void){
 8002f6e:	b580      	push	{r7, lr}
 8002f70:	b082      	sub	sp, #8
 8002f72:	af00      	add	r7, sp, #0

	Settings1 settings1Reg;
	Settings2 settings2Reg;
	uint8_t abiSettingsOK;

	SetupABIwithoutPWM();
 8002f74:	f7ff ff8b 	bl	8002e8e <SetupABIwithoutPWM>
	settings1Reg.raw = AS5047_SPI_Read(SETTINGS1_READ_FRAME, 0);
 8002f78:	2100      	movs	r1, #0
 8002f7a:	f24c 0018 	movw	r0, #49176	@ 0xc018
 8002f7e:	f7ff fd13 	bl	80029a8 <AS5047_SPI_Read>
 8002f82:	4603      	mov	r3, r0
 8002f84:	80bb      	strh	r3, [r7, #4]
	settings2Reg.raw = AS5047_SPI_Read(SETTINGS2_READ_FRAME, 0);
 8002f86:	2100      	movs	r1, #0
 8002f88:	f244 0019 	movw	r0, #16409	@ 0x4019
 8002f8c:	f7ff fd0c 	bl	80029a8 <AS5047_SPI_Read>
 8002f90:	4603      	mov	r3, r0
 8002f92:	b2db      	uxtb	r3, r3
 8002f94:	703b      	strb	r3, [r7, #0]
	abiSettingsOK = Check_ABI_SetCorrectly(settings1Reg,settings2Reg);
 8002f96:	7839      	ldrb	r1, [r7, #0]
 8002f98:	88b8      	ldrh	r0, [r7, #4]
 8002f9a:	f7ff ffb6 	bl	8002f0a <Check_ABI_SetCorrectly>
 8002f9e:	4603      	mov	r3, r0
 8002fa0:	71fb      	strb	r3, [r7, #7]
	return abiSettingsOK;
 8002fa2:	79fb      	ldrb	r3, [r7, #7]
}
 8002fa4:	4618      	mov	r0, r3
 8002fa6:	3708      	adds	r7, #8
 8002fa8:	46bd      	mov	sp, r7
 8002faa:	bd80      	pop	{r7, pc}

08002fac <Encoder_updateZeroPosition>:

uint8_t Encoder_updateZeroPosition(uint16_t zeroValue){
 8002fac:	b580      	push	{r7, lr}
 8002fae:	b084      	sub	sp, #16
 8002fb0:	af00      	add	r7, sp, #0
 8002fb2:	4603      	mov	r3, r0
 8002fb4:	80fb      	strh	r3, [r7, #6]
	uint16_t zeroPos;
	zeroPos = AS5047_ReadZeroValue();
 8002fb6:	f7ff fdca 	bl	8002b4e <AS5047_ReadZeroValue>
 8002fba:	4603      	mov	r3, r0
 8002fbc:	81fb      	strh	r3, [r7, #14]
	if (zeroPos != zeroValue){
 8002fbe:	89fa      	ldrh	r2, [r7, #14]
 8002fc0:	88fb      	ldrh	r3, [r7, #6]
 8002fc2:	429a      	cmp	r2, r3
 8002fc4:	d00f      	beq.n	8002fe6 <Encoder_updateZeroPosition+0x3a>
		AS5047_WriteZeroValue(zeroValue); //function must check if it got back the same value it wrote.
 8002fc6:	88fb      	ldrh	r3, [r7, #6]
 8002fc8:	4618      	mov	r0, r3
 8002fca:	f7ff fddf 	bl	8002b8c <AS5047_WriteZeroValue>
		zeroPos = AS5047_ReadZeroValue(); //to check if this value is same as what we wrote
 8002fce:	f7ff fdbe 	bl	8002b4e <AS5047_ReadZeroValue>
 8002fd2:	4603      	mov	r3, r0
 8002fd4:	81fb      	strh	r3, [r7, #14]
		if (zeroPos != zeroValue){
 8002fd6:	89fa      	ldrh	r2, [r7, #14]
 8002fd8:	88fb      	ldrh	r3, [r7, #6]
 8002fda:	429a      	cmp	r2, r3
 8002fdc:	d001      	beq.n	8002fe2 <Encoder_updateZeroPosition+0x36>
			return 0;
 8002fde:	2300      	movs	r3, #0
 8002fe0:	e002      	b.n	8002fe8 <Encoder_updateZeroPosition+0x3c>
		}else{
			return 1;
 8002fe2:	2301      	movs	r3, #1
 8002fe4:	e000      	b.n	8002fe8 <Encoder_updateZeroPosition+0x3c>
		}
	  }
	return 1;
 8002fe6:	2301      	movs	r3, #1
}
 8002fe8:	4618      	mov	r0, r3
 8002fea:	3710      	adds	r7, #16
 8002fec:	46bd      	mov	sp, r7
 8002fee:	bd80      	pop	{r7, pc}

08002ff0 <Encoder_enableMagErrors>:


uint8_t Encoder_enableMagErrors(void){
 8002ff0:	b580      	push	{r7, lr}
 8002ff2:	b082      	sub	sp, #8
 8002ff4:	af00      	add	r7, sp, #0
	ZPOSL_frame ZPOS_L;
	ZPOS_L.raw = AS5047_readRegister(ZPOSL_REG,0);
 8002ff6:	2100      	movs	r1, #0
 8002ff8:	2017      	movs	r0, #23
 8002ffa:	f7ff fd39 	bl	8002a70 <AS5047_readRegister>
 8002ffe:	4603      	mov	r3, r0
 8003000:	b2db      	uxtb	r3, r3
 8003002:	713b      	strb	r3, [r7, #4]
	if ((ZPOS_L.values.comp_h_error == 0 ) || (ZPOS_L.values.comp_l_error == 0)){
 8003004:	793b      	ldrb	r3, [r7, #4]
 8003006:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 800300a:	b2db      	uxtb	r3, r3
 800300c:	2b00      	cmp	r3, #0
 800300e:	d005      	beq.n	800301c <Encoder_enableMagErrors+0x2c>
 8003010:	793b      	ldrb	r3, [r7, #4]
 8003012:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003016:	b2db      	uxtb	r3, r3
 8003018:	2b00      	cmp	r3, #0
 800301a:	d125      	bne.n	8003068 <Encoder_enableMagErrors+0x78>
		ZPOS_L.values.comp_h_error = 1;
 800301c:	793b      	ldrb	r3, [r7, #4]
 800301e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003022:	713b      	strb	r3, [r7, #4]
		ZPOS_L.values.comp_l_error = 1;
 8003024:	793b      	ldrb	r3, [r7, #4]
 8003026:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800302a:	713b      	strb	r3, [r7, #4]
		AS5047_writeRegister(ZPOSL_REG, ZPOS_L.raw);
 800302c:	793b      	ldrb	r3, [r7, #4]
 800302e:	4619      	mov	r1, r3
 8003030:	2017      	movs	r0, #23
 8003032:	f7ff fd4a 	bl	8002aca <AS5047_writeRegister>

		//check if it was written properly
		ZPOS_L.raw = 0;
 8003036:	2300      	movs	r3, #0
 8003038:	713b      	strb	r3, [r7, #4]
		ZPOS_L.raw = AS5047_readRegister(ZPOSL_REG,0);
 800303a:	2100      	movs	r1, #0
 800303c:	2017      	movs	r0, #23
 800303e:	f7ff fd17 	bl	8002a70 <AS5047_readRegister>
 8003042:	4603      	mov	r3, r0
 8003044:	b2db      	uxtb	r3, r3
 8003046:	713b      	strb	r3, [r7, #4]
		if ((ZPOS_L.values.comp_h_error == 0 ) || (ZPOS_L.values.comp_l_error == 0)){
 8003048:	793b      	ldrb	r3, [r7, #4]
 800304a:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 800304e:	b2db      	uxtb	r3, r3
 8003050:	2b00      	cmp	r3, #0
 8003052:	d005      	beq.n	8003060 <Encoder_enableMagErrors+0x70>
 8003054:	793b      	ldrb	r3, [r7, #4]
 8003056:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800305a:	b2db      	uxtb	r3, r3
 800305c:	2b00      	cmp	r3, #0
 800305e:	d101      	bne.n	8003064 <Encoder_enableMagErrors+0x74>
			return 0;
 8003060:	2300      	movs	r3, #0
 8003062:	e002      	b.n	800306a <Encoder_enableMagErrors+0x7a>
		}else{
			return 1;
 8003064:	2301      	movs	r3, #1
 8003066:	e000      	b.n	800306a <Encoder_enableMagErrors+0x7a>
		}
	}
	return 1;
 8003068:	2301      	movs	r3, #1
}
 800306a:	4618      	mov	r0, r3
 800306c:	3708      	adds	r7, #8
 800306e:	46bd      	mov	sp, r7
 8003070:	bd80      	pop	{r7, pc}

08003072 <Encoder_get16BitMechAngle_Single>:
	angleData =  angle.values.cordicang;
	angleMech = angleData*SPI_RDNG_TO_MECH_ANGLE;
	return angleMech;
}

uint16_t Encoder_get16BitMechAngle_Single(uint8_t continuous){
 8003072:	b580      	push	{r7, lr}
 8003074:	b084      	sub	sp, #16
 8003076:	af00      	add	r7, sp, #0
 8003078:	4603      	mov	r3, r0
 800307a:	71fb      	strb	r3, [r7, #7]
	ReadDataFrame readdataframe;
	Angle angle;
	readdataframe.raw = AS5047_SPI_Read(ANGLE_READ_FRAME,continuous);
 800307c:	79fb      	ldrb	r3, [r7, #7]
 800307e:	4619      	mov	r1, r3
 8003080:	f647 70fe 	movw	r0, #32766	@ 0x7ffe
 8003084:	f7ff fc90 	bl	80029a8 <AS5047_SPI_Read>
 8003088:	4603      	mov	r3, r0
 800308a:	81bb      	strh	r3, [r7, #12]
	angle.raw = readdataframe.values.data;
 800308c:	89bb      	ldrh	r3, [r7, #12]
 800308e:	f3c3 030d 	ubfx	r3, r3, #0, #14
 8003092:	b29b      	uxth	r3, r3
 8003094:	813b      	strh	r3, [r7, #8]
	return angle.values.cordicang;
 8003096:	893b      	ldrh	r3, [r7, #8]
 8003098:	f3c3 030d 	ubfx	r3, r3, #0, #14
 800309c:	b29b      	uxth	r3, r3
}
 800309e:	4618      	mov	r0, r3
 80030a0:	3710      	adds	r7, #16
 80030a2:	46bd      	mov	sp, r7
 80030a4:	bd80      	pop	{r7, pc}
	...

080030a8 <FOC_calcSVPWM>:
 */

#include "FOC.h"


void FOC_calcSVPWM(SVPWM *svpwm,float m, float encoderAngle,float deltaTovoltageAngle){
 80030a8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80030aa:	b093      	sub	sp, #76	@ 0x4c
 80030ac:	af08      	add	r7, sp, #32
 80030ae:	6178      	str	r0, [r7, #20]
 80030b0:	ed87 0a04 	vstr	s0, [r7, #16]
 80030b4:	edc7 0a03 	vstr	s1, [r7, #12]
 80030b8:	ed87 1a02 	vstr	s2, [r7, #8]
	// encoder angle should not go above 2Pi
	svpwm->encoderAngle = encoderAngle;
 80030bc:	697b      	ldr	r3, [r7, #20]
 80030be:	68fa      	ldr	r2, [r7, #12]
 80030c0:	609a      	str	r2, [r3, #8]
	svpwm->voltageAngle = encoderAngle + deltaTovoltageAngle;
 80030c2:	ed97 7a03 	vldr	s14, [r7, #12]
 80030c6:	edd7 7a02 	vldr	s15, [r7, #8]
 80030ca:	ee77 7a27 	vadd.f32	s15, s14, s15
 80030ce:	697b      	ldr	r3, [r7, #20]
 80030d0:	edc3 7a03 	vstr	s15, [r3, #12]
	if (svpwm->voltageAngle > TWO_PI_F){
 80030d4:	697b      	ldr	r3, [r7, #20]
 80030d6:	edd3 7a03 	vldr	s15, [r3, #12]
 80030da:	ed9f 7a95 	vldr	s14, [pc, #596]	@ 8003330 <FOC_calcSVPWM+0x288>
 80030de:	eef4 7ac7 	vcmpe.f32	s15, s14
 80030e2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80030e6:	dd0a      	ble.n	80030fe <FOC_calcSVPWM+0x56>
		svpwm->voltageAngle = svpwm->voltageAngle - TWO_PI_F;
 80030e8:	697b      	ldr	r3, [r7, #20]
 80030ea:	edd3 7a03 	vldr	s15, [r3, #12]
 80030ee:	ed9f 7a90 	vldr	s14, [pc, #576]	@ 8003330 <FOC_calcSVPWM+0x288>
 80030f2:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80030f6:	697b      	ldr	r3, [r7, #20]
 80030f8:	edc3 7a03 	vstr	s15, [r3, #12]
 80030fc:	e011      	b.n	8003122 <FOC_calcSVPWM+0x7a>
	}else if (svpwm->voltageAngle < 0){
 80030fe:	697b      	ldr	r3, [r7, #20]
 8003100:	edd3 7a03 	vldr	s15, [r3, #12]
 8003104:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8003108:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800310c:	d509      	bpl.n	8003122 <FOC_calcSVPWM+0x7a>
		svpwm->voltageAngle = svpwm->voltageAngle + TWO_PI_F;
 800310e:	697b      	ldr	r3, [r7, #20]
 8003110:	edd3 7a03 	vldr	s15, [r3, #12]
 8003114:	ed9f 7a86 	vldr	s14, [pc, #536]	@ 8003330 <FOC_calcSVPWM+0x288>
 8003118:	ee77 7a87 	vadd.f32	s15, s15, s14
 800311c:	697b      	ldr	r3, [r7, #20]
 800311e:	edc3 7a03 	vstr	s15, [r3, #12]
	}else{
		//do nothing
	}

	svpwm->sector = (uint8_t)(svpwm->voltageAngle/PI_BY_3F);
 8003122:	697b      	ldr	r3, [r7, #20]
 8003124:	ed93 7a03 	vldr	s14, [r3, #12]
 8003128:	eddf 6a82 	vldr	s13, [pc, #520]	@ 8003334 <FOC_calcSVPWM+0x28c>
 800312c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8003130:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003134:	edc7 7a01 	vstr	s15, [r7, #4]
 8003138:	793b      	ldrb	r3, [r7, #4]
 800313a:	b2da      	uxtb	r2, r3
 800313c:	697b      	ldr	r3, [r7, #20]
 800313e:	741a      	strb	r2, [r3, #16]
	svpwm->sectorAngle = svpwm->voltageAngle - (svpwm->sector * PI_BY_3F);
 8003140:	697b      	ldr	r3, [r7, #20]
 8003142:	ed93 7a03 	vldr	s14, [r3, #12]
 8003146:	697b      	ldr	r3, [r7, #20]
 8003148:	7c1b      	ldrb	r3, [r3, #16]
 800314a:	ee07 3a90 	vmov	s15, r3
 800314e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003152:	eddf 6a78 	vldr	s13, [pc, #480]	@ 8003334 <FOC_calcSVPWM+0x28c>
 8003156:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800315a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800315e:	697b      	ldr	r3, [r7, #20]
 8003160:	edc3 7a05 	vstr	s15, [r3, #20]
	float sixtyMinusTheta = PI_BY_3F - svpwm->sectorAngle ;
 8003164:	697b      	ldr	r3, [r7, #20]
 8003166:	edd3 7a05 	vldr	s15, [r3, #20]
 800316a:	ed9f 7a72 	vldr	s14, [pc, #456]	@ 8003334 <FOC_calcSVPWM+0x28c>
 800316e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003172:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24

	float sinTheta,sinSixyMinusTheta;

	RunCordic_TwoSines(hcordic,svpwm->sectorAngle,sixtyMinusTheta,&sinTheta,&sinSixyMinusTheta);
 8003176:	697b      	ldr	r3, [r7, #20]
 8003178:	edd3 7a05 	vldr	s15, [r3, #20]
 800317c:	4e6e      	ldr	r6, [pc, #440]	@ (8003338 <FOC_calcSVPWM+0x290>)
 800317e:	f107 031c 	add.w	r3, r7, #28
 8003182:	9307      	str	r3, [sp, #28]
 8003184:	f107 0320 	add.w	r3, r7, #32
 8003188:	9306      	str	r3, [sp, #24]
 800318a:	466d      	mov	r5, sp
 800318c:	f106 0410 	add.w	r4, r6, #16
 8003190:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003192:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003194:	e894 0003 	ldmia.w	r4, {r0, r1}
 8003198:	e885 0003 	stmia.w	r5, {r0, r1}
 800319c:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 80031a0:	edd7 0a09 	vldr	s1, [r7, #36]	@ 0x24
 80031a4:	eeb0 0a67 	vmov.f32	s0, s15
 80031a8:	f7ff fdd8 	bl	8002d5c <RunCordic_TwoSines>
	svpwm->PV1 = (uint16_t)(m * TIMER1_ARR * sinSixyMinusTheta);
 80031ac:	edd7 7a04 	vldr	s15, [r7, #16]
 80031b0:	ed9f 7a62 	vldr	s14, [pc, #392]	@ 800333c <FOC_calcSVPWM+0x294>
 80031b4:	ee27 7a87 	vmul.f32	s14, s15, s14
 80031b8:	edd7 7a07 	vldr	s15, [r7, #28]
 80031bc:	ee67 7a27 	vmul.f32	s15, s14, s15
 80031c0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80031c4:	ee17 3a90 	vmov	r3, s15
 80031c8:	b29a      	uxth	r2, r3
 80031ca:	697b      	ldr	r3, [r7, #20]
 80031cc:	831a      	strh	r2, [r3, #24]
	svpwm->PV2 = (uint16_t)(m * TIMER1_ARR * sinTheta);
 80031ce:	edd7 7a04 	vldr	s15, [r7, #16]
 80031d2:	ed9f 7a5a 	vldr	s14, [pc, #360]	@ 800333c <FOC_calcSVPWM+0x294>
 80031d6:	ee27 7a87 	vmul.f32	s14, s15, s14
 80031da:	edd7 7a08 	vldr	s15, [r7, #32]
 80031de:	ee67 7a27 	vmul.f32	s15, s14, s15
 80031e2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80031e6:	ee17 3a90 	vmov	r3, s15
 80031ea:	b29a      	uxth	r2, r3
 80031ec:	697b      	ldr	r3, [r7, #20]
 80031ee:	835a      	strh	r2, [r3, #26]
	svpwm->null = TIMER1_ARR - svpwm->PV1 - svpwm->PV2;
 80031f0:	697b      	ldr	r3, [r7, #20]
 80031f2:	8b1b      	ldrh	r3, [r3, #24]
 80031f4:	ee07 3a90 	vmov	s15, r3
 80031f8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80031fc:	ed9f 7a4f 	vldr	s14, [pc, #316]	@ 800333c <FOC_calcSVPWM+0x294>
 8003200:	ee37 7a67 	vsub.f32	s14, s14, s15
 8003204:	697b      	ldr	r3, [r7, #20]
 8003206:	8b5b      	ldrh	r3, [r3, #26]
 8003208:	ee07 3a90 	vmov	s15, r3
 800320c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003210:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003214:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003218:	ee17 3a90 	vmov	r3, s15
 800321c:	b29a      	uxth	r2, r3
 800321e:	697b      	ldr	r3, [r7, #20]
 8003220:	839a      	strh	r2, [r3, #28]

	if (svpwm->sector == 0){
 8003222:	697b      	ldr	r3, [r7, #20]
 8003224:	7c1b      	ldrb	r3, [r3, #16]
 8003226:	2b00      	cmp	r3, #0
 8003228:	d116      	bne.n	8003258 <FOC_calcSVPWM+0x1b0>
			// U4 is pv1, U6 is PV2
			//100, then 110
			svpwm->CCR1 = svpwm->null/2;
 800322a:	697b      	ldr	r3, [r7, #20]
 800322c:	8b9b      	ldrh	r3, [r3, #28]
 800322e:	085b      	lsrs	r3, r3, #1
 8003230:	b29a      	uxth	r2, r3
 8003232:	697b      	ldr	r3, [r7, #20]
 8003234:	83da      	strh	r2, [r3, #30]
			svpwm->CCR2 = svpwm->CCR1 + svpwm->PV1;
 8003236:	697b      	ldr	r3, [r7, #20]
 8003238:	8bda      	ldrh	r2, [r3, #30]
 800323a:	697b      	ldr	r3, [r7, #20]
 800323c:	8b1b      	ldrh	r3, [r3, #24]
 800323e:	4413      	add	r3, r2
 8003240:	b29a      	uxth	r2, r3
 8003242:	697b      	ldr	r3, [r7, #20]
 8003244:	841a      	strh	r2, [r3, #32]
			svpwm->CCR3 = svpwm->CCR2 + svpwm->PV2;
 8003246:	697b      	ldr	r3, [r7, #20]
 8003248:	8c1a      	ldrh	r2, [r3, #32]
 800324a:	697b      	ldr	r3, [r7, #20]
 800324c:	8b5b      	ldrh	r3, [r3, #26]
 800324e:	4413      	add	r3, r2
 8003250:	b29a      	uxth	r2, r3
 8003252:	697b      	ldr	r3, [r7, #20]
 8003254:	845a      	strh	r2, [r3, #34]	@ 0x22
			//CCR2 = PV2,CCR3 = PV1
			svpwm->CCR1 = svpwm->null/2;
			svpwm->CCR3 = svpwm->CCR1 + svpwm->PV2;
			svpwm->CCR2 = svpwm->CCR3 + svpwm->PV1;
		}
}
 8003256:	e08d      	b.n	8003374 <FOC_calcSVPWM+0x2cc>
		}else if (svpwm->sector == 1){
 8003258:	697b      	ldr	r3, [r7, #20]
 800325a:	7c1b      	ldrb	r3, [r3, #16]
 800325c:	2b01      	cmp	r3, #1
 800325e:	d116      	bne.n	800328e <FOC_calcSVPWM+0x1e6>
			svpwm->CCR2 = svpwm->null/2;
 8003260:	697b      	ldr	r3, [r7, #20]
 8003262:	8b9b      	ldrh	r3, [r3, #28]
 8003264:	085b      	lsrs	r3, r3, #1
 8003266:	b29a      	uxth	r2, r3
 8003268:	697b      	ldr	r3, [r7, #20]
 800326a:	841a      	strh	r2, [r3, #32]
			svpwm->CCR1 = svpwm->CCR2 + svpwm->PV2;
 800326c:	697b      	ldr	r3, [r7, #20]
 800326e:	8c1a      	ldrh	r2, [r3, #32]
 8003270:	697b      	ldr	r3, [r7, #20]
 8003272:	8b5b      	ldrh	r3, [r3, #26]
 8003274:	4413      	add	r3, r2
 8003276:	b29a      	uxth	r2, r3
 8003278:	697b      	ldr	r3, [r7, #20]
 800327a:	83da      	strh	r2, [r3, #30]
			svpwm->CCR3 = svpwm->CCR1 + svpwm->PV1;
 800327c:	697b      	ldr	r3, [r7, #20]
 800327e:	8bda      	ldrh	r2, [r3, #30]
 8003280:	697b      	ldr	r3, [r7, #20]
 8003282:	8b1b      	ldrh	r3, [r3, #24]
 8003284:	4413      	add	r3, r2
 8003286:	b29a      	uxth	r2, r3
 8003288:	697b      	ldr	r3, [r7, #20]
 800328a:	845a      	strh	r2, [r3, #34]	@ 0x22
}
 800328c:	e072      	b.n	8003374 <FOC_calcSVPWM+0x2cc>
		}else if (svpwm->sector == 2){
 800328e:	697b      	ldr	r3, [r7, #20]
 8003290:	7c1b      	ldrb	r3, [r3, #16]
 8003292:	2b02      	cmp	r3, #2
 8003294:	d116      	bne.n	80032c4 <FOC_calcSVPWM+0x21c>
			svpwm->CCR2 = svpwm->null/2;
 8003296:	697b      	ldr	r3, [r7, #20]
 8003298:	8b9b      	ldrh	r3, [r3, #28]
 800329a:	085b      	lsrs	r3, r3, #1
 800329c:	b29a      	uxth	r2, r3
 800329e:	697b      	ldr	r3, [r7, #20]
 80032a0:	841a      	strh	r2, [r3, #32]
			svpwm->CCR3 = svpwm->CCR2 + svpwm->PV1;
 80032a2:	697b      	ldr	r3, [r7, #20]
 80032a4:	8c1a      	ldrh	r2, [r3, #32]
 80032a6:	697b      	ldr	r3, [r7, #20]
 80032a8:	8b1b      	ldrh	r3, [r3, #24]
 80032aa:	4413      	add	r3, r2
 80032ac:	b29a      	uxth	r2, r3
 80032ae:	697b      	ldr	r3, [r7, #20]
 80032b0:	845a      	strh	r2, [r3, #34]	@ 0x22
			svpwm->CCR1 = svpwm->CCR3 + svpwm->PV2;
 80032b2:	697b      	ldr	r3, [r7, #20]
 80032b4:	8c5a      	ldrh	r2, [r3, #34]	@ 0x22
 80032b6:	697b      	ldr	r3, [r7, #20]
 80032b8:	8b5b      	ldrh	r3, [r3, #26]
 80032ba:	4413      	add	r3, r2
 80032bc:	b29a      	uxth	r2, r3
 80032be:	697b      	ldr	r3, [r7, #20]
 80032c0:	83da      	strh	r2, [r3, #30]
}
 80032c2:	e057      	b.n	8003374 <FOC_calcSVPWM+0x2cc>
		}else if (svpwm->sector == 3){
 80032c4:	697b      	ldr	r3, [r7, #20]
 80032c6:	7c1b      	ldrb	r3, [r3, #16]
 80032c8:	2b03      	cmp	r3, #3
 80032ca:	d116      	bne.n	80032fa <FOC_calcSVPWM+0x252>
			svpwm->CCR3 = svpwm->null/2;
 80032cc:	697b      	ldr	r3, [r7, #20]
 80032ce:	8b9b      	ldrh	r3, [r3, #28]
 80032d0:	085b      	lsrs	r3, r3, #1
 80032d2:	b29a      	uxth	r2, r3
 80032d4:	697b      	ldr	r3, [r7, #20]
 80032d6:	845a      	strh	r2, [r3, #34]	@ 0x22
			svpwm->CCR2 = svpwm->CCR3 + svpwm->PV2;
 80032d8:	697b      	ldr	r3, [r7, #20]
 80032da:	8c5a      	ldrh	r2, [r3, #34]	@ 0x22
 80032dc:	697b      	ldr	r3, [r7, #20]
 80032de:	8b5b      	ldrh	r3, [r3, #26]
 80032e0:	4413      	add	r3, r2
 80032e2:	b29a      	uxth	r2, r3
 80032e4:	697b      	ldr	r3, [r7, #20]
 80032e6:	841a      	strh	r2, [r3, #32]
			svpwm->CCR1 = svpwm->CCR2 + svpwm->PV1;
 80032e8:	697b      	ldr	r3, [r7, #20]
 80032ea:	8c1a      	ldrh	r2, [r3, #32]
 80032ec:	697b      	ldr	r3, [r7, #20]
 80032ee:	8b1b      	ldrh	r3, [r3, #24]
 80032f0:	4413      	add	r3, r2
 80032f2:	b29a      	uxth	r2, r3
 80032f4:	697b      	ldr	r3, [r7, #20]
 80032f6:	83da      	strh	r2, [r3, #30]
}
 80032f8:	e03c      	b.n	8003374 <FOC_calcSVPWM+0x2cc>
		}else if (svpwm->sector == 4){
 80032fa:	697b      	ldr	r3, [r7, #20]
 80032fc:	7c1b      	ldrb	r3, [r3, #16]
 80032fe:	2b04      	cmp	r3, #4
 8003300:	d11e      	bne.n	8003340 <FOC_calcSVPWM+0x298>
			svpwm->CCR3 = svpwm->null/2;
 8003302:	697b      	ldr	r3, [r7, #20]
 8003304:	8b9b      	ldrh	r3, [r3, #28]
 8003306:	085b      	lsrs	r3, r3, #1
 8003308:	b29a      	uxth	r2, r3
 800330a:	697b      	ldr	r3, [r7, #20]
 800330c:	845a      	strh	r2, [r3, #34]	@ 0x22
			svpwm->CCR1 = svpwm->CCR3 + svpwm->PV1;
 800330e:	697b      	ldr	r3, [r7, #20]
 8003310:	8c5a      	ldrh	r2, [r3, #34]	@ 0x22
 8003312:	697b      	ldr	r3, [r7, #20]
 8003314:	8b1b      	ldrh	r3, [r3, #24]
 8003316:	4413      	add	r3, r2
 8003318:	b29a      	uxth	r2, r3
 800331a:	697b      	ldr	r3, [r7, #20]
 800331c:	83da      	strh	r2, [r3, #30]
			svpwm->CCR2 = svpwm->CCR1 + svpwm->PV2;
 800331e:	697b      	ldr	r3, [r7, #20]
 8003320:	8bda      	ldrh	r2, [r3, #30]
 8003322:	697b      	ldr	r3, [r7, #20]
 8003324:	8b5b      	ldrh	r3, [r3, #26]
 8003326:	4413      	add	r3, r2
 8003328:	b29a      	uxth	r2, r3
 800332a:	697b      	ldr	r3, [r7, #20]
 800332c:	841a      	strh	r2, [r3, #32]
}
 800332e:	e021      	b.n	8003374 <FOC_calcSVPWM+0x2cc>
 8003330:	40c90fda 	.word	0x40c90fda
 8003334:	3f860a92 	.word	0x3f860a92
 8003338:	20000378 	.word	0x20000378
 800333c:	449c2000 	.word	0x449c2000
		}else if (svpwm->sector == 5){
 8003340:	697b      	ldr	r3, [r7, #20]
 8003342:	7c1b      	ldrb	r3, [r3, #16]
 8003344:	2b05      	cmp	r3, #5
 8003346:	d115      	bne.n	8003374 <FOC_calcSVPWM+0x2cc>
			svpwm->CCR1 = svpwm->null/2;
 8003348:	697b      	ldr	r3, [r7, #20]
 800334a:	8b9b      	ldrh	r3, [r3, #28]
 800334c:	085b      	lsrs	r3, r3, #1
 800334e:	b29a      	uxth	r2, r3
 8003350:	697b      	ldr	r3, [r7, #20]
 8003352:	83da      	strh	r2, [r3, #30]
			svpwm->CCR3 = svpwm->CCR1 + svpwm->PV2;
 8003354:	697b      	ldr	r3, [r7, #20]
 8003356:	8bda      	ldrh	r2, [r3, #30]
 8003358:	697b      	ldr	r3, [r7, #20]
 800335a:	8b5b      	ldrh	r3, [r3, #26]
 800335c:	4413      	add	r3, r2
 800335e:	b29a      	uxth	r2, r3
 8003360:	697b      	ldr	r3, [r7, #20]
 8003362:	845a      	strh	r2, [r3, #34]	@ 0x22
			svpwm->CCR2 = svpwm->CCR3 + svpwm->PV1;
 8003364:	697b      	ldr	r3, [r7, #20]
 8003366:	8c5a      	ldrh	r2, [r3, #34]	@ 0x22
 8003368:	697b      	ldr	r3, [r7, #20]
 800336a:	8b1b      	ldrh	r3, [r3, #24]
 800336c:	4413      	add	r3, r2
 800336e:	b29a      	uxth	r2, r3
 8003370:	697b      	ldr	r3, [r7, #20]
 8003372:	841a      	strh	r2, [r3, #32]
}
 8003374:	bf00      	nop
 8003376:	372c      	adds	r7, #44	@ 0x2c
 8003378:	46bd      	mov	sp, r7
 800337a:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800337c <FOC_applyPWM>:

void FOC_applyPWM(SVPWM *foc,uint8_t DT_compensation,uint8_t reversePhases){
 800337c:	b580      	push	{r7, lr}
 800337e:	b082      	sub	sp, #8
 8003380:	af00      	add	r7, sp, #0
 8003382:	6078      	str	r0, [r7, #4]
 8003384:	460b      	mov	r3, r1
 8003386:	70fb      	strb	r3, [r7, #3]
 8003388:	4613      	mov	r3, r2
 800338a:	70bb      	strb	r3, [r7, #2]
	htim1.Instance->CCR1 = fast_fminf(foc->CCR1 + DT_compensation,TIMER1_ARR);
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	8bdb      	ldrh	r3, [r3, #30]
 8003390:	461a      	mov	r2, r3
 8003392:	78fb      	ldrb	r3, [r7, #3]
 8003394:	4413      	add	r3, r2
 8003396:	ee07 3a90 	vmov	s15, r3
 800339a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800339e:	eddf 0a3b 	vldr	s1, [pc, #236]	@ 800348c <FOC_applyPWM+0x110>
 80033a2:	eeb0 0a67 	vmov.f32	s0, s15
 80033a6:	f000 fcc7 	bl	8003d38 <fast_fminf>
 80033aa:	eef0 7a40 	vmov.f32	s15, s0
 80033ae:	4b38      	ldr	r3, [pc, #224]	@ (8003490 <FOC_applyPWM+0x114>)
 80033b0:	681b      	ldr	r3, [r3, #0]
 80033b2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80033b6:	ee17 2a90 	vmov	r2, s15
 80033ba:	635a      	str	r2, [r3, #52]	@ 0x34
	if (reversePhases==0){
 80033bc:	78bb      	ldrb	r3, [r7, #2]
 80033be:	2b00      	cmp	r3, #0
 80033c0:	d130      	bne.n	8003424 <FOC_applyPWM+0xa8>
		htim1.Instance->CCR2 = fast_fminf(foc->CCR2 + DT_compensation,TIMER1_ARR);
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	8c1b      	ldrh	r3, [r3, #32]
 80033c6:	461a      	mov	r2, r3
 80033c8:	78fb      	ldrb	r3, [r7, #3]
 80033ca:	4413      	add	r3, r2
 80033cc:	ee07 3a90 	vmov	s15, r3
 80033d0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80033d4:	eddf 0a2d 	vldr	s1, [pc, #180]	@ 800348c <FOC_applyPWM+0x110>
 80033d8:	eeb0 0a67 	vmov.f32	s0, s15
 80033dc:	f000 fcac 	bl	8003d38 <fast_fminf>
 80033e0:	eef0 7a40 	vmov.f32	s15, s0
 80033e4:	4b2a      	ldr	r3, [pc, #168]	@ (8003490 <FOC_applyPWM+0x114>)
 80033e6:	681b      	ldr	r3, [r3, #0]
 80033e8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80033ec:	ee17 2a90 	vmov	r2, s15
 80033f0:	639a      	str	r2, [r3, #56]	@ 0x38
		htim1.Instance->CCR3 = fast_fminf(foc->CCR3 + DT_compensation,TIMER1_ARR);
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	8c5b      	ldrh	r3, [r3, #34]	@ 0x22
 80033f6:	461a      	mov	r2, r3
 80033f8:	78fb      	ldrb	r3, [r7, #3]
 80033fa:	4413      	add	r3, r2
 80033fc:	ee07 3a90 	vmov	s15, r3
 8003400:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003404:	eddf 0a21 	vldr	s1, [pc, #132]	@ 800348c <FOC_applyPWM+0x110>
 8003408:	eeb0 0a67 	vmov.f32	s0, s15
 800340c:	f000 fc94 	bl	8003d38 <fast_fminf>
 8003410:	eef0 7a40 	vmov.f32	s15, s0
 8003414:	4b1e      	ldr	r3, [pc, #120]	@ (8003490 <FOC_applyPWM+0x114>)
 8003416:	681b      	ldr	r3, [r3, #0]
 8003418:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800341c:	ee17 2a90 	vmov	r2, s15
 8003420:	63da      	str	r2, [r3, #60]	@ 0x3c
	}else{
		htim1.Instance->CCR2 = fast_fminf(foc->CCR3 + DT_compensation,TIMER1_ARR);
		htim1.Instance->CCR3 = fast_fminf(foc->CCR2 + DT_compensation,TIMER1_ARR);
	}
}
 8003422:	e02f      	b.n	8003484 <FOC_applyPWM+0x108>
		htim1.Instance->CCR2 = fast_fminf(foc->CCR3 + DT_compensation,TIMER1_ARR);
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	8c5b      	ldrh	r3, [r3, #34]	@ 0x22
 8003428:	461a      	mov	r2, r3
 800342a:	78fb      	ldrb	r3, [r7, #3]
 800342c:	4413      	add	r3, r2
 800342e:	ee07 3a90 	vmov	s15, r3
 8003432:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003436:	eddf 0a15 	vldr	s1, [pc, #84]	@ 800348c <FOC_applyPWM+0x110>
 800343a:	eeb0 0a67 	vmov.f32	s0, s15
 800343e:	f000 fc7b 	bl	8003d38 <fast_fminf>
 8003442:	eef0 7a40 	vmov.f32	s15, s0
 8003446:	4b12      	ldr	r3, [pc, #72]	@ (8003490 <FOC_applyPWM+0x114>)
 8003448:	681b      	ldr	r3, [r3, #0]
 800344a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800344e:	ee17 2a90 	vmov	r2, s15
 8003452:	639a      	str	r2, [r3, #56]	@ 0x38
		htim1.Instance->CCR3 = fast_fminf(foc->CCR2 + DT_compensation,TIMER1_ARR);
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	8c1b      	ldrh	r3, [r3, #32]
 8003458:	461a      	mov	r2, r3
 800345a:	78fb      	ldrb	r3, [r7, #3]
 800345c:	4413      	add	r3, r2
 800345e:	ee07 3a90 	vmov	s15, r3
 8003462:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003466:	eddf 0a09 	vldr	s1, [pc, #36]	@ 800348c <FOC_applyPWM+0x110>
 800346a:	eeb0 0a67 	vmov.f32	s0, s15
 800346e:	f000 fc63 	bl	8003d38 <fast_fminf>
 8003472:	eef0 7a40 	vmov.f32	s15, s0
 8003476:	4b06      	ldr	r3, [pc, #24]	@ (8003490 <FOC_applyPWM+0x114>)
 8003478:	681b      	ldr	r3, [r3, #0]
 800347a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800347e:	ee17 2a90 	vmov	r2, s15
 8003482:	63da      	str	r2, [r3, #60]	@ 0x3c
}
 8003484:	bf00      	nop
 8003486:	3708      	adds	r7, #8
 8003488:	46bd      	mov	sp, r7
 800348a:	bd80      	pop	{r7, pc}
 800348c:	449c2000 	.word	0x449c2000
 8003490:	20000404 	.word	0x20000404

08003494 <ZeroAllCCRs>:

void ZeroAllCCRs(SVPWM *svpwm){
 8003494:	b480      	push	{r7}
 8003496:	b083      	sub	sp, #12
 8003498:	af00      	add	r7, sp, #0
 800349a:	6078      	str	r0, [r7, #4]
	svpwm->CCR1 = 0;
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	2200      	movs	r2, #0
 80034a0:	83da      	strh	r2, [r3, #30]
	svpwm->CCR2 = 0;
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	2200      	movs	r2, #0
 80034a6:	841a      	strh	r2, [r3, #32]
	svpwm->CCR3 = 0;
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	2200      	movs	r2, #0
 80034ac:	845a      	strh	r2, [r3, #34]	@ 0x22
}
 80034ae:	bf00      	nop
 80034b0:	370c      	adds	r7, #12
 80034b2:	46bd      	mov	sp, r7
 80034b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034b8:	4770      	bx	lr

080034ba <HW_statesInit>:



//------------------HW state struct functions-----------------

void HW_statesInit(HW *hw){
 80034ba:	b480      	push	{r7}
 80034bc:	b083      	sub	sp, #12
 80034be:	af00      	add	r7, sp, #0
 80034c0:	6078      	str	r0, [r7, #4]
	hw->tim1PwmHWOn = 0;
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	2200      	movs	r2, #0
 80034c6:	701a      	strb	r2, [r3, #0]
}
 80034c8:	bf00      	nop
 80034ca:	370c      	adds	r7, #12
 80034cc:	46bd      	mov	sp, r7
 80034ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034d2:	4770      	bx	lr

080034d4 <StartAllPWM>:


void StartAllPWM(HW *hw){
 80034d4:	b580      	push	{r7, lr}
 80034d6:	b082      	sub	sp, #8
 80034d8:	af00      	add	r7, sp, #0
 80034da:	6078      	str	r0, [r7, #4]
	if (hw->tim1PwmHWOn == 0){
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	781b      	ldrb	r3, [r3, #0]
 80034e0:	2b00      	cmp	r3, #0
 80034e2:	d126      	bne.n	8003532 <StartAllPWM+0x5e>
	  htim1.Instance->CCR1 = 0;
 80034e4:	4b15      	ldr	r3, [pc, #84]	@ (800353c <StartAllPWM+0x68>)
 80034e6:	681b      	ldr	r3, [r3, #0]
 80034e8:	2200      	movs	r2, #0
 80034ea:	635a      	str	r2, [r3, #52]	@ 0x34
	  htim1.Instance->CCR2 = 0;
 80034ec:	4b13      	ldr	r3, [pc, #76]	@ (800353c <StartAllPWM+0x68>)
 80034ee:	681b      	ldr	r3, [r3, #0]
 80034f0:	2200      	movs	r2, #0
 80034f2:	639a      	str	r2, [r3, #56]	@ 0x38
	  htim1.Instance->CCR3 = 0;
 80034f4:	4b11      	ldr	r3, [pc, #68]	@ (800353c <StartAllPWM+0x68>)
 80034f6:	681b      	ldr	r3, [r3, #0]
 80034f8:	2200      	movs	r2, #0
 80034fa:	63da      	str	r2, [r3, #60]	@ 0x3c
	  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 80034fc:	2100      	movs	r1, #0
 80034fe:	480f      	ldr	r0, [pc, #60]	@ (800353c <StartAllPWM+0x68>)
 8003500:	f004 f9d0 	bl	80078a4 <HAL_TIM_PWM_Start>
	  HAL_TIMEx_PWMN_Start(&htim1, TIM_CHANNEL_1);
 8003504:	2100      	movs	r1, #0
 8003506:	480d      	ldr	r0, [pc, #52]	@ (800353c <StartAllPWM+0x68>)
 8003508:	f005 fb3c 	bl	8008b84 <HAL_TIMEx_PWMN_Start>
	  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2);
 800350c:	2104      	movs	r1, #4
 800350e:	480b      	ldr	r0, [pc, #44]	@ (800353c <StartAllPWM+0x68>)
 8003510:	f004 f9c8 	bl	80078a4 <HAL_TIM_PWM_Start>
	  HAL_TIMEx_PWMN_Start(&htim1, TIM_CHANNEL_2);
 8003514:	2104      	movs	r1, #4
 8003516:	4809      	ldr	r0, [pc, #36]	@ (800353c <StartAllPWM+0x68>)
 8003518:	f005 fb34 	bl	8008b84 <HAL_TIMEx_PWMN_Start>
	  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_3);
 800351c:	2108      	movs	r1, #8
 800351e:	4807      	ldr	r0, [pc, #28]	@ (800353c <StartAllPWM+0x68>)
 8003520:	f004 f9c0 	bl	80078a4 <HAL_TIM_PWM_Start>
	  HAL_TIMEx_PWMN_Start(&htim1, TIM_CHANNEL_3);
 8003524:	2108      	movs	r1, #8
 8003526:	4805      	ldr	r0, [pc, #20]	@ (800353c <StartAllPWM+0x68>)
 8003528:	f005 fb2c 	bl	8008b84 <HAL_TIMEx_PWMN_Start>
	  hw->tim1PwmHWOn = 1;
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	2201      	movs	r2, #1
 8003530:	701a      	strb	r2, [r3, #0]
	}
}
 8003532:	bf00      	nop
 8003534:	3708      	adds	r7, #8
 8003536:	46bd      	mov	sp, r7
 8003538:	bd80      	pop	{r7, pc}
 800353a:	bf00      	nop
 800353c:	20000404 	.word	0x20000404

08003540 <StopAllPWM>:

void StopAllPWM(HW *hw){
 8003540:	b580      	push	{r7, lr}
 8003542:	b082      	sub	sp, #8
 8003544:	af00      	add	r7, sp, #0
 8003546:	6078      	str	r0, [r7, #4]
	if(hw->tim1PwmHWOn == 1){
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	781b      	ldrb	r3, [r3, #0]
 800354c:	2b01      	cmp	r3, #1
 800354e:	d12a      	bne.n	80035a6 <StopAllPWM+0x66>
		htim1.Instance->CCR1 = 0;
 8003550:	4b17      	ldr	r3, [pc, #92]	@ (80035b0 <StopAllPWM+0x70>)
 8003552:	681b      	ldr	r3, [r3, #0]
 8003554:	2200      	movs	r2, #0
 8003556:	635a      	str	r2, [r3, #52]	@ 0x34
		htim1.Instance->CCR2 = 0;
 8003558:	4b15      	ldr	r3, [pc, #84]	@ (80035b0 <StopAllPWM+0x70>)
 800355a:	681b      	ldr	r3, [r3, #0]
 800355c:	2200      	movs	r2, #0
 800355e:	639a      	str	r2, [r3, #56]	@ 0x38
		htim1.Instance->CCR3 = 0;
 8003560:	4b13      	ldr	r3, [pc, #76]	@ (80035b0 <StopAllPWM+0x70>)
 8003562:	681b      	ldr	r3, [r3, #0]
 8003564:	2200      	movs	r2, #0
 8003566:	63da      	str	r2, [r3, #60]	@ 0x3c
		HAL_TIM_PWM_Stop(&htim1, TIM_CHANNEL_1);
 8003568:	2100      	movs	r1, #0
 800356a:	4811      	ldr	r0, [pc, #68]	@ (80035b0 <StopAllPWM+0x70>)
 800356c:	f004 fa9a 	bl	8007aa4 <HAL_TIM_PWM_Stop>
		HAL_TIMEx_PWMN_Stop(&htim1, TIM_CHANNEL_1);
 8003570:	2100      	movs	r1, #0
 8003572:	480f      	ldr	r0, [pc, #60]	@ (80035b0 <StopAllPWM+0x70>)
 8003574:	f005 fbba 	bl	8008cec <HAL_TIMEx_PWMN_Stop>
		HAL_TIM_PWM_Stop(&htim1, TIM_CHANNEL_2);
 8003578:	2104      	movs	r1, #4
 800357a:	480d      	ldr	r0, [pc, #52]	@ (80035b0 <StopAllPWM+0x70>)
 800357c:	f004 fa92 	bl	8007aa4 <HAL_TIM_PWM_Stop>
		HAL_TIMEx_PWMN_Stop(&htim1, TIM_CHANNEL_2);
 8003580:	2104      	movs	r1, #4
 8003582:	480b      	ldr	r0, [pc, #44]	@ (80035b0 <StopAllPWM+0x70>)
 8003584:	f005 fbb2 	bl	8008cec <HAL_TIMEx_PWMN_Stop>
		HAL_TIM_PWM_Stop(&htim1, TIM_CHANNEL_3);
 8003588:	2108      	movs	r1, #8
 800358a:	4809      	ldr	r0, [pc, #36]	@ (80035b0 <StopAllPWM+0x70>)
 800358c:	f004 fa8a 	bl	8007aa4 <HAL_TIM_PWM_Stop>
		HAL_TIMEx_PWMN_Stop(&htim1, TIM_CHANNEL_3);
 8003590:	2108      	movs	r1, #8
 8003592:	4807      	ldr	r0, [pc, #28]	@ (80035b0 <StopAllPWM+0x70>)
 8003594:	f005 fbaa 	bl	8008cec <HAL_TIMEx_PWMN_Stop>
		hw->tim1PwmHWOn = 0;
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	2200      	movs	r2, #0
 800359c:	701a      	strb	r2, [r3, #0]
		htim1.State = HAL_TIM_STATE_READY;
 800359e:	4b04      	ldr	r3, [pc, #16]	@ (80035b0 <StopAllPWM+0x70>)
 80035a0:	2201      	movs	r2, #1
 80035a2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
	}
}
 80035a6:	bf00      	nop
 80035a8:	3708      	adds	r7, #8
 80035aa:	46bd      	mov	sp, r7
 80035ac:	bd80      	pop	{r7, pc}
 80035ae:	bf00      	nop
 80035b0:	20000404 	.word	0x20000404

080035b4 <Zero_PID_Terms>:

void Zero_PID_Terms(PID *pid){
 80035b4:	b480      	push	{r7}
 80035b6:	b083      	sub	sp, #12
 80035b8:	af00      	add	r7, sp, #0
 80035ba:	6078      	str	r0, [r7, #4]
	pid->integralError = 0;
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	f04f 0200 	mov.w	r2, #0
 80035c2:	615a      	str	r2, [r3, #20]
	pid->KiTerm = 0;
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	f04f 0200 	mov.w	r2, #0
 80035ca:	619a      	str	r2, [r3, #24]
	pid->error = 0;
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	f04f 0200 	mov.w	r2, #0
 80035d2:	611a      	str	r2, [r3, #16]
	pid->out = 0;
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	f04f 0200 	mov.w	r2, #0
 80035da:	625a      	str	r2, [r3, #36]	@ 0x24
}
 80035dc:	bf00      	nop
 80035de:	370c      	adds	r7, #12
 80035e0:	46bd      	mov	sp, r7
 80035e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035e6:	4770      	bx	lr

080035e8 <Init_PID_Terms>:
void Init_PID_Terms(PID *pid,float Kp,float Ki,float SO,float FF){
 80035e8:	b480      	push	{r7}
 80035ea:	b087      	sub	sp, #28
 80035ec:	af00      	add	r7, sp, #0
 80035ee:	6178      	str	r0, [r7, #20]
 80035f0:	ed87 0a04 	vstr	s0, [r7, #16]
 80035f4:	edc7 0a03 	vstr	s1, [r7, #12]
 80035f8:	ed87 1a02 	vstr	s2, [r7, #8]
 80035fc:	edc7 1a01 	vstr	s3, [r7, #4]
	pid->Kp = Kp;
 8003600:	697b      	ldr	r3, [r7, #20]
 8003602:	693a      	ldr	r2, [r7, #16]
 8003604:	601a      	str	r2, [r3, #0]
	pid->Ki = Ki;
 8003606:	697b      	ldr	r3, [r7, #20]
 8003608:	68fa      	ldr	r2, [r7, #12]
 800360a:	605a      	str	r2, [r3, #4]
	pid->FF = FF;
 800360c:	697b      	ldr	r3, [r7, #20]
 800360e:	687a      	ldr	r2, [r7, #4]
 8003610:	60da      	str	r2, [r3, #12]
	pid->sO = SO;
 8003612:	697b      	ldr	r3, [r7, #20]
 8003614:	68ba      	ldr	r2, [r7, #8]
 8003616:	609a      	str	r2, [r3, #8]
	pid->KiTerm = 0;
 8003618:	697b      	ldr	r3, [r7, #20]
 800361a:	f04f 0200 	mov.w	r2, #0
 800361e:	619a      	str	r2, [r3, #24]
	pid->out = 0;
 8003620:	697b      	ldr	r3, [r7, #20]
 8003622:	f04f 0200 	mov.w	r2, #0
 8003626:	625a      	str	r2, [r3, #36]	@ 0x24
}
 8003628:	bf00      	nop
 800362a:	371c      	adds	r7, #28
 800362c:	46bd      	mov	sp, r7
 800362e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003632:	4770      	bx	lr

08003634 <ExecVoltagePID>:

float ExecVoltagePID(PID *pid,float target, float actual,float min,float max){
 8003634:	b580      	push	{r7, lr}
 8003636:	b088      	sub	sp, #32
 8003638:	af00      	add	r7, sp, #0
 800363a:	6178      	str	r0, [r7, #20]
 800363c:	ed87 0a04 	vstr	s0, [r7, #16]
 8003640:	edc7 0a03 	vstr	s1, [r7, #12]
 8003644:	ed87 1a02 	vstr	s2, [r7, #8]
 8003648:	edc7 1a01 	vstr	s3, [r7, #4]
	pid->error = target - actual;
 800364c:	ed97 7a04 	vldr	s14, [r7, #16]
 8003650:	edd7 7a03 	vldr	s15, [r7, #12]
 8003654:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003658:	697b      	ldr	r3, [r7, #20]
 800365a:	edc3 7a04 	vstr	s15, [r3, #16]
	pid->integralError = pid->integralError + (pid->error*TIM1_DT);
 800365e:	697b      	ldr	r3, [r7, #20]
 8003660:	ed93 7a05 	vldr	s14, [r3, #20]
 8003664:	697b      	ldr	r3, [r7, #20]
 8003666:	edd3 6a04 	vldr	s13, [r3, #16]
 800366a:	ed9f 6a2a 	vldr	s12, [pc, #168]	@ 8003714 <ExecVoltagePID+0xe0>
 800366e:	eec6 7a86 	vdiv.f32	s15, s13, s12
 8003672:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003676:	697b      	ldr	r3, [r7, #20]
 8003678:	edc3 7a05 	vstr	s15, [r3, #20]
	pid->KpTerm = pid->Kp * pid->error;
 800367c:	697b      	ldr	r3, [r7, #20]
 800367e:	ed93 7a00 	vldr	s14, [r3]
 8003682:	697b      	ldr	r3, [r7, #20]
 8003684:	edd3 7a04 	vldr	s15, [r3, #16]
 8003688:	ee67 7a27 	vmul.f32	s15, s14, s15
 800368c:	697b      	ldr	r3, [r7, #20]
 800368e:	edc3 7a07 	vstr	s15, [r3, #28]
	pid->KiTerm = pid->Ki*pid->integralError;
 8003692:	697b      	ldr	r3, [r7, #20]
 8003694:	ed93 7a01 	vldr	s14, [r3, #4]
 8003698:	697b      	ldr	r3, [r7, #20]
 800369a:	edd3 7a05 	vldr	s15, [r3, #20]
 800369e:	ee67 7a27 	vmul.f32	s15, s14, s15
 80036a2:	697b      	ldr	r3, [r7, #20]
 80036a4:	edc3 7a06 	vstr	s15, [r3, #24]
	pid->FFTerm = pid->FF*target ;
 80036a8:	697b      	ldr	r3, [r7, #20]
 80036aa:	ed93 7a03 	vldr	s14, [r3, #12]
 80036ae:	edd7 7a04 	vldr	s15, [r7, #16]
 80036b2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80036b6:	697b      	ldr	r3, [r7, #20]
 80036b8:	edc3 7a08 	vstr	s15, [r3, #32]
	float out =  pid->KpTerm + pid->KiTerm + pid->FFTerm + pid->sO;
 80036bc:	697b      	ldr	r3, [r7, #20]
 80036be:	ed93 7a07 	vldr	s14, [r3, #28]
 80036c2:	697b      	ldr	r3, [r7, #20]
 80036c4:	edd3 7a06 	vldr	s15, [r3, #24]
 80036c8:	ee37 7a27 	vadd.f32	s14, s14, s15
 80036cc:	697b      	ldr	r3, [r7, #20]
 80036ce:	edd3 7a08 	vldr	s15, [r3, #32]
 80036d2:	ee37 7a27 	vadd.f32	s14, s14, s15
 80036d6:	697b      	ldr	r3, [r7, #20]
 80036d8:	edd3 7a02 	vldr	s15, [r3, #8]
 80036dc:	ee77 7a27 	vadd.f32	s15, s14, s15
 80036e0:	edc7 7a07 	vstr	s15, [r7, #28]
	out = fast_fmaxf(fast_fminf(out,max),min);
 80036e4:	edd7 0a01 	vldr	s1, [r7, #4]
 80036e8:	ed97 0a07 	vldr	s0, [r7, #28]
 80036ec:	f000 fb24 	bl	8003d38 <fast_fminf>
 80036f0:	eef0 7a40 	vmov.f32	s15, s0
 80036f4:	edd7 0a02 	vldr	s1, [r7, #8]
 80036f8:	eeb0 0a67 	vmov.f32	s0, s15
 80036fc:	f000 fb00 	bl	8003d00 <fast_fmaxf>
 8003700:	ed87 0a07 	vstr	s0, [r7, #28]
	return out;
 8003704:	69fb      	ldr	r3, [r7, #28]
 8003706:	ee07 3a90 	vmov	s15, r3
}
 800370a:	eeb0 0a67 	vmov.f32	s0, s15
 800370e:	3720      	adds	r7, #32
 8003710:	46bd      	mov	sp, r7
 8003712:	bd80      	pop	{r7, pc}
 8003714:	461c4000 	.word	0x461c4000

08003718 <ExecPID>:


float ExecPID(PID *pid,float target, float actual,float min,float max){
 8003718:	b580      	push	{r7, lr}
 800371a:	b088      	sub	sp, #32
 800371c:	af00      	add	r7, sp, #0
 800371e:	6178      	str	r0, [r7, #20]
 8003720:	ed87 0a04 	vstr	s0, [r7, #16]
 8003724:	edc7 0a03 	vstr	s1, [r7, #12]
 8003728:	ed87 1a02 	vstr	s2, [r7, #8]
 800372c:	edc7 1a01 	vstr	s3, [r7, #4]
	pid->error = target - actual;
 8003730:	ed97 7a04 	vldr	s14, [r7, #16]
 8003734:	edd7 7a03 	vldr	s15, [r7, #12]
 8003738:	ee77 7a67 	vsub.f32	s15, s14, s15
 800373c:	697b      	ldr	r3, [r7, #20]
 800373e:	edc3 7a04 	vstr	s15, [r3, #16]
	pid->integralError = pid->integralError + (pid->error*TIM1_DT);
 8003742:	697b      	ldr	r3, [r7, #20]
 8003744:	ed93 7a05 	vldr	s14, [r3, #20]
 8003748:	697b      	ldr	r3, [r7, #20]
 800374a:	edd3 6a04 	vldr	s13, [r3, #16]
 800374e:	ed9f 6a2a 	vldr	s12, [pc, #168]	@ 80037f8 <ExecPID+0xe0>
 8003752:	eec6 7a86 	vdiv.f32	s15, s13, s12
 8003756:	ee77 7a27 	vadd.f32	s15, s14, s15
 800375a:	697b      	ldr	r3, [r7, #20]
 800375c:	edc3 7a05 	vstr	s15, [r3, #20]
	pid->KpTerm = pid->Kp * pid->error;
 8003760:	697b      	ldr	r3, [r7, #20]
 8003762:	ed93 7a00 	vldr	s14, [r3]
 8003766:	697b      	ldr	r3, [r7, #20]
 8003768:	edd3 7a04 	vldr	s15, [r3, #16]
 800376c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003770:	697b      	ldr	r3, [r7, #20]
 8003772:	edc3 7a07 	vstr	s15, [r3, #28]
	pid->KiTerm = pid->Ki*pid->integralError;
 8003776:	697b      	ldr	r3, [r7, #20]
 8003778:	ed93 7a01 	vldr	s14, [r3, #4]
 800377c:	697b      	ldr	r3, [r7, #20]
 800377e:	edd3 7a05 	vldr	s15, [r3, #20]
 8003782:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003786:	697b      	ldr	r3, [r7, #20]
 8003788:	edc3 7a06 	vstr	s15, [r3, #24]
	pid->FFTerm = pid->FF*target ;
 800378c:	697b      	ldr	r3, [r7, #20]
 800378e:	ed93 7a03 	vldr	s14, [r3, #12]
 8003792:	edd7 7a04 	vldr	s15, [r7, #16]
 8003796:	ee67 7a27 	vmul.f32	s15, s14, s15
 800379a:	697b      	ldr	r3, [r7, #20]
 800379c:	edc3 7a08 	vstr	s15, [r3, #32]
	float out =  pid->KpTerm + pid->KiTerm + pid->FFTerm + pid->sO;
 80037a0:	697b      	ldr	r3, [r7, #20]
 80037a2:	ed93 7a07 	vldr	s14, [r3, #28]
 80037a6:	697b      	ldr	r3, [r7, #20]
 80037a8:	edd3 7a06 	vldr	s15, [r3, #24]
 80037ac:	ee37 7a27 	vadd.f32	s14, s14, s15
 80037b0:	697b      	ldr	r3, [r7, #20]
 80037b2:	edd3 7a08 	vldr	s15, [r3, #32]
 80037b6:	ee37 7a27 	vadd.f32	s14, s14, s15
 80037ba:	697b      	ldr	r3, [r7, #20]
 80037bc:	edd3 7a02 	vldr	s15, [r3, #8]
 80037c0:	ee77 7a27 	vadd.f32	s15, s14, s15
 80037c4:	edc7 7a07 	vstr	s15, [r7, #28]
	out = fast_fmaxf(fast_fminf(out,max),min);
 80037c8:	edd7 0a01 	vldr	s1, [r7, #4]
 80037cc:	ed97 0a07 	vldr	s0, [r7, #28]
 80037d0:	f000 fab2 	bl	8003d38 <fast_fminf>
 80037d4:	eef0 7a40 	vmov.f32	s15, s0
 80037d8:	edd7 0a02 	vldr	s1, [r7, #8]
 80037dc:	eeb0 0a67 	vmov.f32	s0, s15
 80037e0:	f000 fa8e 	bl	8003d00 <fast_fmaxf>
 80037e4:	ed87 0a07 	vstr	s0, [r7, #28]
	return out;
 80037e8:	69fb      	ldr	r3, [r7, #28]
 80037ea:	ee07 3a90 	vmov	s15, r3
}
 80037ee:	eeb0 0a67 	vmov.f32	s0, s15
 80037f2:	3720      	adds	r7, #32
 80037f4:	46bd      	mov	sp, r7
 80037f6:	bd80      	pop	{r7, pc}
 80037f8:	461c4000 	.word	0x461c4000

080037fc <hsLogInit>:
union {
  float float_variable;
  uint8_t byte_array[4];
} uHs;

void hsLogInit(HSLogger *hsLog){
 80037fc:	b480      	push	{r7}
 80037fe:	b083      	sub	sp, #12
 8003800:	af00      	add	r7, sp, #0
 8003802:	6078      	str	r0, [r7, #4]
	hsLog->enable = 0;
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	2200      	movs	r2, #0
 8003808:	701a      	strb	r2, [r3, #0]
	hsLog->bufferIndex = 0;
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	2200      	movs	r2, #0
 800380e:	f8a3 2fae 	strh.w	r2, [r3, #4014]	@ 0xfae
	hsLog->runningBuffer = BUFFER1;
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	2201      	movs	r2, #1
 8003816:	735a      	strb	r2, [r3, #13]
	hsLog->sendOut = NOBUFFER;
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	2200      	movs	r2, #0
 800381c:	f883 2fb0 	strb.w	r2, [r3, #4016]	@ 0xfb0
}
 8003820:	bf00      	nop
 8003822:	370c      	adds	r7, #12
 8003824:	46bd      	mov	sp, r7
 8003826:	f85d 7b04 	ldr.w	r7, [sp], #4
 800382a:	4770      	bx	lr

0800382c <hsLogStart>:

void hsLogStart(HSLogger *hsLog,PositionSensor *ps){
 800382c:	b480      	push	{r7}
 800382e:	b083      	sub	sp, #12
 8003830:	af00      	add	r7, sp, #0
 8003832:	6078      	str	r0, [r7, #4]
 8003834:	6039      	str	r1, [r7, #0]
	hsLog->enable = 1;
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	2201      	movs	r2, #1
 800383a:	701a      	strb	r2, [r3, #0]
	hsLog->firstTime = 1;
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	2201      	movs	r2, #1
 8003840:	705a      	strb	r2, [r3, #1]
	hsLog->bufferIndex = 0;
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	2200      	movs	r2, #0
 8003846:	f8a3 2fae 	strh.w	r2, [r3, #4014]	@ 0xfae
	hsLog->runningBuffer = BUFFER1;
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	2201      	movs	r2, #1
 800384e:	735a      	strb	r2, [r3, #13]
	hsLog->sendOut = NOBUFFER;
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	2200      	movs	r2, #0
 8003854:	f883 2fb0 	strb.w	r2, [r3, #4016]	@ 0xfb0
	hsLog->start_multiTurns = ps->multiturn_mech_radians;
 8003858:	683b      	ldr	r3, [r7, #0]
 800385a:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	605a      	str	r2, [r3, #4]
	hsLog->stopAndFlushBuffer = 0;
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	2200      	movs	r2, #0
 8003864:	731a      	strb	r2, [r3, #12]
}
 8003866:	bf00      	nop
 8003868:	370c      	adds	r7, #12
 800386a:	46bd      	mov	sp, r7
 800386c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003870:	4770      	bx	lr

08003872 <hsLogReset>:

void hsLogReset(HSLogger *hsLog){
 8003872:	b480      	push	{r7}
 8003874:	b083      	sub	sp, #12
 8003876:	af00      	add	r7, sp, #0
 8003878:	6078      	str	r0, [r7, #4]
	hsLog->enable = 0;
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	2200      	movs	r2, #0
 800387e:	701a      	strb	r2, [r3, #0]
	hsLog->firstTime = 0;
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	2200      	movs	r2, #0
 8003884:	705a      	strb	r2, [r3, #1]
	hsLog->bufferIndex = 0;
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	2200      	movs	r2, #0
 800388a:	f8a3 2fae 	strh.w	r2, [r3, #4014]	@ 0xfae
	hsLog->runningBuffer = NOBUFFER;
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	2200      	movs	r2, #0
 8003892:	735a      	strb	r2, [r3, #13]
	hsLog->start_multiTurns  = 0;
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	f04f 0200 	mov.w	r2, #0
 800389a:	605a      	str	r2, [r3, #4]
	hsLog->end_multiTurns = 0;
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	f04f 0200 	mov.w	r2, #0
 80038a2:	609a      	str	r2, [r3, #8]
}
 80038a4:	bf00      	nop
 80038a6:	370c      	adds	r7, #12
 80038a8:	46bd      	mov	sp, r7
 80038aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038ae:	4770      	bx	lr

080038b0 <switchBuffers>:


void switchBuffers(HSLogger *hL){
 80038b0:	b480      	push	{r7}
 80038b2:	b083      	sub	sp, #12
 80038b4:	af00      	add	r7, sp, #0
 80038b6:	6078      	str	r0, [r7, #4]
	if (hL->runningBuffer == BUFFER1){
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	7b5b      	ldrb	r3, [r3, #13]
 80038bc:	2b01      	cmp	r3, #1
 80038be:	d111      	bne.n	80038e4 <switchBuffers+0x34>
		hL->sendOutBufferSize = hL->bufferIndex;
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	f8b3 2fae 	ldrh.w	r2, [r3, #4014]	@ 0xfae
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	f8a3 2fb2 	strh.w	r2, [r3, #4018]	@ 0xfb2
		hL->sendOut = BUFFER1;
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	2201      	movs	r2, #1
 80038d0:	f883 2fb0 	strb.w	r2, [r3, #4016]	@ 0xfb0
		hL->bufferIndex  = 0;
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	2200      	movs	r2, #0
 80038d8:	f8a3 2fae 	strh.w	r2, [r3, #4014]	@ 0xfae
		hL->runningBuffer = BUFFER2;
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	2202      	movs	r2, #2
 80038e0:	735a      	strb	r2, [r3, #13]
		hL->sendOutBufferSize = hL->bufferIndex;
		hL->sendOut = BUFFER2;
		hL->bufferIndex  = 0;
		hL->runningBuffer = BUFFER1;
	}
}
 80038e2:	e014      	b.n	800390e <switchBuffers+0x5e>
	}else if (hL->runningBuffer == BUFFER2){
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	7b5b      	ldrb	r3, [r3, #13]
 80038e8:	2b02      	cmp	r3, #2
 80038ea:	d110      	bne.n	800390e <switchBuffers+0x5e>
		hL->sendOutBufferSize = hL->bufferIndex;
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	f8b3 2fae 	ldrh.w	r2, [r3, #4014]	@ 0xfae
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	f8a3 2fb2 	strh.w	r2, [r3, #4018]	@ 0xfb2
		hL->sendOut = BUFFER2;
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	2202      	movs	r2, #2
 80038fc:	f883 2fb0 	strb.w	r2, [r3, #4016]	@ 0xfb0
		hL->bufferIndex  = 0;
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	2200      	movs	r2, #0
 8003904:	f8a3 2fae 	strh.w	r2, [r3, #4014]	@ 0xfae
		hL->runningBuffer = BUFFER1;
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	2201      	movs	r2, #1
 800390c:	735a      	strb	r2, [r3, #13]
}
 800390e:	bf00      	nop
 8003910:	370c      	adds	r7, #12
 8003912:	46bd      	mov	sp, r7
 8003914:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003918:	4770      	bx	lr

0800391a <add8Bit>:

uint16_t add8Bit(HSLogger *hL,uint8_t var,uint16_t index){
 800391a:	b480      	push	{r7}
 800391c:	b083      	sub	sp, #12
 800391e:	af00      	add	r7, sp, #0
 8003920:	6078      	str	r0, [r7, #4]
 8003922:	460b      	mov	r3, r1
 8003924:	70fb      	strb	r3, [r7, #3]
 8003926:	4613      	mov	r3, r2
 8003928:	803b      	strh	r3, [r7, #0]
	if (hL->runningBuffer == BUFFER1){
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	7b5b      	ldrb	r3, [r3, #13]
 800392e:	2b01      	cmp	r3, #1
 8003930:	d105      	bne.n	800393e <add8Bit+0x24>
		hL->HSbuffer1[index] = var & 0xFF;
 8003932:	883b      	ldrh	r3, [r7, #0]
 8003934:	687a      	ldr	r2, [r7, #4]
 8003936:	4413      	add	r3, r2
 8003938:	78fa      	ldrb	r2, [r7, #3]
 800393a:	739a      	strb	r2, [r3, #14]
 800393c:	e005      	b.n	800394a <add8Bit+0x30>
	}else{
		hL->HSbuffer2[index] = var & 0xFF;
 800393e:	883b      	ldrh	r3, [r7, #0]
 8003940:	687a      	ldr	r2, [r7, #4]
 8003942:	4413      	add	r3, r2
 8003944:	78fa      	ldrb	r2, [r7, #3]
 8003946:	f883 27de 	strb.w	r2, [r3, #2014]	@ 0x7de
	}
	return index+1;
 800394a:	883b      	ldrh	r3, [r7, #0]
 800394c:	3301      	adds	r3, #1
 800394e:	b29b      	uxth	r3, r3
}
 8003950:	4618      	mov	r0, r3
 8003952:	370c      	adds	r7, #12
 8003954:	46bd      	mov	sp, r7
 8003956:	f85d 7b04 	ldr.w	r7, [sp], #4
 800395a:	4770      	bx	lr

0800395c <add16Bit>:

uint16_t add16Bit(HSLogger *hL,uint16_t var,uint16_t index){
 800395c:	b480      	push	{r7}
 800395e:	b083      	sub	sp, #12
 8003960:	af00      	add	r7, sp, #0
 8003962:	6078      	str	r0, [r7, #4]
 8003964:	460b      	mov	r3, r1
 8003966:	807b      	strh	r3, [r7, #2]
 8003968:	4613      	mov	r3, r2
 800396a:	803b      	strh	r3, [r7, #0]
	if (hL->runningBuffer == BUFFER1){
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	7b5b      	ldrb	r3, [r3, #13]
 8003970:	2b01      	cmp	r3, #1
 8003972:	d111      	bne.n	8003998 <add16Bit+0x3c>
		hL->HSbuffer1[index] = var >> 8 & 0xFF;
 8003974:	887b      	ldrh	r3, [r7, #2]
 8003976:	0a1b      	lsrs	r3, r3, #8
 8003978:	b29a      	uxth	r2, r3
 800397a:	883b      	ldrh	r3, [r7, #0]
 800397c:	b2d1      	uxtb	r1, r2
 800397e:	687a      	ldr	r2, [r7, #4]
 8003980:	4413      	add	r3, r2
 8003982:	460a      	mov	r2, r1
 8003984:	739a      	strb	r2, [r3, #14]
		hL->HSbuffer1[index+1] = var & 0xFF;
 8003986:	883b      	ldrh	r3, [r7, #0]
 8003988:	3301      	adds	r3, #1
 800398a:	887a      	ldrh	r2, [r7, #2]
 800398c:	b2d1      	uxtb	r1, r2
 800398e:	687a      	ldr	r2, [r7, #4]
 8003990:	4413      	add	r3, r2
 8003992:	460a      	mov	r2, r1
 8003994:	739a      	strb	r2, [r3, #14]
 8003996:	e012      	b.n	80039be <add16Bit+0x62>
	}else{
		hL->HSbuffer2[index] = var >> 8 & 0xFF;
 8003998:	887b      	ldrh	r3, [r7, #2]
 800399a:	0a1b      	lsrs	r3, r3, #8
 800399c:	b29a      	uxth	r2, r3
 800399e:	883b      	ldrh	r3, [r7, #0]
 80039a0:	b2d1      	uxtb	r1, r2
 80039a2:	687a      	ldr	r2, [r7, #4]
 80039a4:	4413      	add	r3, r2
 80039a6:	460a      	mov	r2, r1
 80039a8:	f883 27de 	strb.w	r2, [r3, #2014]	@ 0x7de
		hL->HSbuffer2[index+1] = var & 0xFF;
 80039ac:	883b      	ldrh	r3, [r7, #0]
 80039ae:	3301      	adds	r3, #1
 80039b0:	887a      	ldrh	r2, [r7, #2]
 80039b2:	b2d1      	uxtb	r1, r2
 80039b4:	687a      	ldr	r2, [r7, #4]
 80039b6:	4413      	add	r3, r2
 80039b8:	460a      	mov	r2, r1
 80039ba:	f883 27de 	strb.w	r2, [r3, #2014]	@ 0x7de
	}
	return index+2;
 80039be:	883b      	ldrh	r3, [r7, #0]
 80039c0:	3302      	adds	r3, #2
 80039c2:	b29b      	uxth	r3, r3
}
 80039c4:	4618      	mov	r0, r3
 80039c6:	370c      	adds	r7, #12
 80039c8:	46bd      	mov	sp, r7
 80039ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039ce:	4770      	bx	lr

080039d0 <addFloat>:

uint16_t addFloat(HSLogger *hL,float var,uint16_t index){
 80039d0:	b480      	push	{r7}
 80039d2:	b085      	sub	sp, #20
 80039d4:	af00      	add	r7, sp, #0
 80039d6:	60f8      	str	r0, [r7, #12]
 80039d8:	ed87 0a02 	vstr	s0, [r7, #8]
 80039dc:	460b      	mov	r3, r1
 80039de:	80fb      	strh	r3, [r7, #6]
	uHs.float_variable = var;
 80039e0:	4a29      	ldr	r2, [pc, #164]	@ (8003a88 <addFloat+0xb8>)
 80039e2:	68bb      	ldr	r3, [r7, #8]
 80039e4:	6013      	str	r3, [r2, #0]
	if (hL->runningBuffer == BUFFER1){
 80039e6:	68fb      	ldr	r3, [r7, #12]
 80039e8:	7b5b      	ldrb	r3, [r3, #13]
 80039ea:	2b01      	cmp	r3, #1
 80039ec:	d11f      	bne.n	8003a2e <addFloat+0x5e>
		hL->HSbuffer1[index]= (uint8_t)(uHs.byte_array[3]);
 80039ee:	88fb      	ldrh	r3, [r7, #6]
 80039f0:	4a25      	ldr	r2, [pc, #148]	@ (8003a88 <addFloat+0xb8>)
 80039f2:	78d1      	ldrb	r1, [r2, #3]
 80039f4:	68fa      	ldr	r2, [r7, #12]
 80039f6:	4413      	add	r3, r2
 80039f8:	460a      	mov	r2, r1
 80039fa:	739a      	strb	r2, [r3, #14]
		hL->HSbuffer1[index+1]= (uint8_t)(uHs.byte_array[2]);
 80039fc:	88fb      	ldrh	r3, [r7, #6]
 80039fe:	3301      	adds	r3, #1
 8003a00:	4a21      	ldr	r2, [pc, #132]	@ (8003a88 <addFloat+0xb8>)
 8003a02:	7891      	ldrb	r1, [r2, #2]
 8003a04:	68fa      	ldr	r2, [r7, #12]
 8003a06:	4413      	add	r3, r2
 8003a08:	460a      	mov	r2, r1
 8003a0a:	739a      	strb	r2, [r3, #14]
		hL->HSbuffer1[index+2]= (uint8_t)(uHs.byte_array[1]);
 8003a0c:	88fb      	ldrh	r3, [r7, #6]
 8003a0e:	3302      	adds	r3, #2
 8003a10:	4a1d      	ldr	r2, [pc, #116]	@ (8003a88 <addFloat+0xb8>)
 8003a12:	7851      	ldrb	r1, [r2, #1]
 8003a14:	68fa      	ldr	r2, [r7, #12]
 8003a16:	4413      	add	r3, r2
 8003a18:	460a      	mov	r2, r1
 8003a1a:	739a      	strb	r2, [r3, #14]
		hL->HSbuffer1[index+3]= (uint8_t)(uHs.byte_array[0]);
 8003a1c:	88fb      	ldrh	r3, [r7, #6]
 8003a1e:	3303      	adds	r3, #3
 8003a20:	4a19      	ldr	r2, [pc, #100]	@ (8003a88 <addFloat+0xb8>)
 8003a22:	7811      	ldrb	r1, [r2, #0]
 8003a24:	68fa      	ldr	r2, [r7, #12]
 8003a26:	4413      	add	r3, r2
 8003a28:	460a      	mov	r2, r1
 8003a2a:	739a      	strb	r2, [r3, #14]
 8003a2c:	e022      	b.n	8003a74 <addFloat+0xa4>
	}else{
		hL->HSbuffer2[index]= (uint8_t)(uHs.byte_array[3]);
 8003a2e:	88fb      	ldrh	r3, [r7, #6]
 8003a30:	4a15      	ldr	r2, [pc, #84]	@ (8003a88 <addFloat+0xb8>)
 8003a32:	78d1      	ldrb	r1, [r2, #3]
 8003a34:	68fa      	ldr	r2, [r7, #12]
 8003a36:	4413      	add	r3, r2
 8003a38:	460a      	mov	r2, r1
 8003a3a:	f883 27de 	strb.w	r2, [r3, #2014]	@ 0x7de
		hL->HSbuffer2[index+1]= (uint8_t)(uHs.byte_array[2]);
 8003a3e:	88fb      	ldrh	r3, [r7, #6]
 8003a40:	3301      	adds	r3, #1
 8003a42:	4a11      	ldr	r2, [pc, #68]	@ (8003a88 <addFloat+0xb8>)
 8003a44:	7891      	ldrb	r1, [r2, #2]
 8003a46:	68fa      	ldr	r2, [r7, #12]
 8003a48:	4413      	add	r3, r2
 8003a4a:	460a      	mov	r2, r1
 8003a4c:	f883 27de 	strb.w	r2, [r3, #2014]	@ 0x7de
		hL->HSbuffer2[index+2]= (uint8_t)(uHs.byte_array[1]);
 8003a50:	88fb      	ldrh	r3, [r7, #6]
 8003a52:	3302      	adds	r3, #2
 8003a54:	4a0c      	ldr	r2, [pc, #48]	@ (8003a88 <addFloat+0xb8>)
 8003a56:	7851      	ldrb	r1, [r2, #1]
 8003a58:	68fa      	ldr	r2, [r7, #12]
 8003a5a:	4413      	add	r3, r2
 8003a5c:	460a      	mov	r2, r1
 8003a5e:	f883 27de 	strb.w	r2, [r3, #2014]	@ 0x7de
		hL->HSbuffer2[index+3]= (uint8_t)(uHs.byte_array[0]);
 8003a62:	88fb      	ldrh	r3, [r7, #6]
 8003a64:	3303      	adds	r3, #3
 8003a66:	4a08      	ldr	r2, [pc, #32]	@ (8003a88 <addFloat+0xb8>)
 8003a68:	7811      	ldrb	r1, [r2, #0]
 8003a6a:	68fa      	ldr	r2, [r7, #12]
 8003a6c:	4413      	add	r3, r2
 8003a6e:	460a      	mov	r2, r1
 8003a70:	f883 27de 	strb.w	r2, [r3, #2014]	@ 0x7de
	}
	return index+4;
 8003a74:	88fb      	ldrh	r3, [r7, #6]
 8003a76:	3304      	adds	r3, #4
 8003a78:	b29b      	uxth	r3, r3
}
 8003a7a:	4618      	mov	r0, r3
 8003a7c:	3714      	adds	r7, #20
 8003a7e:	46bd      	mov	sp, r7
 8003a80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a84:	4770      	bx	lr
 8003a86:	bf00      	nop
 8003a88:	200018d0 	.word	0x200018d0

08003a8c <add32Bit>:

uint16_t add32Bit(HSLogger *hL,uint32_t var,uint16_t index){
 8003a8c:	b480      	push	{r7}
 8003a8e:	b085      	sub	sp, #20
 8003a90:	af00      	add	r7, sp, #0
 8003a92:	60f8      	str	r0, [r7, #12]
 8003a94:	60b9      	str	r1, [r7, #8]
 8003a96:	4613      	mov	r3, r2
 8003a98:	80fb      	strh	r3, [r7, #6]
	if (hL->runningBuffer == BUFFER1){
 8003a9a:	68fb      	ldr	r3, [r7, #12]
 8003a9c:	7b5b      	ldrb	r3, [r3, #13]
 8003a9e:	2b01      	cmp	r3, #1
 8003aa0:	d122      	bne.n	8003ae8 <add32Bit+0x5c>
		hL->HSbuffer1[index]= (uint8_t)(var >> 24 & 0xFF);
 8003aa2:	68bb      	ldr	r3, [r7, #8]
 8003aa4:	0e1a      	lsrs	r2, r3, #24
 8003aa6:	88fb      	ldrh	r3, [r7, #6]
 8003aa8:	b2d1      	uxtb	r1, r2
 8003aaa:	68fa      	ldr	r2, [r7, #12]
 8003aac:	4413      	add	r3, r2
 8003aae:	460a      	mov	r2, r1
 8003ab0:	739a      	strb	r2, [r3, #14]
		hL->HSbuffer1[index+1]= (uint8_t)(var >> 16 & 0xFF);
 8003ab2:	68bb      	ldr	r3, [r7, #8]
 8003ab4:	0c1a      	lsrs	r2, r3, #16
 8003ab6:	88fb      	ldrh	r3, [r7, #6]
 8003ab8:	3301      	adds	r3, #1
 8003aba:	b2d1      	uxtb	r1, r2
 8003abc:	68fa      	ldr	r2, [r7, #12]
 8003abe:	4413      	add	r3, r2
 8003ac0:	460a      	mov	r2, r1
 8003ac2:	739a      	strb	r2, [r3, #14]
		hL->HSbuffer1[index+2]= (uint8_t)(var >> 8 & 0xFF);
 8003ac4:	68bb      	ldr	r3, [r7, #8]
 8003ac6:	0a1a      	lsrs	r2, r3, #8
 8003ac8:	88fb      	ldrh	r3, [r7, #6]
 8003aca:	3302      	adds	r3, #2
 8003acc:	b2d1      	uxtb	r1, r2
 8003ace:	68fa      	ldr	r2, [r7, #12]
 8003ad0:	4413      	add	r3, r2
 8003ad2:	460a      	mov	r2, r1
 8003ad4:	739a      	strb	r2, [r3, #14]
		hL->HSbuffer1[index+3]= (uint8_t)(var & 0xFF);
 8003ad6:	88fb      	ldrh	r3, [r7, #6]
 8003ad8:	3303      	adds	r3, #3
 8003ada:	68ba      	ldr	r2, [r7, #8]
 8003adc:	b2d1      	uxtb	r1, r2
 8003ade:	68fa      	ldr	r2, [r7, #12]
 8003ae0:	4413      	add	r3, r2
 8003ae2:	460a      	mov	r2, r1
 8003ae4:	739a      	strb	r2, [r3, #14]
 8003ae6:	e025      	b.n	8003b34 <add32Bit+0xa8>
	}else{
		hL->HSbuffer2[index]= (uint8_t)(var >> 24 & 0xFF);
 8003ae8:	68bb      	ldr	r3, [r7, #8]
 8003aea:	0e1a      	lsrs	r2, r3, #24
 8003aec:	88fb      	ldrh	r3, [r7, #6]
 8003aee:	b2d1      	uxtb	r1, r2
 8003af0:	68fa      	ldr	r2, [r7, #12]
 8003af2:	4413      	add	r3, r2
 8003af4:	460a      	mov	r2, r1
 8003af6:	f883 27de 	strb.w	r2, [r3, #2014]	@ 0x7de
		hL->HSbuffer2[index+1]= (uint8_t)(var >> 16 & 0xFF);
 8003afa:	68bb      	ldr	r3, [r7, #8]
 8003afc:	0c1a      	lsrs	r2, r3, #16
 8003afe:	88fb      	ldrh	r3, [r7, #6]
 8003b00:	3301      	adds	r3, #1
 8003b02:	b2d1      	uxtb	r1, r2
 8003b04:	68fa      	ldr	r2, [r7, #12]
 8003b06:	4413      	add	r3, r2
 8003b08:	460a      	mov	r2, r1
 8003b0a:	f883 27de 	strb.w	r2, [r3, #2014]	@ 0x7de
		hL->HSbuffer2[index+2]= (uint8_t)(var >> 8 & 0xFF);
 8003b0e:	68bb      	ldr	r3, [r7, #8]
 8003b10:	0a1a      	lsrs	r2, r3, #8
 8003b12:	88fb      	ldrh	r3, [r7, #6]
 8003b14:	3302      	adds	r3, #2
 8003b16:	b2d1      	uxtb	r1, r2
 8003b18:	68fa      	ldr	r2, [r7, #12]
 8003b1a:	4413      	add	r3, r2
 8003b1c:	460a      	mov	r2, r1
 8003b1e:	f883 27de 	strb.w	r2, [r3, #2014]	@ 0x7de
		hL->HSbuffer2[index+3]= (uint8_t)(var & 0xFF);
 8003b22:	88fb      	ldrh	r3, [r7, #6]
 8003b24:	3303      	adds	r3, #3
 8003b26:	68ba      	ldr	r2, [r7, #8]
 8003b28:	b2d1      	uxtb	r1, r2
 8003b2a:	68fa      	ldr	r2, [r7, #12]
 8003b2c:	4413      	add	r3, r2
 8003b2e:	460a      	mov	r2, r1
 8003b30:	f883 27de 	strb.w	r2, [r3, #2014]	@ 0x7de
	}
	return index+4;
 8003b34:	88fb      	ldrh	r3, [r7, #6]
 8003b36:	3304      	adds	r3, #4
 8003b38:	b29b      	uxth	r3, r3
}
 8003b3a:	4618      	mov	r0, r3
 8003b3c:	3714      	adds	r7, #20
 8003b3e:	46bd      	mov	sp, r7
 8003b40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b44:	4770      	bx	lr
	...

08003b48 <addData>:

extern float OL_elecRadians;
uint16_t addData(HSLogger *hL, SVPWM *svpwm, PositionSensor *ps, FOC *foc,friction *fr , cogging *cg){
 8003b48:	b580      	push	{r7, lr}
 8003b4a:	b086      	sub	sp, #24
 8003b4c:	af00      	add	r7, sp, #0
 8003b4e:	60f8      	str	r0, [r7, #12]
 8003b50:	60b9      	str	r1, [r7, #8]
 8003b52:	607a      	str	r2, [r7, #4]
 8003b54:	603b      	str	r3, [r7, #0]
	uint16_t idx = hL->bufferIndex;
 8003b56:	68fb      	ldr	r3, [r7, #12]
 8003b58:	f8b3 3fae 	ldrh.w	r3, [r3, #4014]	@ 0xfae
 8003b5c:	82fb      	strh	r3, [r7, #22]
	idx = add8Bit(hL,0x68,idx); // D
 8003b5e:	8afb      	ldrh	r3, [r7, #22]
 8003b60:	461a      	mov	r2, r3
 8003b62:	2168      	movs	r1, #104	@ 0x68
 8003b64:	68f8      	ldr	r0, [r7, #12]
 8003b66:	f7ff fed8 	bl	800391a <add8Bit>
 8003b6a:	4603      	mov	r3, r0
 8003b6c:	82fb      	strh	r3, [r7, #22]
	idx = add8Bit(hL,0x58,idx); // :
 8003b6e:	8afb      	ldrh	r3, [r7, #22]
 8003b70:	461a      	mov	r2, r3
 8003b72:	2158      	movs	r1, #88	@ 0x58
 8003b74:	68f8      	ldr	r0, [r7, #12]
 8003b76:	f7ff fed0 	bl	800391a <add8Bit>
 8003b7a:	4603      	mov	r3, r0
 8003b7c:	82fb      	strh	r3, [r7, #22]

	idx = add32Bit(hL,svpwm->loopCounter,idx);
 8003b7e:	68bb      	ldr	r3, [r7, #8]
 8003b80:	681b      	ldr	r3, [r3, #0]
 8003b82:	4619      	mov	r1, r3
 8003b84:	8afb      	ldrh	r3, [r7, #22]
 8003b86:	461a      	mov	r2, r3
 8003b88:	68f8      	ldr	r0, [r7, #12]
 8003b8a:	f7ff ff7f 	bl	8003a8c <add32Bit>
 8003b8e:	4603      	mov	r3, r0
 8003b90:	82fb      	strh	r3, [r7, #22]
	idx = add16Bit(hL,ps->encoder_raw,idx);
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8003b98:	8afa      	ldrh	r2, [r7, #22]
 8003b9a:	4619      	mov	r1, r3
 8003b9c:	68f8      	ldr	r0, [r7, #12]
 8003b9e:	f7ff fedd 	bl	800395c <add16Bit>
 8003ba2:	4603      	mov	r3, r0
 8003ba4:	82fb      	strh	r3, [r7, #22]
	idx = addFloat(hL,ps->velocity_radsec,idx);
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	edd3 7a16 	vldr	s15, [r3, #88]	@ 0x58
 8003bac:	8afb      	ldrh	r3, [r7, #22]
 8003bae:	4619      	mov	r1, r3
 8003bb0:	eeb0 0a67 	vmov.f32	s0, s15
 8003bb4:	68f8      	ldr	r0, [r7, #12]
 8003bb6:	f7ff ff0b 	bl	80039d0 <addFloat>
 8003bba:	4603      	mov	r3, r0
 8003bbc:	82fb      	strh	r3, [r7, #22]

	idx = add8Bit(hL,fr->frictionCompensationOn,idx);
 8003bbe:	6a3b      	ldr	r3, [r7, #32]
 8003bc0:	781b      	ldrb	r3, [r3, #0]
 8003bc2:	8afa      	ldrh	r2, [r7, #22]
 8003bc4:	4619      	mov	r1, r3
 8003bc6:	68f8      	ldr	r0, [r7, #12]
 8003bc8:	f7ff fea7 	bl	800391a <add8Bit>
 8003bcc:	4603      	mov	r3, r0
 8003bce:	82fb      	strh	r3, [r7, #22]
	idx = addFloat(hL,OL_elecRadians,idx);
 8003bd0:	4b2e      	ldr	r3, [pc, #184]	@ (8003c8c <addData+0x144>)
 8003bd2:	edd3 7a00 	vldr	s15, [r3]
 8003bd6:	8afb      	ldrh	r3, [r7, #22]
 8003bd8:	4619      	mov	r1, r3
 8003bda:	eeb0 0a67 	vmov.f32	s0, s15
 8003bde:	68f8      	ldr	r0, [r7, #12]
 8003be0:	f7ff fef6 	bl	80039d0 <addFloat>
 8003be4:	4603      	mov	r3, r0
 8003be6:	82fb      	strh	r3, [r7, #22]

	idx = add8Bit(hL,cg->coggingCompensationOn,idx);
 8003be8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003bea:	781b      	ldrb	r3, [r3, #0]
 8003bec:	8afa      	ldrh	r2, [r7, #22]
 8003bee:	4619      	mov	r1, r3
 8003bf0:	68f8      	ldr	r0, [r7, #12]
 8003bf2:	f7ff fe92 	bl	800391a <add8Bit>
 8003bf6:	4603      	mov	r3, r0
 8003bf8:	82fb      	strh	r3, [r7, #22]
	idx = addFloat(hL,ps->elecRadians,idx);
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	edd3 7a15 	vldr	s15, [r3, #84]	@ 0x54
 8003c00:	8afb      	ldrh	r3, [r7, #22]
 8003c02:	4619      	mov	r1, r3
 8003c04:	eeb0 0a67 	vmov.f32	s0, s15
 8003c08:	68f8      	ldr	r0, [r7, #12]
 8003c0a:	f7ff fee1 	bl	80039d0 <addFloat>
 8003c0e:	4603      	mov	r3, r0
 8003c10:	82fb      	strh	r3, [r7, #22]

	idx = addFloat(hL,svpwm->voltagePercent,idx);
 8003c12:	68bb      	ldr	r3, [r7, #8]
 8003c14:	edd3 7a01 	vldr	s15, [r3, #4]
 8003c18:	8afb      	ldrh	r3, [r7, #22]
 8003c1a:	4619      	mov	r1, r3
 8003c1c:	eeb0 0a67 	vmov.f32	s0, s15
 8003c20:	68f8      	ldr	r0, [r7, #12]
 8003c22:	f7ff fed5 	bl	80039d0 <addFloat>
 8003c26:	4603      	mov	r3, r0
 8003c28:	82fb      	strh	r3, [r7, #22]
	idx = addFloat(hL,foc->m,idx);
 8003c2a:	683b      	ldr	r3, [r7, #0]
 8003c2c:	edd3 7a0d 	vldr	s15, [r3, #52]	@ 0x34
 8003c30:	8afb      	ldrh	r3, [r7, #22]
 8003c32:	4619      	mov	r1, r3
 8003c34:	eeb0 0a67 	vmov.f32	s0, s15
 8003c38:	68f8      	ldr	r0, [r7, #12]
 8003c3a:	f7ff fec9 	bl	80039d0 <addFloat>
 8003c3e:	4603      	mov	r3, r0
 8003c40:	82fb      	strh	r3, [r7, #22]

	idx = add8Bit(hL,0x58,idx); // :
 8003c42:	8afb      	ldrh	r3, [r7, #22]
 8003c44:	461a      	mov	r2, r3
 8003c46:	2158      	movs	r1, #88	@ 0x58
 8003c48:	68f8      	ldr	r0, [r7, #12]
 8003c4a:	f7ff fe66 	bl	800391a <add8Bit>
 8003c4e:	4603      	mov	r3, r0
 8003c50:	82fb      	strh	r3, [r7, #22]
	idx = add8Bit(hL,0x69,idx); // E
 8003c52:	8afb      	ldrh	r3, [r7, #22]
 8003c54:	461a      	mov	r2, r3
 8003c56:	2169      	movs	r1, #105	@ 0x69
 8003c58:	68f8      	ldr	r0, [r7, #12]
 8003c5a:	f7ff fe5e 	bl	800391a <add8Bit>
 8003c5e:	4603      	mov	r3, r0
 8003c60:	82fb      	strh	r3, [r7, #22]

	idx = add8Bit(hL,0x0A,idx); // 0A
 8003c62:	8afb      	ldrh	r3, [r7, #22]
 8003c64:	461a      	mov	r2, r3
 8003c66:	210a      	movs	r1, #10
 8003c68:	68f8      	ldr	r0, [r7, #12]
 8003c6a:	f7ff fe56 	bl	800391a <add8Bit>
 8003c6e:	4603      	mov	r3, r0
 8003c70:	82fb      	strh	r3, [r7, #22]
	idx = add8Bit(hL,0x0D,idx); // 0D
 8003c72:	8afb      	ldrh	r3, [r7, #22]
 8003c74:	461a      	mov	r2, r3
 8003c76:	210d      	movs	r1, #13
 8003c78:	68f8      	ldr	r0, [r7, #12]
 8003c7a:	f7ff fe4e 	bl	800391a <add8Bit>
 8003c7e:	4603      	mov	r3, r0
 8003c80:	82fb      	strh	r3, [r7, #22]
	return idx;
 8003c82:	8afb      	ldrh	r3, [r7, #22]
}
 8003c84:	4618      	mov	r0, r3
 8003c86:	3718      	adds	r7, #24
 8003c88:	46bd      	mov	sp, r7
 8003c8a:	bd80      	pop	{r7, pc}
 8003c8c:	20001868 	.word	0x20001868

08003c90 <hsLog_CheckStopConditionReached>:


void hsLog_CheckStopConditionReached(HSLogger *hL,PositionSensor *ps,int8_t direction){
 8003c90:	b480      	push	{r7}
 8003c92:	b085      	sub	sp, #20
 8003c94:	af00      	add	r7, sp, #0
 8003c96:	60f8      	str	r0, [r7, #12]
 8003c98:	60b9      	str	r1, [r7, #8]
 8003c9a:	4613      	mov	r3, r2
 8003c9c:	71fb      	strb	r3, [r7, #7]
	 hL->stopAndFlushBuffer = 0;
 8003c9e:	68fb      	ldr	r3, [r7, #12]
 8003ca0:	2200      	movs	r2, #0
 8003ca2:	731a      	strb	r2, [r3, #12]
	if (direction == CW){
 8003ca4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003ca8:	2b01      	cmp	r3, #1
 8003caa:	d10f      	bne.n	8003ccc <hsLog_CheckStopConditionReached+0x3c>
	  if (ps->multiturn_mech_radians > hL->end_multiTurns){
 8003cac:	68bb      	ldr	r3, [r7, #8]
 8003cae:	ed93 7a14 	vldr	s14, [r3, #80]	@ 0x50
 8003cb2:	68fb      	ldr	r3, [r7, #12]
 8003cb4:	edd3 7a02 	vldr	s15, [r3, #8]
 8003cb8:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003cbc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003cc0:	dc00      	bgt.n	8003cc4 <hsLog_CheckStopConditionReached+0x34>
	  if (ps->multiturn_mech_radians < hL->end_multiTurns){
		  hL->stopAndFlushBuffer = 1;
	  }
	}
	else{}
}
 8003cc2:	e017      	b.n	8003cf4 <hsLog_CheckStopConditionReached+0x64>
		  hL->stopAndFlushBuffer = 1;
 8003cc4:	68fb      	ldr	r3, [r7, #12]
 8003cc6:	2201      	movs	r2, #1
 8003cc8:	731a      	strb	r2, [r3, #12]
}
 8003cca:	e013      	b.n	8003cf4 <hsLog_CheckStopConditionReached+0x64>
	else if (direction == CCW){
 8003ccc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003cd0:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8003cd4:	d10e      	bne.n	8003cf4 <hsLog_CheckStopConditionReached+0x64>
	  if (ps->multiturn_mech_radians < hL->end_multiTurns){
 8003cd6:	68bb      	ldr	r3, [r7, #8]
 8003cd8:	ed93 7a14 	vldr	s14, [r3, #80]	@ 0x50
 8003cdc:	68fb      	ldr	r3, [r7, #12]
 8003cde:	edd3 7a02 	vldr	s15, [r3, #8]
 8003ce2:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003ce6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003cea:	d400      	bmi.n	8003cee <hsLog_CheckStopConditionReached+0x5e>
}
 8003cec:	e002      	b.n	8003cf4 <hsLog_CheckStopConditionReached+0x64>
		  hL->stopAndFlushBuffer = 1;
 8003cee:	68fb      	ldr	r3, [r7, #12]
 8003cf0:	2201      	movs	r2, #1
 8003cf2:	731a      	strb	r2, [r3, #12]
}
 8003cf4:	bf00      	nop
 8003cf6:	3714      	adds	r7, #20
 8003cf8:	46bd      	mov	sp, r7
 8003cfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cfe:	4770      	bx	lr

08003d00 <fast_fmaxf>:
 */

#include "MathOps.h"


float fast_fmaxf(float x, float y){
 8003d00:	b480      	push	{r7}
 8003d02:	b083      	sub	sp, #12
 8003d04:	af00      	add	r7, sp, #0
 8003d06:	ed87 0a01 	vstr	s0, [r7, #4]
 8003d0a:	edc7 0a00 	vstr	s1, [r7]
    /// Returns maximum of x, y ///
    return (((x)>(y))?(x):(y));
 8003d0e:	ed97 7a01 	vldr	s14, [r7, #4]
 8003d12:	edd7 7a00 	vldr	s15, [r7]
 8003d16:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003d1a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003d1e:	dd01      	ble.n	8003d24 <fast_fmaxf+0x24>
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	e000      	b.n	8003d26 <fast_fmaxf+0x26>
 8003d24:	683b      	ldr	r3, [r7, #0]
 8003d26:	ee07 3a90 	vmov	s15, r3
    }
 8003d2a:	eeb0 0a67 	vmov.f32	s0, s15
 8003d2e:	370c      	adds	r7, #12
 8003d30:	46bd      	mov	sp, r7
 8003d32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d36:	4770      	bx	lr

08003d38 <fast_fminf>:

float fast_fminf(float x, float y){
 8003d38:	b480      	push	{r7}
 8003d3a:	b083      	sub	sp, #12
 8003d3c:	af00      	add	r7, sp, #0
 8003d3e:	ed87 0a01 	vstr	s0, [r7, #4]
 8003d42:	edc7 0a00 	vstr	s1, [r7]
    /// Returns minimum of x, y ///
    return (((x)<(y))?(x):(y));
 8003d46:	ed97 7a01 	vldr	s14, [r7, #4]
 8003d4a:	edd7 7a00 	vldr	s15, [r7]
 8003d4e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003d52:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003d56:	d501      	bpl.n	8003d5c <fast_fminf+0x24>
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	e000      	b.n	8003d5e <fast_fminf+0x26>
 8003d5c:	683b      	ldr	r3, [r7, #0]
 8003d5e:	ee07 3a90 	vmov	s15, r3
    }
 8003d62:	eeb0 0a67 	vmov.f32	s0, s15
 8003d66:	370c      	adds	r7, #12
 8003d68:	46bd      	mov	sp, r7
 8003d6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d6e:	4770      	bx	lr

08003d70 <Init_ConstJerk_PosControl>:
 */


#include "PosControl-JC.h"

void Init_ConstJerk_PosControl(posControlJC *p){
 8003d70:	b480      	push	{r7}
 8003d72:	b083      	sub	sp, #12
 8003d74:	af00      	add	r7, sp, #0
 8003d76:	6078      	str	r0, [r7, #4]
	p->execCallingTime_ms = CALLING_TIME_MS;
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 8003d7e:	60da      	str	r2, [r3, #12]
	p->execCallingTime_s = p->execCallingTime_ms/1000.0f;
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	ed93 7a03 	vldr	s14, [r3, #12]
 8003d86:	eddf 6a06 	vldr	s13, [pc, #24]	@ 8003da0 <Init_ConstJerk_PosControl+0x30>
 8003d8a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	edc3 7a04 	vstr	s15, [r3, #16]
}
 8003d94:	bf00      	nop
 8003d96:	370c      	adds	r7, #12
 8003d98:	46bd      	mov	sp, r7
 8003d9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d9e:	4770      	bx	lr
 8003da0:	447a0000 	.word	0x447a0000

08003da4 <Reset_posControlJC>:


void Reset_posControlJC(posControlJC *p){
 8003da4:	b480      	push	{r7}
 8003da6:	b085      	sub	sp, #20
 8003da8:	af00      	add	r7, sp, #0
 8003daa:	6078      	str	r0, [r7, #4]
	p->targetDistanceDeg = 0;
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	f04f 0200 	mov.w	r2, #0
 8003db2:	601a      	str	r2, [r3, #0]
	p->targetTime_ms = 0;
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	f04f 0200 	mov.w	r2, #0
 8003dba:	605a      	str	r2, [r3, #4]

	p->instTime_ms = 0;
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	f04f 0200 	mov.w	r2, #0
 8003dc2:	63da      	str	r2, [r3, #60]	@ 0x3c
	p->instAccel = 0;
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	f04f 0200 	mov.w	r2, #0
 8003dca:	649a      	str	r2, [r3, #72]	@ 0x48
	p->instSubInterval=0;
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	f04f 0200 	mov.w	r2, #0
 8003dd2:	641a      	str	r2, [r3, #64]	@ 0x40
	p->instJerk=0;
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	f04f 0200 	mov.w	r2, #0
 8003dda:	645a      	str	r2, [r3, #68]	@ 0x44
	p->instAccel=0;
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	f04f 0200 	mov.w	r2, #0
 8003de2:	649a      	str	r2, [r3, #72]	@ 0x48
	p->instVel=0;
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	f04f 0200 	mov.w	r2, #0
 8003dea:	64da      	str	r2, [r3, #76]	@ 0x4c
	p->instVelRPM=0;
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	f04f 0200 	mov.w	r2, #0
 8003df2:	651a      	str	r2, [r3, #80]	@ 0x50
	p->instTheta=0;
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	f04f 0200 	mov.w	r2, #0
 8003dfa:	655a      	str	r2, [r3, #84]	@ 0x54

	p->subIntervalTime_ms=0;
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	2200      	movs	r2, #0
 8003e00:	829a      	strh	r2, [r3, #20]
	for (int i=0;i<9;i++){
 8003e02:	2300      	movs	r3, #0
 8003e04:	60fb      	str	r3, [r7, #12]
 8003e06:	e009      	b.n	8003e1c <Reset_posControlJC+0x78>
		p->subIntervalTime_msArray[i] = 0;
 8003e08:	687a      	ldr	r2, [r7, #4]
 8003e0a:	68fb      	ldr	r3, [r7, #12]
 8003e0c:	330c      	adds	r3, #12
 8003e0e:	005b      	lsls	r3, r3, #1
 8003e10:	4413      	add	r3, r2
 8003e12:	2200      	movs	r2, #0
 8003e14:	809a      	strh	r2, [r3, #4]
	for (int i=0;i<9;i++){
 8003e16:	68fb      	ldr	r3, [r7, #12]
 8003e18:	3301      	adds	r3, #1
 8003e1a:	60fb      	str	r3, [r7, #12]
 8003e1c:	68fb      	ldr	r3, [r7, #12]
 8003e1e:	2b08      	cmp	r3, #8
 8003e20:	ddf2      	ble.n	8003e08 <Reset_posControlJC+0x64>
	}
	p->jerkVal=0;
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	f04f 0200 	mov.w	r2, #0
 8003e28:	619a      	str	r2, [r3, #24]
	p->maxVelRad_sec=0;
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	f04f 0200 	mov.w	r2, #0
 8003e30:	631a      	str	r2, [r3, #48]	@ 0x30
	p->maxVel_RPM=0;
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	f04f 0200 	mov.w	r2, #0
 8003e38:	635a      	str	r2, [r3, #52]	@ 0x34

	p->state = POS_IDLE;
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	2203      	movs	r2, #3
 8003e3e:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
}
 8003e42:	bf00      	nop
 8003e44:	3714      	adds	r7, #20
 8003e46:	46bd      	mov	sp, r7
 8003e48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e4c:	4770      	bx	lr
	...

08003e50 <Setup_posControlJC>:

void Setup_posControlJC(posControlJC *p,float targetThetaDeg,float targetTime_ms){
 8003e50:	b480      	push	{r7}
 8003e52:	b087      	sub	sp, #28
 8003e54:	af00      	add	r7, sp, #0
 8003e56:	60f8      	str	r0, [r7, #12]
 8003e58:	ed87 0a02 	vstr	s0, [r7, #8]
 8003e5c:	edc7 0a01 	vstr	s1, [r7, #4]
	p->targetDistanceDeg = targetThetaDeg;
 8003e60:	68fb      	ldr	r3, [r7, #12]
 8003e62:	68ba      	ldr	r2, [r7, #8]
 8003e64:	601a      	str	r2, [r3, #0]
	p->targetTime_ms = targetTime_ms;
 8003e66:	68fb      	ldr	r3, [r7, #12]
 8003e68:	687a      	ldr	r2, [r7, #4]
 8003e6a:	605a      	str	r2, [r3, #4]

	p->subIntervalTime_ms = targetTime_ms/9.0f;
 8003e6c:	ed97 7a01 	vldr	s14, [r7, #4]
 8003e70:	eef2 6a02 	vmov.f32	s13, #34	@ 0x41100000  9.0
 8003e74:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8003e78:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003e7c:	ee17 3a90 	vmov	r3, s15
 8003e80:	b29a      	uxth	r2, r3
 8003e82:	68fb      	ldr	r3, [r7, #12]
 8003e84:	829a      	strh	r2, [r3, #20]
	p->targetDistanceRad = p->targetDistanceDeg*DEG_TO_RAD;
 8003e86:	68fb      	ldr	r3, [r7, #12]
 8003e88:	edd3 7a00 	vldr	s15, [r3]
 8003e8c:	ed9f 7a47 	vldr	s14, [pc, #284]	@ 8003fac <Setup_posControlJC+0x15c>
 8003e90:	ee27 7a87 	vmul.f32	s14, s15, s14
 8003e94:	eddf 6a46 	vldr	s13, [pc, #280]	@ 8003fb0 <Setup_posControlJC+0x160>
 8003e98:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8003e9c:	68fb      	ldr	r3, [r7, #12]
 8003e9e:	edc3 7a02 	vstr	s15, [r3, #8]
	float subInterval_s = (float)p->subIntervalTime_ms/1000.0f;
 8003ea2:	68fb      	ldr	r3, [r7, #12]
 8003ea4:	8a9b      	ldrh	r3, [r3, #20]
 8003ea6:	ee07 3a90 	vmov	s15, r3
 8003eaa:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8003eae:	eddf 6a41 	vldr	s13, [pc, #260]	@ 8003fb4 <Setup_posControlJC+0x164>
 8003eb2:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8003eb6:	edc7 7a05 	vstr	s15, [r7, #20]
	p->jerkVal = p->targetDistanceRad/(12.0f*subInterval_s*subInterval_s*subInterval_s);
 8003eba:	68fb      	ldr	r3, [r7, #12]
 8003ebc:	edd3 6a02 	vldr	s13, [r3, #8]
 8003ec0:	edd7 7a05 	vldr	s15, [r7, #20]
 8003ec4:	eeb2 7a08 	vmov.f32	s14, #40	@ 0x41400000  12.0
 8003ec8:	ee27 7a87 	vmul.f32	s14, s15, s14
 8003ecc:	edd7 7a05 	vldr	s15, [r7, #20]
 8003ed0:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003ed4:	edd7 7a05 	vldr	s15, [r7, #20]
 8003ed8:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003edc:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003ee0:	68fb      	ldr	r3, [r7, #12]
 8003ee2:	edc3 7a06 	vstr	s15, [r3, #24]

	p->maxVelRad_sec = p->jerkVal * 2.0f * subInterval_s * subInterval_s;
 8003ee6:	68fb      	ldr	r3, [r7, #12]
 8003ee8:	edd3 7a06 	vldr	s15, [r3, #24]
 8003eec:	ee37 7aa7 	vadd.f32	s14, s15, s15
 8003ef0:	edd7 7a05 	vldr	s15, [r7, #20]
 8003ef4:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003ef8:	edd7 7a05 	vldr	s15, [r7, #20]
 8003efc:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003f00:	68fb      	ldr	r3, [r7, #12]
 8003f02:	edc3 7a0c 	vstr	s15, [r3, #48]	@ 0x30
	p->maxVel_RPM = p->maxVelRad_sec * 60.0f / TWO_PI_F;
 8003f06:	68fb      	ldr	r3, [r7, #12]
 8003f08:	edd3 7a0c 	vldr	s15, [r3, #48]	@ 0x30
 8003f0c:	ed9f 7a2a 	vldr	s14, [pc, #168]	@ 8003fb8 <Setup_posControlJC+0x168>
 8003f10:	ee27 7a87 	vmul.f32	s14, s15, s14
 8003f14:	eddf 6a29 	vldr	s13, [pc, #164]	@ 8003fbc <Setup_posControlJC+0x16c>
 8003f18:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8003f1c:	68fb      	ldr	r3, [r7, #12]
 8003f1e:	edc3 7a0d 	vstr	s15, [r3, #52]	@ 0x34

	//PUT CHECKS HERE

	p->subIntervalTime_msArray[0] = p->subIntervalTime_ms * 1;
 8003f22:	68fb      	ldr	r3, [r7, #12]
 8003f24:	8a9a      	ldrh	r2, [r3, #20]
 8003f26:	68fb      	ldr	r3, [r7, #12]
 8003f28:	839a      	strh	r2, [r3, #28]
	p->subIntervalTime_msArray[1] = p->subIntervalTime_ms * 2;
 8003f2a:	68fb      	ldr	r3, [r7, #12]
 8003f2c:	8a9b      	ldrh	r3, [r3, #20]
 8003f2e:	005b      	lsls	r3, r3, #1
 8003f30:	b29a      	uxth	r2, r3
 8003f32:	68fb      	ldr	r3, [r7, #12]
 8003f34:	83da      	strh	r2, [r3, #30]
	p->subIntervalTime_msArray[2] = p->subIntervalTime_ms * 3;
 8003f36:	68fb      	ldr	r3, [r7, #12]
 8003f38:	8a9b      	ldrh	r3, [r3, #20]
 8003f3a:	461a      	mov	r2, r3
 8003f3c:	0052      	lsls	r2, r2, #1
 8003f3e:	4413      	add	r3, r2
 8003f40:	b29a      	uxth	r2, r3
 8003f42:	68fb      	ldr	r3, [r7, #12]
 8003f44:	841a      	strh	r2, [r3, #32]
	p->subIntervalTime_msArray[3] = p->subIntervalTime_ms * 4;
 8003f46:	68fb      	ldr	r3, [r7, #12]
 8003f48:	8a9b      	ldrh	r3, [r3, #20]
 8003f4a:	009b      	lsls	r3, r3, #2
 8003f4c:	b29a      	uxth	r2, r3
 8003f4e:	68fb      	ldr	r3, [r7, #12]
 8003f50:	845a      	strh	r2, [r3, #34]	@ 0x22
	p->subIntervalTime_msArray[4] = p->subIntervalTime_ms * 5;
 8003f52:	68fb      	ldr	r3, [r7, #12]
 8003f54:	8a9b      	ldrh	r3, [r3, #20]
 8003f56:	461a      	mov	r2, r3
 8003f58:	0092      	lsls	r2, r2, #2
 8003f5a:	4413      	add	r3, r2
 8003f5c:	b29a      	uxth	r2, r3
 8003f5e:	68fb      	ldr	r3, [r7, #12]
 8003f60:	849a      	strh	r2, [r3, #36]	@ 0x24
	p->subIntervalTime_msArray[5] = p->subIntervalTime_ms * 6;
 8003f62:	68fb      	ldr	r3, [r7, #12]
 8003f64:	8a9b      	ldrh	r3, [r3, #20]
 8003f66:	461a      	mov	r2, r3
 8003f68:	0052      	lsls	r2, r2, #1
 8003f6a:	4413      	add	r3, r2
 8003f6c:	005b      	lsls	r3, r3, #1
 8003f6e:	b29a      	uxth	r2, r3
 8003f70:	68fb      	ldr	r3, [r7, #12]
 8003f72:	84da      	strh	r2, [r3, #38]	@ 0x26
	p->subIntervalTime_msArray[6] = p->subIntervalTime_ms * 7;
 8003f74:	68fb      	ldr	r3, [r7, #12]
 8003f76:	8a9b      	ldrh	r3, [r3, #20]
 8003f78:	461a      	mov	r2, r3
 8003f7a:	00d2      	lsls	r2, r2, #3
 8003f7c:	1ad3      	subs	r3, r2, r3
 8003f7e:	b29a      	uxth	r2, r3
 8003f80:	68fb      	ldr	r3, [r7, #12]
 8003f82:	851a      	strh	r2, [r3, #40]	@ 0x28
	p->subIntervalTime_msArray[7] = p->subIntervalTime_ms * 8;
 8003f84:	68fb      	ldr	r3, [r7, #12]
 8003f86:	8a9b      	ldrh	r3, [r3, #20]
 8003f88:	00db      	lsls	r3, r3, #3
 8003f8a:	b29a      	uxth	r2, r3
 8003f8c:	68fb      	ldr	r3, [r7, #12]
 8003f8e:	855a      	strh	r2, [r3, #42]	@ 0x2a
	p->subIntervalTime_msArray[8] = p->subIntervalTime_ms * 9;
 8003f90:	68fb      	ldr	r3, [r7, #12]
 8003f92:	8a9b      	ldrh	r3, [r3, #20]
 8003f94:	461a      	mov	r2, r3
 8003f96:	00d2      	lsls	r2, r2, #3
 8003f98:	4413      	add	r3, r2
 8003f9a:	b29a      	uxth	r2, r3
 8003f9c:	68fb      	ldr	r3, [r7, #12]
 8003f9e:	859a      	strh	r2, [r3, #44]	@ 0x2c

}
 8003fa0:	bf00      	nop
 8003fa2:	371c      	adds	r7, #28
 8003fa4:	46bd      	mov	sp, r7
 8003fa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003faa:	4770      	bx	lr
 8003fac:	40490fd0 	.word	0x40490fd0
 8003fb0:	43340000 	.word	0x43340000
 8003fb4:	447a0000 	.word	0x447a0000
 8003fb8:	42700000 	.word	0x42700000
 8003fbc:	40c90fda 	.word	0x40c90fda

08003fc0 <ExecPosTrajectory>:


void ExecPosTrajectory(posControlJC *p){
 8003fc0:	b480      	push	{r7}
 8003fc2:	b083      	sub	sp, #12
 8003fc4:	af00      	add	r7, sp, #0
 8003fc6:	6078      	str	r0, [r7, #4]

	if (p->instTime_ms >= p->targetTime_ms){
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	ed93 7a0f 	vldr	s14, [r3, #60]	@ 0x3c
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	edd3 7a01 	vldr	s15, [r3, #4]
 8003fd4:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003fd8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003fdc:	db03      	blt.n	8003fe6 <ExecPosTrajectory+0x26>
		p->state = POS_OVER;
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	2202      	movs	r2, #2
 8003fe2:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
	}

	if (p->state == POS_RUNNING){
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8003fec:	2b01      	cmp	r3, #1
 8003fee:	f040 811f 	bne.w	8004230 <ExecPosTrajectory+0x270>
		p->instTime_ms += p->execCallingTime_ms;
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	ed93 7a0f 	vldr	s14, [r3, #60]	@ 0x3c
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	edd3 7a03 	vldr	s15, [r3, #12]
 8003ffe:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	edc3 7a0f 	vstr	s15, [r3, #60]	@ 0x3c

		if (p->instTime_ms < p->subIntervalTime_msArray[0]){
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	ed93 7a0f 	vldr	s14, [r3, #60]	@ 0x3c
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	8b9b      	ldrh	r3, [r3, #28]
 8004012:	ee07 3a90 	vmov	s15, r3
 8004016:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800401a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800401e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004022:	d508      	bpl.n	8004036 <ExecPosTrajectory+0x76>
			p->instJerk = p->jerkVal;
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	699a      	ldr	r2, [r3, #24]
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	645a      	str	r2, [r3, #68]	@ 0x44
			p->instSubInterval = 1;
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 8004032:	641a      	str	r2, [r3, #64]	@ 0x40
 8004034:	e0be      	b.n	80041b4 <ExecPosTrajectory+0x1f4>
		}
		else if (p->instTime_ms < p->subIntervalTime_msArray[1]){
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	ed93 7a0f 	vldr	s14, [r3, #60]	@ 0x3c
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	8bdb      	ldrh	r3, [r3, #30]
 8004040:	ee07 3a90 	vmov	s15, r3
 8004044:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004048:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800404c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004050:	d508      	bpl.n	8004064 <ExecPosTrajectory+0xa4>
			p->instJerk = 0;
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	f04f 0200 	mov.w	r2, #0
 8004058:	645a      	str	r2, [r3, #68]	@ 0x44
			p->instSubInterval = 2;
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8004060:	641a      	str	r2, [r3, #64]	@ 0x40
 8004062:	e0a7      	b.n	80041b4 <ExecPosTrajectory+0x1f4>
		}
		else if (p->instTime_ms < p->subIntervalTime_msArray[2]){
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	ed93 7a0f 	vldr	s14, [r3, #60]	@ 0x3c
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	8c1b      	ldrh	r3, [r3, #32]
 800406e:	ee07 3a90 	vmov	s15, r3
 8004072:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004076:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800407a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800407e:	d50b      	bpl.n	8004098 <ExecPosTrajectory+0xd8>
			p->instJerk = -p->jerkVal;
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	edd3 7a06 	vldr	s15, [r3, #24]
 8004086:	eef1 7a67 	vneg.f32	s15, s15
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	edc3 7a11 	vstr	s15, [r3, #68]	@ 0x44
			p->instSubInterval = 3;
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	4a6a      	ldr	r2, [pc, #424]	@ (800423c <ExecPosTrajectory+0x27c>)
 8004094:	641a      	str	r2, [r3, #64]	@ 0x40
 8004096:	e08d      	b.n	80041b4 <ExecPosTrajectory+0x1f4>
		}
		else if (p->instTime_ms < p->subIntervalTime_msArray[3]){
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	ed93 7a0f 	vldr	s14, [r3, #60]	@ 0x3c
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	8c5b      	ldrh	r3, [r3, #34]	@ 0x22
 80040a2:	ee07 3a90 	vmov	s15, r3
 80040a6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80040aa:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80040ae:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80040b2:	d508      	bpl.n	80040c6 <ExecPosTrajectory+0x106>
			p->instJerk = 0;
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	f04f 0200 	mov.w	r2, #0
 80040ba:	645a      	str	r2, [r3, #68]	@ 0x44
			p->instSubInterval = 4;
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	f04f 4281 	mov.w	r2, #1082130432	@ 0x40800000
 80040c2:	641a      	str	r2, [r3, #64]	@ 0x40
 80040c4:	e076      	b.n	80041b4 <ExecPosTrajectory+0x1f4>
		}
		else if (p->instTime_ms < p->subIntervalTime_msArray[4]){
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	ed93 7a0f 	vldr	s14, [r3, #60]	@ 0x3c
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 80040d0:	ee07 3a90 	vmov	s15, r3
 80040d4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80040d8:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80040dc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80040e0:	d507      	bpl.n	80040f2 <ExecPosTrajectory+0x132>
			p->instJerk = 0;
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	f04f 0200 	mov.w	r2, #0
 80040e8:	645a      	str	r2, [r3, #68]	@ 0x44
			p->instSubInterval = 5;
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	4a54      	ldr	r2, [pc, #336]	@ (8004240 <ExecPosTrajectory+0x280>)
 80040ee:	641a      	str	r2, [r3, #64]	@ 0x40
 80040f0:	e060      	b.n	80041b4 <ExecPosTrajectory+0x1f4>
		}
		else if (p->instTime_ms < p->subIntervalTime_msArray[5]){
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	ed93 7a0f 	vldr	s14, [r3, #60]	@ 0x3c
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80040fc:	ee07 3a90 	vmov	s15, r3
 8004100:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004104:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8004108:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800410c:	d507      	bpl.n	800411e <ExecPosTrajectory+0x15e>
			p->instJerk = 0;
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	f04f 0200 	mov.w	r2, #0
 8004114:	645a      	str	r2, [r3, #68]	@ 0x44
			p->instSubInterval = 6;
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	4a4a      	ldr	r2, [pc, #296]	@ (8004244 <ExecPosTrajectory+0x284>)
 800411a:	641a      	str	r2, [r3, #64]	@ 0x40
 800411c:	e04a      	b.n	80041b4 <ExecPosTrajectory+0x1f4>
		}
		else if (p->instTime_ms < p->subIntervalTime_msArray[6]){
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	ed93 7a0f 	vldr	s14, [r3, #60]	@ 0x3c
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004128:	ee07 3a90 	vmov	s15, r3
 800412c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004130:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8004134:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004138:	d50b      	bpl.n	8004152 <ExecPosTrajectory+0x192>
			p->instJerk = -p->jerkVal;
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	edd3 7a06 	vldr	s15, [r3, #24]
 8004140:	eef1 7a67 	vneg.f32	s15, s15
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	edc3 7a11 	vstr	s15, [r3, #68]	@ 0x44
			p->instSubInterval = 7;
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	4a3e      	ldr	r2, [pc, #248]	@ (8004248 <ExecPosTrajectory+0x288>)
 800414e:	641a      	str	r2, [r3, #64]	@ 0x40
 8004150:	e030      	b.n	80041b4 <ExecPosTrajectory+0x1f4>
		}
		else if (p->instTime_ms < p->subIntervalTime_msArray[7]){
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	ed93 7a0f 	vldr	s14, [r3, #60]	@ 0x3c
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800415c:	ee07 3a90 	vmov	s15, r3
 8004160:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004164:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8004168:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800416c:	d508      	bpl.n	8004180 <ExecPosTrajectory+0x1c0>
			p->instJerk = 0;
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	f04f 0200 	mov.w	r2, #0
 8004174:	645a      	str	r2, [r3, #68]	@ 0x44
			p->instSubInterval = 8;
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	f04f 4282 	mov.w	r2, #1090519040	@ 0x41000000
 800417c:	641a      	str	r2, [r3, #64]	@ 0x40
 800417e:	e019      	b.n	80041b4 <ExecPosTrajectory+0x1f4>
		}
		else if (p->instTime_ms < p->subIntervalTime_msArray[8]){
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	ed93 7a0f 	vldr	s14, [r3, #60]	@ 0x3c
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800418a:	ee07 3a90 	vmov	s15, r3
 800418e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004192:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8004196:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800419a:	d507      	bpl.n	80041ac <ExecPosTrajectory+0x1ec>
			p->instJerk = p->jerkVal;
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	699a      	ldr	r2, [r3, #24]
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	645a      	str	r2, [r3, #68]	@ 0x44
			p->instSubInterval = 9;
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	4a29      	ldr	r2, [pc, #164]	@ (800424c <ExecPosTrajectory+0x28c>)
 80041a8:	641a      	str	r2, [r3, #64]	@ 0x40
 80041aa:	e003      	b.n	80041b4 <ExecPosTrajectory+0x1f4>
		}else{
			p->instJerk = 0;
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	f04f 0200 	mov.w	r2, #0
 80041b2:	645a      	str	r2, [r3, #68]	@ 0x44
		}
	    p->instAccel = p->instAccel  + p->instJerk*p->execCallingTime_s;
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	ed93 7a12 	vldr	s14, [r3, #72]	@ 0x48
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	edd3 6a11 	vldr	s13, [r3, #68]	@ 0x44
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	edd3 7a04 	vldr	s15, [r3, #16]
 80041c6:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80041ca:	ee77 7a27 	vadd.f32	s15, s14, s15
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	edc3 7a12 	vstr	s15, [r3, #72]	@ 0x48
	    p->instVel = p->instVel + p->instAccel*p->execCallingTime_s;
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	ed93 7a13 	vldr	s14, [r3, #76]	@ 0x4c
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	edd3 6a12 	vldr	s13, [r3, #72]	@ 0x48
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	edd3 7a04 	vldr	s15, [r3, #16]
 80041e6:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80041ea:	ee77 7a27 	vadd.f32	s15, s14, s15
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	edc3 7a13 	vstr	s15, [r3, #76]	@ 0x4c
	    p->instTheta = p->instTheta + p->instVel * p->execCallingTime_s;
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	ed93 7a15 	vldr	s14, [r3, #84]	@ 0x54
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	edd3 6a13 	vldr	s13, [r3, #76]	@ 0x4c
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	edd3 7a04 	vldr	s15, [r3, #16]
 8004206:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800420a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	edc3 7a15 	vstr	s15, [r3, #84]	@ 0x54
	    p->instVelRPM = p->instVel * 60.0f/TWO_PI_F;
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	edd3 7a13 	vldr	s15, [r3, #76]	@ 0x4c
 800421a:	ed9f 7a0d 	vldr	s14, [pc, #52]	@ 8004250 <ExecPosTrajectory+0x290>
 800421e:	ee27 7a87 	vmul.f32	s14, s15, s14
 8004222:	eddf 6a0c 	vldr	s13, [pc, #48]	@ 8004254 <ExecPosTrajectory+0x294>
 8004226:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	edc3 7a14 	vstr	s15, [r3, #80]	@ 0x50

	}
}
 8004230:	bf00      	nop
 8004232:	370c      	adds	r7, #12
 8004234:	46bd      	mov	sp, r7
 8004236:	f85d 7b04 	ldr.w	r7, [sp], #4
 800423a:	4770      	bx	lr
 800423c:	40400000 	.word	0x40400000
 8004240:	40a00000 	.word	0x40a00000
 8004244:	40c00000 	.word	0x40c00000
 8004248:	40e00000 	.word	0x40e00000
 800424c:	41100000 	.word	0x41100000
 8004250:	42700000 	.word	0x42700000
 8004254:	40c90fda 	.word	0x40c90fda

08004258 <PositionSensor_update>:
	ps->avgingStarted = 0;
	ps->avg_velocity_radsec = 0;
}


void PositionSensor_update(PositionSensor* ps,float dt){
 8004258:	b580      	push	{r7, lr}
 800425a:	b084      	sub	sp, #16
 800425c:	af00      	add	r7, sp, #0
 800425e:	6078      	str	r0, [r7, #4]
 8004260:	ed87 0a00 	vstr	s0, [r7]
	//relatively slow, 500 cycles
	for (int i=15;i>=1;i--){
 8004264:	230f      	movs	r3, #15
 8004266:	60fb      	str	r3, [r7, #12]
 8004268:	e00d      	b.n	8004286 <PositionSensor_update+0x2e>
		ps->multiTurn_position[i]=ps->multiTurn_position[i-1];
 800426a:	68fb      	ldr	r3, [r7, #12]
 800426c:	3b01      	subs	r3, #1
 800426e:	687a      	ldr	r2, [r7, #4]
 8004270:	009b      	lsls	r3, r3, #2
 8004272:	4413      	add	r3, r2
 8004274:	681a      	ldr	r2, [r3, #0]
 8004276:	6879      	ldr	r1, [r7, #4]
 8004278:	68fb      	ldr	r3, [r7, #12]
 800427a:	009b      	lsls	r3, r3, #2
 800427c:	440b      	add	r3, r1
 800427e:	601a      	str	r2, [r3, #0]
	for (int i=15;i>=1;i--){
 8004280:	68fb      	ldr	r3, [r7, #12]
 8004282:	3b01      	subs	r3, #1
 8004284:	60fb      	str	r3, [r7, #12]
 8004286:	68fb      	ldr	r3, [r7, #12]
 8004288:	2b00      	cmp	r3, #0
 800428a:	dcee      	bgt.n	800426a <PositionSensor_update+0x12>

	// this takes the most time -> 1800 cycles with continuous read, twice that for
	//discontinuous. speed this up with your own SPI code. If we want to check health
	//of the chip we need to restart the continuous read. for that this fn needs to
	//be modified.
	ps->encoder_raw = Encoder_get16BitMechAngle_Single(1);
 800428c:	2001      	movs	r0, #1
 800428e:	f7fe fef0 	bl	8003072 <Encoder_get16BitMechAngle_Single>
 8004292:	4603      	mov	r3, r0
 8004294:	461a      	mov	r2, r3
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40
	ps->encoder_raw = ps->encoder_raw ;//>> 3;
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	f8b3 2040 	ldrh.w	r2, [r3, #64]	@ 0x40
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40
	//linearize, calibrate if you need to
	//calculations are very fast, less than 500cycles.
	ps->mechRadians_singleTurn = ps->encoder_raw*TWO_PI_F/CPR_ENCODER;
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 80042ae:	ee07 3a90 	vmov	s15, r3
 80042b2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80042b6:	ed9f 7a4a 	vldr	s14, [pc, #296]	@ 80043e0 <PositionSensor_update+0x188>
 80042ba:	ee27 7a87 	vmul.f32	s14, s15, s14
 80042be:	eddf 6a49 	vldr	s13, [pc, #292]	@ 80043e4 <PositionSensor_update+0x18c>
 80042c2:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	edc3 7a11 	vstr	s15, [r3, #68]	@ 0x44
	ps->elecRadians  = getElecAngleFromMechAngle(ps->mechRadians_singleTurn); 	//get electrical rads from mech rads
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	edd3 7a11 	vldr	s15, [r3, #68]	@ 0x44
 80042d2:	eeb0 0a67 	vmov.f32	s0, s15
 80042d6:	f000 f8c7 	bl	8004468 <getElecAngleFromMechAngle>
 80042da:	eef0 7a40 	vmov.f32	s15, s0
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	edc3 7a15 	vstr	s15, [r3, #84]	@ 0x54

	ps->delta_mechRadians_dt = ps->mechRadians_singleTurn - ps->prev_mechRadians_singleTurn;
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	ed93 7a11 	vldr	s14, [r3, #68]	@ 0x44
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	edd3 7a12 	vldr	s15, [r3, #72]	@ 0x48
 80042f0:	ee77 7a67 	vsub.f32	s15, s14, s15
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	edc3 7a13 	vstr	s15, [r3, #76]	@ 0x4c
	int8_t rollover = 0;
 80042fa:	2300      	movs	r3, #0
 80042fc:	72fb      	strb	r3, [r7, #11]
	if(ps->delta_mechRadians_dt > PI_F){rollover = -1;}
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	edd3 7a13 	vldr	s15, [r3, #76]	@ 0x4c
 8004304:	ed9f 7a38 	vldr	s14, [pc, #224]	@ 80043e8 <PositionSensor_update+0x190>
 8004308:	eef4 7ac7 	vcmpe.f32	s15, s14
 800430c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004310:	dd02      	ble.n	8004318 <PositionSensor_update+0xc0>
 8004312:	23ff      	movs	r3, #255	@ 0xff
 8004314:	72fb      	strb	r3, [r7, #11]
 8004316:	e00b      	b.n	8004330 <PositionSensor_update+0xd8>
	else if(ps->delta_mechRadians_dt < -PI_F){rollover = 1;}
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	edd3 7a13 	vldr	s15, [r3, #76]	@ 0x4c
 800431e:	ed9f 7a33 	vldr	s14, [pc, #204]	@ 80043ec <PositionSensor_update+0x194>
 8004322:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004326:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800432a:	d501      	bpl.n	8004330 <PositionSensor_update+0xd8>
 800432c:	2301      	movs	r3, #1
 800432e:	72fb      	strb	r3, [r7, #11]
	ps->turns += rollover;
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	f9b3 306c 	ldrsh.w	r3, [r3, #108]	@ 0x6c
 8004336:	b29a      	uxth	r2, r3
 8004338:	f997 300b 	ldrsb.w	r3, [r7, #11]
 800433c:	b29b      	uxth	r3, r3
 800433e:	4413      	add	r3, r2
 8004340:	b29b      	uxth	r3, r3
 8004342:	b21a      	sxth	r2, r3
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	f8a3 206c 	strh.w	r2, [r3, #108]	@ 0x6c

	ps->multiturn_mech_radians = ps->turns * TWO_PI_F + ps->mechRadians_singleTurn;
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	f9b3 306c 	ldrsh.w	r3, [r3, #108]	@ 0x6c
 8004350:	ee07 3a90 	vmov	s15, r3
 8004354:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004358:	ed9f 7a21 	vldr	s14, [pc, #132]	@ 80043e0 <PositionSensor_update+0x188>
 800435c:	ee27 7a87 	vmul.f32	s14, s15, s14
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	edd3 7a11 	vldr	s15, [r3, #68]	@ 0x44
 8004366:	ee77 7a27 	vadd.f32	s15, s14, s15
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	edc3 7a14 	vstr	s15, [r3, #80]	@ 0x50
	ps->prev_mechRadians_singleTurn = ps->mechRadians_singleTurn;
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	649a      	str	r2, [r3, #72]	@ 0x48

	ps->multiTurn_position[0] = ps->multiturn_mech_radians;
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	601a      	str	r2, [r3, #0]

	ps->velocity_radsec = (ps->multiTurn_position[0] - ps->multiTurn_position[POS_SAMPLES-1])/(dt*(float)(POS_SAMPLES-1));
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	ed93 7a00 	vldr	s14, [r3]
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	edd3 7a0f 	vldr	s15, [r3, #60]	@ 0x3c
 800438c:	ee77 6a67 	vsub.f32	s13, s14, s15
 8004390:	edd7 7a00 	vldr	s15, [r7]
 8004394:	eeb2 7a0e 	vmov.f32	s14, #46	@ 0x41700000  15.0
 8004398:	ee27 7a87 	vmul.f32	s14, s15, s14
 800439c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	edc3 7a16 	vstr	s15, [r3, #88]	@ 0x58


	ps->velocityRPM = ps->velocity_radsec * 60.0f/TWO_PI_F;
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	edd3 7a16 	vldr	s15, [r3, #88]	@ 0x58
 80043ac:	ed9f 7a10 	vldr	s14, [pc, #64]	@ 80043f0 <PositionSensor_update+0x198>
 80043b0:	ee27 7a87 	vmul.f32	s14, s15, s14
 80043b4:	eddf 6a0a 	vldr	s13, [pc, #40]	@ 80043e0 <PositionSensor_update+0x188>
 80043b8:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	edc3 7a19 	vstr	s15, [r3, #100]	@ 0x64
	ps->elec_velocity_radsec = POLE_PAIRS*ps->velocity_radsec;
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	edd3 7a16 	vldr	s15, [r3, #88]	@ 0x58
 80043c8:	eeb0 7a08 	vmov.f32	s14, #8	@ 0x40400000  3.0
 80043cc:	ee67 7a87 	vmul.f32	s15, s15, s14
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	edc3 7a1a 	vstr	s15, [r3, #104]	@ 0x68

}
 80043d6:	bf00      	nop
 80043d8:	3710      	adds	r7, #16
 80043da:	46bd      	mov	sp, r7
 80043dc:	bd80      	pop	{r7, pc}
 80043de:	bf00      	nop
 80043e0:	40c90fda 	.word	0x40c90fda
 80043e4:	46800000 	.word	0x46800000
 80043e8:	40490fd0 	.word	0x40490fd0
 80043ec:	c0490fd0 	.word	0xc0490fd0
 80043f0:	42700000 	.word	0x42700000

080043f4 <getAveragedVelocityRadSec>:


void getAveragedVelocityRadSec(PositionSensor *ps){
 80043f4:	b480      	push	{r7}
 80043f6:	b083      	sub	sp, #12
 80043f8:	af00      	add	r7, sp, #0
 80043fa:	6078      	str	r0, [r7, #4]
	//averaging
	if (ps->avgingStarted==0){
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8004402:	2b00      	cmp	r3, #0
 8004404:	d115      	bne.n	8004432 <getAveragedVelocityRadSec+0x3e>
		ps->avgIdx ++;
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 800440c:	3301      	adds	r3, #1
 800440e:	b2da      	uxtb	r2, r3
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
		ps->avg_velocity_radsec = 0 ;
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	f04f 0200 	mov.w	r2, #0
 800441c:	661a      	str	r2, [r3, #96]	@ 0x60
		if (ps->avgIdx >= 30){
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8004424:	2b1d      	cmp	r3, #29
 8004426:	d918      	bls.n	800445a <getAveragedVelocityRadSec+0x66>
			ps->avgingStarted = 1;
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	2201      	movs	r2, #1
 800442c:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
		}
	}
	else{
		ps->avg_velocity_radsec = ps->avg_velocity_radsec + (ps->velocity_radsec - ps->avg_velocity_radsec)/EXP_FILTER_FACTOR;
	}
}
 8004430:	e013      	b.n	800445a <getAveragedVelocityRadSec+0x66>
		ps->avg_velocity_radsec = ps->avg_velocity_radsec + (ps->velocity_radsec - ps->avg_velocity_radsec)/EXP_FILTER_FACTOR;
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	ed93 7a18 	vldr	s14, [r3, #96]	@ 0x60
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	edd3 6a16 	vldr	s13, [r3, #88]	@ 0x58
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	edd3 7a18 	vldr	s15, [r3, #96]	@ 0x60
 8004444:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8004448:	eeb1 6a04 	vmov.f32	s12, #20	@ 0x40a00000  5.0
 800444c:	eec6 7a86 	vdiv.f32	s15, s13, s12
 8004450:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	edc3 7a18 	vstr	s15, [r3, #96]	@ 0x60
}
 800445a:	bf00      	nop
 800445c:	370c      	adds	r7, #12
 800445e:	46bd      	mov	sp, r7
 8004460:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004464:	4770      	bx	lr
	...

08004468 <getElecAngleFromMechAngle>:

float getElecAngleFromMechAngle(float mechRadians){
 8004468:	b480      	push	{r7}
 800446a:	b087      	sub	sp, #28
 800446c:	af00      	add	r7, sp, #0
 800446e:	ed87 0a01 	vstr	s0, [r7, #4]
	int multiplier = (int)(mechRadians/MECH_RADS_PER_ELECTRICAL_REV);
 8004472:	ed97 7a01 	vldr	s14, [r7, #4]
 8004476:	eddf 6a17 	vldr	s13, [pc, #92]	@ 80044d4 <getElecAngleFromMechAngle+0x6c>
 800447a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800447e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8004482:	ee17 3a90 	vmov	r3, s15
 8004486:	617b      	str	r3, [r7, #20]
	float delta_mechRadians = mechRadians - (multiplier * MECH_RADS_PER_ELECTRICAL_REV);
 8004488:	697b      	ldr	r3, [r7, #20]
 800448a:	ee07 3a90 	vmov	s15, r3
 800448e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004492:	ed9f 7a10 	vldr	s14, [pc, #64]	@ 80044d4 <getElecAngleFromMechAngle+0x6c>
 8004496:	ee67 7a87 	vmul.f32	s15, s15, s14
 800449a:	ed97 7a01 	vldr	s14, [r7, #4]
 800449e:	ee77 7a67 	vsub.f32	s15, s14, s15
 80044a2:	edc7 7a04 	vstr	s15, [r7, #16]
	float elecRadians = (delta_mechRadians * TWO_PI_F)/MECH_RADS_PER_ELECTRICAL_REV;
 80044a6:	edd7 7a04 	vldr	s15, [r7, #16]
 80044aa:	ed9f 7a0b 	vldr	s14, [pc, #44]	@ 80044d8 <getElecAngleFromMechAngle+0x70>
 80044ae:	ee27 7a87 	vmul.f32	s14, s15, s14
 80044b2:	eddf 6a08 	vldr	s13, [pc, #32]	@ 80044d4 <getElecAngleFromMechAngle+0x6c>
 80044b6:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80044ba:	edc7 7a03 	vstr	s15, [r7, #12]
	return elecRadians;
 80044be:	68fb      	ldr	r3, [r7, #12]
 80044c0:	ee07 3a90 	vmov	s15, r3
}
 80044c4:	eeb0 0a67 	vmov.f32	s0, s15
 80044c8:	371c      	adds	r7, #28
 80044ca:	46bd      	mov	sp, r7
 80044cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044d0:	4770      	bx	lr
 80044d2:	bf00      	nop
 80044d4:	40060aa6 	.word	0x40060aa6
 80044d8:	40c90fda 	.word	0x40c90fda

080044dc <InitRampDutyStruct>:
 */

#include "Ramp.h"


void InitRampDutyStruct(RampDuty *ramp,uint16_t targetDuty,long rampUpTime,long rampDownTime,int16_t rampSteadyTime){
 80044dc:	b480      	push	{r7}
 80044de:	b087      	sub	sp, #28
 80044e0:	af00      	add	r7, sp, #0
 80044e2:	60f8      	str	r0, [r7, #12]
 80044e4:	607a      	str	r2, [r7, #4]
 80044e6:	603b      	str	r3, [r7, #0]
 80044e8:	460b      	mov	r3, r1
 80044ea:	817b      	strh	r3, [r7, #10]
	uint16_t totalSteps  = 0;
 80044ec:	2300      	movs	r3, #0
 80044ee:	82fb      	strh	r3, [r7, #22]
	ramp->ramp_callingTime_s = 0.020f;
 80044f0:	68fb      	ldr	r3, [r7, #12]
 80044f2:	4a3c      	ldr	r2, [pc, #240]	@ (80045e4 <InitRampDutyStruct+0x108>)
 80044f4:	629a      	str	r2, [r3, #40]	@ 0x28
	ramp->rampUpTime_ms = rampUpTime;
 80044f6:	68fb      	ldr	r3, [r7, #12]
 80044f8:	687a      	ldr	r2, [r7, #4]
 80044fa:	615a      	str	r2, [r3, #20]
	ramp->rampDownTime_ms = rampDownTime;
 80044fc:	68fb      	ldr	r3, [r7, #12]
 80044fe:	683a      	ldr	r2, [r7, #0]
 8004500:	619a      	str	r2, [r3, #24]
	ramp->steadyRunTime_s = rampSteadyTime; // in Seconds!
 8004502:	68fb      	ldr	r3, [r7, #12]
 8004504:	8c3a      	ldrh	r2, [r7, #32]
 8004506:	821a      	strh	r2, [r3, #16]
	ramp->finalTargetDuty = targetDuty;
 8004508:	68fb      	ldr	r3, [r7, #12]
 800450a:	897a      	ldrh	r2, [r7, #10]
 800450c:	801a      	strh	r2, [r3, #0]
	ramp->currentDutyF = 0;
 800450e:	68fb      	ldr	r3, [r7, #12]
 8004510:	f04f 0200 	mov.w	r2, #0
 8004514:	605a      	str	r2, [r3, #4]
	ramp->currentDuty = 0;
 8004516:	68fb      	ldr	r3, [r7, #12]
 8004518:	2200      	movs	r2, #0
 800451a:	805a      	strh	r2, [r3, #2]
	//For RampUp
	totalSteps = ramp->rampUpTime_ms/((uint16_t)(ramp->ramp_callingTime_s*1000));
 800451c:	68fb      	ldr	r3, [r7, #12]
 800451e:	695b      	ldr	r3, [r3, #20]
 8004520:	68fa      	ldr	r2, [r7, #12]
 8004522:	edd2 7a0a 	vldr	s15, [r2, #40]	@ 0x28
 8004526:	ed9f 7a30 	vldr	s14, [pc, #192]	@ 80045e8 <InitRampDutyStruct+0x10c>
 800452a:	ee67 7a87 	vmul.f32	s15, s15, s14
 800452e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004532:	ee17 2a90 	vmov	r2, s15
 8004536:	b292      	uxth	r2, r2
 8004538:	fb93 f3f2 	sdiv	r3, r3, r2
 800453c:	82fb      	strh	r3, [r7, #22]
	if (totalSteps == 0){
 800453e:	8afb      	ldrh	r3, [r7, #22]
 8004540:	2b00      	cmp	r3, #0
 8004542:	d101      	bne.n	8004548 <InitRampDutyStruct+0x6c>
		totalSteps = 1;
 8004544:	2301      	movs	r3, #1
 8004546:	82fb      	strh	r3, [r7, #22]
	}
	ramp->dDuty_F_RU = ((float)ramp->finalTargetDuty)/totalSteps;
 8004548:	68fb      	ldr	r3, [r7, #12]
 800454a:	881b      	ldrh	r3, [r3, #0]
 800454c:	ee07 3a90 	vmov	s15, r3
 8004550:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004554:	8afb      	ldrh	r3, [r7, #22]
 8004556:	ee07 3a90 	vmov	s15, r3
 800455a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800455e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004562:	68fb      	ldr	r3, [r7, #12]
 8004564:	edc3 7a02 	vstr	s15, [r3, #8]

	//For RampDown
	totalSteps = ramp->rampDownTime_ms/((uint16_t)(ramp->ramp_callingTime_s*1000));
 8004568:	68fb      	ldr	r3, [r7, #12]
 800456a:	699b      	ldr	r3, [r3, #24]
 800456c:	68fa      	ldr	r2, [r7, #12]
 800456e:	edd2 7a0a 	vldr	s15, [r2, #40]	@ 0x28
 8004572:	ed9f 7a1d 	vldr	s14, [pc, #116]	@ 80045e8 <InitRampDutyStruct+0x10c>
 8004576:	ee67 7a87 	vmul.f32	s15, s15, s14
 800457a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800457e:	ee17 2a90 	vmov	r2, s15
 8004582:	b292      	uxth	r2, r2
 8004584:	fb93 f3f2 	sdiv	r3, r3, r2
 8004588:	82fb      	strh	r3, [r7, #22]
	if (totalSteps == 0){
 800458a:	8afb      	ldrh	r3, [r7, #22]
 800458c:	2b00      	cmp	r3, #0
 800458e:	d101      	bne.n	8004594 <InitRampDutyStruct+0xb8>
		totalSteps = 1;
 8004590:	2301      	movs	r3, #1
 8004592:	82fb      	strh	r3, [r7, #22]
	}
	ramp->dDuty_F_RD = ((float)ramp->finalTargetDuty)/totalSteps;
 8004594:	68fb      	ldr	r3, [r7, #12]
 8004596:	881b      	ldrh	r3, [r3, #0]
 8004598:	ee07 3a90 	vmov	s15, r3
 800459c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80045a0:	8afb      	ldrh	r3, [r7, #22]
 80045a2:	ee07 3a90 	vmov	s15, r3
 80045a6:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80045aa:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80045ae:	68fb      	ldr	r3, [r7, #12]
 80045b0:	edc3 7a03 	vstr	s15, [r3, #12]

	ramp->rampPhase = RAMP_WAIT;
 80045b4:	68fb      	ldr	r3, [r7, #12]
 80045b6:	2204      	movs	r2, #4
 80045b8:	771a      	strb	r2, [r3, #28]

	ramp-> transitionTarget = 0;
 80045ba:	68fb      	ldr	r3, [r7, #12]
 80045bc:	2200      	movs	r2, #0
 80045be:	83da      	strh	r2, [r3, #30]
	ramp-> transitionTime_ms = 0;
 80045c0:	68fb      	ldr	r3, [r7, #12]
 80045c2:	2200      	movs	r2, #0
 80045c4:	841a      	strh	r2, [r3, #32]
	ramp-> dDuty_F_transition = 0;
 80045c6:	68fb      	ldr	r3, [r7, #12]
 80045c8:	f04f 0200 	mov.w	r2, #0
 80045cc:	625a      	str	r2, [r3, #36]	@ 0x24

	ramp->rampTimer = 0;
 80045ce:	68fb      	ldr	r3, [r7, #12]
 80045d0:	f04f 0200 	mov.w	r2, #0
 80045d4:	62da      	str	r2, [r3, #44]	@ 0x2c
}
 80045d6:	bf00      	nop
 80045d8:	371c      	adds	r7, #28
 80045da:	46bd      	mov	sp, r7
 80045dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045e0:	4770      	bx	lr
 80045e2:	bf00      	nop
 80045e4:	3ca3d70a 	.word	0x3ca3d70a
 80045e8:	447a0000 	.word	0x447a0000

080045ec <StartRampDuty>:


void StartRampDuty(RampDuty *ramp){
 80045ec:	b480      	push	{r7}
 80045ee:	b083      	sub	sp, #12
 80045f0:	af00      	add	r7, sp, #0
 80045f2:	6078      	str	r0, [r7, #4]
	ramp->rampPhase = RAMP_UP;
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	2200      	movs	r2, #0
 80045f8:	771a      	strb	r2, [r3, #28]
}
 80045fa:	bf00      	nop
 80045fc:	370c      	adds	r7, #12
 80045fe:	46bd      	mov	sp, r7
 8004600:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004604:	4770      	bx	lr

08004606 <StartRampDownDuty>:

void StartRampDownDuty(RampDuty *ramp){
 8004606:	b480      	push	{r7}
 8004608:	b083      	sub	sp, #12
 800460a:	af00      	add	r7, sp, #0
 800460c:	6078      	str	r0, [r7, #4]
	ramp->rampPhase = RAMP_DOWN;
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	2201      	movs	r2, #1
 8004612:	771a      	strb	r2, [r3, #28]
	ramp->rampTimer = 0;
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	f04f 0200 	mov.w	r2, #0
 800461a:	62da      	str	r2, [r3, #44]	@ 0x2c
}
 800461c:	bf00      	nop
 800461e:	370c      	adds	r7, #12
 8004620:	46bd      	mov	sp, r7
 8004622:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004626:	4770      	bx	lr

08004628 <StopRampDuty>:

void StopRampDuty(RampDuty *ramp){
 8004628:	b480      	push	{r7}
 800462a:	b083      	sub	sp, #12
 800462c:	af00      	add	r7, sp, #0
 800462e:	6078      	str	r0, [r7, #4]
	ramp->rampPhase = RAMP_WAIT;
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	2204      	movs	r2, #4
 8004634:	771a      	strb	r2, [r3, #28]
	ramp->currentDutyF = 0;
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	f04f 0200 	mov.w	r2, #0
 800463c:	605a      	str	r2, [r3, #4]
	ramp->currentDuty = 0;
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	2200      	movs	r2, #0
 8004642:	805a      	strh	r2, [r3, #2]
	ramp->rampTimer = 0;
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	f04f 0200 	mov.w	r2, #0
 800464a:	62da      	str	r2, [r3, #44]	@ 0x2c
}
 800464c:	bf00      	nop
 800464e:	370c      	adds	r7, #12
 8004650:	46bd      	mov	sp, r7
 8004652:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004656:	4770      	bx	lr

08004658 <ExecRampDuty>:

	ramp->rampTimer = 0;
}


void ExecRampDuty(RampDuty *ramp){
 8004658:	b480      	push	{r7}
 800465a:	b083      	sub	sp, #12
 800465c:	af00      	add	r7, sp, #0
 800465e:	6078      	str	r0, [r7, #4]

	if(ramp->rampPhase != RAMP_WAIT){
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	7f1b      	ldrb	r3, [r3, #28]
 8004664:	2b04      	cmp	r3, #4
 8004666:	d00a      	beq.n	800467e <ExecRampDuty+0x26>
		ramp->rampTimer += 	ramp->ramp_callingTime_s;
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	ed93 7a0b 	vldr	s14, [r3, #44]	@ 0x2c
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	edd3 7a0a 	vldr	s15, [r3, #40]	@ 0x28
 8004674:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	edc3 7a0b 	vstr	s15, [r3, #44]	@ 0x2c
	}

	if (ramp->rampPhase == RAMP_UP){
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	7f1b      	ldrb	r3, [r3, #28]
 8004682:	2b00      	cmp	r3, #0
 8004684:	d12e      	bne.n	80046e4 <ExecRampDuty+0x8c>
		if(ramp->currentDuty <= ramp->finalTargetDuty){
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	885a      	ldrh	r2, [r3, #2]
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	881b      	ldrh	r3, [r3, #0]
 800468e:	429a      	cmp	r2, r3
 8004690:	f200 80cf 	bhi.w	8004832 <ExecRampDuty+0x1da>
			ramp->currentDutyF += ramp->dDuty_F_RU;
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	ed93 7a01 	vldr	s14, [r3, #4]
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	edd3 7a02 	vldr	s15, [r3, #8]
 80046a0:	ee77 7a27 	vadd.f32	s15, s14, s15
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	edc3 7a01 	vstr	s15, [r3, #4]
			ramp->currentDuty = (uint16_t)(ramp->currentDutyF);
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	edd3 7a01 	vldr	s15, [r3, #4]
 80046b0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80046b4:	ee17 3a90 	vmov	r3, s15
 80046b8:	b29a      	uxth	r2, r3
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	805a      	strh	r2, [r3, #2]
			if(ramp->currentDuty >= ramp->finalTargetDuty){
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	885a      	ldrh	r2, [r3, #2]
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	881b      	ldrh	r3, [r3, #0]
 80046c6:	429a      	cmp	r2, r3
 80046c8:	f0c0 80b3 	bcc.w	8004832 <ExecRampDuty+0x1da>
				ramp->currentDuty  = ramp->finalTargetDuty;
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	881a      	ldrh	r2, [r3, #0]
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	805a      	strh	r2, [r3, #2]
				ramp->rampPhase = RAMP_STEADY;
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	2202      	movs	r2, #2
 80046d8:	771a      	strb	r2, [r3, #28]
				ramp->rampTimer = 0;
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	f04f 0200 	mov.w	r2, #0
 80046e0:	62da      	str	r2, [r3, #44]	@ 0x2c
	}
	else{
		//Do Nothing
	}

}
 80046e2:	e0a6      	b.n	8004832 <ExecRampDuty+0x1da>
	else if (ramp->rampPhase == RAMP_STEADY){
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	7f1b      	ldrb	r3, [r3, #28]
 80046e8:	2b02      	cmp	r3, #2
 80046ea:	d11e      	bne.n	800472a <ExecRampDuty+0xd2>
		if (ramp->steadyRunTime_s != RUN_FOREVER){
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	f9b3 3010 	ldrsh.w	r3, [r3, #16]
 80046f2:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80046f6:	f000 809c 	beq.w	8004832 <ExecRampDuty+0x1da>
			if (ramp->rampTimer >= ramp->steadyRunTime_s){
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	ed93 7a0b 	vldr	s14, [r3, #44]	@ 0x2c
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	f9b3 3010 	ldrsh.w	r3, [r3, #16]
 8004706:	ee07 3a90 	vmov	s15, r3
 800470a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800470e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8004712:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004716:	da00      	bge.n	800471a <ExecRampDuty+0xc2>
}
 8004718:	e08b      	b.n	8004832 <ExecRampDuty+0x1da>
				ramp->rampPhase = RAMP_DOWN;
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	2201      	movs	r2, #1
 800471e:	771a      	strb	r2, [r3, #28]
				ramp->rampTimer = 0;
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	f04f 0200 	mov.w	r2, #0
 8004726:	62da      	str	r2, [r3, #44]	@ 0x2c
}
 8004728:	e083      	b.n	8004832 <ExecRampDuty+0x1da>
	else if (ramp->rampPhase == RAMP_CHANGE){
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	7f1b      	ldrb	r3, [r3, #28]
 800472e:	2b08      	cmp	r3, #8
 8004730:	d158      	bne.n	80047e4 <ExecRampDuty+0x18c>
		if(ramp->currentDuty < ramp->transitionTarget){
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	885a      	ldrh	r2, [r3, #2]
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	8bdb      	ldrh	r3, [r3, #30]
 800473a:	429a      	cmp	r2, r3
 800473c:	d225      	bcs.n	800478a <ExecRampDuty+0x132>
			ramp->currentDutyF += ramp->dDuty_F_transition;
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	ed93 7a01 	vldr	s14, [r3, #4]
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	edd3 7a09 	vldr	s15, [r3, #36]	@ 0x24
 800474a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	edc3 7a01 	vstr	s15, [r3, #4]
			ramp->currentDuty = (uint16_t)(ramp->currentDutyF);
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	edd3 7a01 	vldr	s15, [r3, #4]
 800475a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800475e:	ee17 3a90 	vmov	r3, s15
 8004762:	b29a      	uxth	r2, r3
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	805a      	strh	r2, [r3, #2]
			if(ramp->currentDuty >= ramp->transitionTarget){
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	885a      	ldrh	r2, [r3, #2]
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	8bdb      	ldrh	r3, [r3, #30]
 8004770:	429a      	cmp	r2, r3
 8004772:	d30a      	bcc.n	800478a <ExecRampDuty+0x132>
				ramp->currentDuty  = ramp->transitionTarget;
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	8bda      	ldrh	r2, [r3, #30]
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	805a      	strh	r2, [r3, #2]
				ramp->rampPhase = RAMP_STEADY;
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	2202      	movs	r2, #2
 8004780:	771a      	strb	r2, [r3, #28]
				ramp->rampTimer = 0;
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	f04f 0200 	mov.w	r2, #0
 8004788:	62da      	str	r2, [r3, #44]	@ 0x2c
		if(ramp->currentDuty > ramp->transitionTarget){
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	885a      	ldrh	r2, [r3, #2]
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	8bdb      	ldrh	r3, [r3, #30]
 8004792:	429a      	cmp	r2, r3
 8004794:	d94d      	bls.n	8004832 <ExecRampDuty+0x1da>
			ramp->currentDutyF -= ramp->dDuty_F_transition;
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	ed93 7a01 	vldr	s14, [r3, #4]
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	edd3 7a09 	vldr	s15, [r3, #36]	@ 0x24
 80047a2:	ee77 7a67 	vsub.f32	s15, s14, s15
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	edc3 7a01 	vstr	s15, [r3, #4]
			ramp->currentDuty = (uint16_t)(ramp->currentDutyF);
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	edd3 7a01 	vldr	s15, [r3, #4]
 80047b2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80047b6:	ee17 3a90 	vmov	r3, s15
 80047ba:	b29a      	uxth	r2, r3
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	805a      	strh	r2, [r3, #2]
			if(ramp->currentDuty <= ramp->transitionTarget){
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	885a      	ldrh	r2, [r3, #2]
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	8bdb      	ldrh	r3, [r3, #30]
 80047c8:	429a      	cmp	r2, r3
 80047ca:	d832      	bhi.n	8004832 <ExecRampDuty+0x1da>
				ramp->currentDuty  = ramp->transitionTarget;
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	8bda      	ldrh	r2, [r3, #30]
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	805a      	strh	r2, [r3, #2]
				ramp->rampPhase = RAMP_STEADY;
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	2202      	movs	r2, #2
 80047d8:	771a      	strb	r2, [r3, #28]
				ramp->rampTimer = 0;
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	f04f 0200 	mov.w	r2, #0
 80047e0:	62da      	str	r2, [r3, #44]	@ 0x2c
}
 80047e2:	e026      	b.n	8004832 <ExecRampDuty+0x1da>
	else if (ramp->rampPhase == RAMP_DOWN){
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	7f1b      	ldrb	r3, [r3, #28]
 80047e8:	2b01      	cmp	r3, #1
 80047ea:	d122      	bne.n	8004832 <ExecRampDuty+0x1da>
			ramp->currentDutyF -= ramp->dDuty_F_RD;
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	ed93 7a01 	vldr	s14, [r3, #4]
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	edd3 7a03 	vldr	s15, [r3, #12]
 80047f8:	ee77 7a67 	vsub.f32	s15, s14, s15
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	edc3 7a01 	vstr	s15, [r3, #4]
			ramp->currentDuty = (uint16_t)(ramp->currentDutyF);
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	edd3 7a01 	vldr	s15, [r3, #4]
 8004808:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800480c:	ee17 3a90 	vmov	r3, s15
 8004810:	b29a      	uxth	r2, r3
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	805a      	strh	r2, [r3, #2]
			if(ramp->currentDuty <= 0){
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	885b      	ldrh	r3, [r3, #2]
 800481a:	2b00      	cmp	r3, #0
 800481c:	d109      	bne.n	8004832 <ExecRampDuty+0x1da>
				ramp->currentDuty  = 0;
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	2200      	movs	r2, #0
 8004822:	805a      	strh	r2, [r3, #2]
				ramp->rampPhase = RAMP_WAIT;
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	2204      	movs	r2, #4
 8004828:	771a      	strb	r2, [r3, #28]
				ramp->rampTimer = 0;
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	f04f 0200 	mov.w	r2, #0
 8004830:	62da      	str	r2, [r3, #44]	@ 0x2c
}
 8004832:	bf00      	nop
 8004834:	370c      	adds	r7, #12
 8004836:	46bd      	mov	sp, r7
 8004838:	f85d 7b04 	ldr.w	r7, [sp], #4
 800483c:	4770      	bx	lr
	...

08004840 <ChangeDuty>:


void  ChangeDuty(RampDuty *r){
 8004840:	b480      	push	{r7}
 8004842:	b085      	sub	sp, #20
 8004844:	af00      	add	r7, sp, #0
 8004846:	6078      	str	r0, [r7, #4]
	uint16_t deltaDuty = 0;
 8004848:	2300      	movs	r3, #0
 800484a:	81fb      	strh	r3, [r7, #14]
	uint16_t totalSteps = 0;
 800484c:	2300      	movs	r3, #0
 800484e:	81bb      	strh	r3, [r7, #12]
	if (r->transitionTarget > r->currentDuty){
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	8bda      	ldrh	r2, [r3, #30]
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	885b      	ldrh	r3, [r3, #2]
 8004858:	429a      	cmp	r2, r3
 800485a:	d906      	bls.n	800486a <ChangeDuty+0x2a>
		deltaDuty = r->transitionTarget - r->currentDuty;
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	8bda      	ldrh	r2, [r3, #30]
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	885b      	ldrh	r3, [r3, #2]
 8004864:	1ad3      	subs	r3, r2, r3
 8004866:	81fb      	strh	r3, [r7, #14]
 8004868:	e00e      	b.n	8004888 <ChangeDuty+0x48>
	}else if (r->transitionTarget < r->currentDuty){
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	8bda      	ldrh	r2, [r3, #30]
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	885b      	ldrh	r3, [r3, #2]
 8004872:	429a      	cmp	r2, r3
 8004874:	d206      	bcs.n	8004884 <ChangeDuty+0x44>
		deltaDuty = r->currentDuty - r->transitionTarget;
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	885a      	ldrh	r2, [r3, #2]
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	8bdb      	ldrh	r3, [r3, #30]
 800487e:	1ad3      	subs	r3, r2, r3
 8004880:	81fb      	strh	r3, [r7, #14]
 8004882:	e001      	b.n	8004888 <ChangeDuty+0x48>
	}else{
		deltaDuty = 0;
 8004884:	2300      	movs	r3, #0
 8004886:	81fb      	strh	r3, [r7, #14]
	}
	totalSteps = r->transitionTime_ms/((uint16_t)(r->ramp_callingTime_s*1000));
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	8c1a      	ldrh	r2, [r3, #32]
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	edd3 7a0a 	vldr	s15, [r3, #40]	@ 0x28
 8004892:	ed9f 7a13 	vldr	s14, [pc, #76]	@ 80048e0 <ChangeDuty+0xa0>
 8004896:	ee67 7a87 	vmul.f32	s15, s15, s14
 800489a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800489e:	ee17 3a90 	vmov	r3, s15
 80048a2:	b29b      	uxth	r3, r3
 80048a4:	fbb2 f3f3 	udiv	r3, r2, r3
 80048a8:	81bb      	strh	r3, [r7, #12]
	if (totalSteps == 0){
 80048aa:	89bb      	ldrh	r3, [r7, #12]
 80048ac:	2b00      	cmp	r3, #0
 80048ae:	d101      	bne.n	80048b4 <ChangeDuty+0x74>
		totalSteps = 1;
 80048b0:	2301      	movs	r3, #1
 80048b2:	81bb      	strh	r3, [r7, #12]
	}
	r->dDuty_F_transition = (float)deltaDuty/totalSteps;
 80048b4:	89fb      	ldrh	r3, [r7, #14]
 80048b6:	ee07 3a90 	vmov	s15, r3
 80048ba:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80048be:	89bb      	ldrh	r3, [r7, #12]
 80048c0:	ee07 3a90 	vmov	s15, r3
 80048c4:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80048c8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	edc3 7a09 	vstr	s15, [r3, #36]	@ 0x24
}
 80048d2:	bf00      	nop
 80048d4:	3714      	adds	r7, #20
 80048d6:	46bd      	mov	sp, r7
 80048d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048dc:	4770      	bx	lr
 80048de:	bf00      	nop
 80048e0:	447a0000 	.word	0x447a0000

080048e4 <Recalculate_RampDuty_RampRates>:

// when we get a change Duty, we want to do ramp UP/ramp Down times with that
// new target.
void Recalculate_RampDuty_RampRates(RampDuty *ramp,uint16_t newTarget){
 80048e4:	b480      	push	{r7}
 80048e6:	b085      	sub	sp, #20
 80048e8:	af00      	add	r7, sp, #0
 80048ea:	6078      	str	r0, [r7, #4]
 80048ec:	460b      	mov	r3, r1
 80048ee:	807b      	strh	r3, [r7, #2]
	uint16_t totalSteps = 0;
 80048f0:	2300      	movs	r3, #0
 80048f2:	81fb      	strh	r3, [r7, #14]
	//For RampUp
	ramp->finalTargetDuty = newTarget;
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	887a      	ldrh	r2, [r7, #2]
 80048f8:	801a      	strh	r2, [r3, #0]
	totalSteps = ramp->rampUpTime_ms/((uint16_t)(ramp->ramp_callingTime_s*1000));
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	695b      	ldr	r3, [r3, #20]
 80048fe:	687a      	ldr	r2, [r7, #4]
 8004900:	edd2 7a0a 	vldr	s15, [r2, #40]	@ 0x28
 8004904:	ed9f 7a26 	vldr	s14, [pc, #152]	@ 80049a0 <Recalculate_RampDuty_RampRates+0xbc>
 8004908:	ee67 7a87 	vmul.f32	s15, s15, s14
 800490c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004910:	ee17 2a90 	vmov	r2, s15
 8004914:	b292      	uxth	r2, r2
 8004916:	fb93 f3f2 	sdiv	r3, r3, r2
 800491a:	81fb      	strh	r3, [r7, #14]
	if (totalSteps == 0){
 800491c:	89fb      	ldrh	r3, [r7, #14]
 800491e:	2b00      	cmp	r3, #0
 8004920:	d101      	bne.n	8004926 <Recalculate_RampDuty_RampRates+0x42>
		totalSteps = 1;
 8004922:	2301      	movs	r3, #1
 8004924:	81fb      	strh	r3, [r7, #14]
	}
	ramp->dDuty_F_RU = ((float)ramp->finalTargetDuty)/totalSteps;
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	881b      	ldrh	r3, [r3, #0]
 800492a:	ee07 3a90 	vmov	s15, r3
 800492e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004932:	89fb      	ldrh	r3, [r7, #14]
 8004934:	ee07 3a90 	vmov	s15, r3
 8004938:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800493c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	edc3 7a02 	vstr	s15, [r3, #8]

	//For RampDown
	totalSteps = ramp->rampDownTime_ms/((uint16_t)(ramp->ramp_callingTime_s*1000));
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	699b      	ldr	r3, [r3, #24]
 800494a:	687a      	ldr	r2, [r7, #4]
 800494c:	edd2 7a0a 	vldr	s15, [r2, #40]	@ 0x28
 8004950:	ed9f 7a13 	vldr	s14, [pc, #76]	@ 80049a0 <Recalculate_RampDuty_RampRates+0xbc>
 8004954:	ee67 7a87 	vmul.f32	s15, s15, s14
 8004958:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800495c:	ee17 2a90 	vmov	r2, s15
 8004960:	b292      	uxth	r2, r2
 8004962:	fb93 f3f2 	sdiv	r3, r3, r2
 8004966:	81fb      	strh	r3, [r7, #14]
	if (totalSteps == 0){
 8004968:	89fb      	ldrh	r3, [r7, #14]
 800496a:	2b00      	cmp	r3, #0
 800496c:	d101      	bne.n	8004972 <Recalculate_RampDuty_RampRates+0x8e>
		totalSteps = 1;
 800496e:	2301      	movs	r3, #1
 8004970:	81fb      	strh	r3, [r7, #14]
	}
	ramp->dDuty_F_RD = ((float)ramp->finalTargetDuty)/totalSteps;
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	881b      	ldrh	r3, [r3, #0]
 8004976:	ee07 3a90 	vmov	s15, r3
 800497a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800497e:	89fb      	ldrh	r3, [r7, #14]
 8004980:	ee07 3a90 	vmov	s15, r3
 8004984:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8004988:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	edc3 7a03 	vstr	s15, [r3, #12]
}
 8004992:	bf00      	nop
 8004994:	3714      	adds	r7, #20
 8004996:	46bd      	mov	sp, r7
 8004998:	f85d 7b04 	ldr.w	r7, [sp], #4
 800499c:	4770      	bx	lr
 800499e:	bf00      	nop
 80049a0:	447a0000 	.word	0x447a0000

080049a4 <InitRampRPMStruct>:
 *      Author: harsha
 */

#include "Ramp.h"

void InitRampRPMStruct(RampRPM *ramp,uint16_t targetRPM,float rampUpTime,float rampDownTime,float rampSteadyTime){
 80049a4:	b480      	push	{r7}
 80049a6:	b089      	sub	sp, #36	@ 0x24
 80049a8:	af00      	add	r7, sp, #0
 80049aa:	6178      	str	r0, [r7, #20]
 80049ac:	460b      	mov	r3, r1
 80049ae:	ed87 0a03 	vstr	s0, [r7, #12]
 80049b2:	edc7 0a02 	vstr	s1, [r7, #8]
 80049b6:	ed87 1a01 	vstr	s2, [r7, #4]
 80049ba:	827b      	strh	r3, [r7, #18]
	uint16_t totalSteps  = 0;
 80049bc:	2300      	movs	r3, #0
 80049be:	83fb      	strh	r3, [r7, #30]
	ramp->ramp_callingTime_s = 0.020f;
 80049c0:	697b      	ldr	r3, [r7, #20]
 80049c2:	4a37      	ldr	r2, [pc, #220]	@ (8004aa0 <InitRampRPMStruct+0xfc>)
 80049c4:	629a      	str	r2, [r3, #40]	@ 0x28
	ramp->rampUpTime_s = rampUpTime;
 80049c6:	697b      	ldr	r3, [r7, #20]
 80049c8:	68fa      	ldr	r2, [r7, #12]
 80049ca:	621a      	str	r2, [r3, #32]
	ramp->rampDownTime_s = rampDownTime;
 80049cc:	697b      	ldr	r3, [r7, #20]
 80049ce:	68ba      	ldr	r2, [r7, #8]
 80049d0:	625a      	str	r2, [r3, #36]	@ 0x24
	ramp->steadyRunTime_s = rampSteadyTime;
 80049d2:	697b      	ldr	r3, [r7, #20]
 80049d4:	687a      	ldr	r2, [r7, #4]
 80049d6:	61da      	str	r2, [r3, #28]

	ramp->finalTargetRPM = targetRPM;
 80049d8:	697b      	ldr	r3, [r7, #20]
 80049da:	8a7a      	ldrh	r2, [r7, #18]
 80049dc:	801a      	strh	r2, [r3, #0]
	ramp->instTargetRPM_F = 0;
 80049de:	697b      	ldr	r3, [r7, #20]
 80049e0:	f04f 0200 	mov.w	r2, #0
 80049e4:	605a      	str	r2, [r3, #4]
	//For RampUp
	totalSteps = (uint16_t)(ramp->rampUpTime_s/ramp->ramp_callingTime_s);
 80049e6:	697b      	ldr	r3, [r7, #20]
 80049e8:	edd3 6a08 	vldr	s13, [r3, #32]
 80049ec:	697b      	ldr	r3, [r7, #20]
 80049ee:	ed93 7a0a 	vldr	s14, [r3, #40]	@ 0x28
 80049f2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80049f6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80049fa:	ee17 3a90 	vmov	r3, s15
 80049fe:	83fb      	strh	r3, [r7, #30]
	if (totalSteps == 0){
 8004a00:	8bfb      	ldrh	r3, [r7, #30]
 8004a02:	2b00      	cmp	r3, #0
 8004a04:	d101      	bne.n	8004a0a <InitRampRPMStruct+0x66>
		totalSteps = 1;
 8004a06:	2301      	movs	r3, #1
 8004a08:	83fb      	strh	r3, [r7, #30]
	}
	ramp->dRPM_F_RU = ((float)ramp->finalTargetRPM)/totalSteps;
 8004a0a:	697b      	ldr	r3, [r7, #20]
 8004a0c:	881b      	ldrh	r3, [r3, #0]
 8004a0e:	ee07 3a90 	vmov	s15, r3
 8004a12:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004a16:	8bfb      	ldrh	r3, [r7, #30]
 8004a18:	ee07 3a90 	vmov	s15, r3
 8004a1c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8004a20:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004a24:	697b      	ldr	r3, [r7, #20]
 8004a26:	edc3 7a02 	vstr	s15, [r3, #8]

	//For RampDown
	totalSteps = (uint16_t)(ramp->rampDownTime_s/ramp->ramp_callingTime_s);
 8004a2a:	697b      	ldr	r3, [r7, #20]
 8004a2c:	edd3 6a09 	vldr	s13, [r3, #36]	@ 0x24
 8004a30:	697b      	ldr	r3, [r7, #20]
 8004a32:	ed93 7a0a 	vldr	s14, [r3, #40]	@ 0x28
 8004a36:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004a3a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004a3e:	ee17 3a90 	vmov	r3, s15
 8004a42:	83fb      	strh	r3, [r7, #30]
	if (totalSteps == 0){
 8004a44:	8bfb      	ldrh	r3, [r7, #30]
 8004a46:	2b00      	cmp	r3, #0
 8004a48:	d101      	bne.n	8004a4e <InitRampRPMStruct+0xaa>
		totalSteps = 1;
 8004a4a:	2301      	movs	r3, #1
 8004a4c:	83fb      	strh	r3, [r7, #30]
	}
	ramp->dRPM_F_RD = ((float)ramp->finalTargetRPM)/totalSteps;
 8004a4e:	697b      	ldr	r3, [r7, #20]
 8004a50:	881b      	ldrh	r3, [r3, #0]
 8004a52:	ee07 3a90 	vmov	s15, r3
 8004a56:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004a5a:	8bfb      	ldrh	r3, [r7, #30]
 8004a5c:	ee07 3a90 	vmov	s15, r3
 8004a60:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8004a64:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004a68:	697b      	ldr	r3, [r7, #20]
 8004a6a:	edc3 7a03 	vstr	s15, [r3, #12]

	ramp->rampPhase = RAMP_WAIT;
 8004a6e:	697b      	ldr	r3, [r7, #20]
 8004a70:	2204      	movs	r2, #4
 8004a72:	741a      	strb	r2, [r3, #16]
	ramp->rampTimer = 0;
 8004a74:	697b      	ldr	r3, [r7, #20]
 8004a76:	f04f 0200 	mov.w	r2, #0
 8004a7a:	62da      	str	r2, [r3, #44]	@ 0x2c

	ramp-> transitionTarget = 0;
 8004a7c:	697b      	ldr	r3, [r7, #20]
 8004a7e:	2200      	movs	r2, #0
 8004a80:	825a      	strh	r2, [r3, #18]
	ramp-> transitionTime_s = 0;
 8004a82:	697b      	ldr	r3, [r7, #20]
 8004a84:	f04f 0200 	mov.w	r2, #0
 8004a88:	615a      	str	r2, [r3, #20]
	ramp-> dRPM_F_transition = 0;
 8004a8a:	697b      	ldr	r3, [r7, #20]
 8004a8c:	f04f 0200 	mov.w	r2, #0
 8004a90:	619a      	str	r2, [r3, #24]

}
 8004a92:	bf00      	nop
 8004a94:	3724      	adds	r7, #36	@ 0x24
 8004a96:	46bd      	mov	sp, r7
 8004a98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a9c:	4770      	bx	lr
 8004a9e:	bf00      	nop
 8004aa0:	3ca3d70a 	.word	0x3ca3d70a

08004aa4 <StartRampRPM>:
void StartRampRPM(RampRPM *ramp){
 8004aa4:	b480      	push	{r7}
 8004aa6:	b083      	sub	sp, #12
 8004aa8:	af00      	add	r7, sp, #0
 8004aaa:	6078      	str	r0, [r7, #4]
	ramp->rampPhase = RAMP_UP;
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	2200      	movs	r2, #0
 8004ab0:	741a      	strb	r2, [r3, #16]
}
 8004ab2:	bf00      	nop
 8004ab4:	370c      	adds	r7, #12
 8004ab6:	46bd      	mov	sp, r7
 8004ab8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004abc:	4770      	bx	lr

08004abe <StartRampDownRPM>:

void StartRampDownRPM(RampRPM *ramp){
 8004abe:	b480      	push	{r7}
 8004ac0:	b083      	sub	sp, #12
 8004ac2:	af00      	add	r7, sp, #0
 8004ac4:	6078      	str	r0, [r7, #4]
	ramp->rampPhase = RAMP_DOWN;
 8004ac6:	687b      	ldr	r3, [r7, #4]
 8004ac8:	2201      	movs	r2, #1
 8004aca:	741a      	strb	r2, [r3, #16]
}
 8004acc:	bf00      	nop
 8004ace:	370c      	adds	r7, #12
 8004ad0:	46bd      	mov	sp, r7
 8004ad2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ad6:	4770      	bx	lr

08004ad8 <StopRampRPM>:

void StopRampRPM(RampRPM *ramp){
 8004ad8:	b480      	push	{r7}
 8004ada:	b083      	sub	sp, #12
 8004adc:	af00      	add	r7, sp, #0
 8004ade:	6078      	str	r0, [r7, #4]
	ramp->rampPhase = RAMP_WAIT;
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	2204      	movs	r2, #4
 8004ae4:	741a      	strb	r2, [r3, #16]
}
 8004ae6:	bf00      	nop
 8004ae8:	370c      	adds	r7, #12
 8004aea:	46bd      	mov	sp, r7
 8004aec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004af0:	4770      	bx	lr

08004af2 <ExecRampRPM>:
	ramp->rampPhase = RAMP_WAIT;
	ramp->rampTimer = 0;
}


void ExecRampRPM(RampRPM *ramp){
 8004af2:	b480      	push	{r7}
 8004af4:	b083      	sub	sp, #12
 8004af6:	af00      	add	r7, sp, #0
 8004af8:	6078      	str	r0, [r7, #4]
	if(ramp->rampPhase != RAMP_WAIT){
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	7c1b      	ldrb	r3, [r3, #16]
 8004afe:	2b04      	cmp	r3, #4
 8004b00:	d00a      	beq.n	8004b18 <ExecRampRPM+0x26>
		ramp->rampTimer += 	ramp->ramp_callingTime_s;
 8004b02:	687b      	ldr	r3, [r7, #4]
 8004b04:	ed93 7a0b 	vldr	s14, [r3, #44]	@ 0x2c
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	edd3 7a0a 	vldr	s15, [r3, #40]	@ 0x28
 8004b0e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	edc3 7a0b 	vstr	s15, [r3, #44]	@ 0x2c
	}

	if (ramp->rampPhase == RAMP_UP){
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	7c1b      	ldrb	r3, [r3, #16]
 8004b1c:	2b00      	cmp	r3, #0
 8004b1e:	d139      	bne.n	8004b94 <ExecRampRPM+0xa2>
		if(ramp->instTargetRPM_F <= ramp->finalTargetRPM){
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	ed93 7a01 	vldr	s14, [r3, #4]
 8004b26:	687b      	ldr	r3, [r7, #4]
 8004b28:	881b      	ldrh	r3, [r3, #0]
 8004b2a:	ee07 3a90 	vmov	s15, r3
 8004b2e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004b32:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8004b36:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004b3a:	d900      	bls.n	8004b3e <ExecRampRPM+0x4c>
				ramp->rampTimer = 0;
			}
		}
	}

}
 8004b3c:	e0ee      	b.n	8004d1c <ExecRampRPM+0x22a>
			ramp->instTargetRPM_F += ramp->dRPM_F_RU;
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	ed93 7a01 	vldr	s14, [r3, #4]
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	edd3 7a02 	vldr	s15, [r3, #8]
 8004b4a:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004b4e:	687b      	ldr	r3, [r7, #4]
 8004b50:	edc3 7a01 	vstr	s15, [r3, #4]
			if(ramp->instTargetRPM_F >= ramp->finalTargetRPM){
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	ed93 7a01 	vldr	s14, [r3, #4]
 8004b5a:	687b      	ldr	r3, [r7, #4]
 8004b5c:	881b      	ldrh	r3, [r3, #0]
 8004b5e:	ee07 3a90 	vmov	s15, r3
 8004b62:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004b66:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8004b6a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004b6e:	da00      	bge.n	8004b72 <ExecRampRPM+0x80>
}
 8004b70:	e0d4      	b.n	8004d1c <ExecRampRPM+0x22a>
				ramp->instTargetRPM_F  = ramp->finalTargetRPM;
 8004b72:	687b      	ldr	r3, [r7, #4]
 8004b74:	881b      	ldrh	r3, [r3, #0]
 8004b76:	ee07 3a90 	vmov	s15, r3
 8004b7a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004b7e:	687b      	ldr	r3, [r7, #4]
 8004b80:	edc3 7a01 	vstr	s15, [r3, #4]
				ramp->rampPhase = RAMP_STEADY;
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	2202      	movs	r2, #2
 8004b88:	741a      	strb	r2, [r3, #16]
				ramp->rampTimer = 0;
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	f04f 0200 	mov.w	r2, #0
 8004b90:	62da      	str	r2, [r3, #44]	@ 0x2c
}
 8004b92:	e0c3      	b.n	8004d1c <ExecRampRPM+0x22a>
	else if (ramp->rampPhase == RAMP_STEADY){
 8004b94:	687b      	ldr	r3, [r7, #4]
 8004b96:	7c1b      	ldrb	r3, [r3, #16]
 8004b98:	2b02      	cmp	r3, #2
 8004b9a:	d11e      	bne.n	8004bda <ExecRampRPM+0xe8>
		if (ramp->steadyRunTime_s != RUN_FOREVER){
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	edd3 7a07 	vldr	s15, [r3, #28]
 8004ba2:	eebf 7a00 	vmov.f32	s14, #240	@ 0xbf800000 -1.0
 8004ba6:	eef4 7a47 	vcmp.f32	s15, s14
 8004baa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004bae:	f000 80b5 	beq.w	8004d1c <ExecRampRPM+0x22a>
			if (ramp->rampTimer >= ramp->steadyRunTime_s){
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	ed93 7a0b 	vldr	s14, [r3, #44]	@ 0x2c
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	edd3 7a07 	vldr	s15, [r3, #28]
 8004bbe:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8004bc2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004bc6:	da00      	bge.n	8004bca <ExecRampRPM+0xd8>
}
 8004bc8:	e0a8      	b.n	8004d1c <ExecRampRPM+0x22a>
				ramp->rampPhase = RAMP_DOWN;
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	2201      	movs	r2, #1
 8004bce:	741a      	strb	r2, [r3, #16]
				ramp->rampTimer = 0;
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	f04f 0200 	mov.w	r2, #0
 8004bd6:	62da      	str	r2, [r3, #44]	@ 0x2c
}
 8004bd8:	e0a0      	b.n	8004d1c <ExecRampRPM+0x22a>
	else if (ramp->rampPhase == RAMP_CHANGE){
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	7c1b      	ldrb	r3, [r3, #16]
 8004bde:	2b08      	cmp	r3, #8
 8004be0:	d170      	bne.n	8004cc4 <ExecRampRPM+0x1d2>
			if(ramp->instTargetRPM_F < ramp->transitionTarget){
 8004be2:	687b      	ldr	r3, [r7, #4]
 8004be4:	ed93 7a01 	vldr	s14, [r3, #4]
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	8a5b      	ldrh	r3, [r3, #18]
 8004bec:	ee07 3a90 	vmov	s15, r3
 8004bf0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004bf4:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8004bf8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004bfc:	d528      	bpl.n	8004c50 <ExecRampRPM+0x15e>
				ramp->instTargetRPM_F += ramp->dRPM_F_transition;
 8004bfe:	687b      	ldr	r3, [r7, #4]
 8004c00:	ed93 7a01 	vldr	s14, [r3, #4]
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	edd3 7a06 	vldr	s15, [r3, #24]
 8004c0a:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004c0e:	687b      	ldr	r3, [r7, #4]
 8004c10:	edc3 7a01 	vstr	s15, [r3, #4]
				if(ramp->instTargetRPM_F >= ramp->transitionTarget){
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	ed93 7a01 	vldr	s14, [r3, #4]
 8004c1a:	687b      	ldr	r3, [r7, #4]
 8004c1c:	8a5b      	ldrh	r3, [r3, #18]
 8004c1e:	ee07 3a90 	vmov	s15, r3
 8004c22:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004c26:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8004c2a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004c2e:	db0f      	blt.n	8004c50 <ExecRampRPM+0x15e>
					ramp->instTargetRPM_F  = ramp->transitionTarget;
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	8a5b      	ldrh	r3, [r3, #18]
 8004c34:	ee07 3a90 	vmov	s15, r3
 8004c38:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	edc3 7a01 	vstr	s15, [r3, #4]
					ramp->rampPhase = RAMP_STEADY;
 8004c42:	687b      	ldr	r3, [r7, #4]
 8004c44:	2202      	movs	r2, #2
 8004c46:	741a      	strb	r2, [r3, #16]
					ramp->rampTimer = 0;
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	f04f 0200 	mov.w	r2, #0
 8004c4e:	62da      	str	r2, [r3, #44]	@ 0x2c
			if(ramp->instTargetRPM_F > ramp->transitionTarget){
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	ed93 7a01 	vldr	s14, [r3, #4]
 8004c56:	687b      	ldr	r3, [r7, #4]
 8004c58:	8a5b      	ldrh	r3, [r3, #18]
 8004c5a:	ee07 3a90 	vmov	s15, r3
 8004c5e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004c62:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8004c66:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004c6a:	dc00      	bgt.n	8004c6e <ExecRampRPM+0x17c>
}
 8004c6c:	e056      	b.n	8004d1c <ExecRampRPM+0x22a>
				ramp->instTargetRPM_F -= ramp->dRPM_F_transition;
 8004c6e:	687b      	ldr	r3, [r7, #4]
 8004c70:	ed93 7a01 	vldr	s14, [r3, #4]
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	edd3 7a06 	vldr	s15, [r3, #24]
 8004c7a:	ee77 7a67 	vsub.f32	s15, s14, s15
 8004c7e:	687b      	ldr	r3, [r7, #4]
 8004c80:	edc3 7a01 	vstr	s15, [r3, #4]
				if(ramp->instTargetRPM_F <= ramp->transitionTarget){
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	ed93 7a01 	vldr	s14, [r3, #4]
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	8a5b      	ldrh	r3, [r3, #18]
 8004c8e:	ee07 3a90 	vmov	s15, r3
 8004c92:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004c96:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8004c9a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004c9e:	d900      	bls.n	8004ca2 <ExecRampRPM+0x1b0>
}
 8004ca0:	e03c      	b.n	8004d1c <ExecRampRPM+0x22a>
					ramp->instTargetRPM_F  = ramp->transitionTarget;
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	8a5b      	ldrh	r3, [r3, #18]
 8004ca6:	ee07 3a90 	vmov	s15, r3
 8004caa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004cae:	687b      	ldr	r3, [r7, #4]
 8004cb0:	edc3 7a01 	vstr	s15, [r3, #4]
					ramp->rampPhase = RAMP_STEADY;
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	2202      	movs	r2, #2
 8004cb8:	741a      	strb	r2, [r3, #16]
					ramp->rampTimer = 0;
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	f04f 0200 	mov.w	r2, #0
 8004cc0:	62da      	str	r2, [r3, #44]	@ 0x2c
}
 8004cc2:	e02b      	b.n	8004d1c <ExecRampRPM+0x22a>
	else if (ramp->rampPhase == RAMP_DOWN){
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	7c1b      	ldrb	r3, [r3, #16]
 8004cc8:	2b01      	cmp	r3, #1
 8004cca:	d127      	bne.n	8004d1c <ExecRampRPM+0x22a>
		if(ramp->instTargetRPM_F >= 0){
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	edd3 7a01 	vldr	s15, [r3, #4]
 8004cd2:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8004cd6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004cda:	da00      	bge.n	8004cde <ExecRampRPM+0x1ec>
}
 8004cdc:	e01e      	b.n	8004d1c <ExecRampRPM+0x22a>
			ramp->instTargetRPM_F -= ramp->dRPM_F_RD;
 8004cde:	687b      	ldr	r3, [r7, #4]
 8004ce0:	ed93 7a01 	vldr	s14, [r3, #4]
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	edd3 7a03 	vldr	s15, [r3, #12]
 8004cea:	ee77 7a67 	vsub.f32	s15, s14, s15
 8004cee:	687b      	ldr	r3, [r7, #4]
 8004cf0:	edc3 7a01 	vstr	s15, [r3, #4]
			if(ramp->instTargetRPM_F <= 0){
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	edd3 7a01 	vldr	s15, [r3, #4]
 8004cfa:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8004cfe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004d02:	d900      	bls.n	8004d06 <ExecRampRPM+0x214>
}
 8004d04:	e00a      	b.n	8004d1c <ExecRampRPM+0x22a>
				ramp->instTargetRPM_F  = 0;
 8004d06:	687b      	ldr	r3, [r7, #4]
 8004d08:	f04f 0200 	mov.w	r2, #0
 8004d0c:	605a      	str	r2, [r3, #4]
				ramp->rampPhase = RAMP_WAIT;
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	2204      	movs	r2, #4
 8004d12:	741a      	strb	r2, [r3, #16]
				ramp->rampTimer = 0;
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	f04f 0200 	mov.w	r2, #0
 8004d1a:	62da      	str	r2, [r3, #44]	@ 0x2c
}
 8004d1c:	bf00      	nop
 8004d1e:	370c      	adds	r7, #12
 8004d20:	46bd      	mov	sp, r7
 8004d22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d26:	4770      	bx	lr

08004d28 <ChangeRPM>:

void  ChangeRPM(RampRPM *r,uint16_t transitionTarget,float transitionTime_s){
 8004d28:	b480      	push	{r7}
 8004d2a:	b087      	sub	sp, #28
 8004d2c:	af00      	add	r7, sp, #0
 8004d2e:	60f8      	str	r0, [r7, #12]
 8004d30:	460b      	mov	r3, r1
 8004d32:	ed87 0a01 	vstr	s0, [r7, #4]
 8004d36:	817b      	strh	r3, [r7, #10]
	uint16_t deltaRPM = 0;
 8004d38:	2300      	movs	r3, #0
 8004d3a:	82fb      	strh	r3, [r7, #22]
	uint16_t totalSteps = 0;
 8004d3c:	2300      	movs	r3, #0
 8004d3e:	82bb      	strh	r3, [r7, #20]
	r->transitionTarget = transitionTarget;
 8004d40:	68fb      	ldr	r3, [r7, #12]
 8004d42:	897a      	ldrh	r2, [r7, #10]
 8004d44:	825a      	strh	r2, [r3, #18]
	r->transitionTime_s = transitionTime_s;
 8004d46:	68fb      	ldr	r3, [r7, #12]
 8004d48:	687a      	ldr	r2, [r7, #4]
 8004d4a:	615a      	str	r2, [r3, #20]
	r->finalTargetRPM = r->transitionTarget;
 8004d4c:	68fb      	ldr	r3, [r7, #12]
 8004d4e:	8a5a      	ldrh	r2, [r3, #18]
 8004d50:	68fb      	ldr	r3, [r7, #12]
 8004d52:	801a      	strh	r2, [r3, #0]
	if (r->transitionTarget > r->instTargetRPM_F){
 8004d54:	68fb      	ldr	r3, [r7, #12]
 8004d56:	8a5b      	ldrh	r3, [r3, #18]
 8004d58:	ee07 3a90 	vmov	s15, r3
 8004d5c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8004d60:	68fb      	ldr	r3, [r7, #12]
 8004d62:	edd3 7a01 	vldr	s15, [r3, #4]
 8004d66:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8004d6a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004d6e:	dd10      	ble.n	8004d92 <ChangeRPM+0x6a>
		deltaRPM = r->transitionTarget - r->instTargetRPM_F;
 8004d70:	68fb      	ldr	r3, [r7, #12]
 8004d72:	8a5b      	ldrh	r3, [r3, #18]
 8004d74:	ee07 3a90 	vmov	s15, r3
 8004d78:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8004d7c:	68fb      	ldr	r3, [r7, #12]
 8004d7e:	edd3 7a01 	vldr	s15, [r3, #4]
 8004d82:	ee77 7a67 	vsub.f32	s15, s14, s15
 8004d86:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004d8a:	ee17 3a90 	vmov	r3, s15
 8004d8e:	82fb      	strh	r3, [r7, #22]
 8004d90:	e020      	b.n	8004dd4 <ChangeRPM+0xac>
	}else if (r->transitionTarget < r->instTargetRPM_F){
 8004d92:	68fb      	ldr	r3, [r7, #12]
 8004d94:	8a5b      	ldrh	r3, [r3, #18]
 8004d96:	ee07 3a90 	vmov	s15, r3
 8004d9a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8004d9e:	68fb      	ldr	r3, [r7, #12]
 8004da0:	edd3 7a01 	vldr	s15, [r3, #4]
 8004da4:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8004da8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004dac:	d510      	bpl.n	8004dd0 <ChangeRPM+0xa8>
		deltaRPM = r->instTargetRPM_F - r->transitionTarget;
 8004dae:	68fb      	ldr	r3, [r7, #12]
 8004db0:	ed93 7a01 	vldr	s14, [r3, #4]
 8004db4:	68fb      	ldr	r3, [r7, #12]
 8004db6:	8a5b      	ldrh	r3, [r3, #18]
 8004db8:	ee07 3a90 	vmov	s15, r3
 8004dbc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004dc0:	ee77 7a67 	vsub.f32	s15, s14, s15
 8004dc4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004dc8:	ee17 3a90 	vmov	r3, s15
 8004dcc:	82fb      	strh	r3, [r7, #22]
 8004dce:	e001      	b.n	8004dd4 <ChangeRPM+0xac>
	}else{
		deltaRPM = 0;
 8004dd0:	2300      	movs	r3, #0
 8004dd2:	82fb      	strh	r3, [r7, #22]
	}
	totalSteps = r->transitionTime_s/r->ramp_callingTime_s;
 8004dd4:	68fb      	ldr	r3, [r7, #12]
 8004dd6:	edd3 6a05 	vldr	s13, [r3, #20]
 8004dda:	68fb      	ldr	r3, [r7, #12]
 8004ddc:	ed93 7a0a 	vldr	s14, [r3, #40]	@ 0x28
 8004de0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004de4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004de8:	ee17 3a90 	vmov	r3, s15
 8004dec:	82bb      	strh	r3, [r7, #20]
	if (totalSteps == 0){
 8004dee:	8abb      	ldrh	r3, [r7, #20]
 8004df0:	2b00      	cmp	r3, #0
 8004df2:	d101      	bne.n	8004df8 <ChangeRPM+0xd0>
		totalSteps = 1;
 8004df4:	2301      	movs	r3, #1
 8004df6:	82bb      	strh	r3, [r7, #20]
	}
	r->dRPM_F_transition = ((float)deltaRPM)/totalSteps;
 8004df8:	8afb      	ldrh	r3, [r7, #22]
 8004dfa:	ee07 3a90 	vmov	s15, r3
 8004dfe:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004e02:	8abb      	ldrh	r3, [r7, #20]
 8004e04:	ee07 3a90 	vmov	s15, r3
 8004e08:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8004e0c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004e10:	68fb      	ldr	r3, [r7, #12]
 8004e12:	edc3 7a06 	vstr	s15, [r3, #24]
}
 8004e16:	bf00      	nop
 8004e18:	371c      	adds	r7, #28
 8004e1a:	46bd      	mov	sp, r7
 8004e1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e20:	4770      	bx	lr

08004e22 <Recalculate_RampRPM_RampRates>:

// when we get a change RPM for the bobbin, we want to do ramp UP/ramp Down times with that
// new target.(this is used to ramo down to zero, and ramp up from zero)
void Recalculate_RampRPM_RampRates(RampRPM *ramp,uint16_t newTarget){
 8004e22:	b480      	push	{r7}
 8004e24:	b085      	sub	sp, #20
 8004e26:	af00      	add	r7, sp, #0
 8004e28:	6078      	str	r0, [r7, #4]
 8004e2a:	460b      	mov	r3, r1
 8004e2c:	807b      	strh	r3, [r7, #2]
	uint16_t totalSteps = 0;
 8004e2e:	2300      	movs	r3, #0
 8004e30:	81fb      	strh	r3, [r7, #14]
	//For RampUp
	ramp->finalTargetRPM = newTarget;
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	887a      	ldrh	r2, [r7, #2]
 8004e36:	801a      	strh	r2, [r3, #0]
	totalSteps = ramp->rampUpTime_s/ramp->ramp_callingTime_s;
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	edd3 6a08 	vldr	s13, [r3, #32]
 8004e3e:	687b      	ldr	r3, [r7, #4]
 8004e40:	ed93 7a0a 	vldr	s14, [r3, #40]	@ 0x28
 8004e44:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004e48:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004e4c:	ee17 3a90 	vmov	r3, s15
 8004e50:	81fb      	strh	r3, [r7, #14]
	if (totalSteps == 0){
 8004e52:	89fb      	ldrh	r3, [r7, #14]
 8004e54:	2b00      	cmp	r3, #0
 8004e56:	d101      	bne.n	8004e5c <Recalculate_RampRPM_RampRates+0x3a>
		totalSteps = 1;
 8004e58:	2301      	movs	r3, #1
 8004e5a:	81fb      	strh	r3, [r7, #14]
	}
	ramp->dRPM_F_RU = ((float)ramp->finalTargetRPM)/totalSteps;
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	881b      	ldrh	r3, [r3, #0]
 8004e60:	ee07 3a90 	vmov	s15, r3
 8004e64:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004e68:	89fb      	ldrh	r3, [r7, #14]
 8004e6a:	ee07 3a90 	vmov	s15, r3
 8004e6e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8004e72:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004e76:	687b      	ldr	r3, [r7, #4]
 8004e78:	edc3 7a02 	vstr	s15, [r3, #8]

	//For RampDown
	totalSteps = ramp->rampDownTime_s/ramp->ramp_callingTime_s;
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	edd3 6a09 	vldr	s13, [r3, #36]	@ 0x24
 8004e82:	687b      	ldr	r3, [r7, #4]
 8004e84:	ed93 7a0a 	vldr	s14, [r3, #40]	@ 0x28
 8004e88:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004e8c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004e90:	ee17 3a90 	vmov	r3, s15
 8004e94:	81fb      	strh	r3, [r7, #14]
	if (totalSteps == 0){
 8004e96:	89fb      	ldrh	r3, [r7, #14]
 8004e98:	2b00      	cmp	r3, #0
 8004e9a:	d101      	bne.n	8004ea0 <Recalculate_RampRPM_RampRates+0x7e>
		totalSteps = 1;
 8004e9c:	2301      	movs	r3, #1
 8004e9e:	81fb      	strh	r3, [r7, #14]
	}
	ramp->dRPM_F_RD = ((float)ramp->finalTargetRPM)/totalSteps;
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	881b      	ldrh	r3, [r3, #0]
 8004ea4:	ee07 3a90 	vmov	s15, r3
 8004ea8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004eac:	89fb      	ldrh	r3, [r7, #14]
 8004eae:	ee07 3a90 	vmov	s15, r3
 8004eb2:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8004eb6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004eba:	687b      	ldr	r3, [r7, #4]
 8004ebc:	edc3 7a03 	vstr	s15, [r3, #12]
}
 8004ec0:	bf00      	nop
 8004ec2:	3714      	adds	r7, #20
 8004ec4:	46bd      	mov	sp, r7
 8004ec6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004eca:	4770      	bx	lr

08004ecc <updateSpeedCalc>:
 *  Created on: 25-Apr-2024
 *      Author: harsha
 */
#include "SpeedSensor.h"

void updateSpeedCalc(Speed *s, PositionSensor *ps){
 8004ecc:	b480      	push	{r7}
 8004ece:	b085      	sub	sp, #20
 8004ed0:	af00      	add	r7, sp, #0
 8004ed2:	6078      	str	r0, [r7, #4]
 8004ed4:	6039      	str	r1, [r7, #0]
	//get one ms position change
	s->loopCounter ++;
 8004ed6:	687b      	ldr	r3, [r7, #4]
 8004ed8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004eda:	1c5a      	adds	r2, r3, #1
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	651a      	str	r2, [r3, #80]	@ 0x50

	if (s->loopCounter == 9){
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004ee4:	2b09      	cmp	r3, #9
 8004ee6:	f040 8096 	bne.w	8005016 <updateSpeedCalc+0x14a>
		s->totalDeltaRads = ps->multiturn_mech_radians - s->prevMechRads;
 8004eea:	683b      	ldr	r3, [r7, #0]
 8004eec:	ed93 7a14 	vldr	s14, [r3, #80]	@ 0x50
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	edd3 7a15 	vldr	s15, [r3, #84]	@ 0x54
 8004ef6:	ee77 7a67 	vsub.f32	s15, s14, s15
 8004efa:	687b      	ldr	r3, [r7, #4]
 8004efc:	edc3 7a17 	vstr	s15, [r3, #92]	@ 0x5c
		s->prevMechRads = ps->multiturn_mech_radians;
 8004f00:	683b      	ldr	r3, [r7, #0]
 8004f02:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8004f04:	687b      	ldr	r3, [r7, #4]
 8004f06:	655a      	str	r2, [r3, #84]	@ 0x54
		s->loopCounter = 0;
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	2200      	movs	r2, #0
 8004f0c:	651a      	str	r2, [r3, #80]	@ 0x50

		// move the samples one step down
		for (int i=SPEEDSAMPLES-1;i>=1;i--){//i goes from 19 to 1
 8004f0e:	2313      	movs	r3, #19
 8004f10:	60fb      	str	r3, [r7, #12]
 8004f12:	e00d      	b.n	8004f30 <updateSpeedCalc+0x64>
			s->deltaRadsArr[i]=s->deltaRadsArr[i-1];
 8004f14:	68fb      	ldr	r3, [r7, #12]
 8004f16:	3b01      	subs	r3, #1
 8004f18:	687a      	ldr	r2, [r7, #4]
 8004f1a:	009b      	lsls	r3, r3, #2
 8004f1c:	4413      	add	r3, r2
 8004f1e:	681a      	ldr	r2, [r3, #0]
 8004f20:	6879      	ldr	r1, [r7, #4]
 8004f22:	68fb      	ldr	r3, [r7, #12]
 8004f24:	009b      	lsls	r3, r3, #2
 8004f26:	440b      	add	r3, r1
 8004f28:	601a      	str	r2, [r3, #0]
		for (int i=SPEEDSAMPLES-1;i>=1;i--){//i goes from 19 to 1
 8004f2a:	68fb      	ldr	r3, [r7, #12]
 8004f2c:	3b01      	subs	r3, #1
 8004f2e:	60fb      	str	r3, [r7, #12]
 8004f30:	68fb      	ldr	r3, [r7, #12]
 8004f32:	2b00      	cmp	r3, #0
 8004f34:	dcee      	bgt.n	8004f14 <updateSpeedCalc+0x48>
			}
		// put in the new samples
		s->deltaRadsArr[0] = s->totalDeltaRads;
 8004f36:	687b      	ldr	r3, [r7, #4]
 8004f38:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8004f3a:	687b      	ldr	r3, [r7, #4]
 8004f3c:	601a      	str	r2, [r3, #0]

		//now calculate the RPM with the new data
		s->tenSampleSpeed = 0;
 8004f3e:	687b      	ldr	r3, [r7, #4]
 8004f40:	f04f 0200 	mov.w	r2, #0
 8004f44:	661a      	str	r2, [r3, #96]	@ 0x60
		s->twentySampleSpeed = 0;
 8004f46:	687b      	ldr	r3, [r7, #4]
 8004f48:	f04f 0200 	mov.w	r2, #0
 8004f4c:	665a      	str	r2, [r3, #100]	@ 0x64
		for (int i=0;i<SPEEDSAMPLES;i++){
 8004f4e:	2300      	movs	r3, #0
 8004f50:	60bb      	str	r3, [r7, #8]
 8004f52:	e021      	b.n	8004f98 <updateSpeedCalc+0xcc>
			if (i<10){
 8004f54:	68bb      	ldr	r3, [r7, #8]
 8004f56:	2b09      	cmp	r3, #9
 8004f58:	dc0d      	bgt.n	8004f76 <updateSpeedCalc+0xaa>
				s->tenSampleSpeed += s->deltaRadsArr[i];
 8004f5a:	687b      	ldr	r3, [r7, #4]
 8004f5c:	ed93 7a18 	vldr	s14, [r3, #96]	@ 0x60
 8004f60:	687a      	ldr	r2, [r7, #4]
 8004f62:	68bb      	ldr	r3, [r7, #8]
 8004f64:	009b      	lsls	r3, r3, #2
 8004f66:	4413      	add	r3, r2
 8004f68:	edd3 7a00 	vldr	s15, [r3]
 8004f6c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004f70:	687b      	ldr	r3, [r7, #4]
 8004f72:	edc3 7a18 	vstr	s15, [r3, #96]	@ 0x60
			}
			s->twentySampleSpeed += s->deltaRadsArr[i];
 8004f76:	687b      	ldr	r3, [r7, #4]
 8004f78:	ed93 7a19 	vldr	s14, [r3, #100]	@ 0x64
 8004f7c:	687a      	ldr	r2, [r7, #4]
 8004f7e:	68bb      	ldr	r3, [r7, #8]
 8004f80:	009b      	lsls	r3, r3, #2
 8004f82:	4413      	add	r3, r2
 8004f84:	edd3 7a00 	vldr	s15, [r3]
 8004f88:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004f8c:	687b      	ldr	r3, [r7, #4]
 8004f8e:	edc3 7a19 	vstr	s15, [r3, #100]	@ 0x64
		for (int i=0;i<SPEEDSAMPLES;i++){
 8004f92:	68bb      	ldr	r3, [r7, #8]
 8004f94:	3301      	adds	r3, #1
 8004f96:	60bb      	str	r3, [r7, #8]
 8004f98:	68bb      	ldr	r3, [r7, #8]
 8004f9a:	2b13      	cmp	r3, #19
 8004f9c:	ddda      	ble.n	8004f54 <updateSpeedCalc+0x88>
		}

		s->avgTenSamples = s->tenSampleSpeed/10.0f;
 8004f9e:	687b      	ldr	r3, [r7, #4]
 8004fa0:	ed93 7a18 	vldr	s14, [r3, #96]	@ 0x60
 8004fa4:	eef2 6a04 	vmov.f32	s13, #36	@ 0x41200000  10.0
 8004fa8:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8004fac:	687b      	ldr	r3, [r7, #4]
 8004fae:	edc3 7a1a 	vstr	s15, [r3, #104]	@ 0x68
		s->tenSampleRPM = s->avgTenSamples * 1000.0f * 60.0f/TWO_PI_F;
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	edd3 7a1a 	vldr	s15, [r3, #104]	@ 0x68
 8004fb8:	ed9f 7a1a 	vldr	s14, [pc, #104]	@ 8005024 <updateSpeedCalc+0x158>
 8004fbc:	ee67 7a87 	vmul.f32	s15, s15, s14
 8004fc0:	ed9f 7a19 	vldr	s14, [pc, #100]	@ 8005028 <updateSpeedCalc+0x15c>
 8004fc4:	ee27 7a87 	vmul.f32	s14, s15, s14
 8004fc8:	eddf 6a18 	vldr	s13, [pc, #96]	@ 800502c <updateSpeedCalc+0x160>
 8004fcc:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	edc3 7a1c 	vstr	s15, [r3, #112]	@ 0x70
		s->avgTwentySamples = s->twentySampleSpeed/20.0f;
 8004fd6:	687b      	ldr	r3, [r7, #4]
 8004fd8:	ed93 7a19 	vldr	s14, [r3, #100]	@ 0x64
 8004fdc:	eef3 6a04 	vmov.f32	s13, #52	@ 0x41a00000  20.0
 8004fe0:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	edc3 7a1b 	vstr	s15, [r3, #108]	@ 0x6c
		s->twentySampleRPM = s->avgTwentySamples * 1000.0f * 60.0f /TWO_PI_F;
 8004fea:	687b      	ldr	r3, [r7, #4]
 8004fec:	edd3 7a1b 	vldr	s15, [r3, #108]	@ 0x6c
 8004ff0:	ed9f 7a0c 	vldr	s14, [pc, #48]	@ 8005024 <updateSpeedCalc+0x158>
 8004ff4:	ee67 7a87 	vmul.f32	s15, s15, s14
 8004ff8:	ed9f 7a0b 	vldr	s14, [pc, #44]	@ 8005028 <updateSpeedCalc+0x15c>
 8004ffc:	ee27 7a87 	vmul.f32	s14, s15, s14
 8005000:	eddf 6a0a 	vldr	s13, [pc, #40]	@ 800502c <updateSpeedCalc+0x160>
 8005004:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	edc3 7a1d 	vstr	s15, [r3, #116]	@ 0x74
		s->RPM = s->tenSampleRPM;
 800500e:	687b      	ldr	r3, [r7, #4]
 8005010:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8005012:	687b      	ldr	r3, [r7, #4]
 8005014:	679a      	str	r2, [r3, #120]	@ 0x78
	}
}
 8005016:	bf00      	nop
 8005018:	3714      	adds	r7, #20
 800501a:	46bd      	mov	sp, r7
 800501c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005020:	4770      	bx	lr
 8005022:	bf00      	nop
 8005024:	447a0000 	.word	0x447a0000
 8005028:	42700000 	.word	0x42700000
 800502c:	40c90fda 	.word	0x40c90fda

08005030 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8005030:	b580      	push	{r7, lr}
 8005032:	b082      	sub	sp, #8
 8005034:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8005036:	2300      	movs	r3, #0
 8005038:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800503a:	2003      	movs	r0, #3
 800503c:	f000 f9c8 	bl	80053d0 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8005040:	200f      	movs	r0, #15
 8005042:	f000 f80d 	bl	8005060 <HAL_InitTick>
 8005046:	4603      	mov	r3, r0
 8005048:	2b00      	cmp	r3, #0
 800504a:	d002      	beq.n	8005052 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 800504c:	2301      	movs	r3, #1
 800504e:	71fb      	strb	r3, [r7, #7]
 8005050:	e001      	b.n	8005056 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8005052:	f7fd f879 	bl	8002148 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8005056:	79fb      	ldrb	r3, [r7, #7]

}
 8005058:	4618      	mov	r0, r3
 800505a:	3708      	adds	r7, #8
 800505c:	46bd      	mov	sp, r7
 800505e:	bd80      	pop	{r7, pc}

08005060 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8005060:	b580      	push	{r7, lr}
 8005062:	b084      	sub	sp, #16
 8005064:	af00      	add	r7, sp, #0
 8005066:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8005068:	2300      	movs	r3, #0
 800506a:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 800506c:	4b16      	ldr	r3, [pc, #88]	@ (80050c8 <HAL_InitTick+0x68>)
 800506e:	681b      	ldr	r3, [r3, #0]
 8005070:	2b00      	cmp	r3, #0
 8005072:	d022      	beq.n	80050ba <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8005074:	4b15      	ldr	r3, [pc, #84]	@ (80050cc <HAL_InitTick+0x6c>)
 8005076:	681a      	ldr	r2, [r3, #0]
 8005078:	4b13      	ldr	r3, [pc, #76]	@ (80050c8 <HAL_InitTick+0x68>)
 800507a:	681b      	ldr	r3, [r3, #0]
 800507c:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8005080:	fbb1 f3f3 	udiv	r3, r1, r3
 8005084:	fbb2 f3f3 	udiv	r3, r2, r3
 8005088:	4618      	mov	r0, r3
 800508a:	f000 f9d4 	bl	8005436 <HAL_SYSTICK_Config>
 800508e:	4603      	mov	r3, r0
 8005090:	2b00      	cmp	r3, #0
 8005092:	d10f      	bne.n	80050b4 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8005094:	687b      	ldr	r3, [r7, #4]
 8005096:	2b0f      	cmp	r3, #15
 8005098:	d809      	bhi.n	80050ae <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800509a:	2200      	movs	r2, #0
 800509c:	6879      	ldr	r1, [r7, #4]
 800509e:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80050a2:	f000 f9a0 	bl	80053e6 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80050a6:	4a0a      	ldr	r2, [pc, #40]	@ (80050d0 <HAL_InitTick+0x70>)
 80050a8:	687b      	ldr	r3, [r7, #4]
 80050aa:	6013      	str	r3, [r2, #0]
 80050ac:	e007      	b.n	80050be <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 80050ae:	2301      	movs	r3, #1
 80050b0:	73fb      	strb	r3, [r7, #15]
 80050b2:	e004      	b.n	80050be <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 80050b4:	2301      	movs	r3, #1
 80050b6:	73fb      	strb	r3, [r7, #15]
 80050b8:	e001      	b.n	80050be <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 80050ba:	2301      	movs	r3, #1
 80050bc:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80050be:	7bfb      	ldrb	r3, [r7, #15]
}
 80050c0:	4618      	mov	r0, r3
 80050c2:	3710      	adds	r7, #16
 80050c4:	46bd      	mov	sp, r7
 80050c6:	bd80      	pop	{r7, pc}
 80050c8:	20000190 	.word	0x20000190
 80050cc:	20000008 	.word	0x20000008
 80050d0:	2000018c 	.word	0x2000018c

080050d4 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80050d4:	b480      	push	{r7}
 80050d6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80050d8:	4b05      	ldr	r3, [pc, #20]	@ (80050f0 <HAL_IncTick+0x1c>)
 80050da:	681a      	ldr	r2, [r3, #0]
 80050dc:	4b05      	ldr	r3, [pc, #20]	@ (80050f4 <HAL_IncTick+0x20>)
 80050de:	681b      	ldr	r3, [r3, #0]
 80050e0:	4413      	add	r3, r2
 80050e2:	4a03      	ldr	r2, [pc, #12]	@ (80050f0 <HAL_IncTick+0x1c>)
 80050e4:	6013      	str	r3, [r2, #0]
}
 80050e6:	bf00      	nop
 80050e8:	46bd      	mov	sp, r7
 80050ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050ee:	4770      	bx	lr
 80050f0:	200018d4 	.word	0x200018d4
 80050f4:	20000190 	.word	0x20000190

080050f8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80050f8:	b480      	push	{r7}
 80050fa:	af00      	add	r7, sp, #0
  return uwTick;
 80050fc:	4b03      	ldr	r3, [pc, #12]	@ (800510c <HAL_GetTick+0x14>)
 80050fe:	681b      	ldr	r3, [r3, #0]
}
 8005100:	4618      	mov	r0, r3
 8005102:	46bd      	mov	sp, r7
 8005104:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005108:	4770      	bx	lr
 800510a:	bf00      	nop
 800510c:	200018d4 	.word	0x200018d4

08005110 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8005110:	b580      	push	{r7, lr}
 8005112:	b084      	sub	sp, #16
 8005114:	af00      	add	r7, sp, #0
 8005116:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8005118:	f7ff ffee 	bl	80050f8 <HAL_GetTick>
 800511c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800511e:	687b      	ldr	r3, [r7, #4]
 8005120:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8005122:	68fb      	ldr	r3, [r7, #12]
 8005124:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8005128:	d004      	beq.n	8005134 <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 800512a:	4b09      	ldr	r3, [pc, #36]	@ (8005150 <HAL_Delay+0x40>)
 800512c:	681b      	ldr	r3, [r3, #0]
 800512e:	68fa      	ldr	r2, [r7, #12]
 8005130:	4413      	add	r3, r2
 8005132:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8005134:	bf00      	nop
 8005136:	f7ff ffdf 	bl	80050f8 <HAL_GetTick>
 800513a:	4602      	mov	r2, r0
 800513c:	68bb      	ldr	r3, [r7, #8]
 800513e:	1ad3      	subs	r3, r2, r3
 8005140:	68fa      	ldr	r2, [r7, #12]
 8005142:	429a      	cmp	r2, r3
 8005144:	d8f7      	bhi.n	8005136 <HAL_Delay+0x26>
  {
  }
}
 8005146:	bf00      	nop
 8005148:	bf00      	nop
 800514a:	3710      	adds	r7, #16
 800514c:	46bd      	mov	sp, r7
 800514e:	bd80      	pop	{r7, pc}
 8005150:	20000190 	.word	0x20000190

08005154 <HAL_CORDIC_Init>:
  * @brief  Initialize the CORDIC peripheral and the associated handle.
  * @param  hcordic pointer to a CORDIC_HandleTypeDef structure.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CORDIC_Init(CORDIC_HandleTypeDef *hcordic)
{
 8005154:	b580      	push	{r7, lr}
 8005156:	b082      	sub	sp, #8
 8005158:	af00      	add	r7, sp, #0
 800515a:	6078      	str	r0, [r7, #4]
  /* Check the CORDIC handle allocation */
  if (hcordic == NULL)
 800515c:	687b      	ldr	r3, [r7, #4]
 800515e:	2b00      	cmp	r3, #0
 8005160:	d101      	bne.n	8005166 <HAL_CORDIC_Init+0x12>
  {
    /* Return error status */
    return HAL_ERROR;
 8005162:	2301      	movs	r3, #1
 8005164:	e023      	b.n	80051ae <HAL_CORDIC_Init+0x5a>

    /* Initialize the low level hardware */
    hcordic->MspInitCallback(hcordic);
  }
#else
  if (hcordic->State == HAL_CORDIC_STATE_RESET)
 8005166:	687b      	ldr	r3, [r7, #4]
 8005168:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 800516c:	b2db      	uxtb	r3, r3
 800516e:	2b00      	cmp	r3, #0
 8005170:	d106      	bne.n	8005180 <HAL_CORDIC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hcordic->Lock = HAL_UNLOCKED;
 8005172:	687b      	ldr	r3, [r7, #4]
 8005174:	2200      	movs	r2, #0
 8005176:	f883 2020 	strb.w	r2, [r3, #32]

    /* Initialize the low level hardware */
    HAL_CORDIC_MspInit(hcordic);
 800517a:	6878      	ldr	r0, [r7, #4]
 800517c:	f7fd f808 	bl	8002190 <HAL_CORDIC_MspInit>
  }
#endif /* (USE_HAL_CORDIC_REGISTER_CALLBACKS) */

  /* Set CORDIC error code to none */
  hcordic->ErrorCode = HAL_CORDIC_ERROR_NONE;
 8005180:	687b      	ldr	r3, [r7, #4]
 8005182:	2200      	movs	r2, #0
 8005184:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Reset pInBuff and pOutBuff */
  hcordic->pInBuff = NULL;
 8005186:	687b      	ldr	r3, [r7, #4]
 8005188:	2200      	movs	r2, #0
 800518a:	605a      	str	r2, [r3, #4]
  hcordic->pOutBuff = NULL;
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	2200      	movs	r2, #0
 8005190:	609a      	str	r2, [r3, #8]

  /* Reset NbCalcToOrder and NbCalcToGet */
  hcordic->NbCalcToOrder = 0U;
 8005192:	687b      	ldr	r3, [r7, #4]
 8005194:	2200      	movs	r2, #0
 8005196:	60da      	str	r2, [r3, #12]
  hcordic->NbCalcToGet = 0U;
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	2200      	movs	r2, #0
 800519c:	611a      	str	r2, [r3, #16]

  /* Reset DMADirection */
  hcordic->DMADirection = CORDIC_DMA_DIR_NONE;
 800519e:	687b      	ldr	r3, [r7, #4]
 80051a0:	2200      	movs	r2, #0
 80051a2:	615a      	str	r2, [r3, #20]

  /* Change CORDIC peripheral state */
  hcordic->State = HAL_CORDIC_STATE_READY;
 80051a4:	687b      	ldr	r3, [r7, #4]
 80051a6:	2201      	movs	r2, #1
 80051a8:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Return function status */
  return HAL_OK;
 80051ac:	2300      	movs	r3, #0
}
 80051ae:	4618      	mov	r0, r3
 80051b0:	3708      	adds	r7, #8
 80051b2:	46bd      	mov	sp, r7
 80051b4:	bd80      	pop	{r7, pc}
	...

080051b8 <HAL_CORDIC_Configure>:
  * @param  sConfig pointer to a CORDIC_ConfigTypeDef structure that
  *         contains the CORDIC configuration information.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CORDIC_Configure(CORDIC_HandleTypeDef *hcordic, const CORDIC_ConfigTypeDef *sConfig)
{
 80051b8:	b480      	push	{r7}
 80051ba:	b085      	sub	sp, #20
 80051bc:	af00      	add	r7, sp, #0
 80051be:	6078      	str	r0, [r7, #4]
 80051c0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80051c2:	2300      	movs	r3, #0
 80051c4:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_CORDIC_NBREAD(sConfig->NbRead));
  assert_param(IS_CORDIC_INSIZE(sConfig->InSize));
  assert_param(IS_CORDIC_OUTSIZE(sConfig->OutSize));

  /* Check handle state is ready */
  if (hcordic->State == HAL_CORDIC_STATE_READY)
 80051c6:	687b      	ldr	r3, [r7, #4]
 80051c8:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 80051cc:	b2db      	uxtb	r3, r3
 80051ce:	2b01      	cmp	r3, #1
 80051d0:	d11d      	bne.n	800520e <HAL_CORDIC_Configure+0x56>
  {
    /* Apply all configuration parameters in CORDIC control register */
    MODIFY_REG(hcordic->Instance->CSR,                                                         \
 80051d2:	687b      	ldr	r3, [r7, #4]
 80051d4:	681b      	ldr	r3, [r3, #0]
 80051d6:	681a      	ldr	r2, [r3, #0]
 80051d8:	4b14      	ldr	r3, [pc, #80]	@ (800522c <HAL_CORDIC_Configure+0x74>)
 80051da:	4013      	ands	r3, r2
 80051dc:	683a      	ldr	r2, [r7, #0]
 80051de:	6811      	ldr	r1, [r2, #0]
 80051e0:	683a      	ldr	r2, [r7, #0]
 80051e2:	6992      	ldr	r2, [r2, #24]
 80051e4:	4311      	orrs	r1, r2
 80051e6:	683a      	ldr	r2, [r7, #0]
 80051e8:	6852      	ldr	r2, [r2, #4]
 80051ea:	4311      	orrs	r1, r2
 80051ec:	683a      	ldr	r2, [r7, #0]
 80051ee:	6912      	ldr	r2, [r2, #16]
 80051f0:	4311      	orrs	r1, r2
 80051f2:	683a      	ldr	r2, [r7, #0]
 80051f4:	6952      	ldr	r2, [r2, #20]
 80051f6:	4311      	orrs	r1, r2
 80051f8:	683a      	ldr	r2, [r7, #0]
 80051fa:	6892      	ldr	r2, [r2, #8]
 80051fc:	4311      	orrs	r1, r2
 80051fe:	683a      	ldr	r2, [r7, #0]
 8005200:	68d2      	ldr	r2, [r2, #12]
 8005202:	4311      	orrs	r1, r2
 8005204:	687a      	ldr	r2, [r7, #4]
 8005206:	6812      	ldr	r2, [r2, #0]
 8005208:	430b      	orrs	r3, r1
 800520a:	6013      	str	r3, [r2, #0]
 800520c:	e007      	b.n	800521e <HAL_CORDIC_Configure+0x66>
                sConfig->NbWrite | sConfig->NbRead | sConfig->InSize | sConfig->OutSize));
  }
  else
  {
    /* Set CORDIC error code */
    hcordic->ErrorCode |= HAL_CORDIC_ERROR_NOT_READY;
 800520e:	687b      	ldr	r3, [r7, #4]
 8005210:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005212:	f043 0202 	orr.w	r2, r3, #2
 8005216:	687b      	ldr	r3, [r7, #4]
 8005218:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Return error status */
    status = HAL_ERROR;
 800521a:	2301      	movs	r3, #1
 800521c:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 800521e:	7bfb      	ldrb	r3, [r7, #15]
}
 8005220:	4618      	mov	r0, r3
 8005222:	3714      	adds	r7, #20
 8005224:	46bd      	mov	sp, r7
 8005226:	f85d 7b04 	ldr.w	r7, [sp], #4
 800522a:	4770      	bx	lr
 800522c:	ff87f800 	.word	0xff87f800

08005230 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8005230:	b480      	push	{r7}
 8005232:	b085      	sub	sp, #20
 8005234:	af00      	add	r7, sp, #0
 8005236:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8005238:	687b      	ldr	r3, [r7, #4]
 800523a:	f003 0307 	and.w	r3, r3, #7
 800523e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8005240:	4b0c      	ldr	r3, [pc, #48]	@ (8005274 <__NVIC_SetPriorityGrouping+0x44>)
 8005242:	68db      	ldr	r3, [r3, #12]
 8005244:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8005246:	68ba      	ldr	r2, [r7, #8]
 8005248:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 800524c:	4013      	ands	r3, r2
 800524e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8005250:	68fb      	ldr	r3, [r7, #12]
 8005252:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8005254:	68bb      	ldr	r3, [r7, #8]
 8005256:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8005258:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 800525c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005260:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8005262:	4a04      	ldr	r2, [pc, #16]	@ (8005274 <__NVIC_SetPriorityGrouping+0x44>)
 8005264:	68bb      	ldr	r3, [r7, #8]
 8005266:	60d3      	str	r3, [r2, #12]
}
 8005268:	bf00      	nop
 800526a:	3714      	adds	r7, #20
 800526c:	46bd      	mov	sp, r7
 800526e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005272:	4770      	bx	lr
 8005274:	e000ed00 	.word	0xe000ed00

08005278 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8005278:	b480      	push	{r7}
 800527a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800527c:	4b04      	ldr	r3, [pc, #16]	@ (8005290 <__NVIC_GetPriorityGrouping+0x18>)
 800527e:	68db      	ldr	r3, [r3, #12]
 8005280:	0a1b      	lsrs	r3, r3, #8
 8005282:	f003 0307 	and.w	r3, r3, #7
}
 8005286:	4618      	mov	r0, r3
 8005288:	46bd      	mov	sp, r7
 800528a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800528e:	4770      	bx	lr
 8005290:	e000ed00 	.word	0xe000ed00

08005294 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005294:	b480      	push	{r7}
 8005296:	b083      	sub	sp, #12
 8005298:	af00      	add	r7, sp, #0
 800529a:	4603      	mov	r3, r0
 800529c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800529e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80052a2:	2b00      	cmp	r3, #0
 80052a4:	db0b      	blt.n	80052be <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80052a6:	79fb      	ldrb	r3, [r7, #7]
 80052a8:	f003 021f 	and.w	r2, r3, #31
 80052ac:	4907      	ldr	r1, [pc, #28]	@ (80052cc <__NVIC_EnableIRQ+0x38>)
 80052ae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80052b2:	095b      	lsrs	r3, r3, #5
 80052b4:	2001      	movs	r0, #1
 80052b6:	fa00 f202 	lsl.w	r2, r0, r2
 80052ba:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80052be:	bf00      	nop
 80052c0:	370c      	adds	r7, #12
 80052c2:	46bd      	mov	sp, r7
 80052c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052c8:	4770      	bx	lr
 80052ca:	bf00      	nop
 80052cc:	e000e100 	.word	0xe000e100

080052d0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80052d0:	b480      	push	{r7}
 80052d2:	b083      	sub	sp, #12
 80052d4:	af00      	add	r7, sp, #0
 80052d6:	4603      	mov	r3, r0
 80052d8:	6039      	str	r1, [r7, #0]
 80052da:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80052dc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80052e0:	2b00      	cmp	r3, #0
 80052e2:	db0a      	blt.n	80052fa <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80052e4:	683b      	ldr	r3, [r7, #0]
 80052e6:	b2da      	uxtb	r2, r3
 80052e8:	490c      	ldr	r1, [pc, #48]	@ (800531c <__NVIC_SetPriority+0x4c>)
 80052ea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80052ee:	0112      	lsls	r2, r2, #4
 80052f0:	b2d2      	uxtb	r2, r2
 80052f2:	440b      	add	r3, r1
 80052f4:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80052f8:	e00a      	b.n	8005310 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80052fa:	683b      	ldr	r3, [r7, #0]
 80052fc:	b2da      	uxtb	r2, r3
 80052fe:	4908      	ldr	r1, [pc, #32]	@ (8005320 <__NVIC_SetPriority+0x50>)
 8005300:	79fb      	ldrb	r3, [r7, #7]
 8005302:	f003 030f 	and.w	r3, r3, #15
 8005306:	3b04      	subs	r3, #4
 8005308:	0112      	lsls	r2, r2, #4
 800530a:	b2d2      	uxtb	r2, r2
 800530c:	440b      	add	r3, r1
 800530e:	761a      	strb	r2, [r3, #24]
}
 8005310:	bf00      	nop
 8005312:	370c      	adds	r7, #12
 8005314:	46bd      	mov	sp, r7
 8005316:	f85d 7b04 	ldr.w	r7, [sp], #4
 800531a:	4770      	bx	lr
 800531c:	e000e100 	.word	0xe000e100
 8005320:	e000ed00 	.word	0xe000ed00

08005324 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8005324:	b480      	push	{r7}
 8005326:	b089      	sub	sp, #36	@ 0x24
 8005328:	af00      	add	r7, sp, #0
 800532a:	60f8      	str	r0, [r7, #12]
 800532c:	60b9      	str	r1, [r7, #8]
 800532e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8005330:	68fb      	ldr	r3, [r7, #12]
 8005332:	f003 0307 	and.w	r3, r3, #7
 8005336:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8005338:	69fb      	ldr	r3, [r7, #28]
 800533a:	f1c3 0307 	rsb	r3, r3, #7
 800533e:	2b04      	cmp	r3, #4
 8005340:	bf28      	it	cs
 8005342:	2304      	movcs	r3, #4
 8005344:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8005346:	69fb      	ldr	r3, [r7, #28]
 8005348:	3304      	adds	r3, #4
 800534a:	2b06      	cmp	r3, #6
 800534c:	d902      	bls.n	8005354 <NVIC_EncodePriority+0x30>
 800534e:	69fb      	ldr	r3, [r7, #28]
 8005350:	3b03      	subs	r3, #3
 8005352:	e000      	b.n	8005356 <NVIC_EncodePriority+0x32>
 8005354:	2300      	movs	r3, #0
 8005356:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005358:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800535c:	69bb      	ldr	r3, [r7, #24]
 800535e:	fa02 f303 	lsl.w	r3, r2, r3
 8005362:	43da      	mvns	r2, r3
 8005364:	68bb      	ldr	r3, [r7, #8]
 8005366:	401a      	ands	r2, r3
 8005368:	697b      	ldr	r3, [r7, #20]
 800536a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800536c:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8005370:	697b      	ldr	r3, [r7, #20]
 8005372:	fa01 f303 	lsl.w	r3, r1, r3
 8005376:	43d9      	mvns	r1, r3
 8005378:	687b      	ldr	r3, [r7, #4]
 800537a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800537c:	4313      	orrs	r3, r2
         );
}
 800537e:	4618      	mov	r0, r3
 8005380:	3724      	adds	r7, #36	@ 0x24
 8005382:	46bd      	mov	sp, r7
 8005384:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005388:	4770      	bx	lr
	...

0800538c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800538c:	b580      	push	{r7, lr}
 800538e:	b082      	sub	sp, #8
 8005390:	af00      	add	r7, sp, #0
 8005392:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8005394:	687b      	ldr	r3, [r7, #4]
 8005396:	3b01      	subs	r3, #1
 8005398:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800539c:	d301      	bcc.n	80053a2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800539e:	2301      	movs	r3, #1
 80053a0:	e00f      	b.n	80053c2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80053a2:	4a0a      	ldr	r2, [pc, #40]	@ (80053cc <SysTick_Config+0x40>)
 80053a4:	687b      	ldr	r3, [r7, #4]
 80053a6:	3b01      	subs	r3, #1
 80053a8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80053aa:	210f      	movs	r1, #15
 80053ac:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80053b0:	f7ff ff8e 	bl	80052d0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80053b4:	4b05      	ldr	r3, [pc, #20]	@ (80053cc <SysTick_Config+0x40>)
 80053b6:	2200      	movs	r2, #0
 80053b8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80053ba:	4b04      	ldr	r3, [pc, #16]	@ (80053cc <SysTick_Config+0x40>)
 80053bc:	2207      	movs	r2, #7
 80053be:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80053c0:	2300      	movs	r3, #0
}
 80053c2:	4618      	mov	r0, r3
 80053c4:	3708      	adds	r7, #8
 80053c6:	46bd      	mov	sp, r7
 80053c8:	bd80      	pop	{r7, pc}
 80053ca:	bf00      	nop
 80053cc:	e000e010 	.word	0xe000e010

080053d0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80053d0:	b580      	push	{r7, lr}
 80053d2:	b082      	sub	sp, #8
 80053d4:	af00      	add	r7, sp, #0
 80053d6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80053d8:	6878      	ldr	r0, [r7, #4]
 80053da:	f7ff ff29 	bl	8005230 <__NVIC_SetPriorityGrouping>
}
 80053de:	bf00      	nop
 80053e0:	3708      	adds	r7, #8
 80053e2:	46bd      	mov	sp, r7
 80053e4:	bd80      	pop	{r7, pc}

080053e6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80053e6:	b580      	push	{r7, lr}
 80053e8:	b086      	sub	sp, #24
 80053ea:	af00      	add	r7, sp, #0
 80053ec:	4603      	mov	r3, r0
 80053ee:	60b9      	str	r1, [r7, #8]
 80053f0:	607a      	str	r2, [r7, #4]
 80053f2:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80053f4:	f7ff ff40 	bl	8005278 <__NVIC_GetPriorityGrouping>
 80053f8:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80053fa:	687a      	ldr	r2, [r7, #4]
 80053fc:	68b9      	ldr	r1, [r7, #8]
 80053fe:	6978      	ldr	r0, [r7, #20]
 8005400:	f7ff ff90 	bl	8005324 <NVIC_EncodePriority>
 8005404:	4602      	mov	r2, r0
 8005406:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800540a:	4611      	mov	r1, r2
 800540c:	4618      	mov	r0, r3
 800540e:	f7ff ff5f 	bl	80052d0 <__NVIC_SetPriority>
}
 8005412:	bf00      	nop
 8005414:	3718      	adds	r7, #24
 8005416:	46bd      	mov	sp, r7
 8005418:	bd80      	pop	{r7, pc}

0800541a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800541a:	b580      	push	{r7, lr}
 800541c:	b082      	sub	sp, #8
 800541e:	af00      	add	r7, sp, #0
 8005420:	4603      	mov	r3, r0
 8005422:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8005424:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005428:	4618      	mov	r0, r3
 800542a:	f7ff ff33 	bl	8005294 <__NVIC_EnableIRQ>
}
 800542e:	bf00      	nop
 8005430:	3708      	adds	r7, #8
 8005432:	46bd      	mov	sp, r7
 8005434:	bd80      	pop	{r7, pc}

08005436 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8005436:	b580      	push	{r7, lr}
 8005438:	b082      	sub	sp, #8
 800543a:	af00      	add	r7, sp, #0
 800543c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800543e:	6878      	ldr	r0, [r7, #4]
 8005440:	f7ff ffa4 	bl	800538c <SysTick_Config>
 8005444:	4603      	mov	r3, r0
}
 8005446:	4618      	mov	r0, r3
 8005448:	3708      	adds	r7, #8
 800544a:	46bd      	mov	sp, r7
 800544c:	bd80      	pop	{r7, pc}
	...

08005450 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8005450:	b580      	push	{r7, lr}
 8005452:	b084      	sub	sp, #16
 8005454:	af00      	add	r7, sp, #0
 8005456:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8005458:	687b      	ldr	r3, [r7, #4]
 800545a:	2b00      	cmp	r3, #0
 800545c:	d101      	bne.n	8005462 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 800545e:	2301      	movs	r3, #1
 8005460:	e08d      	b.n	800557e <HAL_DMA_Init+0x12e>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8005462:	687b      	ldr	r3, [r7, #4]
 8005464:	681b      	ldr	r3, [r3, #0]
 8005466:	461a      	mov	r2, r3
 8005468:	4b47      	ldr	r3, [pc, #284]	@ (8005588 <HAL_DMA_Init+0x138>)
 800546a:	429a      	cmp	r2, r3
 800546c:	d80f      	bhi.n	800548e <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 800546e:	687b      	ldr	r3, [r7, #4]
 8005470:	681b      	ldr	r3, [r3, #0]
 8005472:	461a      	mov	r2, r3
 8005474:	4b45      	ldr	r3, [pc, #276]	@ (800558c <HAL_DMA_Init+0x13c>)
 8005476:	4413      	add	r3, r2
 8005478:	4a45      	ldr	r2, [pc, #276]	@ (8005590 <HAL_DMA_Init+0x140>)
 800547a:	fba2 2303 	umull	r2, r3, r2, r3
 800547e:	091b      	lsrs	r3, r3, #4
 8005480:	009a      	lsls	r2, r3, #2
 8005482:	687b      	ldr	r3, [r7, #4]
 8005484:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA1;
 8005486:	687b      	ldr	r3, [r7, #4]
 8005488:	4a42      	ldr	r2, [pc, #264]	@ (8005594 <HAL_DMA_Init+0x144>)
 800548a:	641a      	str	r2, [r3, #64]	@ 0x40
 800548c:	e00e      	b.n	80054ac <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 800548e:	687b      	ldr	r3, [r7, #4]
 8005490:	681b      	ldr	r3, [r3, #0]
 8005492:	461a      	mov	r2, r3
 8005494:	4b40      	ldr	r3, [pc, #256]	@ (8005598 <HAL_DMA_Init+0x148>)
 8005496:	4413      	add	r3, r2
 8005498:	4a3d      	ldr	r2, [pc, #244]	@ (8005590 <HAL_DMA_Init+0x140>)
 800549a:	fba2 2303 	umull	r2, r3, r2, r3
 800549e:	091b      	lsrs	r3, r3, #4
 80054a0:	009a      	lsls	r2, r3, #2
 80054a2:	687b      	ldr	r3, [r7, #4]
 80054a4:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA2;
 80054a6:	687b      	ldr	r3, [r7, #4]
 80054a8:	4a3c      	ldr	r2, [pc, #240]	@ (800559c <HAL_DMA_Init+0x14c>)
 80054aa:	641a      	str	r2, [r3, #64]	@ 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80054ac:	687b      	ldr	r3, [r7, #4]
 80054ae:	2202      	movs	r2, #2
 80054b0:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 80054b4:	687b      	ldr	r3, [r7, #4]
 80054b6:	681b      	ldr	r3, [r3, #0]
 80054b8:	681b      	ldr	r3, [r3, #0]
 80054ba:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 80054bc:	68fb      	ldr	r3, [r7, #12]
 80054be:	f423 43ff 	bic.w	r3, r3, #32640	@ 0x7f80
 80054c2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80054c6:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 80054c8:	687b      	ldr	r3, [r7, #4]
 80054ca:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80054cc:	687b      	ldr	r3, [r7, #4]
 80054ce:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 80054d0:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80054d2:	687b      	ldr	r3, [r7, #4]
 80054d4:	691b      	ldr	r3, [r3, #16]
 80054d6:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80054d8:	687b      	ldr	r3, [r7, #4]
 80054da:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80054dc:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80054de:	687b      	ldr	r3, [r7, #4]
 80054e0:	699b      	ldr	r3, [r3, #24]
 80054e2:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80054e4:	687b      	ldr	r3, [r7, #4]
 80054e6:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80054e8:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80054ea:	687b      	ldr	r3, [r7, #4]
 80054ec:	6a1b      	ldr	r3, [r3, #32]
 80054ee:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 80054f0:	68fa      	ldr	r2, [r7, #12]
 80054f2:	4313      	orrs	r3, r2
 80054f4:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 80054f6:	687b      	ldr	r3, [r7, #4]
 80054f8:	681b      	ldr	r3, [r3, #0]
 80054fa:	68fa      	ldr	r2, [r7, #12]
 80054fc:	601a      	str	r2, [r3, #0]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 80054fe:	6878      	ldr	r0, [r7, #4]
 8005500:	f000 fa76 	bl	80059f0 <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8005504:	687b      	ldr	r3, [r7, #4]
 8005506:	689b      	ldr	r3, [r3, #8]
 8005508:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800550c:	d102      	bne.n	8005514 <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 800550e:	687b      	ldr	r3, [r7, #4]
 8005510:	2200      	movs	r2, #0
 8005512:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8005514:	687b      	ldr	r3, [r7, #4]
 8005516:	685a      	ldr	r2, [r3, #4]
 8005518:	687b      	ldr	r3, [r7, #4]
 800551a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800551c:	b2d2      	uxtb	r2, r2
 800551e:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8005520:	687b      	ldr	r3, [r7, #4]
 8005522:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005524:	687a      	ldr	r2, [r7, #4]
 8005526:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8005528:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 800552a:	687b      	ldr	r3, [r7, #4]
 800552c:	685b      	ldr	r3, [r3, #4]
 800552e:	2b00      	cmp	r3, #0
 8005530:	d010      	beq.n	8005554 <HAL_DMA_Init+0x104>
 8005532:	687b      	ldr	r3, [r7, #4]
 8005534:	685b      	ldr	r3, [r3, #4]
 8005536:	2b04      	cmp	r3, #4
 8005538:	d80c      	bhi.n	8005554 <HAL_DMA_Init+0x104>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 800553a:	6878      	ldr	r0, [r7, #4]
 800553c:	f000 fa96 	bl	8005a6c <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8005540:	687b      	ldr	r3, [r7, #4]
 8005542:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005544:	2200      	movs	r2, #0
 8005546:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8005548:	687b      	ldr	r3, [r7, #4]
 800554a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800554c:	687a      	ldr	r2, [r7, #4]
 800554e:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8005550:	605a      	str	r2, [r3, #4]
 8005552:	e008      	b.n	8005566 <HAL_DMA_Init+0x116>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 8005554:	687b      	ldr	r3, [r7, #4]
 8005556:	2200      	movs	r2, #0
 8005558:	655a      	str	r2, [r3, #84]	@ 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 800555a:	687b      	ldr	r3, [r7, #4]
 800555c:	2200      	movs	r2, #0
 800555e:	659a      	str	r2, [r3, #88]	@ 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 8005560:	687b      	ldr	r3, [r7, #4]
 8005562:	2200      	movs	r2, #0
 8005564:	65da      	str	r2, [r3, #92]	@ 0x5c
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8005566:	687b      	ldr	r3, [r7, #4]
 8005568:	2200      	movs	r2, #0
 800556a:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 800556c:	687b      	ldr	r3, [r7, #4]
 800556e:	2201      	movs	r2, #1
 8005570:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8005574:	687b      	ldr	r3, [r7, #4]
 8005576:	2200      	movs	r2, #0
 8005578:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 800557c:	2300      	movs	r3, #0
}
 800557e:	4618      	mov	r0, r3
 8005580:	3710      	adds	r7, #16
 8005582:	46bd      	mov	sp, r7
 8005584:	bd80      	pop	{r7, pc}
 8005586:	bf00      	nop
 8005588:	40020407 	.word	0x40020407
 800558c:	bffdfff8 	.word	0xbffdfff8
 8005590:	cccccccd 	.word	0xcccccccd
 8005594:	40020000 	.word	0x40020000
 8005598:	bffdfbf8 	.word	0xbffdfbf8
 800559c:	40020400 	.word	0x40020400

080055a0 <HAL_DMA_Start_IT>:
  * @param  DataLength The length of data to be transferred from source to destination (up to 256Kbytes-1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress,
                                   uint32_t DataLength)
{
 80055a0:	b580      	push	{r7, lr}
 80055a2:	b086      	sub	sp, #24
 80055a4:	af00      	add	r7, sp, #0
 80055a6:	60f8      	str	r0, [r7, #12]
 80055a8:	60b9      	str	r1, [r7, #8]
 80055aa:	607a      	str	r2, [r7, #4]
 80055ac:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80055ae:	2300      	movs	r3, #0
 80055b0:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 80055b2:	68fb      	ldr	r3, [r7, #12]
 80055b4:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 80055b8:	2b01      	cmp	r3, #1
 80055ba:	d101      	bne.n	80055c0 <HAL_DMA_Start_IT+0x20>
 80055bc:	2302      	movs	r3, #2
 80055be:	e066      	b.n	800568e <HAL_DMA_Start_IT+0xee>
 80055c0:	68fb      	ldr	r3, [r7, #12]
 80055c2:	2201      	movs	r2, #1
 80055c4:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 80055c8:	68fb      	ldr	r3, [r7, #12]
 80055ca:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 80055ce:	b2db      	uxtb	r3, r3
 80055d0:	2b01      	cmp	r3, #1
 80055d2:	d155      	bne.n	8005680 <HAL_DMA_Start_IT+0xe0>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80055d4:	68fb      	ldr	r3, [r7, #12]
 80055d6:	2202      	movs	r2, #2
 80055d8:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80055dc:	68fb      	ldr	r3, [r7, #12]
 80055de:	2200      	movs	r2, #0
 80055e0:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80055e2:	68fb      	ldr	r3, [r7, #12]
 80055e4:	681b      	ldr	r3, [r3, #0]
 80055e6:	681a      	ldr	r2, [r3, #0]
 80055e8:	68fb      	ldr	r3, [r7, #12]
 80055ea:	681b      	ldr	r3, [r3, #0]
 80055ec:	f022 0201 	bic.w	r2, r2, #1
 80055f0:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80055f2:	683b      	ldr	r3, [r7, #0]
 80055f4:	687a      	ldr	r2, [r7, #4]
 80055f6:	68b9      	ldr	r1, [r7, #8]
 80055f8:	68f8      	ldr	r0, [r7, #12]
 80055fa:	f000 f9bb 	bl	8005974 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 80055fe:	68fb      	ldr	r3, [r7, #12]
 8005600:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005602:	2b00      	cmp	r3, #0
 8005604:	d008      	beq.n	8005618 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8005606:	68fb      	ldr	r3, [r7, #12]
 8005608:	681b      	ldr	r3, [r3, #0]
 800560a:	681a      	ldr	r2, [r3, #0]
 800560c:	68fb      	ldr	r3, [r7, #12]
 800560e:	681b      	ldr	r3, [r3, #0]
 8005610:	f042 020e 	orr.w	r2, r2, #14
 8005614:	601a      	str	r2, [r3, #0]
 8005616:	e00f      	b.n	8005638 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8005618:	68fb      	ldr	r3, [r7, #12]
 800561a:	681b      	ldr	r3, [r3, #0]
 800561c:	681a      	ldr	r2, [r3, #0]
 800561e:	68fb      	ldr	r3, [r7, #12]
 8005620:	681b      	ldr	r3, [r3, #0]
 8005622:	f022 0204 	bic.w	r2, r2, #4
 8005626:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8005628:	68fb      	ldr	r3, [r7, #12]
 800562a:	681b      	ldr	r3, [r3, #0]
 800562c:	681a      	ldr	r2, [r3, #0]
 800562e:	68fb      	ldr	r3, [r7, #12]
 8005630:	681b      	ldr	r3, [r3, #0]
 8005632:	f042 020a 	orr.w	r2, r2, #10
 8005636:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8005638:	68fb      	ldr	r3, [r7, #12]
 800563a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800563c:	681b      	ldr	r3, [r3, #0]
 800563e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8005642:	2b00      	cmp	r3, #0
 8005644:	d007      	beq.n	8005656 <HAL_DMA_Start_IT+0xb6>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8005646:	68fb      	ldr	r3, [r7, #12]
 8005648:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800564a:	681a      	ldr	r2, [r3, #0]
 800564c:	68fb      	ldr	r3, [r7, #12]
 800564e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005650:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8005654:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 8005656:	68fb      	ldr	r3, [r7, #12]
 8005658:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800565a:	2b00      	cmp	r3, #0
 800565c:	d007      	beq.n	800566e <HAL_DMA_Start_IT+0xce>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 800565e:	68fb      	ldr	r3, [r7, #12]
 8005660:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005662:	681a      	ldr	r2, [r3, #0]
 8005664:	68fb      	ldr	r3, [r7, #12]
 8005666:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005668:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800566c:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800566e:	68fb      	ldr	r3, [r7, #12]
 8005670:	681b      	ldr	r3, [r3, #0]
 8005672:	681a      	ldr	r2, [r3, #0]
 8005674:	68fb      	ldr	r3, [r7, #12]
 8005676:	681b      	ldr	r3, [r3, #0]
 8005678:	f042 0201 	orr.w	r2, r2, #1
 800567c:	601a      	str	r2, [r3, #0]
 800567e:	e005      	b.n	800568c <HAL_DMA_Start_IT+0xec>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005680:	68fb      	ldr	r3, [r7, #12]
 8005682:	2200      	movs	r2, #0
 8005684:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 8005688:	2302      	movs	r3, #2
 800568a:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 800568c:	7dfb      	ldrb	r3, [r7, #23]
}
 800568e:	4618      	mov	r0, r3
 8005690:	3718      	adds	r7, #24
 8005692:	46bd      	mov	sp, r7
 8005694:	bd80      	pop	{r7, pc}

08005696 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8005696:	b480      	push	{r7}
 8005698:	b085      	sub	sp, #20
 800569a:	af00      	add	r7, sp, #0
 800569c:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800569e:	2300      	movs	r3, #0
 80056a0:	73fb      	strb	r3, [r7, #15]

  if(hdma->State != HAL_DMA_STATE_BUSY)
 80056a2:	687b      	ldr	r3, [r7, #4]
 80056a4:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 80056a8:	b2db      	uxtb	r3, r3
 80056aa:	2b02      	cmp	r3, #2
 80056ac:	d005      	beq.n	80056ba <HAL_DMA_Abort+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80056ae:	687b      	ldr	r3, [r7, #4]
 80056b0:	2204      	movs	r2, #4
 80056b2:	63da      	str	r2, [r3, #60]	@ 0x3c

    status = HAL_ERROR;
 80056b4:	2301      	movs	r3, #1
 80056b6:	73fb      	strb	r3, [r7, #15]
 80056b8:	e037      	b.n	800572a <HAL_DMA_Abort+0x94>
  }
  else
  {
     /* Disable DMA IT */
     __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80056ba:	687b      	ldr	r3, [r7, #4]
 80056bc:	681b      	ldr	r3, [r3, #0]
 80056be:	681a      	ldr	r2, [r3, #0]
 80056c0:	687b      	ldr	r3, [r7, #4]
 80056c2:	681b      	ldr	r3, [r3, #0]
 80056c4:	f022 020e 	bic.w	r2, r2, #14
 80056c8:	601a      	str	r2, [r3, #0]
     
     /* disable the DMAMUX sync overrun IT*/
     hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80056ca:	687b      	ldr	r3, [r7, #4]
 80056cc:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80056ce:	681a      	ldr	r2, [r3, #0]
 80056d0:	687b      	ldr	r3, [r7, #4]
 80056d2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80056d4:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80056d8:	601a      	str	r2, [r3, #0]
     
     /* Disable the channel */
     __HAL_DMA_DISABLE(hdma);
 80056da:	687b      	ldr	r3, [r7, #4]
 80056dc:	681b      	ldr	r3, [r3, #0]
 80056de:	681a      	ldr	r2, [r3, #0]
 80056e0:	687b      	ldr	r3, [r7, #4]
 80056e2:	681b      	ldr	r3, [r3, #0]
 80056e4:	f022 0201 	bic.w	r2, r2, #1
 80056e8:	601a      	str	r2, [r3, #0]
     
     /* Clear all flags */
     hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 80056ea:	687b      	ldr	r3, [r7, #4]
 80056ec:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80056ee:	f003 021f 	and.w	r2, r3, #31
 80056f2:	687b      	ldr	r3, [r7, #4]
 80056f4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80056f6:	2101      	movs	r1, #1
 80056f8:	fa01 f202 	lsl.w	r2, r1, r2
 80056fc:	605a      	str	r2, [r3, #4]
     
     /* Clear the DMAMUX synchro overrun flag */
     hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80056fe:	687b      	ldr	r3, [r7, #4]
 8005700:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005702:	687a      	ldr	r2, [r7, #4]
 8005704:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8005706:	605a      	str	r2, [r3, #4]
     
     if (hdma->DMAmuxRequestGen != 0U)
 8005708:	687b      	ldr	r3, [r7, #4]
 800570a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800570c:	2b00      	cmp	r3, #0
 800570e:	d00c      	beq.n	800572a <HAL_DMA_Abort+0x94>
     {
       /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
       /* disable the request gen overrun IT*/
       hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8005710:	687b      	ldr	r3, [r7, #4]
 8005712:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005714:	681a      	ldr	r2, [r3, #0]
 8005716:	687b      	ldr	r3, [r7, #4]
 8005718:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800571a:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800571e:	601a      	str	r2, [r3, #0]
     
       /* Clear the DMAMUX request generator overrun flag */
       hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8005720:	687b      	ldr	r3, [r7, #4]
 8005722:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005724:	687a      	ldr	r2, [r7, #4]
 8005726:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8005728:	605a      	str	r2, [r3, #4]
     }
  }  
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800572a:	687b      	ldr	r3, [r7, #4]
 800572c:	2201      	movs	r2, #1
 800572e:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 8005732:	687b      	ldr	r3, [r7, #4]
 8005734:	2200      	movs	r2, #0
 8005736:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return status;
 800573a:	7bfb      	ldrb	r3, [r7, #15]
}
 800573c:	4618      	mov	r0, r3
 800573e:	3714      	adds	r7, #20
 8005740:	46bd      	mov	sp, r7
 8005742:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005746:	4770      	bx	lr

08005748 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8005748:	b580      	push	{r7, lr}
 800574a:	b084      	sub	sp, #16
 800574c:	af00      	add	r7, sp, #0
 800574e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005750:	2300      	movs	r3, #0
 8005752:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 8005754:	687b      	ldr	r3, [r7, #4]
 8005756:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 800575a:	b2db      	uxtb	r3, r3
 800575c:	2b02      	cmp	r3, #2
 800575e:	d00d      	beq.n	800577c <HAL_DMA_Abort_IT+0x34>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8005760:	687b      	ldr	r3, [r7, #4]
 8005762:	2204      	movs	r2, #4
 8005764:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8005766:	687b      	ldr	r3, [r7, #4]
 8005768:	2201      	movs	r2, #1
 800576a:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800576e:	687b      	ldr	r3, [r7, #4]
 8005770:	2200      	movs	r2, #0
 8005772:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    status = HAL_ERROR;
 8005776:	2301      	movs	r3, #1
 8005778:	73fb      	strb	r3, [r7, #15]
 800577a:	e047      	b.n	800580c <HAL_DMA_Abort_IT+0xc4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800577c:	687b      	ldr	r3, [r7, #4]
 800577e:	681b      	ldr	r3, [r3, #0]
 8005780:	681a      	ldr	r2, [r3, #0]
 8005782:	687b      	ldr	r3, [r7, #4]
 8005784:	681b      	ldr	r3, [r3, #0]
 8005786:	f022 020e 	bic.w	r2, r2, #14
 800578a:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800578c:	687b      	ldr	r3, [r7, #4]
 800578e:	681b      	ldr	r3, [r3, #0]
 8005790:	681a      	ldr	r2, [r3, #0]
 8005792:	687b      	ldr	r3, [r7, #4]
 8005794:	681b      	ldr	r3, [r3, #0]
 8005796:	f022 0201 	bic.w	r2, r2, #1
 800579a:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 800579c:	687b      	ldr	r3, [r7, #4]
 800579e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80057a0:	681a      	ldr	r2, [r3, #0]
 80057a2:	687b      	ldr	r3, [r7, #4]
 80057a4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80057a6:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80057aa:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 80057ac:	687b      	ldr	r3, [r7, #4]
 80057ae:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80057b0:	f003 021f 	and.w	r2, r3, #31
 80057b4:	687b      	ldr	r3, [r7, #4]
 80057b6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80057b8:	2101      	movs	r1, #1
 80057ba:	fa01 f202 	lsl.w	r2, r1, r2
 80057be:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80057c0:	687b      	ldr	r3, [r7, #4]
 80057c2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80057c4:	687a      	ldr	r2, [r7, #4]
 80057c6:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 80057c8:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 80057ca:	687b      	ldr	r3, [r7, #4]
 80057cc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80057ce:	2b00      	cmp	r3, #0
 80057d0:	d00c      	beq.n	80057ec <HAL_DMA_Abort_IT+0xa4>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80057d2:	687b      	ldr	r3, [r7, #4]
 80057d4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80057d6:	681a      	ldr	r2, [r3, #0]
 80057d8:	687b      	ldr	r3, [r7, #4]
 80057da:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80057dc:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80057e0:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80057e2:	687b      	ldr	r3, [r7, #4]
 80057e4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80057e6:	687a      	ldr	r2, [r7, #4]
 80057e8:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 80057ea:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80057ec:	687b      	ldr	r3, [r7, #4]
 80057ee:	2201      	movs	r2, #1
 80057f0:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80057f4:	687b      	ldr	r3, [r7, #4]
 80057f6:	2200      	movs	r2, #0
 80057f8:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 80057fc:	687b      	ldr	r3, [r7, #4]
 80057fe:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005800:	2b00      	cmp	r3, #0
 8005802:	d003      	beq.n	800580c <HAL_DMA_Abort_IT+0xc4>
    {
      hdma->XferAbortCallback(hdma);
 8005804:	687b      	ldr	r3, [r7, #4]
 8005806:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005808:	6878      	ldr	r0, [r7, #4]
 800580a:	4798      	blx	r3
    }
  }
  return status;
 800580c:	7bfb      	ldrb	r3, [r7, #15]
}
 800580e:	4618      	mov	r0, r3
 8005810:	3710      	adds	r7, #16
 8005812:	46bd      	mov	sp, r7
 8005814:	bd80      	pop	{r7, pc}

08005816 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8005816:	b580      	push	{r7, lr}
 8005818:	b084      	sub	sp, #16
 800581a:	af00      	add	r7, sp, #0
 800581c:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 800581e:	687b      	ldr	r3, [r7, #4]
 8005820:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005822:	681b      	ldr	r3, [r3, #0]
 8005824:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8005826:	687b      	ldr	r3, [r7, #4]
 8005828:	681b      	ldr	r3, [r3, #0]
 800582a:	681b      	ldr	r3, [r3, #0]
 800582c:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((0U != (flag_it & ((uint32_t)DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1FU)))) && (0U != (source_it & DMA_IT_HT)))
 800582e:	687b      	ldr	r3, [r7, #4]
 8005830:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005832:	f003 031f 	and.w	r3, r3, #31
 8005836:	2204      	movs	r2, #4
 8005838:	409a      	lsls	r2, r3
 800583a:	68fb      	ldr	r3, [r7, #12]
 800583c:	4013      	ands	r3, r2
 800583e:	2b00      	cmp	r3, #0
 8005840:	d026      	beq.n	8005890 <HAL_DMA_IRQHandler+0x7a>
 8005842:	68bb      	ldr	r3, [r7, #8]
 8005844:	f003 0304 	and.w	r3, r3, #4
 8005848:	2b00      	cmp	r3, #0
 800584a:	d021      	beq.n	8005890 <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800584c:	687b      	ldr	r3, [r7, #4]
 800584e:	681b      	ldr	r3, [r3, #0]
 8005850:	681b      	ldr	r3, [r3, #0]
 8005852:	f003 0320 	and.w	r3, r3, #32
 8005856:	2b00      	cmp	r3, #0
 8005858:	d107      	bne.n	800586a <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800585a:	687b      	ldr	r3, [r7, #4]
 800585c:	681b      	ldr	r3, [r3, #0]
 800585e:	681a      	ldr	r2, [r3, #0]
 8005860:	687b      	ldr	r3, [r7, #4]
 8005862:	681b      	ldr	r3, [r3, #0]
 8005864:	f022 0204 	bic.w	r2, r2, #4
 8005868:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1FU));
 800586a:	687b      	ldr	r3, [r7, #4]
 800586c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800586e:	f003 021f 	and.w	r2, r3, #31
 8005872:	687b      	ldr	r3, [r7, #4]
 8005874:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005876:	2104      	movs	r1, #4
 8005878:	fa01 f202 	lsl.w	r2, r1, r2
 800587c:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 800587e:	687b      	ldr	r3, [r7, #4]
 8005880:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005882:	2b00      	cmp	r3, #0
 8005884:	d071      	beq.n	800596a <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8005886:	687b      	ldr	r3, [r7, #4]
 8005888:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800588a:	6878      	ldr	r0, [r7, #4]
 800588c:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 800588e:	e06c      	b.n	800596a <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1FU))))
 8005890:	687b      	ldr	r3, [r7, #4]
 8005892:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005894:	f003 031f 	and.w	r3, r3, #31
 8005898:	2202      	movs	r2, #2
 800589a:	409a      	lsls	r2, r3
 800589c:	68fb      	ldr	r3, [r7, #12]
 800589e:	4013      	ands	r3, r2
 80058a0:	2b00      	cmp	r3, #0
 80058a2:	d02e      	beq.n	8005902 <HAL_DMA_IRQHandler+0xec>
           && (0U != (source_it & DMA_IT_TC)))
 80058a4:	68bb      	ldr	r3, [r7, #8]
 80058a6:	f003 0302 	and.w	r3, r3, #2
 80058aa:	2b00      	cmp	r3, #0
 80058ac:	d029      	beq.n	8005902 <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80058ae:	687b      	ldr	r3, [r7, #4]
 80058b0:	681b      	ldr	r3, [r3, #0]
 80058b2:	681b      	ldr	r3, [r3, #0]
 80058b4:	f003 0320 	and.w	r3, r3, #32
 80058b8:	2b00      	cmp	r3, #0
 80058ba:	d10b      	bne.n	80058d4 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 80058bc:	687b      	ldr	r3, [r7, #4]
 80058be:	681b      	ldr	r3, [r3, #0]
 80058c0:	681a      	ldr	r2, [r3, #0]
 80058c2:	687b      	ldr	r3, [r7, #4]
 80058c4:	681b      	ldr	r3, [r3, #0]
 80058c6:	f022 020a 	bic.w	r2, r2, #10
 80058ca:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80058cc:	687b      	ldr	r3, [r7, #4]
 80058ce:	2201      	movs	r2, #1
 80058d0:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1FU));
 80058d4:	687b      	ldr	r3, [r7, #4]
 80058d6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80058d8:	f003 021f 	and.w	r2, r3, #31
 80058dc:	687b      	ldr	r3, [r7, #4]
 80058de:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80058e0:	2102      	movs	r1, #2
 80058e2:	fa01 f202 	lsl.w	r2, r1, r2
 80058e6:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80058e8:	687b      	ldr	r3, [r7, #4]
 80058ea:	2200      	movs	r2, #0
 80058ec:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferCpltCallback != NULL)
 80058f0:	687b      	ldr	r3, [r7, #4]
 80058f2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80058f4:	2b00      	cmp	r3, #0
 80058f6:	d038      	beq.n	800596a <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 80058f8:	687b      	ldr	r3, [r7, #4]
 80058fa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80058fc:	6878      	ldr	r0, [r7, #4]
 80058fe:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 8005900:	e033      	b.n	800596a <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Error Interrupt management **************************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1FU))))
 8005902:	687b      	ldr	r3, [r7, #4]
 8005904:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005906:	f003 031f 	and.w	r3, r3, #31
 800590a:	2208      	movs	r2, #8
 800590c:	409a      	lsls	r2, r3
 800590e:	68fb      	ldr	r3, [r7, #12]
 8005910:	4013      	ands	r3, r2
 8005912:	2b00      	cmp	r3, #0
 8005914:	d02a      	beq.n	800596c <HAL_DMA_IRQHandler+0x156>
           && (0U != (source_it & DMA_IT_TE)))
 8005916:	68bb      	ldr	r3, [r7, #8]
 8005918:	f003 0308 	and.w	r3, r3, #8
 800591c:	2b00      	cmp	r3, #0
 800591e:	d025      	beq.n	800596c <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8005920:	687b      	ldr	r3, [r7, #4]
 8005922:	681b      	ldr	r3, [r3, #0]
 8005924:	681a      	ldr	r2, [r3, #0]
 8005926:	687b      	ldr	r3, [r7, #4]
 8005928:	681b      	ldr	r3, [r3, #0]
 800592a:	f022 020e 	bic.w	r2, r2, #14
 800592e:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8005930:	687b      	ldr	r3, [r7, #4]
 8005932:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005934:	f003 021f 	and.w	r2, r3, #31
 8005938:	687b      	ldr	r3, [r7, #4]
 800593a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800593c:	2101      	movs	r1, #1
 800593e:	fa01 f202 	lsl.w	r2, r1, r2
 8005942:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8005944:	687b      	ldr	r3, [r7, #4]
 8005946:	2201      	movs	r2, #1
 8005948:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800594a:	687b      	ldr	r3, [r7, #4]
 800594c:	2201      	movs	r2, #1
 800594e:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005952:	687b      	ldr	r3, [r7, #4]
 8005954:	2200      	movs	r2, #0
 8005956:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferErrorCallback != NULL)
 800595a:	687b      	ldr	r3, [r7, #4]
 800595c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800595e:	2b00      	cmp	r3, #0
 8005960:	d004      	beq.n	800596c <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8005962:	687b      	ldr	r3, [r7, #4]
 8005964:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005966:	6878      	ldr	r0, [r7, #4]
 8005968:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 800596a:	bf00      	nop
 800596c:	bf00      	nop
}
 800596e:	3710      	adds	r7, #16
 8005970:	46bd      	mov	sp, r7
 8005972:	bd80      	pop	{r7, pc}

08005974 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8005974:	b480      	push	{r7}
 8005976:	b085      	sub	sp, #20
 8005978:	af00      	add	r7, sp, #0
 800597a:	60f8      	str	r0, [r7, #12]
 800597c:	60b9      	str	r1, [r7, #8]
 800597e:	607a      	str	r2, [r7, #4]
 8005980:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8005982:	68fb      	ldr	r3, [r7, #12]
 8005984:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005986:	68fa      	ldr	r2, [r7, #12]
 8005988:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 800598a:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 800598c:	68fb      	ldr	r3, [r7, #12]
 800598e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005990:	2b00      	cmp	r3, #0
 8005992:	d004      	beq.n	800599e <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8005994:	68fb      	ldr	r3, [r7, #12]
 8005996:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005998:	68fa      	ldr	r2, [r7, #12]
 800599a:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 800599c:	605a      	str	r2, [r3, #4]
  }

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 800599e:	68fb      	ldr	r3, [r7, #12]
 80059a0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80059a2:	f003 021f 	and.w	r2, r3, #31
 80059a6:	68fb      	ldr	r3, [r7, #12]
 80059a8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80059aa:	2101      	movs	r1, #1
 80059ac:	fa01 f202 	lsl.w	r2, r1, r2
 80059b0:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 80059b2:	68fb      	ldr	r3, [r7, #12]
 80059b4:	681b      	ldr	r3, [r3, #0]
 80059b6:	683a      	ldr	r2, [r7, #0]
 80059b8:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80059ba:	68fb      	ldr	r3, [r7, #12]
 80059bc:	689b      	ldr	r3, [r3, #8]
 80059be:	2b10      	cmp	r3, #16
 80059c0:	d108      	bne.n	80059d4 <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 80059c2:	68fb      	ldr	r3, [r7, #12]
 80059c4:	681b      	ldr	r3, [r3, #0]
 80059c6:	687a      	ldr	r2, [r7, #4]
 80059c8:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 80059ca:	68fb      	ldr	r3, [r7, #12]
 80059cc:	681b      	ldr	r3, [r3, #0]
 80059ce:	68ba      	ldr	r2, [r7, #8]
 80059d0:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 80059d2:	e007      	b.n	80059e4 <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 80059d4:	68fb      	ldr	r3, [r7, #12]
 80059d6:	681b      	ldr	r3, [r3, #0]
 80059d8:	68ba      	ldr	r2, [r7, #8]
 80059da:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 80059dc:	68fb      	ldr	r3, [r7, #12]
 80059de:	681b      	ldr	r3, [r3, #0]
 80059e0:	687a      	ldr	r2, [r7, #4]
 80059e2:	60da      	str	r2, [r3, #12]
}
 80059e4:	bf00      	nop
 80059e6:	3714      	adds	r7, #20
 80059e8:	46bd      	mov	sp, r7
 80059ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059ee:	4770      	bx	lr

080059f0 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma        pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80059f0:	b480      	push	{r7}
 80059f2:	b087      	sub	sp, #28
 80059f4:	af00      	add	r7, sp, #0
 80059f6:	6078      	str	r0, [r7, #4]
  uint32_t dmamux_base_addr;
  uint32_t channel_number;
  DMAMUX_Channel_TypeDef *DMAMUX1_ChannelBase;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 80059f8:	687b      	ldr	r3, [r7, #4]
 80059fa:	681b      	ldr	r3, [r3, #0]
 80059fc:	461a      	mov	r2, r3
 80059fe:	4b16      	ldr	r3, [pc, #88]	@ (8005a58 <DMA_CalcDMAMUXChannelBaseAndMask+0x68>)
 8005a00:	429a      	cmp	r2, r3
 8005a02:	d802      	bhi.n	8005a0a <DMA_CalcDMAMUXChannelBaseAndMask+0x1a>
  {
    /* DMA1 */
    DMAMUX1_ChannelBase = DMAMUX1_Channel0;
 8005a04:	4b15      	ldr	r3, [pc, #84]	@ (8005a5c <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 8005a06:	617b      	str	r3, [r7, #20]
 8005a08:	e001      	b.n	8005a0e <DMA_CalcDMAMUXChannelBaseAndMask+0x1e>
  {
    /* DMA2 */
#if defined (STM32G471xx) || defined (STM32G473xx) || defined (STM32G474xx) || defined (STM32G414xx) || defined (STM32G483xx) || defined (STM32G484xx) || defined (STM32G491xx) || defined (STM32G4A1xx) || defined (STM32G411xC)
    DMAMUX1_ChannelBase = DMAMUX1_Channel8;
#elif defined (STM32G411xB) || defined (STM32G431xx) || defined (STM32G441xx) || defined (STM32GBK1CB)
    DMAMUX1_ChannelBase = DMAMUX1_Channel6;
 8005a0a:	4b15      	ldr	r3, [pc, #84]	@ (8005a60 <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 8005a0c:	617b      	str	r3, [r7, #20]
#else
    DMAMUX1_ChannelBase = DMAMUX1_Channel7;
#endif /* STM32G4x1xx) */
  }
  dmamux_base_addr = (uint32_t)DMAMUX1_ChannelBase;
 8005a0e:	697b      	ldr	r3, [r7, #20]
 8005a10:	613b      	str	r3, [r7, #16]
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 8005a12:	687b      	ldr	r3, [r7, #4]
 8005a14:	681b      	ldr	r3, [r3, #0]
 8005a16:	b2db      	uxtb	r3, r3
 8005a18:	3b08      	subs	r3, #8
 8005a1a:	4a12      	ldr	r2, [pc, #72]	@ (8005a64 <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 8005a1c:	fba2 2303 	umull	r2, r3, r2, r3
 8005a20:	091b      	lsrs	r3, r3, #4
 8005a22:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)(dmamux_base_addr + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 8005a24:	687b      	ldr	r3, [r7, #4]
 8005a26:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005a28:	089b      	lsrs	r3, r3, #2
 8005a2a:	009a      	lsls	r2, r3, #2
 8005a2c:	693b      	ldr	r3, [r7, #16]
 8005a2e:	4413      	add	r3, r2
 8005a30:	461a      	mov	r2, r3
 8005a32:	687b      	ldr	r3, [r7, #4]
 8005a34:	649a      	str	r2, [r3, #72]	@ 0x48
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8005a36:	687b      	ldr	r3, [r7, #4]
 8005a38:	4a0b      	ldr	r2, [pc, #44]	@ (8005a68 <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 8005a3a:	64da      	str	r2, [r3, #76]	@ 0x4c
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 8005a3c:	68fb      	ldr	r3, [r7, #12]
 8005a3e:	f003 031f 	and.w	r3, r3, #31
 8005a42:	2201      	movs	r2, #1
 8005a44:	409a      	lsls	r2, r3
 8005a46:	687b      	ldr	r3, [r7, #4]
 8005a48:	651a      	str	r2, [r3, #80]	@ 0x50
}
 8005a4a:	bf00      	nop
 8005a4c:	371c      	adds	r7, #28
 8005a4e:	46bd      	mov	sp, r7
 8005a50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a54:	4770      	bx	lr
 8005a56:	bf00      	nop
 8005a58:	40020407 	.word	0x40020407
 8005a5c:	40020800 	.word	0x40020800
 8005a60:	40020820 	.word	0x40020820
 8005a64:	cccccccd 	.word	0xcccccccd
 8005a68:	40020880 	.word	0x40020880

08005a6c <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8005a6c:	b480      	push	{r7}
 8005a6e:	b085      	sub	sp, #20
 8005a70:	af00      	add	r7, sp, #0
 8005a72:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8005a74:	687b      	ldr	r3, [r7, #4]
 8005a76:	685b      	ldr	r3, [r3, #4]
 8005a78:	b2db      	uxtb	r3, r3
 8005a7a:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8005a7c:	68fa      	ldr	r2, [r7, #12]
 8005a7e:	4b0b      	ldr	r3, [pc, #44]	@ (8005aac <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 8005a80:	4413      	add	r3, r2
 8005a82:	009b      	lsls	r3, r3, #2
 8005a84:	461a      	mov	r2, r3
 8005a86:	687b      	ldr	r3, [r7, #4]
 8005a88:	655a      	str	r2, [r3, #84]	@ 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8005a8a:	687b      	ldr	r3, [r7, #4]
 8005a8c:	4a08      	ldr	r2, [pc, #32]	@ (8005ab0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 8005a8e:	659a      	str	r2, [r3, #88]	@ 0x58

  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x1FU);
 8005a90:	68fb      	ldr	r3, [r7, #12]
 8005a92:	3b01      	subs	r3, #1
 8005a94:	f003 031f 	and.w	r3, r3, #31
 8005a98:	2201      	movs	r2, #1
 8005a9a:	409a      	lsls	r2, r3
 8005a9c:	687b      	ldr	r3, [r7, #4]
 8005a9e:	65da      	str	r2, [r3, #92]	@ 0x5c
}
 8005aa0:	bf00      	nop
 8005aa2:	3714      	adds	r7, #20
 8005aa4:	46bd      	mov	sp, r7
 8005aa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005aaa:	4770      	bx	lr
 8005aac:	1000823f 	.word	0x1000823f
 8005ab0:	40020940 	.word	0x40020940

08005ab4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8005ab4:	b480      	push	{r7}
 8005ab6:	b087      	sub	sp, #28
 8005ab8:	af00      	add	r7, sp, #0
 8005aba:	6078      	str	r0, [r7, #4]
 8005abc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8005abe:	2300      	movs	r3, #0
 8005ac0:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 8005ac2:	e15a      	b.n	8005d7a <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8005ac4:	683b      	ldr	r3, [r7, #0]
 8005ac6:	681a      	ldr	r2, [r3, #0]
 8005ac8:	2101      	movs	r1, #1
 8005aca:	697b      	ldr	r3, [r7, #20]
 8005acc:	fa01 f303 	lsl.w	r3, r1, r3
 8005ad0:	4013      	ands	r3, r2
 8005ad2:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8005ad4:	68fb      	ldr	r3, [r7, #12]
 8005ad6:	2b00      	cmp	r3, #0
 8005ad8:	f000 814c 	beq.w	8005d74 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8005adc:	683b      	ldr	r3, [r7, #0]
 8005ade:	685b      	ldr	r3, [r3, #4]
 8005ae0:	f003 0303 	and.w	r3, r3, #3
 8005ae4:	2b01      	cmp	r3, #1
 8005ae6:	d005      	beq.n	8005af4 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8005ae8:	683b      	ldr	r3, [r7, #0]
 8005aea:	685b      	ldr	r3, [r3, #4]
 8005aec:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8005af0:	2b02      	cmp	r3, #2
 8005af2:	d130      	bne.n	8005b56 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8005af4:	687b      	ldr	r3, [r7, #4]
 8005af6:	689b      	ldr	r3, [r3, #8]
 8005af8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8005afa:	697b      	ldr	r3, [r7, #20]
 8005afc:	005b      	lsls	r3, r3, #1
 8005afe:	2203      	movs	r2, #3
 8005b00:	fa02 f303 	lsl.w	r3, r2, r3
 8005b04:	43db      	mvns	r3, r3
 8005b06:	693a      	ldr	r2, [r7, #16]
 8005b08:	4013      	ands	r3, r2
 8005b0a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8005b0c:	683b      	ldr	r3, [r7, #0]
 8005b0e:	68da      	ldr	r2, [r3, #12]
 8005b10:	697b      	ldr	r3, [r7, #20]
 8005b12:	005b      	lsls	r3, r3, #1
 8005b14:	fa02 f303 	lsl.w	r3, r2, r3
 8005b18:	693a      	ldr	r2, [r7, #16]
 8005b1a:	4313      	orrs	r3, r2
 8005b1c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8005b1e:	687b      	ldr	r3, [r7, #4]
 8005b20:	693a      	ldr	r2, [r7, #16]
 8005b22:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8005b24:	687b      	ldr	r3, [r7, #4]
 8005b26:	685b      	ldr	r3, [r3, #4]
 8005b28:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8005b2a:	2201      	movs	r2, #1
 8005b2c:	697b      	ldr	r3, [r7, #20]
 8005b2e:	fa02 f303 	lsl.w	r3, r2, r3
 8005b32:	43db      	mvns	r3, r3
 8005b34:	693a      	ldr	r2, [r7, #16]
 8005b36:	4013      	ands	r3, r2
 8005b38:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8005b3a:	683b      	ldr	r3, [r7, #0]
 8005b3c:	685b      	ldr	r3, [r3, #4]
 8005b3e:	091b      	lsrs	r3, r3, #4
 8005b40:	f003 0201 	and.w	r2, r3, #1
 8005b44:	697b      	ldr	r3, [r7, #20]
 8005b46:	fa02 f303 	lsl.w	r3, r2, r3
 8005b4a:	693a      	ldr	r2, [r7, #16]
 8005b4c:	4313      	orrs	r3, r2
 8005b4e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8005b50:	687b      	ldr	r3, [r7, #4]
 8005b52:	693a      	ldr	r2, [r7, #16]
 8005b54:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8005b56:	683b      	ldr	r3, [r7, #0]
 8005b58:	685b      	ldr	r3, [r3, #4]
 8005b5a:	f003 0303 	and.w	r3, r3, #3
 8005b5e:	2b03      	cmp	r3, #3
 8005b60:	d017      	beq.n	8005b92 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8005b62:	687b      	ldr	r3, [r7, #4]
 8005b64:	68db      	ldr	r3, [r3, #12]
 8005b66:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8005b68:	697b      	ldr	r3, [r7, #20]
 8005b6a:	005b      	lsls	r3, r3, #1
 8005b6c:	2203      	movs	r2, #3
 8005b6e:	fa02 f303 	lsl.w	r3, r2, r3
 8005b72:	43db      	mvns	r3, r3
 8005b74:	693a      	ldr	r2, [r7, #16]
 8005b76:	4013      	ands	r3, r2
 8005b78:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8005b7a:	683b      	ldr	r3, [r7, #0]
 8005b7c:	689a      	ldr	r2, [r3, #8]
 8005b7e:	697b      	ldr	r3, [r7, #20]
 8005b80:	005b      	lsls	r3, r3, #1
 8005b82:	fa02 f303 	lsl.w	r3, r2, r3
 8005b86:	693a      	ldr	r2, [r7, #16]
 8005b88:	4313      	orrs	r3, r2
 8005b8a:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8005b8c:	687b      	ldr	r3, [r7, #4]
 8005b8e:	693a      	ldr	r2, [r7, #16]
 8005b90:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8005b92:	683b      	ldr	r3, [r7, #0]
 8005b94:	685b      	ldr	r3, [r3, #4]
 8005b96:	f003 0303 	and.w	r3, r3, #3
 8005b9a:	2b02      	cmp	r3, #2
 8005b9c:	d123      	bne.n	8005be6 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8005b9e:	697b      	ldr	r3, [r7, #20]
 8005ba0:	08da      	lsrs	r2, r3, #3
 8005ba2:	687b      	ldr	r3, [r7, #4]
 8005ba4:	3208      	adds	r2, #8
 8005ba6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005baa:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8005bac:	697b      	ldr	r3, [r7, #20]
 8005bae:	f003 0307 	and.w	r3, r3, #7
 8005bb2:	009b      	lsls	r3, r3, #2
 8005bb4:	220f      	movs	r2, #15
 8005bb6:	fa02 f303 	lsl.w	r3, r2, r3
 8005bba:	43db      	mvns	r3, r3
 8005bbc:	693a      	ldr	r2, [r7, #16]
 8005bbe:	4013      	ands	r3, r2
 8005bc0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8005bc2:	683b      	ldr	r3, [r7, #0]
 8005bc4:	691a      	ldr	r2, [r3, #16]
 8005bc6:	697b      	ldr	r3, [r7, #20]
 8005bc8:	f003 0307 	and.w	r3, r3, #7
 8005bcc:	009b      	lsls	r3, r3, #2
 8005bce:	fa02 f303 	lsl.w	r3, r2, r3
 8005bd2:	693a      	ldr	r2, [r7, #16]
 8005bd4:	4313      	orrs	r3, r2
 8005bd6:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8005bd8:	697b      	ldr	r3, [r7, #20]
 8005bda:	08da      	lsrs	r2, r3, #3
 8005bdc:	687b      	ldr	r3, [r7, #4]
 8005bde:	3208      	adds	r2, #8
 8005be0:	6939      	ldr	r1, [r7, #16]
 8005be2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8005be6:	687b      	ldr	r3, [r7, #4]
 8005be8:	681b      	ldr	r3, [r3, #0]
 8005bea:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8005bec:	697b      	ldr	r3, [r7, #20]
 8005bee:	005b      	lsls	r3, r3, #1
 8005bf0:	2203      	movs	r2, #3
 8005bf2:	fa02 f303 	lsl.w	r3, r2, r3
 8005bf6:	43db      	mvns	r3, r3
 8005bf8:	693a      	ldr	r2, [r7, #16]
 8005bfa:	4013      	ands	r3, r2
 8005bfc:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8005bfe:	683b      	ldr	r3, [r7, #0]
 8005c00:	685b      	ldr	r3, [r3, #4]
 8005c02:	f003 0203 	and.w	r2, r3, #3
 8005c06:	697b      	ldr	r3, [r7, #20]
 8005c08:	005b      	lsls	r3, r3, #1
 8005c0a:	fa02 f303 	lsl.w	r3, r2, r3
 8005c0e:	693a      	ldr	r2, [r7, #16]
 8005c10:	4313      	orrs	r3, r2
 8005c12:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8005c14:	687b      	ldr	r3, [r7, #4]
 8005c16:	693a      	ldr	r2, [r7, #16]
 8005c18:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8005c1a:	683b      	ldr	r3, [r7, #0]
 8005c1c:	685b      	ldr	r3, [r3, #4]
 8005c1e:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8005c22:	2b00      	cmp	r3, #0
 8005c24:	f000 80a6 	beq.w	8005d74 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005c28:	4b5b      	ldr	r3, [pc, #364]	@ (8005d98 <HAL_GPIO_Init+0x2e4>)
 8005c2a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005c2c:	4a5a      	ldr	r2, [pc, #360]	@ (8005d98 <HAL_GPIO_Init+0x2e4>)
 8005c2e:	f043 0301 	orr.w	r3, r3, #1
 8005c32:	6613      	str	r3, [r2, #96]	@ 0x60
 8005c34:	4b58      	ldr	r3, [pc, #352]	@ (8005d98 <HAL_GPIO_Init+0x2e4>)
 8005c36:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005c38:	f003 0301 	and.w	r3, r3, #1
 8005c3c:	60bb      	str	r3, [r7, #8]
 8005c3e:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 8005c40:	4a56      	ldr	r2, [pc, #344]	@ (8005d9c <HAL_GPIO_Init+0x2e8>)
 8005c42:	697b      	ldr	r3, [r7, #20]
 8005c44:	089b      	lsrs	r3, r3, #2
 8005c46:	3302      	adds	r3, #2
 8005c48:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005c4c:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8005c4e:	697b      	ldr	r3, [r7, #20]
 8005c50:	f003 0303 	and.w	r3, r3, #3
 8005c54:	009b      	lsls	r3, r3, #2
 8005c56:	220f      	movs	r2, #15
 8005c58:	fa02 f303 	lsl.w	r3, r2, r3
 8005c5c:	43db      	mvns	r3, r3
 8005c5e:	693a      	ldr	r2, [r7, #16]
 8005c60:	4013      	ands	r3, r2
 8005c62:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8005c64:	687b      	ldr	r3, [r7, #4]
 8005c66:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8005c6a:	d01f      	beq.n	8005cac <HAL_GPIO_Init+0x1f8>
 8005c6c:	687b      	ldr	r3, [r7, #4]
 8005c6e:	4a4c      	ldr	r2, [pc, #304]	@ (8005da0 <HAL_GPIO_Init+0x2ec>)
 8005c70:	4293      	cmp	r3, r2
 8005c72:	d019      	beq.n	8005ca8 <HAL_GPIO_Init+0x1f4>
 8005c74:	687b      	ldr	r3, [r7, #4]
 8005c76:	4a4b      	ldr	r2, [pc, #300]	@ (8005da4 <HAL_GPIO_Init+0x2f0>)
 8005c78:	4293      	cmp	r3, r2
 8005c7a:	d013      	beq.n	8005ca4 <HAL_GPIO_Init+0x1f0>
 8005c7c:	687b      	ldr	r3, [r7, #4]
 8005c7e:	4a4a      	ldr	r2, [pc, #296]	@ (8005da8 <HAL_GPIO_Init+0x2f4>)
 8005c80:	4293      	cmp	r3, r2
 8005c82:	d00d      	beq.n	8005ca0 <HAL_GPIO_Init+0x1ec>
 8005c84:	687b      	ldr	r3, [r7, #4]
 8005c86:	4a49      	ldr	r2, [pc, #292]	@ (8005dac <HAL_GPIO_Init+0x2f8>)
 8005c88:	4293      	cmp	r3, r2
 8005c8a:	d007      	beq.n	8005c9c <HAL_GPIO_Init+0x1e8>
 8005c8c:	687b      	ldr	r3, [r7, #4]
 8005c8e:	4a48      	ldr	r2, [pc, #288]	@ (8005db0 <HAL_GPIO_Init+0x2fc>)
 8005c90:	4293      	cmp	r3, r2
 8005c92:	d101      	bne.n	8005c98 <HAL_GPIO_Init+0x1e4>
 8005c94:	2305      	movs	r3, #5
 8005c96:	e00a      	b.n	8005cae <HAL_GPIO_Init+0x1fa>
 8005c98:	2306      	movs	r3, #6
 8005c9a:	e008      	b.n	8005cae <HAL_GPIO_Init+0x1fa>
 8005c9c:	2304      	movs	r3, #4
 8005c9e:	e006      	b.n	8005cae <HAL_GPIO_Init+0x1fa>
 8005ca0:	2303      	movs	r3, #3
 8005ca2:	e004      	b.n	8005cae <HAL_GPIO_Init+0x1fa>
 8005ca4:	2302      	movs	r3, #2
 8005ca6:	e002      	b.n	8005cae <HAL_GPIO_Init+0x1fa>
 8005ca8:	2301      	movs	r3, #1
 8005caa:	e000      	b.n	8005cae <HAL_GPIO_Init+0x1fa>
 8005cac:	2300      	movs	r3, #0
 8005cae:	697a      	ldr	r2, [r7, #20]
 8005cb0:	f002 0203 	and.w	r2, r2, #3
 8005cb4:	0092      	lsls	r2, r2, #2
 8005cb6:	4093      	lsls	r3, r2
 8005cb8:	693a      	ldr	r2, [r7, #16]
 8005cba:	4313      	orrs	r3, r2
 8005cbc:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8005cbe:	4937      	ldr	r1, [pc, #220]	@ (8005d9c <HAL_GPIO_Init+0x2e8>)
 8005cc0:	697b      	ldr	r3, [r7, #20]
 8005cc2:	089b      	lsrs	r3, r3, #2
 8005cc4:	3302      	adds	r3, #2
 8005cc6:	693a      	ldr	r2, [r7, #16]
 8005cc8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8005ccc:	4b39      	ldr	r3, [pc, #228]	@ (8005db4 <HAL_GPIO_Init+0x300>)
 8005cce:	689b      	ldr	r3, [r3, #8]
 8005cd0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8005cd2:	68fb      	ldr	r3, [r7, #12]
 8005cd4:	43db      	mvns	r3, r3
 8005cd6:	693a      	ldr	r2, [r7, #16]
 8005cd8:	4013      	ands	r3, r2
 8005cda:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8005cdc:	683b      	ldr	r3, [r7, #0]
 8005cde:	685b      	ldr	r3, [r3, #4]
 8005ce0:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8005ce4:	2b00      	cmp	r3, #0
 8005ce6:	d003      	beq.n	8005cf0 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 8005ce8:	693a      	ldr	r2, [r7, #16]
 8005cea:	68fb      	ldr	r3, [r7, #12]
 8005cec:	4313      	orrs	r3, r2
 8005cee:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8005cf0:	4a30      	ldr	r2, [pc, #192]	@ (8005db4 <HAL_GPIO_Init+0x300>)
 8005cf2:	693b      	ldr	r3, [r7, #16]
 8005cf4:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8005cf6:	4b2f      	ldr	r3, [pc, #188]	@ (8005db4 <HAL_GPIO_Init+0x300>)
 8005cf8:	68db      	ldr	r3, [r3, #12]
 8005cfa:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8005cfc:	68fb      	ldr	r3, [r7, #12]
 8005cfe:	43db      	mvns	r3, r3
 8005d00:	693a      	ldr	r2, [r7, #16]
 8005d02:	4013      	ands	r3, r2
 8005d04:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8005d06:	683b      	ldr	r3, [r7, #0]
 8005d08:	685b      	ldr	r3, [r3, #4]
 8005d0a:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8005d0e:	2b00      	cmp	r3, #0
 8005d10:	d003      	beq.n	8005d1a <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 8005d12:	693a      	ldr	r2, [r7, #16]
 8005d14:	68fb      	ldr	r3, [r7, #12]
 8005d16:	4313      	orrs	r3, r2
 8005d18:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8005d1a:	4a26      	ldr	r2, [pc, #152]	@ (8005db4 <HAL_GPIO_Init+0x300>)
 8005d1c:	693b      	ldr	r3, [r7, #16]
 8005d1e:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 8005d20:	4b24      	ldr	r3, [pc, #144]	@ (8005db4 <HAL_GPIO_Init+0x300>)
 8005d22:	685b      	ldr	r3, [r3, #4]
 8005d24:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8005d26:	68fb      	ldr	r3, [r7, #12]
 8005d28:	43db      	mvns	r3, r3
 8005d2a:	693a      	ldr	r2, [r7, #16]
 8005d2c:	4013      	ands	r3, r2
 8005d2e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8005d30:	683b      	ldr	r3, [r7, #0]
 8005d32:	685b      	ldr	r3, [r3, #4]
 8005d34:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005d38:	2b00      	cmp	r3, #0
 8005d3a:	d003      	beq.n	8005d44 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8005d3c:	693a      	ldr	r2, [r7, #16]
 8005d3e:	68fb      	ldr	r3, [r7, #12]
 8005d40:	4313      	orrs	r3, r2
 8005d42:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8005d44:	4a1b      	ldr	r2, [pc, #108]	@ (8005db4 <HAL_GPIO_Init+0x300>)
 8005d46:	693b      	ldr	r3, [r7, #16]
 8005d48:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8005d4a:	4b1a      	ldr	r3, [pc, #104]	@ (8005db4 <HAL_GPIO_Init+0x300>)
 8005d4c:	681b      	ldr	r3, [r3, #0]
 8005d4e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8005d50:	68fb      	ldr	r3, [r7, #12]
 8005d52:	43db      	mvns	r3, r3
 8005d54:	693a      	ldr	r2, [r7, #16]
 8005d56:	4013      	ands	r3, r2
 8005d58:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8005d5a:	683b      	ldr	r3, [r7, #0]
 8005d5c:	685b      	ldr	r3, [r3, #4]
 8005d5e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8005d62:	2b00      	cmp	r3, #0
 8005d64:	d003      	beq.n	8005d6e <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 8005d66:	693a      	ldr	r2, [r7, #16]
 8005d68:	68fb      	ldr	r3, [r7, #12]
 8005d6a:	4313      	orrs	r3, r2
 8005d6c:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8005d6e:	4a11      	ldr	r2, [pc, #68]	@ (8005db4 <HAL_GPIO_Init+0x300>)
 8005d70:	693b      	ldr	r3, [r7, #16]
 8005d72:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8005d74:	697b      	ldr	r3, [r7, #20]
 8005d76:	3301      	adds	r3, #1
 8005d78:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 8005d7a:	683b      	ldr	r3, [r7, #0]
 8005d7c:	681a      	ldr	r2, [r3, #0]
 8005d7e:	697b      	ldr	r3, [r7, #20]
 8005d80:	fa22 f303 	lsr.w	r3, r2, r3
 8005d84:	2b00      	cmp	r3, #0
 8005d86:	f47f ae9d 	bne.w	8005ac4 <HAL_GPIO_Init+0x10>
  }
}
 8005d8a:	bf00      	nop
 8005d8c:	bf00      	nop
 8005d8e:	371c      	adds	r7, #28
 8005d90:	46bd      	mov	sp, r7
 8005d92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d96:	4770      	bx	lr
 8005d98:	40021000 	.word	0x40021000
 8005d9c:	40010000 	.word	0x40010000
 8005da0:	48000400 	.word	0x48000400
 8005da4:	48000800 	.word	0x48000800
 8005da8:	48000c00 	.word	0x48000c00
 8005dac:	48001000 	.word	0x48001000
 8005db0:	48001400 	.word	0x48001400
 8005db4:	40010400 	.word	0x40010400

08005db8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8005db8:	b480      	push	{r7}
 8005dba:	b083      	sub	sp, #12
 8005dbc:	af00      	add	r7, sp, #0
 8005dbe:	6078      	str	r0, [r7, #4]
 8005dc0:	460b      	mov	r3, r1
 8005dc2:	807b      	strh	r3, [r7, #2]
 8005dc4:	4613      	mov	r3, r2
 8005dc6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8005dc8:	787b      	ldrb	r3, [r7, #1]
 8005dca:	2b00      	cmp	r3, #0
 8005dcc:	d003      	beq.n	8005dd6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8005dce:	887a      	ldrh	r2, [r7, #2]
 8005dd0:	687b      	ldr	r3, [r7, #4]
 8005dd2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8005dd4:	e002      	b.n	8005ddc <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8005dd6:	887a      	ldrh	r2, [r7, #2]
 8005dd8:	687b      	ldr	r3, [r7, #4]
 8005dda:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8005ddc:	bf00      	nop
 8005dde:	370c      	adds	r7, #12
 8005de0:	46bd      	mov	sp, r7
 8005de2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005de6:	4770      	bx	lr

08005de8 <HAL_GPIO_TogglePin>:
  * @param  GPIO_Pin specifies the pin to be toggled.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8005de8:	b480      	push	{r7}
 8005dea:	b085      	sub	sp, #20
 8005dec:	af00      	add	r7, sp, #0
 8005dee:	6078      	str	r0, [r7, #4]
 8005df0:	460b      	mov	r3, r1
 8005df2:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8005df4:	687b      	ldr	r3, [r7, #4]
 8005df6:	695b      	ldr	r3, [r3, #20]
 8005df8:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8005dfa:	887a      	ldrh	r2, [r7, #2]
 8005dfc:	68fb      	ldr	r3, [r7, #12]
 8005dfe:	4013      	ands	r3, r2
 8005e00:	041a      	lsls	r2, r3, #16
 8005e02:	68fb      	ldr	r3, [r7, #12]
 8005e04:	43d9      	mvns	r1, r3
 8005e06:	887b      	ldrh	r3, [r7, #2]
 8005e08:	400b      	ands	r3, r1
 8005e0a:	431a      	orrs	r2, r3
 8005e0c:	687b      	ldr	r3, [r7, #4]
 8005e0e:	619a      	str	r2, [r3, #24]
}
 8005e10:	bf00      	nop
 8005e12:	3714      	adds	r7, #20
 8005e14:	46bd      	mov	sp, r7
 8005e16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e1a:	4770      	bx	lr

08005e1c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8005e1c:	b580      	push	{r7, lr}
 8005e1e:	b082      	sub	sp, #8
 8005e20:	af00      	add	r7, sp, #0
 8005e22:	4603      	mov	r3, r0
 8005e24:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8005e26:	4b08      	ldr	r3, [pc, #32]	@ (8005e48 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8005e28:	695a      	ldr	r2, [r3, #20]
 8005e2a:	88fb      	ldrh	r3, [r7, #6]
 8005e2c:	4013      	ands	r3, r2
 8005e2e:	2b00      	cmp	r3, #0
 8005e30:	d006      	beq.n	8005e40 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8005e32:	4a05      	ldr	r2, [pc, #20]	@ (8005e48 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8005e34:	88fb      	ldrh	r3, [r7, #6]
 8005e36:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8005e38:	88fb      	ldrh	r3, [r7, #6]
 8005e3a:	4618      	mov	r0, r3
 8005e3c:	f000 f806 	bl	8005e4c <HAL_GPIO_EXTI_Callback>
  }
}
 8005e40:	bf00      	nop
 8005e42:	3708      	adds	r7, #8
 8005e44:	46bd      	mov	sp, r7
 8005e46:	bd80      	pop	{r7, pc}
 8005e48:	40010400 	.word	0x40010400

08005e4c <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8005e4c:	b480      	push	{r7}
 8005e4e:	b083      	sub	sp, #12
 8005e50:	af00      	add	r7, sp, #0
 8005e52:	4603      	mov	r3, r0
 8005e54:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8005e56:	bf00      	nop
 8005e58:	370c      	adds	r7, #12
 8005e5a:	46bd      	mov	sp, r7
 8005e5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e60:	4770      	bx	lr
	...

08005e64 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8005e64:	b480      	push	{r7}
 8005e66:	b085      	sub	sp, #20
 8005e68:	af00      	add	r7, sp, #0
 8005e6a:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8005e6c:	687b      	ldr	r3, [r7, #4]
 8005e6e:	2b00      	cmp	r3, #0
 8005e70:	d141      	bne.n	8005ef6 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8005e72:	4b4b      	ldr	r3, [pc, #300]	@ (8005fa0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005e74:	681b      	ldr	r3, [r3, #0]
 8005e76:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8005e7a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005e7e:	d131      	bne.n	8005ee4 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8005e80:	4b47      	ldr	r3, [pc, #284]	@ (8005fa0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005e82:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005e86:	4a46      	ldr	r2, [pc, #280]	@ (8005fa0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005e88:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8005e8c:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8005e90:	4b43      	ldr	r3, [pc, #268]	@ (8005fa0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005e92:	681b      	ldr	r3, [r3, #0]
 8005e94:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8005e98:	4a41      	ldr	r2, [pc, #260]	@ (8005fa0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005e9a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8005e9e:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8005ea0:	4b40      	ldr	r3, [pc, #256]	@ (8005fa4 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8005ea2:	681b      	ldr	r3, [r3, #0]
 8005ea4:	2232      	movs	r2, #50	@ 0x32
 8005ea6:	fb02 f303 	mul.w	r3, r2, r3
 8005eaa:	4a3f      	ldr	r2, [pc, #252]	@ (8005fa8 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8005eac:	fba2 2303 	umull	r2, r3, r2, r3
 8005eb0:	0c9b      	lsrs	r3, r3, #18
 8005eb2:	3301      	adds	r3, #1
 8005eb4:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8005eb6:	e002      	b.n	8005ebe <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8005eb8:	68fb      	ldr	r3, [r7, #12]
 8005eba:	3b01      	subs	r3, #1
 8005ebc:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8005ebe:	4b38      	ldr	r3, [pc, #224]	@ (8005fa0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005ec0:	695b      	ldr	r3, [r3, #20]
 8005ec2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005ec6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005eca:	d102      	bne.n	8005ed2 <HAL_PWREx_ControlVoltageScaling+0x6e>
 8005ecc:	68fb      	ldr	r3, [r7, #12]
 8005ece:	2b00      	cmp	r3, #0
 8005ed0:	d1f2      	bne.n	8005eb8 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8005ed2:	4b33      	ldr	r3, [pc, #204]	@ (8005fa0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005ed4:	695b      	ldr	r3, [r3, #20]
 8005ed6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005eda:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005ede:	d158      	bne.n	8005f92 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8005ee0:	2303      	movs	r3, #3
 8005ee2:	e057      	b.n	8005f94 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8005ee4:	4b2e      	ldr	r3, [pc, #184]	@ (8005fa0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005ee6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005eea:	4a2d      	ldr	r2, [pc, #180]	@ (8005fa0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005eec:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8005ef0:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8005ef4:	e04d      	b.n	8005f92 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8005ef6:	687b      	ldr	r3, [r7, #4]
 8005ef8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005efc:	d141      	bne.n	8005f82 <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8005efe:	4b28      	ldr	r3, [pc, #160]	@ (8005fa0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005f00:	681b      	ldr	r3, [r3, #0]
 8005f02:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8005f06:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005f0a:	d131      	bne.n	8005f70 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8005f0c:	4b24      	ldr	r3, [pc, #144]	@ (8005fa0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005f0e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005f12:	4a23      	ldr	r2, [pc, #140]	@ (8005fa0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005f14:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005f18:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8005f1c:	4b20      	ldr	r3, [pc, #128]	@ (8005fa0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005f1e:	681b      	ldr	r3, [r3, #0]
 8005f20:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8005f24:	4a1e      	ldr	r2, [pc, #120]	@ (8005fa0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005f26:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8005f2a:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8005f2c:	4b1d      	ldr	r3, [pc, #116]	@ (8005fa4 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8005f2e:	681b      	ldr	r3, [r3, #0]
 8005f30:	2232      	movs	r2, #50	@ 0x32
 8005f32:	fb02 f303 	mul.w	r3, r2, r3
 8005f36:	4a1c      	ldr	r2, [pc, #112]	@ (8005fa8 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8005f38:	fba2 2303 	umull	r2, r3, r2, r3
 8005f3c:	0c9b      	lsrs	r3, r3, #18
 8005f3e:	3301      	adds	r3, #1
 8005f40:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8005f42:	e002      	b.n	8005f4a <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8005f44:	68fb      	ldr	r3, [r7, #12]
 8005f46:	3b01      	subs	r3, #1
 8005f48:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8005f4a:	4b15      	ldr	r3, [pc, #84]	@ (8005fa0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005f4c:	695b      	ldr	r3, [r3, #20]
 8005f4e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005f52:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005f56:	d102      	bne.n	8005f5e <HAL_PWREx_ControlVoltageScaling+0xfa>
 8005f58:	68fb      	ldr	r3, [r7, #12]
 8005f5a:	2b00      	cmp	r3, #0
 8005f5c:	d1f2      	bne.n	8005f44 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8005f5e:	4b10      	ldr	r3, [pc, #64]	@ (8005fa0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005f60:	695b      	ldr	r3, [r3, #20]
 8005f62:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005f66:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005f6a:	d112      	bne.n	8005f92 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8005f6c:	2303      	movs	r3, #3
 8005f6e:	e011      	b.n	8005f94 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8005f70:	4b0b      	ldr	r3, [pc, #44]	@ (8005fa0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005f72:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005f76:	4a0a      	ldr	r2, [pc, #40]	@ (8005fa0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005f78:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005f7c:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8005f80:	e007      	b.n	8005f92 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8005f82:	4b07      	ldr	r3, [pc, #28]	@ (8005fa0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005f84:	681b      	ldr	r3, [r3, #0]
 8005f86:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8005f8a:	4a05      	ldr	r2, [pc, #20]	@ (8005fa0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005f8c:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8005f90:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 8005f92:	2300      	movs	r3, #0
}
 8005f94:	4618      	mov	r0, r3
 8005f96:	3714      	adds	r7, #20
 8005f98:	46bd      	mov	sp, r7
 8005f9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f9e:	4770      	bx	lr
 8005fa0:	40007000 	.word	0x40007000
 8005fa4:	20000008 	.word	0x20000008
 8005fa8:	431bde83 	.word	0x431bde83

08005fac <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 8005fac:	b480      	push	{r7}
 8005fae:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 8005fb0:	4b05      	ldr	r3, [pc, #20]	@ (8005fc8 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8005fb2:	689b      	ldr	r3, [r3, #8]
 8005fb4:	4a04      	ldr	r2, [pc, #16]	@ (8005fc8 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8005fb6:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8005fba:	6093      	str	r3, [r2, #8]
}
 8005fbc:	bf00      	nop
 8005fbe:	46bd      	mov	sp, r7
 8005fc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fc4:	4770      	bx	lr
 8005fc6:	bf00      	nop
 8005fc8:	40007000 	.word	0x40007000

08005fcc <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005fcc:	b580      	push	{r7, lr}
 8005fce:	b088      	sub	sp, #32
 8005fd0:	af00      	add	r7, sp, #0
 8005fd2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8005fd4:	687b      	ldr	r3, [r7, #4]
 8005fd6:	2b00      	cmp	r3, #0
 8005fd8:	d101      	bne.n	8005fde <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8005fda:	2301      	movs	r3, #1
 8005fdc:	e2fe      	b.n	80065dc <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005fde:	687b      	ldr	r3, [r7, #4]
 8005fe0:	681b      	ldr	r3, [r3, #0]
 8005fe2:	f003 0301 	and.w	r3, r3, #1
 8005fe6:	2b00      	cmp	r3, #0
 8005fe8:	d075      	beq.n	80060d6 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005fea:	4b97      	ldr	r3, [pc, #604]	@ (8006248 <HAL_RCC_OscConfig+0x27c>)
 8005fec:	689b      	ldr	r3, [r3, #8]
 8005fee:	f003 030c 	and.w	r3, r3, #12
 8005ff2:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8005ff4:	4b94      	ldr	r3, [pc, #592]	@ (8006248 <HAL_RCC_OscConfig+0x27c>)
 8005ff6:	68db      	ldr	r3, [r3, #12]
 8005ff8:	f003 0303 	and.w	r3, r3, #3
 8005ffc:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 8005ffe:	69bb      	ldr	r3, [r7, #24]
 8006000:	2b0c      	cmp	r3, #12
 8006002:	d102      	bne.n	800600a <HAL_RCC_OscConfig+0x3e>
 8006004:	697b      	ldr	r3, [r7, #20]
 8006006:	2b03      	cmp	r3, #3
 8006008:	d002      	beq.n	8006010 <HAL_RCC_OscConfig+0x44>
 800600a:	69bb      	ldr	r3, [r7, #24]
 800600c:	2b08      	cmp	r3, #8
 800600e:	d10b      	bne.n	8006028 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006010:	4b8d      	ldr	r3, [pc, #564]	@ (8006248 <HAL_RCC_OscConfig+0x27c>)
 8006012:	681b      	ldr	r3, [r3, #0]
 8006014:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006018:	2b00      	cmp	r3, #0
 800601a:	d05b      	beq.n	80060d4 <HAL_RCC_OscConfig+0x108>
 800601c:	687b      	ldr	r3, [r7, #4]
 800601e:	685b      	ldr	r3, [r3, #4]
 8006020:	2b00      	cmp	r3, #0
 8006022:	d157      	bne.n	80060d4 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8006024:	2301      	movs	r3, #1
 8006026:	e2d9      	b.n	80065dc <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8006028:	687b      	ldr	r3, [r7, #4]
 800602a:	685b      	ldr	r3, [r3, #4]
 800602c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006030:	d106      	bne.n	8006040 <HAL_RCC_OscConfig+0x74>
 8006032:	4b85      	ldr	r3, [pc, #532]	@ (8006248 <HAL_RCC_OscConfig+0x27c>)
 8006034:	681b      	ldr	r3, [r3, #0]
 8006036:	4a84      	ldr	r2, [pc, #528]	@ (8006248 <HAL_RCC_OscConfig+0x27c>)
 8006038:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800603c:	6013      	str	r3, [r2, #0]
 800603e:	e01d      	b.n	800607c <HAL_RCC_OscConfig+0xb0>
 8006040:	687b      	ldr	r3, [r7, #4]
 8006042:	685b      	ldr	r3, [r3, #4]
 8006044:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8006048:	d10c      	bne.n	8006064 <HAL_RCC_OscConfig+0x98>
 800604a:	4b7f      	ldr	r3, [pc, #508]	@ (8006248 <HAL_RCC_OscConfig+0x27c>)
 800604c:	681b      	ldr	r3, [r3, #0]
 800604e:	4a7e      	ldr	r2, [pc, #504]	@ (8006248 <HAL_RCC_OscConfig+0x27c>)
 8006050:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8006054:	6013      	str	r3, [r2, #0]
 8006056:	4b7c      	ldr	r3, [pc, #496]	@ (8006248 <HAL_RCC_OscConfig+0x27c>)
 8006058:	681b      	ldr	r3, [r3, #0]
 800605a:	4a7b      	ldr	r2, [pc, #492]	@ (8006248 <HAL_RCC_OscConfig+0x27c>)
 800605c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006060:	6013      	str	r3, [r2, #0]
 8006062:	e00b      	b.n	800607c <HAL_RCC_OscConfig+0xb0>
 8006064:	4b78      	ldr	r3, [pc, #480]	@ (8006248 <HAL_RCC_OscConfig+0x27c>)
 8006066:	681b      	ldr	r3, [r3, #0]
 8006068:	4a77      	ldr	r2, [pc, #476]	@ (8006248 <HAL_RCC_OscConfig+0x27c>)
 800606a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800606e:	6013      	str	r3, [r2, #0]
 8006070:	4b75      	ldr	r3, [pc, #468]	@ (8006248 <HAL_RCC_OscConfig+0x27c>)
 8006072:	681b      	ldr	r3, [r3, #0]
 8006074:	4a74      	ldr	r2, [pc, #464]	@ (8006248 <HAL_RCC_OscConfig+0x27c>)
 8006076:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800607a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800607c:	687b      	ldr	r3, [r7, #4]
 800607e:	685b      	ldr	r3, [r3, #4]
 8006080:	2b00      	cmp	r3, #0
 8006082:	d013      	beq.n	80060ac <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006084:	f7ff f838 	bl	80050f8 <HAL_GetTick>
 8006088:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800608a:	e008      	b.n	800609e <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800608c:	f7ff f834 	bl	80050f8 <HAL_GetTick>
 8006090:	4602      	mov	r2, r0
 8006092:	693b      	ldr	r3, [r7, #16]
 8006094:	1ad3      	subs	r3, r2, r3
 8006096:	2b64      	cmp	r3, #100	@ 0x64
 8006098:	d901      	bls.n	800609e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800609a:	2303      	movs	r3, #3
 800609c:	e29e      	b.n	80065dc <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800609e:	4b6a      	ldr	r3, [pc, #424]	@ (8006248 <HAL_RCC_OscConfig+0x27c>)
 80060a0:	681b      	ldr	r3, [r3, #0]
 80060a2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80060a6:	2b00      	cmp	r3, #0
 80060a8:	d0f0      	beq.n	800608c <HAL_RCC_OscConfig+0xc0>
 80060aa:	e014      	b.n	80060d6 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80060ac:	f7ff f824 	bl	80050f8 <HAL_GetTick>
 80060b0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80060b2:	e008      	b.n	80060c6 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80060b4:	f7ff f820 	bl	80050f8 <HAL_GetTick>
 80060b8:	4602      	mov	r2, r0
 80060ba:	693b      	ldr	r3, [r7, #16]
 80060bc:	1ad3      	subs	r3, r2, r3
 80060be:	2b64      	cmp	r3, #100	@ 0x64
 80060c0:	d901      	bls.n	80060c6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80060c2:	2303      	movs	r3, #3
 80060c4:	e28a      	b.n	80065dc <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80060c6:	4b60      	ldr	r3, [pc, #384]	@ (8006248 <HAL_RCC_OscConfig+0x27c>)
 80060c8:	681b      	ldr	r3, [r3, #0]
 80060ca:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80060ce:	2b00      	cmp	r3, #0
 80060d0:	d1f0      	bne.n	80060b4 <HAL_RCC_OscConfig+0xe8>
 80060d2:	e000      	b.n	80060d6 <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80060d4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80060d6:	687b      	ldr	r3, [r7, #4]
 80060d8:	681b      	ldr	r3, [r3, #0]
 80060da:	f003 0302 	and.w	r3, r3, #2
 80060de:	2b00      	cmp	r3, #0
 80060e0:	d075      	beq.n	80061ce <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80060e2:	4b59      	ldr	r3, [pc, #356]	@ (8006248 <HAL_RCC_OscConfig+0x27c>)
 80060e4:	689b      	ldr	r3, [r3, #8]
 80060e6:	f003 030c 	and.w	r3, r3, #12
 80060ea:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80060ec:	4b56      	ldr	r3, [pc, #344]	@ (8006248 <HAL_RCC_OscConfig+0x27c>)
 80060ee:	68db      	ldr	r3, [r3, #12]
 80060f0:	f003 0303 	and.w	r3, r3, #3
 80060f4:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 80060f6:	69bb      	ldr	r3, [r7, #24]
 80060f8:	2b0c      	cmp	r3, #12
 80060fa:	d102      	bne.n	8006102 <HAL_RCC_OscConfig+0x136>
 80060fc:	697b      	ldr	r3, [r7, #20]
 80060fe:	2b02      	cmp	r3, #2
 8006100:	d002      	beq.n	8006108 <HAL_RCC_OscConfig+0x13c>
 8006102:	69bb      	ldr	r3, [r7, #24]
 8006104:	2b04      	cmp	r3, #4
 8006106:	d11f      	bne.n	8006148 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8006108:	4b4f      	ldr	r3, [pc, #316]	@ (8006248 <HAL_RCC_OscConfig+0x27c>)
 800610a:	681b      	ldr	r3, [r3, #0]
 800610c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006110:	2b00      	cmp	r3, #0
 8006112:	d005      	beq.n	8006120 <HAL_RCC_OscConfig+0x154>
 8006114:	687b      	ldr	r3, [r7, #4]
 8006116:	68db      	ldr	r3, [r3, #12]
 8006118:	2b00      	cmp	r3, #0
 800611a:	d101      	bne.n	8006120 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 800611c:	2301      	movs	r3, #1
 800611e:	e25d      	b.n	80065dc <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006120:	4b49      	ldr	r3, [pc, #292]	@ (8006248 <HAL_RCC_OscConfig+0x27c>)
 8006122:	685b      	ldr	r3, [r3, #4]
 8006124:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8006128:	687b      	ldr	r3, [r7, #4]
 800612a:	691b      	ldr	r3, [r3, #16]
 800612c:	061b      	lsls	r3, r3, #24
 800612e:	4946      	ldr	r1, [pc, #280]	@ (8006248 <HAL_RCC_OscConfig+0x27c>)
 8006130:	4313      	orrs	r3, r2
 8006132:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8006134:	4b45      	ldr	r3, [pc, #276]	@ (800624c <HAL_RCC_OscConfig+0x280>)
 8006136:	681b      	ldr	r3, [r3, #0]
 8006138:	4618      	mov	r0, r3
 800613a:	f7fe ff91 	bl	8005060 <HAL_InitTick>
 800613e:	4603      	mov	r3, r0
 8006140:	2b00      	cmp	r3, #0
 8006142:	d043      	beq.n	80061cc <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 8006144:	2301      	movs	r3, #1
 8006146:	e249      	b.n	80065dc <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8006148:	687b      	ldr	r3, [r7, #4]
 800614a:	68db      	ldr	r3, [r3, #12]
 800614c:	2b00      	cmp	r3, #0
 800614e:	d023      	beq.n	8006198 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8006150:	4b3d      	ldr	r3, [pc, #244]	@ (8006248 <HAL_RCC_OscConfig+0x27c>)
 8006152:	681b      	ldr	r3, [r3, #0]
 8006154:	4a3c      	ldr	r2, [pc, #240]	@ (8006248 <HAL_RCC_OscConfig+0x27c>)
 8006156:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800615a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800615c:	f7fe ffcc 	bl	80050f8 <HAL_GetTick>
 8006160:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8006162:	e008      	b.n	8006176 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006164:	f7fe ffc8 	bl	80050f8 <HAL_GetTick>
 8006168:	4602      	mov	r2, r0
 800616a:	693b      	ldr	r3, [r7, #16]
 800616c:	1ad3      	subs	r3, r2, r3
 800616e:	2b02      	cmp	r3, #2
 8006170:	d901      	bls.n	8006176 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8006172:	2303      	movs	r3, #3
 8006174:	e232      	b.n	80065dc <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8006176:	4b34      	ldr	r3, [pc, #208]	@ (8006248 <HAL_RCC_OscConfig+0x27c>)
 8006178:	681b      	ldr	r3, [r3, #0]
 800617a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800617e:	2b00      	cmp	r3, #0
 8006180:	d0f0      	beq.n	8006164 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006182:	4b31      	ldr	r3, [pc, #196]	@ (8006248 <HAL_RCC_OscConfig+0x27c>)
 8006184:	685b      	ldr	r3, [r3, #4]
 8006186:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 800618a:	687b      	ldr	r3, [r7, #4]
 800618c:	691b      	ldr	r3, [r3, #16]
 800618e:	061b      	lsls	r3, r3, #24
 8006190:	492d      	ldr	r1, [pc, #180]	@ (8006248 <HAL_RCC_OscConfig+0x27c>)
 8006192:	4313      	orrs	r3, r2
 8006194:	604b      	str	r3, [r1, #4]
 8006196:	e01a      	b.n	80061ce <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8006198:	4b2b      	ldr	r3, [pc, #172]	@ (8006248 <HAL_RCC_OscConfig+0x27c>)
 800619a:	681b      	ldr	r3, [r3, #0]
 800619c:	4a2a      	ldr	r2, [pc, #168]	@ (8006248 <HAL_RCC_OscConfig+0x27c>)
 800619e:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80061a2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80061a4:	f7fe ffa8 	bl	80050f8 <HAL_GetTick>
 80061a8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80061aa:	e008      	b.n	80061be <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80061ac:	f7fe ffa4 	bl	80050f8 <HAL_GetTick>
 80061b0:	4602      	mov	r2, r0
 80061b2:	693b      	ldr	r3, [r7, #16]
 80061b4:	1ad3      	subs	r3, r2, r3
 80061b6:	2b02      	cmp	r3, #2
 80061b8:	d901      	bls.n	80061be <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 80061ba:	2303      	movs	r3, #3
 80061bc:	e20e      	b.n	80065dc <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80061be:	4b22      	ldr	r3, [pc, #136]	@ (8006248 <HAL_RCC_OscConfig+0x27c>)
 80061c0:	681b      	ldr	r3, [r3, #0]
 80061c2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80061c6:	2b00      	cmp	r3, #0
 80061c8:	d1f0      	bne.n	80061ac <HAL_RCC_OscConfig+0x1e0>
 80061ca:	e000      	b.n	80061ce <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80061cc:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80061ce:	687b      	ldr	r3, [r7, #4]
 80061d0:	681b      	ldr	r3, [r3, #0]
 80061d2:	f003 0308 	and.w	r3, r3, #8
 80061d6:	2b00      	cmp	r3, #0
 80061d8:	d041      	beq.n	800625e <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80061da:	687b      	ldr	r3, [r7, #4]
 80061dc:	695b      	ldr	r3, [r3, #20]
 80061de:	2b00      	cmp	r3, #0
 80061e0:	d01c      	beq.n	800621c <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80061e2:	4b19      	ldr	r3, [pc, #100]	@ (8006248 <HAL_RCC_OscConfig+0x27c>)
 80061e4:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80061e8:	4a17      	ldr	r2, [pc, #92]	@ (8006248 <HAL_RCC_OscConfig+0x27c>)
 80061ea:	f043 0301 	orr.w	r3, r3, #1
 80061ee:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80061f2:	f7fe ff81 	bl	80050f8 <HAL_GetTick>
 80061f6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80061f8:	e008      	b.n	800620c <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80061fa:	f7fe ff7d 	bl	80050f8 <HAL_GetTick>
 80061fe:	4602      	mov	r2, r0
 8006200:	693b      	ldr	r3, [r7, #16]
 8006202:	1ad3      	subs	r3, r2, r3
 8006204:	2b02      	cmp	r3, #2
 8006206:	d901      	bls.n	800620c <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8006208:	2303      	movs	r3, #3
 800620a:	e1e7      	b.n	80065dc <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800620c:	4b0e      	ldr	r3, [pc, #56]	@ (8006248 <HAL_RCC_OscConfig+0x27c>)
 800620e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8006212:	f003 0302 	and.w	r3, r3, #2
 8006216:	2b00      	cmp	r3, #0
 8006218:	d0ef      	beq.n	80061fa <HAL_RCC_OscConfig+0x22e>
 800621a:	e020      	b.n	800625e <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800621c:	4b0a      	ldr	r3, [pc, #40]	@ (8006248 <HAL_RCC_OscConfig+0x27c>)
 800621e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8006222:	4a09      	ldr	r2, [pc, #36]	@ (8006248 <HAL_RCC_OscConfig+0x27c>)
 8006224:	f023 0301 	bic.w	r3, r3, #1
 8006228:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800622c:	f7fe ff64 	bl	80050f8 <HAL_GetTick>
 8006230:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8006232:	e00d      	b.n	8006250 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8006234:	f7fe ff60 	bl	80050f8 <HAL_GetTick>
 8006238:	4602      	mov	r2, r0
 800623a:	693b      	ldr	r3, [r7, #16]
 800623c:	1ad3      	subs	r3, r2, r3
 800623e:	2b02      	cmp	r3, #2
 8006240:	d906      	bls.n	8006250 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8006242:	2303      	movs	r3, #3
 8006244:	e1ca      	b.n	80065dc <HAL_RCC_OscConfig+0x610>
 8006246:	bf00      	nop
 8006248:	40021000 	.word	0x40021000
 800624c:	2000018c 	.word	0x2000018c
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8006250:	4b8c      	ldr	r3, [pc, #560]	@ (8006484 <HAL_RCC_OscConfig+0x4b8>)
 8006252:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8006256:	f003 0302 	and.w	r3, r3, #2
 800625a:	2b00      	cmp	r3, #0
 800625c:	d1ea      	bne.n	8006234 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800625e:	687b      	ldr	r3, [r7, #4]
 8006260:	681b      	ldr	r3, [r3, #0]
 8006262:	f003 0304 	and.w	r3, r3, #4
 8006266:	2b00      	cmp	r3, #0
 8006268:	f000 80a6 	beq.w	80063b8 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 800626c:	2300      	movs	r3, #0
 800626e:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8006270:	4b84      	ldr	r3, [pc, #528]	@ (8006484 <HAL_RCC_OscConfig+0x4b8>)
 8006272:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006274:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006278:	2b00      	cmp	r3, #0
 800627a:	d101      	bne.n	8006280 <HAL_RCC_OscConfig+0x2b4>
 800627c:	2301      	movs	r3, #1
 800627e:	e000      	b.n	8006282 <HAL_RCC_OscConfig+0x2b6>
 8006280:	2300      	movs	r3, #0
 8006282:	2b00      	cmp	r3, #0
 8006284:	d00d      	beq.n	80062a2 <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8006286:	4b7f      	ldr	r3, [pc, #508]	@ (8006484 <HAL_RCC_OscConfig+0x4b8>)
 8006288:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800628a:	4a7e      	ldr	r2, [pc, #504]	@ (8006484 <HAL_RCC_OscConfig+0x4b8>)
 800628c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8006290:	6593      	str	r3, [r2, #88]	@ 0x58
 8006292:	4b7c      	ldr	r3, [pc, #496]	@ (8006484 <HAL_RCC_OscConfig+0x4b8>)
 8006294:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006296:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800629a:	60fb      	str	r3, [r7, #12]
 800629c:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 800629e:	2301      	movs	r3, #1
 80062a0:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80062a2:	4b79      	ldr	r3, [pc, #484]	@ (8006488 <HAL_RCC_OscConfig+0x4bc>)
 80062a4:	681b      	ldr	r3, [r3, #0]
 80062a6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80062aa:	2b00      	cmp	r3, #0
 80062ac:	d118      	bne.n	80062e0 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80062ae:	4b76      	ldr	r3, [pc, #472]	@ (8006488 <HAL_RCC_OscConfig+0x4bc>)
 80062b0:	681b      	ldr	r3, [r3, #0]
 80062b2:	4a75      	ldr	r2, [pc, #468]	@ (8006488 <HAL_RCC_OscConfig+0x4bc>)
 80062b4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80062b8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80062ba:	f7fe ff1d 	bl	80050f8 <HAL_GetTick>
 80062be:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80062c0:	e008      	b.n	80062d4 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80062c2:	f7fe ff19 	bl	80050f8 <HAL_GetTick>
 80062c6:	4602      	mov	r2, r0
 80062c8:	693b      	ldr	r3, [r7, #16]
 80062ca:	1ad3      	subs	r3, r2, r3
 80062cc:	2b02      	cmp	r3, #2
 80062ce:	d901      	bls.n	80062d4 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 80062d0:	2303      	movs	r3, #3
 80062d2:	e183      	b.n	80065dc <HAL_RCC_OscConfig+0x610>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80062d4:	4b6c      	ldr	r3, [pc, #432]	@ (8006488 <HAL_RCC_OscConfig+0x4bc>)
 80062d6:	681b      	ldr	r3, [r3, #0]
 80062d8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80062dc:	2b00      	cmp	r3, #0
 80062de:	d0f0      	beq.n	80062c2 <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80062e0:	687b      	ldr	r3, [r7, #4]
 80062e2:	689b      	ldr	r3, [r3, #8]
 80062e4:	2b01      	cmp	r3, #1
 80062e6:	d108      	bne.n	80062fa <HAL_RCC_OscConfig+0x32e>
 80062e8:	4b66      	ldr	r3, [pc, #408]	@ (8006484 <HAL_RCC_OscConfig+0x4b8>)
 80062ea:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80062ee:	4a65      	ldr	r2, [pc, #404]	@ (8006484 <HAL_RCC_OscConfig+0x4b8>)
 80062f0:	f043 0301 	orr.w	r3, r3, #1
 80062f4:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80062f8:	e024      	b.n	8006344 <HAL_RCC_OscConfig+0x378>
 80062fa:	687b      	ldr	r3, [r7, #4]
 80062fc:	689b      	ldr	r3, [r3, #8]
 80062fe:	2b05      	cmp	r3, #5
 8006300:	d110      	bne.n	8006324 <HAL_RCC_OscConfig+0x358>
 8006302:	4b60      	ldr	r3, [pc, #384]	@ (8006484 <HAL_RCC_OscConfig+0x4b8>)
 8006304:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006308:	4a5e      	ldr	r2, [pc, #376]	@ (8006484 <HAL_RCC_OscConfig+0x4b8>)
 800630a:	f043 0304 	orr.w	r3, r3, #4
 800630e:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8006312:	4b5c      	ldr	r3, [pc, #368]	@ (8006484 <HAL_RCC_OscConfig+0x4b8>)
 8006314:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006318:	4a5a      	ldr	r2, [pc, #360]	@ (8006484 <HAL_RCC_OscConfig+0x4b8>)
 800631a:	f043 0301 	orr.w	r3, r3, #1
 800631e:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8006322:	e00f      	b.n	8006344 <HAL_RCC_OscConfig+0x378>
 8006324:	4b57      	ldr	r3, [pc, #348]	@ (8006484 <HAL_RCC_OscConfig+0x4b8>)
 8006326:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800632a:	4a56      	ldr	r2, [pc, #344]	@ (8006484 <HAL_RCC_OscConfig+0x4b8>)
 800632c:	f023 0301 	bic.w	r3, r3, #1
 8006330:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8006334:	4b53      	ldr	r3, [pc, #332]	@ (8006484 <HAL_RCC_OscConfig+0x4b8>)
 8006336:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800633a:	4a52      	ldr	r2, [pc, #328]	@ (8006484 <HAL_RCC_OscConfig+0x4b8>)
 800633c:	f023 0304 	bic.w	r3, r3, #4
 8006340:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8006344:	687b      	ldr	r3, [r7, #4]
 8006346:	689b      	ldr	r3, [r3, #8]
 8006348:	2b00      	cmp	r3, #0
 800634a:	d016      	beq.n	800637a <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800634c:	f7fe fed4 	bl	80050f8 <HAL_GetTick>
 8006350:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8006352:	e00a      	b.n	800636a <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006354:	f7fe fed0 	bl	80050f8 <HAL_GetTick>
 8006358:	4602      	mov	r2, r0
 800635a:	693b      	ldr	r3, [r7, #16]
 800635c:	1ad3      	subs	r3, r2, r3
 800635e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006362:	4293      	cmp	r3, r2
 8006364:	d901      	bls.n	800636a <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 8006366:	2303      	movs	r3, #3
 8006368:	e138      	b.n	80065dc <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800636a:	4b46      	ldr	r3, [pc, #280]	@ (8006484 <HAL_RCC_OscConfig+0x4b8>)
 800636c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006370:	f003 0302 	and.w	r3, r3, #2
 8006374:	2b00      	cmp	r3, #0
 8006376:	d0ed      	beq.n	8006354 <HAL_RCC_OscConfig+0x388>
 8006378:	e015      	b.n	80063a6 <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800637a:	f7fe febd 	bl	80050f8 <HAL_GetTick>
 800637e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8006380:	e00a      	b.n	8006398 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006382:	f7fe feb9 	bl	80050f8 <HAL_GetTick>
 8006386:	4602      	mov	r2, r0
 8006388:	693b      	ldr	r3, [r7, #16]
 800638a:	1ad3      	subs	r3, r2, r3
 800638c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006390:	4293      	cmp	r3, r2
 8006392:	d901      	bls.n	8006398 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8006394:	2303      	movs	r3, #3
 8006396:	e121      	b.n	80065dc <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8006398:	4b3a      	ldr	r3, [pc, #232]	@ (8006484 <HAL_RCC_OscConfig+0x4b8>)
 800639a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800639e:	f003 0302 	and.w	r3, r3, #2
 80063a2:	2b00      	cmp	r3, #0
 80063a4:	d1ed      	bne.n	8006382 <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80063a6:	7ffb      	ldrb	r3, [r7, #31]
 80063a8:	2b01      	cmp	r3, #1
 80063aa:	d105      	bne.n	80063b8 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80063ac:	4b35      	ldr	r3, [pc, #212]	@ (8006484 <HAL_RCC_OscConfig+0x4b8>)
 80063ae:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80063b0:	4a34      	ldr	r2, [pc, #208]	@ (8006484 <HAL_RCC_OscConfig+0x4b8>)
 80063b2:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80063b6:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80063b8:	687b      	ldr	r3, [r7, #4]
 80063ba:	681b      	ldr	r3, [r3, #0]
 80063bc:	f003 0320 	and.w	r3, r3, #32
 80063c0:	2b00      	cmp	r3, #0
 80063c2:	d03c      	beq.n	800643e <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80063c4:	687b      	ldr	r3, [r7, #4]
 80063c6:	699b      	ldr	r3, [r3, #24]
 80063c8:	2b00      	cmp	r3, #0
 80063ca:	d01c      	beq.n	8006406 <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80063cc:	4b2d      	ldr	r3, [pc, #180]	@ (8006484 <HAL_RCC_OscConfig+0x4b8>)
 80063ce:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80063d2:	4a2c      	ldr	r2, [pc, #176]	@ (8006484 <HAL_RCC_OscConfig+0x4b8>)
 80063d4:	f043 0301 	orr.w	r3, r3, #1
 80063d8:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80063dc:	f7fe fe8c 	bl	80050f8 <HAL_GetTick>
 80063e0:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80063e2:	e008      	b.n	80063f6 <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80063e4:	f7fe fe88 	bl	80050f8 <HAL_GetTick>
 80063e8:	4602      	mov	r2, r0
 80063ea:	693b      	ldr	r3, [r7, #16]
 80063ec:	1ad3      	subs	r3, r2, r3
 80063ee:	2b02      	cmp	r3, #2
 80063f0:	d901      	bls.n	80063f6 <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 80063f2:	2303      	movs	r3, #3
 80063f4:	e0f2      	b.n	80065dc <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80063f6:	4b23      	ldr	r3, [pc, #140]	@ (8006484 <HAL_RCC_OscConfig+0x4b8>)
 80063f8:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80063fc:	f003 0302 	and.w	r3, r3, #2
 8006400:	2b00      	cmp	r3, #0
 8006402:	d0ef      	beq.n	80063e4 <HAL_RCC_OscConfig+0x418>
 8006404:	e01b      	b.n	800643e <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8006406:	4b1f      	ldr	r3, [pc, #124]	@ (8006484 <HAL_RCC_OscConfig+0x4b8>)
 8006408:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800640c:	4a1d      	ldr	r2, [pc, #116]	@ (8006484 <HAL_RCC_OscConfig+0x4b8>)
 800640e:	f023 0301 	bic.w	r3, r3, #1
 8006412:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006416:	f7fe fe6f 	bl	80050f8 <HAL_GetTick>
 800641a:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 800641c:	e008      	b.n	8006430 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800641e:	f7fe fe6b 	bl	80050f8 <HAL_GetTick>
 8006422:	4602      	mov	r2, r0
 8006424:	693b      	ldr	r3, [r7, #16]
 8006426:	1ad3      	subs	r3, r2, r3
 8006428:	2b02      	cmp	r3, #2
 800642a:	d901      	bls.n	8006430 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 800642c:	2303      	movs	r3, #3
 800642e:	e0d5      	b.n	80065dc <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8006430:	4b14      	ldr	r3, [pc, #80]	@ (8006484 <HAL_RCC_OscConfig+0x4b8>)
 8006432:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8006436:	f003 0302 	and.w	r3, r3, #2
 800643a:	2b00      	cmp	r3, #0
 800643c:	d1ef      	bne.n	800641e <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800643e:	687b      	ldr	r3, [r7, #4]
 8006440:	69db      	ldr	r3, [r3, #28]
 8006442:	2b00      	cmp	r3, #0
 8006444:	f000 80c9 	beq.w	80065da <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8006448:	4b0e      	ldr	r3, [pc, #56]	@ (8006484 <HAL_RCC_OscConfig+0x4b8>)
 800644a:	689b      	ldr	r3, [r3, #8]
 800644c:	f003 030c 	and.w	r3, r3, #12
 8006450:	2b0c      	cmp	r3, #12
 8006452:	f000 8083 	beq.w	800655c <HAL_RCC_OscConfig+0x590>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8006456:	687b      	ldr	r3, [r7, #4]
 8006458:	69db      	ldr	r3, [r3, #28]
 800645a:	2b02      	cmp	r3, #2
 800645c:	d15e      	bne.n	800651c <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800645e:	4b09      	ldr	r3, [pc, #36]	@ (8006484 <HAL_RCC_OscConfig+0x4b8>)
 8006460:	681b      	ldr	r3, [r3, #0]
 8006462:	4a08      	ldr	r2, [pc, #32]	@ (8006484 <HAL_RCC_OscConfig+0x4b8>)
 8006464:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8006468:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800646a:	f7fe fe45 	bl	80050f8 <HAL_GetTick>
 800646e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8006470:	e00c      	b.n	800648c <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006472:	f7fe fe41 	bl	80050f8 <HAL_GetTick>
 8006476:	4602      	mov	r2, r0
 8006478:	693b      	ldr	r3, [r7, #16]
 800647a:	1ad3      	subs	r3, r2, r3
 800647c:	2b02      	cmp	r3, #2
 800647e:	d905      	bls.n	800648c <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 8006480:	2303      	movs	r3, #3
 8006482:	e0ab      	b.n	80065dc <HAL_RCC_OscConfig+0x610>
 8006484:	40021000 	.word	0x40021000
 8006488:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800648c:	4b55      	ldr	r3, [pc, #340]	@ (80065e4 <HAL_RCC_OscConfig+0x618>)
 800648e:	681b      	ldr	r3, [r3, #0]
 8006490:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006494:	2b00      	cmp	r3, #0
 8006496:	d1ec      	bne.n	8006472 <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8006498:	4b52      	ldr	r3, [pc, #328]	@ (80065e4 <HAL_RCC_OscConfig+0x618>)
 800649a:	68da      	ldr	r2, [r3, #12]
 800649c:	4b52      	ldr	r3, [pc, #328]	@ (80065e8 <HAL_RCC_OscConfig+0x61c>)
 800649e:	4013      	ands	r3, r2
 80064a0:	687a      	ldr	r2, [r7, #4]
 80064a2:	6a11      	ldr	r1, [r2, #32]
 80064a4:	687a      	ldr	r2, [r7, #4]
 80064a6:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 80064a8:	3a01      	subs	r2, #1
 80064aa:	0112      	lsls	r2, r2, #4
 80064ac:	4311      	orrs	r1, r2
 80064ae:	687a      	ldr	r2, [r7, #4]
 80064b0:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 80064b2:	0212      	lsls	r2, r2, #8
 80064b4:	4311      	orrs	r1, r2
 80064b6:	687a      	ldr	r2, [r7, #4]
 80064b8:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 80064ba:	0852      	lsrs	r2, r2, #1
 80064bc:	3a01      	subs	r2, #1
 80064be:	0552      	lsls	r2, r2, #21
 80064c0:	4311      	orrs	r1, r2
 80064c2:	687a      	ldr	r2, [r7, #4]
 80064c4:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 80064c6:	0852      	lsrs	r2, r2, #1
 80064c8:	3a01      	subs	r2, #1
 80064ca:	0652      	lsls	r2, r2, #25
 80064cc:	4311      	orrs	r1, r2
 80064ce:	687a      	ldr	r2, [r7, #4]
 80064d0:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 80064d2:	06d2      	lsls	r2, r2, #27
 80064d4:	430a      	orrs	r2, r1
 80064d6:	4943      	ldr	r1, [pc, #268]	@ (80065e4 <HAL_RCC_OscConfig+0x618>)
 80064d8:	4313      	orrs	r3, r2
 80064da:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80064dc:	4b41      	ldr	r3, [pc, #260]	@ (80065e4 <HAL_RCC_OscConfig+0x618>)
 80064de:	681b      	ldr	r3, [r3, #0]
 80064e0:	4a40      	ldr	r2, [pc, #256]	@ (80065e4 <HAL_RCC_OscConfig+0x618>)
 80064e2:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80064e6:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80064e8:	4b3e      	ldr	r3, [pc, #248]	@ (80065e4 <HAL_RCC_OscConfig+0x618>)
 80064ea:	68db      	ldr	r3, [r3, #12]
 80064ec:	4a3d      	ldr	r2, [pc, #244]	@ (80065e4 <HAL_RCC_OscConfig+0x618>)
 80064ee:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80064f2:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80064f4:	f7fe fe00 	bl	80050f8 <HAL_GetTick>
 80064f8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80064fa:	e008      	b.n	800650e <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80064fc:	f7fe fdfc 	bl	80050f8 <HAL_GetTick>
 8006500:	4602      	mov	r2, r0
 8006502:	693b      	ldr	r3, [r7, #16]
 8006504:	1ad3      	subs	r3, r2, r3
 8006506:	2b02      	cmp	r3, #2
 8006508:	d901      	bls.n	800650e <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 800650a:	2303      	movs	r3, #3
 800650c:	e066      	b.n	80065dc <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800650e:	4b35      	ldr	r3, [pc, #212]	@ (80065e4 <HAL_RCC_OscConfig+0x618>)
 8006510:	681b      	ldr	r3, [r3, #0]
 8006512:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006516:	2b00      	cmp	r3, #0
 8006518:	d0f0      	beq.n	80064fc <HAL_RCC_OscConfig+0x530>
 800651a:	e05e      	b.n	80065da <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800651c:	4b31      	ldr	r3, [pc, #196]	@ (80065e4 <HAL_RCC_OscConfig+0x618>)
 800651e:	681b      	ldr	r3, [r3, #0]
 8006520:	4a30      	ldr	r2, [pc, #192]	@ (80065e4 <HAL_RCC_OscConfig+0x618>)
 8006522:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8006526:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006528:	f7fe fde6 	bl	80050f8 <HAL_GetTick>
 800652c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800652e:	e008      	b.n	8006542 <HAL_RCC_OscConfig+0x576>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006530:	f7fe fde2 	bl	80050f8 <HAL_GetTick>
 8006534:	4602      	mov	r2, r0
 8006536:	693b      	ldr	r3, [r7, #16]
 8006538:	1ad3      	subs	r3, r2, r3
 800653a:	2b02      	cmp	r3, #2
 800653c:	d901      	bls.n	8006542 <HAL_RCC_OscConfig+0x576>
          {
            return HAL_TIMEOUT;
 800653e:	2303      	movs	r3, #3
 8006540:	e04c      	b.n	80065dc <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8006542:	4b28      	ldr	r3, [pc, #160]	@ (80065e4 <HAL_RCC_OscConfig+0x618>)
 8006544:	681b      	ldr	r3, [r3, #0]
 8006546:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800654a:	2b00      	cmp	r3, #0
 800654c:	d1f0      	bne.n	8006530 <HAL_RCC_OscConfig+0x564>
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 800654e:	4b25      	ldr	r3, [pc, #148]	@ (80065e4 <HAL_RCC_OscConfig+0x618>)
 8006550:	68da      	ldr	r2, [r3, #12]
 8006552:	4924      	ldr	r1, [pc, #144]	@ (80065e4 <HAL_RCC_OscConfig+0x618>)
 8006554:	4b25      	ldr	r3, [pc, #148]	@ (80065ec <HAL_RCC_OscConfig+0x620>)
 8006556:	4013      	ands	r3, r2
 8006558:	60cb      	str	r3, [r1, #12]
 800655a:	e03e      	b.n	80065da <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800655c:	687b      	ldr	r3, [r7, #4]
 800655e:	69db      	ldr	r3, [r3, #28]
 8006560:	2b01      	cmp	r3, #1
 8006562:	d101      	bne.n	8006568 <HAL_RCC_OscConfig+0x59c>
      {
        return HAL_ERROR;
 8006564:	2301      	movs	r3, #1
 8006566:	e039      	b.n	80065dc <HAL_RCC_OscConfig+0x610>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 8006568:	4b1e      	ldr	r3, [pc, #120]	@ (80065e4 <HAL_RCC_OscConfig+0x618>)
 800656a:	68db      	ldr	r3, [r3, #12]
 800656c:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800656e:	697b      	ldr	r3, [r7, #20]
 8006570:	f003 0203 	and.w	r2, r3, #3
 8006574:	687b      	ldr	r3, [r7, #4]
 8006576:	6a1b      	ldr	r3, [r3, #32]
 8006578:	429a      	cmp	r2, r3
 800657a:	d12c      	bne.n	80065d6 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800657c:	697b      	ldr	r3, [r7, #20]
 800657e:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8006582:	687b      	ldr	r3, [r7, #4]
 8006584:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006586:	3b01      	subs	r3, #1
 8006588:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800658a:	429a      	cmp	r2, r3
 800658c:	d123      	bne.n	80065d6 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 800658e:	697b      	ldr	r3, [r7, #20]
 8006590:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8006594:	687b      	ldr	r3, [r7, #4]
 8006596:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006598:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800659a:	429a      	cmp	r2, r3
 800659c:	d11b      	bne.n	80065d6 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800659e:	697b      	ldr	r3, [r7, #20]
 80065a0:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 80065a4:	687b      	ldr	r3, [r7, #4]
 80065a6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80065a8:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 80065aa:	429a      	cmp	r2, r3
 80065ac:	d113      	bne.n	80065d6 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80065ae:	697b      	ldr	r3, [r7, #20]
 80065b0:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 80065b4:	687b      	ldr	r3, [r7, #4]
 80065b6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80065b8:	085b      	lsrs	r3, r3, #1
 80065ba:	3b01      	subs	r3, #1
 80065bc:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80065be:	429a      	cmp	r2, r3
 80065c0:	d109      	bne.n	80065d6 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80065c2:	697b      	ldr	r3, [r7, #20]
 80065c4:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 80065c8:	687b      	ldr	r3, [r7, #4]
 80065ca:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80065cc:	085b      	lsrs	r3, r3, #1
 80065ce:	3b01      	subs	r3, #1
 80065d0:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80065d2:	429a      	cmp	r2, r3
 80065d4:	d001      	beq.n	80065da <HAL_RCC_OscConfig+0x60e>
      {
        return HAL_ERROR;
 80065d6:	2301      	movs	r3, #1
 80065d8:	e000      	b.n	80065dc <HAL_RCC_OscConfig+0x610>
      }
    }
  }
  }

  return HAL_OK;
 80065da:	2300      	movs	r3, #0
}
 80065dc:	4618      	mov	r0, r3
 80065de:	3720      	adds	r7, #32
 80065e0:	46bd      	mov	sp, r7
 80065e2:	bd80      	pop	{r7, pc}
 80065e4:	40021000 	.word	0x40021000
 80065e8:	019f800c 	.word	0x019f800c
 80065ec:	feeefffc 	.word	0xfeeefffc

080065f0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80065f0:	b580      	push	{r7, lr}
 80065f2:	b086      	sub	sp, #24
 80065f4:	af00      	add	r7, sp, #0
 80065f6:	6078      	str	r0, [r7, #4]
 80065f8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 80065fa:	2300      	movs	r3, #0
 80065fc:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80065fe:	687b      	ldr	r3, [r7, #4]
 8006600:	2b00      	cmp	r3, #0
 8006602:	d101      	bne.n	8006608 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8006604:	2301      	movs	r3, #1
 8006606:	e11e      	b.n	8006846 <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8006608:	4b91      	ldr	r3, [pc, #580]	@ (8006850 <HAL_RCC_ClockConfig+0x260>)
 800660a:	681b      	ldr	r3, [r3, #0]
 800660c:	f003 030f 	and.w	r3, r3, #15
 8006610:	683a      	ldr	r2, [r7, #0]
 8006612:	429a      	cmp	r2, r3
 8006614:	d910      	bls.n	8006638 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006616:	4b8e      	ldr	r3, [pc, #568]	@ (8006850 <HAL_RCC_ClockConfig+0x260>)
 8006618:	681b      	ldr	r3, [r3, #0]
 800661a:	f023 020f 	bic.w	r2, r3, #15
 800661e:	498c      	ldr	r1, [pc, #560]	@ (8006850 <HAL_RCC_ClockConfig+0x260>)
 8006620:	683b      	ldr	r3, [r7, #0]
 8006622:	4313      	orrs	r3, r2
 8006624:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006626:	4b8a      	ldr	r3, [pc, #552]	@ (8006850 <HAL_RCC_ClockConfig+0x260>)
 8006628:	681b      	ldr	r3, [r3, #0]
 800662a:	f003 030f 	and.w	r3, r3, #15
 800662e:	683a      	ldr	r2, [r7, #0]
 8006630:	429a      	cmp	r2, r3
 8006632:	d001      	beq.n	8006638 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8006634:	2301      	movs	r3, #1
 8006636:	e106      	b.n	8006846 <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8006638:	687b      	ldr	r3, [r7, #4]
 800663a:	681b      	ldr	r3, [r3, #0]
 800663c:	f003 0301 	and.w	r3, r3, #1
 8006640:	2b00      	cmp	r3, #0
 8006642:	d073      	beq.n	800672c <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8006644:	687b      	ldr	r3, [r7, #4]
 8006646:	685b      	ldr	r3, [r3, #4]
 8006648:	2b03      	cmp	r3, #3
 800664a:	d129      	bne.n	80066a0 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800664c:	4b81      	ldr	r3, [pc, #516]	@ (8006854 <HAL_RCC_ClockConfig+0x264>)
 800664e:	681b      	ldr	r3, [r3, #0]
 8006650:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006654:	2b00      	cmp	r3, #0
 8006656:	d101      	bne.n	800665c <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 8006658:	2301      	movs	r3, #1
 800665a:	e0f4      	b.n	8006846 <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 800665c:	f000 f99c 	bl	8006998 <RCC_GetSysClockFreqFromPLLSource>
 8006660:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 8006662:	693b      	ldr	r3, [r7, #16]
 8006664:	4a7c      	ldr	r2, [pc, #496]	@ (8006858 <HAL_RCC_ClockConfig+0x268>)
 8006666:	4293      	cmp	r3, r2
 8006668:	d93f      	bls.n	80066ea <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 800666a:	4b7a      	ldr	r3, [pc, #488]	@ (8006854 <HAL_RCC_ClockConfig+0x264>)
 800666c:	689b      	ldr	r3, [r3, #8]
 800666e:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8006672:	2b00      	cmp	r3, #0
 8006674:	d009      	beq.n	800668a <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8006676:	687b      	ldr	r3, [r7, #4]
 8006678:	681b      	ldr	r3, [r3, #0]
 800667a:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 800667e:	2b00      	cmp	r3, #0
 8006680:	d033      	beq.n	80066ea <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 8006682:	687b      	ldr	r3, [r7, #4]
 8006684:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8006686:	2b00      	cmp	r3, #0
 8006688:	d12f      	bne.n	80066ea <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 800668a:	4b72      	ldr	r3, [pc, #456]	@ (8006854 <HAL_RCC_ClockConfig+0x264>)
 800668c:	689b      	ldr	r3, [r3, #8]
 800668e:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8006692:	4a70      	ldr	r2, [pc, #448]	@ (8006854 <HAL_RCC_ClockConfig+0x264>)
 8006694:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006698:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 800669a:	2380      	movs	r3, #128	@ 0x80
 800669c:	617b      	str	r3, [r7, #20]
 800669e:	e024      	b.n	80066ea <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80066a0:	687b      	ldr	r3, [r7, #4]
 80066a2:	685b      	ldr	r3, [r3, #4]
 80066a4:	2b02      	cmp	r3, #2
 80066a6:	d107      	bne.n	80066b8 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80066a8:	4b6a      	ldr	r3, [pc, #424]	@ (8006854 <HAL_RCC_ClockConfig+0x264>)
 80066aa:	681b      	ldr	r3, [r3, #0]
 80066ac:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80066b0:	2b00      	cmp	r3, #0
 80066b2:	d109      	bne.n	80066c8 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 80066b4:	2301      	movs	r3, #1
 80066b6:	e0c6      	b.n	8006846 <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80066b8:	4b66      	ldr	r3, [pc, #408]	@ (8006854 <HAL_RCC_ClockConfig+0x264>)
 80066ba:	681b      	ldr	r3, [r3, #0]
 80066bc:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80066c0:	2b00      	cmp	r3, #0
 80066c2:	d101      	bne.n	80066c8 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 80066c4:	2301      	movs	r3, #1
 80066c6:	e0be      	b.n	8006846 <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 80066c8:	f000 f8ce 	bl	8006868 <HAL_RCC_GetSysClockFreq>
 80066cc:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 80066ce:	693b      	ldr	r3, [r7, #16]
 80066d0:	4a61      	ldr	r2, [pc, #388]	@ (8006858 <HAL_RCC_ClockConfig+0x268>)
 80066d2:	4293      	cmp	r3, r2
 80066d4:	d909      	bls.n	80066ea <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 80066d6:	4b5f      	ldr	r3, [pc, #380]	@ (8006854 <HAL_RCC_ClockConfig+0x264>)
 80066d8:	689b      	ldr	r3, [r3, #8]
 80066da:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80066de:	4a5d      	ldr	r2, [pc, #372]	@ (8006854 <HAL_RCC_ClockConfig+0x264>)
 80066e0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80066e4:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 80066e6:	2380      	movs	r3, #128	@ 0x80
 80066e8:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80066ea:	4b5a      	ldr	r3, [pc, #360]	@ (8006854 <HAL_RCC_ClockConfig+0x264>)
 80066ec:	689b      	ldr	r3, [r3, #8]
 80066ee:	f023 0203 	bic.w	r2, r3, #3
 80066f2:	687b      	ldr	r3, [r7, #4]
 80066f4:	685b      	ldr	r3, [r3, #4]
 80066f6:	4957      	ldr	r1, [pc, #348]	@ (8006854 <HAL_RCC_ClockConfig+0x264>)
 80066f8:	4313      	orrs	r3, r2
 80066fa:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80066fc:	f7fe fcfc 	bl	80050f8 <HAL_GetTick>
 8006700:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006702:	e00a      	b.n	800671a <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006704:	f7fe fcf8 	bl	80050f8 <HAL_GetTick>
 8006708:	4602      	mov	r2, r0
 800670a:	68fb      	ldr	r3, [r7, #12]
 800670c:	1ad3      	subs	r3, r2, r3
 800670e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006712:	4293      	cmp	r3, r2
 8006714:	d901      	bls.n	800671a <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 8006716:	2303      	movs	r3, #3
 8006718:	e095      	b.n	8006846 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800671a:	4b4e      	ldr	r3, [pc, #312]	@ (8006854 <HAL_RCC_ClockConfig+0x264>)
 800671c:	689b      	ldr	r3, [r3, #8]
 800671e:	f003 020c 	and.w	r2, r3, #12
 8006722:	687b      	ldr	r3, [r7, #4]
 8006724:	685b      	ldr	r3, [r3, #4]
 8006726:	009b      	lsls	r3, r3, #2
 8006728:	429a      	cmp	r2, r3
 800672a:	d1eb      	bne.n	8006704 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800672c:	687b      	ldr	r3, [r7, #4]
 800672e:	681b      	ldr	r3, [r3, #0]
 8006730:	f003 0302 	and.w	r3, r3, #2
 8006734:	2b00      	cmp	r3, #0
 8006736:	d023      	beq.n	8006780 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006738:	687b      	ldr	r3, [r7, #4]
 800673a:	681b      	ldr	r3, [r3, #0]
 800673c:	f003 0304 	and.w	r3, r3, #4
 8006740:	2b00      	cmp	r3, #0
 8006742:	d005      	beq.n	8006750 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8006744:	4b43      	ldr	r3, [pc, #268]	@ (8006854 <HAL_RCC_ClockConfig+0x264>)
 8006746:	689b      	ldr	r3, [r3, #8]
 8006748:	4a42      	ldr	r2, [pc, #264]	@ (8006854 <HAL_RCC_ClockConfig+0x264>)
 800674a:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 800674e:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006750:	687b      	ldr	r3, [r7, #4]
 8006752:	681b      	ldr	r3, [r3, #0]
 8006754:	f003 0308 	and.w	r3, r3, #8
 8006758:	2b00      	cmp	r3, #0
 800675a:	d007      	beq.n	800676c <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 800675c:	4b3d      	ldr	r3, [pc, #244]	@ (8006854 <HAL_RCC_ClockConfig+0x264>)
 800675e:	689b      	ldr	r3, [r3, #8]
 8006760:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8006764:	4a3b      	ldr	r2, [pc, #236]	@ (8006854 <HAL_RCC_ClockConfig+0x264>)
 8006766:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 800676a:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800676c:	4b39      	ldr	r3, [pc, #228]	@ (8006854 <HAL_RCC_ClockConfig+0x264>)
 800676e:	689b      	ldr	r3, [r3, #8]
 8006770:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8006774:	687b      	ldr	r3, [r7, #4]
 8006776:	689b      	ldr	r3, [r3, #8]
 8006778:	4936      	ldr	r1, [pc, #216]	@ (8006854 <HAL_RCC_ClockConfig+0x264>)
 800677a:	4313      	orrs	r3, r2
 800677c:	608b      	str	r3, [r1, #8]
 800677e:	e008      	b.n	8006792 <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8006780:	697b      	ldr	r3, [r7, #20]
 8006782:	2b80      	cmp	r3, #128	@ 0x80
 8006784:	d105      	bne.n	8006792 <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8006786:	4b33      	ldr	r3, [pc, #204]	@ (8006854 <HAL_RCC_ClockConfig+0x264>)
 8006788:	689b      	ldr	r3, [r3, #8]
 800678a:	4a32      	ldr	r2, [pc, #200]	@ (8006854 <HAL_RCC_ClockConfig+0x264>)
 800678c:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8006790:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8006792:	4b2f      	ldr	r3, [pc, #188]	@ (8006850 <HAL_RCC_ClockConfig+0x260>)
 8006794:	681b      	ldr	r3, [r3, #0]
 8006796:	f003 030f 	and.w	r3, r3, #15
 800679a:	683a      	ldr	r2, [r7, #0]
 800679c:	429a      	cmp	r2, r3
 800679e:	d21d      	bcs.n	80067dc <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80067a0:	4b2b      	ldr	r3, [pc, #172]	@ (8006850 <HAL_RCC_ClockConfig+0x260>)
 80067a2:	681b      	ldr	r3, [r3, #0]
 80067a4:	f023 020f 	bic.w	r2, r3, #15
 80067a8:	4929      	ldr	r1, [pc, #164]	@ (8006850 <HAL_RCC_ClockConfig+0x260>)
 80067aa:	683b      	ldr	r3, [r7, #0]
 80067ac:	4313      	orrs	r3, r2
 80067ae:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 80067b0:	f7fe fca2 	bl	80050f8 <HAL_GetTick>
 80067b4:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80067b6:	e00a      	b.n	80067ce <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80067b8:	f7fe fc9e 	bl	80050f8 <HAL_GetTick>
 80067bc:	4602      	mov	r2, r0
 80067be:	68fb      	ldr	r3, [r7, #12]
 80067c0:	1ad3      	subs	r3, r2, r3
 80067c2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80067c6:	4293      	cmp	r3, r2
 80067c8:	d901      	bls.n	80067ce <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 80067ca:	2303      	movs	r3, #3
 80067cc:	e03b      	b.n	8006846 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80067ce:	4b20      	ldr	r3, [pc, #128]	@ (8006850 <HAL_RCC_ClockConfig+0x260>)
 80067d0:	681b      	ldr	r3, [r3, #0]
 80067d2:	f003 030f 	and.w	r3, r3, #15
 80067d6:	683a      	ldr	r2, [r7, #0]
 80067d8:	429a      	cmp	r2, r3
 80067da:	d1ed      	bne.n	80067b8 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80067dc:	687b      	ldr	r3, [r7, #4]
 80067de:	681b      	ldr	r3, [r3, #0]
 80067e0:	f003 0304 	and.w	r3, r3, #4
 80067e4:	2b00      	cmp	r3, #0
 80067e6:	d008      	beq.n	80067fa <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80067e8:	4b1a      	ldr	r3, [pc, #104]	@ (8006854 <HAL_RCC_ClockConfig+0x264>)
 80067ea:	689b      	ldr	r3, [r3, #8]
 80067ec:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80067f0:	687b      	ldr	r3, [r7, #4]
 80067f2:	68db      	ldr	r3, [r3, #12]
 80067f4:	4917      	ldr	r1, [pc, #92]	@ (8006854 <HAL_RCC_ClockConfig+0x264>)
 80067f6:	4313      	orrs	r3, r2
 80067f8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80067fa:	687b      	ldr	r3, [r7, #4]
 80067fc:	681b      	ldr	r3, [r3, #0]
 80067fe:	f003 0308 	and.w	r3, r3, #8
 8006802:	2b00      	cmp	r3, #0
 8006804:	d009      	beq.n	800681a <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8006806:	4b13      	ldr	r3, [pc, #76]	@ (8006854 <HAL_RCC_ClockConfig+0x264>)
 8006808:	689b      	ldr	r3, [r3, #8]
 800680a:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 800680e:	687b      	ldr	r3, [r7, #4]
 8006810:	691b      	ldr	r3, [r3, #16]
 8006812:	00db      	lsls	r3, r3, #3
 8006814:	490f      	ldr	r1, [pc, #60]	@ (8006854 <HAL_RCC_ClockConfig+0x264>)
 8006816:	4313      	orrs	r3, r2
 8006818:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800681a:	f000 f825 	bl	8006868 <HAL_RCC_GetSysClockFreq>
 800681e:	4602      	mov	r2, r0
 8006820:	4b0c      	ldr	r3, [pc, #48]	@ (8006854 <HAL_RCC_ClockConfig+0x264>)
 8006822:	689b      	ldr	r3, [r3, #8]
 8006824:	091b      	lsrs	r3, r3, #4
 8006826:	f003 030f 	and.w	r3, r3, #15
 800682a:	490c      	ldr	r1, [pc, #48]	@ (800685c <HAL_RCC_ClockConfig+0x26c>)
 800682c:	5ccb      	ldrb	r3, [r1, r3]
 800682e:	f003 031f 	and.w	r3, r3, #31
 8006832:	fa22 f303 	lsr.w	r3, r2, r3
 8006836:	4a0a      	ldr	r2, [pc, #40]	@ (8006860 <HAL_RCC_ClockConfig+0x270>)
 8006838:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 800683a:	4b0a      	ldr	r3, [pc, #40]	@ (8006864 <HAL_RCC_ClockConfig+0x274>)
 800683c:	681b      	ldr	r3, [r3, #0]
 800683e:	4618      	mov	r0, r3
 8006840:	f7fe fc0e 	bl	8005060 <HAL_InitTick>
 8006844:	4603      	mov	r3, r0
}
 8006846:	4618      	mov	r0, r3
 8006848:	3718      	adds	r7, #24
 800684a:	46bd      	mov	sp, r7
 800684c:	bd80      	pop	{r7, pc}
 800684e:	bf00      	nop
 8006850:	40022000 	.word	0x40022000
 8006854:	40021000 	.word	0x40021000
 8006858:	04c4b400 	.word	0x04c4b400
 800685c:	0800d078 	.word	0x0800d078
 8006860:	20000008 	.word	0x20000008
 8006864:	2000018c 	.word	0x2000018c

08006868 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006868:	b480      	push	{r7}
 800686a:	b087      	sub	sp, #28
 800686c:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 800686e:	4b2c      	ldr	r3, [pc, #176]	@ (8006920 <HAL_RCC_GetSysClockFreq+0xb8>)
 8006870:	689b      	ldr	r3, [r3, #8]
 8006872:	f003 030c 	and.w	r3, r3, #12
 8006876:	2b04      	cmp	r3, #4
 8006878:	d102      	bne.n	8006880 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 800687a:	4b2a      	ldr	r3, [pc, #168]	@ (8006924 <HAL_RCC_GetSysClockFreq+0xbc>)
 800687c:	613b      	str	r3, [r7, #16]
 800687e:	e047      	b.n	8006910 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8006880:	4b27      	ldr	r3, [pc, #156]	@ (8006920 <HAL_RCC_GetSysClockFreq+0xb8>)
 8006882:	689b      	ldr	r3, [r3, #8]
 8006884:	f003 030c 	and.w	r3, r3, #12
 8006888:	2b08      	cmp	r3, #8
 800688a:	d102      	bne.n	8006892 <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 800688c:	4b25      	ldr	r3, [pc, #148]	@ (8006924 <HAL_RCC_GetSysClockFreq+0xbc>)
 800688e:	613b      	str	r3, [r7, #16]
 8006890:	e03e      	b.n	8006910 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 8006892:	4b23      	ldr	r3, [pc, #140]	@ (8006920 <HAL_RCC_GetSysClockFreq+0xb8>)
 8006894:	689b      	ldr	r3, [r3, #8]
 8006896:	f003 030c 	and.w	r3, r3, #12
 800689a:	2b0c      	cmp	r3, #12
 800689c:	d136      	bne.n	800690c <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800689e:	4b20      	ldr	r3, [pc, #128]	@ (8006920 <HAL_RCC_GetSysClockFreq+0xb8>)
 80068a0:	68db      	ldr	r3, [r3, #12]
 80068a2:	f003 0303 	and.w	r3, r3, #3
 80068a6:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80068a8:	4b1d      	ldr	r3, [pc, #116]	@ (8006920 <HAL_RCC_GetSysClockFreq+0xb8>)
 80068aa:	68db      	ldr	r3, [r3, #12]
 80068ac:	091b      	lsrs	r3, r3, #4
 80068ae:	f003 030f 	and.w	r3, r3, #15
 80068b2:	3301      	adds	r3, #1
 80068b4:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80068b6:	68fb      	ldr	r3, [r7, #12]
 80068b8:	2b03      	cmp	r3, #3
 80068ba:	d10c      	bne.n	80068d6 <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80068bc:	4a19      	ldr	r2, [pc, #100]	@ (8006924 <HAL_RCC_GetSysClockFreq+0xbc>)
 80068be:	68bb      	ldr	r3, [r7, #8]
 80068c0:	fbb2 f3f3 	udiv	r3, r2, r3
 80068c4:	4a16      	ldr	r2, [pc, #88]	@ (8006920 <HAL_RCC_GetSysClockFreq+0xb8>)
 80068c6:	68d2      	ldr	r2, [r2, #12]
 80068c8:	0a12      	lsrs	r2, r2, #8
 80068ca:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 80068ce:	fb02 f303 	mul.w	r3, r2, r3
 80068d2:	617b      	str	r3, [r7, #20]
      break;
 80068d4:	e00c      	b.n	80068f0 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80068d6:	4a13      	ldr	r2, [pc, #76]	@ (8006924 <HAL_RCC_GetSysClockFreq+0xbc>)
 80068d8:	68bb      	ldr	r3, [r7, #8]
 80068da:	fbb2 f3f3 	udiv	r3, r2, r3
 80068de:	4a10      	ldr	r2, [pc, #64]	@ (8006920 <HAL_RCC_GetSysClockFreq+0xb8>)
 80068e0:	68d2      	ldr	r2, [r2, #12]
 80068e2:	0a12      	lsrs	r2, r2, #8
 80068e4:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 80068e8:	fb02 f303 	mul.w	r3, r2, r3
 80068ec:	617b      	str	r3, [r7, #20]
      break;
 80068ee:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80068f0:	4b0b      	ldr	r3, [pc, #44]	@ (8006920 <HAL_RCC_GetSysClockFreq+0xb8>)
 80068f2:	68db      	ldr	r3, [r3, #12]
 80068f4:	0e5b      	lsrs	r3, r3, #25
 80068f6:	f003 0303 	and.w	r3, r3, #3
 80068fa:	3301      	adds	r3, #1
 80068fc:	005b      	lsls	r3, r3, #1
 80068fe:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 8006900:	697a      	ldr	r2, [r7, #20]
 8006902:	687b      	ldr	r3, [r7, #4]
 8006904:	fbb2 f3f3 	udiv	r3, r2, r3
 8006908:	613b      	str	r3, [r7, #16]
 800690a:	e001      	b.n	8006910 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 800690c:	2300      	movs	r3, #0
 800690e:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8006910:	693b      	ldr	r3, [r7, #16]
}
 8006912:	4618      	mov	r0, r3
 8006914:	371c      	adds	r7, #28
 8006916:	46bd      	mov	sp, r7
 8006918:	f85d 7b04 	ldr.w	r7, [sp], #4
 800691c:	4770      	bx	lr
 800691e:	bf00      	nop
 8006920:	40021000 	.word	0x40021000
 8006924:	00f42400 	.word	0x00f42400

08006928 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006928:	b480      	push	{r7}
 800692a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800692c:	4b03      	ldr	r3, [pc, #12]	@ (800693c <HAL_RCC_GetHCLKFreq+0x14>)
 800692e:	681b      	ldr	r3, [r3, #0]
}
 8006930:	4618      	mov	r0, r3
 8006932:	46bd      	mov	sp, r7
 8006934:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006938:	4770      	bx	lr
 800693a:	bf00      	nop
 800693c:	20000008 	.word	0x20000008

08006940 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8006940:	b580      	push	{r7, lr}
 8006942:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8006944:	f7ff fff0 	bl	8006928 <HAL_RCC_GetHCLKFreq>
 8006948:	4602      	mov	r2, r0
 800694a:	4b06      	ldr	r3, [pc, #24]	@ (8006964 <HAL_RCC_GetPCLK1Freq+0x24>)
 800694c:	689b      	ldr	r3, [r3, #8]
 800694e:	0a1b      	lsrs	r3, r3, #8
 8006950:	f003 0307 	and.w	r3, r3, #7
 8006954:	4904      	ldr	r1, [pc, #16]	@ (8006968 <HAL_RCC_GetPCLK1Freq+0x28>)
 8006956:	5ccb      	ldrb	r3, [r1, r3]
 8006958:	f003 031f 	and.w	r3, r3, #31
 800695c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006960:	4618      	mov	r0, r3
 8006962:	bd80      	pop	{r7, pc}
 8006964:	40021000 	.word	0x40021000
 8006968:	0800d088 	.word	0x0800d088

0800696c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800696c:	b580      	push	{r7, lr}
 800696e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8006970:	f7ff ffda 	bl	8006928 <HAL_RCC_GetHCLKFreq>
 8006974:	4602      	mov	r2, r0
 8006976:	4b06      	ldr	r3, [pc, #24]	@ (8006990 <HAL_RCC_GetPCLK2Freq+0x24>)
 8006978:	689b      	ldr	r3, [r3, #8]
 800697a:	0adb      	lsrs	r3, r3, #11
 800697c:	f003 0307 	and.w	r3, r3, #7
 8006980:	4904      	ldr	r1, [pc, #16]	@ (8006994 <HAL_RCC_GetPCLK2Freq+0x28>)
 8006982:	5ccb      	ldrb	r3, [r1, r3]
 8006984:	f003 031f 	and.w	r3, r3, #31
 8006988:	fa22 f303 	lsr.w	r3, r2, r3
}
 800698c:	4618      	mov	r0, r3
 800698e:	bd80      	pop	{r7, pc}
 8006990:	40021000 	.word	0x40021000
 8006994:	0800d088 	.word	0x0800d088

08006998 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8006998:	b480      	push	{r7}
 800699a:	b087      	sub	sp, #28
 800699c:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800699e:	4b1e      	ldr	r3, [pc, #120]	@ (8006a18 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80069a0:	68db      	ldr	r3, [r3, #12]
 80069a2:	f003 0303 	and.w	r3, r3, #3
 80069a6:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80069a8:	4b1b      	ldr	r3, [pc, #108]	@ (8006a18 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80069aa:	68db      	ldr	r3, [r3, #12]
 80069ac:	091b      	lsrs	r3, r3, #4
 80069ae:	f003 030f 	and.w	r3, r3, #15
 80069b2:	3301      	adds	r3, #1
 80069b4:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 80069b6:	693b      	ldr	r3, [r7, #16]
 80069b8:	2b03      	cmp	r3, #3
 80069ba:	d10c      	bne.n	80069d6 <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80069bc:	4a17      	ldr	r2, [pc, #92]	@ (8006a1c <RCC_GetSysClockFreqFromPLLSource+0x84>)
 80069be:	68fb      	ldr	r3, [r7, #12]
 80069c0:	fbb2 f3f3 	udiv	r3, r2, r3
 80069c4:	4a14      	ldr	r2, [pc, #80]	@ (8006a18 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80069c6:	68d2      	ldr	r2, [r2, #12]
 80069c8:	0a12      	lsrs	r2, r2, #8
 80069ca:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 80069ce:	fb02 f303 	mul.w	r3, r2, r3
 80069d2:	617b      	str	r3, [r7, #20]
    break;
 80069d4:	e00c      	b.n	80069f0 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80069d6:	4a11      	ldr	r2, [pc, #68]	@ (8006a1c <RCC_GetSysClockFreqFromPLLSource+0x84>)
 80069d8:	68fb      	ldr	r3, [r7, #12]
 80069da:	fbb2 f3f3 	udiv	r3, r2, r3
 80069de:	4a0e      	ldr	r2, [pc, #56]	@ (8006a18 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80069e0:	68d2      	ldr	r2, [r2, #12]
 80069e2:	0a12      	lsrs	r2, r2, #8
 80069e4:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 80069e8:	fb02 f303 	mul.w	r3, r2, r3
 80069ec:	617b      	str	r3, [r7, #20]
    break;
 80069ee:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80069f0:	4b09      	ldr	r3, [pc, #36]	@ (8006a18 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80069f2:	68db      	ldr	r3, [r3, #12]
 80069f4:	0e5b      	lsrs	r3, r3, #25
 80069f6:	f003 0303 	and.w	r3, r3, #3
 80069fa:	3301      	adds	r3, #1
 80069fc:	005b      	lsls	r3, r3, #1
 80069fe:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 8006a00:	697a      	ldr	r2, [r7, #20]
 8006a02:	68bb      	ldr	r3, [r7, #8]
 8006a04:	fbb2 f3f3 	udiv	r3, r2, r3
 8006a08:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 8006a0a:	687b      	ldr	r3, [r7, #4]
}
 8006a0c:	4618      	mov	r0, r3
 8006a0e:	371c      	adds	r7, #28
 8006a10:	46bd      	mov	sp, r7
 8006a12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a16:	4770      	bx	lr
 8006a18:	40021000 	.word	0x40021000
 8006a1c:	00f42400 	.word	0x00f42400

08006a20 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8006a20:	b580      	push	{r7, lr}
 8006a22:	b086      	sub	sp, #24
 8006a24:	af00      	add	r7, sp, #0
 8006a26:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8006a28:	2300      	movs	r3, #0
 8006a2a:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8006a2c:	2300      	movs	r3, #0
 8006a2e:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8006a30:	687b      	ldr	r3, [r7, #4]
 8006a32:	681b      	ldr	r3, [r3, #0]
 8006a34:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8006a38:	2b00      	cmp	r3, #0
 8006a3a:	f000 8098 	beq.w	8006b6e <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8006a3e:	2300      	movs	r3, #0
 8006a40:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8006a42:	4b43      	ldr	r3, [pc, #268]	@ (8006b50 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006a44:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006a46:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006a4a:	2b00      	cmp	r3, #0
 8006a4c:	d10d      	bne.n	8006a6a <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8006a4e:	4b40      	ldr	r3, [pc, #256]	@ (8006b50 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006a50:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006a52:	4a3f      	ldr	r2, [pc, #252]	@ (8006b50 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006a54:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8006a58:	6593      	str	r3, [r2, #88]	@ 0x58
 8006a5a:	4b3d      	ldr	r3, [pc, #244]	@ (8006b50 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006a5c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006a5e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006a62:	60bb      	str	r3, [r7, #8]
 8006a64:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8006a66:	2301      	movs	r3, #1
 8006a68:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8006a6a:	4b3a      	ldr	r3, [pc, #232]	@ (8006b54 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8006a6c:	681b      	ldr	r3, [r3, #0]
 8006a6e:	4a39      	ldr	r2, [pc, #228]	@ (8006b54 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8006a70:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006a74:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8006a76:	f7fe fb3f 	bl	80050f8 <HAL_GetTick>
 8006a7a:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8006a7c:	e009      	b.n	8006a92 <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006a7e:	f7fe fb3b 	bl	80050f8 <HAL_GetTick>
 8006a82:	4602      	mov	r2, r0
 8006a84:	68fb      	ldr	r3, [r7, #12]
 8006a86:	1ad3      	subs	r3, r2, r3
 8006a88:	2b02      	cmp	r3, #2
 8006a8a:	d902      	bls.n	8006a92 <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 8006a8c:	2303      	movs	r3, #3
 8006a8e:	74fb      	strb	r3, [r7, #19]
        break;
 8006a90:	e005      	b.n	8006a9e <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8006a92:	4b30      	ldr	r3, [pc, #192]	@ (8006b54 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8006a94:	681b      	ldr	r3, [r3, #0]
 8006a96:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006a9a:	2b00      	cmp	r3, #0
 8006a9c:	d0ef      	beq.n	8006a7e <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 8006a9e:	7cfb      	ldrb	r3, [r7, #19]
 8006aa0:	2b00      	cmp	r3, #0
 8006aa2:	d159      	bne.n	8006b58 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8006aa4:	4b2a      	ldr	r3, [pc, #168]	@ (8006b50 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006aa6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006aaa:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8006aae:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8006ab0:	697b      	ldr	r3, [r7, #20]
 8006ab2:	2b00      	cmp	r3, #0
 8006ab4:	d01e      	beq.n	8006af4 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8006ab6:	687b      	ldr	r3, [r7, #4]
 8006ab8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006aba:	697a      	ldr	r2, [r7, #20]
 8006abc:	429a      	cmp	r2, r3
 8006abe:	d019      	beq.n	8006af4 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8006ac0:	4b23      	ldr	r3, [pc, #140]	@ (8006b50 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006ac2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006ac6:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006aca:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8006acc:	4b20      	ldr	r3, [pc, #128]	@ (8006b50 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006ace:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006ad2:	4a1f      	ldr	r2, [pc, #124]	@ (8006b50 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006ad4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006ad8:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8006adc:	4b1c      	ldr	r3, [pc, #112]	@ (8006b50 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006ade:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006ae2:	4a1b      	ldr	r2, [pc, #108]	@ (8006b50 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006ae4:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8006ae8:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8006aec:	4a18      	ldr	r2, [pc, #96]	@ (8006b50 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006aee:	697b      	ldr	r3, [r7, #20]
 8006af0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8006af4:	697b      	ldr	r3, [r7, #20]
 8006af6:	f003 0301 	and.w	r3, r3, #1
 8006afa:	2b00      	cmp	r3, #0
 8006afc:	d016      	beq.n	8006b2c <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006afe:	f7fe fafb 	bl	80050f8 <HAL_GetTick>
 8006b02:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8006b04:	e00b      	b.n	8006b1e <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006b06:	f7fe faf7 	bl	80050f8 <HAL_GetTick>
 8006b0a:	4602      	mov	r2, r0
 8006b0c:	68fb      	ldr	r3, [r7, #12]
 8006b0e:	1ad3      	subs	r3, r2, r3
 8006b10:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006b14:	4293      	cmp	r3, r2
 8006b16:	d902      	bls.n	8006b1e <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 8006b18:	2303      	movs	r3, #3
 8006b1a:	74fb      	strb	r3, [r7, #19]
            break;
 8006b1c:	e006      	b.n	8006b2c <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8006b1e:	4b0c      	ldr	r3, [pc, #48]	@ (8006b50 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006b20:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006b24:	f003 0302 	and.w	r3, r3, #2
 8006b28:	2b00      	cmp	r3, #0
 8006b2a:	d0ec      	beq.n	8006b06 <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 8006b2c:	7cfb      	ldrb	r3, [r7, #19]
 8006b2e:	2b00      	cmp	r3, #0
 8006b30:	d10b      	bne.n	8006b4a <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8006b32:	4b07      	ldr	r3, [pc, #28]	@ (8006b50 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006b34:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006b38:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8006b3c:	687b      	ldr	r3, [r7, #4]
 8006b3e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006b40:	4903      	ldr	r1, [pc, #12]	@ (8006b50 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006b42:	4313      	orrs	r3, r2
 8006b44:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8006b48:	e008      	b.n	8006b5c <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8006b4a:	7cfb      	ldrb	r3, [r7, #19]
 8006b4c:	74bb      	strb	r3, [r7, #18]
 8006b4e:	e005      	b.n	8006b5c <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8006b50:	40021000 	.word	0x40021000
 8006b54:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006b58:	7cfb      	ldrb	r3, [r7, #19]
 8006b5a:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8006b5c:	7c7b      	ldrb	r3, [r7, #17]
 8006b5e:	2b01      	cmp	r3, #1
 8006b60:	d105      	bne.n	8006b6e <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006b62:	4ba6      	ldr	r3, [pc, #664]	@ (8006dfc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006b64:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006b66:	4aa5      	ldr	r2, [pc, #660]	@ (8006dfc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006b68:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8006b6c:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8006b6e:	687b      	ldr	r3, [r7, #4]
 8006b70:	681b      	ldr	r3, [r3, #0]
 8006b72:	f003 0301 	and.w	r3, r3, #1
 8006b76:	2b00      	cmp	r3, #0
 8006b78:	d00a      	beq.n	8006b90 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8006b7a:	4ba0      	ldr	r3, [pc, #640]	@ (8006dfc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006b7c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006b80:	f023 0203 	bic.w	r2, r3, #3
 8006b84:	687b      	ldr	r3, [r7, #4]
 8006b86:	685b      	ldr	r3, [r3, #4]
 8006b88:	499c      	ldr	r1, [pc, #624]	@ (8006dfc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006b8a:	4313      	orrs	r3, r2
 8006b8c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8006b90:	687b      	ldr	r3, [r7, #4]
 8006b92:	681b      	ldr	r3, [r3, #0]
 8006b94:	f003 0302 	and.w	r3, r3, #2
 8006b98:	2b00      	cmp	r3, #0
 8006b9a:	d00a      	beq.n	8006bb2 <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8006b9c:	4b97      	ldr	r3, [pc, #604]	@ (8006dfc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006b9e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006ba2:	f023 020c 	bic.w	r2, r3, #12
 8006ba6:	687b      	ldr	r3, [r7, #4]
 8006ba8:	689b      	ldr	r3, [r3, #8]
 8006baa:	4994      	ldr	r1, [pc, #592]	@ (8006dfc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006bac:	4313      	orrs	r3, r2
 8006bae:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8006bb2:	687b      	ldr	r3, [r7, #4]
 8006bb4:	681b      	ldr	r3, [r3, #0]
 8006bb6:	f003 0304 	and.w	r3, r3, #4
 8006bba:	2b00      	cmp	r3, #0
 8006bbc:	d00a      	beq.n	8006bd4 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8006bbe:	4b8f      	ldr	r3, [pc, #572]	@ (8006dfc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006bc0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006bc4:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8006bc8:	687b      	ldr	r3, [r7, #4]
 8006bca:	68db      	ldr	r3, [r3, #12]
 8006bcc:	498b      	ldr	r1, [pc, #556]	@ (8006dfc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006bce:	4313      	orrs	r3, r2
 8006bd0:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#endif /* USART3 */

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8006bd4:	687b      	ldr	r3, [r7, #4]
 8006bd6:	681b      	ldr	r3, [r3, #0]
 8006bd8:	f003 0308 	and.w	r3, r3, #8
 8006bdc:	2b00      	cmp	r3, #0
 8006bde:	d00a      	beq.n	8006bf6 <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8006be0:	4b86      	ldr	r3, [pc, #536]	@ (8006dfc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006be2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006be6:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8006bea:	687b      	ldr	r3, [r7, #4]
 8006bec:	691b      	ldr	r3, [r3, #16]
 8006bee:	4983      	ldr	r1, [pc, #524]	@ (8006dfc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006bf0:	4313      	orrs	r3, r2
 8006bf2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8006bf6:	687b      	ldr	r3, [r7, #4]
 8006bf8:	681b      	ldr	r3, [r3, #0]
 8006bfa:	f003 0320 	and.w	r3, r3, #32
 8006bfe:	2b00      	cmp	r3, #0
 8006c00:	d00a      	beq.n	8006c18 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8006c02:	4b7e      	ldr	r3, [pc, #504]	@ (8006dfc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006c04:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006c08:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8006c0c:	687b      	ldr	r3, [r7, #4]
 8006c0e:	695b      	ldr	r3, [r3, #20]
 8006c10:	497a      	ldr	r1, [pc, #488]	@ (8006dfc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006c12:	4313      	orrs	r3, r2
 8006c14:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8006c18:	687b      	ldr	r3, [r7, #4]
 8006c1a:	681b      	ldr	r3, [r3, #0]
 8006c1c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006c20:	2b00      	cmp	r3, #0
 8006c22:	d00a      	beq.n	8006c3a <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8006c24:	4b75      	ldr	r3, [pc, #468]	@ (8006dfc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006c26:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006c2a:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8006c2e:	687b      	ldr	r3, [r7, #4]
 8006c30:	699b      	ldr	r3, [r3, #24]
 8006c32:	4972      	ldr	r1, [pc, #456]	@ (8006dfc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006c34:	4313      	orrs	r3, r2
 8006c36:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8006c3a:	687b      	ldr	r3, [r7, #4]
 8006c3c:	681b      	ldr	r3, [r3, #0]
 8006c3e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006c42:	2b00      	cmp	r3, #0
 8006c44:	d00a      	beq.n	8006c5c <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8006c46:	4b6d      	ldr	r3, [pc, #436]	@ (8006dfc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006c48:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006c4c:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8006c50:	687b      	ldr	r3, [r7, #4]
 8006c52:	69db      	ldr	r3, [r3, #28]
 8006c54:	4969      	ldr	r1, [pc, #420]	@ (8006dfc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006c56:	4313      	orrs	r3, r2
 8006c58:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }
#if defined(I2C3)

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8006c5c:	687b      	ldr	r3, [r7, #4]
 8006c5e:	681b      	ldr	r3, [r3, #0]
 8006c60:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006c64:	2b00      	cmp	r3, #0
 8006c66:	d00a      	beq.n	8006c7e <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8006c68:	4b64      	ldr	r3, [pc, #400]	@ (8006dfc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006c6a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006c6e:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8006c72:	687b      	ldr	r3, [r7, #4]
 8006c74:	6a1b      	ldr	r3, [r3, #32]
 8006c76:	4961      	ldr	r1, [pc, #388]	@ (8006dfc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006c78:	4313      	orrs	r3, r2
 8006c7a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8006c7e:	687b      	ldr	r3, [r7, #4]
 8006c80:	681b      	ldr	r3, [r3, #0]
 8006c82:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8006c86:	2b00      	cmp	r3, #0
 8006c88:	d00a      	beq.n	8006ca0 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8006c8a:	4b5c      	ldr	r3, [pc, #368]	@ (8006dfc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006c8c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006c90:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8006c94:	687b      	ldr	r3, [r7, #4]
 8006c96:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006c98:	4958      	ldr	r1, [pc, #352]	@ (8006dfc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006c9a:	4313      	orrs	r3, r2
 8006c9c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(SAI1) 
  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8006ca0:	687b      	ldr	r3, [r7, #4]
 8006ca2:	681b      	ldr	r3, [r3, #0]
 8006ca4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006ca8:	2b00      	cmp	r3, #0
 8006caa:	d015      	beq.n	8006cd8 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8006cac:	4b53      	ldr	r3, [pc, #332]	@ (8006dfc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006cae:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006cb2:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8006cb6:	687b      	ldr	r3, [r7, #4]
 8006cb8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006cba:	4950      	ldr	r1, [pc, #320]	@ (8006dfc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006cbc:	4313      	orrs	r3, r2
 8006cbe:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 8006cc2:	687b      	ldr	r3, [r7, #4]
 8006cc4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006cc6:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8006cca:	d105      	bne.n	8006cd8 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8006ccc:	4b4b      	ldr	r3, [pc, #300]	@ (8006dfc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006cce:	68db      	ldr	r3, [r3, #12]
 8006cd0:	4a4a      	ldr	r2, [pc, #296]	@ (8006dfc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006cd2:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8006cd6:	60d3      	str	r3, [r2, #12]

#endif /* SAI1 */

#if defined(SPI_I2S_SUPPORT)
  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8006cd8:	687b      	ldr	r3, [r7, #4]
 8006cda:	681b      	ldr	r3, [r3, #0]
 8006cdc:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8006ce0:	2b00      	cmp	r3, #0
 8006ce2:	d015      	beq.n	8006d10 <HAL_RCCEx_PeriphCLKConfig+0x2f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8006ce4:	4b45      	ldr	r3, [pc, #276]	@ (8006dfc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006ce6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006cea:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8006cee:	687b      	ldr	r3, [r7, #4]
 8006cf0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006cf2:	4942      	ldr	r1, [pc, #264]	@ (8006dfc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006cf4:	4313      	orrs	r3, r2
 8006cf6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 8006cfa:	687b      	ldr	r3, [r7, #4]
 8006cfc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006cfe:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8006d02:	d105      	bne.n	8006d10 <HAL_RCCEx_PeriphCLKConfig+0x2f0>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8006d04:	4b3d      	ldr	r3, [pc, #244]	@ (8006dfc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006d06:	68db      	ldr	r3, [r3, #12]
 8006d08:	4a3c      	ldr	r2, [pc, #240]	@ (8006dfc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006d0a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8006d0e:	60d3      	str	r3, [r2, #12]

#endif /* SPI_I2S_SUPPORT */

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8006d10:	687b      	ldr	r3, [r7, #4]
 8006d12:	681b      	ldr	r3, [r3, #0]
 8006d14:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8006d18:	2b00      	cmp	r3, #0
 8006d1a:	d015      	beq.n	8006d48 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8006d1c:	4b37      	ldr	r3, [pc, #220]	@ (8006dfc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006d1e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006d22:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 8006d26:	687b      	ldr	r3, [r7, #4]
 8006d28:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006d2a:	4934      	ldr	r1, [pc, #208]	@ (8006dfc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006d2c:	4313      	orrs	r3, r2
 8006d2e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 8006d32:	687b      	ldr	r3, [r7, #4]
 8006d34:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006d36:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8006d3a:	d105      	bne.n	8006d48 <HAL_RCCEx_PeriphCLKConfig+0x328>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8006d3c:	4b2f      	ldr	r3, [pc, #188]	@ (8006dfc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006d3e:	68db      	ldr	r3, [r3, #12]
 8006d40:	4a2e      	ldr	r2, [pc, #184]	@ (8006dfc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006d42:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8006d46:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8006d48:	687b      	ldr	r3, [r7, #4]
 8006d4a:	681b      	ldr	r3, [r3, #0]
 8006d4c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8006d50:	2b00      	cmp	r3, #0
 8006d52:	d015      	beq.n	8006d80 <HAL_RCCEx_PeriphCLKConfig+0x360>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8006d54:	4b29      	ldr	r3, [pc, #164]	@ (8006dfc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006d56:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006d5a:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8006d5e:	687b      	ldr	r3, [r7, #4]
 8006d60:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006d62:	4926      	ldr	r1, [pc, #152]	@ (8006dfc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006d64:	4313      	orrs	r3, r2
 8006d66:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8006d6a:	687b      	ldr	r3, [r7, #4]
 8006d6c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006d6e:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8006d72:	d105      	bne.n	8006d80 <HAL_RCCEx_PeriphCLKConfig+0x360>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8006d74:	4b21      	ldr	r3, [pc, #132]	@ (8006dfc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006d76:	68db      	ldr	r3, [r3, #12]
 8006d78:	4a20      	ldr	r2, [pc, #128]	@ (8006dfc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006d7a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8006d7e:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8006d80:	687b      	ldr	r3, [r7, #4]
 8006d82:	681b      	ldr	r3, [r3, #0]
 8006d84:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8006d88:	2b00      	cmp	r3, #0
 8006d8a:	d015      	beq.n	8006db8 <HAL_RCCEx_PeriphCLKConfig+0x398>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8006d8c:	4b1b      	ldr	r3, [pc, #108]	@ (8006dfc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006d8e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006d92:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8006d96:	687b      	ldr	r3, [r7, #4]
 8006d98:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006d9a:	4918      	ldr	r1, [pc, #96]	@ (8006dfc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006d9c:	4313      	orrs	r3, r2
 8006d9e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8006da2:	687b      	ldr	r3, [r7, #4]
 8006da4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006da6:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8006daa:	d105      	bne.n	8006db8 <HAL_RCCEx_PeriphCLKConfig+0x398>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8006dac:	4b13      	ldr	r3, [pc, #76]	@ (8006dfc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006dae:	68db      	ldr	r3, [r3, #12]
 8006db0:	4a12      	ldr	r2, [pc, #72]	@ (8006dfc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006db2:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8006db6:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8006db8:	687b      	ldr	r3, [r7, #4]
 8006dba:	681b      	ldr	r3, [r3, #0]
 8006dbc:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8006dc0:	2b00      	cmp	r3, #0
 8006dc2:	d015      	beq.n	8006df0 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8006dc4:	4b0d      	ldr	r3, [pc, #52]	@ (8006dfc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006dc6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006dca:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 8006dce:	687b      	ldr	r3, [r7, #4]
 8006dd0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006dd2:	490a      	ldr	r1, [pc, #40]	@ (8006dfc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006dd4:	4313      	orrs	r3, r2
 8006dd6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 8006dda:	687b      	ldr	r3, [r7, #4]
 8006ddc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006dde:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8006de2:	d105      	bne.n	8006df0 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8006de4:	4b05      	ldr	r3, [pc, #20]	@ (8006dfc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006de6:	68db      	ldr	r3, [r3, #12]
 8006de8:	4a04      	ldr	r2, [pc, #16]	@ (8006dfc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006dea:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006dee:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 8006df0:	7cbb      	ldrb	r3, [r7, #18]
}
 8006df2:	4618      	mov	r0, r3
 8006df4:	3718      	adds	r7, #24
 8006df6:	46bd      	mov	sp, r7
 8006df8:	bd80      	pop	{r7, pc}
 8006dfa:	bf00      	nop
 8006dfc:	40021000 	.word	0x40021000

08006e00 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8006e00:	b580      	push	{r7, lr}
 8006e02:	b084      	sub	sp, #16
 8006e04:	af00      	add	r7, sp, #0
 8006e06:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8006e08:	687b      	ldr	r3, [r7, #4]
 8006e0a:	2b00      	cmp	r3, #0
 8006e0c:	d101      	bne.n	8006e12 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8006e0e:	2301      	movs	r3, #1
 8006e10:	e09d      	b.n	8006f4e <HAL_SPI_Init+0x14e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8006e12:	687b      	ldr	r3, [r7, #4]
 8006e14:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006e16:	2b00      	cmp	r3, #0
 8006e18:	d108      	bne.n	8006e2c <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8006e1a:	687b      	ldr	r3, [r7, #4]
 8006e1c:	685b      	ldr	r3, [r3, #4]
 8006e1e:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8006e22:	d009      	beq.n	8006e38 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8006e24:	687b      	ldr	r3, [r7, #4]
 8006e26:	2200      	movs	r2, #0
 8006e28:	61da      	str	r2, [r3, #28]
 8006e2a:	e005      	b.n	8006e38 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8006e2c:	687b      	ldr	r3, [r7, #4]
 8006e2e:	2200      	movs	r2, #0
 8006e30:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8006e32:	687b      	ldr	r3, [r7, #4]
 8006e34:	2200      	movs	r2, #0
 8006e36:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8006e38:	687b      	ldr	r3, [r7, #4]
 8006e3a:	2200      	movs	r2, #0
 8006e3c:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8006e3e:	687b      	ldr	r3, [r7, #4]
 8006e40:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8006e44:	b2db      	uxtb	r3, r3
 8006e46:	2b00      	cmp	r3, #0
 8006e48:	d106      	bne.n	8006e58 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8006e4a:	687b      	ldr	r3, [r7, #4]
 8006e4c:	2200      	movs	r2, #0
 8006e4e:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8006e52:	6878      	ldr	r0, [r7, #4]
 8006e54:	f7fb f9bc 	bl	80021d0 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8006e58:	687b      	ldr	r3, [r7, #4]
 8006e5a:	2202      	movs	r2, #2
 8006e5c:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8006e60:	687b      	ldr	r3, [r7, #4]
 8006e62:	681b      	ldr	r3, [r3, #0]
 8006e64:	681a      	ldr	r2, [r3, #0]
 8006e66:	687b      	ldr	r3, [r7, #4]
 8006e68:	681b      	ldr	r3, [r3, #0]
 8006e6a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8006e6e:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8006e70:	687b      	ldr	r3, [r7, #4]
 8006e72:	68db      	ldr	r3, [r3, #12]
 8006e74:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8006e78:	d902      	bls.n	8006e80 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8006e7a:	2300      	movs	r3, #0
 8006e7c:	60fb      	str	r3, [r7, #12]
 8006e7e:	e002      	b.n	8006e86 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8006e80:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8006e84:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8006e86:	687b      	ldr	r3, [r7, #4]
 8006e88:	68db      	ldr	r3, [r3, #12]
 8006e8a:	f5b3 6f70 	cmp.w	r3, #3840	@ 0xf00
 8006e8e:	d007      	beq.n	8006ea0 <HAL_SPI_Init+0xa0>
 8006e90:	687b      	ldr	r3, [r7, #4]
 8006e92:	68db      	ldr	r3, [r3, #12]
 8006e94:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8006e98:	d002      	beq.n	8006ea0 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8006e9a:	687b      	ldr	r3, [r7, #4]
 8006e9c:	2200      	movs	r2, #0
 8006e9e:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8006ea0:	687b      	ldr	r3, [r7, #4]
 8006ea2:	685b      	ldr	r3, [r3, #4]
 8006ea4:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8006ea8:	687b      	ldr	r3, [r7, #4]
 8006eaa:	689b      	ldr	r3, [r3, #8]
 8006eac:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8006eb0:	431a      	orrs	r2, r3
 8006eb2:	687b      	ldr	r3, [r7, #4]
 8006eb4:	691b      	ldr	r3, [r3, #16]
 8006eb6:	f003 0302 	and.w	r3, r3, #2
 8006eba:	431a      	orrs	r2, r3
 8006ebc:	687b      	ldr	r3, [r7, #4]
 8006ebe:	695b      	ldr	r3, [r3, #20]
 8006ec0:	f003 0301 	and.w	r3, r3, #1
 8006ec4:	431a      	orrs	r2, r3
 8006ec6:	687b      	ldr	r3, [r7, #4]
 8006ec8:	699b      	ldr	r3, [r3, #24]
 8006eca:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8006ece:	431a      	orrs	r2, r3
 8006ed0:	687b      	ldr	r3, [r7, #4]
 8006ed2:	69db      	ldr	r3, [r3, #28]
 8006ed4:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8006ed8:	431a      	orrs	r2, r3
 8006eda:	687b      	ldr	r3, [r7, #4]
 8006edc:	6a1b      	ldr	r3, [r3, #32]
 8006ede:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006ee2:	ea42 0103 	orr.w	r1, r2, r3
 8006ee6:	687b      	ldr	r3, [r7, #4]
 8006ee8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006eea:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8006eee:	687b      	ldr	r3, [r7, #4]
 8006ef0:	681b      	ldr	r3, [r3, #0]
 8006ef2:	430a      	orrs	r2, r1
 8006ef4:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8006ef6:	687b      	ldr	r3, [r7, #4]
 8006ef8:	699b      	ldr	r3, [r3, #24]
 8006efa:	0c1b      	lsrs	r3, r3, #16
 8006efc:	f003 0204 	and.w	r2, r3, #4
 8006f00:	687b      	ldr	r3, [r7, #4]
 8006f02:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006f04:	f003 0310 	and.w	r3, r3, #16
 8006f08:	431a      	orrs	r2, r3
 8006f0a:	687b      	ldr	r3, [r7, #4]
 8006f0c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006f0e:	f003 0308 	and.w	r3, r3, #8
 8006f12:	431a      	orrs	r2, r3
 8006f14:	687b      	ldr	r3, [r7, #4]
 8006f16:	68db      	ldr	r3, [r3, #12]
 8006f18:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 8006f1c:	ea42 0103 	orr.w	r1, r2, r3
 8006f20:	68fb      	ldr	r3, [r7, #12]
 8006f22:	f403 5280 	and.w	r2, r3, #4096	@ 0x1000
 8006f26:	687b      	ldr	r3, [r7, #4]
 8006f28:	681b      	ldr	r3, [r3, #0]
 8006f2a:	430a      	orrs	r2, r1
 8006f2c:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8006f2e:	687b      	ldr	r3, [r7, #4]
 8006f30:	681b      	ldr	r3, [r3, #0]
 8006f32:	69da      	ldr	r2, [r3, #28]
 8006f34:	687b      	ldr	r3, [r7, #4]
 8006f36:	681b      	ldr	r3, [r3, #0]
 8006f38:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8006f3c:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8006f3e:	687b      	ldr	r3, [r7, #4]
 8006f40:	2200      	movs	r2, #0
 8006f42:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8006f44:	687b      	ldr	r3, [r7, #4]
 8006f46:	2201      	movs	r2, #1
 8006f48:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  return HAL_OK;
 8006f4c:	2300      	movs	r3, #0
}
 8006f4e:	4618      	mov	r0, r3
 8006f50:	3710      	adds	r7, #16
 8006f52:	46bd      	mov	sp, r7
 8006f54:	bd80      	pop	{r7, pc}

08006f56 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, const uint8_t *pTxData, uint8_t *pRxData,
                                          uint16_t Size, uint32_t Timeout)
{
 8006f56:	b580      	push	{r7, lr}
 8006f58:	b08a      	sub	sp, #40	@ 0x28
 8006f5a:	af00      	add	r7, sp, #0
 8006f5c:	60f8      	str	r0, [r7, #12]
 8006f5e:	60b9      	str	r1, [r7, #8]
 8006f60:	607a      	str	r2, [r7, #4]
 8006f62:	807b      	strh	r3, [r7, #2]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8006f64:	2301      	movs	r3, #1
 8006f66:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8006f68:	f7fe f8c6 	bl	80050f8 <HAL_GetTick>
 8006f6c:	6238      	str	r0, [r7, #32]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8006f6e:	68fb      	ldr	r3, [r7, #12]
 8006f70:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8006f74:	77fb      	strb	r3, [r7, #31]
  tmp_mode            = hspi->Init.Mode;
 8006f76:	68fb      	ldr	r3, [r7, #12]
 8006f78:	685b      	ldr	r3, [r3, #4]
 8006f7a:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 8006f7c:	887b      	ldrh	r3, [r7, #2]
 8006f7e:	82fb      	strh	r3, [r7, #22]
  initial_RxXferCount = Size;
 8006f80:	887b      	ldrh	r3, [r7, #2]
 8006f82:	82bb      	strh	r3, [r7, #20]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8006f84:	7ffb      	ldrb	r3, [r7, #31]
 8006f86:	2b01      	cmp	r3, #1
 8006f88:	d00c      	beq.n	8006fa4 <HAL_SPI_TransmitReceive+0x4e>
 8006f8a:	69bb      	ldr	r3, [r7, #24]
 8006f8c:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8006f90:	d106      	bne.n	8006fa0 <HAL_SPI_TransmitReceive+0x4a>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) &&
 8006f92:	68fb      	ldr	r3, [r7, #12]
 8006f94:	689b      	ldr	r3, [r3, #8]
 8006f96:	2b00      	cmp	r3, #0
 8006f98:	d102      	bne.n	8006fa0 <HAL_SPI_TransmitReceive+0x4a>
 8006f9a:	7ffb      	ldrb	r3, [r7, #31]
 8006f9c:	2b04      	cmp	r3, #4
 8006f9e:	d001      	beq.n	8006fa4 <HAL_SPI_TransmitReceive+0x4e>
         (tmp_state == HAL_SPI_STATE_BUSY_RX))))
  {
    return HAL_BUSY;
 8006fa0:	2302      	movs	r3, #2
 8006fa2:	e1f3      	b.n	800738c <HAL_SPI_TransmitReceive+0x436>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8006fa4:	68bb      	ldr	r3, [r7, #8]
 8006fa6:	2b00      	cmp	r3, #0
 8006fa8:	d005      	beq.n	8006fb6 <HAL_SPI_TransmitReceive+0x60>
 8006faa:	687b      	ldr	r3, [r7, #4]
 8006fac:	2b00      	cmp	r3, #0
 8006fae:	d002      	beq.n	8006fb6 <HAL_SPI_TransmitReceive+0x60>
 8006fb0:	887b      	ldrh	r3, [r7, #2]
 8006fb2:	2b00      	cmp	r3, #0
 8006fb4:	d101      	bne.n	8006fba <HAL_SPI_TransmitReceive+0x64>
  {
    return HAL_ERROR;
 8006fb6:	2301      	movs	r3, #1
 8006fb8:	e1e8      	b.n	800738c <HAL_SPI_TransmitReceive+0x436>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8006fba:	68fb      	ldr	r3, [r7, #12]
 8006fbc:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8006fc0:	2b01      	cmp	r3, #1
 8006fc2:	d101      	bne.n	8006fc8 <HAL_SPI_TransmitReceive+0x72>
 8006fc4:	2302      	movs	r3, #2
 8006fc6:	e1e1      	b.n	800738c <HAL_SPI_TransmitReceive+0x436>
 8006fc8:	68fb      	ldr	r3, [r7, #12]
 8006fca:	2201      	movs	r2, #1
 8006fcc:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8006fd0:	68fb      	ldr	r3, [r7, #12]
 8006fd2:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8006fd6:	b2db      	uxtb	r3, r3
 8006fd8:	2b04      	cmp	r3, #4
 8006fda:	d003      	beq.n	8006fe4 <HAL_SPI_TransmitReceive+0x8e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8006fdc:	68fb      	ldr	r3, [r7, #12]
 8006fde:	2205      	movs	r2, #5
 8006fe0:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8006fe4:	68fb      	ldr	r3, [r7, #12]
 8006fe6:	2200      	movs	r2, #0
 8006fe8:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8006fea:	68fb      	ldr	r3, [r7, #12]
 8006fec:	687a      	ldr	r2, [r7, #4]
 8006fee:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferCount = Size;
 8006ff0:	68fb      	ldr	r3, [r7, #12]
 8006ff2:	887a      	ldrh	r2, [r7, #2]
 8006ff4:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  hspi->RxXferSize  = Size;
 8006ff8:	68fb      	ldr	r3, [r7, #12]
 8006ffa:	887a      	ldrh	r2, [r7, #2]
 8006ffc:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->pTxBuffPtr  = (const uint8_t *)pTxData;
 8007000:	68fb      	ldr	r3, [r7, #12]
 8007002:	68ba      	ldr	r2, [r7, #8]
 8007004:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferCount = Size;
 8007006:	68fb      	ldr	r3, [r7, #12]
 8007008:	887a      	ldrh	r2, [r7, #2]
 800700a:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxXferSize  = Size;
 800700c:	68fb      	ldr	r3, [r7, #12]
 800700e:	887a      	ldrh	r2, [r7, #2]
 8007010:	879a      	strh	r2, [r3, #60]	@ 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8007012:	68fb      	ldr	r3, [r7, #12]
 8007014:	2200      	movs	r2, #0
 8007016:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi->TxISR       = NULL;
 8007018:	68fb      	ldr	r3, [r7, #12]
 800701a:	2200      	movs	r2, #0
 800701c:	651a      	str	r2, [r3, #80]	@ 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 800701e:	68fb      	ldr	r3, [r7, #12]
 8007020:	68db      	ldr	r3, [r3, #12]
 8007022:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8007026:	d802      	bhi.n	800702e <HAL_SPI_TransmitReceive+0xd8>
 8007028:	8abb      	ldrh	r3, [r7, #20]
 800702a:	2b01      	cmp	r3, #1
 800702c:	d908      	bls.n	8007040 <HAL_SPI_TransmitReceive+0xea>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800702e:	68fb      	ldr	r3, [r7, #12]
 8007030:	681b      	ldr	r3, [r3, #0]
 8007032:	685a      	ldr	r2, [r3, #4]
 8007034:	68fb      	ldr	r3, [r7, #12]
 8007036:	681b      	ldr	r3, [r3, #0]
 8007038:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 800703c:	605a      	str	r2, [r3, #4]
 800703e:	e007      	b.n	8007050 <HAL_SPI_TransmitReceive+0xfa>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8007040:	68fb      	ldr	r3, [r7, #12]
 8007042:	681b      	ldr	r3, [r3, #0]
 8007044:	685a      	ldr	r2, [r3, #4]
 8007046:	68fb      	ldr	r3, [r7, #12]
 8007048:	681b      	ldr	r3, [r3, #0]
 800704a:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 800704e:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8007050:	68fb      	ldr	r3, [r7, #12]
 8007052:	681b      	ldr	r3, [r3, #0]
 8007054:	681b      	ldr	r3, [r3, #0]
 8007056:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800705a:	2b40      	cmp	r3, #64	@ 0x40
 800705c:	d007      	beq.n	800706e <HAL_SPI_TransmitReceive+0x118>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800705e:	68fb      	ldr	r3, [r7, #12]
 8007060:	681b      	ldr	r3, [r3, #0]
 8007062:	681a      	ldr	r2, [r3, #0]
 8007064:	68fb      	ldr	r3, [r7, #12]
 8007066:	681b      	ldr	r3, [r3, #0]
 8007068:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800706c:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800706e:	68fb      	ldr	r3, [r7, #12]
 8007070:	68db      	ldr	r3, [r3, #12]
 8007072:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8007076:	f240 8083 	bls.w	8007180 <HAL_SPI_TransmitReceive+0x22a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800707a:	68fb      	ldr	r3, [r7, #12]
 800707c:	685b      	ldr	r3, [r3, #4]
 800707e:	2b00      	cmp	r3, #0
 8007080:	d002      	beq.n	8007088 <HAL_SPI_TransmitReceive+0x132>
 8007082:	8afb      	ldrh	r3, [r7, #22]
 8007084:	2b01      	cmp	r3, #1
 8007086:	d16f      	bne.n	8007168 <HAL_SPI_TransmitReceive+0x212>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8007088:	68fb      	ldr	r3, [r7, #12]
 800708a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800708c:	881a      	ldrh	r2, [r3, #0]
 800708e:	68fb      	ldr	r3, [r7, #12]
 8007090:	681b      	ldr	r3, [r3, #0]
 8007092:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8007094:	68fb      	ldr	r3, [r7, #12]
 8007096:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007098:	1c9a      	adds	r2, r3, #2
 800709a:	68fb      	ldr	r3, [r7, #12]
 800709c:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 800709e:	68fb      	ldr	r3, [r7, #12]
 80070a0:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80070a2:	b29b      	uxth	r3, r3
 80070a4:	3b01      	subs	r3, #1
 80070a6:	b29a      	uxth	r2, r3
 80070a8:	68fb      	ldr	r3, [r7, #12]
 80070aa:	87da      	strh	r2, [r3, #62]	@ 0x3e
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80070ac:	e05c      	b.n	8007168 <HAL_SPI_TransmitReceive+0x212>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80070ae:	68fb      	ldr	r3, [r7, #12]
 80070b0:	681b      	ldr	r3, [r3, #0]
 80070b2:	689b      	ldr	r3, [r3, #8]
 80070b4:	f003 0302 	and.w	r3, r3, #2
 80070b8:	2b02      	cmp	r3, #2
 80070ba:	d11b      	bne.n	80070f4 <HAL_SPI_TransmitReceive+0x19e>
 80070bc:	68fb      	ldr	r3, [r7, #12]
 80070be:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80070c0:	b29b      	uxth	r3, r3
 80070c2:	2b00      	cmp	r3, #0
 80070c4:	d016      	beq.n	80070f4 <HAL_SPI_TransmitReceive+0x19e>
 80070c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80070c8:	2b01      	cmp	r3, #1
 80070ca:	d113      	bne.n	80070f4 <HAL_SPI_TransmitReceive+0x19e>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 80070cc:	68fb      	ldr	r3, [r7, #12]
 80070ce:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80070d0:	881a      	ldrh	r2, [r3, #0]
 80070d2:	68fb      	ldr	r3, [r7, #12]
 80070d4:	681b      	ldr	r3, [r3, #0]
 80070d6:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80070d8:	68fb      	ldr	r3, [r7, #12]
 80070da:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80070dc:	1c9a      	adds	r2, r3, #2
 80070de:	68fb      	ldr	r3, [r7, #12]
 80070e0:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 80070e2:	68fb      	ldr	r3, [r7, #12]
 80070e4:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80070e6:	b29b      	uxth	r3, r3
 80070e8:	3b01      	subs	r3, #1
 80070ea:	b29a      	uxth	r2, r3
 80070ec:	68fb      	ldr	r3, [r7, #12]
 80070ee:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80070f0:	2300      	movs	r3, #0
 80070f2:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80070f4:	68fb      	ldr	r3, [r7, #12]
 80070f6:	681b      	ldr	r3, [r3, #0]
 80070f8:	689b      	ldr	r3, [r3, #8]
 80070fa:	f003 0301 	and.w	r3, r3, #1
 80070fe:	2b01      	cmp	r3, #1
 8007100:	d11c      	bne.n	800713c <HAL_SPI_TransmitReceive+0x1e6>
 8007102:	68fb      	ldr	r3, [r7, #12]
 8007104:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8007108:	b29b      	uxth	r3, r3
 800710a:	2b00      	cmp	r3, #0
 800710c:	d016      	beq.n	800713c <HAL_SPI_TransmitReceive+0x1e6>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800710e:	68fb      	ldr	r3, [r7, #12]
 8007110:	681b      	ldr	r3, [r3, #0]
 8007112:	68da      	ldr	r2, [r3, #12]
 8007114:	68fb      	ldr	r3, [r7, #12]
 8007116:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007118:	b292      	uxth	r2, r2
 800711a:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800711c:	68fb      	ldr	r3, [r7, #12]
 800711e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007120:	1c9a      	adds	r2, r3, #2
 8007122:	68fb      	ldr	r3, [r7, #12]
 8007124:	641a      	str	r2, [r3, #64]	@ 0x40
        hspi->RxXferCount--;
 8007126:	68fb      	ldr	r3, [r7, #12]
 8007128:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800712c:	b29b      	uxth	r3, r3
 800712e:	3b01      	subs	r3, #1
 8007130:	b29a      	uxth	r2, r3
 8007132:	68fb      	ldr	r3, [r7, #12]
 8007134:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8007138:	2301      	movs	r3, #1
 800713a:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 800713c:	f7fd ffdc 	bl	80050f8 <HAL_GetTick>
 8007140:	4602      	mov	r2, r0
 8007142:	6a3b      	ldr	r3, [r7, #32]
 8007144:	1ad3      	subs	r3, r2, r3
 8007146:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007148:	429a      	cmp	r2, r3
 800714a:	d80d      	bhi.n	8007168 <HAL_SPI_TransmitReceive+0x212>
 800714c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800714e:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8007152:	d009      	beq.n	8007168 <HAL_SPI_TransmitReceive+0x212>
      {
        hspi->State = HAL_SPI_STATE_READY;
 8007154:	68fb      	ldr	r3, [r7, #12]
 8007156:	2201      	movs	r2, #1
 8007158:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
        __HAL_UNLOCK(hspi);
 800715c:	68fb      	ldr	r3, [r7, #12]
 800715e:	2200      	movs	r2, #0
 8007160:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
        return HAL_TIMEOUT;
 8007164:	2303      	movs	r3, #3
 8007166:	e111      	b.n	800738c <HAL_SPI_TransmitReceive+0x436>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8007168:	68fb      	ldr	r3, [r7, #12]
 800716a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800716c:	b29b      	uxth	r3, r3
 800716e:	2b00      	cmp	r3, #0
 8007170:	d19d      	bne.n	80070ae <HAL_SPI_TransmitReceive+0x158>
 8007172:	68fb      	ldr	r3, [r7, #12]
 8007174:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8007178:	b29b      	uxth	r3, r3
 800717a:	2b00      	cmp	r3, #0
 800717c:	d197      	bne.n	80070ae <HAL_SPI_TransmitReceive+0x158>
 800717e:	e0e5      	b.n	800734c <HAL_SPI_TransmitReceive+0x3f6>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8007180:	68fb      	ldr	r3, [r7, #12]
 8007182:	685b      	ldr	r3, [r3, #4]
 8007184:	2b00      	cmp	r3, #0
 8007186:	d003      	beq.n	8007190 <HAL_SPI_TransmitReceive+0x23a>
 8007188:	8afb      	ldrh	r3, [r7, #22]
 800718a:	2b01      	cmp	r3, #1
 800718c:	f040 80d1 	bne.w	8007332 <HAL_SPI_TransmitReceive+0x3dc>
    {
      if (hspi->TxXferCount > 1U)
 8007190:	68fb      	ldr	r3, [r7, #12]
 8007192:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8007194:	b29b      	uxth	r3, r3
 8007196:	2b01      	cmp	r3, #1
 8007198:	d912      	bls.n	80071c0 <HAL_SPI_TransmitReceive+0x26a>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 800719a:	68fb      	ldr	r3, [r7, #12]
 800719c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800719e:	881a      	ldrh	r2, [r3, #0]
 80071a0:	68fb      	ldr	r3, [r7, #12]
 80071a2:	681b      	ldr	r3, [r3, #0]
 80071a4:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80071a6:	68fb      	ldr	r3, [r7, #12]
 80071a8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80071aa:	1c9a      	adds	r2, r3, #2
 80071ac:	68fb      	ldr	r3, [r7, #12]
 80071ae:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount -= 2U;
 80071b0:	68fb      	ldr	r3, [r7, #12]
 80071b2:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80071b4:	b29b      	uxth	r3, r3
 80071b6:	3b02      	subs	r3, #2
 80071b8:	b29a      	uxth	r2, r3
 80071ba:	68fb      	ldr	r3, [r7, #12]
 80071bc:	87da      	strh	r2, [r3, #62]	@ 0x3e
 80071be:	e0b8      	b.n	8007332 <HAL_SPI_TransmitReceive+0x3dc>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = *((const uint8_t *)hspi->pTxBuffPtr);
 80071c0:	68fb      	ldr	r3, [r7, #12]
 80071c2:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80071c4:	68fb      	ldr	r3, [r7, #12]
 80071c6:	681b      	ldr	r3, [r3, #0]
 80071c8:	330c      	adds	r3, #12
 80071ca:	7812      	ldrb	r2, [r2, #0]
 80071cc:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 80071ce:	68fb      	ldr	r3, [r7, #12]
 80071d0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80071d2:	1c5a      	adds	r2, r3, #1
 80071d4:	68fb      	ldr	r3, [r7, #12]
 80071d6:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 80071d8:	68fb      	ldr	r3, [r7, #12]
 80071da:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80071dc:	b29b      	uxth	r3, r3
 80071de:	3b01      	subs	r3, #1
 80071e0:	b29a      	uxth	r2, r3
 80071e2:	68fb      	ldr	r3, [r7, #12]
 80071e4:	87da      	strh	r2, [r3, #62]	@ 0x3e
          SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
        }
#endif /* USE_SPI_CRC */
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80071e6:	e0a4      	b.n	8007332 <HAL_SPI_TransmitReceive+0x3dc>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80071e8:	68fb      	ldr	r3, [r7, #12]
 80071ea:	681b      	ldr	r3, [r3, #0]
 80071ec:	689b      	ldr	r3, [r3, #8]
 80071ee:	f003 0302 	and.w	r3, r3, #2
 80071f2:	2b02      	cmp	r3, #2
 80071f4:	d134      	bne.n	8007260 <HAL_SPI_TransmitReceive+0x30a>
 80071f6:	68fb      	ldr	r3, [r7, #12]
 80071f8:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80071fa:	b29b      	uxth	r3, r3
 80071fc:	2b00      	cmp	r3, #0
 80071fe:	d02f      	beq.n	8007260 <HAL_SPI_TransmitReceive+0x30a>
 8007200:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007202:	2b01      	cmp	r3, #1
 8007204:	d12c      	bne.n	8007260 <HAL_SPI_TransmitReceive+0x30a>
      {
        if (hspi->TxXferCount > 1U)
 8007206:	68fb      	ldr	r3, [r7, #12]
 8007208:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800720a:	b29b      	uxth	r3, r3
 800720c:	2b01      	cmp	r3, #1
 800720e:	d912      	bls.n	8007236 <HAL_SPI_TransmitReceive+0x2e0>
        {
          hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8007210:	68fb      	ldr	r3, [r7, #12]
 8007212:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007214:	881a      	ldrh	r2, [r3, #0]
 8007216:	68fb      	ldr	r3, [r7, #12]
 8007218:	681b      	ldr	r3, [r3, #0]
 800721a:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 800721c:	68fb      	ldr	r3, [r7, #12]
 800721e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007220:	1c9a      	adds	r2, r3, #2
 8007222:	68fb      	ldr	r3, [r7, #12]
 8007224:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount -= 2U;
 8007226:	68fb      	ldr	r3, [r7, #12]
 8007228:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800722a:	b29b      	uxth	r3, r3
 800722c:	3b02      	subs	r3, #2
 800722e:	b29a      	uxth	r2, r3
 8007230:	68fb      	ldr	r3, [r7, #12]
 8007232:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8007234:	e012      	b.n	800725c <HAL_SPI_TransmitReceive+0x306>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = *((const uint8_t *)hspi->pTxBuffPtr);
 8007236:	68fb      	ldr	r3, [r7, #12]
 8007238:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800723a:	68fb      	ldr	r3, [r7, #12]
 800723c:	681b      	ldr	r3, [r3, #0]
 800723e:	330c      	adds	r3, #12
 8007240:	7812      	ldrb	r2, [r2, #0]
 8007242:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8007244:	68fb      	ldr	r3, [r7, #12]
 8007246:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007248:	1c5a      	adds	r2, r3, #1
 800724a:	68fb      	ldr	r3, [r7, #12]
 800724c:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount--;
 800724e:	68fb      	ldr	r3, [r7, #12]
 8007250:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8007252:	b29b      	uxth	r3, r3
 8007254:	3b01      	subs	r3, #1
 8007256:	b29a      	uxth	r2, r3
 8007258:	68fb      	ldr	r3, [r7, #12]
 800725a:	87da      	strh	r2, [r3, #62]	@ 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800725c:	2300      	movs	r3, #0
 800725e:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8007260:	68fb      	ldr	r3, [r7, #12]
 8007262:	681b      	ldr	r3, [r3, #0]
 8007264:	689b      	ldr	r3, [r3, #8]
 8007266:	f003 0301 	and.w	r3, r3, #1
 800726a:	2b01      	cmp	r3, #1
 800726c:	d148      	bne.n	8007300 <HAL_SPI_TransmitReceive+0x3aa>
 800726e:	68fb      	ldr	r3, [r7, #12]
 8007270:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8007274:	b29b      	uxth	r3, r3
 8007276:	2b00      	cmp	r3, #0
 8007278:	d042      	beq.n	8007300 <HAL_SPI_TransmitReceive+0x3aa>
      {
        if (hspi->RxXferCount > 1U)
 800727a:	68fb      	ldr	r3, [r7, #12]
 800727c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8007280:	b29b      	uxth	r3, r3
 8007282:	2b01      	cmp	r3, #1
 8007284:	d923      	bls.n	80072ce <HAL_SPI_TransmitReceive+0x378>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8007286:	68fb      	ldr	r3, [r7, #12]
 8007288:	681b      	ldr	r3, [r3, #0]
 800728a:	68da      	ldr	r2, [r3, #12]
 800728c:	68fb      	ldr	r3, [r7, #12]
 800728e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007290:	b292      	uxth	r2, r2
 8007292:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 8007294:	68fb      	ldr	r3, [r7, #12]
 8007296:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007298:	1c9a      	adds	r2, r3, #2
 800729a:	68fb      	ldr	r3, [r7, #12]
 800729c:	641a      	str	r2, [r3, #64]	@ 0x40
          hspi->RxXferCount -= 2U;
 800729e:	68fb      	ldr	r3, [r7, #12]
 80072a0:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 80072a4:	b29b      	uxth	r3, r3
 80072a6:	3b02      	subs	r3, #2
 80072a8:	b29a      	uxth	r2, r3
 80072aa:	68fb      	ldr	r3, [r7, #12]
 80072ac:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
          if (hspi->RxXferCount <= 1U)
 80072b0:	68fb      	ldr	r3, [r7, #12]
 80072b2:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 80072b6:	b29b      	uxth	r3, r3
 80072b8:	2b01      	cmp	r3, #1
 80072ba:	d81f      	bhi.n	80072fc <HAL_SPI_TransmitReceive+0x3a6>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80072bc:	68fb      	ldr	r3, [r7, #12]
 80072be:	681b      	ldr	r3, [r3, #0]
 80072c0:	685a      	ldr	r2, [r3, #4]
 80072c2:	68fb      	ldr	r3, [r7, #12]
 80072c4:	681b      	ldr	r3, [r3, #0]
 80072c6:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 80072ca:	605a      	str	r2, [r3, #4]
 80072cc:	e016      	b.n	80072fc <HAL_SPI_TransmitReceive+0x3a6>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 80072ce:	68fb      	ldr	r3, [r7, #12]
 80072d0:	681b      	ldr	r3, [r3, #0]
 80072d2:	f103 020c 	add.w	r2, r3, #12
 80072d6:	68fb      	ldr	r3, [r7, #12]
 80072d8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80072da:	7812      	ldrb	r2, [r2, #0]
 80072dc:	b2d2      	uxtb	r2, r2
 80072de:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 80072e0:	68fb      	ldr	r3, [r7, #12]
 80072e2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80072e4:	1c5a      	adds	r2, r3, #1
 80072e6:	68fb      	ldr	r3, [r7, #12]
 80072e8:	641a      	str	r2, [r3, #64]	@ 0x40
          hspi->RxXferCount--;
 80072ea:	68fb      	ldr	r3, [r7, #12]
 80072ec:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 80072f0:	b29b      	uxth	r3, r3
 80072f2:	3b01      	subs	r3, #1
 80072f4:	b29a      	uxth	r2, r3
 80072f6:	68fb      	ldr	r3, [r7, #12]
 80072f8:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80072fc:	2301      	movs	r3, #1
 80072fe:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8007300:	f7fd fefa 	bl	80050f8 <HAL_GetTick>
 8007304:	4602      	mov	r2, r0
 8007306:	6a3b      	ldr	r3, [r7, #32]
 8007308:	1ad3      	subs	r3, r2, r3
 800730a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800730c:	429a      	cmp	r2, r3
 800730e:	d803      	bhi.n	8007318 <HAL_SPI_TransmitReceive+0x3c2>
 8007310:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007312:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8007316:	d102      	bne.n	800731e <HAL_SPI_TransmitReceive+0x3c8>
 8007318:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800731a:	2b00      	cmp	r3, #0
 800731c:	d109      	bne.n	8007332 <HAL_SPI_TransmitReceive+0x3dc>
      {
        hspi->State = HAL_SPI_STATE_READY;
 800731e:	68fb      	ldr	r3, [r7, #12]
 8007320:	2201      	movs	r2, #1
 8007322:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
        __HAL_UNLOCK(hspi);
 8007326:	68fb      	ldr	r3, [r7, #12]
 8007328:	2200      	movs	r2, #0
 800732a:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
        return HAL_TIMEOUT;
 800732e:	2303      	movs	r3, #3
 8007330:	e02c      	b.n	800738c <HAL_SPI_TransmitReceive+0x436>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8007332:	68fb      	ldr	r3, [r7, #12]
 8007334:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8007336:	b29b      	uxth	r3, r3
 8007338:	2b00      	cmp	r3, #0
 800733a:	f47f af55 	bne.w	80071e8 <HAL_SPI_TransmitReceive+0x292>
 800733e:	68fb      	ldr	r3, [r7, #12]
 8007340:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8007344:	b29b      	uxth	r3, r3
 8007346:	2b00      	cmp	r3, #0
 8007348:	f47f af4e 	bne.w	80071e8 <HAL_SPI_TransmitReceive+0x292>
    return HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800734c:	6a3a      	ldr	r2, [r7, #32]
 800734e:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8007350:	68f8      	ldr	r0, [r7, #12]
 8007352:	f000 f93d 	bl	80075d0 <SPI_EndRxTxTransaction>
 8007356:	4603      	mov	r3, r0
 8007358:	2b00      	cmp	r3, #0
 800735a:	d008      	beq.n	800736e <HAL_SPI_TransmitReceive+0x418>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800735c:	68fb      	ldr	r3, [r7, #12]
 800735e:	2220      	movs	r2, #32
 8007360:	661a      	str	r2, [r3, #96]	@ 0x60
    __HAL_UNLOCK(hspi);
 8007362:	68fb      	ldr	r3, [r7, #12]
 8007364:	2200      	movs	r2, #0
 8007366:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
    return HAL_ERROR;
 800736a:	2301      	movs	r3, #1
 800736c:	e00e      	b.n	800738c <HAL_SPI_TransmitReceive+0x436>
  }


  hspi->State = HAL_SPI_STATE_READY;
 800736e:	68fb      	ldr	r3, [r7, #12]
 8007370:	2201      	movs	r2, #1
 8007372:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8007376:	68fb      	ldr	r3, [r7, #12]
 8007378:	2200      	movs	r2, #0
 800737a:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800737e:	68fb      	ldr	r3, [r7, #12]
 8007380:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8007382:	2b00      	cmp	r3, #0
 8007384:	d001      	beq.n	800738a <HAL_SPI_TransmitReceive+0x434>
  {
    return HAL_ERROR;
 8007386:	2301      	movs	r3, #1
 8007388:	e000      	b.n	800738c <HAL_SPI_TransmitReceive+0x436>
  }
  else
  {
    return HAL_OK;
 800738a:	2300      	movs	r3, #0
  }
}
 800738c:	4618      	mov	r0, r3
 800738e:	3728      	adds	r7, #40	@ 0x28
 8007390:	46bd      	mov	sp, r7
 8007392:	bd80      	pop	{r7, pc}

08007394 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8007394:	b580      	push	{r7, lr}
 8007396:	b088      	sub	sp, #32
 8007398:	af00      	add	r7, sp, #0
 800739a:	60f8      	str	r0, [r7, #12]
 800739c:	60b9      	str	r1, [r7, #8]
 800739e:	603b      	str	r3, [r7, #0]
 80073a0:	4613      	mov	r3, r2
 80073a2:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80073a4:	f7fd fea8 	bl	80050f8 <HAL_GetTick>
 80073a8:	4602      	mov	r2, r0
 80073aa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80073ac:	1a9b      	subs	r3, r3, r2
 80073ae:	683a      	ldr	r2, [r7, #0]
 80073b0:	4413      	add	r3, r2
 80073b2:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80073b4:	f7fd fea0 	bl	80050f8 <HAL_GetTick>
 80073b8:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80073ba:	4b39      	ldr	r3, [pc, #228]	@ (80074a0 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 80073bc:	681b      	ldr	r3, [r3, #0]
 80073be:	015b      	lsls	r3, r3, #5
 80073c0:	0d1b      	lsrs	r3, r3, #20
 80073c2:	69fa      	ldr	r2, [r7, #28]
 80073c4:	fb02 f303 	mul.w	r3, r2, r3
 80073c8:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80073ca:	e054      	b.n	8007476 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 80073cc:	683b      	ldr	r3, [r7, #0]
 80073ce:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80073d2:	d050      	beq.n	8007476 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80073d4:	f7fd fe90 	bl	80050f8 <HAL_GetTick>
 80073d8:	4602      	mov	r2, r0
 80073da:	69bb      	ldr	r3, [r7, #24]
 80073dc:	1ad3      	subs	r3, r2, r3
 80073de:	69fa      	ldr	r2, [r7, #28]
 80073e0:	429a      	cmp	r2, r3
 80073e2:	d902      	bls.n	80073ea <SPI_WaitFlagStateUntilTimeout+0x56>
 80073e4:	69fb      	ldr	r3, [r7, #28]
 80073e6:	2b00      	cmp	r3, #0
 80073e8:	d13d      	bne.n	8007466 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80073ea:	68fb      	ldr	r3, [r7, #12]
 80073ec:	681b      	ldr	r3, [r3, #0]
 80073ee:	685a      	ldr	r2, [r3, #4]
 80073f0:	68fb      	ldr	r3, [r7, #12]
 80073f2:	681b      	ldr	r3, [r3, #0]
 80073f4:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 80073f8:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80073fa:	68fb      	ldr	r3, [r7, #12]
 80073fc:	685b      	ldr	r3, [r3, #4]
 80073fe:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8007402:	d111      	bne.n	8007428 <SPI_WaitFlagStateUntilTimeout+0x94>
 8007404:	68fb      	ldr	r3, [r7, #12]
 8007406:	689b      	ldr	r3, [r3, #8]
 8007408:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800740c:	d004      	beq.n	8007418 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800740e:	68fb      	ldr	r3, [r7, #12]
 8007410:	689b      	ldr	r3, [r3, #8]
 8007412:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007416:	d107      	bne.n	8007428 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8007418:	68fb      	ldr	r3, [r7, #12]
 800741a:	681b      	ldr	r3, [r3, #0]
 800741c:	681a      	ldr	r2, [r3, #0]
 800741e:	68fb      	ldr	r3, [r7, #12]
 8007420:	681b      	ldr	r3, [r3, #0]
 8007422:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8007426:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8007428:	68fb      	ldr	r3, [r7, #12]
 800742a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800742c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8007430:	d10f      	bne.n	8007452 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8007432:	68fb      	ldr	r3, [r7, #12]
 8007434:	681b      	ldr	r3, [r3, #0]
 8007436:	681a      	ldr	r2, [r3, #0]
 8007438:	68fb      	ldr	r3, [r7, #12]
 800743a:	681b      	ldr	r3, [r3, #0]
 800743c:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8007440:	601a      	str	r2, [r3, #0]
 8007442:	68fb      	ldr	r3, [r7, #12]
 8007444:	681b      	ldr	r3, [r3, #0]
 8007446:	681a      	ldr	r2, [r3, #0]
 8007448:	68fb      	ldr	r3, [r7, #12]
 800744a:	681b      	ldr	r3, [r3, #0]
 800744c:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8007450:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8007452:	68fb      	ldr	r3, [r7, #12]
 8007454:	2201      	movs	r2, #1
 8007456:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800745a:	68fb      	ldr	r3, [r7, #12]
 800745c:	2200      	movs	r2, #0
 800745e:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 8007462:	2303      	movs	r3, #3
 8007464:	e017      	b.n	8007496 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8007466:	697b      	ldr	r3, [r7, #20]
 8007468:	2b00      	cmp	r3, #0
 800746a:	d101      	bne.n	8007470 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 800746c:	2300      	movs	r3, #0
 800746e:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8007470:	697b      	ldr	r3, [r7, #20]
 8007472:	3b01      	subs	r3, #1
 8007474:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8007476:	68fb      	ldr	r3, [r7, #12]
 8007478:	681b      	ldr	r3, [r3, #0]
 800747a:	689a      	ldr	r2, [r3, #8]
 800747c:	68bb      	ldr	r3, [r7, #8]
 800747e:	4013      	ands	r3, r2
 8007480:	68ba      	ldr	r2, [r7, #8]
 8007482:	429a      	cmp	r2, r3
 8007484:	bf0c      	ite	eq
 8007486:	2301      	moveq	r3, #1
 8007488:	2300      	movne	r3, #0
 800748a:	b2db      	uxtb	r3, r3
 800748c:	461a      	mov	r2, r3
 800748e:	79fb      	ldrb	r3, [r7, #7]
 8007490:	429a      	cmp	r2, r3
 8007492:	d19b      	bne.n	80073cc <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8007494:	2300      	movs	r3, #0
}
 8007496:	4618      	mov	r0, r3
 8007498:	3720      	adds	r7, #32
 800749a:	46bd      	mov	sp, r7
 800749c:	bd80      	pop	{r7, pc}
 800749e:	bf00      	nop
 80074a0:	20000008 	.word	0x20000008

080074a4 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80074a4:	b580      	push	{r7, lr}
 80074a6:	b08a      	sub	sp, #40	@ 0x28
 80074a8:	af00      	add	r7, sp, #0
 80074aa:	60f8      	str	r0, [r7, #12]
 80074ac:	60b9      	str	r1, [r7, #8]
 80074ae:	607a      	str	r2, [r7, #4]
 80074b0:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO const uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 80074b2:	2300      	movs	r3, #0
 80074b4:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 80074b6:	f7fd fe1f 	bl	80050f8 <HAL_GetTick>
 80074ba:	4602      	mov	r2, r0
 80074bc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80074be:	1a9b      	subs	r3, r3, r2
 80074c0:	683a      	ldr	r2, [r7, #0]
 80074c2:	4413      	add	r3, r2
 80074c4:	627b      	str	r3, [r7, #36]	@ 0x24
  tmp_tickstart = HAL_GetTick();
 80074c6:	f7fd fe17 	bl	80050f8 <HAL_GetTick>
 80074ca:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 80074cc:	68fb      	ldr	r3, [r7, #12]
 80074ce:	681b      	ldr	r3, [r3, #0]
 80074d0:	330c      	adds	r3, #12
 80074d2:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 80074d4:	4b3d      	ldr	r3, [pc, #244]	@ (80075cc <SPI_WaitFifoStateUntilTimeout+0x128>)
 80074d6:	681a      	ldr	r2, [r3, #0]
 80074d8:	4613      	mov	r3, r2
 80074da:	009b      	lsls	r3, r3, #2
 80074dc:	4413      	add	r3, r2
 80074de:	00da      	lsls	r2, r3, #3
 80074e0:	1ad3      	subs	r3, r2, r3
 80074e2:	0d1b      	lsrs	r3, r3, #20
 80074e4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80074e6:	fb02 f303 	mul.w	r3, r2, r3
 80074ea:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 80074ec:	e060      	b.n	80075b0 <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 80074ee:	68bb      	ldr	r3, [r7, #8]
 80074f0:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 80074f4:	d107      	bne.n	8007506 <SPI_WaitFifoStateUntilTimeout+0x62>
 80074f6:	687b      	ldr	r3, [r7, #4]
 80074f8:	2b00      	cmp	r3, #0
 80074fa:	d104      	bne.n	8007506 <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 80074fc:	69fb      	ldr	r3, [r7, #28]
 80074fe:	781b      	ldrb	r3, [r3, #0]
 8007500:	b2db      	uxtb	r3, r3
 8007502:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 8007504:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 8007506:	683b      	ldr	r3, [r7, #0]
 8007508:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800750c:	d050      	beq.n	80075b0 <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800750e:	f7fd fdf3 	bl	80050f8 <HAL_GetTick>
 8007512:	4602      	mov	r2, r0
 8007514:	6a3b      	ldr	r3, [r7, #32]
 8007516:	1ad3      	subs	r3, r2, r3
 8007518:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800751a:	429a      	cmp	r2, r3
 800751c:	d902      	bls.n	8007524 <SPI_WaitFifoStateUntilTimeout+0x80>
 800751e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007520:	2b00      	cmp	r3, #0
 8007522:	d13d      	bne.n	80075a0 <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8007524:	68fb      	ldr	r3, [r7, #12]
 8007526:	681b      	ldr	r3, [r3, #0]
 8007528:	685a      	ldr	r2, [r3, #4]
 800752a:	68fb      	ldr	r3, [r7, #12]
 800752c:	681b      	ldr	r3, [r3, #0]
 800752e:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8007532:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007534:	68fb      	ldr	r3, [r7, #12]
 8007536:	685b      	ldr	r3, [r3, #4]
 8007538:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800753c:	d111      	bne.n	8007562 <SPI_WaitFifoStateUntilTimeout+0xbe>
 800753e:	68fb      	ldr	r3, [r7, #12]
 8007540:	689b      	ldr	r3, [r3, #8]
 8007542:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8007546:	d004      	beq.n	8007552 <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8007548:	68fb      	ldr	r3, [r7, #12]
 800754a:	689b      	ldr	r3, [r3, #8]
 800754c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007550:	d107      	bne.n	8007562 <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8007552:	68fb      	ldr	r3, [r7, #12]
 8007554:	681b      	ldr	r3, [r3, #0]
 8007556:	681a      	ldr	r2, [r3, #0]
 8007558:	68fb      	ldr	r3, [r7, #12]
 800755a:	681b      	ldr	r3, [r3, #0]
 800755c:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8007560:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8007562:	68fb      	ldr	r3, [r7, #12]
 8007564:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007566:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800756a:	d10f      	bne.n	800758c <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 800756c:	68fb      	ldr	r3, [r7, #12]
 800756e:	681b      	ldr	r3, [r3, #0]
 8007570:	681a      	ldr	r2, [r3, #0]
 8007572:	68fb      	ldr	r3, [r7, #12]
 8007574:	681b      	ldr	r3, [r3, #0]
 8007576:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800757a:	601a      	str	r2, [r3, #0]
 800757c:	68fb      	ldr	r3, [r7, #12]
 800757e:	681b      	ldr	r3, [r3, #0]
 8007580:	681a      	ldr	r2, [r3, #0]
 8007582:	68fb      	ldr	r3, [r7, #12]
 8007584:	681b      	ldr	r3, [r3, #0]
 8007586:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800758a:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800758c:	68fb      	ldr	r3, [r7, #12]
 800758e:	2201      	movs	r2, #1
 8007590:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8007594:	68fb      	ldr	r3, [r7, #12]
 8007596:	2200      	movs	r2, #0
 8007598:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 800759c:	2303      	movs	r3, #3
 800759e:	e010      	b.n	80075c2 <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80075a0:	69bb      	ldr	r3, [r7, #24]
 80075a2:	2b00      	cmp	r3, #0
 80075a4:	d101      	bne.n	80075aa <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 80075a6:	2300      	movs	r3, #0
 80075a8:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      count--;
 80075aa:	69bb      	ldr	r3, [r7, #24]
 80075ac:	3b01      	subs	r3, #1
 80075ae:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 80075b0:	68fb      	ldr	r3, [r7, #12]
 80075b2:	681b      	ldr	r3, [r3, #0]
 80075b4:	689a      	ldr	r2, [r3, #8]
 80075b6:	68bb      	ldr	r3, [r7, #8]
 80075b8:	4013      	ands	r3, r2
 80075ba:	687a      	ldr	r2, [r7, #4]
 80075bc:	429a      	cmp	r2, r3
 80075be:	d196      	bne.n	80074ee <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 80075c0:	2300      	movs	r3, #0
}
 80075c2:	4618      	mov	r0, r3
 80075c4:	3728      	adds	r7, #40	@ 0x28
 80075c6:	46bd      	mov	sp, r7
 80075c8:	bd80      	pop	{r7, pc}
 80075ca:	bf00      	nop
 80075cc:	20000008 	.word	0x20000008

080075d0 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80075d0:	b580      	push	{r7, lr}
 80075d2:	b086      	sub	sp, #24
 80075d4:	af02      	add	r7, sp, #8
 80075d6:	60f8      	str	r0, [r7, #12]
 80075d8:	60b9      	str	r1, [r7, #8]
 80075da:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80075dc:	687b      	ldr	r3, [r7, #4]
 80075de:	9300      	str	r3, [sp, #0]
 80075e0:	68bb      	ldr	r3, [r7, #8]
 80075e2:	2200      	movs	r2, #0
 80075e4:	f44f 51c0 	mov.w	r1, #6144	@ 0x1800
 80075e8:	68f8      	ldr	r0, [r7, #12]
 80075ea:	f7ff ff5b 	bl	80074a4 <SPI_WaitFifoStateUntilTimeout>
 80075ee:	4603      	mov	r3, r0
 80075f0:	2b00      	cmp	r3, #0
 80075f2:	d007      	beq.n	8007604 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80075f4:	68fb      	ldr	r3, [r7, #12]
 80075f6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80075f8:	f043 0220 	orr.w	r2, r3, #32
 80075fc:	68fb      	ldr	r3, [r7, #12]
 80075fe:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8007600:	2303      	movs	r3, #3
 8007602:	e027      	b.n	8007654 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8007604:	687b      	ldr	r3, [r7, #4]
 8007606:	9300      	str	r3, [sp, #0]
 8007608:	68bb      	ldr	r3, [r7, #8]
 800760a:	2200      	movs	r2, #0
 800760c:	2180      	movs	r1, #128	@ 0x80
 800760e:	68f8      	ldr	r0, [r7, #12]
 8007610:	f7ff fec0 	bl	8007394 <SPI_WaitFlagStateUntilTimeout>
 8007614:	4603      	mov	r3, r0
 8007616:	2b00      	cmp	r3, #0
 8007618:	d007      	beq.n	800762a <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800761a:	68fb      	ldr	r3, [r7, #12]
 800761c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800761e:	f043 0220 	orr.w	r2, r3, #32
 8007622:	68fb      	ldr	r3, [r7, #12]
 8007624:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8007626:	2303      	movs	r3, #3
 8007628:	e014      	b.n	8007654 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800762a:	687b      	ldr	r3, [r7, #4]
 800762c:	9300      	str	r3, [sp, #0]
 800762e:	68bb      	ldr	r3, [r7, #8]
 8007630:	2200      	movs	r2, #0
 8007632:	f44f 61c0 	mov.w	r1, #1536	@ 0x600
 8007636:	68f8      	ldr	r0, [r7, #12]
 8007638:	f7ff ff34 	bl	80074a4 <SPI_WaitFifoStateUntilTimeout>
 800763c:	4603      	mov	r3, r0
 800763e:	2b00      	cmp	r3, #0
 8007640:	d007      	beq.n	8007652 <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007642:	68fb      	ldr	r3, [r7, #12]
 8007644:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8007646:	f043 0220 	orr.w	r2, r3, #32
 800764a:	68fb      	ldr	r3, [r7, #12]
 800764c:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 800764e:	2303      	movs	r3, #3
 8007650:	e000      	b.n	8007654 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 8007652:	2300      	movs	r3, #0
}
 8007654:	4618      	mov	r0, r3
 8007656:	3710      	adds	r7, #16
 8007658:	46bd      	mov	sp, r7
 800765a:	bd80      	pop	{r7, pc}

0800765c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800765c:	b580      	push	{r7, lr}
 800765e:	b082      	sub	sp, #8
 8007660:	af00      	add	r7, sp, #0
 8007662:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007664:	687b      	ldr	r3, [r7, #4]
 8007666:	2b00      	cmp	r3, #0
 8007668:	d101      	bne.n	800766e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800766a:	2301      	movs	r3, #1
 800766c:	e049      	b.n	8007702 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800766e:	687b      	ldr	r3, [r7, #4]
 8007670:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8007674:	b2db      	uxtb	r3, r3
 8007676:	2b00      	cmp	r3, #0
 8007678:	d106      	bne.n	8007688 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800767a:	687b      	ldr	r3, [r7, #4]
 800767c:	2200      	movs	r2, #0
 800767e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8007682:	6878      	ldr	r0, [r7, #4]
 8007684:	f7fa fde8 	bl	8002258 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007688:	687b      	ldr	r3, [r7, #4]
 800768a:	2202      	movs	r2, #2
 800768c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007690:	687b      	ldr	r3, [r7, #4]
 8007692:	681a      	ldr	r2, [r3, #0]
 8007694:	687b      	ldr	r3, [r7, #4]
 8007696:	3304      	adds	r3, #4
 8007698:	4619      	mov	r1, r3
 800769a:	4610      	mov	r0, r2
 800769c:	f000 fe1e 	bl	80082dc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80076a0:	687b      	ldr	r3, [r7, #4]
 80076a2:	2201      	movs	r2, #1
 80076a4:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80076a8:	687b      	ldr	r3, [r7, #4]
 80076aa:	2201      	movs	r2, #1
 80076ac:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80076b0:	687b      	ldr	r3, [r7, #4]
 80076b2:	2201      	movs	r2, #1
 80076b4:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80076b8:	687b      	ldr	r3, [r7, #4]
 80076ba:	2201      	movs	r2, #1
 80076bc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80076c0:	687b      	ldr	r3, [r7, #4]
 80076c2:	2201      	movs	r2, #1
 80076c4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80076c8:	687b      	ldr	r3, [r7, #4]
 80076ca:	2201      	movs	r2, #1
 80076cc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80076d0:	687b      	ldr	r3, [r7, #4]
 80076d2:	2201      	movs	r2, #1
 80076d4:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80076d8:	687b      	ldr	r3, [r7, #4]
 80076da:	2201      	movs	r2, #1
 80076dc:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80076e0:	687b      	ldr	r3, [r7, #4]
 80076e2:	2201      	movs	r2, #1
 80076e4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80076e8:	687b      	ldr	r3, [r7, #4]
 80076ea:	2201      	movs	r2, #1
 80076ec:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 80076f0:	687b      	ldr	r3, [r7, #4]
 80076f2:	2201      	movs	r2, #1
 80076f4:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80076f8:	687b      	ldr	r3, [r7, #4]
 80076fa:	2201      	movs	r2, #1
 80076fc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8007700:	2300      	movs	r3, #0
}
 8007702:	4618      	mov	r0, r3
 8007704:	3708      	adds	r7, #8
 8007706:	46bd      	mov	sp, r7
 8007708:	bd80      	pop	{r7, pc}
	...

0800770c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800770c:	b480      	push	{r7}
 800770e:	b085      	sub	sp, #20
 8007710:	af00      	add	r7, sp, #0
 8007712:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8007714:	687b      	ldr	r3, [r7, #4]
 8007716:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800771a:	b2db      	uxtb	r3, r3
 800771c:	2b01      	cmp	r3, #1
 800771e:	d001      	beq.n	8007724 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8007720:	2301      	movs	r3, #1
 8007722:	e04a      	b.n	80077ba <HAL_TIM_Base_Start_IT+0xae>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007724:	687b      	ldr	r3, [r7, #4]
 8007726:	2202      	movs	r2, #2
 8007728:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800772c:	687b      	ldr	r3, [r7, #4]
 800772e:	681b      	ldr	r3, [r3, #0]
 8007730:	68da      	ldr	r2, [r3, #12]
 8007732:	687b      	ldr	r3, [r7, #4]
 8007734:	681b      	ldr	r3, [r3, #0]
 8007736:	f042 0201 	orr.w	r2, r2, #1
 800773a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800773c:	687b      	ldr	r3, [r7, #4]
 800773e:	681b      	ldr	r3, [r3, #0]
 8007740:	4a21      	ldr	r2, [pc, #132]	@ (80077c8 <HAL_TIM_Base_Start_IT+0xbc>)
 8007742:	4293      	cmp	r3, r2
 8007744:	d018      	beq.n	8007778 <HAL_TIM_Base_Start_IT+0x6c>
 8007746:	687b      	ldr	r3, [r7, #4]
 8007748:	681b      	ldr	r3, [r3, #0]
 800774a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800774e:	d013      	beq.n	8007778 <HAL_TIM_Base_Start_IT+0x6c>
 8007750:	687b      	ldr	r3, [r7, #4]
 8007752:	681b      	ldr	r3, [r3, #0]
 8007754:	4a1d      	ldr	r2, [pc, #116]	@ (80077cc <HAL_TIM_Base_Start_IT+0xc0>)
 8007756:	4293      	cmp	r3, r2
 8007758:	d00e      	beq.n	8007778 <HAL_TIM_Base_Start_IT+0x6c>
 800775a:	687b      	ldr	r3, [r7, #4]
 800775c:	681b      	ldr	r3, [r3, #0]
 800775e:	4a1c      	ldr	r2, [pc, #112]	@ (80077d0 <HAL_TIM_Base_Start_IT+0xc4>)
 8007760:	4293      	cmp	r3, r2
 8007762:	d009      	beq.n	8007778 <HAL_TIM_Base_Start_IT+0x6c>
 8007764:	687b      	ldr	r3, [r7, #4]
 8007766:	681b      	ldr	r3, [r3, #0]
 8007768:	4a1a      	ldr	r2, [pc, #104]	@ (80077d4 <HAL_TIM_Base_Start_IT+0xc8>)
 800776a:	4293      	cmp	r3, r2
 800776c:	d004      	beq.n	8007778 <HAL_TIM_Base_Start_IT+0x6c>
 800776e:	687b      	ldr	r3, [r7, #4]
 8007770:	681b      	ldr	r3, [r3, #0]
 8007772:	4a19      	ldr	r2, [pc, #100]	@ (80077d8 <HAL_TIM_Base_Start_IT+0xcc>)
 8007774:	4293      	cmp	r3, r2
 8007776:	d115      	bne.n	80077a4 <HAL_TIM_Base_Start_IT+0x98>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007778:	687b      	ldr	r3, [r7, #4]
 800777a:	681b      	ldr	r3, [r3, #0]
 800777c:	689a      	ldr	r2, [r3, #8]
 800777e:	4b17      	ldr	r3, [pc, #92]	@ (80077dc <HAL_TIM_Base_Start_IT+0xd0>)
 8007780:	4013      	ands	r3, r2
 8007782:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007784:	68fb      	ldr	r3, [r7, #12]
 8007786:	2b06      	cmp	r3, #6
 8007788:	d015      	beq.n	80077b6 <HAL_TIM_Base_Start_IT+0xaa>
 800778a:	68fb      	ldr	r3, [r7, #12]
 800778c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007790:	d011      	beq.n	80077b6 <HAL_TIM_Base_Start_IT+0xaa>
    {
      __HAL_TIM_ENABLE(htim);
 8007792:	687b      	ldr	r3, [r7, #4]
 8007794:	681b      	ldr	r3, [r3, #0]
 8007796:	681a      	ldr	r2, [r3, #0]
 8007798:	687b      	ldr	r3, [r7, #4]
 800779a:	681b      	ldr	r3, [r3, #0]
 800779c:	f042 0201 	orr.w	r2, r2, #1
 80077a0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80077a2:	e008      	b.n	80077b6 <HAL_TIM_Base_Start_IT+0xaa>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80077a4:	687b      	ldr	r3, [r7, #4]
 80077a6:	681b      	ldr	r3, [r3, #0]
 80077a8:	681a      	ldr	r2, [r3, #0]
 80077aa:	687b      	ldr	r3, [r7, #4]
 80077ac:	681b      	ldr	r3, [r3, #0]
 80077ae:	f042 0201 	orr.w	r2, r2, #1
 80077b2:	601a      	str	r2, [r3, #0]
 80077b4:	e000      	b.n	80077b8 <HAL_TIM_Base_Start_IT+0xac>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80077b6:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80077b8:	2300      	movs	r3, #0
}
 80077ba:	4618      	mov	r0, r3
 80077bc:	3714      	adds	r7, #20
 80077be:	46bd      	mov	sp, r7
 80077c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077c4:	4770      	bx	lr
 80077c6:	bf00      	nop
 80077c8:	40012c00 	.word	0x40012c00
 80077cc:	40000400 	.word	0x40000400
 80077d0:	40000800 	.word	0x40000800
 80077d4:	40013400 	.word	0x40013400
 80077d8:	40014000 	.word	0x40014000
 80077dc:	00010007 	.word	0x00010007

080077e0 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80077e0:	b580      	push	{r7, lr}
 80077e2:	b082      	sub	sp, #8
 80077e4:	af00      	add	r7, sp, #0
 80077e6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80077e8:	687b      	ldr	r3, [r7, #4]
 80077ea:	2b00      	cmp	r3, #0
 80077ec:	d101      	bne.n	80077f2 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80077ee:	2301      	movs	r3, #1
 80077f0:	e049      	b.n	8007886 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80077f2:	687b      	ldr	r3, [r7, #4]
 80077f4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80077f8:	b2db      	uxtb	r3, r3
 80077fa:	2b00      	cmp	r3, #0
 80077fc:	d106      	bne.n	800780c <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80077fe:	687b      	ldr	r3, [r7, #4]
 8007800:	2200      	movs	r2, #0
 8007802:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8007806:	6878      	ldr	r0, [r7, #4]
 8007808:	f000 f841 	bl	800788e <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800780c:	687b      	ldr	r3, [r7, #4]
 800780e:	2202      	movs	r2, #2
 8007810:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007814:	687b      	ldr	r3, [r7, #4]
 8007816:	681a      	ldr	r2, [r3, #0]
 8007818:	687b      	ldr	r3, [r7, #4]
 800781a:	3304      	adds	r3, #4
 800781c:	4619      	mov	r1, r3
 800781e:	4610      	mov	r0, r2
 8007820:	f000 fd5c 	bl	80082dc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007824:	687b      	ldr	r3, [r7, #4]
 8007826:	2201      	movs	r2, #1
 8007828:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800782c:	687b      	ldr	r3, [r7, #4]
 800782e:	2201      	movs	r2, #1
 8007830:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8007834:	687b      	ldr	r3, [r7, #4]
 8007836:	2201      	movs	r2, #1
 8007838:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800783c:	687b      	ldr	r3, [r7, #4]
 800783e:	2201      	movs	r2, #1
 8007840:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8007844:	687b      	ldr	r3, [r7, #4]
 8007846:	2201      	movs	r2, #1
 8007848:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800784c:	687b      	ldr	r3, [r7, #4]
 800784e:	2201      	movs	r2, #1
 8007850:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8007854:	687b      	ldr	r3, [r7, #4]
 8007856:	2201      	movs	r2, #1
 8007858:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800785c:	687b      	ldr	r3, [r7, #4]
 800785e:	2201      	movs	r2, #1
 8007860:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8007864:	687b      	ldr	r3, [r7, #4]
 8007866:	2201      	movs	r2, #1
 8007868:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800786c:	687b      	ldr	r3, [r7, #4]
 800786e:	2201      	movs	r2, #1
 8007870:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8007874:	687b      	ldr	r3, [r7, #4]
 8007876:	2201      	movs	r2, #1
 8007878:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800787c:	687b      	ldr	r3, [r7, #4]
 800787e:	2201      	movs	r2, #1
 8007880:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8007884:	2300      	movs	r3, #0
}
 8007886:	4618      	mov	r0, r3
 8007888:	3708      	adds	r7, #8
 800788a:	46bd      	mov	sp, r7
 800788c:	bd80      	pop	{r7, pc}

0800788e <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800788e:	b480      	push	{r7}
 8007890:	b083      	sub	sp, #12
 8007892:	af00      	add	r7, sp, #0
 8007894:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8007896:	bf00      	nop
 8007898:	370c      	adds	r7, #12
 800789a:	46bd      	mov	sp, r7
 800789c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078a0:	4770      	bx	lr
	...

080078a4 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80078a4:	b580      	push	{r7, lr}
 80078a6:	b084      	sub	sp, #16
 80078a8:	af00      	add	r7, sp, #0
 80078aa:	6078      	str	r0, [r7, #4]
 80078ac:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80078ae:	683b      	ldr	r3, [r7, #0]
 80078b0:	2b00      	cmp	r3, #0
 80078b2:	d109      	bne.n	80078c8 <HAL_TIM_PWM_Start+0x24>
 80078b4:	687b      	ldr	r3, [r7, #4]
 80078b6:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80078ba:	b2db      	uxtb	r3, r3
 80078bc:	2b01      	cmp	r3, #1
 80078be:	bf14      	ite	ne
 80078c0:	2301      	movne	r3, #1
 80078c2:	2300      	moveq	r3, #0
 80078c4:	b2db      	uxtb	r3, r3
 80078c6:	e03c      	b.n	8007942 <HAL_TIM_PWM_Start+0x9e>
 80078c8:	683b      	ldr	r3, [r7, #0]
 80078ca:	2b04      	cmp	r3, #4
 80078cc:	d109      	bne.n	80078e2 <HAL_TIM_PWM_Start+0x3e>
 80078ce:	687b      	ldr	r3, [r7, #4]
 80078d0:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 80078d4:	b2db      	uxtb	r3, r3
 80078d6:	2b01      	cmp	r3, #1
 80078d8:	bf14      	ite	ne
 80078da:	2301      	movne	r3, #1
 80078dc:	2300      	moveq	r3, #0
 80078de:	b2db      	uxtb	r3, r3
 80078e0:	e02f      	b.n	8007942 <HAL_TIM_PWM_Start+0x9e>
 80078e2:	683b      	ldr	r3, [r7, #0]
 80078e4:	2b08      	cmp	r3, #8
 80078e6:	d109      	bne.n	80078fc <HAL_TIM_PWM_Start+0x58>
 80078e8:	687b      	ldr	r3, [r7, #4]
 80078ea:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80078ee:	b2db      	uxtb	r3, r3
 80078f0:	2b01      	cmp	r3, #1
 80078f2:	bf14      	ite	ne
 80078f4:	2301      	movne	r3, #1
 80078f6:	2300      	moveq	r3, #0
 80078f8:	b2db      	uxtb	r3, r3
 80078fa:	e022      	b.n	8007942 <HAL_TIM_PWM_Start+0x9e>
 80078fc:	683b      	ldr	r3, [r7, #0]
 80078fe:	2b0c      	cmp	r3, #12
 8007900:	d109      	bne.n	8007916 <HAL_TIM_PWM_Start+0x72>
 8007902:	687b      	ldr	r3, [r7, #4]
 8007904:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8007908:	b2db      	uxtb	r3, r3
 800790a:	2b01      	cmp	r3, #1
 800790c:	bf14      	ite	ne
 800790e:	2301      	movne	r3, #1
 8007910:	2300      	moveq	r3, #0
 8007912:	b2db      	uxtb	r3, r3
 8007914:	e015      	b.n	8007942 <HAL_TIM_PWM_Start+0x9e>
 8007916:	683b      	ldr	r3, [r7, #0]
 8007918:	2b10      	cmp	r3, #16
 800791a:	d109      	bne.n	8007930 <HAL_TIM_PWM_Start+0x8c>
 800791c:	687b      	ldr	r3, [r7, #4]
 800791e:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8007922:	b2db      	uxtb	r3, r3
 8007924:	2b01      	cmp	r3, #1
 8007926:	bf14      	ite	ne
 8007928:	2301      	movne	r3, #1
 800792a:	2300      	moveq	r3, #0
 800792c:	b2db      	uxtb	r3, r3
 800792e:	e008      	b.n	8007942 <HAL_TIM_PWM_Start+0x9e>
 8007930:	687b      	ldr	r3, [r7, #4]
 8007932:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8007936:	b2db      	uxtb	r3, r3
 8007938:	2b01      	cmp	r3, #1
 800793a:	bf14      	ite	ne
 800793c:	2301      	movne	r3, #1
 800793e:	2300      	moveq	r3, #0
 8007940:	b2db      	uxtb	r3, r3
 8007942:	2b00      	cmp	r3, #0
 8007944:	d001      	beq.n	800794a <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 8007946:	2301      	movs	r3, #1
 8007948:	e097      	b.n	8007a7a <HAL_TIM_PWM_Start+0x1d6>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800794a:	683b      	ldr	r3, [r7, #0]
 800794c:	2b00      	cmp	r3, #0
 800794e:	d104      	bne.n	800795a <HAL_TIM_PWM_Start+0xb6>
 8007950:	687b      	ldr	r3, [r7, #4]
 8007952:	2202      	movs	r2, #2
 8007954:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8007958:	e023      	b.n	80079a2 <HAL_TIM_PWM_Start+0xfe>
 800795a:	683b      	ldr	r3, [r7, #0]
 800795c:	2b04      	cmp	r3, #4
 800795e:	d104      	bne.n	800796a <HAL_TIM_PWM_Start+0xc6>
 8007960:	687b      	ldr	r3, [r7, #4]
 8007962:	2202      	movs	r2, #2
 8007964:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8007968:	e01b      	b.n	80079a2 <HAL_TIM_PWM_Start+0xfe>
 800796a:	683b      	ldr	r3, [r7, #0]
 800796c:	2b08      	cmp	r3, #8
 800796e:	d104      	bne.n	800797a <HAL_TIM_PWM_Start+0xd6>
 8007970:	687b      	ldr	r3, [r7, #4]
 8007972:	2202      	movs	r2, #2
 8007974:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8007978:	e013      	b.n	80079a2 <HAL_TIM_PWM_Start+0xfe>
 800797a:	683b      	ldr	r3, [r7, #0]
 800797c:	2b0c      	cmp	r3, #12
 800797e:	d104      	bne.n	800798a <HAL_TIM_PWM_Start+0xe6>
 8007980:	687b      	ldr	r3, [r7, #4]
 8007982:	2202      	movs	r2, #2
 8007984:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8007988:	e00b      	b.n	80079a2 <HAL_TIM_PWM_Start+0xfe>
 800798a:	683b      	ldr	r3, [r7, #0]
 800798c:	2b10      	cmp	r3, #16
 800798e:	d104      	bne.n	800799a <HAL_TIM_PWM_Start+0xf6>
 8007990:	687b      	ldr	r3, [r7, #4]
 8007992:	2202      	movs	r2, #2
 8007994:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8007998:	e003      	b.n	80079a2 <HAL_TIM_PWM_Start+0xfe>
 800799a:	687b      	ldr	r3, [r7, #4]
 800799c:	2202      	movs	r2, #2
 800799e:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80079a2:	687b      	ldr	r3, [r7, #4]
 80079a4:	681b      	ldr	r3, [r3, #0]
 80079a6:	2201      	movs	r2, #1
 80079a8:	6839      	ldr	r1, [r7, #0]
 80079aa:	4618      	mov	r0, r3
 80079ac:	f001 f8c4 	bl	8008b38 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80079b0:	687b      	ldr	r3, [r7, #4]
 80079b2:	681b      	ldr	r3, [r3, #0]
 80079b4:	4a33      	ldr	r2, [pc, #204]	@ (8007a84 <HAL_TIM_PWM_Start+0x1e0>)
 80079b6:	4293      	cmp	r3, r2
 80079b8:	d013      	beq.n	80079e2 <HAL_TIM_PWM_Start+0x13e>
 80079ba:	687b      	ldr	r3, [r7, #4]
 80079bc:	681b      	ldr	r3, [r3, #0]
 80079be:	4a32      	ldr	r2, [pc, #200]	@ (8007a88 <HAL_TIM_PWM_Start+0x1e4>)
 80079c0:	4293      	cmp	r3, r2
 80079c2:	d00e      	beq.n	80079e2 <HAL_TIM_PWM_Start+0x13e>
 80079c4:	687b      	ldr	r3, [r7, #4]
 80079c6:	681b      	ldr	r3, [r3, #0]
 80079c8:	4a30      	ldr	r2, [pc, #192]	@ (8007a8c <HAL_TIM_PWM_Start+0x1e8>)
 80079ca:	4293      	cmp	r3, r2
 80079cc:	d009      	beq.n	80079e2 <HAL_TIM_PWM_Start+0x13e>
 80079ce:	687b      	ldr	r3, [r7, #4]
 80079d0:	681b      	ldr	r3, [r3, #0]
 80079d2:	4a2f      	ldr	r2, [pc, #188]	@ (8007a90 <HAL_TIM_PWM_Start+0x1ec>)
 80079d4:	4293      	cmp	r3, r2
 80079d6:	d004      	beq.n	80079e2 <HAL_TIM_PWM_Start+0x13e>
 80079d8:	687b      	ldr	r3, [r7, #4]
 80079da:	681b      	ldr	r3, [r3, #0]
 80079dc:	4a2d      	ldr	r2, [pc, #180]	@ (8007a94 <HAL_TIM_PWM_Start+0x1f0>)
 80079de:	4293      	cmp	r3, r2
 80079e0:	d101      	bne.n	80079e6 <HAL_TIM_PWM_Start+0x142>
 80079e2:	2301      	movs	r3, #1
 80079e4:	e000      	b.n	80079e8 <HAL_TIM_PWM_Start+0x144>
 80079e6:	2300      	movs	r3, #0
 80079e8:	2b00      	cmp	r3, #0
 80079ea:	d007      	beq.n	80079fc <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80079ec:	687b      	ldr	r3, [r7, #4]
 80079ee:	681b      	ldr	r3, [r3, #0]
 80079f0:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80079f2:	687b      	ldr	r3, [r7, #4]
 80079f4:	681b      	ldr	r3, [r3, #0]
 80079f6:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80079fa:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80079fc:	687b      	ldr	r3, [r7, #4]
 80079fe:	681b      	ldr	r3, [r3, #0]
 8007a00:	4a20      	ldr	r2, [pc, #128]	@ (8007a84 <HAL_TIM_PWM_Start+0x1e0>)
 8007a02:	4293      	cmp	r3, r2
 8007a04:	d018      	beq.n	8007a38 <HAL_TIM_PWM_Start+0x194>
 8007a06:	687b      	ldr	r3, [r7, #4]
 8007a08:	681b      	ldr	r3, [r3, #0]
 8007a0a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007a0e:	d013      	beq.n	8007a38 <HAL_TIM_PWM_Start+0x194>
 8007a10:	687b      	ldr	r3, [r7, #4]
 8007a12:	681b      	ldr	r3, [r3, #0]
 8007a14:	4a20      	ldr	r2, [pc, #128]	@ (8007a98 <HAL_TIM_PWM_Start+0x1f4>)
 8007a16:	4293      	cmp	r3, r2
 8007a18:	d00e      	beq.n	8007a38 <HAL_TIM_PWM_Start+0x194>
 8007a1a:	687b      	ldr	r3, [r7, #4]
 8007a1c:	681b      	ldr	r3, [r3, #0]
 8007a1e:	4a1f      	ldr	r2, [pc, #124]	@ (8007a9c <HAL_TIM_PWM_Start+0x1f8>)
 8007a20:	4293      	cmp	r3, r2
 8007a22:	d009      	beq.n	8007a38 <HAL_TIM_PWM_Start+0x194>
 8007a24:	687b      	ldr	r3, [r7, #4]
 8007a26:	681b      	ldr	r3, [r3, #0]
 8007a28:	4a17      	ldr	r2, [pc, #92]	@ (8007a88 <HAL_TIM_PWM_Start+0x1e4>)
 8007a2a:	4293      	cmp	r3, r2
 8007a2c:	d004      	beq.n	8007a38 <HAL_TIM_PWM_Start+0x194>
 8007a2e:	687b      	ldr	r3, [r7, #4]
 8007a30:	681b      	ldr	r3, [r3, #0]
 8007a32:	4a16      	ldr	r2, [pc, #88]	@ (8007a8c <HAL_TIM_PWM_Start+0x1e8>)
 8007a34:	4293      	cmp	r3, r2
 8007a36:	d115      	bne.n	8007a64 <HAL_TIM_PWM_Start+0x1c0>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007a38:	687b      	ldr	r3, [r7, #4]
 8007a3a:	681b      	ldr	r3, [r3, #0]
 8007a3c:	689a      	ldr	r2, [r3, #8]
 8007a3e:	4b18      	ldr	r3, [pc, #96]	@ (8007aa0 <HAL_TIM_PWM_Start+0x1fc>)
 8007a40:	4013      	ands	r3, r2
 8007a42:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007a44:	68fb      	ldr	r3, [r7, #12]
 8007a46:	2b06      	cmp	r3, #6
 8007a48:	d015      	beq.n	8007a76 <HAL_TIM_PWM_Start+0x1d2>
 8007a4a:	68fb      	ldr	r3, [r7, #12]
 8007a4c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007a50:	d011      	beq.n	8007a76 <HAL_TIM_PWM_Start+0x1d2>
    {
      __HAL_TIM_ENABLE(htim);
 8007a52:	687b      	ldr	r3, [r7, #4]
 8007a54:	681b      	ldr	r3, [r3, #0]
 8007a56:	681a      	ldr	r2, [r3, #0]
 8007a58:	687b      	ldr	r3, [r7, #4]
 8007a5a:	681b      	ldr	r3, [r3, #0]
 8007a5c:	f042 0201 	orr.w	r2, r2, #1
 8007a60:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007a62:	e008      	b.n	8007a76 <HAL_TIM_PWM_Start+0x1d2>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8007a64:	687b      	ldr	r3, [r7, #4]
 8007a66:	681b      	ldr	r3, [r3, #0]
 8007a68:	681a      	ldr	r2, [r3, #0]
 8007a6a:	687b      	ldr	r3, [r7, #4]
 8007a6c:	681b      	ldr	r3, [r3, #0]
 8007a6e:	f042 0201 	orr.w	r2, r2, #1
 8007a72:	601a      	str	r2, [r3, #0]
 8007a74:	e000      	b.n	8007a78 <HAL_TIM_PWM_Start+0x1d4>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007a76:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8007a78:	2300      	movs	r3, #0
}
 8007a7a:	4618      	mov	r0, r3
 8007a7c:	3710      	adds	r7, #16
 8007a7e:	46bd      	mov	sp, r7
 8007a80:	bd80      	pop	{r7, pc}
 8007a82:	bf00      	nop
 8007a84:	40012c00 	.word	0x40012c00
 8007a88:	40013400 	.word	0x40013400
 8007a8c:	40014000 	.word	0x40014000
 8007a90:	40014400 	.word	0x40014400
 8007a94:	40014800 	.word	0x40014800
 8007a98:	40000400 	.word	0x40000400
 8007a9c:	40000800 	.word	0x40000800
 8007aa0:	00010007 	.word	0x00010007

08007aa4 <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8007aa4:	b580      	push	{r7, lr}
 8007aa6:	b082      	sub	sp, #8
 8007aa8:	af00      	add	r7, sp, #0
 8007aaa:	6078      	str	r0, [r7, #4]
 8007aac:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8007aae:	687b      	ldr	r3, [r7, #4]
 8007ab0:	681b      	ldr	r3, [r3, #0]
 8007ab2:	2200      	movs	r2, #0
 8007ab4:	6839      	ldr	r1, [r7, #0]
 8007ab6:	4618      	mov	r0, r3
 8007ab8:	f001 f83e 	bl	8008b38 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8007abc:	687b      	ldr	r3, [r7, #4]
 8007abe:	681b      	ldr	r3, [r3, #0]
 8007ac0:	4a3e      	ldr	r2, [pc, #248]	@ (8007bbc <HAL_TIM_PWM_Stop+0x118>)
 8007ac2:	4293      	cmp	r3, r2
 8007ac4:	d013      	beq.n	8007aee <HAL_TIM_PWM_Stop+0x4a>
 8007ac6:	687b      	ldr	r3, [r7, #4]
 8007ac8:	681b      	ldr	r3, [r3, #0]
 8007aca:	4a3d      	ldr	r2, [pc, #244]	@ (8007bc0 <HAL_TIM_PWM_Stop+0x11c>)
 8007acc:	4293      	cmp	r3, r2
 8007ace:	d00e      	beq.n	8007aee <HAL_TIM_PWM_Stop+0x4a>
 8007ad0:	687b      	ldr	r3, [r7, #4]
 8007ad2:	681b      	ldr	r3, [r3, #0]
 8007ad4:	4a3b      	ldr	r2, [pc, #236]	@ (8007bc4 <HAL_TIM_PWM_Stop+0x120>)
 8007ad6:	4293      	cmp	r3, r2
 8007ad8:	d009      	beq.n	8007aee <HAL_TIM_PWM_Stop+0x4a>
 8007ada:	687b      	ldr	r3, [r7, #4]
 8007adc:	681b      	ldr	r3, [r3, #0]
 8007ade:	4a3a      	ldr	r2, [pc, #232]	@ (8007bc8 <HAL_TIM_PWM_Stop+0x124>)
 8007ae0:	4293      	cmp	r3, r2
 8007ae2:	d004      	beq.n	8007aee <HAL_TIM_PWM_Stop+0x4a>
 8007ae4:	687b      	ldr	r3, [r7, #4]
 8007ae6:	681b      	ldr	r3, [r3, #0]
 8007ae8:	4a38      	ldr	r2, [pc, #224]	@ (8007bcc <HAL_TIM_PWM_Stop+0x128>)
 8007aea:	4293      	cmp	r3, r2
 8007aec:	d101      	bne.n	8007af2 <HAL_TIM_PWM_Stop+0x4e>
 8007aee:	2301      	movs	r3, #1
 8007af0:	e000      	b.n	8007af4 <HAL_TIM_PWM_Stop+0x50>
 8007af2:	2300      	movs	r3, #0
 8007af4:	2b00      	cmp	r3, #0
 8007af6:	d017      	beq.n	8007b28 <HAL_TIM_PWM_Stop+0x84>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 8007af8:	687b      	ldr	r3, [r7, #4]
 8007afa:	681b      	ldr	r3, [r3, #0]
 8007afc:	6a1a      	ldr	r2, [r3, #32]
 8007afe:	f241 1311 	movw	r3, #4369	@ 0x1111
 8007b02:	4013      	ands	r3, r2
 8007b04:	2b00      	cmp	r3, #0
 8007b06:	d10f      	bne.n	8007b28 <HAL_TIM_PWM_Stop+0x84>
 8007b08:	687b      	ldr	r3, [r7, #4]
 8007b0a:	681b      	ldr	r3, [r3, #0]
 8007b0c:	6a1a      	ldr	r2, [r3, #32]
 8007b0e:	f244 4344 	movw	r3, #17476	@ 0x4444
 8007b12:	4013      	ands	r3, r2
 8007b14:	2b00      	cmp	r3, #0
 8007b16:	d107      	bne.n	8007b28 <HAL_TIM_PWM_Stop+0x84>
 8007b18:	687b      	ldr	r3, [r7, #4]
 8007b1a:	681b      	ldr	r3, [r3, #0]
 8007b1c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8007b1e:	687b      	ldr	r3, [r7, #4]
 8007b20:	681b      	ldr	r3, [r3, #0]
 8007b22:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8007b26:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8007b28:	687b      	ldr	r3, [r7, #4]
 8007b2a:	681b      	ldr	r3, [r3, #0]
 8007b2c:	6a1a      	ldr	r2, [r3, #32]
 8007b2e:	f241 1311 	movw	r3, #4369	@ 0x1111
 8007b32:	4013      	ands	r3, r2
 8007b34:	2b00      	cmp	r3, #0
 8007b36:	d10f      	bne.n	8007b58 <HAL_TIM_PWM_Stop+0xb4>
 8007b38:	687b      	ldr	r3, [r7, #4]
 8007b3a:	681b      	ldr	r3, [r3, #0]
 8007b3c:	6a1a      	ldr	r2, [r3, #32]
 8007b3e:	f244 4344 	movw	r3, #17476	@ 0x4444
 8007b42:	4013      	ands	r3, r2
 8007b44:	2b00      	cmp	r3, #0
 8007b46:	d107      	bne.n	8007b58 <HAL_TIM_PWM_Stop+0xb4>
 8007b48:	687b      	ldr	r3, [r7, #4]
 8007b4a:	681b      	ldr	r3, [r3, #0]
 8007b4c:	681a      	ldr	r2, [r3, #0]
 8007b4e:	687b      	ldr	r3, [r7, #4]
 8007b50:	681b      	ldr	r3, [r3, #0]
 8007b52:	f022 0201 	bic.w	r2, r2, #1
 8007b56:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8007b58:	683b      	ldr	r3, [r7, #0]
 8007b5a:	2b00      	cmp	r3, #0
 8007b5c:	d104      	bne.n	8007b68 <HAL_TIM_PWM_Stop+0xc4>
 8007b5e:	687b      	ldr	r3, [r7, #4]
 8007b60:	2201      	movs	r2, #1
 8007b62:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8007b66:	e023      	b.n	8007bb0 <HAL_TIM_PWM_Stop+0x10c>
 8007b68:	683b      	ldr	r3, [r7, #0]
 8007b6a:	2b04      	cmp	r3, #4
 8007b6c:	d104      	bne.n	8007b78 <HAL_TIM_PWM_Stop+0xd4>
 8007b6e:	687b      	ldr	r3, [r7, #4]
 8007b70:	2201      	movs	r2, #1
 8007b72:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8007b76:	e01b      	b.n	8007bb0 <HAL_TIM_PWM_Stop+0x10c>
 8007b78:	683b      	ldr	r3, [r7, #0]
 8007b7a:	2b08      	cmp	r3, #8
 8007b7c:	d104      	bne.n	8007b88 <HAL_TIM_PWM_Stop+0xe4>
 8007b7e:	687b      	ldr	r3, [r7, #4]
 8007b80:	2201      	movs	r2, #1
 8007b82:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8007b86:	e013      	b.n	8007bb0 <HAL_TIM_PWM_Stop+0x10c>
 8007b88:	683b      	ldr	r3, [r7, #0]
 8007b8a:	2b0c      	cmp	r3, #12
 8007b8c:	d104      	bne.n	8007b98 <HAL_TIM_PWM_Stop+0xf4>
 8007b8e:	687b      	ldr	r3, [r7, #4]
 8007b90:	2201      	movs	r2, #1
 8007b92:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8007b96:	e00b      	b.n	8007bb0 <HAL_TIM_PWM_Stop+0x10c>
 8007b98:	683b      	ldr	r3, [r7, #0]
 8007b9a:	2b10      	cmp	r3, #16
 8007b9c:	d104      	bne.n	8007ba8 <HAL_TIM_PWM_Stop+0x104>
 8007b9e:	687b      	ldr	r3, [r7, #4]
 8007ba0:	2201      	movs	r2, #1
 8007ba2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8007ba6:	e003      	b.n	8007bb0 <HAL_TIM_PWM_Stop+0x10c>
 8007ba8:	687b      	ldr	r3, [r7, #4]
 8007baa:	2201      	movs	r2, #1
 8007bac:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Return function status */
  return HAL_OK;
 8007bb0:	2300      	movs	r3, #0
}
 8007bb2:	4618      	mov	r0, r3
 8007bb4:	3708      	adds	r7, #8
 8007bb6:	46bd      	mov	sp, r7
 8007bb8:	bd80      	pop	{r7, pc}
 8007bba:	bf00      	nop
 8007bbc:	40012c00 	.word	0x40012c00
 8007bc0:	40013400 	.word	0x40013400
 8007bc4:	40014000 	.word	0x40014000
 8007bc8:	40014400 	.word	0x40014400
 8007bcc:	40014800 	.word	0x40014800

08007bd0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8007bd0:	b580      	push	{r7, lr}
 8007bd2:	b084      	sub	sp, #16
 8007bd4:	af00      	add	r7, sp, #0
 8007bd6:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8007bd8:	687b      	ldr	r3, [r7, #4]
 8007bda:	681b      	ldr	r3, [r3, #0]
 8007bdc:	68db      	ldr	r3, [r3, #12]
 8007bde:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8007be0:	687b      	ldr	r3, [r7, #4]
 8007be2:	681b      	ldr	r3, [r3, #0]
 8007be4:	691b      	ldr	r3, [r3, #16]
 8007be6:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8007be8:	68bb      	ldr	r3, [r7, #8]
 8007bea:	f003 0302 	and.w	r3, r3, #2
 8007bee:	2b00      	cmp	r3, #0
 8007bf0:	d020      	beq.n	8007c34 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8007bf2:	68fb      	ldr	r3, [r7, #12]
 8007bf4:	f003 0302 	and.w	r3, r3, #2
 8007bf8:	2b00      	cmp	r3, #0
 8007bfa:	d01b      	beq.n	8007c34 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8007bfc:	687b      	ldr	r3, [r7, #4]
 8007bfe:	681b      	ldr	r3, [r3, #0]
 8007c00:	f06f 0202 	mvn.w	r2, #2
 8007c04:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8007c06:	687b      	ldr	r3, [r7, #4]
 8007c08:	2201      	movs	r2, #1
 8007c0a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8007c0c:	687b      	ldr	r3, [r7, #4]
 8007c0e:	681b      	ldr	r3, [r3, #0]
 8007c10:	699b      	ldr	r3, [r3, #24]
 8007c12:	f003 0303 	and.w	r3, r3, #3
 8007c16:	2b00      	cmp	r3, #0
 8007c18:	d003      	beq.n	8007c22 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8007c1a:	6878      	ldr	r0, [r7, #4]
 8007c1c:	f000 fb40 	bl	80082a0 <HAL_TIM_IC_CaptureCallback>
 8007c20:	e005      	b.n	8007c2e <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8007c22:	6878      	ldr	r0, [r7, #4]
 8007c24:	f000 fb32 	bl	800828c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007c28:	6878      	ldr	r0, [r7, #4]
 8007c2a:	f000 fb43 	bl	80082b4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007c2e:	687b      	ldr	r3, [r7, #4]
 8007c30:	2200      	movs	r2, #0
 8007c32:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8007c34:	68bb      	ldr	r3, [r7, #8]
 8007c36:	f003 0304 	and.w	r3, r3, #4
 8007c3a:	2b00      	cmp	r3, #0
 8007c3c:	d020      	beq.n	8007c80 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8007c3e:	68fb      	ldr	r3, [r7, #12]
 8007c40:	f003 0304 	and.w	r3, r3, #4
 8007c44:	2b00      	cmp	r3, #0
 8007c46:	d01b      	beq.n	8007c80 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8007c48:	687b      	ldr	r3, [r7, #4]
 8007c4a:	681b      	ldr	r3, [r3, #0]
 8007c4c:	f06f 0204 	mvn.w	r2, #4
 8007c50:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8007c52:	687b      	ldr	r3, [r7, #4]
 8007c54:	2202      	movs	r2, #2
 8007c56:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8007c58:	687b      	ldr	r3, [r7, #4]
 8007c5a:	681b      	ldr	r3, [r3, #0]
 8007c5c:	699b      	ldr	r3, [r3, #24]
 8007c5e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8007c62:	2b00      	cmp	r3, #0
 8007c64:	d003      	beq.n	8007c6e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007c66:	6878      	ldr	r0, [r7, #4]
 8007c68:	f000 fb1a 	bl	80082a0 <HAL_TIM_IC_CaptureCallback>
 8007c6c:	e005      	b.n	8007c7a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007c6e:	6878      	ldr	r0, [r7, #4]
 8007c70:	f000 fb0c 	bl	800828c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007c74:	6878      	ldr	r0, [r7, #4]
 8007c76:	f000 fb1d 	bl	80082b4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007c7a:	687b      	ldr	r3, [r7, #4]
 8007c7c:	2200      	movs	r2, #0
 8007c7e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8007c80:	68bb      	ldr	r3, [r7, #8]
 8007c82:	f003 0308 	and.w	r3, r3, #8
 8007c86:	2b00      	cmp	r3, #0
 8007c88:	d020      	beq.n	8007ccc <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8007c8a:	68fb      	ldr	r3, [r7, #12]
 8007c8c:	f003 0308 	and.w	r3, r3, #8
 8007c90:	2b00      	cmp	r3, #0
 8007c92:	d01b      	beq.n	8007ccc <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8007c94:	687b      	ldr	r3, [r7, #4]
 8007c96:	681b      	ldr	r3, [r3, #0]
 8007c98:	f06f 0208 	mvn.w	r2, #8
 8007c9c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8007c9e:	687b      	ldr	r3, [r7, #4]
 8007ca0:	2204      	movs	r2, #4
 8007ca2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8007ca4:	687b      	ldr	r3, [r7, #4]
 8007ca6:	681b      	ldr	r3, [r3, #0]
 8007ca8:	69db      	ldr	r3, [r3, #28]
 8007caa:	f003 0303 	and.w	r3, r3, #3
 8007cae:	2b00      	cmp	r3, #0
 8007cb0:	d003      	beq.n	8007cba <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007cb2:	6878      	ldr	r0, [r7, #4]
 8007cb4:	f000 faf4 	bl	80082a0 <HAL_TIM_IC_CaptureCallback>
 8007cb8:	e005      	b.n	8007cc6 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007cba:	6878      	ldr	r0, [r7, #4]
 8007cbc:	f000 fae6 	bl	800828c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007cc0:	6878      	ldr	r0, [r7, #4]
 8007cc2:	f000 faf7 	bl	80082b4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007cc6:	687b      	ldr	r3, [r7, #4]
 8007cc8:	2200      	movs	r2, #0
 8007cca:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8007ccc:	68bb      	ldr	r3, [r7, #8]
 8007cce:	f003 0310 	and.w	r3, r3, #16
 8007cd2:	2b00      	cmp	r3, #0
 8007cd4:	d020      	beq.n	8007d18 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8007cd6:	68fb      	ldr	r3, [r7, #12]
 8007cd8:	f003 0310 	and.w	r3, r3, #16
 8007cdc:	2b00      	cmp	r3, #0
 8007cde:	d01b      	beq.n	8007d18 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8007ce0:	687b      	ldr	r3, [r7, #4]
 8007ce2:	681b      	ldr	r3, [r3, #0]
 8007ce4:	f06f 0210 	mvn.w	r2, #16
 8007ce8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8007cea:	687b      	ldr	r3, [r7, #4]
 8007cec:	2208      	movs	r2, #8
 8007cee:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8007cf0:	687b      	ldr	r3, [r7, #4]
 8007cf2:	681b      	ldr	r3, [r3, #0]
 8007cf4:	69db      	ldr	r3, [r3, #28]
 8007cf6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8007cfa:	2b00      	cmp	r3, #0
 8007cfc:	d003      	beq.n	8007d06 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007cfe:	6878      	ldr	r0, [r7, #4]
 8007d00:	f000 face 	bl	80082a0 <HAL_TIM_IC_CaptureCallback>
 8007d04:	e005      	b.n	8007d12 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007d06:	6878      	ldr	r0, [r7, #4]
 8007d08:	f000 fac0 	bl	800828c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007d0c:	6878      	ldr	r0, [r7, #4]
 8007d0e:	f000 fad1 	bl	80082b4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007d12:	687b      	ldr	r3, [r7, #4]
 8007d14:	2200      	movs	r2, #0
 8007d16:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8007d18:	68bb      	ldr	r3, [r7, #8]
 8007d1a:	f003 0301 	and.w	r3, r3, #1
 8007d1e:	2b00      	cmp	r3, #0
 8007d20:	d00c      	beq.n	8007d3c <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8007d22:	68fb      	ldr	r3, [r7, #12]
 8007d24:	f003 0301 	and.w	r3, r3, #1
 8007d28:	2b00      	cmp	r3, #0
 8007d2a:	d007      	beq.n	8007d3c <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8007d2c:	687b      	ldr	r3, [r7, #4]
 8007d2e:	681b      	ldr	r3, [r3, #0]
 8007d30:	f06f 0201 	mvn.w	r2, #1
 8007d34:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8007d36:	6878      	ldr	r0, [r7, #4]
 8007d38:	f7f9 f8ea 	bl	8000f10 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8007d3c:	68bb      	ldr	r3, [r7, #8]
 8007d3e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007d42:	2b00      	cmp	r3, #0
 8007d44:	d104      	bne.n	8007d50 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 8007d46:	68bb      	ldr	r3, [r7, #8]
 8007d48:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8007d4c:	2b00      	cmp	r3, #0
 8007d4e:	d00c      	beq.n	8007d6a <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8007d50:	68fb      	ldr	r3, [r7, #12]
 8007d52:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007d56:	2b00      	cmp	r3, #0
 8007d58:	d007      	beq.n	8007d6a <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 8007d5a:	687b      	ldr	r3, [r7, #4]
 8007d5c:	681b      	ldr	r3, [r3, #0]
 8007d5e:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 8007d62:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8007d64:	6878      	ldr	r0, [r7, #4]
 8007d66:	f001 f937 	bl	8008fd8 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8007d6a:	68bb      	ldr	r3, [r7, #8]
 8007d6c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007d70:	2b00      	cmp	r3, #0
 8007d72:	d00c      	beq.n	8007d8e <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8007d74:	68fb      	ldr	r3, [r7, #12]
 8007d76:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007d7a:	2b00      	cmp	r3, #0
 8007d7c:	d007      	beq.n	8007d8e <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8007d7e:	687b      	ldr	r3, [r7, #4]
 8007d80:	681b      	ldr	r3, [r3, #0]
 8007d82:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 8007d86:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8007d88:	6878      	ldr	r0, [r7, #4]
 8007d8a:	f001 f92f 	bl	8008fec <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8007d8e:	68bb      	ldr	r3, [r7, #8]
 8007d90:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007d94:	2b00      	cmp	r3, #0
 8007d96:	d00c      	beq.n	8007db2 <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8007d98:	68fb      	ldr	r3, [r7, #12]
 8007d9a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007d9e:	2b00      	cmp	r3, #0
 8007da0:	d007      	beq.n	8007db2 <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8007da2:	687b      	ldr	r3, [r7, #4]
 8007da4:	681b      	ldr	r3, [r3, #0]
 8007da6:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8007daa:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8007dac:	6878      	ldr	r0, [r7, #4]
 8007dae:	f000 fa8b 	bl	80082c8 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8007db2:	68bb      	ldr	r3, [r7, #8]
 8007db4:	f003 0320 	and.w	r3, r3, #32
 8007db8:	2b00      	cmp	r3, #0
 8007dba:	d00c      	beq.n	8007dd6 <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8007dbc:	68fb      	ldr	r3, [r7, #12]
 8007dbe:	f003 0320 	and.w	r3, r3, #32
 8007dc2:	2b00      	cmp	r3, #0
 8007dc4:	d007      	beq.n	8007dd6 <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8007dc6:	687b      	ldr	r3, [r7, #4]
 8007dc8:	681b      	ldr	r3, [r3, #0]
 8007dca:	f06f 0220 	mvn.w	r2, #32
 8007dce:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8007dd0:	6878      	ldr	r0, [r7, #4]
 8007dd2:	f001 f8f7 	bl	8008fc4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Encoder index event */
  if ((itflag & (TIM_FLAG_IDX)) == (TIM_FLAG_IDX))
 8007dd6:	68bb      	ldr	r3, [r7, #8]
 8007dd8:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8007ddc:	2b00      	cmp	r3, #0
 8007dde:	d00c      	beq.n	8007dfa <HAL_TIM_IRQHandler+0x22a>
  {
    if ((itsource & (TIM_IT_IDX)) == (TIM_IT_IDX))
 8007de0:	68fb      	ldr	r3, [r7, #12]
 8007de2:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8007de6:	2b00      	cmp	r3, #0
 8007de8:	d007      	beq.n	8007dfa <HAL_TIM_IRQHandler+0x22a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IDX);
 8007dea:	687b      	ldr	r3, [r7, #4]
 8007dec:	681b      	ldr	r3, [r3, #0]
 8007dee:	f46f 1280 	mvn.w	r2, #1048576	@ 0x100000
 8007df2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->EncoderIndexCallback(htim);
#else
      HAL_TIMEx_EncoderIndexCallback(htim);
 8007df4:	6878      	ldr	r0, [r7, #4]
 8007df6:	f001 f903 	bl	8009000 <HAL_TIMEx_EncoderIndexCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Direction change event */
  if ((itflag & (TIM_FLAG_DIR)) == (TIM_FLAG_DIR))
 8007dfa:	68bb      	ldr	r3, [r7, #8]
 8007dfc:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8007e00:	2b00      	cmp	r3, #0
 8007e02:	d00c      	beq.n	8007e1e <HAL_TIM_IRQHandler+0x24e>
  {
    if ((itsource & (TIM_IT_DIR)) == (TIM_IT_DIR))
 8007e04:	68fb      	ldr	r3, [r7, #12]
 8007e06:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8007e0a:	2b00      	cmp	r3, #0
 8007e0c:	d007      	beq.n	8007e1e <HAL_TIM_IRQHandler+0x24e>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_DIR);
 8007e0e:	687b      	ldr	r3, [r7, #4]
 8007e10:	681b      	ldr	r3, [r3, #0]
 8007e12:	f46f 1200 	mvn.w	r2, #2097152	@ 0x200000
 8007e16:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->DirectionChangeCallback(htim);
#else
      HAL_TIMEx_DirectionChangeCallback(htim);
 8007e18:	6878      	ldr	r0, [r7, #4]
 8007e1a:	f001 f8fb 	bl	8009014 <HAL_TIMEx_DirectionChangeCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Index error event */
  if ((itflag & (TIM_FLAG_IERR)) == (TIM_FLAG_IERR))
 8007e1e:	68bb      	ldr	r3, [r7, #8]
 8007e20:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8007e24:	2b00      	cmp	r3, #0
 8007e26:	d00c      	beq.n	8007e42 <HAL_TIM_IRQHandler+0x272>
  {
    if ((itsource & (TIM_IT_IERR)) == (TIM_IT_IERR))
 8007e28:	68fb      	ldr	r3, [r7, #12]
 8007e2a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8007e2e:	2b00      	cmp	r3, #0
 8007e30:	d007      	beq.n	8007e42 <HAL_TIM_IRQHandler+0x272>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IERR);
 8007e32:	687b      	ldr	r3, [r7, #4]
 8007e34:	681b      	ldr	r3, [r3, #0]
 8007e36:	f46f 0280 	mvn.w	r2, #4194304	@ 0x400000
 8007e3a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->IndexErrorCallback(htim);
#else
      HAL_TIMEx_IndexErrorCallback(htim);
 8007e3c:	6878      	ldr	r0, [r7, #4]
 8007e3e:	f001 f8f3 	bl	8009028 <HAL_TIMEx_IndexErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Transition error event */
  if ((itflag & (TIM_FLAG_TERR)) == (TIM_FLAG_TERR))
 8007e42:	68bb      	ldr	r3, [r7, #8]
 8007e44:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8007e48:	2b00      	cmp	r3, #0
 8007e4a:	d00c      	beq.n	8007e66 <HAL_TIM_IRQHandler+0x296>
  {
    if ((itsource & (TIM_IT_TERR)) == (TIM_IT_TERR))
 8007e4c:	68fb      	ldr	r3, [r7, #12]
 8007e4e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8007e52:	2b00      	cmp	r3, #0
 8007e54:	d007      	beq.n	8007e66 <HAL_TIM_IRQHandler+0x296>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TERR);
 8007e56:	687b      	ldr	r3, [r7, #4]
 8007e58:	681b      	ldr	r3, [r3, #0]
 8007e5a:	f46f 0200 	mvn.w	r2, #8388608	@ 0x800000
 8007e5e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TransitionErrorCallback(htim);
#else
      HAL_TIMEx_TransitionErrorCallback(htim);
 8007e60:	6878      	ldr	r0, [r7, #4]
 8007e62:	f001 f8eb 	bl	800903c <HAL_TIMEx_TransitionErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8007e66:	bf00      	nop
 8007e68:	3710      	adds	r7, #16
 8007e6a:	46bd      	mov	sp, r7
 8007e6c:	bd80      	pop	{r7, pc}
	...

08007e70 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8007e70:	b580      	push	{r7, lr}
 8007e72:	b086      	sub	sp, #24
 8007e74:	af00      	add	r7, sp, #0
 8007e76:	60f8      	str	r0, [r7, #12]
 8007e78:	60b9      	str	r1, [r7, #8]
 8007e7a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8007e7c:	2300      	movs	r3, #0
 8007e7e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8007e80:	68fb      	ldr	r3, [r7, #12]
 8007e82:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8007e86:	2b01      	cmp	r3, #1
 8007e88:	d101      	bne.n	8007e8e <HAL_TIM_PWM_ConfigChannel+0x1e>
 8007e8a:	2302      	movs	r3, #2
 8007e8c:	e0ff      	b.n	800808e <HAL_TIM_PWM_ConfigChannel+0x21e>
 8007e8e:	68fb      	ldr	r3, [r7, #12]
 8007e90:	2201      	movs	r2, #1
 8007e92:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8007e96:	687b      	ldr	r3, [r7, #4]
 8007e98:	2b14      	cmp	r3, #20
 8007e9a:	f200 80f0 	bhi.w	800807e <HAL_TIM_PWM_ConfigChannel+0x20e>
 8007e9e:	a201      	add	r2, pc, #4	@ (adr r2, 8007ea4 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8007ea0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007ea4:	08007ef9 	.word	0x08007ef9
 8007ea8:	0800807f 	.word	0x0800807f
 8007eac:	0800807f 	.word	0x0800807f
 8007eb0:	0800807f 	.word	0x0800807f
 8007eb4:	08007f39 	.word	0x08007f39
 8007eb8:	0800807f 	.word	0x0800807f
 8007ebc:	0800807f 	.word	0x0800807f
 8007ec0:	0800807f 	.word	0x0800807f
 8007ec4:	08007f7b 	.word	0x08007f7b
 8007ec8:	0800807f 	.word	0x0800807f
 8007ecc:	0800807f 	.word	0x0800807f
 8007ed0:	0800807f 	.word	0x0800807f
 8007ed4:	08007fbb 	.word	0x08007fbb
 8007ed8:	0800807f 	.word	0x0800807f
 8007edc:	0800807f 	.word	0x0800807f
 8007ee0:	0800807f 	.word	0x0800807f
 8007ee4:	08007ffd 	.word	0x08007ffd
 8007ee8:	0800807f 	.word	0x0800807f
 8007eec:	0800807f 	.word	0x0800807f
 8007ef0:	0800807f 	.word	0x0800807f
 8007ef4:	0800803d 	.word	0x0800803d
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8007ef8:	68fb      	ldr	r3, [r7, #12]
 8007efa:	681b      	ldr	r3, [r3, #0]
 8007efc:	68b9      	ldr	r1, [r7, #8]
 8007efe:	4618      	mov	r0, r3
 8007f00:	f000 fa88 	bl	8008414 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8007f04:	68fb      	ldr	r3, [r7, #12]
 8007f06:	681b      	ldr	r3, [r3, #0]
 8007f08:	699a      	ldr	r2, [r3, #24]
 8007f0a:	68fb      	ldr	r3, [r7, #12]
 8007f0c:	681b      	ldr	r3, [r3, #0]
 8007f0e:	f042 0208 	orr.w	r2, r2, #8
 8007f12:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8007f14:	68fb      	ldr	r3, [r7, #12]
 8007f16:	681b      	ldr	r3, [r3, #0]
 8007f18:	699a      	ldr	r2, [r3, #24]
 8007f1a:	68fb      	ldr	r3, [r7, #12]
 8007f1c:	681b      	ldr	r3, [r3, #0]
 8007f1e:	f022 0204 	bic.w	r2, r2, #4
 8007f22:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8007f24:	68fb      	ldr	r3, [r7, #12]
 8007f26:	681b      	ldr	r3, [r3, #0]
 8007f28:	6999      	ldr	r1, [r3, #24]
 8007f2a:	68bb      	ldr	r3, [r7, #8]
 8007f2c:	691a      	ldr	r2, [r3, #16]
 8007f2e:	68fb      	ldr	r3, [r7, #12]
 8007f30:	681b      	ldr	r3, [r3, #0]
 8007f32:	430a      	orrs	r2, r1
 8007f34:	619a      	str	r2, [r3, #24]
      break;
 8007f36:	e0a5      	b.n	8008084 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8007f38:	68fb      	ldr	r3, [r7, #12]
 8007f3a:	681b      	ldr	r3, [r3, #0]
 8007f3c:	68b9      	ldr	r1, [r7, #8]
 8007f3e:	4618      	mov	r0, r3
 8007f40:	f000 faf8 	bl	8008534 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8007f44:	68fb      	ldr	r3, [r7, #12]
 8007f46:	681b      	ldr	r3, [r3, #0]
 8007f48:	699a      	ldr	r2, [r3, #24]
 8007f4a:	68fb      	ldr	r3, [r7, #12]
 8007f4c:	681b      	ldr	r3, [r3, #0]
 8007f4e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8007f52:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8007f54:	68fb      	ldr	r3, [r7, #12]
 8007f56:	681b      	ldr	r3, [r3, #0]
 8007f58:	699a      	ldr	r2, [r3, #24]
 8007f5a:	68fb      	ldr	r3, [r7, #12]
 8007f5c:	681b      	ldr	r3, [r3, #0]
 8007f5e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8007f62:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8007f64:	68fb      	ldr	r3, [r7, #12]
 8007f66:	681b      	ldr	r3, [r3, #0]
 8007f68:	6999      	ldr	r1, [r3, #24]
 8007f6a:	68bb      	ldr	r3, [r7, #8]
 8007f6c:	691b      	ldr	r3, [r3, #16]
 8007f6e:	021a      	lsls	r2, r3, #8
 8007f70:	68fb      	ldr	r3, [r7, #12]
 8007f72:	681b      	ldr	r3, [r3, #0]
 8007f74:	430a      	orrs	r2, r1
 8007f76:	619a      	str	r2, [r3, #24]
      break;
 8007f78:	e084      	b.n	8008084 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8007f7a:	68fb      	ldr	r3, [r7, #12]
 8007f7c:	681b      	ldr	r3, [r3, #0]
 8007f7e:	68b9      	ldr	r1, [r7, #8]
 8007f80:	4618      	mov	r0, r3
 8007f82:	f000 fb61 	bl	8008648 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8007f86:	68fb      	ldr	r3, [r7, #12]
 8007f88:	681b      	ldr	r3, [r3, #0]
 8007f8a:	69da      	ldr	r2, [r3, #28]
 8007f8c:	68fb      	ldr	r3, [r7, #12]
 8007f8e:	681b      	ldr	r3, [r3, #0]
 8007f90:	f042 0208 	orr.w	r2, r2, #8
 8007f94:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8007f96:	68fb      	ldr	r3, [r7, #12]
 8007f98:	681b      	ldr	r3, [r3, #0]
 8007f9a:	69da      	ldr	r2, [r3, #28]
 8007f9c:	68fb      	ldr	r3, [r7, #12]
 8007f9e:	681b      	ldr	r3, [r3, #0]
 8007fa0:	f022 0204 	bic.w	r2, r2, #4
 8007fa4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8007fa6:	68fb      	ldr	r3, [r7, #12]
 8007fa8:	681b      	ldr	r3, [r3, #0]
 8007faa:	69d9      	ldr	r1, [r3, #28]
 8007fac:	68bb      	ldr	r3, [r7, #8]
 8007fae:	691a      	ldr	r2, [r3, #16]
 8007fb0:	68fb      	ldr	r3, [r7, #12]
 8007fb2:	681b      	ldr	r3, [r3, #0]
 8007fb4:	430a      	orrs	r2, r1
 8007fb6:	61da      	str	r2, [r3, #28]
      break;
 8007fb8:	e064      	b.n	8008084 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8007fba:	68fb      	ldr	r3, [r7, #12]
 8007fbc:	681b      	ldr	r3, [r3, #0]
 8007fbe:	68b9      	ldr	r1, [r7, #8]
 8007fc0:	4618      	mov	r0, r3
 8007fc2:	f000 fbc9 	bl	8008758 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8007fc6:	68fb      	ldr	r3, [r7, #12]
 8007fc8:	681b      	ldr	r3, [r3, #0]
 8007fca:	69da      	ldr	r2, [r3, #28]
 8007fcc:	68fb      	ldr	r3, [r7, #12]
 8007fce:	681b      	ldr	r3, [r3, #0]
 8007fd0:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8007fd4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8007fd6:	68fb      	ldr	r3, [r7, #12]
 8007fd8:	681b      	ldr	r3, [r3, #0]
 8007fda:	69da      	ldr	r2, [r3, #28]
 8007fdc:	68fb      	ldr	r3, [r7, #12]
 8007fde:	681b      	ldr	r3, [r3, #0]
 8007fe0:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8007fe4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8007fe6:	68fb      	ldr	r3, [r7, #12]
 8007fe8:	681b      	ldr	r3, [r3, #0]
 8007fea:	69d9      	ldr	r1, [r3, #28]
 8007fec:	68bb      	ldr	r3, [r7, #8]
 8007fee:	691b      	ldr	r3, [r3, #16]
 8007ff0:	021a      	lsls	r2, r3, #8
 8007ff2:	68fb      	ldr	r3, [r7, #12]
 8007ff4:	681b      	ldr	r3, [r3, #0]
 8007ff6:	430a      	orrs	r2, r1
 8007ff8:	61da      	str	r2, [r3, #28]
      break;
 8007ffa:	e043      	b.n	8008084 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8007ffc:	68fb      	ldr	r3, [r7, #12]
 8007ffe:	681b      	ldr	r3, [r3, #0]
 8008000:	68b9      	ldr	r1, [r7, #8]
 8008002:	4618      	mov	r0, r3
 8008004:	f000 fc32 	bl	800886c <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8008008:	68fb      	ldr	r3, [r7, #12]
 800800a:	681b      	ldr	r3, [r3, #0]
 800800c:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800800e:	68fb      	ldr	r3, [r7, #12]
 8008010:	681b      	ldr	r3, [r3, #0]
 8008012:	f042 0208 	orr.w	r2, r2, #8
 8008016:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8008018:	68fb      	ldr	r3, [r7, #12]
 800801a:	681b      	ldr	r3, [r3, #0]
 800801c:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800801e:	68fb      	ldr	r3, [r7, #12]
 8008020:	681b      	ldr	r3, [r3, #0]
 8008022:	f022 0204 	bic.w	r2, r2, #4
 8008026:	651a      	str	r2, [r3, #80]	@ 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8008028:	68fb      	ldr	r3, [r7, #12]
 800802a:	681b      	ldr	r3, [r3, #0]
 800802c:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 800802e:	68bb      	ldr	r3, [r7, #8]
 8008030:	691a      	ldr	r2, [r3, #16]
 8008032:	68fb      	ldr	r3, [r7, #12]
 8008034:	681b      	ldr	r3, [r3, #0]
 8008036:	430a      	orrs	r2, r1
 8008038:	651a      	str	r2, [r3, #80]	@ 0x50
      break;
 800803a:	e023      	b.n	8008084 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800803c:	68fb      	ldr	r3, [r7, #12]
 800803e:	681b      	ldr	r3, [r3, #0]
 8008040:	68b9      	ldr	r1, [r7, #8]
 8008042:	4618      	mov	r0, r3
 8008044:	f000 fc76 	bl	8008934 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8008048:	68fb      	ldr	r3, [r7, #12]
 800804a:	681b      	ldr	r3, [r3, #0]
 800804c:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800804e:	68fb      	ldr	r3, [r7, #12]
 8008050:	681b      	ldr	r3, [r3, #0]
 8008052:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8008056:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8008058:	68fb      	ldr	r3, [r7, #12]
 800805a:	681b      	ldr	r3, [r3, #0]
 800805c:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800805e:	68fb      	ldr	r3, [r7, #12]
 8008060:	681b      	ldr	r3, [r3, #0]
 8008062:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8008066:	651a      	str	r2, [r3, #80]	@ 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8008068:	68fb      	ldr	r3, [r7, #12]
 800806a:	681b      	ldr	r3, [r3, #0]
 800806c:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 800806e:	68bb      	ldr	r3, [r7, #8]
 8008070:	691b      	ldr	r3, [r3, #16]
 8008072:	021a      	lsls	r2, r3, #8
 8008074:	68fb      	ldr	r3, [r7, #12]
 8008076:	681b      	ldr	r3, [r3, #0]
 8008078:	430a      	orrs	r2, r1
 800807a:	651a      	str	r2, [r3, #80]	@ 0x50
      break;
 800807c:	e002      	b.n	8008084 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 800807e:	2301      	movs	r3, #1
 8008080:	75fb      	strb	r3, [r7, #23]
      break;
 8008082:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8008084:	68fb      	ldr	r3, [r7, #12]
 8008086:	2200      	movs	r2, #0
 8008088:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800808c:	7dfb      	ldrb	r3, [r7, #23]
}
 800808e:	4618      	mov	r0, r3
 8008090:	3718      	adds	r7, #24
 8008092:	46bd      	mov	sp, r7
 8008094:	bd80      	pop	{r7, pc}
 8008096:	bf00      	nop

08008098 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8008098:	b580      	push	{r7, lr}
 800809a:	b084      	sub	sp, #16
 800809c:	af00      	add	r7, sp, #0
 800809e:	6078      	str	r0, [r7, #4]
 80080a0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80080a2:	2300      	movs	r3, #0
 80080a4:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80080a6:	687b      	ldr	r3, [r7, #4]
 80080a8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80080ac:	2b01      	cmp	r3, #1
 80080ae:	d101      	bne.n	80080b4 <HAL_TIM_ConfigClockSource+0x1c>
 80080b0:	2302      	movs	r3, #2
 80080b2:	e0de      	b.n	8008272 <HAL_TIM_ConfigClockSource+0x1da>
 80080b4:	687b      	ldr	r3, [r7, #4]
 80080b6:	2201      	movs	r2, #1
 80080b8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80080bc:	687b      	ldr	r3, [r7, #4]
 80080be:	2202      	movs	r2, #2
 80080c0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80080c4:	687b      	ldr	r3, [r7, #4]
 80080c6:	681b      	ldr	r3, [r3, #0]
 80080c8:	689b      	ldr	r3, [r3, #8]
 80080ca:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80080cc:	68bb      	ldr	r3, [r7, #8]
 80080ce:	f423 1344 	bic.w	r3, r3, #3211264	@ 0x310000
 80080d2:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 80080d6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80080d8:	68bb      	ldr	r3, [r7, #8]
 80080da:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80080de:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80080e0:	687b      	ldr	r3, [r7, #4]
 80080e2:	681b      	ldr	r3, [r3, #0]
 80080e4:	68ba      	ldr	r2, [r7, #8]
 80080e6:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80080e8:	683b      	ldr	r3, [r7, #0]
 80080ea:	681b      	ldr	r3, [r3, #0]
 80080ec:	4a63      	ldr	r2, [pc, #396]	@ (800827c <HAL_TIM_ConfigClockSource+0x1e4>)
 80080ee:	4293      	cmp	r3, r2
 80080f0:	f000 80a9 	beq.w	8008246 <HAL_TIM_ConfigClockSource+0x1ae>
 80080f4:	4a61      	ldr	r2, [pc, #388]	@ (800827c <HAL_TIM_ConfigClockSource+0x1e4>)
 80080f6:	4293      	cmp	r3, r2
 80080f8:	f200 80ae 	bhi.w	8008258 <HAL_TIM_ConfigClockSource+0x1c0>
 80080fc:	4a60      	ldr	r2, [pc, #384]	@ (8008280 <HAL_TIM_ConfigClockSource+0x1e8>)
 80080fe:	4293      	cmp	r3, r2
 8008100:	f000 80a1 	beq.w	8008246 <HAL_TIM_ConfigClockSource+0x1ae>
 8008104:	4a5e      	ldr	r2, [pc, #376]	@ (8008280 <HAL_TIM_ConfigClockSource+0x1e8>)
 8008106:	4293      	cmp	r3, r2
 8008108:	f200 80a6 	bhi.w	8008258 <HAL_TIM_ConfigClockSource+0x1c0>
 800810c:	4a5d      	ldr	r2, [pc, #372]	@ (8008284 <HAL_TIM_ConfigClockSource+0x1ec>)
 800810e:	4293      	cmp	r3, r2
 8008110:	f000 8099 	beq.w	8008246 <HAL_TIM_ConfigClockSource+0x1ae>
 8008114:	4a5b      	ldr	r2, [pc, #364]	@ (8008284 <HAL_TIM_ConfigClockSource+0x1ec>)
 8008116:	4293      	cmp	r3, r2
 8008118:	f200 809e 	bhi.w	8008258 <HAL_TIM_ConfigClockSource+0x1c0>
 800811c:	4a5a      	ldr	r2, [pc, #360]	@ (8008288 <HAL_TIM_ConfigClockSource+0x1f0>)
 800811e:	4293      	cmp	r3, r2
 8008120:	f000 8091 	beq.w	8008246 <HAL_TIM_ConfigClockSource+0x1ae>
 8008124:	4a58      	ldr	r2, [pc, #352]	@ (8008288 <HAL_TIM_ConfigClockSource+0x1f0>)
 8008126:	4293      	cmp	r3, r2
 8008128:	f200 8096 	bhi.w	8008258 <HAL_TIM_ConfigClockSource+0x1c0>
 800812c:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 8008130:	f000 8089 	beq.w	8008246 <HAL_TIM_ConfigClockSource+0x1ae>
 8008134:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 8008138:	f200 808e 	bhi.w	8008258 <HAL_TIM_ConfigClockSource+0x1c0>
 800813c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8008140:	d03e      	beq.n	80081c0 <HAL_TIM_ConfigClockSource+0x128>
 8008142:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8008146:	f200 8087 	bhi.w	8008258 <HAL_TIM_ConfigClockSource+0x1c0>
 800814a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800814e:	f000 8086 	beq.w	800825e <HAL_TIM_ConfigClockSource+0x1c6>
 8008152:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8008156:	d87f      	bhi.n	8008258 <HAL_TIM_ConfigClockSource+0x1c0>
 8008158:	2b70      	cmp	r3, #112	@ 0x70
 800815a:	d01a      	beq.n	8008192 <HAL_TIM_ConfigClockSource+0xfa>
 800815c:	2b70      	cmp	r3, #112	@ 0x70
 800815e:	d87b      	bhi.n	8008258 <HAL_TIM_ConfigClockSource+0x1c0>
 8008160:	2b60      	cmp	r3, #96	@ 0x60
 8008162:	d050      	beq.n	8008206 <HAL_TIM_ConfigClockSource+0x16e>
 8008164:	2b60      	cmp	r3, #96	@ 0x60
 8008166:	d877      	bhi.n	8008258 <HAL_TIM_ConfigClockSource+0x1c0>
 8008168:	2b50      	cmp	r3, #80	@ 0x50
 800816a:	d03c      	beq.n	80081e6 <HAL_TIM_ConfigClockSource+0x14e>
 800816c:	2b50      	cmp	r3, #80	@ 0x50
 800816e:	d873      	bhi.n	8008258 <HAL_TIM_ConfigClockSource+0x1c0>
 8008170:	2b40      	cmp	r3, #64	@ 0x40
 8008172:	d058      	beq.n	8008226 <HAL_TIM_ConfigClockSource+0x18e>
 8008174:	2b40      	cmp	r3, #64	@ 0x40
 8008176:	d86f      	bhi.n	8008258 <HAL_TIM_ConfigClockSource+0x1c0>
 8008178:	2b30      	cmp	r3, #48	@ 0x30
 800817a:	d064      	beq.n	8008246 <HAL_TIM_ConfigClockSource+0x1ae>
 800817c:	2b30      	cmp	r3, #48	@ 0x30
 800817e:	d86b      	bhi.n	8008258 <HAL_TIM_ConfigClockSource+0x1c0>
 8008180:	2b20      	cmp	r3, #32
 8008182:	d060      	beq.n	8008246 <HAL_TIM_ConfigClockSource+0x1ae>
 8008184:	2b20      	cmp	r3, #32
 8008186:	d867      	bhi.n	8008258 <HAL_TIM_ConfigClockSource+0x1c0>
 8008188:	2b00      	cmp	r3, #0
 800818a:	d05c      	beq.n	8008246 <HAL_TIM_ConfigClockSource+0x1ae>
 800818c:	2b10      	cmp	r3, #16
 800818e:	d05a      	beq.n	8008246 <HAL_TIM_ConfigClockSource+0x1ae>
 8008190:	e062      	b.n	8008258 <HAL_TIM_ConfigClockSource+0x1c0>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8008192:	687b      	ldr	r3, [r7, #4]
 8008194:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8008196:	683b      	ldr	r3, [r7, #0]
 8008198:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800819a:	683b      	ldr	r3, [r7, #0]
 800819c:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800819e:	683b      	ldr	r3, [r7, #0]
 80081a0:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80081a2:	f000 fca9 	bl	8008af8 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80081a6:	687b      	ldr	r3, [r7, #4]
 80081a8:	681b      	ldr	r3, [r3, #0]
 80081aa:	689b      	ldr	r3, [r3, #8]
 80081ac:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80081ae:	68bb      	ldr	r3, [r7, #8]
 80081b0:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 80081b4:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80081b6:	687b      	ldr	r3, [r7, #4]
 80081b8:	681b      	ldr	r3, [r3, #0]
 80081ba:	68ba      	ldr	r2, [r7, #8]
 80081bc:	609a      	str	r2, [r3, #8]
      break;
 80081be:	e04f      	b.n	8008260 <HAL_TIM_ConfigClockSource+0x1c8>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80081c0:	687b      	ldr	r3, [r7, #4]
 80081c2:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80081c4:	683b      	ldr	r3, [r7, #0]
 80081c6:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80081c8:	683b      	ldr	r3, [r7, #0]
 80081ca:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80081cc:	683b      	ldr	r3, [r7, #0]
 80081ce:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80081d0:	f000 fc92 	bl	8008af8 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80081d4:	687b      	ldr	r3, [r7, #4]
 80081d6:	681b      	ldr	r3, [r3, #0]
 80081d8:	689a      	ldr	r2, [r3, #8]
 80081da:	687b      	ldr	r3, [r7, #4]
 80081dc:	681b      	ldr	r3, [r3, #0]
 80081de:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80081e2:	609a      	str	r2, [r3, #8]
      break;
 80081e4:	e03c      	b.n	8008260 <HAL_TIM_ConfigClockSource+0x1c8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80081e6:	687b      	ldr	r3, [r7, #4]
 80081e8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80081ea:	683b      	ldr	r3, [r7, #0]
 80081ec:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80081ee:	683b      	ldr	r3, [r7, #0]
 80081f0:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80081f2:	461a      	mov	r2, r3
 80081f4:	f000 fc04 	bl	8008a00 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80081f8:	687b      	ldr	r3, [r7, #4]
 80081fa:	681b      	ldr	r3, [r3, #0]
 80081fc:	2150      	movs	r1, #80	@ 0x50
 80081fe:	4618      	mov	r0, r3
 8008200:	f000 fc5d 	bl	8008abe <TIM_ITRx_SetConfig>
      break;
 8008204:	e02c      	b.n	8008260 <HAL_TIM_ConfigClockSource+0x1c8>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8008206:	687b      	ldr	r3, [r7, #4]
 8008208:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800820a:	683b      	ldr	r3, [r7, #0]
 800820c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800820e:	683b      	ldr	r3, [r7, #0]
 8008210:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8008212:	461a      	mov	r2, r3
 8008214:	f000 fc23 	bl	8008a5e <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8008218:	687b      	ldr	r3, [r7, #4]
 800821a:	681b      	ldr	r3, [r3, #0]
 800821c:	2160      	movs	r1, #96	@ 0x60
 800821e:	4618      	mov	r0, r3
 8008220:	f000 fc4d 	bl	8008abe <TIM_ITRx_SetConfig>
      break;
 8008224:	e01c      	b.n	8008260 <HAL_TIM_ConfigClockSource+0x1c8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8008226:	687b      	ldr	r3, [r7, #4]
 8008228:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800822a:	683b      	ldr	r3, [r7, #0]
 800822c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800822e:	683b      	ldr	r3, [r7, #0]
 8008230:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8008232:	461a      	mov	r2, r3
 8008234:	f000 fbe4 	bl	8008a00 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8008238:	687b      	ldr	r3, [r7, #4]
 800823a:	681b      	ldr	r3, [r3, #0]
 800823c:	2140      	movs	r1, #64	@ 0x40
 800823e:	4618      	mov	r0, r3
 8008240:	f000 fc3d 	bl	8008abe <TIM_ITRx_SetConfig>
      break;
 8008244:	e00c      	b.n	8008260 <HAL_TIM_ConfigClockSource+0x1c8>
    case TIM_CLOCKSOURCE_ITR11:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_INSTANCE((htim->Instance), sClockSourceConfig->ClockSource));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8008246:	687b      	ldr	r3, [r7, #4]
 8008248:	681a      	ldr	r2, [r3, #0]
 800824a:	683b      	ldr	r3, [r7, #0]
 800824c:	681b      	ldr	r3, [r3, #0]
 800824e:	4619      	mov	r1, r3
 8008250:	4610      	mov	r0, r2
 8008252:	f000 fc34 	bl	8008abe <TIM_ITRx_SetConfig>
      break;
 8008256:	e003      	b.n	8008260 <HAL_TIM_ConfigClockSource+0x1c8>
    }

    default:
      status = HAL_ERROR;
 8008258:	2301      	movs	r3, #1
 800825a:	73fb      	strb	r3, [r7, #15]
      break;
 800825c:	e000      	b.n	8008260 <HAL_TIM_ConfigClockSource+0x1c8>
      break;
 800825e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8008260:	687b      	ldr	r3, [r7, #4]
 8008262:	2201      	movs	r2, #1
 8008264:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8008268:	687b      	ldr	r3, [r7, #4]
 800826a:	2200      	movs	r2, #0
 800826c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8008270:	7bfb      	ldrb	r3, [r7, #15]
}
 8008272:	4618      	mov	r0, r3
 8008274:	3710      	adds	r7, #16
 8008276:	46bd      	mov	sp, r7
 8008278:	bd80      	pop	{r7, pc}
 800827a:	bf00      	nop
 800827c:	00100070 	.word	0x00100070
 8008280:	00100040 	.word	0x00100040
 8008284:	00100030 	.word	0x00100030
 8008288:	00100020 	.word	0x00100020

0800828c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800828c:	b480      	push	{r7}
 800828e:	b083      	sub	sp, #12
 8008290:	af00      	add	r7, sp, #0
 8008292:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8008294:	bf00      	nop
 8008296:	370c      	adds	r7, #12
 8008298:	46bd      	mov	sp, r7
 800829a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800829e:	4770      	bx	lr

080082a0 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80082a0:	b480      	push	{r7}
 80082a2:	b083      	sub	sp, #12
 80082a4:	af00      	add	r7, sp, #0
 80082a6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80082a8:	bf00      	nop
 80082aa:	370c      	adds	r7, #12
 80082ac:	46bd      	mov	sp, r7
 80082ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082b2:	4770      	bx	lr

080082b4 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80082b4:	b480      	push	{r7}
 80082b6:	b083      	sub	sp, #12
 80082b8:	af00      	add	r7, sp, #0
 80082ba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80082bc:	bf00      	nop
 80082be:	370c      	adds	r7, #12
 80082c0:	46bd      	mov	sp, r7
 80082c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082c6:	4770      	bx	lr

080082c8 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80082c8:	b480      	push	{r7}
 80082ca:	b083      	sub	sp, #12
 80082cc:	af00      	add	r7, sp, #0
 80082ce:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80082d0:	bf00      	nop
 80082d2:	370c      	adds	r7, #12
 80082d4:	46bd      	mov	sp, r7
 80082d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082da:	4770      	bx	lr

080082dc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80082dc:	b480      	push	{r7}
 80082de:	b085      	sub	sp, #20
 80082e0:	af00      	add	r7, sp, #0
 80082e2:	6078      	str	r0, [r7, #4]
 80082e4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80082e6:	687b      	ldr	r3, [r7, #4]
 80082e8:	681b      	ldr	r3, [r3, #0]
 80082ea:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80082ec:	687b      	ldr	r3, [r7, #4]
 80082ee:	4a42      	ldr	r2, [pc, #264]	@ (80083f8 <TIM_Base_SetConfig+0x11c>)
 80082f0:	4293      	cmp	r3, r2
 80082f2:	d00f      	beq.n	8008314 <TIM_Base_SetConfig+0x38>
 80082f4:	687b      	ldr	r3, [r7, #4]
 80082f6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80082fa:	d00b      	beq.n	8008314 <TIM_Base_SetConfig+0x38>
 80082fc:	687b      	ldr	r3, [r7, #4]
 80082fe:	4a3f      	ldr	r2, [pc, #252]	@ (80083fc <TIM_Base_SetConfig+0x120>)
 8008300:	4293      	cmp	r3, r2
 8008302:	d007      	beq.n	8008314 <TIM_Base_SetConfig+0x38>
 8008304:	687b      	ldr	r3, [r7, #4]
 8008306:	4a3e      	ldr	r2, [pc, #248]	@ (8008400 <TIM_Base_SetConfig+0x124>)
 8008308:	4293      	cmp	r3, r2
 800830a:	d003      	beq.n	8008314 <TIM_Base_SetConfig+0x38>
 800830c:	687b      	ldr	r3, [r7, #4]
 800830e:	4a3d      	ldr	r2, [pc, #244]	@ (8008404 <TIM_Base_SetConfig+0x128>)
 8008310:	4293      	cmp	r3, r2
 8008312:	d108      	bne.n	8008326 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8008314:	68fb      	ldr	r3, [r7, #12]
 8008316:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800831a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800831c:	683b      	ldr	r3, [r7, #0]
 800831e:	685b      	ldr	r3, [r3, #4]
 8008320:	68fa      	ldr	r2, [r7, #12]
 8008322:	4313      	orrs	r3, r2
 8008324:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8008326:	687b      	ldr	r3, [r7, #4]
 8008328:	4a33      	ldr	r2, [pc, #204]	@ (80083f8 <TIM_Base_SetConfig+0x11c>)
 800832a:	4293      	cmp	r3, r2
 800832c:	d01b      	beq.n	8008366 <TIM_Base_SetConfig+0x8a>
 800832e:	687b      	ldr	r3, [r7, #4]
 8008330:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008334:	d017      	beq.n	8008366 <TIM_Base_SetConfig+0x8a>
 8008336:	687b      	ldr	r3, [r7, #4]
 8008338:	4a30      	ldr	r2, [pc, #192]	@ (80083fc <TIM_Base_SetConfig+0x120>)
 800833a:	4293      	cmp	r3, r2
 800833c:	d013      	beq.n	8008366 <TIM_Base_SetConfig+0x8a>
 800833e:	687b      	ldr	r3, [r7, #4]
 8008340:	4a2f      	ldr	r2, [pc, #188]	@ (8008400 <TIM_Base_SetConfig+0x124>)
 8008342:	4293      	cmp	r3, r2
 8008344:	d00f      	beq.n	8008366 <TIM_Base_SetConfig+0x8a>
 8008346:	687b      	ldr	r3, [r7, #4]
 8008348:	4a2e      	ldr	r2, [pc, #184]	@ (8008404 <TIM_Base_SetConfig+0x128>)
 800834a:	4293      	cmp	r3, r2
 800834c:	d00b      	beq.n	8008366 <TIM_Base_SetConfig+0x8a>
 800834e:	687b      	ldr	r3, [r7, #4]
 8008350:	4a2d      	ldr	r2, [pc, #180]	@ (8008408 <TIM_Base_SetConfig+0x12c>)
 8008352:	4293      	cmp	r3, r2
 8008354:	d007      	beq.n	8008366 <TIM_Base_SetConfig+0x8a>
 8008356:	687b      	ldr	r3, [r7, #4]
 8008358:	4a2c      	ldr	r2, [pc, #176]	@ (800840c <TIM_Base_SetConfig+0x130>)
 800835a:	4293      	cmp	r3, r2
 800835c:	d003      	beq.n	8008366 <TIM_Base_SetConfig+0x8a>
 800835e:	687b      	ldr	r3, [r7, #4]
 8008360:	4a2b      	ldr	r2, [pc, #172]	@ (8008410 <TIM_Base_SetConfig+0x134>)
 8008362:	4293      	cmp	r3, r2
 8008364:	d108      	bne.n	8008378 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8008366:	68fb      	ldr	r3, [r7, #12]
 8008368:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800836c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800836e:	683b      	ldr	r3, [r7, #0]
 8008370:	68db      	ldr	r3, [r3, #12]
 8008372:	68fa      	ldr	r2, [r7, #12]
 8008374:	4313      	orrs	r3, r2
 8008376:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8008378:	68fb      	ldr	r3, [r7, #12]
 800837a:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800837e:	683b      	ldr	r3, [r7, #0]
 8008380:	695b      	ldr	r3, [r3, #20]
 8008382:	4313      	orrs	r3, r2
 8008384:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8008386:	687b      	ldr	r3, [r7, #4]
 8008388:	68fa      	ldr	r2, [r7, #12]
 800838a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800838c:	683b      	ldr	r3, [r7, #0]
 800838e:	689a      	ldr	r2, [r3, #8]
 8008390:	687b      	ldr	r3, [r7, #4]
 8008392:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8008394:	683b      	ldr	r3, [r7, #0]
 8008396:	681a      	ldr	r2, [r3, #0]
 8008398:	687b      	ldr	r3, [r7, #4]
 800839a:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800839c:	687b      	ldr	r3, [r7, #4]
 800839e:	4a16      	ldr	r2, [pc, #88]	@ (80083f8 <TIM_Base_SetConfig+0x11c>)
 80083a0:	4293      	cmp	r3, r2
 80083a2:	d00f      	beq.n	80083c4 <TIM_Base_SetConfig+0xe8>
 80083a4:	687b      	ldr	r3, [r7, #4]
 80083a6:	4a17      	ldr	r2, [pc, #92]	@ (8008404 <TIM_Base_SetConfig+0x128>)
 80083a8:	4293      	cmp	r3, r2
 80083aa:	d00b      	beq.n	80083c4 <TIM_Base_SetConfig+0xe8>
 80083ac:	687b      	ldr	r3, [r7, #4]
 80083ae:	4a16      	ldr	r2, [pc, #88]	@ (8008408 <TIM_Base_SetConfig+0x12c>)
 80083b0:	4293      	cmp	r3, r2
 80083b2:	d007      	beq.n	80083c4 <TIM_Base_SetConfig+0xe8>
 80083b4:	687b      	ldr	r3, [r7, #4]
 80083b6:	4a15      	ldr	r2, [pc, #84]	@ (800840c <TIM_Base_SetConfig+0x130>)
 80083b8:	4293      	cmp	r3, r2
 80083ba:	d003      	beq.n	80083c4 <TIM_Base_SetConfig+0xe8>
 80083bc:	687b      	ldr	r3, [r7, #4]
 80083be:	4a14      	ldr	r2, [pc, #80]	@ (8008410 <TIM_Base_SetConfig+0x134>)
 80083c0:	4293      	cmp	r3, r2
 80083c2:	d103      	bne.n	80083cc <TIM_Base_SetConfig+0xf0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80083c4:	683b      	ldr	r3, [r7, #0]
 80083c6:	691a      	ldr	r2, [r3, #16]
 80083c8:	687b      	ldr	r3, [r7, #4]
 80083ca:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80083cc:	687b      	ldr	r3, [r7, #4]
 80083ce:	2201      	movs	r2, #1
 80083d0:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80083d2:	687b      	ldr	r3, [r7, #4]
 80083d4:	691b      	ldr	r3, [r3, #16]
 80083d6:	f003 0301 	and.w	r3, r3, #1
 80083da:	2b01      	cmp	r3, #1
 80083dc:	d105      	bne.n	80083ea <TIM_Base_SetConfig+0x10e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80083de:	687b      	ldr	r3, [r7, #4]
 80083e0:	691b      	ldr	r3, [r3, #16]
 80083e2:	f023 0201 	bic.w	r2, r3, #1
 80083e6:	687b      	ldr	r3, [r7, #4]
 80083e8:	611a      	str	r2, [r3, #16]
  }
}
 80083ea:	bf00      	nop
 80083ec:	3714      	adds	r7, #20
 80083ee:	46bd      	mov	sp, r7
 80083f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083f4:	4770      	bx	lr
 80083f6:	bf00      	nop
 80083f8:	40012c00 	.word	0x40012c00
 80083fc:	40000400 	.word	0x40000400
 8008400:	40000800 	.word	0x40000800
 8008404:	40013400 	.word	0x40013400
 8008408:	40014000 	.word	0x40014000
 800840c:	40014400 	.word	0x40014400
 8008410:	40014800 	.word	0x40014800

08008414 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8008414:	b480      	push	{r7}
 8008416:	b087      	sub	sp, #28
 8008418:	af00      	add	r7, sp, #0
 800841a:	6078      	str	r0, [r7, #4]
 800841c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800841e:	687b      	ldr	r3, [r7, #4]
 8008420:	6a1b      	ldr	r3, [r3, #32]
 8008422:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8008424:	687b      	ldr	r3, [r7, #4]
 8008426:	6a1b      	ldr	r3, [r3, #32]
 8008428:	f023 0201 	bic.w	r2, r3, #1
 800842c:	687b      	ldr	r3, [r7, #4]
 800842e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008430:	687b      	ldr	r3, [r7, #4]
 8008432:	685b      	ldr	r3, [r3, #4]
 8008434:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8008436:	687b      	ldr	r3, [r7, #4]
 8008438:	699b      	ldr	r3, [r3, #24]
 800843a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800843c:	68fb      	ldr	r3, [r7, #12]
 800843e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8008442:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008446:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8008448:	68fb      	ldr	r3, [r7, #12]
 800844a:	f023 0303 	bic.w	r3, r3, #3
 800844e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8008450:	683b      	ldr	r3, [r7, #0]
 8008452:	681b      	ldr	r3, [r3, #0]
 8008454:	68fa      	ldr	r2, [r7, #12]
 8008456:	4313      	orrs	r3, r2
 8008458:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800845a:	697b      	ldr	r3, [r7, #20]
 800845c:	f023 0302 	bic.w	r3, r3, #2
 8008460:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8008462:	683b      	ldr	r3, [r7, #0]
 8008464:	689b      	ldr	r3, [r3, #8]
 8008466:	697a      	ldr	r2, [r7, #20]
 8008468:	4313      	orrs	r3, r2
 800846a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800846c:	687b      	ldr	r3, [r7, #4]
 800846e:	4a2c      	ldr	r2, [pc, #176]	@ (8008520 <TIM_OC1_SetConfig+0x10c>)
 8008470:	4293      	cmp	r3, r2
 8008472:	d00f      	beq.n	8008494 <TIM_OC1_SetConfig+0x80>
 8008474:	687b      	ldr	r3, [r7, #4]
 8008476:	4a2b      	ldr	r2, [pc, #172]	@ (8008524 <TIM_OC1_SetConfig+0x110>)
 8008478:	4293      	cmp	r3, r2
 800847a:	d00b      	beq.n	8008494 <TIM_OC1_SetConfig+0x80>
 800847c:	687b      	ldr	r3, [r7, #4]
 800847e:	4a2a      	ldr	r2, [pc, #168]	@ (8008528 <TIM_OC1_SetConfig+0x114>)
 8008480:	4293      	cmp	r3, r2
 8008482:	d007      	beq.n	8008494 <TIM_OC1_SetConfig+0x80>
 8008484:	687b      	ldr	r3, [r7, #4]
 8008486:	4a29      	ldr	r2, [pc, #164]	@ (800852c <TIM_OC1_SetConfig+0x118>)
 8008488:	4293      	cmp	r3, r2
 800848a:	d003      	beq.n	8008494 <TIM_OC1_SetConfig+0x80>
 800848c:	687b      	ldr	r3, [r7, #4]
 800848e:	4a28      	ldr	r2, [pc, #160]	@ (8008530 <TIM_OC1_SetConfig+0x11c>)
 8008490:	4293      	cmp	r3, r2
 8008492:	d10c      	bne.n	80084ae <TIM_OC1_SetConfig+0x9a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8008494:	697b      	ldr	r3, [r7, #20]
 8008496:	f023 0308 	bic.w	r3, r3, #8
 800849a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800849c:	683b      	ldr	r3, [r7, #0]
 800849e:	68db      	ldr	r3, [r3, #12]
 80084a0:	697a      	ldr	r2, [r7, #20]
 80084a2:	4313      	orrs	r3, r2
 80084a4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80084a6:	697b      	ldr	r3, [r7, #20]
 80084a8:	f023 0304 	bic.w	r3, r3, #4
 80084ac:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80084ae:	687b      	ldr	r3, [r7, #4]
 80084b0:	4a1b      	ldr	r2, [pc, #108]	@ (8008520 <TIM_OC1_SetConfig+0x10c>)
 80084b2:	4293      	cmp	r3, r2
 80084b4:	d00f      	beq.n	80084d6 <TIM_OC1_SetConfig+0xc2>
 80084b6:	687b      	ldr	r3, [r7, #4]
 80084b8:	4a1a      	ldr	r2, [pc, #104]	@ (8008524 <TIM_OC1_SetConfig+0x110>)
 80084ba:	4293      	cmp	r3, r2
 80084bc:	d00b      	beq.n	80084d6 <TIM_OC1_SetConfig+0xc2>
 80084be:	687b      	ldr	r3, [r7, #4]
 80084c0:	4a19      	ldr	r2, [pc, #100]	@ (8008528 <TIM_OC1_SetConfig+0x114>)
 80084c2:	4293      	cmp	r3, r2
 80084c4:	d007      	beq.n	80084d6 <TIM_OC1_SetConfig+0xc2>
 80084c6:	687b      	ldr	r3, [r7, #4]
 80084c8:	4a18      	ldr	r2, [pc, #96]	@ (800852c <TIM_OC1_SetConfig+0x118>)
 80084ca:	4293      	cmp	r3, r2
 80084cc:	d003      	beq.n	80084d6 <TIM_OC1_SetConfig+0xc2>
 80084ce:	687b      	ldr	r3, [r7, #4]
 80084d0:	4a17      	ldr	r2, [pc, #92]	@ (8008530 <TIM_OC1_SetConfig+0x11c>)
 80084d2:	4293      	cmp	r3, r2
 80084d4:	d111      	bne.n	80084fa <TIM_OC1_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80084d6:	693b      	ldr	r3, [r7, #16]
 80084d8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80084dc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80084de:	693b      	ldr	r3, [r7, #16]
 80084e0:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80084e4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80084e6:	683b      	ldr	r3, [r7, #0]
 80084e8:	695b      	ldr	r3, [r3, #20]
 80084ea:	693a      	ldr	r2, [r7, #16]
 80084ec:	4313      	orrs	r3, r2
 80084ee:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80084f0:	683b      	ldr	r3, [r7, #0]
 80084f2:	699b      	ldr	r3, [r3, #24]
 80084f4:	693a      	ldr	r2, [r7, #16]
 80084f6:	4313      	orrs	r3, r2
 80084f8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80084fa:	687b      	ldr	r3, [r7, #4]
 80084fc:	693a      	ldr	r2, [r7, #16]
 80084fe:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8008500:	687b      	ldr	r3, [r7, #4]
 8008502:	68fa      	ldr	r2, [r7, #12]
 8008504:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8008506:	683b      	ldr	r3, [r7, #0]
 8008508:	685a      	ldr	r2, [r3, #4]
 800850a:	687b      	ldr	r3, [r7, #4]
 800850c:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800850e:	687b      	ldr	r3, [r7, #4]
 8008510:	697a      	ldr	r2, [r7, #20]
 8008512:	621a      	str	r2, [r3, #32]
}
 8008514:	bf00      	nop
 8008516:	371c      	adds	r7, #28
 8008518:	46bd      	mov	sp, r7
 800851a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800851e:	4770      	bx	lr
 8008520:	40012c00 	.word	0x40012c00
 8008524:	40013400 	.word	0x40013400
 8008528:	40014000 	.word	0x40014000
 800852c:	40014400 	.word	0x40014400
 8008530:	40014800 	.word	0x40014800

08008534 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8008534:	b480      	push	{r7}
 8008536:	b087      	sub	sp, #28
 8008538:	af00      	add	r7, sp, #0
 800853a:	6078      	str	r0, [r7, #4]
 800853c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800853e:	687b      	ldr	r3, [r7, #4]
 8008540:	6a1b      	ldr	r3, [r3, #32]
 8008542:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8008544:	687b      	ldr	r3, [r7, #4]
 8008546:	6a1b      	ldr	r3, [r3, #32]
 8008548:	f023 0210 	bic.w	r2, r3, #16
 800854c:	687b      	ldr	r3, [r7, #4]
 800854e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008550:	687b      	ldr	r3, [r7, #4]
 8008552:	685b      	ldr	r3, [r3, #4]
 8008554:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8008556:	687b      	ldr	r3, [r7, #4]
 8008558:	699b      	ldr	r3, [r3, #24]
 800855a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800855c:	68fb      	ldr	r3, [r7, #12]
 800855e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8008562:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8008566:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8008568:	68fb      	ldr	r3, [r7, #12]
 800856a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800856e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8008570:	683b      	ldr	r3, [r7, #0]
 8008572:	681b      	ldr	r3, [r3, #0]
 8008574:	021b      	lsls	r3, r3, #8
 8008576:	68fa      	ldr	r2, [r7, #12]
 8008578:	4313      	orrs	r3, r2
 800857a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800857c:	697b      	ldr	r3, [r7, #20]
 800857e:	f023 0320 	bic.w	r3, r3, #32
 8008582:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8008584:	683b      	ldr	r3, [r7, #0]
 8008586:	689b      	ldr	r3, [r3, #8]
 8008588:	011b      	lsls	r3, r3, #4
 800858a:	697a      	ldr	r2, [r7, #20]
 800858c:	4313      	orrs	r3, r2
 800858e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8008590:	687b      	ldr	r3, [r7, #4]
 8008592:	4a28      	ldr	r2, [pc, #160]	@ (8008634 <TIM_OC2_SetConfig+0x100>)
 8008594:	4293      	cmp	r3, r2
 8008596:	d003      	beq.n	80085a0 <TIM_OC2_SetConfig+0x6c>
 8008598:	687b      	ldr	r3, [r7, #4]
 800859a:	4a27      	ldr	r2, [pc, #156]	@ (8008638 <TIM_OC2_SetConfig+0x104>)
 800859c:	4293      	cmp	r3, r2
 800859e:	d10d      	bne.n	80085bc <TIM_OC2_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80085a0:	697b      	ldr	r3, [r7, #20]
 80085a2:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80085a6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80085a8:	683b      	ldr	r3, [r7, #0]
 80085aa:	68db      	ldr	r3, [r3, #12]
 80085ac:	011b      	lsls	r3, r3, #4
 80085ae:	697a      	ldr	r2, [r7, #20]
 80085b0:	4313      	orrs	r3, r2
 80085b2:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80085b4:	697b      	ldr	r3, [r7, #20]
 80085b6:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80085ba:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80085bc:	687b      	ldr	r3, [r7, #4]
 80085be:	4a1d      	ldr	r2, [pc, #116]	@ (8008634 <TIM_OC2_SetConfig+0x100>)
 80085c0:	4293      	cmp	r3, r2
 80085c2:	d00f      	beq.n	80085e4 <TIM_OC2_SetConfig+0xb0>
 80085c4:	687b      	ldr	r3, [r7, #4]
 80085c6:	4a1c      	ldr	r2, [pc, #112]	@ (8008638 <TIM_OC2_SetConfig+0x104>)
 80085c8:	4293      	cmp	r3, r2
 80085ca:	d00b      	beq.n	80085e4 <TIM_OC2_SetConfig+0xb0>
 80085cc:	687b      	ldr	r3, [r7, #4]
 80085ce:	4a1b      	ldr	r2, [pc, #108]	@ (800863c <TIM_OC2_SetConfig+0x108>)
 80085d0:	4293      	cmp	r3, r2
 80085d2:	d007      	beq.n	80085e4 <TIM_OC2_SetConfig+0xb0>
 80085d4:	687b      	ldr	r3, [r7, #4]
 80085d6:	4a1a      	ldr	r2, [pc, #104]	@ (8008640 <TIM_OC2_SetConfig+0x10c>)
 80085d8:	4293      	cmp	r3, r2
 80085da:	d003      	beq.n	80085e4 <TIM_OC2_SetConfig+0xb0>
 80085dc:	687b      	ldr	r3, [r7, #4]
 80085de:	4a19      	ldr	r2, [pc, #100]	@ (8008644 <TIM_OC2_SetConfig+0x110>)
 80085e0:	4293      	cmp	r3, r2
 80085e2:	d113      	bne.n	800860c <TIM_OC2_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80085e4:	693b      	ldr	r3, [r7, #16]
 80085e6:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80085ea:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80085ec:	693b      	ldr	r3, [r7, #16]
 80085ee:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80085f2:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80085f4:	683b      	ldr	r3, [r7, #0]
 80085f6:	695b      	ldr	r3, [r3, #20]
 80085f8:	009b      	lsls	r3, r3, #2
 80085fa:	693a      	ldr	r2, [r7, #16]
 80085fc:	4313      	orrs	r3, r2
 80085fe:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8008600:	683b      	ldr	r3, [r7, #0]
 8008602:	699b      	ldr	r3, [r3, #24]
 8008604:	009b      	lsls	r3, r3, #2
 8008606:	693a      	ldr	r2, [r7, #16]
 8008608:	4313      	orrs	r3, r2
 800860a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800860c:	687b      	ldr	r3, [r7, #4]
 800860e:	693a      	ldr	r2, [r7, #16]
 8008610:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8008612:	687b      	ldr	r3, [r7, #4]
 8008614:	68fa      	ldr	r2, [r7, #12]
 8008616:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8008618:	683b      	ldr	r3, [r7, #0]
 800861a:	685a      	ldr	r2, [r3, #4]
 800861c:	687b      	ldr	r3, [r7, #4]
 800861e:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008620:	687b      	ldr	r3, [r7, #4]
 8008622:	697a      	ldr	r2, [r7, #20]
 8008624:	621a      	str	r2, [r3, #32]
}
 8008626:	bf00      	nop
 8008628:	371c      	adds	r7, #28
 800862a:	46bd      	mov	sp, r7
 800862c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008630:	4770      	bx	lr
 8008632:	bf00      	nop
 8008634:	40012c00 	.word	0x40012c00
 8008638:	40013400 	.word	0x40013400
 800863c:	40014000 	.word	0x40014000
 8008640:	40014400 	.word	0x40014400
 8008644:	40014800 	.word	0x40014800

08008648 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8008648:	b480      	push	{r7}
 800864a:	b087      	sub	sp, #28
 800864c:	af00      	add	r7, sp, #0
 800864e:	6078      	str	r0, [r7, #4]
 8008650:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008652:	687b      	ldr	r3, [r7, #4]
 8008654:	6a1b      	ldr	r3, [r3, #32]
 8008656:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8008658:	687b      	ldr	r3, [r7, #4]
 800865a:	6a1b      	ldr	r3, [r3, #32]
 800865c:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8008660:	687b      	ldr	r3, [r7, #4]
 8008662:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008664:	687b      	ldr	r3, [r7, #4]
 8008666:	685b      	ldr	r3, [r3, #4]
 8008668:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800866a:	687b      	ldr	r3, [r7, #4]
 800866c:	69db      	ldr	r3, [r3, #28]
 800866e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8008670:	68fb      	ldr	r3, [r7, #12]
 8008672:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8008676:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800867a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800867c:	68fb      	ldr	r3, [r7, #12]
 800867e:	f023 0303 	bic.w	r3, r3, #3
 8008682:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8008684:	683b      	ldr	r3, [r7, #0]
 8008686:	681b      	ldr	r3, [r3, #0]
 8008688:	68fa      	ldr	r2, [r7, #12]
 800868a:	4313      	orrs	r3, r2
 800868c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800868e:	697b      	ldr	r3, [r7, #20]
 8008690:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8008694:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8008696:	683b      	ldr	r3, [r7, #0]
 8008698:	689b      	ldr	r3, [r3, #8]
 800869a:	021b      	lsls	r3, r3, #8
 800869c:	697a      	ldr	r2, [r7, #20]
 800869e:	4313      	orrs	r3, r2
 80086a0:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80086a2:	687b      	ldr	r3, [r7, #4]
 80086a4:	4a27      	ldr	r2, [pc, #156]	@ (8008744 <TIM_OC3_SetConfig+0xfc>)
 80086a6:	4293      	cmp	r3, r2
 80086a8:	d003      	beq.n	80086b2 <TIM_OC3_SetConfig+0x6a>
 80086aa:	687b      	ldr	r3, [r7, #4]
 80086ac:	4a26      	ldr	r2, [pc, #152]	@ (8008748 <TIM_OC3_SetConfig+0x100>)
 80086ae:	4293      	cmp	r3, r2
 80086b0:	d10d      	bne.n	80086ce <TIM_OC3_SetConfig+0x86>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80086b2:	697b      	ldr	r3, [r7, #20]
 80086b4:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80086b8:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80086ba:	683b      	ldr	r3, [r7, #0]
 80086bc:	68db      	ldr	r3, [r3, #12]
 80086be:	021b      	lsls	r3, r3, #8
 80086c0:	697a      	ldr	r2, [r7, #20]
 80086c2:	4313      	orrs	r3, r2
 80086c4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80086c6:	697b      	ldr	r3, [r7, #20]
 80086c8:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80086cc:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80086ce:	687b      	ldr	r3, [r7, #4]
 80086d0:	4a1c      	ldr	r2, [pc, #112]	@ (8008744 <TIM_OC3_SetConfig+0xfc>)
 80086d2:	4293      	cmp	r3, r2
 80086d4:	d00f      	beq.n	80086f6 <TIM_OC3_SetConfig+0xae>
 80086d6:	687b      	ldr	r3, [r7, #4]
 80086d8:	4a1b      	ldr	r2, [pc, #108]	@ (8008748 <TIM_OC3_SetConfig+0x100>)
 80086da:	4293      	cmp	r3, r2
 80086dc:	d00b      	beq.n	80086f6 <TIM_OC3_SetConfig+0xae>
 80086de:	687b      	ldr	r3, [r7, #4]
 80086e0:	4a1a      	ldr	r2, [pc, #104]	@ (800874c <TIM_OC3_SetConfig+0x104>)
 80086e2:	4293      	cmp	r3, r2
 80086e4:	d007      	beq.n	80086f6 <TIM_OC3_SetConfig+0xae>
 80086e6:	687b      	ldr	r3, [r7, #4]
 80086e8:	4a19      	ldr	r2, [pc, #100]	@ (8008750 <TIM_OC3_SetConfig+0x108>)
 80086ea:	4293      	cmp	r3, r2
 80086ec:	d003      	beq.n	80086f6 <TIM_OC3_SetConfig+0xae>
 80086ee:	687b      	ldr	r3, [r7, #4]
 80086f0:	4a18      	ldr	r2, [pc, #96]	@ (8008754 <TIM_OC3_SetConfig+0x10c>)
 80086f2:	4293      	cmp	r3, r2
 80086f4:	d113      	bne.n	800871e <TIM_OC3_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80086f6:	693b      	ldr	r3, [r7, #16]
 80086f8:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80086fc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80086fe:	693b      	ldr	r3, [r7, #16]
 8008700:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8008704:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8008706:	683b      	ldr	r3, [r7, #0]
 8008708:	695b      	ldr	r3, [r3, #20]
 800870a:	011b      	lsls	r3, r3, #4
 800870c:	693a      	ldr	r2, [r7, #16]
 800870e:	4313      	orrs	r3, r2
 8008710:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8008712:	683b      	ldr	r3, [r7, #0]
 8008714:	699b      	ldr	r3, [r3, #24]
 8008716:	011b      	lsls	r3, r3, #4
 8008718:	693a      	ldr	r2, [r7, #16]
 800871a:	4313      	orrs	r3, r2
 800871c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800871e:	687b      	ldr	r3, [r7, #4]
 8008720:	693a      	ldr	r2, [r7, #16]
 8008722:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8008724:	687b      	ldr	r3, [r7, #4]
 8008726:	68fa      	ldr	r2, [r7, #12]
 8008728:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800872a:	683b      	ldr	r3, [r7, #0]
 800872c:	685a      	ldr	r2, [r3, #4]
 800872e:	687b      	ldr	r3, [r7, #4]
 8008730:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008732:	687b      	ldr	r3, [r7, #4]
 8008734:	697a      	ldr	r2, [r7, #20]
 8008736:	621a      	str	r2, [r3, #32]
}
 8008738:	bf00      	nop
 800873a:	371c      	adds	r7, #28
 800873c:	46bd      	mov	sp, r7
 800873e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008742:	4770      	bx	lr
 8008744:	40012c00 	.word	0x40012c00
 8008748:	40013400 	.word	0x40013400
 800874c:	40014000 	.word	0x40014000
 8008750:	40014400 	.word	0x40014400
 8008754:	40014800 	.word	0x40014800

08008758 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8008758:	b480      	push	{r7}
 800875a:	b087      	sub	sp, #28
 800875c:	af00      	add	r7, sp, #0
 800875e:	6078      	str	r0, [r7, #4]
 8008760:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008762:	687b      	ldr	r3, [r7, #4]
 8008764:	6a1b      	ldr	r3, [r3, #32]
 8008766:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8008768:	687b      	ldr	r3, [r7, #4]
 800876a:	6a1b      	ldr	r3, [r3, #32]
 800876c:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8008770:	687b      	ldr	r3, [r7, #4]
 8008772:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008774:	687b      	ldr	r3, [r7, #4]
 8008776:	685b      	ldr	r3, [r3, #4]
 8008778:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800877a:	687b      	ldr	r3, [r7, #4]
 800877c:	69db      	ldr	r3, [r3, #28]
 800877e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8008780:	68fb      	ldr	r3, [r7, #12]
 8008782:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8008786:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800878a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800878c:	68fb      	ldr	r3, [r7, #12]
 800878e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8008792:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8008794:	683b      	ldr	r3, [r7, #0]
 8008796:	681b      	ldr	r3, [r3, #0]
 8008798:	021b      	lsls	r3, r3, #8
 800879a:	68fa      	ldr	r2, [r7, #12]
 800879c:	4313      	orrs	r3, r2
 800879e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80087a0:	697b      	ldr	r3, [r7, #20]
 80087a2:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80087a6:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80087a8:	683b      	ldr	r3, [r7, #0]
 80087aa:	689b      	ldr	r3, [r3, #8]
 80087ac:	031b      	lsls	r3, r3, #12
 80087ae:	697a      	ldr	r2, [r7, #20]
 80087b0:	4313      	orrs	r3, r2
 80087b2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_4))
 80087b4:	687b      	ldr	r3, [r7, #4]
 80087b6:	4a28      	ldr	r2, [pc, #160]	@ (8008858 <TIM_OC4_SetConfig+0x100>)
 80087b8:	4293      	cmp	r3, r2
 80087ba:	d003      	beq.n	80087c4 <TIM_OC4_SetConfig+0x6c>
 80087bc:	687b      	ldr	r3, [r7, #4]
 80087be:	4a27      	ldr	r2, [pc, #156]	@ (800885c <TIM_OC4_SetConfig+0x104>)
 80087c0:	4293      	cmp	r3, r2
 80087c2:	d10d      	bne.n	80087e0 <TIM_OC4_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC4NP;
 80087c4:	697b      	ldr	r3, [r7, #20]
 80087c6:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 80087ca:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 12U);
 80087cc:	683b      	ldr	r3, [r7, #0]
 80087ce:	68db      	ldr	r3, [r3, #12]
 80087d0:	031b      	lsls	r3, r3, #12
 80087d2:	697a      	ldr	r2, [r7, #20]
 80087d4:	4313      	orrs	r3, r2
 80087d6:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC4NE;
 80087d8:	697b      	ldr	r3, [r7, #20]
 80087da:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80087de:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80087e0:	687b      	ldr	r3, [r7, #4]
 80087e2:	4a1d      	ldr	r2, [pc, #116]	@ (8008858 <TIM_OC4_SetConfig+0x100>)
 80087e4:	4293      	cmp	r3, r2
 80087e6:	d00f      	beq.n	8008808 <TIM_OC4_SetConfig+0xb0>
 80087e8:	687b      	ldr	r3, [r7, #4]
 80087ea:	4a1c      	ldr	r2, [pc, #112]	@ (800885c <TIM_OC4_SetConfig+0x104>)
 80087ec:	4293      	cmp	r3, r2
 80087ee:	d00b      	beq.n	8008808 <TIM_OC4_SetConfig+0xb0>
 80087f0:	687b      	ldr	r3, [r7, #4]
 80087f2:	4a1b      	ldr	r2, [pc, #108]	@ (8008860 <TIM_OC4_SetConfig+0x108>)
 80087f4:	4293      	cmp	r3, r2
 80087f6:	d007      	beq.n	8008808 <TIM_OC4_SetConfig+0xb0>
 80087f8:	687b      	ldr	r3, [r7, #4]
 80087fa:	4a1a      	ldr	r2, [pc, #104]	@ (8008864 <TIM_OC4_SetConfig+0x10c>)
 80087fc:	4293      	cmp	r3, r2
 80087fe:	d003      	beq.n	8008808 <TIM_OC4_SetConfig+0xb0>
 8008800:	687b      	ldr	r3, [r7, #4]
 8008802:	4a19      	ldr	r2, [pc, #100]	@ (8008868 <TIM_OC4_SetConfig+0x110>)
 8008804:	4293      	cmp	r3, r2
 8008806:	d113      	bne.n	8008830 <TIM_OC4_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8008808:	693b      	ldr	r3, [r7, #16]
 800880a:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800880e:	613b      	str	r3, [r7, #16]
    /* Reset the Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4N;
 8008810:	693b      	ldr	r3, [r7, #16]
 8008812:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8008816:	613b      	str	r3, [r7, #16]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8008818:	683b      	ldr	r3, [r7, #0]
 800881a:	695b      	ldr	r3, [r3, #20]
 800881c:	019b      	lsls	r3, r3, #6
 800881e:	693a      	ldr	r2, [r7, #16]
 8008820:	4313      	orrs	r3, r2
 8008822:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 6U);
 8008824:	683b      	ldr	r3, [r7, #0]
 8008826:	699b      	ldr	r3, [r3, #24]
 8008828:	019b      	lsls	r3, r3, #6
 800882a:	693a      	ldr	r2, [r7, #16]
 800882c:	4313      	orrs	r3, r2
 800882e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008830:	687b      	ldr	r3, [r7, #4]
 8008832:	693a      	ldr	r2, [r7, #16]
 8008834:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8008836:	687b      	ldr	r3, [r7, #4]
 8008838:	68fa      	ldr	r2, [r7, #12]
 800883a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800883c:	683b      	ldr	r3, [r7, #0]
 800883e:	685a      	ldr	r2, [r3, #4]
 8008840:	687b      	ldr	r3, [r7, #4]
 8008842:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008844:	687b      	ldr	r3, [r7, #4]
 8008846:	697a      	ldr	r2, [r7, #20]
 8008848:	621a      	str	r2, [r3, #32]
}
 800884a:	bf00      	nop
 800884c:	371c      	adds	r7, #28
 800884e:	46bd      	mov	sp, r7
 8008850:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008854:	4770      	bx	lr
 8008856:	bf00      	nop
 8008858:	40012c00 	.word	0x40012c00
 800885c:	40013400 	.word	0x40013400
 8008860:	40014000 	.word	0x40014000
 8008864:	40014400 	.word	0x40014400
 8008868:	40014800 	.word	0x40014800

0800886c <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800886c:	b480      	push	{r7}
 800886e:	b087      	sub	sp, #28
 8008870:	af00      	add	r7, sp, #0
 8008872:	6078      	str	r0, [r7, #4]
 8008874:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008876:	687b      	ldr	r3, [r7, #4]
 8008878:	6a1b      	ldr	r3, [r3, #32]
 800887a:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800887c:	687b      	ldr	r3, [r7, #4]
 800887e:	6a1b      	ldr	r3, [r3, #32]
 8008880:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8008884:	687b      	ldr	r3, [r7, #4]
 8008886:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008888:	687b      	ldr	r3, [r7, #4]
 800888a:	685b      	ldr	r3, [r3, #4]
 800888c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800888e:	687b      	ldr	r3, [r7, #4]
 8008890:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008892:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8008894:	68fb      	ldr	r3, [r7, #12]
 8008896:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800889a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800889e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80088a0:	683b      	ldr	r3, [r7, #0]
 80088a2:	681b      	ldr	r3, [r3, #0]
 80088a4:	68fa      	ldr	r2, [r7, #12]
 80088a6:	4313      	orrs	r3, r2
 80088a8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 80088aa:	693b      	ldr	r3, [r7, #16]
 80088ac:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 80088b0:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 80088b2:	683b      	ldr	r3, [r7, #0]
 80088b4:	689b      	ldr	r3, [r3, #8]
 80088b6:	041b      	lsls	r3, r3, #16
 80088b8:	693a      	ldr	r2, [r7, #16]
 80088ba:	4313      	orrs	r3, r2
 80088bc:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80088be:	687b      	ldr	r3, [r7, #4]
 80088c0:	4a17      	ldr	r2, [pc, #92]	@ (8008920 <TIM_OC5_SetConfig+0xb4>)
 80088c2:	4293      	cmp	r3, r2
 80088c4:	d00f      	beq.n	80088e6 <TIM_OC5_SetConfig+0x7a>
 80088c6:	687b      	ldr	r3, [r7, #4]
 80088c8:	4a16      	ldr	r2, [pc, #88]	@ (8008924 <TIM_OC5_SetConfig+0xb8>)
 80088ca:	4293      	cmp	r3, r2
 80088cc:	d00b      	beq.n	80088e6 <TIM_OC5_SetConfig+0x7a>
 80088ce:	687b      	ldr	r3, [r7, #4]
 80088d0:	4a15      	ldr	r2, [pc, #84]	@ (8008928 <TIM_OC5_SetConfig+0xbc>)
 80088d2:	4293      	cmp	r3, r2
 80088d4:	d007      	beq.n	80088e6 <TIM_OC5_SetConfig+0x7a>
 80088d6:	687b      	ldr	r3, [r7, #4]
 80088d8:	4a14      	ldr	r2, [pc, #80]	@ (800892c <TIM_OC5_SetConfig+0xc0>)
 80088da:	4293      	cmp	r3, r2
 80088dc:	d003      	beq.n	80088e6 <TIM_OC5_SetConfig+0x7a>
 80088de:	687b      	ldr	r3, [r7, #4]
 80088e0:	4a13      	ldr	r2, [pc, #76]	@ (8008930 <TIM_OC5_SetConfig+0xc4>)
 80088e2:	4293      	cmp	r3, r2
 80088e4:	d109      	bne.n	80088fa <TIM_OC5_SetConfig+0x8e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 80088e6:	697b      	ldr	r3, [r7, #20]
 80088e8:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80088ec:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 80088ee:	683b      	ldr	r3, [r7, #0]
 80088f0:	695b      	ldr	r3, [r3, #20]
 80088f2:	021b      	lsls	r3, r3, #8
 80088f4:	697a      	ldr	r2, [r7, #20]
 80088f6:	4313      	orrs	r3, r2
 80088f8:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80088fa:	687b      	ldr	r3, [r7, #4]
 80088fc:	697a      	ldr	r2, [r7, #20]
 80088fe:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8008900:	687b      	ldr	r3, [r7, #4]
 8008902:	68fa      	ldr	r2, [r7, #12]
 8008904:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8008906:	683b      	ldr	r3, [r7, #0]
 8008908:	685a      	ldr	r2, [r3, #4]
 800890a:	687b      	ldr	r3, [r7, #4]
 800890c:	649a      	str	r2, [r3, #72]	@ 0x48

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800890e:	687b      	ldr	r3, [r7, #4]
 8008910:	693a      	ldr	r2, [r7, #16]
 8008912:	621a      	str	r2, [r3, #32]
}
 8008914:	bf00      	nop
 8008916:	371c      	adds	r7, #28
 8008918:	46bd      	mov	sp, r7
 800891a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800891e:	4770      	bx	lr
 8008920:	40012c00 	.word	0x40012c00
 8008924:	40013400 	.word	0x40013400
 8008928:	40014000 	.word	0x40014000
 800892c:	40014400 	.word	0x40014400
 8008930:	40014800 	.word	0x40014800

08008934 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8008934:	b480      	push	{r7}
 8008936:	b087      	sub	sp, #28
 8008938:	af00      	add	r7, sp, #0
 800893a:	6078      	str	r0, [r7, #4]
 800893c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800893e:	687b      	ldr	r3, [r7, #4]
 8008940:	6a1b      	ldr	r3, [r3, #32]
 8008942:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8008944:	687b      	ldr	r3, [r7, #4]
 8008946:	6a1b      	ldr	r3, [r3, #32]
 8008948:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 800894c:	687b      	ldr	r3, [r7, #4]
 800894e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008950:	687b      	ldr	r3, [r7, #4]
 8008952:	685b      	ldr	r3, [r3, #4]
 8008954:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8008956:	687b      	ldr	r3, [r7, #4]
 8008958:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800895a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800895c:	68fb      	ldr	r3, [r7, #12]
 800895e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8008962:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8008966:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8008968:	683b      	ldr	r3, [r7, #0]
 800896a:	681b      	ldr	r3, [r3, #0]
 800896c:	021b      	lsls	r3, r3, #8
 800896e:	68fa      	ldr	r2, [r7, #12]
 8008970:	4313      	orrs	r3, r2
 8008972:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8008974:	693b      	ldr	r3, [r7, #16]
 8008976:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800897a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800897c:	683b      	ldr	r3, [r7, #0]
 800897e:	689b      	ldr	r3, [r3, #8]
 8008980:	051b      	lsls	r3, r3, #20
 8008982:	693a      	ldr	r2, [r7, #16]
 8008984:	4313      	orrs	r3, r2
 8008986:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008988:	687b      	ldr	r3, [r7, #4]
 800898a:	4a18      	ldr	r2, [pc, #96]	@ (80089ec <TIM_OC6_SetConfig+0xb8>)
 800898c:	4293      	cmp	r3, r2
 800898e:	d00f      	beq.n	80089b0 <TIM_OC6_SetConfig+0x7c>
 8008990:	687b      	ldr	r3, [r7, #4]
 8008992:	4a17      	ldr	r2, [pc, #92]	@ (80089f0 <TIM_OC6_SetConfig+0xbc>)
 8008994:	4293      	cmp	r3, r2
 8008996:	d00b      	beq.n	80089b0 <TIM_OC6_SetConfig+0x7c>
 8008998:	687b      	ldr	r3, [r7, #4]
 800899a:	4a16      	ldr	r2, [pc, #88]	@ (80089f4 <TIM_OC6_SetConfig+0xc0>)
 800899c:	4293      	cmp	r3, r2
 800899e:	d007      	beq.n	80089b0 <TIM_OC6_SetConfig+0x7c>
 80089a0:	687b      	ldr	r3, [r7, #4]
 80089a2:	4a15      	ldr	r2, [pc, #84]	@ (80089f8 <TIM_OC6_SetConfig+0xc4>)
 80089a4:	4293      	cmp	r3, r2
 80089a6:	d003      	beq.n	80089b0 <TIM_OC6_SetConfig+0x7c>
 80089a8:	687b      	ldr	r3, [r7, #4]
 80089aa:	4a14      	ldr	r2, [pc, #80]	@ (80089fc <TIM_OC6_SetConfig+0xc8>)
 80089ac:	4293      	cmp	r3, r2
 80089ae:	d109      	bne.n	80089c4 <TIM_OC6_SetConfig+0x90>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 80089b0:	697b      	ldr	r3, [r7, #20]
 80089b2:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80089b6:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 80089b8:	683b      	ldr	r3, [r7, #0]
 80089ba:	695b      	ldr	r3, [r3, #20]
 80089bc:	029b      	lsls	r3, r3, #10
 80089be:	697a      	ldr	r2, [r7, #20]
 80089c0:	4313      	orrs	r3, r2
 80089c2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80089c4:	687b      	ldr	r3, [r7, #4]
 80089c6:	697a      	ldr	r2, [r7, #20]
 80089c8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80089ca:	687b      	ldr	r3, [r7, #4]
 80089cc:	68fa      	ldr	r2, [r7, #12]
 80089ce:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 80089d0:	683b      	ldr	r3, [r7, #0]
 80089d2:	685a      	ldr	r2, [r3, #4]
 80089d4:	687b      	ldr	r3, [r7, #4]
 80089d6:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80089d8:	687b      	ldr	r3, [r7, #4]
 80089da:	693a      	ldr	r2, [r7, #16]
 80089dc:	621a      	str	r2, [r3, #32]
}
 80089de:	bf00      	nop
 80089e0:	371c      	adds	r7, #28
 80089e2:	46bd      	mov	sp, r7
 80089e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089e8:	4770      	bx	lr
 80089ea:	bf00      	nop
 80089ec:	40012c00 	.word	0x40012c00
 80089f0:	40013400 	.word	0x40013400
 80089f4:	40014000 	.word	0x40014000
 80089f8:	40014400 	.word	0x40014400
 80089fc:	40014800 	.word	0x40014800

08008a00 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8008a00:	b480      	push	{r7}
 8008a02:	b087      	sub	sp, #28
 8008a04:	af00      	add	r7, sp, #0
 8008a06:	60f8      	str	r0, [r7, #12]
 8008a08:	60b9      	str	r1, [r7, #8]
 8008a0a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8008a0c:	68fb      	ldr	r3, [r7, #12]
 8008a0e:	6a1b      	ldr	r3, [r3, #32]
 8008a10:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8008a12:	68fb      	ldr	r3, [r7, #12]
 8008a14:	6a1b      	ldr	r3, [r3, #32]
 8008a16:	f023 0201 	bic.w	r2, r3, #1
 8008a1a:	68fb      	ldr	r3, [r7, #12]
 8008a1c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8008a1e:	68fb      	ldr	r3, [r7, #12]
 8008a20:	699b      	ldr	r3, [r3, #24]
 8008a22:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8008a24:	693b      	ldr	r3, [r7, #16]
 8008a26:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8008a2a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8008a2c:	687b      	ldr	r3, [r7, #4]
 8008a2e:	011b      	lsls	r3, r3, #4
 8008a30:	693a      	ldr	r2, [r7, #16]
 8008a32:	4313      	orrs	r3, r2
 8008a34:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8008a36:	697b      	ldr	r3, [r7, #20]
 8008a38:	f023 030a 	bic.w	r3, r3, #10
 8008a3c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8008a3e:	697a      	ldr	r2, [r7, #20]
 8008a40:	68bb      	ldr	r3, [r7, #8]
 8008a42:	4313      	orrs	r3, r2
 8008a44:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8008a46:	68fb      	ldr	r3, [r7, #12]
 8008a48:	693a      	ldr	r2, [r7, #16]
 8008a4a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8008a4c:	68fb      	ldr	r3, [r7, #12]
 8008a4e:	697a      	ldr	r2, [r7, #20]
 8008a50:	621a      	str	r2, [r3, #32]
}
 8008a52:	bf00      	nop
 8008a54:	371c      	adds	r7, #28
 8008a56:	46bd      	mov	sp, r7
 8008a58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a5c:	4770      	bx	lr

08008a5e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8008a5e:	b480      	push	{r7}
 8008a60:	b087      	sub	sp, #28
 8008a62:	af00      	add	r7, sp, #0
 8008a64:	60f8      	str	r0, [r7, #12]
 8008a66:	60b9      	str	r1, [r7, #8]
 8008a68:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8008a6a:	68fb      	ldr	r3, [r7, #12]
 8008a6c:	6a1b      	ldr	r3, [r3, #32]
 8008a6e:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8008a70:	68fb      	ldr	r3, [r7, #12]
 8008a72:	6a1b      	ldr	r3, [r3, #32]
 8008a74:	f023 0210 	bic.w	r2, r3, #16
 8008a78:	68fb      	ldr	r3, [r7, #12]
 8008a7a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8008a7c:	68fb      	ldr	r3, [r7, #12]
 8008a7e:	699b      	ldr	r3, [r3, #24]
 8008a80:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8008a82:	693b      	ldr	r3, [r7, #16]
 8008a84:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8008a88:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8008a8a:	687b      	ldr	r3, [r7, #4]
 8008a8c:	031b      	lsls	r3, r3, #12
 8008a8e:	693a      	ldr	r2, [r7, #16]
 8008a90:	4313      	orrs	r3, r2
 8008a92:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8008a94:	697b      	ldr	r3, [r7, #20]
 8008a96:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8008a9a:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8008a9c:	68bb      	ldr	r3, [r7, #8]
 8008a9e:	011b      	lsls	r3, r3, #4
 8008aa0:	697a      	ldr	r2, [r7, #20]
 8008aa2:	4313      	orrs	r3, r2
 8008aa4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8008aa6:	68fb      	ldr	r3, [r7, #12]
 8008aa8:	693a      	ldr	r2, [r7, #16]
 8008aaa:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8008aac:	68fb      	ldr	r3, [r7, #12]
 8008aae:	697a      	ldr	r2, [r7, #20]
 8008ab0:	621a      	str	r2, [r3, #32]
}
 8008ab2:	bf00      	nop
 8008ab4:	371c      	adds	r7, #28
 8008ab6:	46bd      	mov	sp, r7
 8008ab8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008abc:	4770      	bx	lr

08008abe <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8008abe:	b480      	push	{r7}
 8008ac0:	b085      	sub	sp, #20
 8008ac2:	af00      	add	r7, sp, #0
 8008ac4:	6078      	str	r0, [r7, #4]
 8008ac6:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8008ac8:	687b      	ldr	r3, [r7, #4]
 8008aca:	689b      	ldr	r3, [r3, #8]
 8008acc:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8008ace:	68fb      	ldr	r3, [r7, #12]
 8008ad0:	f423 1340 	bic.w	r3, r3, #3145728	@ 0x300000
 8008ad4:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008ad8:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8008ada:	683a      	ldr	r2, [r7, #0]
 8008adc:	68fb      	ldr	r3, [r7, #12]
 8008ade:	4313      	orrs	r3, r2
 8008ae0:	f043 0307 	orr.w	r3, r3, #7
 8008ae4:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8008ae6:	687b      	ldr	r3, [r7, #4]
 8008ae8:	68fa      	ldr	r2, [r7, #12]
 8008aea:	609a      	str	r2, [r3, #8]
}
 8008aec:	bf00      	nop
 8008aee:	3714      	adds	r7, #20
 8008af0:	46bd      	mov	sp, r7
 8008af2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008af6:	4770      	bx	lr

08008af8 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8008af8:	b480      	push	{r7}
 8008afa:	b087      	sub	sp, #28
 8008afc:	af00      	add	r7, sp, #0
 8008afe:	60f8      	str	r0, [r7, #12]
 8008b00:	60b9      	str	r1, [r7, #8]
 8008b02:	607a      	str	r2, [r7, #4]
 8008b04:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8008b06:	68fb      	ldr	r3, [r7, #12]
 8008b08:	689b      	ldr	r3, [r3, #8]
 8008b0a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8008b0c:	697b      	ldr	r3, [r7, #20]
 8008b0e:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8008b12:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8008b14:	683b      	ldr	r3, [r7, #0]
 8008b16:	021a      	lsls	r2, r3, #8
 8008b18:	687b      	ldr	r3, [r7, #4]
 8008b1a:	431a      	orrs	r2, r3
 8008b1c:	68bb      	ldr	r3, [r7, #8]
 8008b1e:	4313      	orrs	r3, r2
 8008b20:	697a      	ldr	r2, [r7, #20]
 8008b22:	4313      	orrs	r3, r2
 8008b24:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8008b26:	68fb      	ldr	r3, [r7, #12]
 8008b28:	697a      	ldr	r2, [r7, #20]
 8008b2a:	609a      	str	r2, [r3, #8]
}
 8008b2c:	bf00      	nop
 8008b2e:	371c      	adds	r7, #28
 8008b30:	46bd      	mov	sp, r7
 8008b32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b36:	4770      	bx	lr

08008b38 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8008b38:	b480      	push	{r7}
 8008b3a:	b087      	sub	sp, #28
 8008b3c:	af00      	add	r7, sp, #0
 8008b3e:	60f8      	str	r0, [r7, #12]
 8008b40:	60b9      	str	r1, [r7, #8]
 8008b42:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8008b44:	68bb      	ldr	r3, [r7, #8]
 8008b46:	f003 031f 	and.w	r3, r3, #31
 8008b4a:	2201      	movs	r2, #1
 8008b4c:	fa02 f303 	lsl.w	r3, r2, r3
 8008b50:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8008b52:	68fb      	ldr	r3, [r7, #12]
 8008b54:	6a1a      	ldr	r2, [r3, #32]
 8008b56:	697b      	ldr	r3, [r7, #20]
 8008b58:	43db      	mvns	r3, r3
 8008b5a:	401a      	ands	r2, r3
 8008b5c:	68fb      	ldr	r3, [r7, #12]
 8008b5e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8008b60:	68fb      	ldr	r3, [r7, #12]
 8008b62:	6a1a      	ldr	r2, [r3, #32]
 8008b64:	68bb      	ldr	r3, [r7, #8]
 8008b66:	f003 031f 	and.w	r3, r3, #31
 8008b6a:	6879      	ldr	r1, [r7, #4]
 8008b6c:	fa01 f303 	lsl.w	r3, r1, r3
 8008b70:	431a      	orrs	r2, r3
 8008b72:	68fb      	ldr	r3, [r7, #12]
 8008b74:	621a      	str	r2, [r3, #32]
}
 8008b76:	bf00      	nop
 8008b78:	371c      	adds	r7, #28
 8008b7a:	46bd      	mov	sp, r7
 8008b7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b80:	4770      	bx	lr
	...

08008b84 <HAL_TIMEx_PWMN_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_PWMN_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8008b84:	b580      	push	{r7, lr}
 8008b86:	b084      	sub	sp, #16
 8008b88:	af00      	add	r7, sp, #0
 8008b8a:	6078      	str	r0, [r7, #4]
 8008b8c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCXN_INSTANCE(htim->Instance, Channel));

  /* Check the TIM complementary channel state */
  if (TIM_CHANNEL_N_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8008b8e:	683b      	ldr	r3, [r7, #0]
 8008b90:	2b00      	cmp	r3, #0
 8008b92:	d109      	bne.n	8008ba8 <HAL_TIMEx_PWMN_Start+0x24>
 8008b94:	687b      	ldr	r3, [r7, #4]
 8008b96:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8008b9a:	b2db      	uxtb	r3, r3
 8008b9c:	2b01      	cmp	r3, #1
 8008b9e:	bf14      	ite	ne
 8008ba0:	2301      	movne	r3, #1
 8008ba2:	2300      	moveq	r3, #0
 8008ba4:	b2db      	uxtb	r3, r3
 8008ba6:	e022      	b.n	8008bee <HAL_TIMEx_PWMN_Start+0x6a>
 8008ba8:	683b      	ldr	r3, [r7, #0]
 8008baa:	2b04      	cmp	r3, #4
 8008bac:	d109      	bne.n	8008bc2 <HAL_TIMEx_PWMN_Start+0x3e>
 8008bae:	687b      	ldr	r3, [r7, #4]
 8008bb0:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8008bb4:	b2db      	uxtb	r3, r3
 8008bb6:	2b01      	cmp	r3, #1
 8008bb8:	bf14      	ite	ne
 8008bba:	2301      	movne	r3, #1
 8008bbc:	2300      	moveq	r3, #0
 8008bbe:	b2db      	uxtb	r3, r3
 8008bc0:	e015      	b.n	8008bee <HAL_TIMEx_PWMN_Start+0x6a>
 8008bc2:	683b      	ldr	r3, [r7, #0]
 8008bc4:	2b08      	cmp	r3, #8
 8008bc6:	d109      	bne.n	8008bdc <HAL_TIMEx_PWMN_Start+0x58>
 8008bc8:	687b      	ldr	r3, [r7, #4]
 8008bca:	f893 3046 	ldrb.w	r3, [r3, #70]	@ 0x46
 8008bce:	b2db      	uxtb	r3, r3
 8008bd0:	2b01      	cmp	r3, #1
 8008bd2:	bf14      	ite	ne
 8008bd4:	2301      	movne	r3, #1
 8008bd6:	2300      	moveq	r3, #0
 8008bd8:	b2db      	uxtb	r3, r3
 8008bda:	e008      	b.n	8008bee <HAL_TIMEx_PWMN_Start+0x6a>
 8008bdc:	687b      	ldr	r3, [r7, #4]
 8008bde:	f893 3047 	ldrb.w	r3, [r3, #71]	@ 0x47
 8008be2:	b2db      	uxtb	r3, r3
 8008be4:	2b01      	cmp	r3, #1
 8008be6:	bf14      	ite	ne
 8008be8:	2301      	movne	r3, #1
 8008bea:	2300      	moveq	r3, #0
 8008bec:	b2db      	uxtb	r3, r3
 8008bee:	2b00      	cmp	r3, #0
 8008bf0:	d001      	beq.n	8008bf6 <HAL_TIMEx_PWMN_Start+0x72>
  {
    return HAL_ERROR;
 8008bf2:	2301      	movs	r3, #1
 8008bf4:	e069      	b.n	8008cca <HAL_TIMEx_PWMN_Start+0x146>
  }

  /* Set the TIM complementary channel state */
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8008bf6:	683b      	ldr	r3, [r7, #0]
 8008bf8:	2b00      	cmp	r3, #0
 8008bfa:	d104      	bne.n	8008c06 <HAL_TIMEx_PWMN_Start+0x82>
 8008bfc:	687b      	ldr	r3, [r7, #4]
 8008bfe:	2202      	movs	r2, #2
 8008c00:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8008c04:	e013      	b.n	8008c2e <HAL_TIMEx_PWMN_Start+0xaa>
 8008c06:	683b      	ldr	r3, [r7, #0]
 8008c08:	2b04      	cmp	r3, #4
 8008c0a:	d104      	bne.n	8008c16 <HAL_TIMEx_PWMN_Start+0x92>
 8008c0c:	687b      	ldr	r3, [r7, #4]
 8008c0e:	2202      	movs	r2, #2
 8008c10:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8008c14:	e00b      	b.n	8008c2e <HAL_TIMEx_PWMN_Start+0xaa>
 8008c16:	683b      	ldr	r3, [r7, #0]
 8008c18:	2b08      	cmp	r3, #8
 8008c1a:	d104      	bne.n	8008c26 <HAL_TIMEx_PWMN_Start+0xa2>
 8008c1c:	687b      	ldr	r3, [r7, #4]
 8008c1e:	2202      	movs	r2, #2
 8008c20:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8008c24:	e003      	b.n	8008c2e <HAL_TIMEx_PWMN_Start+0xaa>
 8008c26:	687b      	ldr	r3, [r7, #4]
 8008c28:	2202      	movs	r2, #2
 8008c2a:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Enable the complementary PWM output  */
  TIM_CCxNChannelCmd(htim->Instance, Channel, TIM_CCxN_ENABLE);
 8008c2e:	687b      	ldr	r3, [r7, #4]
 8008c30:	681b      	ldr	r3, [r3, #0]
 8008c32:	2204      	movs	r2, #4
 8008c34:	6839      	ldr	r1, [r7, #0]
 8008c36:	4618      	mov	r0, r3
 8008c38:	f000 fa0a 	bl	8009050 <TIM_CCxNChannelCmd>

  /* Enable the Main Output */
  __HAL_TIM_MOE_ENABLE(htim);
 8008c3c:	687b      	ldr	r3, [r7, #4]
 8008c3e:	681b      	ldr	r3, [r3, #0]
 8008c40:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8008c42:	687b      	ldr	r3, [r7, #4]
 8008c44:	681b      	ldr	r3, [r3, #0]
 8008c46:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8008c4a:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008c4c:	687b      	ldr	r3, [r7, #4]
 8008c4e:	681b      	ldr	r3, [r3, #0]
 8008c50:	4a20      	ldr	r2, [pc, #128]	@ (8008cd4 <HAL_TIMEx_PWMN_Start+0x150>)
 8008c52:	4293      	cmp	r3, r2
 8008c54:	d018      	beq.n	8008c88 <HAL_TIMEx_PWMN_Start+0x104>
 8008c56:	687b      	ldr	r3, [r7, #4]
 8008c58:	681b      	ldr	r3, [r3, #0]
 8008c5a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008c5e:	d013      	beq.n	8008c88 <HAL_TIMEx_PWMN_Start+0x104>
 8008c60:	687b      	ldr	r3, [r7, #4]
 8008c62:	681b      	ldr	r3, [r3, #0]
 8008c64:	4a1c      	ldr	r2, [pc, #112]	@ (8008cd8 <HAL_TIMEx_PWMN_Start+0x154>)
 8008c66:	4293      	cmp	r3, r2
 8008c68:	d00e      	beq.n	8008c88 <HAL_TIMEx_PWMN_Start+0x104>
 8008c6a:	687b      	ldr	r3, [r7, #4]
 8008c6c:	681b      	ldr	r3, [r3, #0]
 8008c6e:	4a1b      	ldr	r2, [pc, #108]	@ (8008cdc <HAL_TIMEx_PWMN_Start+0x158>)
 8008c70:	4293      	cmp	r3, r2
 8008c72:	d009      	beq.n	8008c88 <HAL_TIMEx_PWMN_Start+0x104>
 8008c74:	687b      	ldr	r3, [r7, #4]
 8008c76:	681b      	ldr	r3, [r3, #0]
 8008c78:	4a19      	ldr	r2, [pc, #100]	@ (8008ce0 <HAL_TIMEx_PWMN_Start+0x15c>)
 8008c7a:	4293      	cmp	r3, r2
 8008c7c:	d004      	beq.n	8008c88 <HAL_TIMEx_PWMN_Start+0x104>
 8008c7e:	687b      	ldr	r3, [r7, #4]
 8008c80:	681b      	ldr	r3, [r3, #0]
 8008c82:	4a18      	ldr	r2, [pc, #96]	@ (8008ce4 <HAL_TIMEx_PWMN_Start+0x160>)
 8008c84:	4293      	cmp	r3, r2
 8008c86:	d115      	bne.n	8008cb4 <HAL_TIMEx_PWMN_Start+0x130>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8008c88:	687b      	ldr	r3, [r7, #4]
 8008c8a:	681b      	ldr	r3, [r3, #0]
 8008c8c:	689a      	ldr	r2, [r3, #8]
 8008c8e:	4b16      	ldr	r3, [pc, #88]	@ (8008ce8 <HAL_TIMEx_PWMN_Start+0x164>)
 8008c90:	4013      	ands	r3, r2
 8008c92:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008c94:	68fb      	ldr	r3, [r7, #12]
 8008c96:	2b06      	cmp	r3, #6
 8008c98:	d015      	beq.n	8008cc6 <HAL_TIMEx_PWMN_Start+0x142>
 8008c9a:	68fb      	ldr	r3, [r7, #12]
 8008c9c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8008ca0:	d011      	beq.n	8008cc6 <HAL_TIMEx_PWMN_Start+0x142>
    {
      __HAL_TIM_ENABLE(htim);
 8008ca2:	687b      	ldr	r3, [r7, #4]
 8008ca4:	681b      	ldr	r3, [r3, #0]
 8008ca6:	681a      	ldr	r2, [r3, #0]
 8008ca8:	687b      	ldr	r3, [r7, #4]
 8008caa:	681b      	ldr	r3, [r3, #0]
 8008cac:	f042 0201 	orr.w	r2, r2, #1
 8008cb0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008cb2:	e008      	b.n	8008cc6 <HAL_TIMEx_PWMN_Start+0x142>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8008cb4:	687b      	ldr	r3, [r7, #4]
 8008cb6:	681b      	ldr	r3, [r3, #0]
 8008cb8:	681a      	ldr	r2, [r3, #0]
 8008cba:	687b      	ldr	r3, [r7, #4]
 8008cbc:	681b      	ldr	r3, [r3, #0]
 8008cbe:	f042 0201 	orr.w	r2, r2, #1
 8008cc2:	601a      	str	r2, [r3, #0]
 8008cc4:	e000      	b.n	8008cc8 <HAL_TIMEx_PWMN_Start+0x144>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008cc6:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8008cc8:	2300      	movs	r3, #0
}
 8008cca:	4618      	mov	r0, r3
 8008ccc:	3710      	adds	r7, #16
 8008cce:	46bd      	mov	sp, r7
 8008cd0:	bd80      	pop	{r7, pc}
 8008cd2:	bf00      	nop
 8008cd4:	40012c00 	.word	0x40012c00
 8008cd8:	40000400 	.word	0x40000400
 8008cdc:	40000800 	.word	0x40000800
 8008ce0:	40013400 	.word	0x40013400
 8008ce4:	40014000 	.word	0x40014000
 8008ce8:	00010007 	.word	0x00010007

08008cec <HAL_TIMEx_PWMN_Stop>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_PWMN_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8008cec:	b580      	push	{r7, lr}
 8008cee:	b082      	sub	sp, #8
 8008cf0:	af00      	add	r7, sp, #0
 8008cf2:	6078      	str	r0, [r7, #4]
 8008cf4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCXN_INSTANCE(htim->Instance, Channel));

  /* Disable the complementary PWM output  */
  TIM_CCxNChannelCmd(htim->Instance, Channel, TIM_CCxN_DISABLE);
 8008cf6:	687b      	ldr	r3, [r7, #4]
 8008cf8:	681b      	ldr	r3, [r3, #0]
 8008cfa:	2200      	movs	r2, #0
 8008cfc:	6839      	ldr	r1, [r7, #0]
 8008cfe:	4618      	mov	r0, r3
 8008d00:	f000 f9a6 	bl	8009050 <TIM_CCxNChannelCmd>

  /* Disable the Main Output */
  __HAL_TIM_MOE_DISABLE(htim);
 8008d04:	687b      	ldr	r3, [r7, #4]
 8008d06:	681b      	ldr	r3, [r3, #0]
 8008d08:	6a1a      	ldr	r2, [r3, #32]
 8008d0a:	f241 1311 	movw	r3, #4369	@ 0x1111
 8008d0e:	4013      	ands	r3, r2
 8008d10:	2b00      	cmp	r3, #0
 8008d12:	d10f      	bne.n	8008d34 <HAL_TIMEx_PWMN_Stop+0x48>
 8008d14:	687b      	ldr	r3, [r7, #4]
 8008d16:	681b      	ldr	r3, [r3, #0]
 8008d18:	6a1a      	ldr	r2, [r3, #32]
 8008d1a:	f244 4344 	movw	r3, #17476	@ 0x4444
 8008d1e:	4013      	ands	r3, r2
 8008d20:	2b00      	cmp	r3, #0
 8008d22:	d107      	bne.n	8008d34 <HAL_TIMEx_PWMN_Stop+0x48>
 8008d24:	687b      	ldr	r3, [r7, #4]
 8008d26:	681b      	ldr	r3, [r3, #0]
 8008d28:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8008d2a:	687b      	ldr	r3, [r7, #4]
 8008d2c:	681b      	ldr	r3, [r3, #0]
 8008d2e:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8008d32:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8008d34:	687b      	ldr	r3, [r7, #4]
 8008d36:	681b      	ldr	r3, [r3, #0]
 8008d38:	6a1a      	ldr	r2, [r3, #32]
 8008d3a:	f241 1311 	movw	r3, #4369	@ 0x1111
 8008d3e:	4013      	ands	r3, r2
 8008d40:	2b00      	cmp	r3, #0
 8008d42:	d10f      	bne.n	8008d64 <HAL_TIMEx_PWMN_Stop+0x78>
 8008d44:	687b      	ldr	r3, [r7, #4]
 8008d46:	681b      	ldr	r3, [r3, #0]
 8008d48:	6a1a      	ldr	r2, [r3, #32]
 8008d4a:	f244 4344 	movw	r3, #17476	@ 0x4444
 8008d4e:	4013      	ands	r3, r2
 8008d50:	2b00      	cmp	r3, #0
 8008d52:	d107      	bne.n	8008d64 <HAL_TIMEx_PWMN_Stop+0x78>
 8008d54:	687b      	ldr	r3, [r7, #4]
 8008d56:	681b      	ldr	r3, [r3, #0]
 8008d58:	681a      	ldr	r2, [r3, #0]
 8008d5a:	687b      	ldr	r3, [r7, #4]
 8008d5c:	681b      	ldr	r3, [r3, #0]
 8008d5e:	f022 0201 	bic.w	r2, r2, #1
 8008d62:	601a      	str	r2, [r3, #0]

  /* Set the TIM complementary channel state */
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8008d64:	683b      	ldr	r3, [r7, #0]
 8008d66:	2b00      	cmp	r3, #0
 8008d68:	d104      	bne.n	8008d74 <HAL_TIMEx_PWMN_Stop+0x88>
 8008d6a:	687b      	ldr	r3, [r7, #4]
 8008d6c:	2201      	movs	r2, #1
 8008d6e:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8008d72:	e013      	b.n	8008d9c <HAL_TIMEx_PWMN_Stop+0xb0>
 8008d74:	683b      	ldr	r3, [r7, #0]
 8008d76:	2b04      	cmp	r3, #4
 8008d78:	d104      	bne.n	8008d84 <HAL_TIMEx_PWMN_Stop+0x98>
 8008d7a:	687b      	ldr	r3, [r7, #4]
 8008d7c:	2201      	movs	r2, #1
 8008d7e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8008d82:	e00b      	b.n	8008d9c <HAL_TIMEx_PWMN_Stop+0xb0>
 8008d84:	683b      	ldr	r3, [r7, #0]
 8008d86:	2b08      	cmp	r3, #8
 8008d88:	d104      	bne.n	8008d94 <HAL_TIMEx_PWMN_Stop+0xa8>
 8008d8a:	687b      	ldr	r3, [r7, #4]
 8008d8c:	2201      	movs	r2, #1
 8008d8e:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8008d92:	e003      	b.n	8008d9c <HAL_TIMEx_PWMN_Stop+0xb0>
 8008d94:	687b      	ldr	r3, [r7, #4]
 8008d96:	2201      	movs	r2, #1
 8008d98:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Return function status */
  return HAL_OK;
 8008d9c:	2300      	movs	r3, #0
}
 8008d9e:	4618      	mov	r0, r3
 8008da0:	3708      	adds	r7, #8
 8008da2:	46bd      	mov	sp, r7
 8008da4:	bd80      	pop	{r7, pc}
	...

08008da8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8008da8:	b480      	push	{r7}
 8008daa:	b085      	sub	sp, #20
 8008dac:	af00      	add	r7, sp, #0
 8008dae:	6078      	str	r0, [r7, #4]
 8008db0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8008db2:	687b      	ldr	r3, [r7, #4]
 8008db4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8008db8:	2b01      	cmp	r3, #1
 8008dba:	d101      	bne.n	8008dc0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8008dbc:	2302      	movs	r3, #2
 8008dbe:	e065      	b.n	8008e8c <HAL_TIMEx_MasterConfigSynchronization+0xe4>
 8008dc0:	687b      	ldr	r3, [r7, #4]
 8008dc2:	2201      	movs	r2, #1
 8008dc4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008dc8:	687b      	ldr	r3, [r7, #4]
 8008dca:	2202      	movs	r2, #2
 8008dcc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8008dd0:	687b      	ldr	r3, [r7, #4]
 8008dd2:	681b      	ldr	r3, [r3, #0]
 8008dd4:	685b      	ldr	r3, [r3, #4]
 8008dd6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8008dd8:	687b      	ldr	r3, [r7, #4]
 8008dda:	681b      	ldr	r3, [r3, #0]
 8008ddc:	689b      	ldr	r3, [r3, #8]
 8008dde:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8008de0:	687b      	ldr	r3, [r7, #4]
 8008de2:	681b      	ldr	r3, [r3, #0]
 8008de4:	4a2c      	ldr	r2, [pc, #176]	@ (8008e98 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8008de6:	4293      	cmp	r3, r2
 8008de8:	d004      	beq.n	8008df4 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8008dea:	687b      	ldr	r3, [r7, #4]
 8008dec:	681b      	ldr	r3, [r3, #0]
 8008dee:	4a2b      	ldr	r2, [pc, #172]	@ (8008e9c <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8008df0:	4293      	cmp	r3, r2
 8008df2:	d108      	bne.n	8008e06 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8008df4:	68fb      	ldr	r3, [r7, #12]
 8008df6:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 8008dfa:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8008dfc:	683b      	ldr	r3, [r7, #0]
 8008dfe:	685b      	ldr	r3, [r3, #4]
 8008e00:	68fa      	ldr	r2, [r7, #12]
 8008e02:	4313      	orrs	r3, r2
 8008e04:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8008e06:	68fb      	ldr	r3, [r7, #12]
 8008e08:	f023 7300 	bic.w	r3, r3, #33554432	@ 0x2000000
 8008e0c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008e10:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8008e12:	683b      	ldr	r3, [r7, #0]
 8008e14:	681b      	ldr	r3, [r3, #0]
 8008e16:	68fa      	ldr	r2, [r7, #12]
 8008e18:	4313      	orrs	r3, r2
 8008e1a:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8008e1c:	687b      	ldr	r3, [r7, #4]
 8008e1e:	681b      	ldr	r3, [r3, #0]
 8008e20:	68fa      	ldr	r2, [r7, #12]
 8008e22:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008e24:	687b      	ldr	r3, [r7, #4]
 8008e26:	681b      	ldr	r3, [r3, #0]
 8008e28:	4a1b      	ldr	r2, [pc, #108]	@ (8008e98 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8008e2a:	4293      	cmp	r3, r2
 8008e2c:	d018      	beq.n	8008e60 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8008e2e:	687b      	ldr	r3, [r7, #4]
 8008e30:	681b      	ldr	r3, [r3, #0]
 8008e32:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008e36:	d013      	beq.n	8008e60 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8008e38:	687b      	ldr	r3, [r7, #4]
 8008e3a:	681b      	ldr	r3, [r3, #0]
 8008e3c:	4a18      	ldr	r2, [pc, #96]	@ (8008ea0 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8008e3e:	4293      	cmp	r3, r2
 8008e40:	d00e      	beq.n	8008e60 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8008e42:	687b      	ldr	r3, [r7, #4]
 8008e44:	681b      	ldr	r3, [r3, #0]
 8008e46:	4a17      	ldr	r2, [pc, #92]	@ (8008ea4 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8008e48:	4293      	cmp	r3, r2
 8008e4a:	d009      	beq.n	8008e60 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8008e4c:	687b      	ldr	r3, [r7, #4]
 8008e4e:	681b      	ldr	r3, [r3, #0]
 8008e50:	4a12      	ldr	r2, [pc, #72]	@ (8008e9c <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8008e52:	4293      	cmp	r3, r2
 8008e54:	d004      	beq.n	8008e60 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8008e56:	687b      	ldr	r3, [r7, #4]
 8008e58:	681b      	ldr	r3, [r3, #0]
 8008e5a:	4a13      	ldr	r2, [pc, #76]	@ (8008ea8 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8008e5c:	4293      	cmp	r3, r2
 8008e5e:	d10c      	bne.n	8008e7a <HAL_TIMEx_MasterConfigSynchronization+0xd2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8008e60:	68bb      	ldr	r3, [r7, #8]
 8008e62:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8008e66:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8008e68:	683b      	ldr	r3, [r7, #0]
 8008e6a:	689b      	ldr	r3, [r3, #8]
 8008e6c:	68ba      	ldr	r2, [r7, #8]
 8008e6e:	4313      	orrs	r3, r2
 8008e70:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8008e72:	687b      	ldr	r3, [r7, #4]
 8008e74:	681b      	ldr	r3, [r3, #0]
 8008e76:	68ba      	ldr	r2, [r7, #8]
 8008e78:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8008e7a:	687b      	ldr	r3, [r7, #4]
 8008e7c:	2201      	movs	r2, #1
 8008e7e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8008e82:	687b      	ldr	r3, [r7, #4]
 8008e84:	2200      	movs	r2, #0
 8008e86:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8008e8a:	2300      	movs	r3, #0
}
 8008e8c:	4618      	mov	r0, r3
 8008e8e:	3714      	adds	r7, #20
 8008e90:	46bd      	mov	sp, r7
 8008e92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e96:	4770      	bx	lr
 8008e98:	40012c00 	.word	0x40012c00
 8008e9c:	40013400 	.word	0x40013400
 8008ea0:	40000400 	.word	0x40000400
 8008ea4:	40000800 	.word	0x40000800
 8008ea8:	40014000 	.word	0x40014000

08008eac <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8008eac:	b480      	push	{r7}
 8008eae:	b085      	sub	sp, #20
 8008eb0:	af00      	add	r7, sp, #0
 8008eb2:	6078      	str	r0, [r7, #4]
 8008eb4:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8008eb6:	2300      	movs	r3, #0
 8008eb8:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));
  assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8008eba:	687b      	ldr	r3, [r7, #4]
 8008ebc:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8008ec0:	2b01      	cmp	r3, #1
 8008ec2:	d101      	bne.n	8008ec8 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8008ec4:	2302      	movs	r3, #2
 8008ec6:	e073      	b.n	8008fb0 <HAL_TIMEx_ConfigBreakDeadTime+0x104>
 8008ec8:	687b      	ldr	r3, [r7, #4]
 8008eca:	2201      	movs	r2, #1
 8008ecc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8008ed0:	68fb      	ldr	r3, [r7, #12]
 8008ed2:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 8008ed6:	683b      	ldr	r3, [r7, #0]
 8008ed8:	68db      	ldr	r3, [r3, #12]
 8008eda:	4313      	orrs	r3, r2
 8008edc:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8008ede:	68fb      	ldr	r3, [r7, #12]
 8008ee0:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8008ee4:	683b      	ldr	r3, [r7, #0]
 8008ee6:	689b      	ldr	r3, [r3, #8]
 8008ee8:	4313      	orrs	r3, r2
 8008eea:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8008eec:	68fb      	ldr	r3, [r7, #12]
 8008eee:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 8008ef2:	683b      	ldr	r3, [r7, #0]
 8008ef4:	685b      	ldr	r3, [r3, #4]
 8008ef6:	4313      	orrs	r3, r2
 8008ef8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8008efa:	68fb      	ldr	r3, [r7, #12]
 8008efc:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 8008f00:	683b      	ldr	r3, [r7, #0]
 8008f02:	681b      	ldr	r3, [r3, #0]
 8008f04:	4313      	orrs	r3, r2
 8008f06:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8008f08:	68fb      	ldr	r3, [r7, #12]
 8008f0a:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8008f0e:	683b      	ldr	r3, [r7, #0]
 8008f10:	691b      	ldr	r3, [r3, #16]
 8008f12:	4313      	orrs	r3, r2
 8008f14:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8008f16:	68fb      	ldr	r3, [r7, #12]
 8008f18:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 8008f1c:	683b      	ldr	r3, [r7, #0]
 8008f1e:	695b      	ldr	r3, [r3, #20]
 8008f20:	4313      	orrs	r3, r2
 8008f22:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8008f24:	68fb      	ldr	r3, [r7, #12]
 8008f26:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 8008f2a:	683b      	ldr	r3, [r7, #0]
 8008f2c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008f2e:	4313      	orrs	r3, r2
 8008f30:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8008f32:	68fb      	ldr	r3, [r7, #12]
 8008f34:	f423 2270 	bic.w	r2, r3, #983040	@ 0xf0000
 8008f38:	683b      	ldr	r3, [r7, #0]
 8008f3a:	699b      	ldr	r3, [r3, #24]
 8008f3c:	041b      	lsls	r3, r3, #16
 8008f3e:	4313      	orrs	r3, r2
 8008f40:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 8008f42:	68fb      	ldr	r3, [r7, #12]
 8008f44:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 8008f48:	683b      	ldr	r3, [r7, #0]
 8008f4a:	69db      	ldr	r3, [r3, #28]
 8008f4c:	4313      	orrs	r3, r2
 8008f4e:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8008f50:	687b      	ldr	r3, [r7, #4]
 8008f52:	681b      	ldr	r3, [r3, #0]
 8008f54:	4a19      	ldr	r2, [pc, #100]	@ (8008fbc <HAL_TIMEx_ConfigBreakDeadTime+0x110>)
 8008f56:	4293      	cmp	r3, r2
 8008f58:	d004      	beq.n	8008f64 <HAL_TIMEx_ConfigBreakDeadTime+0xb8>
 8008f5a:	687b      	ldr	r3, [r7, #4]
 8008f5c:	681b      	ldr	r3, [r3, #0]
 8008f5e:	4a18      	ldr	r2, [pc, #96]	@ (8008fc0 <HAL_TIMEx_ConfigBreakDeadTime+0x114>)
 8008f60:	4293      	cmp	r3, r2
 8008f62:	d11c      	bne.n	8008f9e <HAL_TIMEx_ConfigBreakDeadTime+0xf2>
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));
    assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8008f64:	68fb      	ldr	r3, [r7, #12]
 8008f66:	f423 0270 	bic.w	r2, r3, #15728640	@ 0xf00000
 8008f6a:	683b      	ldr	r3, [r7, #0]
 8008f6c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008f6e:	051b      	lsls	r3, r3, #20
 8008f70:	4313      	orrs	r3, r2
 8008f72:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8008f74:	68fb      	ldr	r3, [r7, #12]
 8008f76:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 8008f7a:	683b      	ldr	r3, [r7, #0]
 8008f7c:	6a1b      	ldr	r3, [r3, #32]
 8008f7e:	4313      	orrs	r3, r2
 8008f80:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8008f82:	68fb      	ldr	r3, [r7, #12]
 8008f84:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 8008f88:	683b      	ldr	r3, [r7, #0]
 8008f8a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008f8c:	4313      	orrs	r3, r2
 8008f8e:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 8008f90:	68fb      	ldr	r3, [r7, #12]
 8008f92:	f023 5200 	bic.w	r2, r3, #536870912	@ 0x20000000
 8008f96:	683b      	ldr	r3, [r7, #0]
 8008f98:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008f9a:	4313      	orrs	r3, r2
 8008f9c:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8008f9e:	687b      	ldr	r3, [r7, #4]
 8008fa0:	681b      	ldr	r3, [r3, #0]
 8008fa2:	68fa      	ldr	r2, [r7, #12]
 8008fa4:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 8008fa6:	687b      	ldr	r3, [r7, #4]
 8008fa8:	2200      	movs	r2, #0
 8008faa:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8008fae:	2300      	movs	r3, #0
}
 8008fb0:	4618      	mov	r0, r3
 8008fb2:	3714      	adds	r7, #20
 8008fb4:	46bd      	mov	sp, r7
 8008fb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fba:	4770      	bx	lr
 8008fbc:	40012c00 	.word	0x40012c00
 8008fc0:	40013400 	.word	0x40013400

08008fc4 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8008fc4:	b480      	push	{r7}
 8008fc6:	b083      	sub	sp, #12
 8008fc8:	af00      	add	r7, sp, #0
 8008fca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8008fcc:	bf00      	nop
 8008fce:	370c      	adds	r7, #12
 8008fd0:	46bd      	mov	sp, r7
 8008fd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fd6:	4770      	bx	lr

08008fd8 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8008fd8:	b480      	push	{r7}
 8008fda:	b083      	sub	sp, #12
 8008fdc:	af00      	add	r7, sp, #0
 8008fde:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8008fe0:	bf00      	nop
 8008fe2:	370c      	adds	r7, #12
 8008fe4:	46bd      	mov	sp, r7
 8008fe6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fea:	4770      	bx	lr

08008fec <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8008fec:	b480      	push	{r7}
 8008fee:	b083      	sub	sp, #12
 8008ff0:	af00      	add	r7, sp, #0
 8008ff2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8008ff4:	bf00      	nop
 8008ff6:	370c      	adds	r7, #12
 8008ff8:	46bd      	mov	sp, r7
 8008ffa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ffe:	4770      	bx	lr

08009000 <HAL_TIMEx_EncoderIndexCallback>:
  * @brief  Encoder index callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_EncoderIndexCallback(TIM_HandleTypeDef *htim)
{
 8009000:	b480      	push	{r7}
 8009002:	b083      	sub	sp, #12
 8009004:	af00      	add	r7, sp, #0
 8009006:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_EncoderIndexCallback could be implemented in the user file
   */
}
 8009008:	bf00      	nop
 800900a:	370c      	adds	r7, #12
 800900c:	46bd      	mov	sp, r7
 800900e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009012:	4770      	bx	lr

08009014 <HAL_TIMEx_DirectionChangeCallback>:
  * @brief  Direction change callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_DirectionChangeCallback(TIM_HandleTypeDef *htim)
{
 8009014:	b480      	push	{r7}
 8009016:	b083      	sub	sp, #12
 8009018:	af00      	add	r7, sp, #0
 800901a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_DirectionChangeCallback could be implemented in the user file
   */
}
 800901c:	bf00      	nop
 800901e:	370c      	adds	r7, #12
 8009020:	46bd      	mov	sp, r7
 8009022:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009026:	4770      	bx	lr

08009028 <HAL_TIMEx_IndexErrorCallback>:
  * @brief  Index error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_IndexErrorCallback(TIM_HandleTypeDef *htim)
{
 8009028:	b480      	push	{r7}
 800902a:	b083      	sub	sp, #12
 800902c:	af00      	add	r7, sp, #0
 800902e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_IndexErrorCallback could be implemented in the user file
   */
}
 8009030:	bf00      	nop
 8009032:	370c      	adds	r7, #12
 8009034:	46bd      	mov	sp, r7
 8009036:	f85d 7b04 	ldr.w	r7, [sp], #4
 800903a:	4770      	bx	lr

0800903c <HAL_TIMEx_TransitionErrorCallback>:
  * @brief  Transition error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_TransitionErrorCallback(TIM_HandleTypeDef *htim)
{
 800903c:	b480      	push	{r7}
 800903e:	b083      	sub	sp, #12
 8009040:	af00      	add	r7, sp, #0
 8009042:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_TransitionErrorCallback could be implemented in the user file
   */
}
 8009044:	bf00      	nop
 8009046:	370c      	adds	r7, #12
 8009048:	46bd      	mov	sp, r7
 800904a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800904e:	4770      	bx	lr

08009050 <TIM_CCxNChannelCmd>:
  * @param  ChannelNState specifies the TIM Channel CCxNE bit new state.
  *          This parameter can be: TIM_CCxN_ENABLE or TIM_CCxN_Disable.
  * @retval None
  */
static void TIM_CCxNChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelNState)
{
 8009050:	b480      	push	{r7}
 8009052:	b087      	sub	sp, #28
 8009054:	af00      	add	r7, sp, #0
 8009056:	60f8      	str	r0, [r7, #12]
 8009058:	60b9      	str	r1, [r7, #8]
 800905a:	607a      	str	r2, [r7, #4]
  uint32_t tmp;

  tmp = TIM_CCER_CC1NE << (Channel & 0xFU); /* 0xFU = 15 bits max shift */
 800905c:	68bb      	ldr	r3, [r7, #8]
 800905e:	f003 030f 	and.w	r3, r3, #15
 8009062:	2204      	movs	r2, #4
 8009064:	fa02 f303 	lsl.w	r3, r2, r3
 8009068:	617b      	str	r3, [r7, #20]

  /* Reset the CCxNE Bit */
  TIMx->CCER &=  ~tmp;
 800906a:	68fb      	ldr	r3, [r7, #12]
 800906c:	6a1a      	ldr	r2, [r3, #32]
 800906e:	697b      	ldr	r3, [r7, #20]
 8009070:	43db      	mvns	r3, r3
 8009072:	401a      	ands	r2, r3
 8009074:	68fb      	ldr	r3, [r7, #12]
 8009076:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxNE Bit */
  TIMx->CCER |= (uint32_t)(ChannelNState << (Channel & 0xFU)); /* 0xFU = 15 bits max shift */
 8009078:	68fb      	ldr	r3, [r7, #12]
 800907a:	6a1a      	ldr	r2, [r3, #32]
 800907c:	68bb      	ldr	r3, [r7, #8]
 800907e:	f003 030f 	and.w	r3, r3, #15
 8009082:	6879      	ldr	r1, [r7, #4]
 8009084:	fa01 f303 	lsl.w	r3, r1, r3
 8009088:	431a      	orrs	r2, r3
 800908a:	68fb      	ldr	r3, [r7, #12]
 800908c:	621a      	str	r2, [r3, #32]
}
 800908e:	bf00      	nop
 8009090:	371c      	adds	r7, #28
 8009092:	46bd      	mov	sp, r7
 8009094:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009098:	4770      	bx	lr

0800909a <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800909a:	b580      	push	{r7, lr}
 800909c:	b082      	sub	sp, #8
 800909e:	af00      	add	r7, sp, #0
 80090a0:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80090a2:	687b      	ldr	r3, [r7, #4]
 80090a4:	2b00      	cmp	r3, #0
 80090a6:	d101      	bne.n	80090ac <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80090a8:	2301      	movs	r3, #1
 80090aa:	e042      	b.n	8009132 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80090ac:	687b      	ldr	r3, [r7, #4]
 80090ae:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80090b2:	2b00      	cmp	r3, #0
 80090b4:	d106      	bne.n	80090c4 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80090b6:	687b      	ldr	r3, [r7, #4]
 80090b8:	2200      	movs	r2, #0
 80090ba:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80090be:	6878      	ldr	r0, [r7, #4]
 80090c0:	f7f9 f990 	bl	80023e4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80090c4:	687b      	ldr	r3, [r7, #4]
 80090c6:	2224      	movs	r2, #36	@ 0x24
 80090c8:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 80090cc:	687b      	ldr	r3, [r7, #4]
 80090ce:	681b      	ldr	r3, [r3, #0]
 80090d0:	681a      	ldr	r2, [r3, #0]
 80090d2:	687b      	ldr	r3, [r7, #4]
 80090d4:	681b      	ldr	r3, [r3, #0]
 80090d6:	f022 0201 	bic.w	r2, r2, #1
 80090da:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80090dc:	687b      	ldr	r3, [r7, #4]
 80090de:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80090e0:	2b00      	cmp	r3, #0
 80090e2:	d002      	beq.n	80090ea <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 80090e4:	6878      	ldr	r0, [r7, #4]
 80090e6:	f000 fed7 	bl	8009e98 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80090ea:	6878      	ldr	r0, [r7, #4]
 80090ec:	f000 fc08 	bl	8009900 <UART_SetConfig>
 80090f0:	4603      	mov	r3, r0
 80090f2:	2b01      	cmp	r3, #1
 80090f4:	d101      	bne.n	80090fa <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 80090f6:	2301      	movs	r3, #1
 80090f8:	e01b      	b.n	8009132 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80090fa:	687b      	ldr	r3, [r7, #4]
 80090fc:	681b      	ldr	r3, [r3, #0]
 80090fe:	685a      	ldr	r2, [r3, #4]
 8009100:	687b      	ldr	r3, [r7, #4]
 8009102:	681b      	ldr	r3, [r3, #0]
 8009104:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8009108:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800910a:	687b      	ldr	r3, [r7, #4]
 800910c:	681b      	ldr	r3, [r3, #0]
 800910e:	689a      	ldr	r2, [r3, #8]
 8009110:	687b      	ldr	r3, [r7, #4]
 8009112:	681b      	ldr	r3, [r3, #0]
 8009114:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8009118:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800911a:	687b      	ldr	r3, [r7, #4]
 800911c:	681b      	ldr	r3, [r3, #0]
 800911e:	681a      	ldr	r2, [r3, #0]
 8009120:	687b      	ldr	r3, [r7, #4]
 8009122:	681b      	ldr	r3, [r3, #0]
 8009124:	f042 0201 	orr.w	r2, r2, #1
 8009128:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800912a:	6878      	ldr	r0, [r7, #4]
 800912c:	f000 ff56 	bl	8009fdc <UART_CheckIdleState>
 8009130:	4603      	mov	r3, r0
}
 8009132:	4618      	mov	r0, r3
 8009134:	3708      	adds	r7, #8
 8009136:	46bd      	mov	sp, r7
 8009138:	bd80      	pop	{r7, pc}
	...

0800913c <HAL_UART_Transmit_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 800913c:	b580      	push	{r7, lr}
 800913e:	b08a      	sub	sp, #40	@ 0x28
 8009140:	af00      	add	r7, sp, #0
 8009142:	60f8      	str	r0, [r7, #12]
 8009144:	60b9      	str	r1, [r7, #8]
 8009146:	4613      	mov	r3, r2
 8009148:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800914a:	68fb      	ldr	r3, [r7, #12]
 800914c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009150:	2b20      	cmp	r3, #32
 8009152:	d167      	bne.n	8009224 <HAL_UART_Transmit_DMA+0xe8>
  {
    if ((pData == NULL) || (Size == 0U))
 8009154:	68bb      	ldr	r3, [r7, #8]
 8009156:	2b00      	cmp	r3, #0
 8009158:	d002      	beq.n	8009160 <HAL_UART_Transmit_DMA+0x24>
 800915a:	88fb      	ldrh	r3, [r7, #6]
 800915c:	2b00      	cmp	r3, #0
 800915e:	d101      	bne.n	8009164 <HAL_UART_Transmit_DMA+0x28>
    {
      return HAL_ERROR;
 8009160:	2301      	movs	r3, #1
 8009162:	e060      	b.n	8009226 <HAL_UART_Transmit_DMA+0xea>
    }

    huart->pTxBuffPtr  = pData;
 8009164:	68fb      	ldr	r3, [r7, #12]
 8009166:	68ba      	ldr	r2, [r7, #8]
 8009168:	651a      	str	r2, [r3, #80]	@ 0x50
    huart->TxXferSize  = Size;
 800916a:	68fb      	ldr	r3, [r7, #12]
 800916c:	88fa      	ldrh	r2, [r7, #6]
 800916e:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 8009172:	68fb      	ldr	r3, [r7, #12]
 8009174:	88fa      	ldrh	r2, [r7, #6]
 8009176:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800917a:	68fb      	ldr	r3, [r7, #12]
 800917c:	2200      	movs	r2, #0
 800917e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8009182:	68fb      	ldr	r3, [r7, #12]
 8009184:	2221      	movs	r2, #33	@ 0x21
 8009186:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    if (huart->hdmatx != NULL)
 800918a:	68fb      	ldr	r3, [r7, #12]
 800918c:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800918e:	2b00      	cmp	r3, #0
 8009190:	d028      	beq.n	80091e4 <HAL_UART_Transmit_DMA+0xa8>
    {
      /* Set the UART DMA transfer complete callback */
      huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 8009192:	68fb      	ldr	r3, [r7, #12]
 8009194:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8009196:	4a26      	ldr	r2, [pc, #152]	@ (8009230 <HAL_UART_Transmit_DMA+0xf4>)
 8009198:	62da      	str	r2, [r3, #44]	@ 0x2c

      /* Set the UART DMA Half transfer complete callback */
      huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 800919a:	68fb      	ldr	r3, [r7, #12]
 800919c:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800919e:	4a25      	ldr	r2, [pc, #148]	@ (8009234 <HAL_UART_Transmit_DMA+0xf8>)
 80091a0:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Set the DMA error callback */
      huart->hdmatx->XferErrorCallback = UART_DMAError;
 80091a2:	68fb      	ldr	r3, [r7, #12]
 80091a4:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80091a6:	4a24      	ldr	r2, [pc, #144]	@ (8009238 <HAL_UART_Transmit_DMA+0xfc>)
 80091a8:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Set the DMA abort callback */
      huart->hdmatx->XferAbortCallback = NULL;
 80091aa:	68fb      	ldr	r3, [r7, #12]
 80091ac:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80091ae:	2200      	movs	r2, #0
 80091b0:	639a      	str	r2, [r3, #56]	@ 0x38

      /* Enable the UART transmit DMA channel */
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 80091b2:	68fb      	ldr	r3, [r7, #12]
 80091b4:	6fd8      	ldr	r0, [r3, #124]	@ 0x7c
 80091b6:	68fb      	ldr	r3, [r7, #12]
 80091b8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80091ba:	4619      	mov	r1, r3
 80091bc:	68fb      	ldr	r3, [r7, #12]
 80091be:	681b      	ldr	r3, [r3, #0]
 80091c0:	3328      	adds	r3, #40	@ 0x28
 80091c2:	461a      	mov	r2, r3
 80091c4:	88fb      	ldrh	r3, [r7, #6]
 80091c6:	f7fc f9eb 	bl	80055a0 <HAL_DMA_Start_IT>
 80091ca:	4603      	mov	r3, r0
 80091cc:	2b00      	cmp	r3, #0
 80091ce:	d009      	beq.n	80091e4 <HAL_UART_Transmit_DMA+0xa8>
      {
        /* Set error code to DMA */
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 80091d0:	68fb      	ldr	r3, [r7, #12]
 80091d2:	2210      	movs	r2, #16
 80091d4:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

        /* Restore huart->gState to ready */
        huart->gState = HAL_UART_STATE_READY;
 80091d8:	68fb      	ldr	r3, [r7, #12]
 80091da:	2220      	movs	r2, #32
 80091dc:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_ERROR;
 80091e0:	2301      	movs	r3, #1
 80091e2:	e020      	b.n	8009226 <HAL_UART_Transmit_DMA+0xea>
      }
    }
    /* Clear the TC flag in the ICR register */
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 80091e4:	68fb      	ldr	r3, [r7, #12]
 80091e6:	681b      	ldr	r3, [r3, #0]
 80091e8:	2240      	movs	r2, #64	@ 0x40
 80091ea:	621a      	str	r2, [r3, #32]

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
    in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 80091ec:	68fb      	ldr	r3, [r7, #12]
 80091ee:	681b      	ldr	r3, [r3, #0]
 80091f0:	3308      	adds	r3, #8
 80091f2:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80091f4:	697b      	ldr	r3, [r7, #20]
 80091f6:	e853 3f00 	ldrex	r3, [r3]
 80091fa:	613b      	str	r3, [r7, #16]
   return(result);
 80091fc:	693b      	ldr	r3, [r7, #16]
 80091fe:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8009202:	627b      	str	r3, [r7, #36]	@ 0x24
 8009204:	68fb      	ldr	r3, [r7, #12]
 8009206:	681b      	ldr	r3, [r3, #0]
 8009208:	3308      	adds	r3, #8
 800920a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800920c:	623a      	str	r2, [r7, #32]
 800920e:	61fb      	str	r3, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009210:	69f9      	ldr	r1, [r7, #28]
 8009212:	6a3a      	ldr	r2, [r7, #32]
 8009214:	e841 2300 	strex	r3, r2, [r1]
 8009218:	61bb      	str	r3, [r7, #24]
   return(result);
 800921a:	69bb      	ldr	r3, [r7, #24]
 800921c:	2b00      	cmp	r3, #0
 800921e:	d1e5      	bne.n	80091ec <HAL_UART_Transmit_DMA+0xb0>

    return HAL_OK;
 8009220:	2300      	movs	r3, #0
 8009222:	e000      	b.n	8009226 <HAL_UART_Transmit_DMA+0xea>
  }
  else
  {
    return HAL_BUSY;
 8009224:	2302      	movs	r3, #2
  }
}
 8009226:	4618      	mov	r0, r3
 8009228:	3728      	adds	r7, #40	@ 0x28
 800922a:	46bd      	mov	sp, r7
 800922c:	bd80      	pop	{r7, pc}
 800922e:	bf00      	nop
 8009230:	0800a359 	.word	0x0800a359
 8009234:	0800a3f3 	.word	0x0800a3f3
 8009238:	0800a40f 	.word	0x0800a40f

0800923c <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800923c:	b580      	push	{r7, lr}
 800923e:	b0ba      	sub	sp, #232	@ 0xe8
 8009240:	af00      	add	r7, sp, #0
 8009242:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8009244:	687b      	ldr	r3, [r7, #4]
 8009246:	681b      	ldr	r3, [r3, #0]
 8009248:	69db      	ldr	r3, [r3, #28]
 800924a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800924e:	687b      	ldr	r3, [r7, #4]
 8009250:	681b      	ldr	r3, [r3, #0]
 8009252:	681b      	ldr	r3, [r3, #0]
 8009254:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8009258:	687b      	ldr	r3, [r7, #4]
 800925a:	681b      	ldr	r3, [r3, #0]
 800925c:	689b      	ldr	r3, [r3, #8]
 800925e:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8009262:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 8009266:	f640 030f 	movw	r3, #2063	@ 0x80f
 800926a:	4013      	ands	r3, r2
 800926c:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 8009270:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8009274:	2b00      	cmp	r3, #0
 8009276:	d11b      	bne.n	80092b0 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8009278:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800927c:	f003 0320 	and.w	r3, r3, #32
 8009280:	2b00      	cmp	r3, #0
 8009282:	d015      	beq.n	80092b0 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8009284:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8009288:	f003 0320 	and.w	r3, r3, #32
 800928c:	2b00      	cmp	r3, #0
 800928e:	d105      	bne.n	800929c <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8009290:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8009294:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8009298:	2b00      	cmp	r3, #0
 800929a:	d009      	beq.n	80092b0 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 800929c:	687b      	ldr	r3, [r7, #4]
 800929e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80092a0:	2b00      	cmp	r3, #0
 80092a2:	f000 8300 	beq.w	80098a6 <HAL_UART_IRQHandler+0x66a>
      {
        huart->RxISR(huart);
 80092a6:	687b      	ldr	r3, [r7, #4]
 80092a8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80092aa:	6878      	ldr	r0, [r7, #4]
 80092ac:	4798      	blx	r3
      }
      return;
 80092ae:	e2fa      	b.n	80098a6 <HAL_UART_IRQHandler+0x66a>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 80092b0:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80092b4:	2b00      	cmp	r3, #0
 80092b6:	f000 8123 	beq.w	8009500 <HAL_UART_IRQHandler+0x2c4>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 80092ba:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 80092be:	4b8d      	ldr	r3, [pc, #564]	@ (80094f4 <HAL_UART_IRQHandler+0x2b8>)
 80092c0:	4013      	ands	r3, r2
 80092c2:	2b00      	cmp	r3, #0
 80092c4:	d106      	bne.n	80092d4 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 80092c6:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 80092ca:	4b8b      	ldr	r3, [pc, #556]	@ (80094f8 <HAL_UART_IRQHandler+0x2bc>)
 80092cc:	4013      	ands	r3, r2
 80092ce:	2b00      	cmp	r3, #0
 80092d0:	f000 8116 	beq.w	8009500 <HAL_UART_IRQHandler+0x2c4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80092d4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80092d8:	f003 0301 	and.w	r3, r3, #1
 80092dc:	2b00      	cmp	r3, #0
 80092de:	d011      	beq.n	8009304 <HAL_UART_IRQHandler+0xc8>
 80092e0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80092e4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80092e8:	2b00      	cmp	r3, #0
 80092ea:	d00b      	beq.n	8009304 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80092ec:	687b      	ldr	r3, [r7, #4]
 80092ee:	681b      	ldr	r3, [r3, #0]
 80092f0:	2201      	movs	r2, #1
 80092f2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80092f4:	687b      	ldr	r3, [r7, #4]
 80092f6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80092fa:	f043 0201 	orr.w	r2, r3, #1
 80092fe:	687b      	ldr	r3, [r7, #4]
 8009300:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8009304:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009308:	f003 0302 	and.w	r3, r3, #2
 800930c:	2b00      	cmp	r3, #0
 800930e:	d011      	beq.n	8009334 <HAL_UART_IRQHandler+0xf8>
 8009310:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8009314:	f003 0301 	and.w	r3, r3, #1
 8009318:	2b00      	cmp	r3, #0
 800931a:	d00b      	beq.n	8009334 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800931c:	687b      	ldr	r3, [r7, #4]
 800931e:	681b      	ldr	r3, [r3, #0]
 8009320:	2202      	movs	r2, #2
 8009322:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8009324:	687b      	ldr	r3, [r7, #4]
 8009326:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800932a:	f043 0204 	orr.w	r2, r3, #4
 800932e:	687b      	ldr	r3, [r7, #4]
 8009330:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8009334:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009338:	f003 0304 	and.w	r3, r3, #4
 800933c:	2b00      	cmp	r3, #0
 800933e:	d011      	beq.n	8009364 <HAL_UART_IRQHandler+0x128>
 8009340:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8009344:	f003 0301 	and.w	r3, r3, #1
 8009348:	2b00      	cmp	r3, #0
 800934a:	d00b      	beq.n	8009364 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800934c:	687b      	ldr	r3, [r7, #4]
 800934e:	681b      	ldr	r3, [r3, #0]
 8009350:	2204      	movs	r2, #4
 8009352:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8009354:	687b      	ldr	r3, [r7, #4]
 8009356:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800935a:	f043 0202 	orr.w	r2, r3, #2
 800935e:	687b      	ldr	r3, [r7, #4]
 8009360:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8009364:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009368:	f003 0308 	and.w	r3, r3, #8
 800936c:	2b00      	cmp	r3, #0
 800936e:	d017      	beq.n	80093a0 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8009370:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8009374:	f003 0320 	and.w	r3, r3, #32
 8009378:	2b00      	cmp	r3, #0
 800937a:	d105      	bne.n	8009388 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 800937c:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 8009380:	4b5c      	ldr	r3, [pc, #368]	@ (80094f4 <HAL_UART_IRQHandler+0x2b8>)
 8009382:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8009384:	2b00      	cmp	r3, #0
 8009386:	d00b      	beq.n	80093a0 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8009388:	687b      	ldr	r3, [r7, #4]
 800938a:	681b      	ldr	r3, [r3, #0]
 800938c:	2208      	movs	r2, #8
 800938e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8009390:	687b      	ldr	r3, [r7, #4]
 8009392:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009396:	f043 0208 	orr.w	r2, r3, #8
 800939a:	687b      	ldr	r3, [r7, #4]
 800939c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 80093a0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80093a4:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80093a8:	2b00      	cmp	r3, #0
 80093aa:	d012      	beq.n	80093d2 <HAL_UART_IRQHandler+0x196>
 80093ac:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80093b0:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 80093b4:	2b00      	cmp	r3, #0
 80093b6:	d00c      	beq.n	80093d2 <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80093b8:	687b      	ldr	r3, [r7, #4]
 80093ba:	681b      	ldr	r3, [r3, #0]
 80093bc:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80093c0:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 80093c2:	687b      	ldr	r3, [r7, #4]
 80093c4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80093c8:	f043 0220 	orr.w	r2, r3, #32
 80093cc:	687b      	ldr	r3, [r7, #4]
 80093ce:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80093d2:	687b      	ldr	r3, [r7, #4]
 80093d4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80093d8:	2b00      	cmp	r3, #0
 80093da:	f000 8266 	beq.w	80098aa <HAL_UART_IRQHandler+0x66e>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 80093de:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80093e2:	f003 0320 	and.w	r3, r3, #32
 80093e6:	2b00      	cmp	r3, #0
 80093e8:	d013      	beq.n	8009412 <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 80093ea:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80093ee:	f003 0320 	and.w	r3, r3, #32
 80093f2:	2b00      	cmp	r3, #0
 80093f4:	d105      	bne.n	8009402 <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 80093f6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80093fa:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80093fe:	2b00      	cmp	r3, #0
 8009400:	d007      	beq.n	8009412 <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 8009402:	687b      	ldr	r3, [r7, #4]
 8009404:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8009406:	2b00      	cmp	r3, #0
 8009408:	d003      	beq.n	8009412 <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 800940a:	687b      	ldr	r3, [r7, #4]
 800940c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800940e:	6878      	ldr	r0, [r7, #4]
 8009410:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8009412:	687b      	ldr	r3, [r7, #4]
 8009414:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009418:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800941c:	687b      	ldr	r3, [r7, #4]
 800941e:	681b      	ldr	r3, [r3, #0]
 8009420:	689b      	ldr	r3, [r3, #8]
 8009422:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009426:	2b40      	cmp	r3, #64	@ 0x40
 8009428:	d005      	beq.n	8009436 <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800942a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800942e:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8009432:	2b00      	cmp	r3, #0
 8009434:	d054      	beq.n	80094e0 <HAL_UART_IRQHandler+0x2a4>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8009436:	6878      	ldr	r0, [r7, #4]
 8009438:	f000 ff28 	bl	800a28c <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800943c:	687b      	ldr	r3, [r7, #4]
 800943e:	681b      	ldr	r3, [r3, #0]
 8009440:	689b      	ldr	r3, [r3, #8]
 8009442:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009446:	2b40      	cmp	r3, #64	@ 0x40
 8009448:	d146      	bne.n	80094d8 <HAL_UART_IRQHandler+0x29c>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800944a:	687b      	ldr	r3, [r7, #4]
 800944c:	681b      	ldr	r3, [r3, #0]
 800944e:	3308      	adds	r3, #8
 8009450:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009454:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8009458:	e853 3f00 	ldrex	r3, [r3]
 800945c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8009460:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8009464:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8009468:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800946c:	687b      	ldr	r3, [r7, #4]
 800946e:	681b      	ldr	r3, [r3, #0]
 8009470:	3308      	adds	r3, #8
 8009472:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8009476:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 800947a:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800947e:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8009482:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8009486:	e841 2300 	strex	r3, r2, [r1]
 800948a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 800948e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8009492:	2b00      	cmp	r3, #0
 8009494:	d1d9      	bne.n	800944a <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8009496:	687b      	ldr	r3, [r7, #4]
 8009498:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800949c:	2b00      	cmp	r3, #0
 800949e:	d017      	beq.n	80094d0 <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80094a0:	687b      	ldr	r3, [r7, #4]
 80094a2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80094a6:	4a15      	ldr	r2, [pc, #84]	@ (80094fc <HAL_UART_IRQHandler+0x2c0>)
 80094a8:	639a      	str	r2, [r3, #56]	@ 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80094aa:	687b      	ldr	r3, [r7, #4]
 80094ac:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80094b0:	4618      	mov	r0, r3
 80094b2:	f7fc f949 	bl	8005748 <HAL_DMA_Abort_IT>
 80094b6:	4603      	mov	r3, r0
 80094b8:	2b00      	cmp	r3, #0
 80094ba:	d019      	beq.n	80094f0 <HAL_UART_IRQHandler+0x2b4>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80094bc:	687b      	ldr	r3, [r7, #4]
 80094be:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80094c2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80094c4:	687a      	ldr	r2, [r7, #4]
 80094c6:	f8d2 2080 	ldr.w	r2, [r2, #128]	@ 0x80
 80094ca:	4610      	mov	r0, r2
 80094cc:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80094ce:	e00f      	b.n	80094f0 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80094d0:	6878      	ldr	r0, [r7, #4]
 80094d2:	f000 f9ff 	bl	80098d4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80094d6:	e00b      	b.n	80094f0 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80094d8:	6878      	ldr	r0, [r7, #4]
 80094da:	f000 f9fb 	bl	80098d4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80094de:	e007      	b.n	80094f0 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80094e0:	6878      	ldr	r0, [r7, #4]
 80094e2:	f000 f9f7 	bl	80098d4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80094e6:	687b      	ldr	r3, [r7, #4]
 80094e8:	2200      	movs	r2, #0
 80094ea:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
      }
    }
    return;
 80094ee:	e1dc      	b.n	80098aa <HAL_UART_IRQHandler+0x66e>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80094f0:	bf00      	nop
    return;
 80094f2:	e1da      	b.n	80098aa <HAL_UART_IRQHandler+0x66e>
 80094f4:	10000001 	.word	0x10000001
 80094f8:	04000120 	.word	0x04000120
 80094fc:	0800a48f 	.word	0x0800a48f

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009500:	687b      	ldr	r3, [r7, #4]
 8009502:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8009504:	2b01      	cmp	r3, #1
 8009506:	f040 8170 	bne.w	80097ea <HAL_UART_IRQHandler+0x5ae>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800950a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800950e:	f003 0310 	and.w	r3, r3, #16
 8009512:	2b00      	cmp	r3, #0
 8009514:	f000 8169 	beq.w	80097ea <HAL_UART_IRQHandler+0x5ae>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8009518:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800951c:	f003 0310 	and.w	r3, r3, #16
 8009520:	2b00      	cmp	r3, #0
 8009522:	f000 8162 	beq.w	80097ea <HAL_UART_IRQHandler+0x5ae>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8009526:	687b      	ldr	r3, [r7, #4]
 8009528:	681b      	ldr	r3, [r3, #0]
 800952a:	2210      	movs	r2, #16
 800952c:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800952e:	687b      	ldr	r3, [r7, #4]
 8009530:	681b      	ldr	r3, [r3, #0]
 8009532:	689b      	ldr	r3, [r3, #8]
 8009534:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009538:	2b40      	cmp	r3, #64	@ 0x40
 800953a:	f040 80d8 	bne.w	80096ee <HAL_UART_IRQHandler+0x4b2>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800953e:	687b      	ldr	r3, [r7, #4]
 8009540:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009544:	681b      	ldr	r3, [r3, #0]
 8009546:	685b      	ldr	r3, [r3, #4]
 8009548:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 800954c:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8009550:	2b00      	cmp	r3, #0
 8009552:	f000 80af 	beq.w	80096b4 <HAL_UART_IRQHandler+0x478>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8009556:	687b      	ldr	r3, [r7, #4]
 8009558:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800955c:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8009560:	429a      	cmp	r2, r3
 8009562:	f080 80a7 	bcs.w	80096b4 <HAL_UART_IRQHandler+0x478>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8009566:	687b      	ldr	r3, [r7, #4]
 8009568:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800956c:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8009570:	687b      	ldr	r3, [r7, #4]
 8009572:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009576:	681b      	ldr	r3, [r3, #0]
 8009578:	681b      	ldr	r3, [r3, #0]
 800957a:	f003 0320 	and.w	r3, r3, #32
 800957e:	2b00      	cmp	r3, #0
 8009580:	f040 8087 	bne.w	8009692 <HAL_UART_IRQHandler+0x456>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8009584:	687b      	ldr	r3, [r7, #4]
 8009586:	681b      	ldr	r3, [r3, #0]
 8009588:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800958c:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8009590:	e853 3f00 	ldrex	r3, [r3]
 8009594:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8009598:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800959c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80095a0:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80095a4:	687b      	ldr	r3, [r7, #4]
 80095a6:	681b      	ldr	r3, [r3, #0]
 80095a8:	461a      	mov	r2, r3
 80095aa:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 80095ae:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 80095b2:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80095b6:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 80095ba:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 80095be:	e841 2300 	strex	r3, r2, [r1]
 80095c2:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 80095c6:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80095ca:	2b00      	cmp	r3, #0
 80095cc:	d1da      	bne.n	8009584 <HAL_UART_IRQHandler+0x348>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80095ce:	687b      	ldr	r3, [r7, #4]
 80095d0:	681b      	ldr	r3, [r3, #0]
 80095d2:	3308      	adds	r3, #8
 80095d4:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80095d6:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80095d8:	e853 3f00 	ldrex	r3, [r3]
 80095dc:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 80095de:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80095e0:	f023 0301 	bic.w	r3, r3, #1
 80095e4:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80095e8:	687b      	ldr	r3, [r7, #4]
 80095ea:	681b      	ldr	r3, [r3, #0]
 80095ec:	3308      	adds	r3, #8
 80095ee:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 80095f2:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 80095f6:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80095f8:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 80095fa:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 80095fe:	e841 2300 	strex	r3, r2, [r1]
 8009602:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8009604:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8009606:	2b00      	cmp	r3, #0
 8009608:	d1e1      	bne.n	80095ce <HAL_UART_IRQHandler+0x392>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800960a:	687b      	ldr	r3, [r7, #4]
 800960c:	681b      	ldr	r3, [r3, #0]
 800960e:	3308      	adds	r3, #8
 8009610:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009612:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8009614:	e853 3f00 	ldrex	r3, [r3]
 8009618:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 800961a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800961c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8009620:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8009624:	687b      	ldr	r3, [r7, #4]
 8009626:	681b      	ldr	r3, [r3, #0]
 8009628:	3308      	adds	r3, #8
 800962a:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 800962e:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8009630:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009632:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8009634:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8009636:	e841 2300 	strex	r3, r2, [r1]
 800963a:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 800963c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800963e:	2b00      	cmp	r3, #0
 8009640:	d1e3      	bne.n	800960a <HAL_UART_IRQHandler+0x3ce>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8009642:	687b      	ldr	r3, [r7, #4]
 8009644:	2220      	movs	r2, #32
 8009646:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800964a:	687b      	ldr	r3, [r7, #4]
 800964c:	2200      	movs	r2, #0
 800964e:	66da      	str	r2, [r3, #108]	@ 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009650:	687b      	ldr	r3, [r7, #4]
 8009652:	681b      	ldr	r3, [r3, #0]
 8009654:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009656:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8009658:	e853 3f00 	ldrex	r3, [r3]
 800965c:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800965e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8009660:	f023 0310 	bic.w	r3, r3, #16
 8009664:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8009668:	687b      	ldr	r3, [r7, #4]
 800966a:	681b      	ldr	r3, [r3, #0]
 800966c:	461a      	mov	r2, r3
 800966e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8009672:	65bb      	str	r3, [r7, #88]	@ 0x58
 8009674:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009676:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8009678:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800967a:	e841 2300 	strex	r3, r2, [r1]
 800967e:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8009680:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8009682:	2b00      	cmp	r3, #0
 8009684:	d1e4      	bne.n	8009650 <HAL_UART_IRQHandler+0x414>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8009686:	687b      	ldr	r3, [r7, #4]
 8009688:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800968c:	4618      	mov	r0, r3
 800968e:	f7fc f802 	bl	8005696 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8009692:	687b      	ldr	r3, [r7, #4]
 8009694:	2202      	movs	r2, #2
 8009696:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8009698:	687b      	ldr	r3, [r7, #4]
 800969a:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 800969e:	687b      	ldr	r3, [r7, #4]
 80096a0:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 80096a4:	b29b      	uxth	r3, r3
 80096a6:	1ad3      	subs	r3, r2, r3
 80096a8:	b29b      	uxth	r3, r3
 80096aa:	4619      	mov	r1, r3
 80096ac:	6878      	ldr	r0, [r7, #4]
 80096ae:	f000 f91b 	bl	80098e8 <HAL_UARTEx_RxEventCallback>
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
          }
        }
      }
      return;
 80096b2:	e0fc      	b.n	80098ae <HAL_UART_IRQHandler+0x672>
        if (nb_remaining_rx_data == huart->RxXferSize)
 80096b4:	687b      	ldr	r3, [r7, #4]
 80096b6:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 80096ba:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80096be:	429a      	cmp	r2, r3
 80096c0:	f040 80f5 	bne.w	80098ae <HAL_UART_IRQHandler+0x672>
          if (HAL_IS_BIT_SET(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 80096c4:	687b      	ldr	r3, [r7, #4]
 80096c6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80096ca:	681b      	ldr	r3, [r3, #0]
 80096cc:	681b      	ldr	r3, [r3, #0]
 80096ce:	f003 0320 	and.w	r3, r3, #32
 80096d2:	2b20      	cmp	r3, #32
 80096d4:	f040 80eb 	bne.w	80098ae <HAL_UART_IRQHandler+0x672>
            huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80096d8:	687b      	ldr	r3, [r7, #4]
 80096da:	2202      	movs	r2, #2
 80096dc:	671a      	str	r2, [r3, #112]	@ 0x70
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80096de:	687b      	ldr	r3, [r7, #4]
 80096e0:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 80096e4:	4619      	mov	r1, r3
 80096e6:	6878      	ldr	r0, [r7, #4]
 80096e8:	f000 f8fe 	bl	80098e8 <HAL_UARTEx_RxEventCallback>
      return;
 80096ec:	e0df      	b.n	80098ae <HAL_UART_IRQHandler+0x672>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80096ee:	687b      	ldr	r3, [r7, #4]
 80096f0:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 80096f4:	687b      	ldr	r3, [r7, #4]
 80096f6:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 80096fa:	b29b      	uxth	r3, r3
 80096fc:	1ad3      	subs	r3, r2, r3
 80096fe:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8009702:	687b      	ldr	r3, [r7, #4]
 8009704:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8009708:	b29b      	uxth	r3, r3
 800970a:	2b00      	cmp	r3, #0
 800970c:	f000 80d1 	beq.w	80098b2 <HAL_UART_IRQHandler+0x676>
          && (nb_rx_data > 0U))
 8009710:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8009714:	2b00      	cmp	r3, #0
 8009716:	f000 80cc 	beq.w	80098b2 <HAL_UART_IRQHandler+0x676>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800971a:	687b      	ldr	r3, [r7, #4]
 800971c:	681b      	ldr	r3, [r3, #0]
 800971e:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009720:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009722:	e853 3f00 	ldrex	r3, [r3]
 8009726:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8009728:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800972a:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800972e:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8009732:	687b      	ldr	r3, [r7, #4]
 8009734:	681b      	ldr	r3, [r3, #0]
 8009736:	461a      	mov	r2, r3
 8009738:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800973c:	647b      	str	r3, [r7, #68]	@ 0x44
 800973e:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009740:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8009742:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8009744:	e841 2300 	strex	r3, r2, [r1]
 8009748:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800974a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800974c:	2b00      	cmp	r3, #0
 800974e:	d1e4      	bne.n	800971a <HAL_UART_IRQHandler+0x4de>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8009750:	687b      	ldr	r3, [r7, #4]
 8009752:	681b      	ldr	r3, [r3, #0]
 8009754:	3308      	adds	r3, #8
 8009756:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009758:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800975a:	e853 3f00 	ldrex	r3, [r3]
 800975e:	623b      	str	r3, [r7, #32]
   return(result);
 8009760:	6a3b      	ldr	r3, [r7, #32]
 8009762:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8009766:	f023 0301 	bic.w	r3, r3, #1
 800976a:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800976e:	687b      	ldr	r3, [r7, #4]
 8009770:	681b      	ldr	r3, [r3, #0]
 8009772:	3308      	adds	r3, #8
 8009774:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8009778:	633a      	str	r2, [r7, #48]	@ 0x30
 800977a:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800977c:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800977e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8009780:	e841 2300 	strex	r3, r2, [r1]
 8009784:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8009786:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009788:	2b00      	cmp	r3, #0
 800978a:	d1e1      	bne.n	8009750 <HAL_UART_IRQHandler+0x514>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800978c:	687b      	ldr	r3, [r7, #4]
 800978e:	2220      	movs	r2, #32
 8009790:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009794:	687b      	ldr	r3, [r7, #4]
 8009796:	2200      	movs	r2, #0
 8009798:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800979a:	687b      	ldr	r3, [r7, #4]
 800979c:	2200      	movs	r2, #0
 800979e:	675a      	str	r2, [r3, #116]	@ 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80097a0:	687b      	ldr	r3, [r7, #4]
 80097a2:	681b      	ldr	r3, [r3, #0]
 80097a4:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80097a6:	693b      	ldr	r3, [r7, #16]
 80097a8:	e853 3f00 	ldrex	r3, [r3]
 80097ac:	60fb      	str	r3, [r7, #12]
   return(result);
 80097ae:	68fb      	ldr	r3, [r7, #12]
 80097b0:	f023 0310 	bic.w	r3, r3, #16
 80097b4:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80097b8:	687b      	ldr	r3, [r7, #4]
 80097ba:	681b      	ldr	r3, [r3, #0]
 80097bc:	461a      	mov	r2, r3
 80097be:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 80097c2:	61fb      	str	r3, [r7, #28]
 80097c4:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80097c6:	69b9      	ldr	r1, [r7, #24]
 80097c8:	69fa      	ldr	r2, [r7, #28]
 80097ca:	e841 2300 	strex	r3, r2, [r1]
 80097ce:	617b      	str	r3, [r7, #20]
   return(result);
 80097d0:	697b      	ldr	r3, [r7, #20]
 80097d2:	2b00      	cmp	r3, #0
 80097d4:	d1e4      	bne.n	80097a0 <HAL_UART_IRQHandler+0x564>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80097d6:	687b      	ldr	r3, [r7, #4]
 80097d8:	2202      	movs	r2, #2
 80097da:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80097dc:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 80097e0:	4619      	mov	r1, r3
 80097e2:	6878      	ldr	r0, [r7, #4]
 80097e4:	f000 f880 	bl	80098e8 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80097e8:	e063      	b.n	80098b2 <HAL_UART_IRQHandler+0x676>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 80097ea:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80097ee:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80097f2:	2b00      	cmp	r3, #0
 80097f4:	d00e      	beq.n	8009814 <HAL_UART_IRQHandler+0x5d8>
 80097f6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80097fa:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80097fe:	2b00      	cmp	r3, #0
 8009800:	d008      	beq.n	8009814 <HAL_UART_IRQHandler+0x5d8>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8009802:	687b      	ldr	r3, [r7, #4]
 8009804:	681b      	ldr	r3, [r3, #0]
 8009806:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 800980a:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 800980c:	6878      	ldr	r0, [r7, #4]
 800980e:	f000 fe7b 	bl	800a508 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8009812:	e051      	b.n	80098b8 <HAL_UART_IRQHandler+0x67c>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 8009814:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009818:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800981c:	2b00      	cmp	r3, #0
 800981e:	d014      	beq.n	800984a <HAL_UART_IRQHandler+0x60e>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 8009820:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8009824:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8009828:	2b00      	cmp	r3, #0
 800982a:	d105      	bne.n	8009838 <HAL_UART_IRQHandler+0x5fc>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 800982c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8009830:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8009834:	2b00      	cmp	r3, #0
 8009836:	d008      	beq.n	800984a <HAL_UART_IRQHandler+0x60e>
  {
    if (huart->TxISR != NULL)
 8009838:	687b      	ldr	r3, [r7, #4]
 800983a:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800983c:	2b00      	cmp	r3, #0
 800983e:	d03a      	beq.n	80098b6 <HAL_UART_IRQHandler+0x67a>
    {
      huart->TxISR(huart);
 8009840:	687b      	ldr	r3, [r7, #4]
 8009842:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8009844:	6878      	ldr	r0, [r7, #4]
 8009846:	4798      	blx	r3
    }
    return;
 8009848:	e035      	b.n	80098b6 <HAL_UART_IRQHandler+0x67a>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800984a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800984e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009852:	2b00      	cmp	r3, #0
 8009854:	d009      	beq.n	800986a <HAL_UART_IRQHandler+0x62e>
 8009856:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800985a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800985e:	2b00      	cmp	r3, #0
 8009860:	d003      	beq.n	800986a <HAL_UART_IRQHandler+0x62e>
  {
    UART_EndTransmit_IT(huart);
 8009862:	6878      	ldr	r0, [r7, #4]
 8009864:	f000 fe25 	bl	800a4b2 <UART_EndTransmit_IT>
    return;
 8009868:	e026      	b.n	80098b8 <HAL_UART_IRQHandler+0x67c>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 800986a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800986e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8009872:	2b00      	cmp	r3, #0
 8009874:	d009      	beq.n	800988a <HAL_UART_IRQHandler+0x64e>
 8009876:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800987a:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 800987e:	2b00      	cmp	r3, #0
 8009880:	d003      	beq.n	800988a <HAL_UART_IRQHandler+0x64e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 8009882:	6878      	ldr	r0, [r7, #4]
 8009884:	f000 fe54 	bl	800a530 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8009888:	e016      	b.n	80098b8 <HAL_UART_IRQHandler+0x67c>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 800988a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800988e:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8009892:	2b00      	cmp	r3, #0
 8009894:	d010      	beq.n	80098b8 <HAL_UART_IRQHandler+0x67c>
 8009896:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800989a:	2b00      	cmp	r3, #0
 800989c:	da0c      	bge.n	80098b8 <HAL_UART_IRQHandler+0x67c>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 800989e:	6878      	ldr	r0, [r7, #4]
 80098a0:	f000 fe3c 	bl	800a51c <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80098a4:	e008      	b.n	80098b8 <HAL_UART_IRQHandler+0x67c>
      return;
 80098a6:	bf00      	nop
 80098a8:	e006      	b.n	80098b8 <HAL_UART_IRQHandler+0x67c>
    return;
 80098aa:	bf00      	nop
 80098ac:	e004      	b.n	80098b8 <HAL_UART_IRQHandler+0x67c>
      return;
 80098ae:	bf00      	nop
 80098b0:	e002      	b.n	80098b8 <HAL_UART_IRQHandler+0x67c>
      return;
 80098b2:	bf00      	nop
 80098b4:	e000      	b.n	80098b8 <HAL_UART_IRQHandler+0x67c>
    return;
 80098b6:	bf00      	nop
  }
}
 80098b8:	37e8      	adds	r7, #232	@ 0xe8
 80098ba:	46bd      	mov	sp, r7
 80098bc:	bd80      	pop	{r7, pc}
 80098be:	bf00      	nop

080098c0 <HAL_UART_TxHalfCpltCallback>:
  * @brief  Tx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 80098c0:	b480      	push	{r7}
 80098c2:	b083      	sub	sp, #12
 80098c4:	af00      	add	r7, sp, #0
 80098c6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback can be implemented in the user file.
   */
}
 80098c8:	bf00      	nop
 80098ca:	370c      	adds	r7, #12
 80098cc:	46bd      	mov	sp, r7
 80098ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098d2:	4770      	bx	lr

080098d4 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80098d4:	b480      	push	{r7}
 80098d6:	b083      	sub	sp, #12
 80098d8:	af00      	add	r7, sp, #0
 80098da:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 80098dc:	bf00      	nop
 80098de:	370c      	adds	r7, #12
 80098e0:	46bd      	mov	sp, r7
 80098e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098e6:	4770      	bx	lr

080098e8 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80098e8:	b480      	push	{r7}
 80098ea:	b083      	sub	sp, #12
 80098ec:	af00      	add	r7, sp, #0
 80098ee:	6078      	str	r0, [r7, #4]
 80098f0:	460b      	mov	r3, r1
 80098f2:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80098f4:	bf00      	nop
 80098f6:	370c      	adds	r7, #12
 80098f8:	46bd      	mov	sp, r7
 80098fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098fe:	4770      	bx	lr

08009900 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8009900:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8009904:	b08c      	sub	sp, #48	@ 0x30
 8009906:	af00      	add	r7, sp, #0
 8009908:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800990a:	2300      	movs	r3, #0
 800990c:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8009910:	697b      	ldr	r3, [r7, #20]
 8009912:	689a      	ldr	r2, [r3, #8]
 8009914:	697b      	ldr	r3, [r7, #20]
 8009916:	691b      	ldr	r3, [r3, #16]
 8009918:	431a      	orrs	r2, r3
 800991a:	697b      	ldr	r3, [r7, #20]
 800991c:	695b      	ldr	r3, [r3, #20]
 800991e:	431a      	orrs	r2, r3
 8009920:	697b      	ldr	r3, [r7, #20]
 8009922:	69db      	ldr	r3, [r3, #28]
 8009924:	4313      	orrs	r3, r2
 8009926:	62fb      	str	r3, [r7, #44]	@ 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8009928:	697b      	ldr	r3, [r7, #20]
 800992a:	681b      	ldr	r3, [r3, #0]
 800992c:	681a      	ldr	r2, [r3, #0]
 800992e:	4bab      	ldr	r3, [pc, #684]	@ (8009bdc <UART_SetConfig+0x2dc>)
 8009930:	4013      	ands	r3, r2
 8009932:	697a      	ldr	r2, [r7, #20]
 8009934:	6812      	ldr	r2, [r2, #0]
 8009936:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8009938:	430b      	orrs	r3, r1
 800993a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800993c:	697b      	ldr	r3, [r7, #20]
 800993e:	681b      	ldr	r3, [r3, #0]
 8009940:	685b      	ldr	r3, [r3, #4]
 8009942:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8009946:	697b      	ldr	r3, [r7, #20]
 8009948:	68da      	ldr	r2, [r3, #12]
 800994a:	697b      	ldr	r3, [r7, #20]
 800994c:	681b      	ldr	r3, [r3, #0]
 800994e:	430a      	orrs	r2, r1
 8009950:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8009952:	697b      	ldr	r3, [r7, #20]
 8009954:	699b      	ldr	r3, [r3, #24]
 8009956:	62fb      	str	r3, [r7, #44]	@ 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8009958:	697b      	ldr	r3, [r7, #20]
 800995a:	681b      	ldr	r3, [r3, #0]
 800995c:	4aa0      	ldr	r2, [pc, #640]	@ (8009be0 <UART_SetConfig+0x2e0>)
 800995e:	4293      	cmp	r3, r2
 8009960:	d004      	beq.n	800996c <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8009962:	697b      	ldr	r3, [r7, #20]
 8009964:	6a1b      	ldr	r3, [r3, #32]
 8009966:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8009968:	4313      	orrs	r3, r2
 800996a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800996c:	697b      	ldr	r3, [r7, #20]
 800996e:	681b      	ldr	r3, [r3, #0]
 8009970:	689b      	ldr	r3, [r3, #8]
 8009972:	f023 436e 	bic.w	r3, r3, #3992977408	@ 0xee000000
 8009976:	f423 6330 	bic.w	r3, r3, #2816	@ 0xb00
 800997a:	697a      	ldr	r2, [r7, #20]
 800997c:	6812      	ldr	r2, [r2, #0]
 800997e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8009980:	430b      	orrs	r3, r1
 8009982:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8009984:	697b      	ldr	r3, [r7, #20]
 8009986:	681b      	ldr	r3, [r3, #0]
 8009988:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800998a:	f023 010f 	bic.w	r1, r3, #15
 800998e:	697b      	ldr	r3, [r7, #20]
 8009990:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8009992:	697b      	ldr	r3, [r7, #20]
 8009994:	681b      	ldr	r3, [r3, #0]
 8009996:	430a      	orrs	r2, r1
 8009998:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800999a:	697b      	ldr	r3, [r7, #20]
 800999c:	681b      	ldr	r3, [r3, #0]
 800999e:	4a91      	ldr	r2, [pc, #580]	@ (8009be4 <UART_SetConfig+0x2e4>)
 80099a0:	4293      	cmp	r3, r2
 80099a2:	d125      	bne.n	80099f0 <UART_SetConfig+0xf0>
 80099a4:	4b90      	ldr	r3, [pc, #576]	@ (8009be8 <UART_SetConfig+0x2e8>)
 80099a6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80099aa:	f003 0303 	and.w	r3, r3, #3
 80099ae:	2b03      	cmp	r3, #3
 80099b0:	d81a      	bhi.n	80099e8 <UART_SetConfig+0xe8>
 80099b2:	a201      	add	r2, pc, #4	@ (adr r2, 80099b8 <UART_SetConfig+0xb8>)
 80099b4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80099b8:	080099c9 	.word	0x080099c9
 80099bc:	080099d9 	.word	0x080099d9
 80099c0:	080099d1 	.word	0x080099d1
 80099c4:	080099e1 	.word	0x080099e1
 80099c8:	2301      	movs	r3, #1
 80099ca:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80099ce:	e0d6      	b.n	8009b7e <UART_SetConfig+0x27e>
 80099d0:	2302      	movs	r3, #2
 80099d2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80099d6:	e0d2      	b.n	8009b7e <UART_SetConfig+0x27e>
 80099d8:	2304      	movs	r3, #4
 80099da:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80099de:	e0ce      	b.n	8009b7e <UART_SetConfig+0x27e>
 80099e0:	2308      	movs	r3, #8
 80099e2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80099e6:	e0ca      	b.n	8009b7e <UART_SetConfig+0x27e>
 80099e8:	2310      	movs	r3, #16
 80099ea:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80099ee:	e0c6      	b.n	8009b7e <UART_SetConfig+0x27e>
 80099f0:	697b      	ldr	r3, [r7, #20]
 80099f2:	681b      	ldr	r3, [r3, #0]
 80099f4:	4a7d      	ldr	r2, [pc, #500]	@ (8009bec <UART_SetConfig+0x2ec>)
 80099f6:	4293      	cmp	r3, r2
 80099f8:	d138      	bne.n	8009a6c <UART_SetConfig+0x16c>
 80099fa:	4b7b      	ldr	r3, [pc, #492]	@ (8009be8 <UART_SetConfig+0x2e8>)
 80099fc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009a00:	f003 030c 	and.w	r3, r3, #12
 8009a04:	2b0c      	cmp	r3, #12
 8009a06:	d82d      	bhi.n	8009a64 <UART_SetConfig+0x164>
 8009a08:	a201      	add	r2, pc, #4	@ (adr r2, 8009a10 <UART_SetConfig+0x110>)
 8009a0a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009a0e:	bf00      	nop
 8009a10:	08009a45 	.word	0x08009a45
 8009a14:	08009a65 	.word	0x08009a65
 8009a18:	08009a65 	.word	0x08009a65
 8009a1c:	08009a65 	.word	0x08009a65
 8009a20:	08009a55 	.word	0x08009a55
 8009a24:	08009a65 	.word	0x08009a65
 8009a28:	08009a65 	.word	0x08009a65
 8009a2c:	08009a65 	.word	0x08009a65
 8009a30:	08009a4d 	.word	0x08009a4d
 8009a34:	08009a65 	.word	0x08009a65
 8009a38:	08009a65 	.word	0x08009a65
 8009a3c:	08009a65 	.word	0x08009a65
 8009a40:	08009a5d 	.word	0x08009a5d
 8009a44:	2300      	movs	r3, #0
 8009a46:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8009a4a:	e098      	b.n	8009b7e <UART_SetConfig+0x27e>
 8009a4c:	2302      	movs	r3, #2
 8009a4e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8009a52:	e094      	b.n	8009b7e <UART_SetConfig+0x27e>
 8009a54:	2304      	movs	r3, #4
 8009a56:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8009a5a:	e090      	b.n	8009b7e <UART_SetConfig+0x27e>
 8009a5c:	2308      	movs	r3, #8
 8009a5e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8009a62:	e08c      	b.n	8009b7e <UART_SetConfig+0x27e>
 8009a64:	2310      	movs	r3, #16
 8009a66:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8009a6a:	e088      	b.n	8009b7e <UART_SetConfig+0x27e>
 8009a6c:	697b      	ldr	r3, [r7, #20]
 8009a6e:	681b      	ldr	r3, [r3, #0]
 8009a70:	4a5f      	ldr	r2, [pc, #380]	@ (8009bf0 <UART_SetConfig+0x2f0>)
 8009a72:	4293      	cmp	r3, r2
 8009a74:	d125      	bne.n	8009ac2 <UART_SetConfig+0x1c2>
 8009a76:	4b5c      	ldr	r3, [pc, #368]	@ (8009be8 <UART_SetConfig+0x2e8>)
 8009a78:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009a7c:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8009a80:	2b30      	cmp	r3, #48	@ 0x30
 8009a82:	d016      	beq.n	8009ab2 <UART_SetConfig+0x1b2>
 8009a84:	2b30      	cmp	r3, #48	@ 0x30
 8009a86:	d818      	bhi.n	8009aba <UART_SetConfig+0x1ba>
 8009a88:	2b20      	cmp	r3, #32
 8009a8a:	d00a      	beq.n	8009aa2 <UART_SetConfig+0x1a2>
 8009a8c:	2b20      	cmp	r3, #32
 8009a8e:	d814      	bhi.n	8009aba <UART_SetConfig+0x1ba>
 8009a90:	2b00      	cmp	r3, #0
 8009a92:	d002      	beq.n	8009a9a <UART_SetConfig+0x19a>
 8009a94:	2b10      	cmp	r3, #16
 8009a96:	d008      	beq.n	8009aaa <UART_SetConfig+0x1aa>
 8009a98:	e00f      	b.n	8009aba <UART_SetConfig+0x1ba>
 8009a9a:	2300      	movs	r3, #0
 8009a9c:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8009aa0:	e06d      	b.n	8009b7e <UART_SetConfig+0x27e>
 8009aa2:	2302      	movs	r3, #2
 8009aa4:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8009aa8:	e069      	b.n	8009b7e <UART_SetConfig+0x27e>
 8009aaa:	2304      	movs	r3, #4
 8009aac:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8009ab0:	e065      	b.n	8009b7e <UART_SetConfig+0x27e>
 8009ab2:	2308      	movs	r3, #8
 8009ab4:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8009ab8:	e061      	b.n	8009b7e <UART_SetConfig+0x27e>
 8009aba:	2310      	movs	r3, #16
 8009abc:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8009ac0:	e05d      	b.n	8009b7e <UART_SetConfig+0x27e>
 8009ac2:	697b      	ldr	r3, [r7, #20]
 8009ac4:	681b      	ldr	r3, [r3, #0]
 8009ac6:	4a4b      	ldr	r2, [pc, #300]	@ (8009bf4 <UART_SetConfig+0x2f4>)
 8009ac8:	4293      	cmp	r3, r2
 8009aca:	d125      	bne.n	8009b18 <UART_SetConfig+0x218>
 8009acc:	4b46      	ldr	r3, [pc, #280]	@ (8009be8 <UART_SetConfig+0x2e8>)
 8009ace:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009ad2:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8009ad6:	2bc0      	cmp	r3, #192	@ 0xc0
 8009ad8:	d016      	beq.n	8009b08 <UART_SetConfig+0x208>
 8009ada:	2bc0      	cmp	r3, #192	@ 0xc0
 8009adc:	d818      	bhi.n	8009b10 <UART_SetConfig+0x210>
 8009ade:	2b80      	cmp	r3, #128	@ 0x80
 8009ae0:	d00a      	beq.n	8009af8 <UART_SetConfig+0x1f8>
 8009ae2:	2b80      	cmp	r3, #128	@ 0x80
 8009ae4:	d814      	bhi.n	8009b10 <UART_SetConfig+0x210>
 8009ae6:	2b00      	cmp	r3, #0
 8009ae8:	d002      	beq.n	8009af0 <UART_SetConfig+0x1f0>
 8009aea:	2b40      	cmp	r3, #64	@ 0x40
 8009aec:	d008      	beq.n	8009b00 <UART_SetConfig+0x200>
 8009aee:	e00f      	b.n	8009b10 <UART_SetConfig+0x210>
 8009af0:	2300      	movs	r3, #0
 8009af2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8009af6:	e042      	b.n	8009b7e <UART_SetConfig+0x27e>
 8009af8:	2302      	movs	r3, #2
 8009afa:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8009afe:	e03e      	b.n	8009b7e <UART_SetConfig+0x27e>
 8009b00:	2304      	movs	r3, #4
 8009b02:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8009b06:	e03a      	b.n	8009b7e <UART_SetConfig+0x27e>
 8009b08:	2308      	movs	r3, #8
 8009b0a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8009b0e:	e036      	b.n	8009b7e <UART_SetConfig+0x27e>
 8009b10:	2310      	movs	r3, #16
 8009b12:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8009b16:	e032      	b.n	8009b7e <UART_SetConfig+0x27e>
 8009b18:	697b      	ldr	r3, [r7, #20]
 8009b1a:	681b      	ldr	r3, [r3, #0]
 8009b1c:	4a30      	ldr	r2, [pc, #192]	@ (8009be0 <UART_SetConfig+0x2e0>)
 8009b1e:	4293      	cmp	r3, r2
 8009b20:	d12a      	bne.n	8009b78 <UART_SetConfig+0x278>
 8009b22:	4b31      	ldr	r3, [pc, #196]	@ (8009be8 <UART_SetConfig+0x2e8>)
 8009b24:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009b28:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8009b2c:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8009b30:	d01a      	beq.n	8009b68 <UART_SetConfig+0x268>
 8009b32:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8009b36:	d81b      	bhi.n	8009b70 <UART_SetConfig+0x270>
 8009b38:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8009b3c:	d00c      	beq.n	8009b58 <UART_SetConfig+0x258>
 8009b3e:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8009b42:	d815      	bhi.n	8009b70 <UART_SetConfig+0x270>
 8009b44:	2b00      	cmp	r3, #0
 8009b46:	d003      	beq.n	8009b50 <UART_SetConfig+0x250>
 8009b48:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8009b4c:	d008      	beq.n	8009b60 <UART_SetConfig+0x260>
 8009b4e:	e00f      	b.n	8009b70 <UART_SetConfig+0x270>
 8009b50:	2300      	movs	r3, #0
 8009b52:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8009b56:	e012      	b.n	8009b7e <UART_SetConfig+0x27e>
 8009b58:	2302      	movs	r3, #2
 8009b5a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8009b5e:	e00e      	b.n	8009b7e <UART_SetConfig+0x27e>
 8009b60:	2304      	movs	r3, #4
 8009b62:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8009b66:	e00a      	b.n	8009b7e <UART_SetConfig+0x27e>
 8009b68:	2308      	movs	r3, #8
 8009b6a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8009b6e:	e006      	b.n	8009b7e <UART_SetConfig+0x27e>
 8009b70:	2310      	movs	r3, #16
 8009b72:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8009b76:	e002      	b.n	8009b7e <UART_SetConfig+0x27e>
 8009b78:	2310      	movs	r3, #16
 8009b7a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8009b7e:	697b      	ldr	r3, [r7, #20]
 8009b80:	681b      	ldr	r3, [r3, #0]
 8009b82:	4a17      	ldr	r2, [pc, #92]	@ (8009be0 <UART_SetConfig+0x2e0>)
 8009b84:	4293      	cmp	r3, r2
 8009b86:	f040 80a8 	bne.w	8009cda <UART_SetConfig+0x3da>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8009b8a:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8009b8e:	2b08      	cmp	r3, #8
 8009b90:	d834      	bhi.n	8009bfc <UART_SetConfig+0x2fc>
 8009b92:	a201      	add	r2, pc, #4	@ (adr r2, 8009b98 <UART_SetConfig+0x298>)
 8009b94:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009b98:	08009bbd 	.word	0x08009bbd
 8009b9c:	08009bfd 	.word	0x08009bfd
 8009ba0:	08009bc5 	.word	0x08009bc5
 8009ba4:	08009bfd 	.word	0x08009bfd
 8009ba8:	08009bcb 	.word	0x08009bcb
 8009bac:	08009bfd 	.word	0x08009bfd
 8009bb0:	08009bfd 	.word	0x08009bfd
 8009bb4:	08009bfd 	.word	0x08009bfd
 8009bb8:	08009bd3 	.word	0x08009bd3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8009bbc:	f7fc fec0 	bl	8006940 <HAL_RCC_GetPCLK1Freq>
 8009bc0:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8009bc2:	e021      	b.n	8009c08 <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8009bc4:	4b0c      	ldr	r3, [pc, #48]	@ (8009bf8 <UART_SetConfig+0x2f8>)
 8009bc6:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8009bc8:	e01e      	b.n	8009c08 <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8009bca:	f7fc fe4d 	bl	8006868 <HAL_RCC_GetSysClockFreq>
 8009bce:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8009bd0:	e01a      	b.n	8009c08 <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8009bd2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8009bd6:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8009bd8:	e016      	b.n	8009c08 <UART_SetConfig+0x308>
 8009bda:	bf00      	nop
 8009bdc:	cfff69f3 	.word	0xcfff69f3
 8009be0:	40008000 	.word	0x40008000
 8009be4:	40013800 	.word	0x40013800
 8009be8:	40021000 	.word	0x40021000
 8009bec:	40004400 	.word	0x40004400
 8009bf0:	40004800 	.word	0x40004800
 8009bf4:	40004c00 	.word	0x40004c00
 8009bf8:	00f42400 	.word	0x00f42400
      default:
        pclk = 0U;
 8009bfc:	2300      	movs	r3, #0
 8009bfe:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8009c00:	2301      	movs	r3, #1
 8009c02:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8009c06:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8009c08:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009c0a:	2b00      	cmp	r3, #0
 8009c0c:	f000 812a 	beq.w	8009e64 <UART_SetConfig+0x564>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8009c10:	697b      	ldr	r3, [r7, #20]
 8009c12:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009c14:	4a9e      	ldr	r2, [pc, #632]	@ (8009e90 <UART_SetConfig+0x590>)
 8009c16:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8009c1a:	461a      	mov	r2, r3
 8009c1c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009c1e:	fbb3 f3f2 	udiv	r3, r3, r2
 8009c22:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8009c24:	697b      	ldr	r3, [r7, #20]
 8009c26:	685a      	ldr	r2, [r3, #4]
 8009c28:	4613      	mov	r3, r2
 8009c2a:	005b      	lsls	r3, r3, #1
 8009c2c:	4413      	add	r3, r2
 8009c2e:	69ba      	ldr	r2, [r7, #24]
 8009c30:	429a      	cmp	r2, r3
 8009c32:	d305      	bcc.n	8009c40 <UART_SetConfig+0x340>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8009c34:	697b      	ldr	r3, [r7, #20]
 8009c36:	685b      	ldr	r3, [r3, #4]
 8009c38:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8009c3a:	69ba      	ldr	r2, [r7, #24]
 8009c3c:	429a      	cmp	r2, r3
 8009c3e:	d903      	bls.n	8009c48 <UART_SetConfig+0x348>
      {
        ret = HAL_ERROR;
 8009c40:	2301      	movs	r3, #1
 8009c42:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8009c46:	e10d      	b.n	8009e64 <UART_SetConfig+0x564>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8009c48:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009c4a:	2200      	movs	r2, #0
 8009c4c:	60bb      	str	r3, [r7, #8]
 8009c4e:	60fa      	str	r2, [r7, #12]
 8009c50:	697b      	ldr	r3, [r7, #20]
 8009c52:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009c54:	4a8e      	ldr	r2, [pc, #568]	@ (8009e90 <UART_SetConfig+0x590>)
 8009c56:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8009c5a:	b29b      	uxth	r3, r3
 8009c5c:	2200      	movs	r2, #0
 8009c5e:	603b      	str	r3, [r7, #0]
 8009c60:	607a      	str	r2, [r7, #4]
 8009c62:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009c66:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8009c6a:	f7f6 ffc5 	bl	8000bf8 <__aeabi_uldivmod>
 8009c6e:	4602      	mov	r2, r0
 8009c70:	460b      	mov	r3, r1
 8009c72:	4610      	mov	r0, r2
 8009c74:	4619      	mov	r1, r3
 8009c76:	f04f 0200 	mov.w	r2, #0
 8009c7a:	f04f 0300 	mov.w	r3, #0
 8009c7e:	020b      	lsls	r3, r1, #8
 8009c80:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8009c84:	0202      	lsls	r2, r0, #8
 8009c86:	6979      	ldr	r1, [r7, #20]
 8009c88:	6849      	ldr	r1, [r1, #4]
 8009c8a:	0849      	lsrs	r1, r1, #1
 8009c8c:	2000      	movs	r0, #0
 8009c8e:	460c      	mov	r4, r1
 8009c90:	4605      	mov	r5, r0
 8009c92:	eb12 0804 	adds.w	r8, r2, r4
 8009c96:	eb43 0905 	adc.w	r9, r3, r5
 8009c9a:	697b      	ldr	r3, [r7, #20]
 8009c9c:	685b      	ldr	r3, [r3, #4]
 8009c9e:	2200      	movs	r2, #0
 8009ca0:	469a      	mov	sl, r3
 8009ca2:	4693      	mov	fp, r2
 8009ca4:	4652      	mov	r2, sl
 8009ca6:	465b      	mov	r3, fp
 8009ca8:	4640      	mov	r0, r8
 8009caa:	4649      	mov	r1, r9
 8009cac:	f7f6 ffa4 	bl	8000bf8 <__aeabi_uldivmod>
 8009cb0:	4602      	mov	r2, r0
 8009cb2:	460b      	mov	r3, r1
 8009cb4:	4613      	mov	r3, r2
 8009cb6:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8009cb8:	6a3b      	ldr	r3, [r7, #32]
 8009cba:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8009cbe:	d308      	bcc.n	8009cd2 <UART_SetConfig+0x3d2>
 8009cc0:	6a3b      	ldr	r3, [r7, #32]
 8009cc2:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8009cc6:	d204      	bcs.n	8009cd2 <UART_SetConfig+0x3d2>
        {
          huart->Instance->BRR = usartdiv;
 8009cc8:	697b      	ldr	r3, [r7, #20]
 8009cca:	681b      	ldr	r3, [r3, #0]
 8009ccc:	6a3a      	ldr	r2, [r7, #32]
 8009cce:	60da      	str	r2, [r3, #12]
 8009cd0:	e0c8      	b.n	8009e64 <UART_SetConfig+0x564>
        }
        else
        {
          ret = HAL_ERROR;
 8009cd2:	2301      	movs	r3, #1
 8009cd4:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8009cd8:	e0c4      	b.n	8009e64 <UART_SetConfig+0x564>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8009cda:	697b      	ldr	r3, [r7, #20]
 8009cdc:	69db      	ldr	r3, [r3, #28]
 8009cde:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8009ce2:	d167      	bne.n	8009db4 <UART_SetConfig+0x4b4>
  {
    switch (clocksource)
 8009ce4:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8009ce8:	2b08      	cmp	r3, #8
 8009cea:	d828      	bhi.n	8009d3e <UART_SetConfig+0x43e>
 8009cec:	a201      	add	r2, pc, #4	@ (adr r2, 8009cf4 <UART_SetConfig+0x3f4>)
 8009cee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009cf2:	bf00      	nop
 8009cf4:	08009d19 	.word	0x08009d19
 8009cf8:	08009d21 	.word	0x08009d21
 8009cfc:	08009d29 	.word	0x08009d29
 8009d00:	08009d3f 	.word	0x08009d3f
 8009d04:	08009d2f 	.word	0x08009d2f
 8009d08:	08009d3f 	.word	0x08009d3f
 8009d0c:	08009d3f 	.word	0x08009d3f
 8009d10:	08009d3f 	.word	0x08009d3f
 8009d14:	08009d37 	.word	0x08009d37
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8009d18:	f7fc fe12 	bl	8006940 <HAL_RCC_GetPCLK1Freq>
 8009d1c:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8009d1e:	e014      	b.n	8009d4a <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8009d20:	f7fc fe24 	bl	800696c <HAL_RCC_GetPCLK2Freq>
 8009d24:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8009d26:	e010      	b.n	8009d4a <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8009d28:	4b5a      	ldr	r3, [pc, #360]	@ (8009e94 <UART_SetConfig+0x594>)
 8009d2a:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8009d2c:	e00d      	b.n	8009d4a <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8009d2e:	f7fc fd9b 	bl	8006868 <HAL_RCC_GetSysClockFreq>
 8009d32:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8009d34:	e009      	b.n	8009d4a <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8009d36:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8009d3a:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8009d3c:	e005      	b.n	8009d4a <UART_SetConfig+0x44a>
      default:
        pclk = 0U;
 8009d3e:	2300      	movs	r3, #0
 8009d40:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8009d42:	2301      	movs	r3, #1
 8009d44:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8009d48:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8009d4a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009d4c:	2b00      	cmp	r3, #0
 8009d4e:	f000 8089 	beq.w	8009e64 <UART_SetConfig+0x564>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8009d52:	697b      	ldr	r3, [r7, #20]
 8009d54:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009d56:	4a4e      	ldr	r2, [pc, #312]	@ (8009e90 <UART_SetConfig+0x590>)
 8009d58:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8009d5c:	461a      	mov	r2, r3
 8009d5e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009d60:	fbb3 f3f2 	udiv	r3, r3, r2
 8009d64:	005a      	lsls	r2, r3, #1
 8009d66:	697b      	ldr	r3, [r7, #20]
 8009d68:	685b      	ldr	r3, [r3, #4]
 8009d6a:	085b      	lsrs	r3, r3, #1
 8009d6c:	441a      	add	r2, r3
 8009d6e:	697b      	ldr	r3, [r7, #20]
 8009d70:	685b      	ldr	r3, [r3, #4]
 8009d72:	fbb2 f3f3 	udiv	r3, r2, r3
 8009d76:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8009d78:	6a3b      	ldr	r3, [r7, #32]
 8009d7a:	2b0f      	cmp	r3, #15
 8009d7c:	d916      	bls.n	8009dac <UART_SetConfig+0x4ac>
 8009d7e:	6a3b      	ldr	r3, [r7, #32]
 8009d80:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8009d84:	d212      	bcs.n	8009dac <UART_SetConfig+0x4ac>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8009d86:	6a3b      	ldr	r3, [r7, #32]
 8009d88:	b29b      	uxth	r3, r3
 8009d8a:	f023 030f 	bic.w	r3, r3, #15
 8009d8e:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8009d90:	6a3b      	ldr	r3, [r7, #32]
 8009d92:	085b      	lsrs	r3, r3, #1
 8009d94:	b29b      	uxth	r3, r3
 8009d96:	f003 0307 	and.w	r3, r3, #7
 8009d9a:	b29a      	uxth	r2, r3
 8009d9c:	8bfb      	ldrh	r3, [r7, #30]
 8009d9e:	4313      	orrs	r3, r2
 8009da0:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 8009da2:	697b      	ldr	r3, [r7, #20]
 8009da4:	681b      	ldr	r3, [r3, #0]
 8009da6:	8bfa      	ldrh	r2, [r7, #30]
 8009da8:	60da      	str	r2, [r3, #12]
 8009daa:	e05b      	b.n	8009e64 <UART_SetConfig+0x564>
      }
      else
      {
        ret = HAL_ERROR;
 8009dac:	2301      	movs	r3, #1
 8009dae:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8009db2:	e057      	b.n	8009e64 <UART_SetConfig+0x564>
      }
    }
  }
  else
  {
    switch (clocksource)
 8009db4:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8009db8:	2b08      	cmp	r3, #8
 8009dba:	d828      	bhi.n	8009e0e <UART_SetConfig+0x50e>
 8009dbc:	a201      	add	r2, pc, #4	@ (adr r2, 8009dc4 <UART_SetConfig+0x4c4>)
 8009dbe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009dc2:	bf00      	nop
 8009dc4:	08009de9 	.word	0x08009de9
 8009dc8:	08009df1 	.word	0x08009df1
 8009dcc:	08009df9 	.word	0x08009df9
 8009dd0:	08009e0f 	.word	0x08009e0f
 8009dd4:	08009dff 	.word	0x08009dff
 8009dd8:	08009e0f 	.word	0x08009e0f
 8009ddc:	08009e0f 	.word	0x08009e0f
 8009de0:	08009e0f 	.word	0x08009e0f
 8009de4:	08009e07 	.word	0x08009e07
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8009de8:	f7fc fdaa 	bl	8006940 <HAL_RCC_GetPCLK1Freq>
 8009dec:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8009dee:	e014      	b.n	8009e1a <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8009df0:	f7fc fdbc 	bl	800696c <HAL_RCC_GetPCLK2Freq>
 8009df4:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8009df6:	e010      	b.n	8009e1a <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8009df8:	4b26      	ldr	r3, [pc, #152]	@ (8009e94 <UART_SetConfig+0x594>)
 8009dfa:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8009dfc:	e00d      	b.n	8009e1a <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8009dfe:	f7fc fd33 	bl	8006868 <HAL_RCC_GetSysClockFreq>
 8009e02:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8009e04:	e009      	b.n	8009e1a <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8009e06:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8009e0a:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8009e0c:	e005      	b.n	8009e1a <UART_SetConfig+0x51a>
      default:
        pclk = 0U;
 8009e0e:	2300      	movs	r3, #0
 8009e10:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8009e12:	2301      	movs	r3, #1
 8009e14:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8009e18:	bf00      	nop
    }

    if (pclk != 0U)
 8009e1a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009e1c:	2b00      	cmp	r3, #0
 8009e1e:	d021      	beq.n	8009e64 <UART_SetConfig+0x564>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8009e20:	697b      	ldr	r3, [r7, #20]
 8009e22:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009e24:	4a1a      	ldr	r2, [pc, #104]	@ (8009e90 <UART_SetConfig+0x590>)
 8009e26:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8009e2a:	461a      	mov	r2, r3
 8009e2c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009e2e:	fbb3 f2f2 	udiv	r2, r3, r2
 8009e32:	697b      	ldr	r3, [r7, #20]
 8009e34:	685b      	ldr	r3, [r3, #4]
 8009e36:	085b      	lsrs	r3, r3, #1
 8009e38:	441a      	add	r2, r3
 8009e3a:	697b      	ldr	r3, [r7, #20]
 8009e3c:	685b      	ldr	r3, [r3, #4]
 8009e3e:	fbb2 f3f3 	udiv	r3, r2, r3
 8009e42:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8009e44:	6a3b      	ldr	r3, [r7, #32]
 8009e46:	2b0f      	cmp	r3, #15
 8009e48:	d909      	bls.n	8009e5e <UART_SetConfig+0x55e>
 8009e4a:	6a3b      	ldr	r3, [r7, #32]
 8009e4c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8009e50:	d205      	bcs.n	8009e5e <UART_SetConfig+0x55e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8009e52:	6a3b      	ldr	r3, [r7, #32]
 8009e54:	b29a      	uxth	r2, r3
 8009e56:	697b      	ldr	r3, [r7, #20]
 8009e58:	681b      	ldr	r3, [r3, #0]
 8009e5a:	60da      	str	r2, [r3, #12]
 8009e5c:	e002      	b.n	8009e64 <UART_SetConfig+0x564>
      }
      else
      {
        ret = HAL_ERROR;
 8009e5e:	2301      	movs	r3, #1
 8009e60:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8009e64:	697b      	ldr	r3, [r7, #20]
 8009e66:	2201      	movs	r2, #1
 8009e68:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 8009e6c:	697b      	ldr	r3, [r7, #20]
 8009e6e:	2201      	movs	r2, #1
 8009e70:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8009e74:	697b      	ldr	r3, [r7, #20]
 8009e76:	2200      	movs	r2, #0
 8009e78:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 8009e7a:	697b      	ldr	r3, [r7, #20]
 8009e7c:	2200      	movs	r2, #0
 8009e7e:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 8009e80:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
}
 8009e84:	4618      	mov	r0, r3
 8009e86:	3730      	adds	r7, #48	@ 0x30
 8009e88:	46bd      	mov	sp, r7
 8009e8a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8009e8e:	bf00      	nop
 8009e90:	0800d090 	.word	0x0800d090
 8009e94:	00f42400 	.word	0x00f42400

08009e98 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8009e98:	b480      	push	{r7}
 8009e9a:	b083      	sub	sp, #12
 8009e9c:	af00      	add	r7, sp, #0
 8009e9e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8009ea0:	687b      	ldr	r3, [r7, #4]
 8009ea2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009ea4:	f003 0308 	and.w	r3, r3, #8
 8009ea8:	2b00      	cmp	r3, #0
 8009eaa:	d00a      	beq.n	8009ec2 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8009eac:	687b      	ldr	r3, [r7, #4]
 8009eae:	681b      	ldr	r3, [r3, #0]
 8009eb0:	685b      	ldr	r3, [r3, #4]
 8009eb2:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8009eb6:	687b      	ldr	r3, [r7, #4]
 8009eb8:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8009eba:	687b      	ldr	r3, [r7, #4]
 8009ebc:	681b      	ldr	r3, [r3, #0]
 8009ebe:	430a      	orrs	r2, r1
 8009ec0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8009ec2:	687b      	ldr	r3, [r7, #4]
 8009ec4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009ec6:	f003 0301 	and.w	r3, r3, #1
 8009eca:	2b00      	cmp	r3, #0
 8009ecc:	d00a      	beq.n	8009ee4 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8009ece:	687b      	ldr	r3, [r7, #4]
 8009ed0:	681b      	ldr	r3, [r3, #0]
 8009ed2:	685b      	ldr	r3, [r3, #4]
 8009ed4:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8009ed8:	687b      	ldr	r3, [r7, #4]
 8009eda:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009edc:	687b      	ldr	r3, [r7, #4]
 8009ede:	681b      	ldr	r3, [r3, #0]
 8009ee0:	430a      	orrs	r2, r1
 8009ee2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8009ee4:	687b      	ldr	r3, [r7, #4]
 8009ee6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009ee8:	f003 0302 	and.w	r3, r3, #2
 8009eec:	2b00      	cmp	r3, #0
 8009eee:	d00a      	beq.n	8009f06 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8009ef0:	687b      	ldr	r3, [r7, #4]
 8009ef2:	681b      	ldr	r3, [r3, #0]
 8009ef4:	685b      	ldr	r3, [r3, #4]
 8009ef6:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8009efa:	687b      	ldr	r3, [r7, #4]
 8009efc:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8009efe:	687b      	ldr	r3, [r7, #4]
 8009f00:	681b      	ldr	r3, [r3, #0]
 8009f02:	430a      	orrs	r2, r1
 8009f04:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8009f06:	687b      	ldr	r3, [r7, #4]
 8009f08:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009f0a:	f003 0304 	and.w	r3, r3, #4
 8009f0e:	2b00      	cmp	r3, #0
 8009f10:	d00a      	beq.n	8009f28 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8009f12:	687b      	ldr	r3, [r7, #4]
 8009f14:	681b      	ldr	r3, [r3, #0]
 8009f16:	685b      	ldr	r3, [r3, #4]
 8009f18:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8009f1c:	687b      	ldr	r3, [r7, #4]
 8009f1e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8009f20:	687b      	ldr	r3, [r7, #4]
 8009f22:	681b      	ldr	r3, [r3, #0]
 8009f24:	430a      	orrs	r2, r1
 8009f26:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8009f28:	687b      	ldr	r3, [r7, #4]
 8009f2a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009f2c:	f003 0310 	and.w	r3, r3, #16
 8009f30:	2b00      	cmp	r3, #0
 8009f32:	d00a      	beq.n	8009f4a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8009f34:	687b      	ldr	r3, [r7, #4]
 8009f36:	681b      	ldr	r3, [r3, #0]
 8009f38:	689b      	ldr	r3, [r3, #8]
 8009f3a:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8009f3e:	687b      	ldr	r3, [r7, #4]
 8009f40:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8009f42:	687b      	ldr	r3, [r7, #4]
 8009f44:	681b      	ldr	r3, [r3, #0]
 8009f46:	430a      	orrs	r2, r1
 8009f48:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8009f4a:	687b      	ldr	r3, [r7, #4]
 8009f4c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009f4e:	f003 0320 	and.w	r3, r3, #32
 8009f52:	2b00      	cmp	r3, #0
 8009f54:	d00a      	beq.n	8009f6c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8009f56:	687b      	ldr	r3, [r7, #4]
 8009f58:	681b      	ldr	r3, [r3, #0]
 8009f5a:	689b      	ldr	r3, [r3, #8]
 8009f5c:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8009f60:	687b      	ldr	r3, [r7, #4]
 8009f62:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8009f64:	687b      	ldr	r3, [r7, #4]
 8009f66:	681b      	ldr	r3, [r3, #0]
 8009f68:	430a      	orrs	r2, r1
 8009f6a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8009f6c:	687b      	ldr	r3, [r7, #4]
 8009f6e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009f70:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009f74:	2b00      	cmp	r3, #0
 8009f76:	d01a      	beq.n	8009fae <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8009f78:	687b      	ldr	r3, [r7, #4]
 8009f7a:	681b      	ldr	r3, [r3, #0]
 8009f7c:	685b      	ldr	r3, [r3, #4]
 8009f7e:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8009f82:	687b      	ldr	r3, [r7, #4]
 8009f84:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8009f86:	687b      	ldr	r3, [r7, #4]
 8009f88:	681b      	ldr	r3, [r3, #0]
 8009f8a:	430a      	orrs	r2, r1
 8009f8c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8009f8e:	687b      	ldr	r3, [r7, #4]
 8009f90:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009f92:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8009f96:	d10a      	bne.n	8009fae <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8009f98:	687b      	ldr	r3, [r7, #4]
 8009f9a:	681b      	ldr	r3, [r3, #0]
 8009f9c:	685b      	ldr	r3, [r3, #4]
 8009f9e:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8009fa2:	687b      	ldr	r3, [r7, #4]
 8009fa4:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8009fa6:	687b      	ldr	r3, [r7, #4]
 8009fa8:	681b      	ldr	r3, [r3, #0]
 8009faa:	430a      	orrs	r2, r1
 8009fac:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8009fae:	687b      	ldr	r3, [r7, #4]
 8009fb0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009fb2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8009fb6:	2b00      	cmp	r3, #0
 8009fb8:	d00a      	beq.n	8009fd0 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8009fba:	687b      	ldr	r3, [r7, #4]
 8009fbc:	681b      	ldr	r3, [r3, #0]
 8009fbe:	685b      	ldr	r3, [r3, #4]
 8009fc0:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8009fc4:	687b      	ldr	r3, [r7, #4]
 8009fc6:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8009fc8:	687b      	ldr	r3, [r7, #4]
 8009fca:	681b      	ldr	r3, [r3, #0]
 8009fcc:	430a      	orrs	r2, r1
 8009fce:	605a      	str	r2, [r3, #4]
  }
}
 8009fd0:	bf00      	nop
 8009fd2:	370c      	adds	r7, #12
 8009fd4:	46bd      	mov	sp, r7
 8009fd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009fda:	4770      	bx	lr

08009fdc <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8009fdc:	b580      	push	{r7, lr}
 8009fde:	b098      	sub	sp, #96	@ 0x60
 8009fe0:	af02      	add	r7, sp, #8
 8009fe2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009fe4:	687b      	ldr	r3, [r7, #4]
 8009fe6:	2200      	movs	r2, #0
 8009fe8:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8009fec:	f7fb f884 	bl	80050f8 <HAL_GetTick>
 8009ff0:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8009ff2:	687b      	ldr	r3, [r7, #4]
 8009ff4:	681b      	ldr	r3, [r3, #0]
 8009ff6:	681b      	ldr	r3, [r3, #0]
 8009ff8:	f003 0308 	and.w	r3, r3, #8
 8009ffc:	2b08      	cmp	r3, #8
 8009ffe:	d12f      	bne.n	800a060 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800a000:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800a004:	9300      	str	r3, [sp, #0]
 800a006:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800a008:	2200      	movs	r2, #0
 800a00a:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 800a00e:	6878      	ldr	r0, [r7, #4]
 800a010:	f000 f88e 	bl	800a130 <UART_WaitOnFlagUntilTimeout>
 800a014:	4603      	mov	r3, r0
 800a016:	2b00      	cmp	r3, #0
 800a018:	d022      	beq.n	800a060 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 800a01a:	687b      	ldr	r3, [r7, #4]
 800a01c:	681b      	ldr	r3, [r3, #0]
 800a01e:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a020:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a022:	e853 3f00 	ldrex	r3, [r3]
 800a026:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800a028:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a02a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800a02e:	653b      	str	r3, [r7, #80]	@ 0x50
 800a030:	687b      	ldr	r3, [r7, #4]
 800a032:	681b      	ldr	r3, [r3, #0]
 800a034:	461a      	mov	r2, r3
 800a036:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800a038:	647b      	str	r3, [r7, #68]	@ 0x44
 800a03a:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a03c:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800a03e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800a040:	e841 2300 	strex	r3, r2, [r1]
 800a044:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800a046:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a048:	2b00      	cmp	r3, #0
 800a04a:	d1e6      	bne.n	800a01a <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 800a04c:	687b      	ldr	r3, [r7, #4]
 800a04e:	2220      	movs	r2, #32
 800a050:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 800a054:	687b      	ldr	r3, [r7, #4]
 800a056:	2200      	movs	r2, #0
 800a058:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800a05c:	2303      	movs	r3, #3
 800a05e:	e063      	b.n	800a128 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800a060:	687b      	ldr	r3, [r7, #4]
 800a062:	681b      	ldr	r3, [r3, #0]
 800a064:	681b      	ldr	r3, [r3, #0]
 800a066:	f003 0304 	and.w	r3, r3, #4
 800a06a:	2b04      	cmp	r3, #4
 800a06c:	d149      	bne.n	800a102 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800a06e:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800a072:	9300      	str	r3, [sp, #0]
 800a074:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800a076:	2200      	movs	r2, #0
 800a078:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 800a07c:	6878      	ldr	r0, [r7, #4]
 800a07e:	f000 f857 	bl	800a130 <UART_WaitOnFlagUntilTimeout>
 800a082:	4603      	mov	r3, r0
 800a084:	2b00      	cmp	r3, #0
 800a086:	d03c      	beq.n	800a102 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800a088:	687b      	ldr	r3, [r7, #4]
 800a08a:	681b      	ldr	r3, [r3, #0]
 800a08c:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a08e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a090:	e853 3f00 	ldrex	r3, [r3]
 800a094:	623b      	str	r3, [r7, #32]
   return(result);
 800a096:	6a3b      	ldr	r3, [r7, #32]
 800a098:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800a09c:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800a09e:	687b      	ldr	r3, [r7, #4]
 800a0a0:	681b      	ldr	r3, [r3, #0]
 800a0a2:	461a      	mov	r2, r3
 800a0a4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800a0a6:	633b      	str	r3, [r7, #48]	@ 0x30
 800a0a8:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a0aa:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800a0ac:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800a0ae:	e841 2300 	strex	r3, r2, [r1]
 800a0b2:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800a0b4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a0b6:	2b00      	cmp	r3, #0
 800a0b8:	d1e6      	bne.n	800a088 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a0ba:	687b      	ldr	r3, [r7, #4]
 800a0bc:	681b      	ldr	r3, [r3, #0]
 800a0be:	3308      	adds	r3, #8
 800a0c0:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a0c2:	693b      	ldr	r3, [r7, #16]
 800a0c4:	e853 3f00 	ldrex	r3, [r3]
 800a0c8:	60fb      	str	r3, [r7, #12]
   return(result);
 800a0ca:	68fb      	ldr	r3, [r7, #12]
 800a0cc:	f023 0301 	bic.w	r3, r3, #1
 800a0d0:	64bb      	str	r3, [r7, #72]	@ 0x48
 800a0d2:	687b      	ldr	r3, [r7, #4]
 800a0d4:	681b      	ldr	r3, [r3, #0]
 800a0d6:	3308      	adds	r3, #8
 800a0d8:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800a0da:	61fa      	str	r2, [r7, #28]
 800a0dc:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a0de:	69b9      	ldr	r1, [r7, #24]
 800a0e0:	69fa      	ldr	r2, [r7, #28]
 800a0e2:	e841 2300 	strex	r3, r2, [r1]
 800a0e6:	617b      	str	r3, [r7, #20]
   return(result);
 800a0e8:	697b      	ldr	r3, [r7, #20]
 800a0ea:	2b00      	cmp	r3, #0
 800a0ec:	d1e5      	bne.n	800a0ba <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 800a0ee:	687b      	ldr	r3, [r7, #4]
 800a0f0:	2220      	movs	r2, #32
 800a0f2:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 800a0f6:	687b      	ldr	r3, [r7, #4]
 800a0f8:	2200      	movs	r2, #0
 800a0fa:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800a0fe:	2303      	movs	r3, #3
 800a100:	e012      	b.n	800a128 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800a102:	687b      	ldr	r3, [r7, #4]
 800a104:	2220      	movs	r2, #32
 800a106:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 800a10a:	687b      	ldr	r3, [r7, #4]
 800a10c:	2220      	movs	r2, #32
 800a10e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a112:	687b      	ldr	r3, [r7, #4]
 800a114:	2200      	movs	r2, #0
 800a116:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800a118:	687b      	ldr	r3, [r7, #4]
 800a11a:	2200      	movs	r2, #0
 800a11c:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 800a11e:	687b      	ldr	r3, [r7, #4]
 800a120:	2200      	movs	r2, #0
 800a122:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800a126:	2300      	movs	r3, #0
}
 800a128:	4618      	mov	r0, r3
 800a12a:	3758      	adds	r7, #88	@ 0x58
 800a12c:	46bd      	mov	sp, r7
 800a12e:	bd80      	pop	{r7, pc}

0800a130 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800a130:	b580      	push	{r7, lr}
 800a132:	b084      	sub	sp, #16
 800a134:	af00      	add	r7, sp, #0
 800a136:	60f8      	str	r0, [r7, #12]
 800a138:	60b9      	str	r1, [r7, #8]
 800a13a:	603b      	str	r3, [r7, #0]
 800a13c:	4613      	mov	r3, r2
 800a13e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800a140:	e04f      	b.n	800a1e2 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800a142:	69bb      	ldr	r3, [r7, #24]
 800a144:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800a148:	d04b      	beq.n	800a1e2 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800a14a:	f7fa ffd5 	bl	80050f8 <HAL_GetTick>
 800a14e:	4602      	mov	r2, r0
 800a150:	683b      	ldr	r3, [r7, #0]
 800a152:	1ad3      	subs	r3, r2, r3
 800a154:	69ba      	ldr	r2, [r7, #24]
 800a156:	429a      	cmp	r2, r3
 800a158:	d302      	bcc.n	800a160 <UART_WaitOnFlagUntilTimeout+0x30>
 800a15a:	69bb      	ldr	r3, [r7, #24]
 800a15c:	2b00      	cmp	r3, #0
 800a15e:	d101      	bne.n	800a164 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800a160:	2303      	movs	r3, #3
 800a162:	e04e      	b.n	800a202 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800a164:	68fb      	ldr	r3, [r7, #12]
 800a166:	681b      	ldr	r3, [r3, #0]
 800a168:	681b      	ldr	r3, [r3, #0]
 800a16a:	f003 0304 	and.w	r3, r3, #4
 800a16e:	2b00      	cmp	r3, #0
 800a170:	d037      	beq.n	800a1e2 <UART_WaitOnFlagUntilTimeout+0xb2>
 800a172:	68bb      	ldr	r3, [r7, #8]
 800a174:	2b80      	cmp	r3, #128	@ 0x80
 800a176:	d034      	beq.n	800a1e2 <UART_WaitOnFlagUntilTimeout+0xb2>
 800a178:	68bb      	ldr	r3, [r7, #8]
 800a17a:	2b40      	cmp	r3, #64	@ 0x40
 800a17c:	d031      	beq.n	800a1e2 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800a17e:	68fb      	ldr	r3, [r7, #12]
 800a180:	681b      	ldr	r3, [r3, #0]
 800a182:	69db      	ldr	r3, [r3, #28]
 800a184:	f003 0308 	and.w	r3, r3, #8
 800a188:	2b08      	cmp	r3, #8
 800a18a:	d110      	bne.n	800a1ae <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800a18c:	68fb      	ldr	r3, [r7, #12]
 800a18e:	681b      	ldr	r3, [r3, #0]
 800a190:	2208      	movs	r2, #8
 800a192:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800a194:	68f8      	ldr	r0, [r7, #12]
 800a196:	f000 f879 	bl	800a28c <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800a19a:	68fb      	ldr	r3, [r7, #12]
 800a19c:	2208      	movs	r2, #8
 800a19e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800a1a2:	68fb      	ldr	r3, [r7, #12]
 800a1a4:	2200      	movs	r2, #0
 800a1a6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 800a1aa:	2301      	movs	r3, #1
 800a1ac:	e029      	b.n	800a202 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800a1ae:	68fb      	ldr	r3, [r7, #12]
 800a1b0:	681b      	ldr	r3, [r3, #0]
 800a1b2:	69db      	ldr	r3, [r3, #28]
 800a1b4:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800a1b8:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800a1bc:	d111      	bne.n	800a1e2 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800a1be:	68fb      	ldr	r3, [r7, #12]
 800a1c0:	681b      	ldr	r3, [r3, #0]
 800a1c2:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800a1c6:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800a1c8:	68f8      	ldr	r0, [r7, #12]
 800a1ca:	f000 f85f 	bl	800a28c <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800a1ce:	68fb      	ldr	r3, [r7, #12]
 800a1d0:	2220      	movs	r2, #32
 800a1d2:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800a1d6:	68fb      	ldr	r3, [r7, #12]
 800a1d8:	2200      	movs	r2, #0
 800a1da:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 800a1de:	2303      	movs	r3, #3
 800a1e0:	e00f      	b.n	800a202 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800a1e2:	68fb      	ldr	r3, [r7, #12]
 800a1e4:	681b      	ldr	r3, [r3, #0]
 800a1e6:	69da      	ldr	r2, [r3, #28]
 800a1e8:	68bb      	ldr	r3, [r7, #8]
 800a1ea:	4013      	ands	r3, r2
 800a1ec:	68ba      	ldr	r2, [r7, #8]
 800a1ee:	429a      	cmp	r2, r3
 800a1f0:	bf0c      	ite	eq
 800a1f2:	2301      	moveq	r3, #1
 800a1f4:	2300      	movne	r3, #0
 800a1f6:	b2db      	uxtb	r3, r3
 800a1f8:	461a      	mov	r2, r3
 800a1fa:	79fb      	ldrb	r3, [r7, #7]
 800a1fc:	429a      	cmp	r2, r3
 800a1fe:	d0a0      	beq.n	800a142 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800a200:	2300      	movs	r3, #0
}
 800a202:	4618      	mov	r0, r3
 800a204:	3710      	adds	r7, #16
 800a206:	46bd      	mov	sp, r7
 800a208:	bd80      	pop	{r7, pc}

0800a20a <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 800a20a:	b480      	push	{r7}
 800a20c:	b08f      	sub	sp, #60	@ 0x3c
 800a20e:	af00      	add	r7, sp, #0
 800a210:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
 800a212:	687b      	ldr	r3, [r7, #4]
 800a214:	681b      	ldr	r3, [r3, #0]
 800a216:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a218:	6a3b      	ldr	r3, [r7, #32]
 800a21a:	e853 3f00 	ldrex	r3, [r3]
 800a21e:	61fb      	str	r3, [r7, #28]
   return(result);
 800a220:	69fb      	ldr	r3, [r7, #28]
 800a222:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 800a226:	637b      	str	r3, [r7, #52]	@ 0x34
 800a228:	687b      	ldr	r3, [r7, #4]
 800a22a:	681b      	ldr	r3, [r3, #0]
 800a22c:	461a      	mov	r2, r3
 800a22e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a230:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800a232:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a234:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800a236:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800a238:	e841 2300 	strex	r3, r2, [r1]
 800a23c:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800a23e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a240:	2b00      	cmp	r3, #0
 800a242:	d1e6      	bne.n	800a212 <UART_EndTxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
 800a244:	687b      	ldr	r3, [r7, #4]
 800a246:	681b      	ldr	r3, [r3, #0]
 800a248:	3308      	adds	r3, #8
 800a24a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a24c:	68fb      	ldr	r3, [r7, #12]
 800a24e:	e853 3f00 	ldrex	r3, [r3]
 800a252:	60bb      	str	r3, [r7, #8]
   return(result);
 800a254:	68bb      	ldr	r3, [r7, #8]
 800a256:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 800a25a:	633b      	str	r3, [r7, #48]	@ 0x30
 800a25c:	687b      	ldr	r3, [r7, #4]
 800a25e:	681b      	ldr	r3, [r3, #0]
 800a260:	3308      	adds	r3, #8
 800a262:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800a264:	61ba      	str	r2, [r7, #24]
 800a266:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a268:	6979      	ldr	r1, [r7, #20]
 800a26a:	69ba      	ldr	r2, [r7, #24]
 800a26c:	e841 2300 	strex	r3, r2, [r1]
 800a270:	613b      	str	r3, [r7, #16]
   return(result);
 800a272:	693b      	ldr	r3, [r7, #16]
 800a274:	2b00      	cmp	r3, #0
 800a276:	d1e5      	bne.n	800a244 <UART_EndTxTransfer+0x3a>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800a278:	687b      	ldr	r3, [r7, #4]
 800a27a:	2220      	movs	r2, #32
 800a27c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
}
 800a280:	bf00      	nop
 800a282:	373c      	adds	r7, #60	@ 0x3c
 800a284:	46bd      	mov	sp, r7
 800a286:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a28a:	4770      	bx	lr

0800a28c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800a28c:	b480      	push	{r7}
 800a28e:	b095      	sub	sp, #84	@ 0x54
 800a290:	af00      	add	r7, sp, #0
 800a292:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800a294:	687b      	ldr	r3, [r7, #4]
 800a296:	681b      	ldr	r3, [r3, #0]
 800a298:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a29a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a29c:	e853 3f00 	ldrex	r3, [r3]
 800a2a0:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800a2a2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a2a4:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800a2a8:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800a2aa:	687b      	ldr	r3, [r7, #4]
 800a2ac:	681b      	ldr	r3, [r3, #0]
 800a2ae:	461a      	mov	r2, r3
 800a2b0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800a2b2:	643b      	str	r3, [r7, #64]	@ 0x40
 800a2b4:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a2b6:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800a2b8:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800a2ba:	e841 2300 	strex	r3, r2, [r1]
 800a2be:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800a2c0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a2c2:	2b00      	cmp	r3, #0
 800a2c4:	d1e6      	bne.n	800a294 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800a2c6:	687b      	ldr	r3, [r7, #4]
 800a2c8:	681b      	ldr	r3, [r3, #0]
 800a2ca:	3308      	adds	r3, #8
 800a2cc:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a2ce:	6a3b      	ldr	r3, [r7, #32]
 800a2d0:	e853 3f00 	ldrex	r3, [r3]
 800a2d4:	61fb      	str	r3, [r7, #28]
   return(result);
 800a2d6:	69fb      	ldr	r3, [r7, #28]
 800a2d8:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800a2dc:	f023 0301 	bic.w	r3, r3, #1
 800a2e0:	64bb      	str	r3, [r7, #72]	@ 0x48
 800a2e2:	687b      	ldr	r3, [r7, #4]
 800a2e4:	681b      	ldr	r3, [r3, #0]
 800a2e6:	3308      	adds	r3, #8
 800a2e8:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800a2ea:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800a2ec:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a2ee:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800a2f0:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800a2f2:	e841 2300 	strex	r3, r2, [r1]
 800a2f6:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800a2f8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a2fa:	2b00      	cmp	r3, #0
 800a2fc:	d1e3      	bne.n	800a2c6 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a2fe:	687b      	ldr	r3, [r7, #4]
 800a300:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800a302:	2b01      	cmp	r3, #1
 800a304:	d118      	bne.n	800a338 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a306:	687b      	ldr	r3, [r7, #4]
 800a308:	681b      	ldr	r3, [r3, #0]
 800a30a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a30c:	68fb      	ldr	r3, [r7, #12]
 800a30e:	e853 3f00 	ldrex	r3, [r3]
 800a312:	60bb      	str	r3, [r7, #8]
   return(result);
 800a314:	68bb      	ldr	r3, [r7, #8]
 800a316:	f023 0310 	bic.w	r3, r3, #16
 800a31a:	647b      	str	r3, [r7, #68]	@ 0x44
 800a31c:	687b      	ldr	r3, [r7, #4]
 800a31e:	681b      	ldr	r3, [r3, #0]
 800a320:	461a      	mov	r2, r3
 800a322:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800a324:	61bb      	str	r3, [r7, #24]
 800a326:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a328:	6979      	ldr	r1, [r7, #20]
 800a32a:	69ba      	ldr	r2, [r7, #24]
 800a32c:	e841 2300 	strex	r3, r2, [r1]
 800a330:	613b      	str	r3, [r7, #16]
   return(result);
 800a332:	693b      	ldr	r3, [r7, #16]
 800a334:	2b00      	cmp	r3, #0
 800a336:	d1e6      	bne.n	800a306 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800a338:	687b      	ldr	r3, [r7, #4]
 800a33a:	2220      	movs	r2, #32
 800a33c:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a340:	687b      	ldr	r3, [r7, #4]
 800a342:	2200      	movs	r2, #0
 800a344:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800a346:	687b      	ldr	r3, [r7, #4]
 800a348:	2200      	movs	r2, #0
 800a34a:	675a      	str	r2, [r3, #116]	@ 0x74
}
 800a34c:	bf00      	nop
 800a34e:	3754      	adds	r7, #84	@ 0x54
 800a350:	46bd      	mov	sp, r7
 800a352:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a356:	4770      	bx	lr

0800a358 <UART_DMATransmitCplt>:
  * @brief DMA UART transmit process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 800a358:	b580      	push	{r7, lr}
 800a35a:	b090      	sub	sp, #64	@ 0x40
 800a35c:	af00      	add	r7, sp, #0
 800a35e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800a360:	687b      	ldr	r3, [r7, #4]
 800a362:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a364:	63fb      	str	r3, [r7, #60]	@ 0x3c

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 800a366:	687b      	ldr	r3, [r7, #4]
 800a368:	681b      	ldr	r3, [r3, #0]
 800a36a:	681b      	ldr	r3, [r3, #0]
 800a36c:	f003 0320 	and.w	r3, r3, #32
 800a370:	2b00      	cmp	r3, #0
 800a372:	d137      	bne.n	800a3e4 <UART_DMATransmitCplt+0x8c>
  {
    huart->TxXferCount = 0U;
 800a374:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a376:	2200      	movs	r2, #0
 800a378:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* Disable the DMA transfer for transmit request by resetting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800a37c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a37e:	681b      	ldr	r3, [r3, #0]
 800a380:	3308      	adds	r3, #8
 800a382:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a384:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a386:	e853 3f00 	ldrex	r3, [r3]
 800a38a:	623b      	str	r3, [r7, #32]
   return(result);
 800a38c:	6a3b      	ldr	r3, [r7, #32]
 800a38e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800a392:	63bb      	str	r3, [r7, #56]	@ 0x38
 800a394:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a396:	681b      	ldr	r3, [r3, #0]
 800a398:	3308      	adds	r3, #8
 800a39a:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800a39c:	633a      	str	r2, [r7, #48]	@ 0x30
 800a39e:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a3a0:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800a3a2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800a3a4:	e841 2300 	strex	r3, r2, [r1]
 800a3a8:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800a3aa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a3ac:	2b00      	cmp	r3, #0
 800a3ae:	d1e5      	bne.n	800a37c <UART_DMATransmitCplt+0x24>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800a3b0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a3b2:	681b      	ldr	r3, [r3, #0]
 800a3b4:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a3b6:	693b      	ldr	r3, [r7, #16]
 800a3b8:	e853 3f00 	ldrex	r3, [r3]
 800a3bc:	60fb      	str	r3, [r7, #12]
   return(result);
 800a3be:	68fb      	ldr	r3, [r7, #12]
 800a3c0:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800a3c4:	637b      	str	r3, [r7, #52]	@ 0x34
 800a3c6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a3c8:	681b      	ldr	r3, [r3, #0]
 800a3ca:	461a      	mov	r2, r3
 800a3cc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a3ce:	61fb      	str	r3, [r7, #28]
 800a3d0:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a3d2:	69b9      	ldr	r1, [r7, #24]
 800a3d4:	69fa      	ldr	r2, [r7, #28]
 800a3d6:	e841 2300 	strex	r3, r2, [r1]
 800a3da:	617b      	str	r3, [r7, #20]
   return(result);
 800a3dc:	697b      	ldr	r3, [r7, #20]
 800a3de:	2b00      	cmp	r3, #0
 800a3e0:	d1e6      	bne.n	800a3b0 <UART_DMATransmitCplt+0x58>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800a3e2:	e002      	b.n	800a3ea <UART_DMATransmitCplt+0x92>
    HAL_UART_TxCpltCallback(huart);
 800a3e4:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 800a3e6:	f7f6 fd7f 	bl	8000ee8 <HAL_UART_TxCpltCallback>
}
 800a3ea:	bf00      	nop
 800a3ec:	3740      	adds	r7, #64	@ 0x40
 800a3ee:	46bd      	mov	sp, r7
 800a3f0:	bd80      	pop	{r7, pc}

0800a3f2 <UART_DMATxHalfCplt>:
  * @brief DMA UART transmit process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800a3f2:	b580      	push	{r7, lr}
 800a3f4:	b084      	sub	sp, #16
 800a3f6:	af00      	add	r7, sp, #0
 800a3f8:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800a3fa:	687b      	ldr	r3, [r7, #4]
 800a3fc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a3fe:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx Half complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx Half complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 800a400:	68f8      	ldr	r0, [r7, #12]
 800a402:	f7ff fa5d 	bl	80098c0 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800a406:	bf00      	nop
 800a408:	3710      	adds	r7, #16
 800a40a:	46bd      	mov	sp, r7
 800a40c:	bd80      	pop	{r7, pc}

0800a40e <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800a40e:	b580      	push	{r7, lr}
 800a410:	b086      	sub	sp, #24
 800a412:	af00      	add	r7, sp, #0
 800a414:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800a416:	687b      	ldr	r3, [r7, #4]
 800a418:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a41a:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 800a41c:	697b      	ldr	r3, [r7, #20]
 800a41e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800a422:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 800a424:	697b      	ldr	r3, [r7, #20]
 800a426:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800a42a:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 800a42c:	697b      	ldr	r3, [r7, #20]
 800a42e:	681b      	ldr	r3, [r3, #0]
 800a430:	689b      	ldr	r3, [r3, #8]
 800a432:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800a436:	2b80      	cmp	r3, #128	@ 0x80
 800a438:	d109      	bne.n	800a44e <UART_DMAError+0x40>
 800a43a:	693b      	ldr	r3, [r7, #16]
 800a43c:	2b21      	cmp	r3, #33	@ 0x21
 800a43e:	d106      	bne.n	800a44e <UART_DMAError+0x40>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 800a440:	697b      	ldr	r3, [r7, #20]
 800a442:	2200      	movs	r2, #0
 800a444:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    UART_EndTxTransfer(huart);
 800a448:	6978      	ldr	r0, [r7, #20]
 800a44a:	f7ff fede 	bl	800a20a <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 800a44e:	697b      	ldr	r3, [r7, #20]
 800a450:	681b      	ldr	r3, [r3, #0]
 800a452:	689b      	ldr	r3, [r3, #8]
 800a454:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a458:	2b40      	cmp	r3, #64	@ 0x40
 800a45a:	d109      	bne.n	800a470 <UART_DMAError+0x62>
 800a45c:	68fb      	ldr	r3, [r7, #12]
 800a45e:	2b22      	cmp	r3, #34	@ 0x22
 800a460:	d106      	bne.n	800a470 <UART_DMAError+0x62>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 800a462:	697b      	ldr	r3, [r7, #20]
 800a464:	2200      	movs	r2, #0
 800a466:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
    UART_EndRxTransfer(huart);
 800a46a:	6978      	ldr	r0, [r7, #20]
 800a46c:	f7ff ff0e 	bl	800a28c <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800a470:	697b      	ldr	r3, [r7, #20]
 800a472:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800a476:	f043 0210 	orr.w	r2, r3, #16
 800a47a:	697b      	ldr	r3, [r7, #20]
 800a47c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800a480:	6978      	ldr	r0, [r7, #20]
 800a482:	f7ff fa27 	bl	80098d4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800a486:	bf00      	nop
 800a488:	3718      	adds	r7, #24
 800a48a:	46bd      	mov	sp, r7
 800a48c:	bd80      	pop	{r7, pc}

0800a48e <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800a48e:	b580      	push	{r7, lr}
 800a490:	b084      	sub	sp, #16
 800a492:	af00      	add	r7, sp, #0
 800a494:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800a496:	687b      	ldr	r3, [r7, #4]
 800a498:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a49a:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800a49c:	68fb      	ldr	r3, [r7, #12]
 800a49e:	2200      	movs	r2, #0
 800a4a0:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800a4a4:	68f8      	ldr	r0, [r7, #12]
 800a4a6:	f7ff fa15 	bl	80098d4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800a4aa:	bf00      	nop
 800a4ac:	3710      	adds	r7, #16
 800a4ae:	46bd      	mov	sp, r7
 800a4b0:	bd80      	pop	{r7, pc}

0800a4b2 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800a4b2:	b580      	push	{r7, lr}
 800a4b4:	b088      	sub	sp, #32
 800a4b6:	af00      	add	r7, sp, #0
 800a4b8:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800a4ba:	687b      	ldr	r3, [r7, #4]
 800a4bc:	681b      	ldr	r3, [r3, #0]
 800a4be:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a4c0:	68fb      	ldr	r3, [r7, #12]
 800a4c2:	e853 3f00 	ldrex	r3, [r3]
 800a4c6:	60bb      	str	r3, [r7, #8]
   return(result);
 800a4c8:	68bb      	ldr	r3, [r7, #8]
 800a4ca:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800a4ce:	61fb      	str	r3, [r7, #28]
 800a4d0:	687b      	ldr	r3, [r7, #4]
 800a4d2:	681b      	ldr	r3, [r3, #0]
 800a4d4:	461a      	mov	r2, r3
 800a4d6:	69fb      	ldr	r3, [r7, #28]
 800a4d8:	61bb      	str	r3, [r7, #24]
 800a4da:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a4dc:	6979      	ldr	r1, [r7, #20]
 800a4de:	69ba      	ldr	r2, [r7, #24]
 800a4e0:	e841 2300 	strex	r3, r2, [r1]
 800a4e4:	613b      	str	r3, [r7, #16]
   return(result);
 800a4e6:	693b      	ldr	r3, [r7, #16]
 800a4e8:	2b00      	cmp	r3, #0
 800a4ea:	d1e6      	bne.n	800a4ba <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800a4ec:	687b      	ldr	r3, [r7, #4]
 800a4ee:	2220      	movs	r2, #32
 800a4f0:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800a4f4:	687b      	ldr	r3, [r7, #4]
 800a4f6:	2200      	movs	r2, #0
 800a4f8:	679a      	str	r2, [r3, #120]	@ 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800a4fa:	6878      	ldr	r0, [r7, #4]
 800a4fc:	f7f6 fcf4 	bl	8000ee8 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800a500:	bf00      	nop
 800a502:	3720      	adds	r7, #32
 800a504:	46bd      	mov	sp, r7
 800a506:	bd80      	pop	{r7, pc}

0800a508 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800a508:	b480      	push	{r7}
 800a50a:	b083      	sub	sp, #12
 800a50c:	af00      	add	r7, sp, #0
 800a50e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800a510:	bf00      	nop
 800a512:	370c      	adds	r7, #12
 800a514:	46bd      	mov	sp, r7
 800a516:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a51a:	4770      	bx	lr

0800a51c <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 800a51c:	b480      	push	{r7}
 800a51e:	b083      	sub	sp, #12
 800a520:	af00      	add	r7, sp, #0
 800a522:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 800a524:	bf00      	nop
 800a526:	370c      	adds	r7, #12
 800a528:	46bd      	mov	sp, r7
 800a52a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a52e:	4770      	bx	lr

0800a530 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 800a530:	b480      	push	{r7}
 800a532:	b083      	sub	sp, #12
 800a534:	af00      	add	r7, sp, #0
 800a536:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 800a538:	bf00      	nop
 800a53a:	370c      	adds	r7, #12
 800a53c:	46bd      	mov	sp, r7
 800a53e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a542:	4770      	bx	lr

0800a544 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800a544:	b480      	push	{r7}
 800a546:	b085      	sub	sp, #20
 800a548:	af00      	add	r7, sp, #0
 800a54a:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800a54c:	687b      	ldr	r3, [r7, #4]
 800a54e:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800a552:	2b01      	cmp	r3, #1
 800a554:	d101      	bne.n	800a55a <HAL_UARTEx_DisableFifoMode+0x16>
 800a556:	2302      	movs	r3, #2
 800a558:	e027      	b.n	800a5aa <HAL_UARTEx_DisableFifoMode+0x66>
 800a55a:	687b      	ldr	r3, [r7, #4]
 800a55c:	2201      	movs	r2, #1
 800a55e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800a562:	687b      	ldr	r3, [r7, #4]
 800a564:	2224      	movs	r2, #36	@ 0x24
 800a566:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800a56a:	687b      	ldr	r3, [r7, #4]
 800a56c:	681b      	ldr	r3, [r3, #0]
 800a56e:	681b      	ldr	r3, [r3, #0]
 800a570:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800a572:	687b      	ldr	r3, [r7, #4]
 800a574:	681b      	ldr	r3, [r3, #0]
 800a576:	681a      	ldr	r2, [r3, #0]
 800a578:	687b      	ldr	r3, [r7, #4]
 800a57a:	681b      	ldr	r3, [r3, #0]
 800a57c:	f022 0201 	bic.w	r2, r2, #1
 800a580:	601a      	str	r2, [r3, #0]

  /* Disable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800a582:	68fb      	ldr	r3, [r7, #12]
 800a584:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 800a588:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800a58a:	687b      	ldr	r3, [r7, #4]
 800a58c:	2200      	movs	r2, #0
 800a58e:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800a590:	687b      	ldr	r3, [r7, #4]
 800a592:	681b      	ldr	r3, [r3, #0]
 800a594:	68fa      	ldr	r2, [r7, #12]
 800a596:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800a598:	687b      	ldr	r3, [r7, #4]
 800a59a:	2220      	movs	r2, #32
 800a59c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800a5a0:	687b      	ldr	r3, [r7, #4]
 800a5a2:	2200      	movs	r2, #0
 800a5a4:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800a5a8:	2300      	movs	r3, #0
}
 800a5aa:	4618      	mov	r0, r3
 800a5ac:	3714      	adds	r7, #20
 800a5ae:	46bd      	mov	sp, r7
 800a5b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5b4:	4770      	bx	lr

0800a5b6 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800a5b6:	b580      	push	{r7, lr}
 800a5b8:	b084      	sub	sp, #16
 800a5ba:	af00      	add	r7, sp, #0
 800a5bc:	6078      	str	r0, [r7, #4]
 800a5be:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800a5c0:	687b      	ldr	r3, [r7, #4]
 800a5c2:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800a5c6:	2b01      	cmp	r3, #1
 800a5c8:	d101      	bne.n	800a5ce <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800a5ca:	2302      	movs	r3, #2
 800a5cc:	e02d      	b.n	800a62a <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800a5ce:	687b      	ldr	r3, [r7, #4]
 800a5d0:	2201      	movs	r2, #1
 800a5d2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800a5d6:	687b      	ldr	r3, [r7, #4]
 800a5d8:	2224      	movs	r2, #36	@ 0x24
 800a5da:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800a5de:	687b      	ldr	r3, [r7, #4]
 800a5e0:	681b      	ldr	r3, [r3, #0]
 800a5e2:	681b      	ldr	r3, [r3, #0]
 800a5e4:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800a5e6:	687b      	ldr	r3, [r7, #4]
 800a5e8:	681b      	ldr	r3, [r3, #0]
 800a5ea:	681a      	ldr	r2, [r3, #0]
 800a5ec:	687b      	ldr	r3, [r7, #4]
 800a5ee:	681b      	ldr	r3, [r3, #0]
 800a5f0:	f022 0201 	bic.w	r2, r2, #1
 800a5f4:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800a5f6:	687b      	ldr	r3, [r7, #4]
 800a5f8:	681b      	ldr	r3, [r3, #0]
 800a5fa:	689b      	ldr	r3, [r3, #8]
 800a5fc:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 800a600:	687b      	ldr	r3, [r7, #4]
 800a602:	681b      	ldr	r3, [r3, #0]
 800a604:	683a      	ldr	r2, [r7, #0]
 800a606:	430a      	orrs	r2, r1
 800a608:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800a60a:	6878      	ldr	r0, [r7, #4]
 800a60c:	f000 f850 	bl	800a6b0 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800a610:	687b      	ldr	r3, [r7, #4]
 800a612:	681b      	ldr	r3, [r3, #0]
 800a614:	68fa      	ldr	r2, [r7, #12]
 800a616:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800a618:	687b      	ldr	r3, [r7, #4]
 800a61a:	2220      	movs	r2, #32
 800a61c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800a620:	687b      	ldr	r3, [r7, #4]
 800a622:	2200      	movs	r2, #0
 800a624:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800a628:	2300      	movs	r3, #0
}
 800a62a:	4618      	mov	r0, r3
 800a62c:	3710      	adds	r7, #16
 800a62e:	46bd      	mov	sp, r7
 800a630:	bd80      	pop	{r7, pc}

0800a632 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800a632:	b580      	push	{r7, lr}
 800a634:	b084      	sub	sp, #16
 800a636:	af00      	add	r7, sp, #0
 800a638:	6078      	str	r0, [r7, #4]
 800a63a:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800a63c:	687b      	ldr	r3, [r7, #4]
 800a63e:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800a642:	2b01      	cmp	r3, #1
 800a644:	d101      	bne.n	800a64a <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800a646:	2302      	movs	r3, #2
 800a648:	e02d      	b.n	800a6a6 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800a64a:	687b      	ldr	r3, [r7, #4]
 800a64c:	2201      	movs	r2, #1
 800a64e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800a652:	687b      	ldr	r3, [r7, #4]
 800a654:	2224      	movs	r2, #36	@ 0x24
 800a656:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800a65a:	687b      	ldr	r3, [r7, #4]
 800a65c:	681b      	ldr	r3, [r3, #0]
 800a65e:	681b      	ldr	r3, [r3, #0]
 800a660:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800a662:	687b      	ldr	r3, [r7, #4]
 800a664:	681b      	ldr	r3, [r3, #0]
 800a666:	681a      	ldr	r2, [r3, #0]
 800a668:	687b      	ldr	r3, [r7, #4]
 800a66a:	681b      	ldr	r3, [r3, #0]
 800a66c:	f022 0201 	bic.w	r2, r2, #1
 800a670:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800a672:	687b      	ldr	r3, [r7, #4]
 800a674:	681b      	ldr	r3, [r3, #0]
 800a676:	689b      	ldr	r3, [r3, #8]
 800a678:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 800a67c:	687b      	ldr	r3, [r7, #4]
 800a67e:	681b      	ldr	r3, [r3, #0]
 800a680:	683a      	ldr	r2, [r7, #0]
 800a682:	430a      	orrs	r2, r1
 800a684:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800a686:	6878      	ldr	r0, [r7, #4]
 800a688:	f000 f812 	bl	800a6b0 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800a68c:	687b      	ldr	r3, [r7, #4]
 800a68e:	681b      	ldr	r3, [r3, #0]
 800a690:	68fa      	ldr	r2, [r7, #12]
 800a692:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800a694:	687b      	ldr	r3, [r7, #4]
 800a696:	2220      	movs	r2, #32
 800a698:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800a69c:	687b      	ldr	r3, [r7, #4]
 800a69e:	2200      	movs	r2, #0
 800a6a0:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800a6a4:	2300      	movs	r3, #0
}
 800a6a6:	4618      	mov	r0, r3
 800a6a8:	3710      	adds	r7, #16
 800a6aa:	46bd      	mov	sp, r7
 800a6ac:	bd80      	pop	{r7, pc}
	...

0800a6b0 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800a6b0:	b480      	push	{r7}
 800a6b2:	b085      	sub	sp, #20
 800a6b4:	af00      	add	r7, sp, #0
 800a6b6:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800a6b8:	687b      	ldr	r3, [r7, #4]
 800a6ba:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800a6bc:	2b00      	cmp	r3, #0
 800a6be:	d108      	bne.n	800a6d2 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800a6c0:	687b      	ldr	r3, [r7, #4]
 800a6c2:	2201      	movs	r2, #1
 800a6c4:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 800a6c8:	687b      	ldr	r3, [r7, #4]
 800a6ca:	2201      	movs	r2, #1
 800a6cc:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800a6d0:	e031      	b.n	800a736 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800a6d2:	2308      	movs	r3, #8
 800a6d4:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800a6d6:	2308      	movs	r3, #8
 800a6d8:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800a6da:	687b      	ldr	r3, [r7, #4]
 800a6dc:	681b      	ldr	r3, [r3, #0]
 800a6de:	689b      	ldr	r3, [r3, #8]
 800a6e0:	0e5b      	lsrs	r3, r3, #25
 800a6e2:	b2db      	uxtb	r3, r3
 800a6e4:	f003 0307 	and.w	r3, r3, #7
 800a6e8:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800a6ea:	687b      	ldr	r3, [r7, #4]
 800a6ec:	681b      	ldr	r3, [r3, #0]
 800a6ee:	689b      	ldr	r3, [r3, #8]
 800a6f0:	0f5b      	lsrs	r3, r3, #29
 800a6f2:	b2db      	uxtb	r3, r3
 800a6f4:	f003 0307 	and.w	r3, r3, #7
 800a6f8:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800a6fa:	7bbb      	ldrb	r3, [r7, #14]
 800a6fc:	7b3a      	ldrb	r2, [r7, #12]
 800a6fe:	4911      	ldr	r1, [pc, #68]	@ (800a744 <UARTEx_SetNbDataToProcess+0x94>)
 800a700:	5c8a      	ldrb	r2, [r1, r2]
 800a702:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800a706:	7b3a      	ldrb	r2, [r7, #12]
 800a708:	490f      	ldr	r1, [pc, #60]	@ (800a748 <UARTEx_SetNbDataToProcess+0x98>)
 800a70a:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800a70c:	fb93 f3f2 	sdiv	r3, r3, r2
 800a710:	b29a      	uxth	r2, r3
 800a712:	687b      	ldr	r3, [r7, #4]
 800a714:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800a718:	7bfb      	ldrb	r3, [r7, #15]
 800a71a:	7b7a      	ldrb	r2, [r7, #13]
 800a71c:	4909      	ldr	r1, [pc, #36]	@ (800a744 <UARTEx_SetNbDataToProcess+0x94>)
 800a71e:	5c8a      	ldrb	r2, [r1, r2]
 800a720:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800a724:	7b7a      	ldrb	r2, [r7, #13]
 800a726:	4908      	ldr	r1, [pc, #32]	@ (800a748 <UARTEx_SetNbDataToProcess+0x98>)
 800a728:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800a72a:	fb93 f3f2 	sdiv	r3, r3, r2
 800a72e:	b29a      	uxth	r2, r3
 800a730:	687b      	ldr	r3, [r7, #4]
 800a732:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 800a736:	bf00      	nop
 800a738:	3714      	adds	r7, #20
 800a73a:	46bd      	mov	sp, r7
 800a73c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a740:	4770      	bx	lr
 800a742:	bf00      	nop
 800a744:	0800d0a8 	.word	0x0800d0a8
 800a748:	0800d0b0 	.word	0x0800d0b0

0800a74c <__cvt>:
 800a74c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800a750:	ec57 6b10 	vmov	r6, r7, d0
 800a754:	2f00      	cmp	r7, #0
 800a756:	460c      	mov	r4, r1
 800a758:	4619      	mov	r1, r3
 800a75a:	463b      	mov	r3, r7
 800a75c:	bfbb      	ittet	lt
 800a75e:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 800a762:	461f      	movlt	r7, r3
 800a764:	2300      	movge	r3, #0
 800a766:	232d      	movlt	r3, #45	@ 0x2d
 800a768:	700b      	strb	r3, [r1, #0]
 800a76a:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800a76c:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 800a770:	4691      	mov	r9, r2
 800a772:	f023 0820 	bic.w	r8, r3, #32
 800a776:	bfbc      	itt	lt
 800a778:	4632      	movlt	r2, r6
 800a77a:	4616      	movlt	r6, r2
 800a77c:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800a780:	d005      	beq.n	800a78e <__cvt+0x42>
 800a782:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 800a786:	d100      	bne.n	800a78a <__cvt+0x3e>
 800a788:	3401      	adds	r4, #1
 800a78a:	2102      	movs	r1, #2
 800a78c:	e000      	b.n	800a790 <__cvt+0x44>
 800a78e:	2103      	movs	r1, #3
 800a790:	ab03      	add	r3, sp, #12
 800a792:	9301      	str	r3, [sp, #4]
 800a794:	ab02      	add	r3, sp, #8
 800a796:	9300      	str	r3, [sp, #0]
 800a798:	ec47 6b10 	vmov	d0, r6, r7
 800a79c:	4653      	mov	r3, sl
 800a79e:	4622      	mov	r2, r4
 800a7a0:	f000 fe3a 	bl	800b418 <_dtoa_r>
 800a7a4:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 800a7a8:	4605      	mov	r5, r0
 800a7aa:	d119      	bne.n	800a7e0 <__cvt+0x94>
 800a7ac:	f019 0f01 	tst.w	r9, #1
 800a7b0:	d00e      	beq.n	800a7d0 <__cvt+0x84>
 800a7b2:	eb00 0904 	add.w	r9, r0, r4
 800a7b6:	2200      	movs	r2, #0
 800a7b8:	2300      	movs	r3, #0
 800a7ba:	4630      	mov	r0, r6
 800a7bc:	4639      	mov	r1, r7
 800a7be:	f7f6 f9ab 	bl	8000b18 <__aeabi_dcmpeq>
 800a7c2:	b108      	cbz	r0, 800a7c8 <__cvt+0x7c>
 800a7c4:	f8cd 900c 	str.w	r9, [sp, #12]
 800a7c8:	2230      	movs	r2, #48	@ 0x30
 800a7ca:	9b03      	ldr	r3, [sp, #12]
 800a7cc:	454b      	cmp	r3, r9
 800a7ce:	d31e      	bcc.n	800a80e <__cvt+0xc2>
 800a7d0:	9b03      	ldr	r3, [sp, #12]
 800a7d2:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800a7d4:	1b5b      	subs	r3, r3, r5
 800a7d6:	4628      	mov	r0, r5
 800a7d8:	6013      	str	r3, [r2, #0]
 800a7da:	b004      	add	sp, #16
 800a7dc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a7e0:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800a7e4:	eb00 0904 	add.w	r9, r0, r4
 800a7e8:	d1e5      	bne.n	800a7b6 <__cvt+0x6a>
 800a7ea:	7803      	ldrb	r3, [r0, #0]
 800a7ec:	2b30      	cmp	r3, #48	@ 0x30
 800a7ee:	d10a      	bne.n	800a806 <__cvt+0xba>
 800a7f0:	2200      	movs	r2, #0
 800a7f2:	2300      	movs	r3, #0
 800a7f4:	4630      	mov	r0, r6
 800a7f6:	4639      	mov	r1, r7
 800a7f8:	f7f6 f98e 	bl	8000b18 <__aeabi_dcmpeq>
 800a7fc:	b918      	cbnz	r0, 800a806 <__cvt+0xba>
 800a7fe:	f1c4 0401 	rsb	r4, r4, #1
 800a802:	f8ca 4000 	str.w	r4, [sl]
 800a806:	f8da 3000 	ldr.w	r3, [sl]
 800a80a:	4499      	add	r9, r3
 800a80c:	e7d3      	b.n	800a7b6 <__cvt+0x6a>
 800a80e:	1c59      	adds	r1, r3, #1
 800a810:	9103      	str	r1, [sp, #12]
 800a812:	701a      	strb	r2, [r3, #0]
 800a814:	e7d9      	b.n	800a7ca <__cvt+0x7e>

0800a816 <__exponent>:
 800a816:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800a818:	2900      	cmp	r1, #0
 800a81a:	bfba      	itte	lt
 800a81c:	4249      	neglt	r1, r1
 800a81e:	232d      	movlt	r3, #45	@ 0x2d
 800a820:	232b      	movge	r3, #43	@ 0x2b
 800a822:	2909      	cmp	r1, #9
 800a824:	7002      	strb	r2, [r0, #0]
 800a826:	7043      	strb	r3, [r0, #1]
 800a828:	dd29      	ble.n	800a87e <__exponent+0x68>
 800a82a:	f10d 0307 	add.w	r3, sp, #7
 800a82e:	461d      	mov	r5, r3
 800a830:	270a      	movs	r7, #10
 800a832:	461a      	mov	r2, r3
 800a834:	fbb1 f6f7 	udiv	r6, r1, r7
 800a838:	fb07 1416 	mls	r4, r7, r6, r1
 800a83c:	3430      	adds	r4, #48	@ 0x30
 800a83e:	f802 4c01 	strb.w	r4, [r2, #-1]
 800a842:	460c      	mov	r4, r1
 800a844:	2c63      	cmp	r4, #99	@ 0x63
 800a846:	f103 33ff 	add.w	r3, r3, #4294967295	@ 0xffffffff
 800a84a:	4631      	mov	r1, r6
 800a84c:	dcf1      	bgt.n	800a832 <__exponent+0x1c>
 800a84e:	3130      	adds	r1, #48	@ 0x30
 800a850:	1e94      	subs	r4, r2, #2
 800a852:	f803 1c01 	strb.w	r1, [r3, #-1]
 800a856:	1c41      	adds	r1, r0, #1
 800a858:	4623      	mov	r3, r4
 800a85a:	42ab      	cmp	r3, r5
 800a85c:	d30a      	bcc.n	800a874 <__exponent+0x5e>
 800a85e:	f10d 0309 	add.w	r3, sp, #9
 800a862:	1a9b      	subs	r3, r3, r2
 800a864:	42ac      	cmp	r4, r5
 800a866:	bf88      	it	hi
 800a868:	2300      	movhi	r3, #0
 800a86a:	3302      	adds	r3, #2
 800a86c:	4403      	add	r3, r0
 800a86e:	1a18      	subs	r0, r3, r0
 800a870:	b003      	add	sp, #12
 800a872:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a874:	f813 6b01 	ldrb.w	r6, [r3], #1
 800a878:	f801 6f01 	strb.w	r6, [r1, #1]!
 800a87c:	e7ed      	b.n	800a85a <__exponent+0x44>
 800a87e:	2330      	movs	r3, #48	@ 0x30
 800a880:	3130      	adds	r1, #48	@ 0x30
 800a882:	7083      	strb	r3, [r0, #2]
 800a884:	70c1      	strb	r1, [r0, #3]
 800a886:	1d03      	adds	r3, r0, #4
 800a888:	e7f1      	b.n	800a86e <__exponent+0x58>
	...

0800a88c <_printf_float>:
 800a88c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a890:	b08d      	sub	sp, #52	@ 0x34
 800a892:	460c      	mov	r4, r1
 800a894:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 800a898:	4616      	mov	r6, r2
 800a89a:	461f      	mov	r7, r3
 800a89c:	4605      	mov	r5, r0
 800a89e:	f000 fcbb 	bl	800b218 <_localeconv_r>
 800a8a2:	6803      	ldr	r3, [r0, #0]
 800a8a4:	9304      	str	r3, [sp, #16]
 800a8a6:	4618      	mov	r0, r3
 800a8a8:	f7f5 fd0a 	bl	80002c0 <strlen>
 800a8ac:	2300      	movs	r3, #0
 800a8ae:	930a      	str	r3, [sp, #40]	@ 0x28
 800a8b0:	f8d8 3000 	ldr.w	r3, [r8]
 800a8b4:	9005      	str	r0, [sp, #20]
 800a8b6:	3307      	adds	r3, #7
 800a8b8:	f023 0307 	bic.w	r3, r3, #7
 800a8bc:	f103 0208 	add.w	r2, r3, #8
 800a8c0:	f894 a018 	ldrb.w	sl, [r4, #24]
 800a8c4:	f8d4 b000 	ldr.w	fp, [r4]
 800a8c8:	f8c8 2000 	str.w	r2, [r8]
 800a8cc:	e9d3 8900 	ldrd	r8, r9, [r3]
 800a8d0:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 800a8d4:	9307      	str	r3, [sp, #28]
 800a8d6:	f8cd 8018 	str.w	r8, [sp, #24]
 800a8da:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 800a8de:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800a8e2:	4b9c      	ldr	r3, [pc, #624]	@ (800ab54 <_printf_float+0x2c8>)
 800a8e4:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800a8e8:	f7f6 f948 	bl	8000b7c <__aeabi_dcmpun>
 800a8ec:	bb70      	cbnz	r0, 800a94c <_printf_float+0xc0>
 800a8ee:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800a8f2:	4b98      	ldr	r3, [pc, #608]	@ (800ab54 <_printf_float+0x2c8>)
 800a8f4:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800a8f8:	f7f6 f922 	bl	8000b40 <__aeabi_dcmple>
 800a8fc:	bb30      	cbnz	r0, 800a94c <_printf_float+0xc0>
 800a8fe:	2200      	movs	r2, #0
 800a900:	2300      	movs	r3, #0
 800a902:	4640      	mov	r0, r8
 800a904:	4649      	mov	r1, r9
 800a906:	f7f6 f911 	bl	8000b2c <__aeabi_dcmplt>
 800a90a:	b110      	cbz	r0, 800a912 <_printf_float+0x86>
 800a90c:	232d      	movs	r3, #45	@ 0x2d
 800a90e:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800a912:	4a91      	ldr	r2, [pc, #580]	@ (800ab58 <_printf_float+0x2cc>)
 800a914:	4b91      	ldr	r3, [pc, #580]	@ (800ab5c <_printf_float+0x2d0>)
 800a916:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 800a91a:	bf94      	ite	ls
 800a91c:	4690      	movls	r8, r2
 800a91e:	4698      	movhi	r8, r3
 800a920:	2303      	movs	r3, #3
 800a922:	6123      	str	r3, [r4, #16]
 800a924:	f02b 0304 	bic.w	r3, fp, #4
 800a928:	6023      	str	r3, [r4, #0]
 800a92a:	f04f 0900 	mov.w	r9, #0
 800a92e:	9700      	str	r7, [sp, #0]
 800a930:	4633      	mov	r3, r6
 800a932:	aa0b      	add	r2, sp, #44	@ 0x2c
 800a934:	4621      	mov	r1, r4
 800a936:	4628      	mov	r0, r5
 800a938:	f000 f9d2 	bl	800ace0 <_printf_common>
 800a93c:	3001      	adds	r0, #1
 800a93e:	f040 808d 	bne.w	800aa5c <_printf_float+0x1d0>
 800a942:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800a946:	b00d      	add	sp, #52	@ 0x34
 800a948:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a94c:	4642      	mov	r2, r8
 800a94e:	464b      	mov	r3, r9
 800a950:	4640      	mov	r0, r8
 800a952:	4649      	mov	r1, r9
 800a954:	f7f6 f912 	bl	8000b7c <__aeabi_dcmpun>
 800a958:	b140      	cbz	r0, 800a96c <_printf_float+0xe0>
 800a95a:	464b      	mov	r3, r9
 800a95c:	2b00      	cmp	r3, #0
 800a95e:	bfbc      	itt	lt
 800a960:	232d      	movlt	r3, #45	@ 0x2d
 800a962:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 800a966:	4a7e      	ldr	r2, [pc, #504]	@ (800ab60 <_printf_float+0x2d4>)
 800a968:	4b7e      	ldr	r3, [pc, #504]	@ (800ab64 <_printf_float+0x2d8>)
 800a96a:	e7d4      	b.n	800a916 <_printf_float+0x8a>
 800a96c:	6863      	ldr	r3, [r4, #4]
 800a96e:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 800a972:	9206      	str	r2, [sp, #24]
 800a974:	1c5a      	adds	r2, r3, #1
 800a976:	d13b      	bne.n	800a9f0 <_printf_float+0x164>
 800a978:	2306      	movs	r3, #6
 800a97a:	6063      	str	r3, [r4, #4]
 800a97c:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 800a980:	2300      	movs	r3, #0
 800a982:	6022      	str	r2, [r4, #0]
 800a984:	9303      	str	r3, [sp, #12]
 800a986:	ab0a      	add	r3, sp, #40	@ 0x28
 800a988:	e9cd a301 	strd	sl, r3, [sp, #4]
 800a98c:	ab09      	add	r3, sp, #36	@ 0x24
 800a98e:	9300      	str	r3, [sp, #0]
 800a990:	6861      	ldr	r1, [r4, #4]
 800a992:	ec49 8b10 	vmov	d0, r8, r9
 800a996:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 800a99a:	4628      	mov	r0, r5
 800a99c:	f7ff fed6 	bl	800a74c <__cvt>
 800a9a0:	9b06      	ldr	r3, [sp, #24]
 800a9a2:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800a9a4:	2b47      	cmp	r3, #71	@ 0x47
 800a9a6:	4680      	mov	r8, r0
 800a9a8:	d129      	bne.n	800a9fe <_printf_float+0x172>
 800a9aa:	1cc8      	adds	r0, r1, #3
 800a9ac:	db02      	blt.n	800a9b4 <_printf_float+0x128>
 800a9ae:	6863      	ldr	r3, [r4, #4]
 800a9b0:	4299      	cmp	r1, r3
 800a9b2:	dd41      	ble.n	800aa38 <_printf_float+0x1ac>
 800a9b4:	f1aa 0a02 	sub.w	sl, sl, #2
 800a9b8:	fa5f fa8a 	uxtb.w	sl, sl
 800a9bc:	3901      	subs	r1, #1
 800a9be:	4652      	mov	r2, sl
 800a9c0:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 800a9c4:	9109      	str	r1, [sp, #36]	@ 0x24
 800a9c6:	f7ff ff26 	bl	800a816 <__exponent>
 800a9ca:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800a9cc:	1813      	adds	r3, r2, r0
 800a9ce:	2a01      	cmp	r2, #1
 800a9d0:	4681      	mov	r9, r0
 800a9d2:	6123      	str	r3, [r4, #16]
 800a9d4:	dc02      	bgt.n	800a9dc <_printf_float+0x150>
 800a9d6:	6822      	ldr	r2, [r4, #0]
 800a9d8:	07d2      	lsls	r2, r2, #31
 800a9da:	d501      	bpl.n	800a9e0 <_printf_float+0x154>
 800a9dc:	3301      	adds	r3, #1
 800a9de:	6123      	str	r3, [r4, #16]
 800a9e0:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 800a9e4:	2b00      	cmp	r3, #0
 800a9e6:	d0a2      	beq.n	800a92e <_printf_float+0xa2>
 800a9e8:	232d      	movs	r3, #45	@ 0x2d
 800a9ea:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800a9ee:	e79e      	b.n	800a92e <_printf_float+0xa2>
 800a9f0:	9a06      	ldr	r2, [sp, #24]
 800a9f2:	2a47      	cmp	r2, #71	@ 0x47
 800a9f4:	d1c2      	bne.n	800a97c <_printf_float+0xf0>
 800a9f6:	2b00      	cmp	r3, #0
 800a9f8:	d1c0      	bne.n	800a97c <_printf_float+0xf0>
 800a9fa:	2301      	movs	r3, #1
 800a9fc:	e7bd      	b.n	800a97a <_printf_float+0xee>
 800a9fe:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800aa02:	d9db      	bls.n	800a9bc <_printf_float+0x130>
 800aa04:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 800aa08:	d118      	bne.n	800aa3c <_printf_float+0x1b0>
 800aa0a:	2900      	cmp	r1, #0
 800aa0c:	6863      	ldr	r3, [r4, #4]
 800aa0e:	dd0b      	ble.n	800aa28 <_printf_float+0x19c>
 800aa10:	6121      	str	r1, [r4, #16]
 800aa12:	b913      	cbnz	r3, 800aa1a <_printf_float+0x18e>
 800aa14:	6822      	ldr	r2, [r4, #0]
 800aa16:	07d0      	lsls	r0, r2, #31
 800aa18:	d502      	bpl.n	800aa20 <_printf_float+0x194>
 800aa1a:	3301      	adds	r3, #1
 800aa1c:	440b      	add	r3, r1
 800aa1e:	6123      	str	r3, [r4, #16]
 800aa20:	65a1      	str	r1, [r4, #88]	@ 0x58
 800aa22:	f04f 0900 	mov.w	r9, #0
 800aa26:	e7db      	b.n	800a9e0 <_printf_float+0x154>
 800aa28:	b913      	cbnz	r3, 800aa30 <_printf_float+0x1a4>
 800aa2a:	6822      	ldr	r2, [r4, #0]
 800aa2c:	07d2      	lsls	r2, r2, #31
 800aa2e:	d501      	bpl.n	800aa34 <_printf_float+0x1a8>
 800aa30:	3302      	adds	r3, #2
 800aa32:	e7f4      	b.n	800aa1e <_printf_float+0x192>
 800aa34:	2301      	movs	r3, #1
 800aa36:	e7f2      	b.n	800aa1e <_printf_float+0x192>
 800aa38:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 800aa3c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800aa3e:	4299      	cmp	r1, r3
 800aa40:	db05      	blt.n	800aa4e <_printf_float+0x1c2>
 800aa42:	6823      	ldr	r3, [r4, #0]
 800aa44:	6121      	str	r1, [r4, #16]
 800aa46:	07d8      	lsls	r0, r3, #31
 800aa48:	d5ea      	bpl.n	800aa20 <_printf_float+0x194>
 800aa4a:	1c4b      	adds	r3, r1, #1
 800aa4c:	e7e7      	b.n	800aa1e <_printf_float+0x192>
 800aa4e:	2900      	cmp	r1, #0
 800aa50:	bfd4      	ite	le
 800aa52:	f1c1 0202 	rsble	r2, r1, #2
 800aa56:	2201      	movgt	r2, #1
 800aa58:	4413      	add	r3, r2
 800aa5a:	e7e0      	b.n	800aa1e <_printf_float+0x192>
 800aa5c:	6823      	ldr	r3, [r4, #0]
 800aa5e:	055a      	lsls	r2, r3, #21
 800aa60:	d407      	bmi.n	800aa72 <_printf_float+0x1e6>
 800aa62:	6923      	ldr	r3, [r4, #16]
 800aa64:	4642      	mov	r2, r8
 800aa66:	4631      	mov	r1, r6
 800aa68:	4628      	mov	r0, r5
 800aa6a:	47b8      	blx	r7
 800aa6c:	3001      	adds	r0, #1
 800aa6e:	d12b      	bne.n	800aac8 <_printf_float+0x23c>
 800aa70:	e767      	b.n	800a942 <_printf_float+0xb6>
 800aa72:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800aa76:	f240 80dd 	bls.w	800ac34 <_printf_float+0x3a8>
 800aa7a:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800aa7e:	2200      	movs	r2, #0
 800aa80:	2300      	movs	r3, #0
 800aa82:	f7f6 f849 	bl	8000b18 <__aeabi_dcmpeq>
 800aa86:	2800      	cmp	r0, #0
 800aa88:	d033      	beq.n	800aaf2 <_printf_float+0x266>
 800aa8a:	4a37      	ldr	r2, [pc, #220]	@ (800ab68 <_printf_float+0x2dc>)
 800aa8c:	2301      	movs	r3, #1
 800aa8e:	4631      	mov	r1, r6
 800aa90:	4628      	mov	r0, r5
 800aa92:	47b8      	blx	r7
 800aa94:	3001      	adds	r0, #1
 800aa96:	f43f af54 	beq.w	800a942 <_printf_float+0xb6>
 800aa9a:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 800aa9e:	4543      	cmp	r3, r8
 800aaa0:	db02      	blt.n	800aaa8 <_printf_float+0x21c>
 800aaa2:	6823      	ldr	r3, [r4, #0]
 800aaa4:	07d8      	lsls	r0, r3, #31
 800aaa6:	d50f      	bpl.n	800aac8 <_printf_float+0x23c>
 800aaa8:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800aaac:	4631      	mov	r1, r6
 800aaae:	4628      	mov	r0, r5
 800aab0:	47b8      	blx	r7
 800aab2:	3001      	adds	r0, #1
 800aab4:	f43f af45 	beq.w	800a942 <_printf_float+0xb6>
 800aab8:	f04f 0900 	mov.w	r9, #0
 800aabc:	f108 38ff 	add.w	r8, r8, #4294967295	@ 0xffffffff
 800aac0:	f104 0a1a 	add.w	sl, r4, #26
 800aac4:	45c8      	cmp	r8, r9
 800aac6:	dc09      	bgt.n	800aadc <_printf_float+0x250>
 800aac8:	6823      	ldr	r3, [r4, #0]
 800aaca:	079b      	lsls	r3, r3, #30
 800aacc:	f100 8103 	bmi.w	800acd6 <_printf_float+0x44a>
 800aad0:	68e0      	ldr	r0, [r4, #12]
 800aad2:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800aad4:	4298      	cmp	r0, r3
 800aad6:	bfb8      	it	lt
 800aad8:	4618      	movlt	r0, r3
 800aada:	e734      	b.n	800a946 <_printf_float+0xba>
 800aadc:	2301      	movs	r3, #1
 800aade:	4652      	mov	r2, sl
 800aae0:	4631      	mov	r1, r6
 800aae2:	4628      	mov	r0, r5
 800aae4:	47b8      	blx	r7
 800aae6:	3001      	adds	r0, #1
 800aae8:	f43f af2b 	beq.w	800a942 <_printf_float+0xb6>
 800aaec:	f109 0901 	add.w	r9, r9, #1
 800aaf0:	e7e8      	b.n	800aac4 <_printf_float+0x238>
 800aaf2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800aaf4:	2b00      	cmp	r3, #0
 800aaf6:	dc39      	bgt.n	800ab6c <_printf_float+0x2e0>
 800aaf8:	4a1b      	ldr	r2, [pc, #108]	@ (800ab68 <_printf_float+0x2dc>)
 800aafa:	2301      	movs	r3, #1
 800aafc:	4631      	mov	r1, r6
 800aafe:	4628      	mov	r0, r5
 800ab00:	47b8      	blx	r7
 800ab02:	3001      	adds	r0, #1
 800ab04:	f43f af1d 	beq.w	800a942 <_printf_float+0xb6>
 800ab08:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 800ab0c:	ea59 0303 	orrs.w	r3, r9, r3
 800ab10:	d102      	bne.n	800ab18 <_printf_float+0x28c>
 800ab12:	6823      	ldr	r3, [r4, #0]
 800ab14:	07d9      	lsls	r1, r3, #31
 800ab16:	d5d7      	bpl.n	800aac8 <_printf_float+0x23c>
 800ab18:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800ab1c:	4631      	mov	r1, r6
 800ab1e:	4628      	mov	r0, r5
 800ab20:	47b8      	blx	r7
 800ab22:	3001      	adds	r0, #1
 800ab24:	f43f af0d 	beq.w	800a942 <_printf_float+0xb6>
 800ab28:	f04f 0a00 	mov.w	sl, #0
 800ab2c:	f104 0b1a 	add.w	fp, r4, #26
 800ab30:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ab32:	425b      	negs	r3, r3
 800ab34:	4553      	cmp	r3, sl
 800ab36:	dc01      	bgt.n	800ab3c <_printf_float+0x2b0>
 800ab38:	464b      	mov	r3, r9
 800ab3a:	e793      	b.n	800aa64 <_printf_float+0x1d8>
 800ab3c:	2301      	movs	r3, #1
 800ab3e:	465a      	mov	r2, fp
 800ab40:	4631      	mov	r1, r6
 800ab42:	4628      	mov	r0, r5
 800ab44:	47b8      	blx	r7
 800ab46:	3001      	adds	r0, #1
 800ab48:	f43f aefb 	beq.w	800a942 <_printf_float+0xb6>
 800ab4c:	f10a 0a01 	add.w	sl, sl, #1
 800ab50:	e7ee      	b.n	800ab30 <_printf_float+0x2a4>
 800ab52:	bf00      	nop
 800ab54:	7fefffff 	.word	0x7fefffff
 800ab58:	0800d0b8 	.word	0x0800d0b8
 800ab5c:	0800d0bc 	.word	0x0800d0bc
 800ab60:	0800d0c0 	.word	0x0800d0c0
 800ab64:	0800d0c4 	.word	0x0800d0c4
 800ab68:	0800d0c8 	.word	0x0800d0c8
 800ab6c:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800ab6e:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800ab72:	4553      	cmp	r3, sl
 800ab74:	bfa8      	it	ge
 800ab76:	4653      	movge	r3, sl
 800ab78:	2b00      	cmp	r3, #0
 800ab7a:	4699      	mov	r9, r3
 800ab7c:	dc36      	bgt.n	800abec <_printf_float+0x360>
 800ab7e:	f04f 0b00 	mov.w	fp, #0
 800ab82:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800ab86:	f104 021a 	add.w	r2, r4, #26
 800ab8a:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800ab8c:	9306      	str	r3, [sp, #24]
 800ab8e:	eba3 0309 	sub.w	r3, r3, r9
 800ab92:	455b      	cmp	r3, fp
 800ab94:	dc31      	bgt.n	800abfa <_printf_float+0x36e>
 800ab96:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ab98:	459a      	cmp	sl, r3
 800ab9a:	dc3a      	bgt.n	800ac12 <_printf_float+0x386>
 800ab9c:	6823      	ldr	r3, [r4, #0]
 800ab9e:	07da      	lsls	r2, r3, #31
 800aba0:	d437      	bmi.n	800ac12 <_printf_float+0x386>
 800aba2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800aba4:	ebaa 0903 	sub.w	r9, sl, r3
 800aba8:	9b06      	ldr	r3, [sp, #24]
 800abaa:	ebaa 0303 	sub.w	r3, sl, r3
 800abae:	4599      	cmp	r9, r3
 800abb0:	bfa8      	it	ge
 800abb2:	4699      	movge	r9, r3
 800abb4:	f1b9 0f00 	cmp.w	r9, #0
 800abb8:	dc33      	bgt.n	800ac22 <_printf_float+0x396>
 800abba:	f04f 0800 	mov.w	r8, #0
 800abbe:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800abc2:	f104 0b1a 	add.w	fp, r4, #26
 800abc6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800abc8:	ebaa 0303 	sub.w	r3, sl, r3
 800abcc:	eba3 0309 	sub.w	r3, r3, r9
 800abd0:	4543      	cmp	r3, r8
 800abd2:	f77f af79 	ble.w	800aac8 <_printf_float+0x23c>
 800abd6:	2301      	movs	r3, #1
 800abd8:	465a      	mov	r2, fp
 800abda:	4631      	mov	r1, r6
 800abdc:	4628      	mov	r0, r5
 800abde:	47b8      	blx	r7
 800abe0:	3001      	adds	r0, #1
 800abe2:	f43f aeae 	beq.w	800a942 <_printf_float+0xb6>
 800abe6:	f108 0801 	add.w	r8, r8, #1
 800abea:	e7ec      	b.n	800abc6 <_printf_float+0x33a>
 800abec:	4642      	mov	r2, r8
 800abee:	4631      	mov	r1, r6
 800abf0:	4628      	mov	r0, r5
 800abf2:	47b8      	blx	r7
 800abf4:	3001      	adds	r0, #1
 800abf6:	d1c2      	bne.n	800ab7e <_printf_float+0x2f2>
 800abf8:	e6a3      	b.n	800a942 <_printf_float+0xb6>
 800abfa:	2301      	movs	r3, #1
 800abfc:	4631      	mov	r1, r6
 800abfe:	4628      	mov	r0, r5
 800ac00:	9206      	str	r2, [sp, #24]
 800ac02:	47b8      	blx	r7
 800ac04:	3001      	adds	r0, #1
 800ac06:	f43f ae9c 	beq.w	800a942 <_printf_float+0xb6>
 800ac0a:	9a06      	ldr	r2, [sp, #24]
 800ac0c:	f10b 0b01 	add.w	fp, fp, #1
 800ac10:	e7bb      	b.n	800ab8a <_printf_float+0x2fe>
 800ac12:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800ac16:	4631      	mov	r1, r6
 800ac18:	4628      	mov	r0, r5
 800ac1a:	47b8      	blx	r7
 800ac1c:	3001      	adds	r0, #1
 800ac1e:	d1c0      	bne.n	800aba2 <_printf_float+0x316>
 800ac20:	e68f      	b.n	800a942 <_printf_float+0xb6>
 800ac22:	9a06      	ldr	r2, [sp, #24]
 800ac24:	464b      	mov	r3, r9
 800ac26:	4442      	add	r2, r8
 800ac28:	4631      	mov	r1, r6
 800ac2a:	4628      	mov	r0, r5
 800ac2c:	47b8      	blx	r7
 800ac2e:	3001      	adds	r0, #1
 800ac30:	d1c3      	bne.n	800abba <_printf_float+0x32e>
 800ac32:	e686      	b.n	800a942 <_printf_float+0xb6>
 800ac34:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800ac38:	f1ba 0f01 	cmp.w	sl, #1
 800ac3c:	dc01      	bgt.n	800ac42 <_printf_float+0x3b6>
 800ac3e:	07db      	lsls	r3, r3, #31
 800ac40:	d536      	bpl.n	800acb0 <_printf_float+0x424>
 800ac42:	2301      	movs	r3, #1
 800ac44:	4642      	mov	r2, r8
 800ac46:	4631      	mov	r1, r6
 800ac48:	4628      	mov	r0, r5
 800ac4a:	47b8      	blx	r7
 800ac4c:	3001      	adds	r0, #1
 800ac4e:	f43f ae78 	beq.w	800a942 <_printf_float+0xb6>
 800ac52:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800ac56:	4631      	mov	r1, r6
 800ac58:	4628      	mov	r0, r5
 800ac5a:	47b8      	blx	r7
 800ac5c:	3001      	adds	r0, #1
 800ac5e:	f43f ae70 	beq.w	800a942 <_printf_float+0xb6>
 800ac62:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800ac66:	2200      	movs	r2, #0
 800ac68:	2300      	movs	r3, #0
 800ac6a:	f10a 3aff 	add.w	sl, sl, #4294967295	@ 0xffffffff
 800ac6e:	f7f5 ff53 	bl	8000b18 <__aeabi_dcmpeq>
 800ac72:	b9c0      	cbnz	r0, 800aca6 <_printf_float+0x41a>
 800ac74:	4653      	mov	r3, sl
 800ac76:	f108 0201 	add.w	r2, r8, #1
 800ac7a:	4631      	mov	r1, r6
 800ac7c:	4628      	mov	r0, r5
 800ac7e:	47b8      	blx	r7
 800ac80:	3001      	adds	r0, #1
 800ac82:	d10c      	bne.n	800ac9e <_printf_float+0x412>
 800ac84:	e65d      	b.n	800a942 <_printf_float+0xb6>
 800ac86:	2301      	movs	r3, #1
 800ac88:	465a      	mov	r2, fp
 800ac8a:	4631      	mov	r1, r6
 800ac8c:	4628      	mov	r0, r5
 800ac8e:	47b8      	blx	r7
 800ac90:	3001      	adds	r0, #1
 800ac92:	f43f ae56 	beq.w	800a942 <_printf_float+0xb6>
 800ac96:	f108 0801 	add.w	r8, r8, #1
 800ac9a:	45d0      	cmp	r8, sl
 800ac9c:	dbf3      	blt.n	800ac86 <_printf_float+0x3fa>
 800ac9e:	464b      	mov	r3, r9
 800aca0:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 800aca4:	e6df      	b.n	800aa66 <_printf_float+0x1da>
 800aca6:	f04f 0800 	mov.w	r8, #0
 800acaa:	f104 0b1a 	add.w	fp, r4, #26
 800acae:	e7f4      	b.n	800ac9a <_printf_float+0x40e>
 800acb0:	2301      	movs	r3, #1
 800acb2:	4642      	mov	r2, r8
 800acb4:	e7e1      	b.n	800ac7a <_printf_float+0x3ee>
 800acb6:	2301      	movs	r3, #1
 800acb8:	464a      	mov	r2, r9
 800acba:	4631      	mov	r1, r6
 800acbc:	4628      	mov	r0, r5
 800acbe:	47b8      	blx	r7
 800acc0:	3001      	adds	r0, #1
 800acc2:	f43f ae3e 	beq.w	800a942 <_printf_float+0xb6>
 800acc6:	f108 0801 	add.w	r8, r8, #1
 800acca:	68e3      	ldr	r3, [r4, #12]
 800accc:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800acce:	1a5b      	subs	r3, r3, r1
 800acd0:	4543      	cmp	r3, r8
 800acd2:	dcf0      	bgt.n	800acb6 <_printf_float+0x42a>
 800acd4:	e6fc      	b.n	800aad0 <_printf_float+0x244>
 800acd6:	f04f 0800 	mov.w	r8, #0
 800acda:	f104 0919 	add.w	r9, r4, #25
 800acde:	e7f4      	b.n	800acca <_printf_float+0x43e>

0800ace0 <_printf_common>:
 800ace0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ace4:	4616      	mov	r6, r2
 800ace6:	4698      	mov	r8, r3
 800ace8:	688a      	ldr	r2, [r1, #8]
 800acea:	690b      	ldr	r3, [r1, #16]
 800acec:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800acf0:	4293      	cmp	r3, r2
 800acf2:	bfb8      	it	lt
 800acf4:	4613      	movlt	r3, r2
 800acf6:	6033      	str	r3, [r6, #0]
 800acf8:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800acfc:	4607      	mov	r7, r0
 800acfe:	460c      	mov	r4, r1
 800ad00:	b10a      	cbz	r2, 800ad06 <_printf_common+0x26>
 800ad02:	3301      	adds	r3, #1
 800ad04:	6033      	str	r3, [r6, #0]
 800ad06:	6823      	ldr	r3, [r4, #0]
 800ad08:	0699      	lsls	r1, r3, #26
 800ad0a:	bf42      	ittt	mi
 800ad0c:	6833      	ldrmi	r3, [r6, #0]
 800ad0e:	3302      	addmi	r3, #2
 800ad10:	6033      	strmi	r3, [r6, #0]
 800ad12:	6825      	ldr	r5, [r4, #0]
 800ad14:	f015 0506 	ands.w	r5, r5, #6
 800ad18:	d106      	bne.n	800ad28 <_printf_common+0x48>
 800ad1a:	f104 0a19 	add.w	sl, r4, #25
 800ad1e:	68e3      	ldr	r3, [r4, #12]
 800ad20:	6832      	ldr	r2, [r6, #0]
 800ad22:	1a9b      	subs	r3, r3, r2
 800ad24:	42ab      	cmp	r3, r5
 800ad26:	dc26      	bgt.n	800ad76 <_printf_common+0x96>
 800ad28:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800ad2c:	6822      	ldr	r2, [r4, #0]
 800ad2e:	3b00      	subs	r3, #0
 800ad30:	bf18      	it	ne
 800ad32:	2301      	movne	r3, #1
 800ad34:	0692      	lsls	r2, r2, #26
 800ad36:	d42b      	bmi.n	800ad90 <_printf_common+0xb0>
 800ad38:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800ad3c:	4641      	mov	r1, r8
 800ad3e:	4638      	mov	r0, r7
 800ad40:	47c8      	blx	r9
 800ad42:	3001      	adds	r0, #1
 800ad44:	d01e      	beq.n	800ad84 <_printf_common+0xa4>
 800ad46:	6823      	ldr	r3, [r4, #0]
 800ad48:	6922      	ldr	r2, [r4, #16]
 800ad4a:	f003 0306 	and.w	r3, r3, #6
 800ad4e:	2b04      	cmp	r3, #4
 800ad50:	bf02      	ittt	eq
 800ad52:	68e5      	ldreq	r5, [r4, #12]
 800ad54:	6833      	ldreq	r3, [r6, #0]
 800ad56:	1aed      	subeq	r5, r5, r3
 800ad58:	68a3      	ldr	r3, [r4, #8]
 800ad5a:	bf0c      	ite	eq
 800ad5c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800ad60:	2500      	movne	r5, #0
 800ad62:	4293      	cmp	r3, r2
 800ad64:	bfc4      	itt	gt
 800ad66:	1a9b      	subgt	r3, r3, r2
 800ad68:	18ed      	addgt	r5, r5, r3
 800ad6a:	2600      	movs	r6, #0
 800ad6c:	341a      	adds	r4, #26
 800ad6e:	42b5      	cmp	r5, r6
 800ad70:	d11a      	bne.n	800ada8 <_printf_common+0xc8>
 800ad72:	2000      	movs	r0, #0
 800ad74:	e008      	b.n	800ad88 <_printf_common+0xa8>
 800ad76:	2301      	movs	r3, #1
 800ad78:	4652      	mov	r2, sl
 800ad7a:	4641      	mov	r1, r8
 800ad7c:	4638      	mov	r0, r7
 800ad7e:	47c8      	blx	r9
 800ad80:	3001      	adds	r0, #1
 800ad82:	d103      	bne.n	800ad8c <_printf_common+0xac>
 800ad84:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800ad88:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ad8c:	3501      	adds	r5, #1
 800ad8e:	e7c6      	b.n	800ad1e <_printf_common+0x3e>
 800ad90:	18e1      	adds	r1, r4, r3
 800ad92:	1c5a      	adds	r2, r3, #1
 800ad94:	2030      	movs	r0, #48	@ 0x30
 800ad96:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800ad9a:	4422      	add	r2, r4
 800ad9c:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800ada0:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800ada4:	3302      	adds	r3, #2
 800ada6:	e7c7      	b.n	800ad38 <_printf_common+0x58>
 800ada8:	2301      	movs	r3, #1
 800adaa:	4622      	mov	r2, r4
 800adac:	4641      	mov	r1, r8
 800adae:	4638      	mov	r0, r7
 800adb0:	47c8      	blx	r9
 800adb2:	3001      	adds	r0, #1
 800adb4:	d0e6      	beq.n	800ad84 <_printf_common+0xa4>
 800adb6:	3601      	adds	r6, #1
 800adb8:	e7d9      	b.n	800ad6e <_printf_common+0x8e>
	...

0800adbc <_printf_i>:
 800adbc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800adc0:	7e0f      	ldrb	r7, [r1, #24]
 800adc2:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800adc4:	2f78      	cmp	r7, #120	@ 0x78
 800adc6:	4691      	mov	r9, r2
 800adc8:	4680      	mov	r8, r0
 800adca:	460c      	mov	r4, r1
 800adcc:	469a      	mov	sl, r3
 800adce:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800add2:	d807      	bhi.n	800ade4 <_printf_i+0x28>
 800add4:	2f62      	cmp	r7, #98	@ 0x62
 800add6:	d80a      	bhi.n	800adee <_printf_i+0x32>
 800add8:	2f00      	cmp	r7, #0
 800adda:	f000 80d2 	beq.w	800af82 <_printf_i+0x1c6>
 800adde:	2f58      	cmp	r7, #88	@ 0x58
 800ade0:	f000 80b9 	beq.w	800af56 <_printf_i+0x19a>
 800ade4:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800ade8:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800adec:	e03a      	b.n	800ae64 <_printf_i+0xa8>
 800adee:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800adf2:	2b15      	cmp	r3, #21
 800adf4:	d8f6      	bhi.n	800ade4 <_printf_i+0x28>
 800adf6:	a101      	add	r1, pc, #4	@ (adr r1, 800adfc <_printf_i+0x40>)
 800adf8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800adfc:	0800ae55 	.word	0x0800ae55
 800ae00:	0800ae69 	.word	0x0800ae69
 800ae04:	0800ade5 	.word	0x0800ade5
 800ae08:	0800ade5 	.word	0x0800ade5
 800ae0c:	0800ade5 	.word	0x0800ade5
 800ae10:	0800ade5 	.word	0x0800ade5
 800ae14:	0800ae69 	.word	0x0800ae69
 800ae18:	0800ade5 	.word	0x0800ade5
 800ae1c:	0800ade5 	.word	0x0800ade5
 800ae20:	0800ade5 	.word	0x0800ade5
 800ae24:	0800ade5 	.word	0x0800ade5
 800ae28:	0800af69 	.word	0x0800af69
 800ae2c:	0800ae93 	.word	0x0800ae93
 800ae30:	0800af23 	.word	0x0800af23
 800ae34:	0800ade5 	.word	0x0800ade5
 800ae38:	0800ade5 	.word	0x0800ade5
 800ae3c:	0800af8b 	.word	0x0800af8b
 800ae40:	0800ade5 	.word	0x0800ade5
 800ae44:	0800ae93 	.word	0x0800ae93
 800ae48:	0800ade5 	.word	0x0800ade5
 800ae4c:	0800ade5 	.word	0x0800ade5
 800ae50:	0800af2b 	.word	0x0800af2b
 800ae54:	6833      	ldr	r3, [r6, #0]
 800ae56:	1d1a      	adds	r2, r3, #4
 800ae58:	681b      	ldr	r3, [r3, #0]
 800ae5a:	6032      	str	r2, [r6, #0]
 800ae5c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800ae60:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800ae64:	2301      	movs	r3, #1
 800ae66:	e09d      	b.n	800afa4 <_printf_i+0x1e8>
 800ae68:	6833      	ldr	r3, [r6, #0]
 800ae6a:	6820      	ldr	r0, [r4, #0]
 800ae6c:	1d19      	adds	r1, r3, #4
 800ae6e:	6031      	str	r1, [r6, #0]
 800ae70:	0606      	lsls	r6, r0, #24
 800ae72:	d501      	bpl.n	800ae78 <_printf_i+0xbc>
 800ae74:	681d      	ldr	r5, [r3, #0]
 800ae76:	e003      	b.n	800ae80 <_printf_i+0xc4>
 800ae78:	0645      	lsls	r5, r0, #25
 800ae7a:	d5fb      	bpl.n	800ae74 <_printf_i+0xb8>
 800ae7c:	f9b3 5000 	ldrsh.w	r5, [r3]
 800ae80:	2d00      	cmp	r5, #0
 800ae82:	da03      	bge.n	800ae8c <_printf_i+0xd0>
 800ae84:	232d      	movs	r3, #45	@ 0x2d
 800ae86:	426d      	negs	r5, r5
 800ae88:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800ae8c:	4859      	ldr	r0, [pc, #356]	@ (800aff4 <_printf_i+0x238>)
 800ae8e:	230a      	movs	r3, #10
 800ae90:	e011      	b.n	800aeb6 <_printf_i+0xfa>
 800ae92:	6821      	ldr	r1, [r4, #0]
 800ae94:	6833      	ldr	r3, [r6, #0]
 800ae96:	0608      	lsls	r0, r1, #24
 800ae98:	f853 5b04 	ldr.w	r5, [r3], #4
 800ae9c:	d402      	bmi.n	800aea4 <_printf_i+0xe8>
 800ae9e:	0649      	lsls	r1, r1, #25
 800aea0:	bf48      	it	mi
 800aea2:	b2ad      	uxthmi	r5, r5
 800aea4:	2f6f      	cmp	r7, #111	@ 0x6f
 800aea6:	4853      	ldr	r0, [pc, #332]	@ (800aff4 <_printf_i+0x238>)
 800aea8:	6033      	str	r3, [r6, #0]
 800aeaa:	bf14      	ite	ne
 800aeac:	230a      	movne	r3, #10
 800aeae:	2308      	moveq	r3, #8
 800aeb0:	2100      	movs	r1, #0
 800aeb2:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800aeb6:	6866      	ldr	r6, [r4, #4]
 800aeb8:	60a6      	str	r6, [r4, #8]
 800aeba:	2e00      	cmp	r6, #0
 800aebc:	bfa2      	ittt	ge
 800aebe:	6821      	ldrge	r1, [r4, #0]
 800aec0:	f021 0104 	bicge.w	r1, r1, #4
 800aec4:	6021      	strge	r1, [r4, #0]
 800aec6:	b90d      	cbnz	r5, 800aecc <_printf_i+0x110>
 800aec8:	2e00      	cmp	r6, #0
 800aeca:	d04b      	beq.n	800af64 <_printf_i+0x1a8>
 800aecc:	4616      	mov	r6, r2
 800aece:	fbb5 f1f3 	udiv	r1, r5, r3
 800aed2:	fb03 5711 	mls	r7, r3, r1, r5
 800aed6:	5dc7      	ldrb	r7, [r0, r7]
 800aed8:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800aedc:	462f      	mov	r7, r5
 800aede:	42bb      	cmp	r3, r7
 800aee0:	460d      	mov	r5, r1
 800aee2:	d9f4      	bls.n	800aece <_printf_i+0x112>
 800aee4:	2b08      	cmp	r3, #8
 800aee6:	d10b      	bne.n	800af00 <_printf_i+0x144>
 800aee8:	6823      	ldr	r3, [r4, #0]
 800aeea:	07df      	lsls	r7, r3, #31
 800aeec:	d508      	bpl.n	800af00 <_printf_i+0x144>
 800aeee:	6923      	ldr	r3, [r4, #16]
 800aef0:	6861      	ldr	r1, [r4, #4]
 800aef2:	4299      	cmp	r1, r3
 800aef4:	bfde      	ittt	le
 800aef6:	2330      	movle	r3, #48	@ 0x30
 800aef8:	f806 3c01 	strble.w	r3, [r6, #-1]
 800aefc:	f106 36ff 	addle.w	r6, r6, #4294967295	@ 0xffffffff
 800af00:	1b92      	subs	r2, r2, r6
 800af02:	6122      	str	r2, [r4, #16]
 800af04:	f8cd a000 	str.w	sl, [sp]
 800af08:	464b      	mov	r3, r9
 800af0a:	aa03      	add	r2, sp, #12
 800af0c:	4621      	mov	r1, r4
 800af0e:	4640      	mov	r0, r8
 800af10:	f7ff fee6 	bl	800ace0 <_printf_common>
 800af14:	3001      	adds	r0, #1
 800af16:	d14a      	bne.n	800afae <_printf_i+0x1f2>
 800af18:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800af1c:	b004      	add	sp, #16
 800af1e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800af22:	6823      	ldr	r3, [r4, #0]
 800af24:	f043 0320 	orr.w	r3, r3, #32
 800af28:	6023      	str	r3, [r4, #0]
 800af2a:	4833      	ldr	r0, [pc, #204]	@ (800aff8 <_printf_i+0x23c>)
 800af2c:	2778      	movs	r7, #120	@ 0x78
 800af2e:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800af32:	6823      	ldr	r3, [r4, #0]
 800af34:	6831      	ldr	r1, [r6, #0]
 800af36:	061f      	lsls	r7, r3, #24
 800af38:	f851 5b04 	ldr.w	r5, [r1], #4
 800af3c:	d402      	bmi.n	800af44 <_printf_i+0x188>
 800af3e:	065f      	lsls	r7, r3, #25
 800af40:	bf48      	it	mi
 800af42:	b2ad      	uxthmi	r5, r5
 800af44:	6031      	str	r1, [r6, #0]
 800af46:	07d9      	lsls	r1, r3, #31
 800af48:	bf44      	itt	mi
 800af4a:	f043 0320 	orrmi.w	r3, r3, #32
 800af4e:	6023      	strmi	r3, [r4, #0]
 800af50:	b11d      	cbz	r5, 800af5a <_printf_i+0x19e>
 800af52:	2310      	movs	r3, #16
 800af54:	e7ac      	b.n	800aeb0 <_printf_i+0xf4>
 800af56:	4827      	ldr	r0, [pc, #156]	@ (800aff4 <_printf_i+0x238>)
 800af58:	e7e9      	b.n	800af2e <_printf_i+0x172>
 800af5a:	6823      	ldr	r3, [r4, #0]
 800af5c:	f023 0320 	bic.w	r3, r3, #32
 800af60:	6023      	str	r3, [r4, #0]
 800af62:	e7f6      	b.n	800af52 <_printf_i+0x196>
 800af64:	4616      	mov	r6, r2
 800af66:	e7bd      	b.n	800aee4 <_printf_i+0x128>
 800af68:	6833      	ldr	r3, [r6, #0]
 800af6a:	6825      	ldr	r5, [r4, #0]
 800af6c:	6961      	ldr	r1, [r4, #20]
 800af6e:	1d18      	adds	r0, r3, #4
 800af70:	6030      	str	r0, [r6, #0]
 800af72:	062e      	lsls	r6, r5, #24
 800af74:	681b      	ldr	r3, [r3, #0]
 800af76:	d501      	bpl.n	800af7c <_printf_i+0x1c0>
 800af78:	6019      	str	r1, [r3, #0]
 800af7a:	e002      	b.n	800af82 <_printf_i+0x1c6>
 800af7c:	0668      	lsls	r0, r5, #25
 800af7e:	d5fb      	bpl.n	800af78 <_printf_i+0x1bc>
 800af80:	8019      	strh	r1, [r3, #0]
 800af82:	2300      	movs	r3, #0
 800af84:	6123      	str	r3, [r4, #16]
 800af86:	4616      	mov	r6, r2
 800af88:	e7bc      	b.n	800af04 <_printf_i+0x148>
 800af8a:	6833      	ldr	r3, [r6, #0]
 800af8c:	1d1a      	adds	r2, r3, #4
 800af8e:	6032      	str	r2, [r6, #0]
 800af90:	681e      	ldr	r6, [r3, #0]
 800af92:	6862      	ldr	r2, [r4, #4]
 800af94:	2100      	movs	r1, #0
 800af96:	4630      	mov	r0, r6
 800af98:	f7f5 f942 	bl	8000220 <memchr>
 800af9c:	b108      	cbz	r0, 800afa2 <_printf_i+0x1e6>
 800af9e:	1b80      	subs	r0, r0, r6
 800afa0:	6060      	str	r0, [r4, #4]
 800afa2:	6863      	ldr	r3, [r4, #4]
 800afa4:	6123      	str	r3, [r4, #16]
 800afa6:	2300      	movs	r3, #0
 800afa8:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800afac:	e7aa      	b.n	800af04 <_printf_i+0x148>
 800afae:	6923      	ldr	r3, [r4, #16]
 800afb0:	4632      	mov	r2, r6
 800afb2:	4649      	mov	r1, r9
 800afb4:	4640      	mov	r0, r8
 800afb6:	47d0      	blx	sl
 800afb8:	3001      	adds	r0, #1
 800afba:	d0ad      	beq.n	800af18 <_printf_i+0x15c>
 800afbc:	6823      	ldr	r3, [r4, #0]
 800afbe:	079b      	lsls	r3, r3, #30
 800afc0:	d413      	bmi.n	800afea <_printf_i+0x22e>
 800afc2:	68e0      	ldr	r0, [r4, #12]
 800afc4:	9b03      	ldr	r3, [sp, #12]
 800afc6:	4298      	cmp	r0, r3
 800afc8:	bfb8      	it	lt
 800afca:	4618      	movlt	r0, r3
 800afcc:	e7a6      	b.n	800af1c <_printf_i+0x160>
 800afce:	2301      	movs	r3, #1
 800afd0:	4632      	mov	r2, r6
 800afd2:	4649      	mov	r1, r9
 800afd4:	4640      	mov	r0, r8
 800afd6:	47d0      	blx	sl
 800afd8:	3001      	adds	r0, #1
 800afda:	d09d      	beq.n	800af18 <_printf_i+0x15c>
 800afdc:	3501      	adds	r5, #1
 800afde:	68e3      	ldr	r3, [r4, #12]
 800afe0:	9903      	ldr	r1, [sp, #12]
 800afe2:	1a5b      	subs	r3, r3, r1
 800afe4:	42ab      	cmp	r3, r5
 800afe6:	dcf2      	bgt.n	800afce <_printf_i+0x212>
 800afe8:	e7eb      	b.n	800afc2 <_printf_i+0x206>
 800afea:	2500      	movs	r5, #0
 800afec:	f104 0619 	add.w	r6, r4, #25
 800aff0:	e7f5      	b.n	800afde <_printf_i+0x222>
 800aff2:	bf00      	nop
 800aff4:	0800d0ca 	.word	0x0800d0ca
 800aff8:	0800d0db 	.word	0x0800d0db

0800affc <std>:
 800affc:	2300      	movs	r3, #0
 800affe:	b510      	push	{r4, lr}
 800b000:	4604      	mov	r4, r0
 800b002:	e9c0 3300 	strd	r3, r3, [r0]
 800b006:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800b00a:	6083      	str	r3, [r0, #8]
 800b00c:	8181      	strh	r1, [r0, #12]
 800b00e:	6643      	str	r3, [r0, #100]	@ 0x64
 800b010:	81c2      	strh	r2, [r0, #14]
 800b012:	6183      	str	r3, [r0, #24]
 800b014:	4619      	mov	r1, r3
 800b016:	2208      	movs	r2, #8
 800b018:	305c      	adds	r0, #92	@ 0x5c
 800b01a:	f000 f8f4 	bl	800b206 <memset>
 800b01e:	4b0d      	ldr	r3, [pc, #52]	@ (800b054 <std+0x58>)
 800b020:	6263      	str	r3, [r4, #36]	@ 0x24
 800b022:	4b0d      	ldr	r3, [pc, #52]	@ (800b058 <std+0x5c>)
 800b024:	62a3      	str	r3, [r4, #40]	@ 0x28
 800b026:	4b0d      	ldr	r3, [pc, #52]	@ (800b05c <std+0x60>)
 800b028:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800b02a:	4b0d      	ldr	r3, [pc, #52]	@ (800b060 <std+0x64>)
 800b02c:	6323      	str	r3, [r4, #48]	@ 0x30
 800b02e:	4b0d      	ldr	r3, [pc, #52]	@ (800b064 <std+0x68>)
 800b030:	6224      	str	r4, [r4, #32]
 800b032:	429c      	cmp	r4, r3
 800b034:	d006      	beq.n	800b044 <std+0x48>
 800b036:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800b03a:	4294      	cmp	r4, r2
 800b03c:	d002      	beq.n	800b044 <std+0x48>
 800b03e:	33d0      	adds	r3, #208	@ 0xd0
 800b040:	429c      	cmp	r4, r3
 800b042:	d105      	bne.n	800b050 <std+0x54>
 800b044:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800b048:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b04c:	f000 b958 	b.w	800b300 <__retarget_lock_init_recursive>
 800b050:	bd10      	pop	{r4, pc}
 800b052:	bf00      	nop
 800b054:	0800b181 	.word	0x0800b181
 800b058:	0800b1a3 	.word	0x0800b1a3
 800b05c:	0800b1db 	.word	0x0800b1db
 800b060:	0800b1ff 	.word	0x0800b1ff
 800b064:	200018d8 	.word	0x200018d8

0800b068 <stdio_exit_handler>:
 800b068:	4a02      	ldr	r2, [pc, #8]	@ (800b074 <stdio_exit_handler+0xc>)
 800b06a:	4903      	ldr	r1, [pc, #12]	@ (800b078 <stdio_exit_handler+0x10>)
 800b06c:	4803      	ldr	r0, [pc, #12]	@ (800b07c <stdio_exit_handler+0x14>)
 800b06e:	f000 b869 	b.w	800b144 <_fwalk_sglue>
 800b072:	bf00      	nop
 800b074:	20000194 	.word	0x20000194
 800b078:	0800c9ad 	.word	0x0800c9ad
 800b07c:	200001a4 	.word	0x200001a4

0800b080 <cleanup_stdio>:
 800b080:	6841      	ldr	r1, [r0, #4]
 800b082:	4b0c      	ldr	r3, [pc, #48]	@ (800b0b4 <cleanup_stdio+0x34>)
 800b084:	4299      	cmp	r1, r3
 800b086:	b510      	push	{r4, lr}
 800b088:	4604      	mov	r4, r0
 800b08a:	d001      	beq.n	800b090 <cleanup_stdio+0x10>
 800b08c:	f001 fc8e 	bl	800c9ac <_fflush_r>
 800b090:	68a1      	ldr	r1, [r4, #8]
 800b092:	4b09      	ldr	r3, [pc, #36]	@ (800b0b8 <cleanup_stdio+0x38>)
 800b094:	4299      	cmp	r1, r3
 800b096:	d002      	beq.n	800b09e <cleanup_stdio+0x1e>
 800b098:	4620      	mov	r0, r4
 800b09a:	f001 fc87 	bl	800c9ac <_fflush_r>
 800b09e:	68e1      	ldr	r1, [r4, #12]
 800b0a0:	4b06      	ldr	r3, [pc, #24]	@ (800b0bc <cleanup_stdio+0x3c>)
 800b0a2:	4299      	cmp	r1, r3
 800b0a4:	d004      	beq.n	800b0b0 <cleanup_stdio+0x30>
 800b0a6:	4620      	mov	r0, r4
 800b0a8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b0ac:	f001 bc7e 	b.w	800c9ac <_fflush_r>
 800b0b0:	bd10      	pop	{r4, pc}
 800b0b2:	bf00      	nop
 800b0b4:	200018d8 	.word	0x200018d8
 800b0b8:	20001940 	.word	0x20001940
 800b0bc:	200019a8 	.word	0x200019a8

0800b0c0 <global_stdio_init.part.0>:
 800b0c0:	b510      	push	{r4, lr}
 800b0c2:	4b0b      	ldr	r3, [pc, #44]	@ (800b0f0 <global_stdio_init.part.0+0x30>)
 800b0c4:	4c0b      	ldr	r4, [pc, #44]	@ (800b0f4 <global_stdio_init.part.0+0x34>)
 800b0c6:	4a0c      	ldr	r2, [pc, #48]	@ (800b0f8 <global_stdio_init.part.0+0x38>)
 800b0c8:	601a      	str	r2, [r3, #0]
 800b0ca:	4620      	mov	r0, r4
 800b0cc:	2200      	movs	r2, #0
 800b0ce:	2104      	movs	r1, #4
 800b0d0:	f7ff ff94 	bl	800affc <std>
 800b0d4:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800b0d8:	2201      	movs	r2, #1
 800b0da:	2109      	movs	r1, #9
 800b0dc:	f7ff ff8e 	bl	800affc <std>
 800b0e0:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800b0e4:	2202      	movs	r2, #2
 800b0e6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b0ea:	2112      	movs	r1, #18
 800b0ec:	f7ff bf86 	b.w	800affc <std>
 800b0f0:	20001a10 	.word	0x20001a10
 800b0f4:	200018d8 	.word	0x200018d8
 800b0f8:	0800b069 	.word	0x0800b069

0800b0fc <__sfp_lock_acquire>:
 800b0fc:	4801      	ldr	r0, [pc, #4]	@ (800b104 <__sfp_lock_acquire+0x8>)
 800b0fe:	f000 b900 	b.w	800b302 <__retarget_lock_acquire_recursive>
 800b102:	bf00      	nop
 800b104:	20001a19 	.word	0x20001a19

0800b108 <__sfp_lock_release>:
 800b108:	4801      	ldr	r0, [pc, #4]	@ (800b110 <__sfp_lock_release+0x8>)
 800b10a:	f000 b8fb 	b.w	800b304 <__retarget_lock_release_recursive>
 800b10e:	bf00      	nop
 800b110:	20001a19 	.word	0x20001a19

0800b114 <__sinit>:
 800b114:	b510      	push	{r4, lr}
 800b116:	4604      	mov	r4, r0
 800b118:	f7ff fff0 	bl	800b0fc <__sfp_lock_acquire>
 800b11c:	6a23      	ldr	r3, [r4, #32]
 800b11e:	b11b      	cbz	r3, 800b128 <__sinit+0x14>
 800b120:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b124:	f7ff bff0 	b.w	800b108 <__sfp_lock_release>
 800b128:	4b04      	ldr	r3, [pc, #16]	@ (800b13c <__sinit+0x28>)
 800b12a:	6223      	str	r3, [r4, #32]
 800b12c:	4b04      	ldr	r3, [pc, #16]	@ (800b140 <__sinit+0x2c>)
 800b12e:	681b      	ldr	r3, [r3, #0]
 800b130:	2b00      	cmp	r3, #0
 800b132:	d1f5      	bne.n	800b120 <__sinit+0xc>
 800b134:	f7ff ffc4 	bl	800b0c0 <global_stdio_init.part.0>
 800b138:	e7f2      	b.n	800b120 <__sinit+0xc>
 800b13a:	bf00      	nop
 800b13c:	0800b081 	.word	0x0800b081
 800b140:	20001a10 	.word	0x20001a10

0800b144 <_fwalk_sglue>:
 800b144:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b148:	4607      	mov	r7, r0
 800b14a:	4688      	mov	r8, r1
 800b14c:	4614      	mov	r4, r2
 800b14e:	2600      	movs	r6, #0
 800b150:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800b154:	f1b9 0901 	subs.w	r9, r9, #1
 800b158:	d505      	bpl.n	800b166 <_fwalk_sglue+0x22>
 800b15a:	6824      	ldr	r4, [r4, #0]
 800b15c:	2c00      	cmp	r4, #0
 800b15e:	d1f7      	bne.n	800b150 <_fwalk_sglue+0xc>
 800b160:	4630      	mov	r0, r6
 800b162:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b166:	89ab      	ldrh	r3, [r5, #12]
 800b168:	2b01      	cmp	r3, #1
 800b16a:	d907      	bls.n	800b17c <_fwalk_sglue+0x38>
 800b16c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800b170:	3301      	adds	r3, #1
 800b172:	d003      	beq.n	800b17c <_fwalk_sglue+0x38>
 800b174:	4629      	mov	r1, r5
 800b176:	4638      	mov	r0, r7
 800b178:	47c0      	blx	r8
 800b17a:	4306      	orrs	r6, r0
 800b17c:	3568      	adds	r5, #104	@ 0x68
 800b17e:	e7e9      	b.n	800b154 <_fwalk_sglue+0x10>

0800b180 <__sread>:
 800b180:	b510      	push	{r4, lr}
 800b182:	460c      	mov	r4, r1
 800b184:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b188:	f000 f86c 	bl	800b264 <_read_r>
 800b18c:	2800      	cmp	r0, #0
 800b18e:	bfab      	itete	ge
 800b190:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800b192:	89a3      	ldrhlt	r3, [r4, #12]
 800b194:	181b      	addge	r3, r3, r0
 800b196:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800b19a:	bfac      	ite	ge
 800b19c:	6563      	strge	r3, [r4, #84]	@ 0x54
 800b19e:	81a3      	strhlt	r3, [r4, #12]
 800b1a0:	bd10      	pop	{r4, pc}

0800b1a2 <__swrite>:
 800b1a2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b1a6:	461f      	mov	r7, r3
 800b1a8:	898b      	ldrh	r3, [r1, #12]
 800b1aa:	05db      	lsls	r3, r3, #23
 800b1ac:	4605      	mov	r5, r0
 800b1ae:	460c      	mov	r4, r1
 800b1b0:	4616      	mov	r6, r2
 800b1b2:	d505      	bpl.n	800b1c0 <__swrite+0x1e>
 800b1b4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b1b8:	2302      	movs	r3, #2
 800b1ba:	2200      	movs	r2, #0
 800b1bc:	f000 f840 	bl	800b240 <_lseek_r>
 800b1c0:	89a3      	ldrh	r3, [r4, #12]
 800b1c2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800b1c6:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800b1ca:	81a3      	strh	r3, [r4, #12]
 800b1cc:	4632      	mov	r2, r6
 800b1ce:	463b      	mov	r3, r7
 800b1d0:	4628      	mov	r0, r5
 800b1d2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800b1d6:	f000 b857 	b.w	800b288 <_write_r>

0800b1da <__sseek>:
 800b1da:	b510      	push	{r4, lr}
 800b1dc:	460c      	mov	r4, r1
 800b1de:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b1e2:	f000 f82d 	bl	800b240 <_lseek_r>
 800b1e6:	1c43      	adds	r3, r0, #1
 800b1e8:	89a3      	ldrh	r3, [r4, #12]
 800b1ea:	bf15      	itete	ne
 800b1ec:	6560      	strne	r0, [r4, #84]	@ 0x54
 800b1ee:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800b1f2:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800b1f6:	81a3      	strheq	r3, [r4, #12]
 800b1f8:	bf18      	it	ne
 800b1fa:	81a3      	strhne	r3, [r4, #12]
 800b1fc:	bd10      	pop	{r4, pc}

0800b1fe <__sclose>:
 800b1fe:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b202:	f000 b80d 	b.w	800b220 <_close_r>

0800b206 <memset>:
 800b206:	4402      	add	r2, r0
 800b208:	4603      	mov	r3, r0
 800b20a:	4293      	cmp	r3, r2
 800b20c:	d100      	bne.n	800b210 <memset+0xa>
 800b20e:	4770      	bx	lr
 800b210:	f803 1b01 	strb.w	r1, [r3], #1
 800b214:	e7f9      	b.n	800b20a <memset+0x4>
	...

0800b218 <_localeconv_r>:
 800b218:	4800      	ldr	r0, [pc, #0]	@ (800b21c <_localeconv_r+0x4>)
 800b21a:	4770      	bx	lr
 800b21c:	200002e0 	.word	0x200002e0

0800b220 <_close_r>:
 800b220:	b538      	push	{r3, r4, r5, lr}
 800b222:	4d06      	ldr	r5, [pc, #24]	@ (800b23c <_close_r+0x1c>)
 800b224:	2300      	movs	r3, #0
 800b226:	4604      	mov	r4, r0
 800b228:	4608      	mov	r0, r1
 800b22a:	602b      	str	r3, [r5, #0]
 800b22c:	f7f7 fa44 	bl	80026b8 <_close>
 800b230:	1c43      	adds	r3, r0, #1
 800b232:	d102      	bne.n	800b23a <_close_r+0x1a>
 800b234:	682b      	ldr	r3, [r5, #0]
 800b236:	b103      	cbz	r3, 800b23a <_close_r+0x1a>
 800b238:	6023      	str	r3, [r4, #0]
 800b23a:	bd38      	pop	{r3, r4, r5, pc}
 800b23c:	20001a14 	.word	0x20001a14

0800b240 <_lseek_r>:
 800b240:	b538      	push	{r3, r4, r5, lr}
 800b242:	4d07      	ldr	r5, [pc, #28]	@ (800b260 <_lseek_r+0x20>)
 800b244:	4604      	mov	r4, r0
 800b246:	4608      	mov	r0, r1
 800b248:	4611      	mov	r1, r2
 800b24a:	2200      	movs	r2, #0
 800b24c:	602a      	str	r2, [r5, #0]
 800b24e:	461a      	mov	r2, r3
 800b250:	f7f7 fa59 	bl	8002706 <_lseek>
 800b254:	1c43      	adds	r3, r0, #1
 800b256:	d102      	bne.n	800b25e <_lseek_r+0x1e>
 800b258:	682b      	ldr	r3, [r5, #0]
 800b25a:	b103      	cbz	r3, 800b25e <_lseek_r+0x1e>
 800b25c:	6023      	str	r3, [r4, #0]
 800b25e:	bd38      	pop	{r3, r4, r5, pc}
 800b260:	20001a14 	.word	0x20001a14

0800b264 <_read_r>:
 800b264:	b538      	push	{r3, r4, r5, lr}
 800b266:	4d07      	ldr	r5, [pc, #28]	@ (800b284 <_read_r+0x20>)
 800b268:	4604      	mov	r4, r0
 800b26a:	4608      	mov	r0, r1
 800b26c:	4611      	mov	r1, r2
 800b26e:	2200      	movs	r2, #0
 800b270:	602a      	str	r2, [r5, #0]
 800b272:	461a      	mov	r2, r3
 800b274:	f7f7 f9e7 	bl	8002646 <_read>
 800b278:	1c43      	adds	r3, r0, #1
 800b27a:	d102      	bne.n	800b282 <_read_r+0x1e>
 800b27c:	682b      	ldr	r3, [r5, #0]
 800b27e:	b103      	cbz	r3, 800b282 <_read_r+0x1e>
 800b280:	6023      	str	r3, [r4, #0]
 800b282:	bd38      	pop	{r3, r4, r5, pc}
 800b284:	20001a14 	.word	0x20001a14

0800b288 <_write_r>:
 800b288:	b538      	push	{r3, r4, r5, lr}
 800b28a:	4d07      	ldr	r5, [pc, #28]	@ (800b2a8 <_write_r+0x20>)
 800b28c:	4604      	mov	r4, r0
 800b28e:	4608      	mov	r0, r1
 800b290:	4611      	mov	r1, r2
 800b292:	2200      	movs	r2, #0
 800b294:	602a      	str	r2, [r5, #0]
 800b296:	461a      	mov	r2, r3
 800b298:	f7f7 f9f2 	bl	8002680 <_write>
 800b29c:	1c43      	adds	r3, r0, #1
 800b29e:	d102      	bne.n	800b2a6 <_write_r+0x1e>
 800b2a0:	682b      	ldr	r3, [r5, #0]
 800b2a2:	b103      	cbz	r3, 800b2a6 <_write_r+0x1e>
 800b2a4:	6023      	str	r3, [r4, #0]
 800b2a6:	bd38      	pop	{r3, r4, r5, pc}
 800b2a8:	20001a14 	.word	0x20001a14

0800b2ac <__errno>:
 800b2ac:	4b01      	ldr	r3, [pc, #4]	@ (800b2b4 <__errno+0x8>)
 800b2ae:	6818      	ldr	r0, [r3, #0]
 800b2b0:	4770      	bx	lr
 800b2b2:	bf00      	nop
 800b2b4:	200001a0 	.word	0x200001a0

0800b2b8 <__libc_init_array>:
 800b2b8:	b570      	push	{r4, r5, r6, lr}
 800b2ba:	4d0d      	ldr	r5, [pc, #52]	@ (800b2f0 <__libc_init_array+0x38>)
 800b2bc:	4c0d      	ldr	r4, [pc, #52]	@ (800b2f4 <__libc_init_array+0x3c>)
 800b2be:	1b64      	subs	r4, r4, r5
 800b2c0:	10a4      	asrs	r4, r4, #2
 800b2c2:	2600      	movs	r6, #0
 800b2c4:	42a6      	cmp	r6, r4
 800b2c6:	d109      	bne.n	800b2dc <__libc_init_array+0x24>
 800b2c8:	4d0b      	ldr	r5, [pc, #44]	@ (800b2f8 <__libc_init_array+0x40>)
 800b2ca:	4c0c      	ldr	r4, [pc, #48]	@ (800b2fc <__libc_init_array+0x44>)
 800b2cc:	f001 febc 	bl	800d048 <_init>
 800b2d0:	1b64      	subs	r4, r4, r5
 800b2d2:	10a4      	asrs	r4, r4, #2
 800b2d4:	2600      	movs	r6, #0
 800b2d6:	42a6      	cmp	r6, r4
 800b2d8:	d105      	bne.n	800b2e6 <__libc_init_array+0x2e>
 800b2da:	bd70      	pop	{r4, r5, r6, pc}
 800b2dc:	f855 3b04 	ldr.w	r3, [r5], #4
 800b2e0:	4798      	blx	r3
 800b2e2:	3601      	adds	r6, #1
 800b2e4:	e7ee      	b.n	800b2c4 <__libc_init_array+0xc>
 800b2e6:	f855 3b04 	ldr.w	r3, [r5], #4
 800b2ea:	4798      	blx	r3
 800b2ec:	3601      	adds	r6, #1
 800b2ee:	e7f2      	b.n	800b2d6 <__libc_init_array+0x1e>
 800b2f0:	0800d430 	.word	0x0800d430
 800b2f4:	0800d430 	.word	0x0800d430
 800b2f8:	0800d430 	.word	0x0800d430
 800b2fc:	0800d434 	.word	0x0800d434

0800b300 <__retarget_lock_init_recursive>:
 800b300:	4770      	bx	lr

0800b302 <__retarget_lock_acquire_recursive>:
 800b302:	4770      	bx	lr

0800b304 <__retarget_lock_release_recursive>:
 800b304:	4770      	bx	lr

0800b306 <quorem>:
 800b306:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b30a:	6903      	ldr	r3, [r0, #16]
 800b30c:	690c      	ldr	r4, [r1, #16]
 800b30e:	42a3      	cmp	r3, r4
 800b310:	4607      	mov	r7, r0
 800b312:	db7e      	blt.n	800b412 <quorem+0x10c>
 800b314:	3c01      	subs	r4, #1
 800b316:	f101 0814 	add.w	r8, r1, #20
 800b31a:	00a3      	lsls	r3, r4, #2
 800b31c:	f100 0514 	add.w	r5, r0, #20
 800b320:	9300      	str	r3, [sp, #0]
 800b322:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800b326:	9301      	str	r3, [sp, #4]
 800b328:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800b32c:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800b330:	3301      	adds	r3, #1
 800b332:	429a      	cmp	r2, r3
 800b334:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800b338:	fbb2 f6f3 	udiv	r6, r2, r3
 800b33c:	d32e      	bcc.n	800b39c <quorem+0x96>
 800b33e:	f04f 0a00 	mov.w	sl, #0
 800b342:	46c4      	mov	ip, r8
 800b344:	46ae      	mov	lr, r5
 800b346:	46d3      	mov	fp, sl
 800b348:	f85c 3b04 	ldr.w	r3, [ip], #4
 800b34c:	b298      	uxth	r0, r3
 800b34e:	fb06 a000 	mla	r0, r6, r0, sl
 800b352:	0c02      	lsrs	r2, r0, #16
 800b354:	0c1b      	lsrs	r3, r3, #16
 800b356:	fb06 2303 	mla	r3, r6, r3, r2
 800b35a:	f8de 2000 	ldr.w	r2, [lr]
 800b35e:	b280      	uxth	r0, r0
 800b360:	b292      	uxth	r2, r2
 800b362:	1a12      	subs	r2, r2, r0
 800b364:	445a      	add	r2, fp
 800b366:	f8de 0000 	ldr.w	r0, [lr]
 800b36a:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800b36e:	b29b      	uxth	r3, r3
 800b370:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 800b374:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 800b378:	b292      	uxth	r2, r2
 800b37a:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 800b37e:	45e1      	cmp	r9, ip
 800b380:	f84e 2b04 	str.w	r2, [lr], #4
 800b384:	ea4f 4b23 	mov.w	fp, r3, asr #16
 800b388:	d2de      	bcs.n	800b348 <quorem+0x42>
 800b38a:	9b00      	ldr	r3, [sp, #0]
 800b38c:	58eb      	ldr	r3, [r5, r3]
 800b38e:	b92b      	cbnz	r3, 800b39c <quorem+0x96>
 800b390:	9b01      	ldr	r3, [sp, #4]
 800b392:	3b04      	subs	r3, #4
 800b394:	429d      	cmp	r5, r3
 800b396:	461a      	mov	r2, r3
 800b398:	d32f      	bcc.n	800b3fa <quorem+0xf4>
 800b39a:	613c      	str	r4, [r7, #16]
 800b39c:	4638      	mov	r0, r7
 800b39e:	f001 f979 	bl	800c694 <__mcmp>
 800b3a2:	2800      	cmp	r0, #0
 800b3a4:	db25      	blt.n	800b3f2 <quorem+0xec>
 800b3a6:	4629      	mov	r1, r5
 800b3a8:	2000      	movs	r0, #0
 800b3aa:	f858 2b04 	ldr.w	r2, [r8], #4
 800b3ae:	f8d1 c000 	ldr.w	ip, [r1]
 800b3b2:	fa1f fe82 	uxth.w	lr, r2
 800b3b6:	fa1f f38c 	uxth.w	r3, ip
 800b3ba:	eba3 030e 	sub.w	r3, r3, lr
 800b3be:	4403      	add	r3, r0
 800b3c0:	0c12      	lsrs	r2, r2, #16
 800b3c2:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 800b3c6:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 800b3ca:	b29b      	uxth	r3, r3
 800b3cc:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800b3d0:	45c1      	cmp	r9, r8
 800b3d2:	f841 3b04 	str.w	r3, [r1], #4
 800b3d6:	ea4f 4022 	mov.w	r0, r2, asr #16
 800b3da:	d2e6      	bcs.n	800b3aa <quorem+0xa4>
 800b3dc:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800b3e0:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800b3e4:	b922      	cbnz	r2, 800b3f0 <quorem+0xea>
 800b3e6:	3b04      	subs	r3, #4
 800b3e8:	429d      	cmp	r5, r3
 800b3ea:	461a      	mov	r2, r3
 800b3ec:	d30b      	bcc.n	800b406 <quorem+0x100>
 800b3ee:	613c      	str	r4, [r7, #16]
 800b3f0:	3601      	adds	r6, #1
 800b3f2:	4630      	mov	r0, r6
 800b3f4:	b003      	add	sp, #12
 800b3f6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b3fa:	6812      	ldr	r2, [r2, #0]
 800b3fc:	3b04      	subs	r3, #4
 800b3fe:	2a00      	cmp	r2, #0
 800b400:	d1cb      	bne.n	800b39a <quorem+0x94>
 800b402:	3c01      	subs	r4, #1
 800b404:	e7c6      	b.n	800b394 <quorem+0x8e>
 800b406:	6812      	ldr	r2, [r2, #0]
 800b408:	3b04      	subs	r3, #4
 800b40a:	2a00      	cmp	r2, #0
 800b40c:	d1ef      	bne.n	800b3ee <quorem+0xe8>
 800b40e:	3c01      	subs	r4, #1
 800b410:	e7ea      	b.n	800b3e8 <quorem+0xe2>
 800b412:	2000      	movs	r0, #0
 800b414:	e7ee      	b.n	800b3f4 <quorem+0xee>
	...

0800b418 <_dtoa_r>:
 800b418:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b41c:	69c7      	ldr	r7, [r0, #28]
 800b41e:	b099      	sub	sp, #100	@ 0x64
 800b420:	ed8d 0b02 	vstr	d0, [sp, #8]
 800b424:	ec55 4b10 	vmov	r4, r5, d0
 800b428:	9e22      	ldr	r6, [sp, #136]	@ 0x88
 800b42a:	9109      	str	r1, [sp, #36]	@ 0x24
 800b42c:	4683      	mov	fp, r0
 800b42e:	920e      	str	r2, [sp, #56]	@ 0x38
 800b430:	9313      	str	r3, [sp, #76]	@ 0x4c
 800b432:	b97f      	cbnz	r7, 800b454 <_dtoa_r+0x3c>
 800b434:	2010      	movs	r0, #16
 800b436:	f000 fdfd 	bl	800c034 <malloc>
 800b43a:	4602      	mov	r2, r0
 800b43c:	f8cb 001c 	str.w	r0, [fp, #28]
 800b440:	b920      	cbnz	r0, 800b44c <_dtoa_r+0x34>
 800b442:	4ba7      	ldr	r3, [pc, #668]	@ (800b6e0 <_dtoa_r+0x2c8>)
 800b444:	21ef      	movs	r1, #239	@ 0xef
 800b446:	48a7      	ldr	r0, [pc, #668]	@ (800b6e4 <_dtoa_r+0x2cc>)
 800b448:	f001 faf6 	bl	800ca38 <__assert_func>
 800b44c:	e9c0 7701 	strd	r7, r7, [r0, #4]
 800b450:	6007      	str	r7, [r0, #0]
 800b452:	60c7      	str	r7, [r0, #12]
 800b454:	f8db 301c 	ldr.w	r3, [fp, #28]
 800b458:	6819      	ldr	r1, [r3, #0]
 800b45a:	b159      	cbz	r1, 800b474 <_dtoa_r+0x5c>
 800b45c:	685a      	ldr	r2, [r3, #4]
 800b45e:	604a      	str	r2, [r1, #4]
 800b460:	2301      	movs	r3, #1
 800b462:	4093      	lsls	r3, r2
 800b464:	608b      	str	r3, [r1, #8]
 800b466:	4658      	mov	r0, fp
 800b468:	f000 feda 	bl	800c220 <_Bfree>
 800b46c:	f8db 301c 	ldr.w	r3, [fp, #28]
 800b470:	2200      	movs	r2, #0
 800b472:	601a      	str	r2, [r3, #0]
 800b474:	1e2b      	subs	r3, r5, #0
 800b476:	bfb9      	ittee	lt
 800b478:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 800b47c:	9303      	strlt	r3, [sp, #12]
 800b47e:	2300      	movge	r3, #0
 800b480:	6033      	strge	r3, [r6, #0]
 800b482:	9f03      	ldr	r7, [sp, #12]
 800b484:	4b98      	ldr	r3, [pc, #608]	@ (800b6e8 <_dtoa_r+0x2d0>)
 800b486:	bfbc      	itt	lt
 800b488:	2201      	movlt	r2, #1
 800b48a:	6032      	strlt	r2, [r6, #0]
 800b48c:	43bb      	bics	r3, r7
 800b48e:	d112      	bne.n	800b4b6 <_dtoa_r+0x9e>
 800b490:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 800b492:	f242 730f 	movw	r3, #9999	@ 0x270f
 800b496:	6013      	str	r3, [r2, #0]
 800b498:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800b49c:	4323      	orrs	r3, r4
 800b49e:	f000 854d 	beq.w	800bf3c <_dtoa_r+0xb24>
 800b4a2:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800b4a4:	f8df a254 	ldr.w	sl, [pc, #596]	@ 800b6fc <_dtoa_r+0x2e4>
 800b4a8:	2b00      	cmp	r3, #0
 800b4aa:	f000 854f 	beq.w	800bf4c <_dtoa_r+0xb34>
 800b4ae:	f10a 0303 	add.w	r3, sl, #3
 800b4b2:	f000 bd49 	b.w	800bf48 <_dtoa_r+0xb30>
 800b4b6:	ed9d 7b02 	vldr	d7, [sp, #8]
 800b4ba:	2200      	movs	r2, #0
 800b4bc:	ec51 0b17 	vmov	r0, r1, d7
 800b4c0:	2300      	movs	r3, #0
 800b4c2:	ed8d 7b0c 	vstr	d7, [sp, #48]	@ 0x30
 800b4c6:	f7f5 fb27 	bl	8000b18 <__aeabi_dcmpeq>
 800b4ca:	4680      	mov	r8, r0
 800b4cc:	b158      	cbz	r0, 800b4e6 <_dtoa_r+0xce>
 800b4ce:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 800b4d0:	2301      	movs	r3, #1
 800b4d2:	6013      	str	r3, [r2, #0]
 800b4d4:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800b4d6:	b113      	cbz	r3, 800b4de <_dtoa_r+0xc6>
 800b4d8:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 800b4da:	4b84      	ldr	r3, [pc, #528]	@ (800b6ec <_dtoa_r+0x2d4>)
 800b4dc:	6013      	str	r3, [r2, #0]
 800b4de:	f8df a220 	ldr.w	sl, [pc, #544]	@ 800b700 <_dtoa_r+0x2e8>
 800b4e2:	f000 bd33 	b.w	800bf4c <_dtoa_r+0xb34>
 800b4e6:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 800b4ea:	aa16      	add	r2, sp, #88	@ 0x58
 800b4ec:	a917      	add	r1, sp, #92	@ 0x5c
 800b4ee:	4658      	mov	r0, fp
 800b4f0:	f001 f980 	bl	800c7f4 <__d2b>
 800b4f4:	f3c7 560a 	ubfx	r6, r7, #20, #11
 800b4f8:	4681      	mov	r9, r0
 800b4fa:	2e00      	cmp	r6, #0
 800b4fc:	d077      	beq.n	800b5ee <_dtoa_r+0x1d6>
 800b4fe:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800b500:	f8cd 8050 	str.w	r8, [sp, #80]	@ 0x50
 800b504:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800b508:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800b50c:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 800b510:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 800b514:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 800b518:	4619      	mov	r1, r3
 800b51a:	2200      	movs	r2, #0
 800b51c:	4b74      	ldr	r3, [pc, #464]	@ (800b6f0 <_dtoa_r+0x2d8>)
 800b51e:	f7f4 fedb 	bl	80002d8 <__aeabi_dsub>
 800b522:	a369      	add	r3, pc, #420	@ (adr r3, 800b6c8 <_dtoa_r+0x2b0>)
 800b524:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b528:	f7f5 f88e 	bl	8000648 <__aeabi_dmul>
 800b52c:	a368      	add	r3, pc, #416	@ (adr r3, 800b6d0 <_dtoa_r+0x2b8>)
 800b52e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b532:	f7f4 fed3 	bl	80002dc <__adddf3>
 800b536:	4604      	mov	r4, r0
 800b538:	4630      	mov	r0, r6
 800b53a:	460d      	mov	r5, r1
 800b53c:	f7f5 f81a 	bl	8000574 <__aeabi_i2d>
 800b540:	a365      	add	r3, pc, #404	@ (adr r3, 800b6d8 <_dtoa_r+0x2c0>)
 800b542:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b546:	f7f5 f87f 	bl	8000648 <__aeabi_dmul>
 800b54a:	4602      	mov	r2, r0
 800b54c:	460b      	mov	r3, r1
 800b54e:	4620      	mov	r0, r4
 800b550:	4629      	mov	r1, r5
 800b552:	f7f4 fec3 	bl	80002dc <__adddf3>
 800b556:	4604      	mov	r4, r0
 800b558:	460d      	mov	r5, r1
 800b55a:	f7f5 fb25 	bl	8000ba8 <__aeabi_d2iz>
 800b55e:	2200      	movs	r2, #0
 800b560:	4607      	mov	r7, r0
 800b562:	2300      	movs	r3, #0
 800b564:	4620      	mov	r0, r4
 800b566:	4629      	mov	r1, r5
 800b568:	f7f5 fae0 	bl	8000b2c <__aeabi_dcmplt>
 800b56c:	b140      	cbz	r0, 800b580 <_dtoa_r+0x168>
 800b56e:	4638      	mov	r0, r7
 800b570:	f7f5 f800 	bl	8000574 <__aeabi_i2d>
 800b574:	4622      	mov	r2, r4
 800b576:	462b      	mov	r3, r5
 800b578:	f7f5 face 	bl	8000b18 <__aeabi_dcmpeq>
 800b57c:	b900      	cbnz	r0, 800b580 <_dtoa_r+0x168>
 800b57e:	3f01      	subs	r7, #1
 800b580:	2f16      	cmp	r7, #22
 800b582:	d851      	bhi.n	800b628 <_dtoa_r+0x210>
 800b584:	4b5b      	ldr	r3, [pc, #364]	@ (800b6f4 <_dtoa_r+0x2dc>)
 800b586:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800b58a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b58e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800b592:	f7f5 facb 	bl	8000b2c <__aeabi_dcmplt>
 800b596:	2800      	cmp	r0, #0
 800b598:	d048      	beq.n	800b62c <_dtoa_r+0x214>
 800b59a:	3f01      	subs	r7, #1
 800b59c:	2300      	movs	r3, #0
 800b59e:	9312      	str	r3, [sp, #72]	@ 0x48
 800b5a0:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 800b5a2:	1b9b      	subs	r3, r3, r6
 800b5a4:	1e5a      	subs	r2, r3, #1
 800b5a6:	bf44      	itt	mi
 800b5a8:	f1c3 0801 	rsbmi	r8, r3, #1
 800b5ac:	2300      	movmi	r3, #0
 800b5ae:	9208      	str	r2, [sp, #32]
 800b5b0:	bf54      	ite	pl
 800b5b2:	f04f 0800 	movpl.w	r8, #0
 800b5b6:	9308      	strmi	r3, [sp, #32]
 800b5b8:	2f00      	cmp	r7, #0
 800b5ba:	db39      	blt.n	800b630 <_dtoa_r+0x218>
 800b5bc:	9b08      	ldr	r3, [sp, #32]
 800b5be:	970f      	str	r7, [sp, #60]	@ 0x3c
 800b5c0:	443b      	add	r3, r7
 800b5c2:	9308      	str	r3, [sp, #32]
 800b5c4:	2300      	movs	r3, #0
 800b5c6:	930a      	str	r3, [sp, #40]	@ 0x28
 800b5c8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b5ca:	2b09      	cmp	r3, #9
 800b5cc:	d864      	bhi.n	800b698 <_dtoa_r+0x280>
 800b5ce:	2b05      	cmp	r3, #5
 800b5d0:	bfc4      	itt	gt
 800b5d2:	3b04      	subgt	r3, #4
 800b5d4:	9309      	strgt	r3, [sp, #36]	@ 0x24
 800b5d6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b5d8:	f1a3 0302 	sub.w	r3, r3, #2
 800b5dc:	bfcc      	ite	gt
 800b5de:	2400      	movgt	r4, #0
 800b5e0:	2401      	movle	r4, #1
 800b5e2:	2b03      	cmp	r3, #3
 800b5e4:	d863      	bhi.n	800b6ae <_dtoa_r+0x296>
 800b5e6:	e8df f003 	tbb	[pc, r3]
 800b5ea:	372a      	.short	0x372a
 800b5ec:	5535      	.short	0x5535
 800b5ee:	e9dd 6316 	ldrd	r6, r3, [sp, #88]	@ 0x58
 800b5f2:	441e      	add	r6, r3
 800b5f4:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 800b5f8:	2b20      	cmp	r3, #32
 800b5fa:	bfc1      	itttt	gt
 800b5fc:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 800b600:	409f      	lslgt	r7, r3
 800b602:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 800b606:	fa24 f303 	lsrgt.w	r3, r4, r3
 800b60a:	bfd6      	itet	le
 800b60c:	f1c3 0320 	rsble	r3, r3, #32
 800b610:	ea47 0003 	orrgt.w	r0, r7, r3
 800b614:	fa04 f003 	lslle.w	r0, r4, r3
 800b618:	f7f4 ff9c 	bl	8000554 <__aeabi_ui2d>
 800b61c:	2201      	movs	r2, #1
 800b61e:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 800b622:	3e01      	subs	r6, #1
 800b624:	9214      	str	r2, [sp, #80]	@ 0x50
 800b626:	e777      	b.n	800b518 <_dtoa_r+0x100>
 800b628:	2301      	movs	r3, #1
 800b62a:	e7b8      	b.n	800b59e <_dtoa_r+0x186>
 800b62c:	9012      	str	r0, [sp, #72]	@ 0x48
 800b62e:	e7b7      	b.n	800b5a0 <_dtoa_r+0x188>
 800b630:	427b      	negs	r3, r7
 800b632:	930a      	str	r3, [sp, #40]	@ 0x28
 800b634:	2300      	movs	r3, #0
 800b636:	eba8 0807 	sub.w	r8, r8, r7
 800b63a:	930f      	str	r3, [sp, #60]	@ 0x3c
 800b63c:	e7c4      	b.n	800b5c8 <_dtoa_r+0x1b0>
 800b63e:	2300      	movs	r3, #0
 800b640:	930b      	str	r3, [sp, #44]	@ 0x2c
 800b642:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800b644:	2b00      	cmp	r3, #0
 800b646:	dc35      	bgt.n	800b6b4 <_dtoa_r+0x29c>
 800b648:	2301      	movs	r3, #1
 800b64a:	9300      	str	r3, [sp, #0]
 800b64c:	9307      	str	r3, [sp, #28]
 800b64e:	461a      	mov	r2, r3
 800b650:	920e      	str	r2, [sp, #56]	@ 0x38
 800b652:	e00b      	b.n	800b66c <_dtoa_r+0x254>
 800b654:	2301      	movs	r3, #1
 800b656:	e7f3      	b.n	800b640 <_dtoa_r+0x228>
 800b658:	2300      	movs	r3, #0
 800b65a:	930b      	str	r3, [sp, #44]	@ 0x2c
 800b65c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800b65e:	18fb      	adds	r3, r7, r3
 800b660:	9300      	str	r3, [sp, #0]
 800b662:	3301      	adds	r3, #1
 800b664:	2b01      	cmp	r3, #1
 800b666:	9307      	str	r3, [sp, #28]
 800b668:	bfb8      	it	lt
 800b66a:	2301      	movlt	r3, #1
 800b66c:	f8db 001c 	ldr.w	r0, [fp, #28]
 800b670:	2100      	movs	r1, #0
 800b672:	2204      	movs	r2, #4
 800b674:	f102 0514 	add.w	r5, r2, #20
 800b678:	429d      	cmp	r5, r3
 800b67a:	d91f      	bls.n	800b6bc <_dtoa_r+0x2a4>
 800b67c:	6041      	str	r1, [r0, #4]
 800b67e:	4658      	mov	r0, fp
 800b680:	f000 fd8e 	bl	800c1a0 <_Balloc>
 800b684:	4682      	mov	sl, r0
 800b686:	2800      	cmp	r0, #0
 800b688:	d13c      	bne.n	800b704 <_dtoa_r+0x2ec>
 800b68a:	4b1b      	ldr	r3, [pc, #108]	@ (800b6f8 <_dtoa_r+0x2e0>)
 800b68c:	4602      	mov	r2, r0
 800b68e:	f240 11af 	movw	r1, #431	@ 0x1af
 800b692:	e6d8      	b.n	800b446 <_dtoa_r+0x2e>
 800b694:	2301      	movs	r3, #1
 800b696:	e7e0      	b.n	800b65a <_dtoa_r+0x242>
 800b698:	2401      	movs	r4, #1
 800b69a:	2300      	movs	r3, #0
 800b69c:	9309      	str	r3, [sp, #36]	@ 0x24
 800b69e:	940b      	str	r4, [sp, #44]	@ 0x2c
 800b6a0:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800b6a4:	9300      	str	r3, [sp, #0]
 800b6a6:	9307      	str	r3, [sp, #28]
 800b6a8:	2200      	movs	r2, #0
 800b6aa:	2312      	movs	r3, #18
 800b6ac:	e7d0      	b.n	800b650 <_dtoa_r+0x238>
 800b6ae:	2301      	movs	r3, #1
 800b6b0:	930b      	str	r3, [sp, #44]	@ 0x2c
 800b6b2:	e7f5      	b.n	800b6a0 <_dtoa_r+0x288>
 800b6b4:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800b6b6:	9300      	str	r3, [sp, #0]
 800b6b8:	9307      	str	r3, [sp, #28]
 800b6ba:	e7d7      	b.n	800b66c <_dtoa_r+0x254>
 800b6bc:	3101      	adds	r1, #1
 800b6be:	0052      	lsls	r2, r2, #1
 800b6c0:	e7d8      	b.n	800b674 <_dtoa_r+0x25c>
 800b6c2:	bf00      	nop
 800b6c4:	f3af 8000 	nop.w
 800b6c8:	636f4361 	.word	0x636f4361
 800b6cc:	3fd287a7 	.word	0x3fd287a7
 800b6d0:	8b60c8b3 	.word	0x8b60c8b3
 800b6d4:	3fc68a28 	.word	0x3fc68a28
 800b6d8:	509f79fb 	.word	0x509f79fb
 800b6dc:	3fd34413 	.word	0x3fd34413
 800b6e0:	0800d0f9 	.word	0x0800d0f9
 800b6e4:	0800d110 	.word	0x0800d110
 800b6e8:	7ff00000 	.word	0x7ff00000
 800b6ec:	0800d0c9 	.word	0x0800d0c9
 800b6f0:	3ff80000 	.word	0x3ff80000
 800b6f4:	0800d208 	.word	0x0800d208
 800b6f8:	0800d168 	.word	0x0800d168
 800b6fc:	0800d0f5 	.word	0x0800d0f5
 800b700:	0800d0c8 	.word	0x0800d0c8
 800b704:	f8db 301c 	ldr.w	r3, [fp, #28]
 800b708:	6018      	str	r0, [r3, #0]
 800b70a:	9b07      	ldr	r3, [sp, #28]
 800b70c:	2b0e      	cmp	r3, #14
 800b70e:	f200 80a4 	bhi.w	800b85a <_dtoa_r+0x442>
 800b712:	2c00      	cmp	r4, #0
 800b714:	f000 80a1 	beq.w	800b85a <_dtoa_r+0x442>
 800b718:	2f00      	cmp	r7, #0
 800b71a:	dd33      	ble.n	800b784 <_dtoa_r+0x36c>
 800b71c:	4bad      	ldr	r3, [pc, #692]	@ (800b9d4 <_dtoa_r+0x5bc>)
 800b71e:	f007 020f 	and.w	r2, r7, #15
 800b722:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800b726:	ed93 7b00 	vldr	d7, [r3]
 800b72a:	05f8      	lsls	r0, r7, #23
 800b72c:	ed8d 7b04 	vstr	d7, [sp, #16]
 800b730:	ea4f 1427 	mov.w	r4, r7, asr #4
 800b734:	d516      	bpl.n	800b764 <_dtoa_r+0x34c>
 800b736:	4ba8      	ldr	r3, [pc, #672]	@ (800b9d8 <_dtoa_r+0x5c0>)
 800b738:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800b73c:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800b740:	f7f5 f8ac 	bl	800089c <__aeabi_ddiv>
 800b744:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800b748:	f004 040f 	and.w	r4, r4, #15
 800b74c:	2603      	movs	r6, #3
 800b74e:	4da2      	ldr	r5, [pc, #648]	@ (800b9d8 <_dtoa_r+0x5c0>)
 800b750:	b954      	cbnz	r4, 800b768 <_dtoa_r+0x350>
 800b752:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800b756:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800b75a:	f7f5 f89f 	bl	800089c <__aeabi_ddiv>
 800b75e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800b762:	e028      	b.n	800b7b6 <_dtoa_r+0x39e>
 800b764:	2602      	movs	r6, #2
 800b766:	e7f2      	b.n	800b74e <_dtoa_r+0x336>
 800b768:	07e1      	lsls	r1, r4, #31
 800b76a:	d508      	bpl.n	800b77e <_dtoa_r+0x366>
 800b76c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800b770:	e9d5 2300 	ldrd	r2, r3, [r5]
 800b774:	f7f4 ff68 	bl	8000648 <__aeabi_dmul>
 800b778:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800b77c:	3601      	adds	r6, #1
 800b77e:	1064      	asrs	r4, r4, #1
 800b780:	3508      	adds	r5, #8
 800b782:	e7e5      	b.n	800b750 <_dtoa_r+0x338>
 800b784:	f000 80d2 	beq.w	800b92c <_dtoa_r+0x514>
 800b788:	427c      	negs	r4, r7
 800b78a:	4b92      	ldr	r3, [pc, #584]	@ (800b9d4 <_dtoa_r+0x5bc>)
 800b78c:	4d92      	ldr	r5, [pc, #584]	@ (800b9d8 <_dtoa_r+0x5c0>)
 800b78e:	f004 020f 	and.w	r2, r4, #15
 800b792:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800b796:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b79a:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800b79e:	f7f4 ff53 	bl	8000648 <__aeabi_dmul>
 800b7a2:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800b7a6:	1124      	asrs	r4, r4, #4
 800b7a8:	2300      	movs	r3, #0
 800b7aa:	2602      	movs	r6, #2
 800b7ac:	2c00      	cmp	r4, #0
 800b7ae:	f040 80b2 	bne.w	800b916 <_dtoa_r+0x4fe>
 800b7b2:	2b00      	cmp	r3, #0
 800b7b4:	d1d3      	bne.n	800b75e <_dtoa_r+0x346>
 800b7b6:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800b7b8:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 800b7bc:	2b00      	cmp	r3, #0
 800b7be:	f000 80b7 	beq.w	800b930 <_dtoa_r+0x518>
 800b7c2:	4b86      	ldr	r3, [pc, #536]	@ (800b9dc <_dtoa_r+0x5c4>)
 800b7c4:	2200      	movs	r2, #0
 800b7c6:	4620      	mov	r0, r4
 800b7c8:	4629      	mov	r1, r5
 800b7ca:	f7f5 f9af 	bl	8000b2c <__aeabi_dcmplt>
 800b7ce:	2800      	cmp	r0, #0
 800b7d0:	f000 80ae 	beq.w	800b930 <_dtoa_r+0x518>
 800b7d4:	9b07      	ldr	r3, [sp, #28]
 800b7d6:	2b00      	cmp	r3, #0
 800b7d8:	f000 80aa 	beq.w	800b930 <_dtoa_r+0x518>
 800b7dc:	9b00      	ldr	r3, [sp, #0]
 800b7de:	2b00      	cmp	r3, #0
 800b7e0:	dd37      	ble.n	800b852 <_dtoa_r+0x43a>
 800b7e2:	1e7b      	subs	r3, r7, #1
 800b7e4:	9304      	str	r3, [sp, #16]
 800b7e6:	4620      	mov	r0, r4
 800b7e8:	4b7d      	ldr	r3, [pc, #500]	@ (800b9e0 <_dtoa_r+0x5c8>)
 800b7ea:	2200      	movs	r2, #0
 800b7ec:	4629      	mov	r1, r5
 800b7ee:	f7f4 ff2b 	bl	8000648 <__aeabi_dmul>
 800b7f2:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800b7f6:	9c00      	ldr	r4, [sp, #0]
 800b7f8:	3601      	adds	r6, #1
 800b7fa:	4630      	mov	r0, r6
 800b7fc:	f7f4 feba 	bl	8000574 <__aeabi_i2d>
 800b800:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800b804:	f7f4 ff20 	bl	8000648 <__aeabi_dmul>
 800b808:	4b76      	ldr	r3, [pc, #472]	@ (800b9e4 <_dtoa_r+0x5cc>)
 800b80a:	2200      	movs	r2, #0
 800b80c:	f7f4 fd66 	bl	80002dc <__adddf3>
 800b810:	4605      	mov	r5, r0
 800b812:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 800b816:	2c00      	cmp	r4, #0
 800b818:	f040 808d 	bne.w	800b936 <_dtoa_r+0x51e>
 800b81c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800b820:	4b71      	ldr	r3, [pc, #452]	@ (800b9e8 <_dtoa_r+0x5d0>)
 800b822:	2200      	movs	r2, #0
 800b824:	f7f4 fd58 	bl	80002d8 <__aeabi_dsub>
 800b828:	4602      	mov	r2, r0
 800b82a:	460b      	mov	r3, r1
 800b82c:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800b830:	462a      	mov	r2, r5
 800b832:	4633      	mov	r3, r6
 800b834:	f7f5 f998 	bl	8000b68 <__aeabi_dcmpgt>
 800b838:	2800      	cmp	r0, #0
 800b83a:	f040 828b 	bne.w	800bd54 <_dtoa_r+0x93c>
 800b83e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800b842:	462a      	mov	r2, r5
 800b844:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 800b848:	f7f5 f970 	bl	8000b2c <__aeabi_dcmplt>
 800b84c:	2800      	cmp	r0, #0
 800b84e:	f040 8128 	bne.w	800baa2 <_dtoa_r+0x68a>
 800b852:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 800b856:	e9cd 3402 	strd	r3, r4, [sp, #8]
 800b85a:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800b85c:	2b00      	cmp	r3, #0
 800b85e:	f2c0 815a 	blt.w	800bb16 <_dtoa_r+0x6fe>
 800b862:	2f0e      	cmp	r7, #14
 800b864:	f300 8157 	bgt.w	800bb16 <_dtoa_r+0x6fe>
 800b868:	4b5a      	ldr	r3, [pc, #360]	@ (800b9d4 <_dtoa_r+0x5bc>)
 800b86a:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800b86e:	ed93 7b00 	vldr	d7, [r3]
 800b872:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800b874:	2b00      	cmp	r3, #0
 800b876:	ed8d 7b00 	vstr	d7, [sp]
 800b87a:	da03      	bge.n	800b884 <_dtoa_r+0x46c>
 800b87c:	9b07      	ldr	r3, [sp, #28]
 800b87e:	2b00      	cmp	r3, #0
 800b880:	f340 8101 	ble.w	800ba86 <_dtoa_r+0x66e>
 800b884:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 800b888:	4656      	mov	r6, sl
 800b88a:	e9dd 2300 	ldrd	r2, r3, [sp]
 800b88e:	4620      	mov	r0, r4
 800b890:	4629      	mov	r1, r5
 800b892:	f7f5 f803 	bl	800089c <__aeabi_ddiv>
 800b896:	f7f5 f987 	bl	8000ba8 <__aeabi_d2iz>
 800b89a:	4680      	mov	r8, r0
 800b89c:	f7f4 fe6a 	bl	8000574 <__aeabi_i2d>
 800b8a0:	e9dd 2300 	ldrd	r2, r3, [sp]
 800b8a4:	f7f4 fed0 	bl	8000648 <__aeabi_dmul>
 800b8a8:	4602      	mov	r2, r0
 800b8aa:	460b      	mov	r3, r1
 800b8ac:	4620      	mov	r0, r4
 800b8ae:	4629      	mov	r1, r5
 800b8b0:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 800b8b4:	f7f4 fd10 	bl	80002d8 <__aeabi_dsub>
 800b8b8:	f806 4b01 	strb.w	r4, [r6], #1
 800b8bc:	9d07      	ldr	r5, [sp, #28]
 800b8be:	eba6 040a 	sub.w	r4, r6, sl
 800b8c2:	42a5      	cmp	r5, r4
 800b8c4:	4602      	mov	r2, r0
 800b8c6:	460b      	mov	r3, r1
 800b8c8:	f040 8117 	bne.w	800bafa <_dtoa_r+0x6e2>
 800b8cc:	f7f4 fd06 	bl	80002dc <__adddf3>
 800b8d0:	e9dd 2300 	ldrd	r2, r3, [sp]
 800b8d4:	4604      	mov	r4, r0
 800b8d6:	460d      	mov	r5, r1
 800b8d8:	f7f5 f946 	bl	8000b68 <__aeabi_dcmpgt>
 800b8dc:	2800      	cmp	r0, #0
 800b8de:	f040 80f9 	bne.w	800bad4 <_dtoa_r+0x6bc>
 800b8e2:	e9dd 2300 	ldrd	r2, r3, [sp]
 800b8e6:	4620      	mov	r0, r4
 800b8e8:	4629      	mov	r1, r5
 800b8ea:	f7f5 f915 	bl	8000b18 <__aeabi_dcmpeq>
 800b8ee:	b118      	cbz	r0, 800b8f8 <_dtoa_r+0x4e0>
 800b8f0:	f018 0f01 	tst.w	r8, #1
 800b8f4:	f040 80ee 	bne.w	800bad4 <_dtoa_r+0x6bc>
 800b8f8:	4649      	mov	r1, r9
 800b8fa:	4658      	mov	r0, fp
 800b8fc:	f000 fc90 	bl	800c220 <_Bfree>
 800b900:	2300      	movs	r3, #0
 800b902:	7033      	strb	r3, [r6, #0]
 800b904:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800b906:	3701      	adds	r7, #1
 800b908:	601f      	str	r7, [r3, #0]
 800b90a:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800b90c:	2b00      	cmp	r3, #0
 800b90e:	f000 831d 	beq.w	800bf4c <_dtoa_r+0xb34>
 800b912:	601e      	str	r6, [r3, #0]
 800b914:	e31a      	b.n	800bf4c <_dtoa_r+0xb34>
 800b916:	07e2      	lsls	r2, r4, #31
 800b918:	d505      	bpl.n	800b926 <_dtoa_r+0x50e>
 800b91a:	e9d5 2300 	ldrd	r2, r3, [r5]
 800b91e:	f7f4 fe93 	bl	8000648 <__aeabi_dmul>
 800b922:	3601      	adds	r6, #1
 800b924:	2301      	movs	r3, #1
 800b926:	1064      	asrs	r4, r4, #1
 800b928:	3508      	adds	r5, #8
 800b92a:	e73f      	b.n	800b7ac <_dtoa_r+0x394>
 800b92c:	2602      	movs	r6, #2
 800b92e:	e742      	b.n	800b7b6 <_dtoa_r+0x39e>
 800b930:	9c07      	ldr	r4, [sp, #28]
 800b932:	9704      	str	r7, [sp, #16]
 800b934:	e761      	b.n	800b7fa <_dtoa_r+0x3e2>
 800b936:	4b27      	ldr	r3, [pc, #156]	@ (800b9d4 <_dtoa_r+0x5bc>)
 800b938:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800b93a:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800b93e:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800b942:	4454      	add	r4, sl
 800b944:	2900      	cmp	r1, #0
 800b946:	d053      	beq.n	800b9f0 <_dtoa_r+0x5d8>
 800b948:	4928      	ldr	r1, [pc, #160]	@ (800b9ec <_dtoa_r+0x5d4>)
 800b94a:	2000      	movs	r0, #0
 800b94c:	f7f4 ffa6 	bl	800089c <__aeabi_ddiv>
 800b950:	4633      	mov	r3, r6
 800b952:	462a      	mov	r2, r5
 800b954:	f7f4 fcc0 	bl	80002d8 <__aeabi_dsub>
 800b958:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800b95c:	4656      	mov	r6, sl
 800b95e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800b962:	f7f5 f921 	bl	8000ba8 <__aeabi_d2iz>
 800b966:	4605      	mov	r5, r0
 800b968:	f7f4 fe04 	bl	8000574 <__aeabi_i2d>
 800b96c:	4602      	mov	r2, r0
 800b96e:	460b      	mov	r3, r1
 800b970:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800b974:	f7f4 fcb0 	bl	80002d8 <__aeabi_dsub>
 800b978:	3530      	adds	r5, #48	@ 0x30
 800b97a:	4602      	mov	r2, r0
 800b97c:	460b      	mov	r3, r1
 800b97e:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800b982:	f806 5b01 	strb.w	r5, [r6], #1
 800b986:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800b98a:	f7f5 f8cf 	bl	8000b2c <__aeabi_dcmplt>
 800b98e:	2800      	cmp	r0, #0
 800b990:	d171      	bne.n	800ba76 <_dtoa_r+0x65e>
 800b992:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800b996:	4911      	ldr	r1, [pc, #68]	@ (800b9dc <_dtoa_r+0x5c4>)
 800b998:	2000      	movs	r0, #0
 800b99a:	f7f4 fc9d 	bl	80002d8 <__aeabi_dsub>
 800b99e:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800b9a2:	f7f5 f8c3 	bl	8000b2c <__aeabi_dcmplt>
 800b9a6:	2800      	cmp	r0, #0
 800b9a8:	f040 8095 	bne.w	800bad6 <_dtoa_r+0x6be>
 800b9ac:	42a6      	cmp	r6, r4
 800b9ae:	f43f af50 	beq.w	800b852 <_dtoa_r+0x43a>
 800b9b2:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 800b9b6:	4b0a      	ldr	r3, [pc, #40]	@ (800b9e0 <_dtoa_r+0x5c8>)
 800b9b8:	2200      	movs	r2, #0
 800b9ba:	f7f4 fe45 	bl	8000648 <__aeabi_dmul>
 800b9be:	4b08      	ldr	r3, [pc, #32]	@ (800b9e0 <_dtoa_r+0x5c8>)
 800b9c0:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800b9c4:	2200      	movs	r2, #0
 800b9c6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800b9ca:	f7f4 fe3d 	bl	8000648 <__aeabi_dmul>
 800b9ce:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800b9d2:	e7c4      	b.n	800b95e <_dtoa_r+0x546>
 800b9d4:	0800d208 	.word	0x0800d208
 800b9d8:	0800d1e0 	.word	0x0800d1e0
 800b9dc:	3ff00000 	.word	0x3ff00000
 800b9e0:	40240000 	.word	0x40240000
 800b9e4:	401c0000 	.word	0x401c0000
 800b9e8:	40140000 	.word	0x40140000
 800b9ec:	3fe00000 	.word	0x3fe00000
 800b9f0:	4631      	mov	r1, r6
 800b9f2:	4628      	mov	r0, r5
 800b9f4:	f7f4 fe28 	bl	8000648 <__aeabi_dmul>
 800b9f8:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800b9fc:	9415      	str	r4, [sp, #84]	@ 0x54
 800b9fe:	4656      	mov	r6, sl
 800ba00:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800ba04:	f7f5 f8d0 	bl	8000ba8 <__aeabi_d2iz>
 800ba08:	4605      	mov	r5, r0
 800ba0a:	f7f4 fdb3 	bl	8000574 <__aeabi_i2d>
 800ba0e:	4602      	mov	r2, r0
 800ba10:	460b      	mov	r3, r1
 800ba12:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800ba16:	f7f4 fc5f 	bl	80002d8 <__aeabi_dsub>
 800ba1a:	3530      	adds	r5, #48	@ 0x30
 800ba1c:	f806 5b01 	strb.w	r5, [r6], #1
 800ba20:	4602      	mov	r2, r0
 800ba22:	460b      	mov	r3, r1
 800ba24:	42a6      	cmp	r6, r4
 800ba26:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800ba2a:	f04f 0200 	mov.w	r2, #0
 800ba2e:	d124      	bne.n	800ba7a <_dtoa_r+0x662>
 800ba30:	4bac      	ldr	r3, [pc, #688]	@ (800bce4 <_dtoa_r+0x8cc>)
 800ba32:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 800ba36:	f7f4 fc51 	bl	80002dc <__adddf3>
 800ba3a:	4602      	mov	r2, r0
 800ba3c:	460b      	mov	r3, r1
 800ba3e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800ba42:	f7f5 f891 	bl	8000b68 <__aeabi_dcmpgt>
 800ba46:	2800      	cmp	r0, #0
 800ba48:	d145      	bne.n	800bad6 <_dtoa_r+0x6be>
 800ba4a:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800ba4e:	49a5      	ldr	r1, [pc, #660]	@ (800bce4 <_dtoa_r+0x8cc>)
 800ba50:	2000      	movs	r0, #0
 800ba52:	f7f4 fc41 	bl	80002d8 <__aeabi_dsub>
 800ba56:	4602      	mov	r2, r0
 800ba58:	460b      	mov	r3, r1
 800ba5a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800ba5e:	f7f5 f865 	bl	8000b2c <__aeabi_dcmplt>
 800ba62:	2800      	cmp	r0, #0
 800ba64:	f43f aef5 	beq.w	800b852 <_dtoa_r+0x43a>
 800ba68:	9e15      	ldr	r6, [sp, #84]	@ 0x54
 800ba6a:	1e73      	subs	r3, r6, #1
 800ba6c:	9315      	str	r3, [sp, #84]	@ 0x54
 800ba6e:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800ba72:	2b30      	cmp	r3, #48	@ 0x30
 800ba74:	d0f8      	beq.n	800ba68 <_dtoa_r+0x650>
 800ba76:	9f04      	ldr	r7, [sp, #16]
 800ba78:	e73e      	b.n	800b8f8 <_dtoa_r+0x4e0>
 800ba7a:	4b9b      	ldr	r3, [pc, #620]	@ (800bce8 <_dtoa_r+0x8d0>)
 800ba7c:	f7f4 fde4 	bl	8000648 <__aeabi_dmul>
 800ba80:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800ba84:	e7bc      	b.n	800ba00 <_dtoa_r+0x5e8>
 800ba86:	d10c      	bne.n	800baa2 <_dtoa_r+0x68a>
 800ba88:	4b98      	ldr	r3, [pc, #608]	@ (800bcec <_dtoa_r+0x8d4>)
 800ba8a:	2200      	movs	r2, #0
 800ba8c:	e9dd 0100 	ldrd	r0, r1, [sp]
 800ba90:	f7f4 fdda 	bl	8000648 <__aeabi_dmul>
 800ba94:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800ba98:	f7f5 f85c 	bl	8000b54 <__aeabi_dcmpge>
 800ba9c:	2800      	cmp	r0, #0
 800ba9e:	f000 8157 	beq.w	800bd50 <_dtoa_r+0x938>
 800baa2:	2400      	movs	r4, #0
 800baa4:	4625      	mov	r5, r4
 800baa6:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800baa8:	43db      	mvns	r3, r3
 800baaa:	9304      	str	r3, [sp, #16]
 800baac:	4656      	mov	r6, sl
 800baae:	2700      	movs	r7, #0
 800bab0:	4621      	mov	r1, r4
 800bab2:	4658      	mov	r0, fp
 800bab4:	f000 fbb4 	bl	800c220 <_Bfree>
 800bab8:	2d00      	cmp	r5, #0
 800baba:	d0dc      	beq.n	800ba76 <_dtoa_r+0x65e>
 800babc:	b12f      	cbz	r7, 800baca <_dtoa_r+0x6b2>
 800babe:	42af      	cmp	r7, r5
 800bac0:	d003      	beq.n	800baca <_dtoa_r+0x6b2>
 800bac2:	4639      	mov	r1, r7
 800bac4:	4658      	mov	r0, fp
 800bac6:	f000 fbab 	bl	800c220 <_Bfree>
 800baca:	4629      	mov	r1, r5
 800bacc:	4658      	mov	r0, fp
 800bace:	f000 fba7 	bl	800c220 <_Bfree>
 800bad2:	e7d0      	b.n	800ba76 <_dtoa_r+0x65e>
 800bad4:	9704      	str	r7, [sp, #16]
 800bad6:	4633      	mov	r3, r6
 800bad8:	461e      	mov	r6, r3
 800bada:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800bade:	2a39      	cmp	r2, #57	@ 0x39
 800bae0:	d107      	bne.n	800baf2 <_dtoa_r+0x6da>
 800bae2:	459a      	cmp	sl, r3
 800bae4:	d1f8      	bne.n	800bad8 <_dtoa_r+0x6c0>
 800bae6:	9a04      	ldr	r2, [sp, #16]
 800bae8:	3201      	adds	r2, #1
 800baea:	9204      	str	r2, [sp, #16]
 800baec:	2230      	movs	r2, #48	@ 0x30
 800baee:	f88a 2000 	strb.w	r2, [sl]
 800baf2:	781a      	ldrb	r2, [r3, #0]
 800baf4:	3201      	adds	r2, #1
 800baf6:	701a      	strb	r2, [r3, #0]
 800baf8:	e7bd      	b.n	800ba76 <_dtoa_r+0x65e>
 800bafa:	4b7b      	ldr	r3, [pc, #492]	@ (800bce8 <_dtoa_r+0x8d0>)
 800bafc:	2200      	movs	r2, #0
 800bafe:	f7f4 fda3 	bl	8000648 <__aeabi_dmul>
 800bb02:	2200      	movs	r2, #0
 800bb04:	2300      	movs	r3, #0
 800bb06:	4604      	mov	r4, r0
 800bb08:	460d      	mov	r5, r1
 800bb0a:	f7f5 f805 	bl	8000b18 <__aeabi_dcmpeq>
 800bb0e:	2800      	cmp	r0, #0
 800bb10:	f43f aebb 	beq.w	800b88a <_dtoa_r+0x472>
 800bb14:	e6f0      	b.n	800b8f8 <_dtoa_r+0x4e0>
 800bb16:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 800bb18:	2a00      	cmp	r2, #0
 800bb1a:	f000 80db 	beq.w	800bcd4 <_dtoa_r+0x8bc>
 800bb1e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800bb20:	2a01      	cmp	r2, #1
 800bb22:	f300 80bf 	bgt.w	800bca4 <_dtoa_r+0x88c>
 800bb26:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 800bb28:	2a00      	cmp	r2, #0
 800bb2a:	f000 80b7 	beq.w	800bc9c <_dtoa_r+0x884>
 800bb2e:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 800bb32:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800bb34:	4646      	mov	r6, r8
 800bb36:	9a08      	ldr	r2, [sp, #32]
 800bb38:	2101      	movs	r1, #1
 800bb3a:	441a      	add	r2, r3
 800bb3c:	4658      	mov	r0, fp
 800bb3e:	4498      	add	r8, r3
 800bb40:	9208      	str	r2, [sp, #32]
 800bb42:	f000 fc21 	bl	800c388 <__i2b>
 800bb46:	4605      	mov	r5, r0
 800bb48:	b15e      	cbz	r6, 800bb62 <_dtoa_r+0x74a>
 800bb4a:	9b08      	ldr	r3, [sp, #32]
 800bb4c:	2b00      	cmp	r3, #0
 800bb4e:	dd08      	ble.n	800bb62 <_dtoa_r+0x74a>
 800bb50:	42b3      	cmp	r3, r6
 800bb52:	9a08      	ldr	r2, [sp, #32]
 800bb54:	bfa8      	it	ge
 800bb56:	4633      	movge	r3, r6
 800bb58:	eba8 0803 	sub.w	r8, r8, r3
 800bb5c:	1af6      	subs	r6, r6, r3
 800bb5e:	1ad3      	subs	r3, r2, r3
 800bb60:	9308      	str	r3, [sp, #32]
 800bb62:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800bb64:	b1f3      	cbz	r3, 800bba4 <_dtoa_r+0x78c>
 800bb66:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800bb68:	2b00      	cmp	r3, #0
 800bb6a:	f000 80b7 	beq.w	800bcdc <_dtoa_r+0x8c4>
 800bb6e:	b18c      	cbz	r4, 800bb94 <_dtoa_r+0x77c>
 800bb70:	4629      	mov	r1, r5
 800bb72:	4622      	mov	r2, r4
 800bb74:	4658      	mov	r0, fp
 800bb76:	f000 fcc7 	bl	800c508 <__pow5mult>
 800bb7a:	464a      	mov	r2, r9
 800bb7c:	4601      	mov	r1, r0
 800bb7e:	4605      	mov	r5, r0
 800bb80:	4658      	mov	r0, fp
 800bb82:	f000 fc17 	bl	800c3b4 <__multiply>
 800bb86:	4649      	mov	r1, r9
 800bb88:	9004      	str	r0, [sp, #16]
 800bb8a:	4658      	mov	r0, fp
 800bb8c:	f000 fb48 	bl	800c220 <_Bfree>
 800bb90:	9b04      	ldr	r3, [sp, #16]
 800bb92:	4699      	mov	r9, r3
 800bb94:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800bb96:	1b1a      	subs	r2, r3, r4
 800bb98:	d004      	beq.n	800bba4 <_dtoa_r+0x78c>
 800bb9a:	4649      	mov	r1, r9
 800bb9c:	4658      	mov	r0, fp
 800bb9e:	f000 fcb3 	bl	800c508 <__pow5mult>
 800bba2:	4681      	mov	r9, r0
 800bba4:	2101      	movs	r1, #1
 800bba6:	4658      	mov	r0, fp
 800bba8:	f000 fbee 	bl	800c388 <__i2b>
 800bbac:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800bbae:	4604      	mov	r4, r0
 800bbb0:	2b00      	cmp	r3, #0
 800bbb2:	f000 81cf 	beq.w	800bf54 <_dtoa_r+0xb3c>
 800bbb6:	461a      	mov	r2, r3
 800bbb8:	4601      	mov	r1, r0
 800bbba:	4658      	mov	r0, fp
 800bbbc:	f000 fca4 	bl	800c508 <__pow5mult>
 800bbc0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800bbc2:	2b01      	cmp	r3, #1
 800bbc4:	4604      	mov	r4, r0
 800bbc6:	f300 8095 	bgt.w	800bcf4 <_dtoa_r+0x8dc>
 800bbca:	9b02      	ldr	r3, [sp, #8]
 800bbcc:	2b00      	cmp	r3, #0
 800bbce:	f040 8087 	bne.w	800bce0 <_dtoa_r+0x8c8>
 800bbd2:	9b03      	ldr	r3, [sp, #12]
 800bbd4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800bbd8:	2b00      	cmp	r3, #0
 800bbda:	f040 8089 	bne.w	800bcf0 <_dtoa_r+0x8d8>
 800bbde:	9b03      	ldr	r3, [sp, #12]
 800bbe0:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800bbe4:	0d1b      	lsrs	r3, r3, #20
 800bbe6:	051b      	lsls	r3, r3, #20
 800bbe8:	b12b      	cbz	r3, 800bbf6 <_dtoa_r+0x7de>
 800bbea:	9b08      	ldr	r3, [sp, #32]
 800bbec:	3301      	adds	r3, #1
 800bbee:	9308      	str	r3, [sp, #32]
 800bbf0:	f108 0801 	add.w	r8, r8, #1
 800bbf4:	2301      	movs	r3, #1
 800bbf6:	930a      	str	r3, [sp, #40]	@ 0x28
 800bbf8:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800bbfa:	2b00      	cmp	r3, #0
 800bbfc:	f000 81b0 	beq.w	800bf60 <_dtoa_r+0xb48>
 800bc00:	6923      	ldr	r3, [r4, #16]
 800bc02:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800bc06:	6918      	ldr	r0, [r3, #16]
 800bc08:	f000 fb72 	bl	800c2f0 <__hi0bits>
 800bc0c:	f1c0 0020 	rsb	r0, r0, #32
 800bc10:	9b08      	ldr	r3, [sp, #32]
 800bc12:	4418      	add	r0, r3
 800bc14:	f010 001f 	ands.w	r0, r0, #31
 800bc18:	d077      	beq.n	800bd0a <_dtoa_r+0x8f2>
 800bc1a:	f1c0 0320 	rsb	r3, r0, #32
 800bc1e:	2b04      	cmp	r3, #4
 800bc20:	dd6b      	ble.n	800bcfa <_dtoa_r+0x8e2>
 800bc22:	9b08      	ldr	r3, [sp, #32]
 800bc24:	f1c0 001c 	rsb	r0, r0, #28
 800bc28:	4403      	add	r3, r0
 800bc2a:	4480      	add	r8, r0
 800bc2c:	4406      	add	r6, r0
 800bc2e:	9308      	str	r3, [sp, #32]
 800bc30:	f1b8 0f00 	cmp.w	r8, #0
 800bc34:	dd05      	ble.n	800bc42 <_dtoa_r+0x82a>
 800bc36:	4649      	mov	r1, r9
 800bc38:	4642      	mov	r2, r8
 800bc3a:	4658      	mov	r0, fp
 800bc3c:	f000 fcbe 	bl	800c5bc <__lshift>
 800bc40:	4681      	mov	r9, r0
 800bc42:	9b08      	ldr	r3, [sp, #32]
 800bc44:	2b00      	cmp	r3, #0
 800bc46:	dd05      	ble.n	800bc54 <_dtoa_r+0x83c>
 800bc48:	4621      	mov	r1, r4
 800bc4a:	461a      	mov	r2, r3
 800bc4c:	4658      	mov	r0, fp
 800bc4e:	f000 fcb5 	bl	800c5bc <__lshift>
 800bc52:	4604      	mov	r4, r0
 800bc54:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800bc56:	2b00      	cmp	r3, #0
 800bc58:	d059      	beq.n	800bd0e <_dtoa_r+0x8f6>
 800bc5a:	4621      	mov	r1, r4
 800bc5c:	4648      	mov	r0, r9
 800bc5e:	f000 fd19 	bl	800c694 <__mcmp>
 800bc62:	2800      	cmp	r0, #0
 800bc64:	da53      	bge.n	800bd0e <_dtoa_r+0x8f6>
 800bc66:	1e7b      	subs	r3, r7, #1
 800bc68:	9304      	str	r3, [sp, #16]
 800bc6a:	4649      	mov	r1, r9
 800bc6c:	2300      	movs	r3, #0
 800bc6e:	220a      	movs	r2, #10
 800bc70:	4658      	mov	r0, fp
 800bc72:	f000 faf7 	bl	800c264 <__multadd>
 800bc76:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800bc78:	4681      	mov	r9, r0
 800bc7a:	2b00      	cmp	r3, #0
 800bc7c:	f000 8172 	beq.w	800bf64 <_dtoa_r+0xb4c>
 800bc80:	2300      	movs	r3, #0
 800bc82:	4629      	mov	r1, r5
 800bc84:	220a      	movs	r2, #10
 800bc86:	4658      	mov	r0, fp
 800bc88:	f000 faec 	bl	800c264 <__multadd>
 800bc8c:	9b00      	ldr	r3, [sp, #0]
 800bc8e:	2b00      	cmp	r3, #0
 800bc90:	4605      	mov	r5, r0
 800bc92:	dc67      	bgt.n	800bd64 <_dtoa_r+0x94c>
 800bc94:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800bc96:	2b02      	cmp	r3, #2
 800bc98:	dc41      	bgt.n	800bd1e <_dtoa_r+0x906>
 800bc9a:	e063      	b.n	800bd64 <_dtoa_r+0x94c>
 800bc9c:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 800bc9e:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 800bca2:	e746      	b.n	800bb32 <_dtoa_r+0x71a>
 800bca4:	9b07      	ldr	r3, [sp, #28]
 800bca6:	1e5c      	subs	r4, r3, #1
 800bca8:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800bcaa:	42a3      	cmp	r3, r4
 800bcac:	bfbf      	itttt	lt
 800bcae:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 800bcb0:	9a0f      	ldrlt	r2, [sp, #60]	@ 0x3c
 800bcb2:	940a      	strlt	r4, [sp, #40]	@ 0x28
 800bcb4:	1ae3      	sublt	r3, r4, r3
 800bcb6:	bfb4      	ite	lt
 800bcb8:	18d2      	addlt	r2, r2, r3
 800bcba:	1b1c      	subge	r4, r3, r4
 800bcbc:	9b07      	ldr	r3, [sp, #28]
 800bcbe:	bfbc      	itt	lt
 800bcc0:	920f      	strlt	r2, [sp, #60]	@ 0x3c
 800bcc2:	2400      	movlt	r4, #0
 800bcc4:	2b00      	cmp	r3, #0
 800bcc6:	bfb5      	itete	lt
 800bcc8:	eba8 0603 	sublt.w	r6, r8, r3
 800bccc:	9b07      	ldrge	r3, [sp, #28]
 800bcce:	2300      	movlt	r3, #0
 800bcd0:	4646      	movge	r6, r8
 800bcd2:	e730      	b.n	800bb36 <_dtoa_r+0x71e>
 800bcd4:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800bcd6:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 800bcd8:	4646      	mov	r6, r8
 800bcda:	e735      	b.n	800bb48 <_dtoa_r+0x730>
 800bcdc:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800bcde:	e75c      	b.n	800bb9a <_dtoa_r+0x782>
 800bce0:	2300      	movs	r3, #0
 800bce2:	e788      	b.n	800bbf6 <_dtoa_r+0x7de>
 800bce4:	3fe00000 	.word	0x3fe00000
 800bce8:	40240000 	.word	0x40240000
 800bcec:	40140000 	.word	0x40140000
 800bcf0:	9b02      	ldr	r3, [sp, #8]
 800bcf2:	e780      	b.n	800bbf6 <_dtoa_r+0x7de>
 800bcf4:	2300      	movs	r3, #0
 800bcf6:	930a      	str	r3, [sp, #40]	@ 0x28
 800bcf8:	e782      	b.n	800bc00 <_dtoa_r+0x7e8>
 800bcfa:	d099      	beq.n	800bc30 <_dtoa_r+0x818>
 800bcfc:	9a08      	ldr	r2, [sp, #32]
 800bcfe:	331c      	adds	r3, #28
 800bd00:	441a      	add	r2, r3
 800bd02:	4498      	add	r8, r3
 800bd04:	441e      	add	r6, r3
 800bd06:	9208      	str	r2, [sp, #32]
 800bd08:	e792      	b.n	800bc30 <_dtoa_r+0x818>
 800bd0a:	4603      	mov	r3, r0
 800bd0c:	e7f6      	b.n	800bcfc <_dtoa_r+0x8e4>
 800bd0e:	9b07      	ldr	r3, [sp, #28]
 800bd10:	9704      	str	r7, [sp, #16]
 800bd12:	2b00      	cmp	r3, #0
 800bd14:	dc20      	bgt.n	800bd58 <_dtoa_r+0x940>
 800bd16:	9300      	str	r3, [sp, #0]
 800bd18:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800bd1a:	2b02      	cmp	r3, #2
 800bd1c:	dd1e      	ble.n	800bd5c <_dtoa_r+0x944>
 800bd1e:	9b00      	ldr	r3, [sp, #0]
 800bd20:	2b00      	cmp	r3, #0
 800bd22:	f47f aec0 	bne.w	800baa6 <_dtoa_r+0x68e>
 800bd26:	4621      	mov	r1, r4
 800bd28:	2205      	movs	r2, #5
 800bd2a:	4658      	mov	r0, fp
 800bd2c:	f000 fa9a 	bl	800c264 <__multadd>
 800bd30:	4601      	mov	r1, r0
 800bd32:	4604      	mov	r4, r0
 800bd34:	4648      	mov	r0, r9
 800bd36:	f000 fcad 	bl	800c694 <__mcmp>
 800bd3a:	2800      	cmp	r0, #0
 800bd3c:	f77f aeb3 	ble.w	800baa6 <_dtoa_r+0x68e>
 800bd40:	4656      	mov	r6, sl
 800bd42:	2331      	movs	r3, #49	@ 0x31
 800bd44:	f806 3b01 	strb.w	r3, [r6], #1
 800bd48:	9b04      	ldr	r3, [sp, #16]
 800bd4a:	3301      	adds	r3, #1
 800bd4c:	9304      	str	r3, [sp, #16]
 800bd4e:	e6ae      	b.n	800baae <_dtoa_r+0x696>
 800bd50:	9c07      	ldr	r4, [sp, #28]
 800bd52:	9704      	str	r7, [sp, #16]
 800bd54:	4625      	mov	r5, r4
 800bd56:	e7f3      	b.n	800bd40 <_dtoa_r+0x928>
 800bd58:	9b07      	ldr	r3, [sp, #28]
 800bd5a:	9300      	str	r3, [sp, #0]
 800bd5c:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800bd5e:	2b00      	cmp	r3, #0
 800bd60:	f000 8104 	beq.w	800bf6c <_dtoa_r+0xb54>
 800bd64:	2e00      	cmp	r6, #0
 800bd66:	dd05      	ble.n	800bd74 <_dtoa_r+0x95c>
 800bd68:	4629      	mov	r1, r5
 800bd6a:	4632      	mov	r2, r6
 800bd6c:	4658      	mov	r0, fp
 800bd6e:	f000 fc25 	bl	800c5bc <__lshift>
 800bd72:	4605      	mov	r5, r0
 800bd74:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800bd76:	2b00      	cmp	r3, #0
 800bd78:	d05a      	beq.n	800be30 <_dtoa_r+0xa18>
 800bd7a:	6869      	ldr	r1, [r5, #4]
 800bd7c:	4658      	mov	r0, fp
 800bd7e:	f000 fa0f 	bl	800c1a0 <_Balloc>
 800bd82:	4606      	mov	r6, r0
 800bd84:	b928      	cbnz	r0, 800bd92 <_dtoa_r+0x97a>
 800bd86:	4b84      	ldr	r3, [pc, #528]	@ (800bf98 <_dtoa_r+0xb80>)
 800bd88:	4602      	mov	r2, r0
 800bd8a:	f240 21ef 	movw	r1, #751	@ 0x2ef
 800bd8e:	f7ff bb5a 	b.w	800b446 <_dtoa_r+0x2e>
 800bd92:	692a      	ldr	r2, [r5, #16]
 800bd94:	3202      	adds	r2, #2
 800bd96:	0092      	lsls	r2, r2, #2
 800bd98:	f105 010c 	add.w	r1, r5, #12
 800bd9c:	300c      	adds	r0, #12
 800bd9e:	f000 fe3d 	bl	800ca1c <memcpy>
 800bda2:	2201      	movs	r2, #1
 800bda4:	4631      	mov	r1, r6
 800bda6:	4658      	mov	r0, fp
 800bda8:	f000 fc08 	bl	800c5bc <__lshift>
 800bdac:	f10a 0301 	add.w	r3, sl, #1
 800bdb0:	9307      	str	r3, [sp, #28]
 800bdb2:	9b00      	ldr	r3, [sp, #0]
 800bdb4:	4453      	add	r3, sl
 800bdb6:	930b      	str	r3, [sp, #44]	@ 0x2c
 800bdb8:	9b02      	ldr	r3, [sp, #8]
 800bdba:	f003 0301 	and.w	r3, r3, #1
 800bdbe:	462f      	mov	r7, r5
 800bdc0:	930a      	str	r3, [sp, #40]	@ 0x28
 800bdc2:	4605      	mov	r5, r0
 800bdc4:	9b07      	ldr	r3, [sp, #28]
 800bdc6:	4621      	mov	r1, r4
 800bdc8:	3b01      	subs	r3, #1
 800bdca:	4648      	mov	r0, r9
 800bdcc:	9300      	str	r3, [sp, #0]
 800bdce:	f7ff fa9a 	bl	800b306 <quorem>
 800bdd2:	4639      	mov	r1, r7
 800bdd4:	9002      	str	r0, [sp, #8]
 800bdd6:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 800bdda:	4648      	mov	r0, r9
 800bddc:	f000 fc5a 	bl	800c694 <__mcmp>
 800bde0:	462a      	mov	r2, r5
 800bde2:	9008      	str	r0, [sp, #32]
 800bde4:	4621      	mov	r1, r4
 800bde6:	4658      	mov	r0, fp
 800bde8:	f000 fc70 	bl	800c6cc <__mdiff>
 800bdec:	68c2      	ldr	r2, [r0, #12]
 800bdee:	4606      	mov	r6, r0
 800bdf0:	bb02      	cbnz	r2, 800be34 <_dtoa_r+0xa1c>
 800bdf2:	4601      	mov	r1, r0
 800bdf4:	4648      	mov	r0, r9
 800bdf6:	f000 fc4d 	bl	800c694 <__mcmp>
 800bdfa:	4602      	mov	r2, r0
 800bdfc:	4631      	mov	r1, r6
 800bdfe:	4658      	mov	r0, fp
 800be00:	920e      	str	r2, [sp, #56]	@ 0x38
 800be02:	f000 fa0d 	bl	800c220 <_Bfree>
 800be06:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800be08:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800be0a:	9e07      	ldr	r6, [sp, #28]
 800be0c:	ea43 0102 	orr.w	r1, r3, r2
 800be10:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800be12:	4319      	orrs	r1, r3
 800be14:	d110      	bne.n	800be38 <_dtoa_r+0xa20>
 800be16:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800be1a:	d029      	beq.n	800be70 <_dtoa_r+0xa58>
 800be1c:	9b08      	ldr	r3, [sp, #32]
 800be1e:	2b00      	cmp	r3, #0
 800be20:	dd02      	ble.n	800be28 <_dtoa_r+0xa10>
 800be22:	9b02      	ldr	r3, [sp, #8]
 800be24:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 800be28:	9b00      	ldr	r3, [sp, #0]
 800be2a:	f883 8000 	strb.w	r8, [r3]
 800be2e:	e63f      	b.n	800bab0 <_dtoa_r+0x698>
 800be30:	4628      	mov	r0, r5
 800be32:	e7bb      	b.n	800bdac <_dtoa_r+0x994>
 800be34:	2201      	movs	r2, #1
 800be36:	e7e1      	b.n	800bdfc <_dtoa_r+0x9e4>
 800be38:	9b08      	ldr	r3, [sp, #32]
 800be3a:	2b00      	cmp	r3, #0
 800be3c:	db04      	blt.n	800be48 <_dtoa_r+0xa30>
 800be3e:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800be40:	430b      	orrs	r3, r1
 800be42:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800be44:	430b      	orrs	r3, r1
 800be46:	d120      	bne.n	800be8a <_dtoa_r+0xa72>
 800be48:	2a00      	cmp	r2, #0
 800be4a:	dded      	ble.n	800be28 <_dtoa_r+0xa10>
 800be4c:	4649      	mov	r1, r9
 800be4e:	2201      	movs	r2, #1
 800be50:	4658      	mov	r0, fp
 800be52:	f000 fbb3 	bl	800c5bc <__lshift>
 800be56:	4621      	mov	r1, r4
 800be58:	4681      	mov	r9, r0
 800be5a:	f000 fc1b 	bl	800c694 <__mcmp>
 800be5e:	2800      	cmp	r0, #0
 800be60:	dc03      	bgt.n	800be6a <_dtoa_r+0xa52>
 800be62:	d1e1      	bne.n	800be28 <_dtoa_r+0xa10>
 800be64:	f018 0f01 	tst.w	r8, #1
 800be68:	d0de      	beq.n	800be28 <_dtoa_r+0xa10>
 800be6a:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800be6e:	d1d8      	bne.n	800be22 <_dtoa_r+0xa0a>
 800be70:	9a00      	ldr	r2, [sp, #0]
 800be72:	2339      	movs	r3, #57	@ 0x39
 800be74:	7013      	strb	r3, [r2, #0]
 800be76:	4633      	mov	r3, r6
 800be78:	461e      	mov	r6, r3
 800be7a:	3b01      	subs	r3, #1
 800be7c:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 800be80:	2a39      	cmp	r2, #57	@ 0x39
 800be82:	d052      	beq.n	800bf2a <_dtoa_r+0xb12>
 800be84:	3201      	adds	r2, #1
 800be86:	701a      	strb	r2, [r3, #0]
 800be88:	e612      	b.n	800bab0 <_dtoa_r+0x698>
 800be8a:	2a00      	cmp	r2, #0
 800be8c:	dd07      	ble.n	800be9e <_dtoa_r+0xa86>
 800be8e:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800be92:	d0ed      	beq.n	800be70 <_dtoa_r+0xa58>
 800be94:	9a00      	ldr	r2, [sp, #0]
 800be96:	f108 0301 	add.w	r3, r8, #1
 800be9a:	7013      	strb	r3, [r2, #0]
 800be9c:	e608      	b.n	800bab0 <_dtoa_r+0x698>
 800be9e:	9b07      	ldr	r3, [sp, #28]
 800bea0:	9a07      	ldr	r2, [sp, #28]
 800bea2:	f803 8c01 	strb.w	r8, [r3, #-1]
 800bea6:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800bea8:	4293      	cmp	r3, r2
 800beaa:	d028      	beq.n	800befe <_dtoa_r+0xae6>
 800beac:	4649      	mov	r1, r9
 800beae:	2300      	movs	r3, #0
 800beb0:	220a      	movs	r2, #10
 800beb2:	4658      	mov	r0, fp
 800beb4:	f000 f9d6 	bl	800c264 <__multadd>
 800beb8:	42af      	cmp	r7, r5
 800beba:	4681      	mov	r9, r0
 800bebc:	f04f 0300 	mov.w	r3, #0
 800bec0:	f04f 020a 	mov.w	r2, #10
 800bec4:	4639      	mov	r1, r7
 800bec6:	4658      	mov	r0, fp
 800bec8:	d107      	bne.n	800beda <_dtoa_r+0xac2>
 800beca:	f000 f9cb 	bl	800c264 <__multadd>
 800bece:	4607      	mov	r7, r0
 800bed0:	4605      	mov	r5, r0
 800bed2:	9b07      	ldr	r3, [sp, #28]
 800bed4:	3301      	adds	r3, #1
 800bed6:	9307      	str	r3, [sp, #28]
 800bed8:	e774      	b.n	800bdc4 <_dtoa_r+0x9ac>
 800beda:	f000 f9c3 	bl	800c264 <__multadd>
 800bede:	4629      	mov	r1, r5
 800bee0:	4607      	mov	r7, r0
 800bee2:	2300      	movs	r3, #0
 800bee4:	220a      	movs	r2, #10
 800bee6:	4658      	mov	r0, fp
 800bee8:	f000 f9bc 	bl	800c264 <__multadd>
 800beec:	4605      	mov	r5, r0
 800beee:	e7f0      	b.n	800bed2 <_dtoa_r+0xaba>
 800bef0:	9b00      	ldr	r3, [sp, #0]
 800bef2:	2b00      	cmp	r3, #0
 800bef4:	bfcc      	ite	gt
 800bef6:	461e      	movgt	r6, r3
 800bef8:	2601      	movle	r6, #1
 800befa:	4456      	add	r6, sl
 800befc:	2700      	movs	r7, #0
 800befe:	4649      	mov	r1, r9
 800bf00:	2201      	movs	r2, #1
 800bf02:	4658      	mov	r0, fp
 800bf04:	f000 fb5a 	bl	800c5bc <__lshift>
 800bf08:	4621      	mov	r1, r4
 800bf0a:	4681      	mov	r9, r0
 800bf0c:	f000 fbc2 	bl	800c694 <__mcmp>
 800bf10:	2800      	cmp	r0, #0
 800bf12:	dcb0      	bgt.n	800be76 <_dtoa_r+0xa5e>
 800bf14:	d102      	bne.n	800bf1c <_dtoa_r+0xb04>
 800bf16:	f018 0f01 	tst.w	r8, #1
 800bf1a:	d1ac      	bne.n	800be76 <_dtoa_r+0xa5e>
 800bf1c:	4633      	mov	r3, r6
 800bf1e:	461e      	mov	r6, r3
 800bf20:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800bf24:	2a30      	cmp	r2, #48	@ 0x30
 800bf26:	d0fa      	beq.n	800bf1e <_dtoa_r+0xb06>
 800bf28:	e5c2      	b.n	800bab0 <_dtoa_r+0x698>
 800bf2a:	459a      	cmp	sl, r3
 800bf2c:	d1a4      	bne.n	800be78 <_dtoa_r+0xa60>
 800bf2e:	9b04      	ldr	r3, [sp, #16]
 800bf30:	3301      	adds	r3, #1
 800bf32:	9304      	str	r3, [sp, #16]
 800bf34:	2331      	movs	r3, #49	@ 0x31
 800bf36:	f88a 3000 	strb.w	r3, [sl]
 800bf3a:	e5b9      	b.n	800bab0 <_dtoa_r+0x698>
 800bf3c:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800bf3e:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 800bf9c <_dtoa_r+0xb84>
 800bf42:	b11b      	cbz	r3, 800bf4c <_dtoa_r+0xb34>
 800bf44:	f10a 0308 	add.w	r3, sl, #8
 800bf48:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 800bf4a:	6013      	str	r3, [r2, #0]
 800bf4c:	4650      	mov	r0, sl
 800bf4e:	b019      	add	sp, #100	@ 0x64
 800bf50:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bf54:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800bf56:	2b01      	cmp	r3, #1
 800bf58:	f77f ae37 	ble.w	800bbca <_dtoa_r+0x7b2>
 800bf5c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800bf5e:	930a      	str	r3, [sp, #40]	@ 0x28
 800bf60:	2001      	movs	r0, #1
 800bf62:	e655      	b.n	800bc10 <_dtoa_r+0x7f8>
 800bf64:	9b00      	ldr	r3, [sp, #0]
 800bf66:	2b00      	cmp	r3, #0
 800bf68:	f77f aed6 	ble.w	800bd18 <_dtoa_r+0x900>
 800bf6c:	4656      	mov	r6, sl
 800bf6e:	4621      	mov	r1, r4
 800bf70:	4648      	mov	r0, r9
 800bf72:	f7ff f9c8 	bl	800b306 <quorem>
 800bf76:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 800bf7a:	f806 8b01 	strb.w	r8, [r6], #1
 800bf7e:	9b00      	ldr	r3, [sp, #0]
 800bf80:	eba6 020a 	sub.w	r2, r6, sl
 800bf84:	4293      	cmp	r3, r2
 800bf86:	ddb3      	ble.n	800bef0 <_dtoa_r+0xad8>
 800bf88:	4649      	mov	r1, r9
 800bf8a:	2300      	movs	r3, #0
 800bf8c:	220a      	movs	r2, #10
 800bf8e:	4658      	mov	r0, fp
 800bf90:	f000 f968 	bl	800c264 <__multadd>
 800bf94:	4681      	mov	r9, r0
 800bf96:	e7ea      	b.n	800bf6e <_dtoa_r+0xb56>
 800bf98:	0800d168 	.word	0x0800d168
 800bf9c:	0800d0ec 	.word	0x0800d0ec

0800bfa0 <_free_r>:
 800bfa0:	b538      	push	{r3, r4, r5, lr}
 800bfa2:	4605      	mov	r5, r0
 800bfa4:	2900      	cmp	r1, #0
 800bfa6:	d041      	beq.n	800c02c <_free_r+0x8c>
 800bfa8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800bfac:	1f0c      	subs	r4, r1, #4
 800bfae:	2b00      	cmp	r3, #0
 800bfb0:	bfb8      	it	lt
 800bfb2:	18e4      	addlt	r4, r4, r3
 800bfb4:	f000 f8e8 	bl	800c188 <__malloc_lock>
 800bfb8:	4a1d      	ldr	r2, [pc, #116]	@ (800c030 <_free_r+0x90>)
 800bfba:	6813      	ldr	r3, [r2, #0]
 800bfbc:	b933      	cbnz	r3, 800bfcc <_free_r+0x2c>
 800bfbe:	6063      	str	r3, [r4, #4]
 800bfc0:	6014      	str	r4, [r2, #0]
 800bfc2:	4628      	mov	r0, r5
 800bfc4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800bfc8:	f000 b8e4 	b.w	800c194 <__malloc_unlock>
 800bfcc:	42a3      	cmp	r3, r4
 800bfce:	d908      	bls.n	800bfe2 <_free_r+0x42>
 800bfd0:	6820      	ldr	r0, [r4, #0]
 800bfd2:	1821      	adds	r1, r4, r0
 800bfd4:	428b      	cmp	r3, r1
 800bfd6:	bf01      	itttt	eq
 800bfd8:	6819      	ldreq	r1, [r3, #0]
 800bfda:	685b      	ldreq	r3, [r3, #4]
 800bfdc:	1809      	addeq	r1, r1, r0
 800bfde:	6021      	streq	r1, [r4, #0]
 800bfe0:	e7ed      	b.n	800bfbe <_free_r+0x1e>
 800bfe2:	461a      	mov	r2, r3
 800bfe4:	685b      	ldr	r3, [r3, #4]
 800bfe6:	b10b      	cbz	r3, 800bfec <_free_r+0x4c>
 800bfe8:	42a3      	cmp	r3, r4
 800bfea:	d9fa      	bls.n	800bfe2 <_free_r+0x42>
 800bfec:	6811      	ldr	r1, [r2, #0]
 800bfee:	1850      	adds	r0, r2, r1
 800bff0:	42a0      	cmp	r0, r4
 800bff2:	d10b      	bne.n	800c00c <_free_r+0x6c>
 800bff4:	6820      	ldr	r0, [r4, #0]
 800bff6:	4401      	add	r1, r0
 800bff8:	1850      	adds	r0, r2, r1
 800bffa:	4283      	cmp	r3, r0
 800bffc:	6011      	str	r1, [r2, #0]
 800bffe:	d1e0      	bne.n	800bfc2 <_free_r+0x22>
 800c000:	6818      	ldr	r0, [r3, #0]
 800c002:	685b      	ldr	r3, [r3, #4]
 800c004:	6053      	str	r3, [r2, #4]
 800c006:	4408      	add	r0, r1
 800c008:	6010      	str	r0, [r2, #0]
 800c00a:	e7da      	b.n	800bfc2 <_free_r+0x22>
 800c00c:	d902      	bls.n	800c014 <_free_r+0x74>
 800c00e:	230c      	movs	r3, #12
 800c010:	602b      	str	r3, [r5, #0]
 800c012:	e7d6      	b.n	800bfc2 <_free_r+0x22>
 800c014:	6820      	ldr	r0, [r4, #0]
 800c016:	1821      	adds	r1, r4, r0
 800c018:	428b      	cmp	r3, r1
 800c01a:	bf04      	itt	eq
 800c01c:	6819      	ldreq	r1, [r3, #0]
 800c01e:	685b      	ldreq	r3, [r3, #4]
 800c020:	6063      	str	r3, [r4, #4]
 800c022:	bf04      	itt	eq
 800c024:	1809      	addeq	r1, r1, r0
 800c026:	6021      	streq	r1, [r4, #0]
 800c028:	6054      	str	r4, [r2, #4]
 800c02a:	e7ca      	b.n	800bfc2 <_free_r+0x22>
 800c02c:	bd38      	pop	{r3, r4, r5, pc}
 800c02e:	bf00      	nop
 800c030:	20001a20 	.word	0x20001a20

0800c034 <malloc>:
 800c034:	4b02      	ldr	r3, [pc, #8]	@ (800c040 <malloc+0xc>)
 800c036:	4601      	mov	r1, r0
 800c038:	6818      	ldr	r0, [r3, #0]
 800c03a:	f000 b825 	b.w	800c088 <_malloc_r>
 800c03e:	bf00      	nop
 800c040:	200001a0 	.word	0x200001a0

0800c044 <sbrk_aligned>:
 800c044:	b570      	push	{r4, r5, r6, lr}
 800c046:	4e0f      	ldr	r6, [pc, #60]	@ (800c084 <sbrk_aligned+0x40>)
 800c048:	460c      	mov	r4, r1
 800c04a:	6831      	ldr	r1, [r6, #0]
 800c04c:	4605      	mov	r5, r0
 800c04e:	b911      	cbnz	r1, 800c056 <sbrk_aligned+0x12>
 800c050:	f000 fcd4 	bl	800c9fc <_sbrk_r>
 800c054:	6030      	str	r0, [r6, #0]
 800c056:	4621      	mov	r1, r4
 800c058:	4628      	mov	r0, r5
 800c05a:	f000 fccf 	bl	800c9fc <_sbrk_r>
 800c05e:	1c43      	adds	r3, r0, #1
 800c060:	d103      	bne.n	800c06a <sbrk_aligned+0x26>
 800c062:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 800c066:	4620      	mov	r0, r4
 800c068:	bd70      	pop	{r4, r5, r6, pc}
 800c06a:	1cc4      	adds	r4, r0, #3
 800c06c:	f024 0403 	bic.w	r4, r4, #3
 800c070:	42a0      	cmp	r0, r4
 800c072:	d0f8      	beq.n	800c066 <sbrk_aligned+0x22>
 800c074:	1a21      	subs	r1, r4, r0
 800c076:	4628      	mov	r0, r5
 800c078:	f000 fcc0 	bl	800c9fc <_sbrk_r>
 800c07c:	3001      	adds	r0, #1
 800c07e:	d1f2      	bne.n	800c066 <sbrk_aligned+0x22>
 800c080:	e7ef      	b.n	800c062 <sbrk_aligned+0x1e>
 800c082:	bf00      	nop
 800c084:	20001a1c 	.word	0x20001a1c

0800c088 <_malloc_r>:
 800c088:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c08c:	1ccd      	adds	r5, r1, #3
 800c08e:	f025 0503 	bic.w	r5, r5, #3
 800c092:	3508      	adds	r5, #8
 800c094:	2d0c      	cmp	r5, #12
 800c096:	bf38      	it	cc
 800c098:	250c      	movcc	r5, #12
 800c09a:	2d00      	cmp	r5, #0
 800c09c:	4606      	mov	r6, r0
 800c09e:	db01      	blt.n	800c0a4 <_malloc_r+0x1c>
 800c0a0:	42a9      	cmp	r1, r5
 800c0a2:	d904      	bls.n	800c0ae <_malloc_r+0x26>
 800c0a4:	230c      	movs	r3, #12
 800c0a6:	6033      	str	r3, [r6, #0]
 800c0a8:	2000      	movs	r0, #0
 800c0aa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c0ae:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800c184 <_malloc_r+0xfc>
 800c0b2:	f000 f869 	bl	800c188 <__malloc_lock>
 800c0b6:	f8d8 3000 	ldr.w	r3, [r8]
 800c0ba:	461c      	mov	r4, r3
 800c0bc:	bb44      	cbnz	r4, 800c110 <_malloc_r+0x88>
 800c0be:	4629      	mov	r1, r5
 800c0c0:	4630      	mov	r0, r6
 800c0c2:	f7ff ffbf 	bl	800c044 <sbrk_aligned>
 800c0c6:	1c43      	adds	r3, r0, #1
 800c0c8:	4604      	mov	r4, r0
 800c0ca:	d158      	bne.n	800c17e <_malloc_r+0xf6>
 800c0cc:	f8d8 4000 	ldr.w	r4, [r8]
 800c0d0:	4627      	mov	r7, r4
 800c0d2:	2f00      	cmp	r7, #0
 800c0d4:	d143      	bne.n	800c15e <_malloc_r+0xd6>
 800c0d6:	2c00      	cmp	r4, #0
 800c0d8:	d04b      	beq.n	800c172 <_malloc_r+0xea>
 800c0da:	6823      	ldr	r3, [r4, #0]
 800c0dc:	4639      	mov	r1, r7
 800c0de:	4630      	mov	r0, r6
 800c0e0:	eb04 0903 	add.w	r9, r4, r3
 800c0e4:	f000 fc8a 	bl	800c9fc <_sbrk_r>
 800c0e8:	4581      	cmp	r9, r0
 800c0ea:	d142      	bne.n	800c172 <_malloc_r+0xea>
 800c0ec:	6821      	ldr	r1, [r4, #0]
 800c0ee:	1a6d      	subs	r5, r5, r1
 800c0f0:	4629      	mov	r1, r5
 800c0f2:	4630      	mov	r0, r6
 800c0f4:	f7ff ffa6 	bl	800c044 <sbrk_aligned>
 800c0f8:	3001      	adds	r0, #1
 800c0fa:	d03a      	beq.n	800c172 <_malloc_r+0xea>
 800c0fc:	6823      	ldr	r3, [r4, #0]
 800c0fe:	442b      	add	r3, r5
 800c100:	6023      	str	r3, [r4, #0]
 800c102:	f8d8 3000 	ldr.w	r3, [r8]
 800c106:	685a      	ldr	r2, [r3, #4]
 800c108:	bb62      	cbnz	r2, 800c164 <_malloc_r+0xdc>
 800c10a:	f8c8 7000 	str.w	r7, [r8]
 800c10e:	e00f      	b.n	800c130 <_malloc_r+0xa8>
 800c110:	6822      	ldr	r2, [r4, #0]
 800c112:	1b52      	subs	r2, r2, r5
 800c114:	d420      	bmi.n	800c158 <_malloc_r+0xd0>
 800c116:	2a0b      	cmp	r2, #11
 800c118:	d917      	bls.n	800c14a <_malloc_r+0xc2>
 800c11a:	1961      	adds	r1, r4, r5
 800c11c:	42a3      	cmp	r3, r4
 800c11e:	6025      	str	r5, [r4, #0]
 800c120:	bf18      	it	ne
 800c122:	6059      	strne	r1, [r3, #4]
 800c124:	6863      	ldr	r3, [r4, #4]
 800c126:	bf08      	it	eq
 800c128:	f8c8 1000 	streq.w	r1, [r8]
 800c12c:	5162      	str	r2, [r4, r5]
 800c12e:	604b      	str	r3, [r1, #4]
 800c130:	4630      	mov	r0, r6
 800c132:	f000 f82f 	bl	800c194 <__malloc_unlock>
 800c136:	f104 000b 	add.w	r0, r4, #11
 800c13a:	1d23      	adds	r3, r4, #4
 800c13c:	f020 0007 	bic.w	r0, r0, #7
 800c140:	1ac2      	subs	r2, r0, r3
 800c142:	bf1c      	itt	ne
 800c144:	1a1b      	subne	r3, r3, r0
 800c146:	50a3      	strne	r3, [r4, r2]
 800c148:	e7af      	b.n	800c0aa <_malloc_r+0x22>
 800c14a:	6862      	ldr	r2, [r4, #4]
 800c14c:	42a3      	cmp	r3, r4
 800c14e:	bf0c      	ite	eq
 800c150:	f8c8 2000 	streq.w	r2, [r8]
 800c154:	605a      	strne	r2, [r3, #4]
 800c156:	e7eb      	b.n	800c130 <_malloc_r+0xa8>
 800c158:	4623      	mov	r3, r4
 800c15a:	6864      	ldr	r4, [r4, #4]
 800c15c:	e7ae      	b.n	800c0bc <_malloc_r+0x34>
 800c15e:	463c      	mov	r4, r7
 800c160:	687f      	ldr	r7, [r7, #4]
 800c162:	e7b6      	b.n	800c0d2 <_malloc_r+0x4a>
 800c164:	461a      	mov	r2, r3
 800c166:	685b      	ldr	r3, [r3, #4]
 800c168:	42a3      	cmp	r3, r4
 800c16a:	d1fb      	bne.n	800c164 <_malloc_r+0xdc>
 800c16c:	2300      	movs	r3, #0
 800c16e:	6053      	str	r3, [r2, #4]
 800c170:	e7de      	b.n	800c130 <_malloc_r+0xa8>
 800c172:	230c      	movs	r3, #12
 800c174:	6033      	str	r3, [r6, #0]
 800c176:	4630      	mov	r0, r6
 800c178:	f000 f80c 	bl	800c194 <__malloc_unlock>
 800c17c:	e794      	b.n	800c0a8 <_malloc_r+0x20>
 800c17e:	6005      	str	r5, [r0, #0]
 800c180:	e7d6      	b.n	800c130 <_malloc_r+0xa8>
 800c182:	bf00      	nop
 800c184:	20001a20 	.word	0x20001a20

0800c188 <__malloc_lock>:
 800c188:	4801      	ldr	r0, [pc, #4]	@ (800c190 <__malloc_lock+0x8>)
 800c18a:	f7ff b8ba 	b.w	800b302 <__retarget_lock_acquire_recursive>
 800c18e:	bf00      	nop
 800c190:	20001a18 	.word	0x20001a18

0800c194 <__malloc_unlock>:
 800c194:	4801      	ldr	r0, [pc, #4]	@ (800c19c <__malloc_unlock+0x8>)
 800c196:	f7ff b8b5 	b.w	800b304 <__retarget_lock_release_recursive>
 800c19a:	bf00      	nop
 800c19c:	20001a18 	.word	0x20001a18

0800c1a0 <_Balloc>:
 800c1a0:	b570      	push	{r4, r5, r6, lr}
 800c1a2:	69c6      	ldr	r6, [r0, #28]
 800c1a4:	4604      	mov	r4, r0
 800c1a6:	460d      	mov	r5, r1
 800c1a8:	b976      	cbnz	r6, 800c1c8 <_Balloc+0x28>
 800c1aa:	2010      	movs	r0, #16
 800c1ac:	f7ff ff42 	bl	800c034 <malloc>
 800c1b0:	4602      	mov	r2, r0
 800c1b2:	61e0      	str	r0, [r4, #28]
 800c1b4:	b920      	cbnz	r0, 800c1c0 <_Balloc+0x20>
 800c1b6:	4b18      	ldr	r3, [pc, #96]	@ (800c218 <_Balloc+0x78>)
 800c1b8:	4818      	ldr	r0, [pc, #96]	@ (800c21c <_Balloc+0x7c>)
 800c1ba:	216b      	movs	r1, #107	@ 0x6b
 800c1bc:	f000 fc3c 	bl	800ca38 <__assert_func>
 800c1c0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800c1c4:	6006      	str	r6, [r0, #0]
 800c1c6:	60c6      	str	r6, [r0, #12]
 800c1c8:	69e6      	ldr	r6, [r4, #28]
 800c1ca:	68f3      	ldr	r3, [r6, #12]
 800c1cc:	b183      	cbz	r3, 800c1f0 <_Balloc+0x50>
 800c1ce:	69e3      	ldr	r3, [r4, #28]
 800c1d0:	68db      	ldr	r3, [r3, #12]
 800c1d2:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800c1d6:	b9b8      	cbnz	r0, 800c208 <_Balloc+0x68>
 800c1d8:	2101      	movs	r1, #1
 800c1da:	fa01 f605 	lsl.w	r6, r1, r5
 800c1de:	1d72      	adds	r2, r6, #5
 800c1e0:	0092      	lsls	r2, r2, #2
 800c1e2:	4620      	mov	r0, r4
 800c1e4:	f000 fc46 	bl	800ca74 <_calloc_r>
 800c1e8:	b160      	cbz	r0, 800c204 <_Balloc+0x64>
 800c1ea:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800c1ee:	e00e      	b.n	800c20e <_Balloc+0x6e>
 800c1f0:	2221      	movs	r2, #33	@ 0x21
 800c1f2:	2104      	movs	r1, #4
 800c1f4:	4620      	mov	r0, r4
 800c1f6:	f000 fc3d 	bl	800ca74 <_calloc_r>
 800c1fa:	69e3      	ldr	r3, [r4, #28]
 800c1fc:	60f0      	str	r0, [r6, #12]
 800c1fe:	68db      	ldr	r3, [r3, #12]
 800c200:	2b00      	cmp	r3, #0
 800c202:	d1e4      	bne.n	800c1ce <_Balloc+0x2e>
 800c204:	2000      	movs	r0, #0
 800c206:	bd70      	pop	{r4, r5, r6, pc}
 800c208:	6802      	ldr	r2, [r0, #0]
 800c20a:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800c20e:	2300      	movs	r3, #0
 800c210:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800c214:	e7f7      	b.n	800c206 <_Balloc+0x66>
 800c216:	bf00      	nop
 800c218:	0800d0f9 	.word	0x0800d0f9
 800c21c:	0800d179 	.word	0x0800d179

0800c220 <_Bfree>:
 800c220:	b570      	push	{r4, r5, r6, lr}
 800c222:	69c6      	ldr	r6, [r0, #28]
 800c224:	4605      	mov	r5, r0
 800c226:	460c      	mov	r4, r1
 800c228:	b976      	cbnz	r6, 800c248 <_Bfree+0x28>
 800c22a:	2010      	movs	r0, #16
 800c22c:	f7ff ff02 	bl	800c034 <malloc>
 800c230:	4602      	mov	r2, r0
 800c232:	61e8      	str	r0, [r5, #28]
 800c234:	b920      	cbnz	r0, 800c240 <_Bfree+0x20>
 800c236:	4b09      	ldr	r3, [pc, #36]	@ (800c25c <_Bfree+0x3c>)
 800c238:	4809      	ldr	r0, [pc, #36]	@ (800c260 <_Bfree+0x40>)
 800c23a:	218f      	movs	r1, #143	@ 0x8f
 800c23c:	f000 fbfc 	bl	800ca38 <__assert_func>
 800c240:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800c244:	6006      	str	r6, [r0, #0]
 800c246:	60c6      	str	r6, [r0, #12]
 800c248:	b13c      	cbz	r4, 800c25a <_Bfree+0x3a>
 800c24a:	69eb      	ldr	r3, [r5, #28]
 800c24c:	6862      	ldr	r2, [r4, #4]
 800c24e:	68db      	ldr	r3, [r3, #12]
 800c250:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800c254:	6021      	str	r1, [r4, #0]
 800c256:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800c25a:	bd70      	pop	{r4, r5, r6, pc}
 800c25c:	0800d0f9 	.word	0x0800d0f9
 800c260:	0800d179 	.word	0x0800d179

0800c264 <__multadd>:
 800c264:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c268:	690d      	ldr	r5, [r1, #16]
 800c26a:	4607      	mov	r7, r0
 800c26c:	460c      	mov	r4, r1
 800c26e:	461e      	mov	r6, r3
 800c270:	f101 0c14 	add.w	ip, r1, #20
 800c274:	2000      	movs	r0, #0
 800c276:	f8dc 3000 	ldr.w	r3, [ip]
 800c27a:	b299      	uxth	r1, r3
 800c27c:	fb02 6101 	mla	r1, r2, r1, r6
 800c280:	0c1e      	lsrs	r6, r3, #16
 800c282:	0c0b      	lsrs	r3, r1, #16
 800c284:	fb02 3306 	mla	r3, r2, r6, r3
 800c288:	b289      	uxth	r1, r1
 800c28a:	3001      	adds	r0, #1
 800c28c:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800c290:	4285      	cmp	r5, r0
 800c292:	f84c 1b04 	str.w	r1, [ip], #4
 800c296:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800c29a:	dcec      	bgt.n	800c276 <__multadd+0x12>
 800c29c:	b30e      	cbz	r6, 800c2e2 <__multadd+0x7e>
 800c29e:	68a3      	ldr	r3, [r4, #8]
 800c2a0:	42ab      	cmp	r3, r5
 800c2a2:	dc19      	bgt.n	800c2d8 <__multadd+0x74>
 800c2a4:	6861      	ldr	r1, [r4, #4]
 800c2a6:	4638      	mov	r0, r7
 800c2a8:	3101      	adds	r1, #1
 800c2aa:	f7ff ff79 	bl	800c1a0 <_Balloc>
 800c2ae:	4680      	mov	r8, r0
 800c2b0:	b928      	cbnz	r0, 800c2be <__multadd+0x5a>
 800c2b2:	4602      	mov	r2, r0
 800c2b4:	4b0c      	ldr	r3, [pc, #48]	@ (800c2e8 <__multadd+0x84>)
 800c2b6:	480d      	ldr	r0, [pc, #52]	@ (800c2ec <__multadd+0x88>)
 800c2b8:	21ba      	movs	r1, #186	@ 0xba
 800c2ba:	f000 fbbd 	bl	800ca38 <__assert_func>
 800c2be:	6922      	ldr	r2, [r4, #16]
 800c2c0:	3202      	adds	r2, #2
 800c2c2:	f104 010c 	add.w	r1, r4, #12
 800c2c6:	0092      	lsls	r2, r2, #2
 800c2c8:	300c      	adds	r0, #12
 800c2ca:	f000 fba7 	bl	800ca1c <memcpy>
 800c2ce:	4621      	mov	r1, r4
 800c2d0:	4638      	mov	r0, r7
 800c2d2:	f7ff ffa5 	bl	800c220 <_Bfree>
 800c2d6:	4644      	mov	r4, r8
 800c2d8:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800c2dc:	3501      	adds	r5, #1
 800c2de:	615e      	str	r6, [r3, #20]
 800c2e0:	6125      	str	r5, [r4, #16]
 800c2e2:	4620      	mov	r0, r4
 800c2e4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c2e8:	0800d168 	.word	0x0800d168
 800c2ec:	0800d179 	.word	0x0800d179

0800c2f0 <__hi0bits>:
 800c2f0:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 800c2f4:	4603      	mov	r3, r0
 800c2f6:	bf36      	itet	cc
 800c2f8:	0403      	lslcc	r3, r0, #16
 800c2fa:	2000      	movcs	r0, #0
 800c2fc:	2010      	movcc	r0, #16
 800c2fe:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800c302:	bf3c      	itt	cc
 800c304:	021b      	lslcc	r3, r3, #8
 800c306:	3008      	addcc	r0, #8
 800c308:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800c30c:	bf3c      	itt	cc
 800c30e:	011b      	lslcc	r3, r3, #4
 800c310:	3004      	addcc	r0, #4
 800c312:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800c316:	bf3c      	itt	cc
 800c318:	009b      	lslcc	r3, r3, #2
 800c31a:	3002      	addcc	r0, #2
 800c31c:	2b00      	cmp	r3, #0
 800c31e:	db05      	blt.n	800c32c <__hi0bits+0x3c>
 800c320:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 800c324:	f100 0001 	add.w	r0, r0, #1
 800c328:	bf08      	it	eq
 800c32a:	2020      	moveq	r0, #32
 800c32c:	4770      	bx	lr

0800c32e <__lo0bits>:
 800c32e:	6803      	ldr	r3, [r0, #0]
 800c330:	4602      	mov	r2, r0
 800c332:	f013 0007 	ands.w	r0, r3, #7
 800c336:	d00b      	beq.n	800c350 <__lo0bits+0x22>
 800c338:	07d9      	lsls	r1, r3, #31
 800c33a:	d421      	bmi.n	800c380 <__lo0bits+0x52>
 800c33c:	0798      	lsls	r0, r3, #30
 800c33e:	bf49      	itett	mi
 800c340:	085b      	lsrmi	r3, r3, #1
 800c342:	089b      	lsrpl	r3, r3, #2
 800c344:	2001      	movmi	r0, #1
 800c346:	6013      	strmi	r3, [r2, #0]
 800c348:	bf5c      	itt	pl
 800c34a:	6013      	strpl	r3, [r2, #0]
 800c34c:	2002      	movpl	r0, #2
 800c34e:	4770      	bx	lr
 800c350:	b299      	uxth	r1, r3
 800c352:	b909      	cbnz	r1, 800c358 <__lo0bits+0x2a>
 800c354:	0c1b      	lsrs	r3, r3, #16
 800c356:	2010      	movs	r0, #16
 800c358:	b2d9      	uxtb	r1, r3
 800c35a:	b909      	cbnz	r1, 800c360 <__lo0bits+0x32>
 800c35c:	3008      	adds	r0, #8
 800c35e:	0a1b      	lsrs	r3, r3, #8
 800c360:	0719      	lsls	r1, r3, #28
 800c362:	bf04      	itt	eq
 800c364:	091b      	lsreq	r3, r3, #4
 800c366:	3004      	addeq	r0, #4
 800c368:	0799      	lsls	r1, r3, #30
 800c36a:	bf04      	itt	eq
 800c36c:	089b      	lsreq	r3, r3, #2
 800c36e:	3002      	addeq	r0, #2
 800c370:	07d9      	lsls	r1, r3, #31
 800c372:	d403      	bmi.n	800c37c <__lo0bits+0x4e>
 800c374:	085b      	lsrs	r3, r3, #1
 800c376:	f100 0001 	add.w	r0, r0, #1
 800c37a:	d003      	beq.n	800c384 <__lo0bits+0x56>
 800c37c:	6013      	str	r3, [r2, #0]
 800c37e:	4770      	bx	lr
 800c380:	2000      	movs	r0, #0
 800c382:	4770      	bx	lr
 800c384:	2020      	movs	r0, #32
 800c386:	4770      	bx	lr

0800c388 <__i2b>:
 800c388:	b510      	push	{r4, lr}
 800c38a:	460c      	mov	r4, r1
 800c38c:	2101      	movs	r1, #1
 800c38e:	f7ff ff07 	bl	800c1a0 <_Balloc>
 800c392:	4602      	mov	r2, r0
 800c394:	b928      	cbnz	r0, 800c3a2 <__i2b+0x1a>
 800c396:	4b05      	ldr	r3, [pc, #20]	@ (800c3ac <__i2b+0x24>)
 800c398:	4805      	ldr	r0, [pc, #20]	@ (800c3b0 <__i2b+0x28>)
 800c39a:	f240 1145 	movw	r1, #325	@ 0x145
 800c39e:	f000 fb4b 	bl	800ca38 <__assert_func>
 800c3a2:	2301      	movs	r3, #1
 800c3a4:	6144      	str	r4, [r0, #20]
 800c3a6:	6103      	str	r3, [r0, #16]
 800c3a8:	bd10      	pop	{r4, pc}
 800c3aa:	bf00      	nop
 800c3ac:	0800d168 	.word	0x0800d168
 800c3b0:	0800d179 	.word	0x0800d179

0800c3b4 <__multiply>:
 800c3b4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c3b8:	4614      	mov	r4, r2
 800c3ba:	690a      	ldr	r2, [r1, #16]
 800c3bc:	6923      	ldr	r3, [r4, #16]
 800c3be:	429a      	cmp	r2, r3
 800c3c0:	bfa8      	it	ge
 800c3c2:	4623      	movge	r3, r4
 800c3c4:	460f      	mov	r7, r1
 800c3c6:	bfa4      	itt	ge
 800c3c8:	460c      	movge	r4, r1
 800c3ca:	461f      	movge	r7, r3
 800c3cc:	f8d4 a010 	ldr.w	sl, [r4, #16]
 800c3d0:	f8d7 9010 	ldr.w	r9, [r7, #16]
 800c3d4:	68a3      	ldr	r3, [r4, #8]
 800c3d6:	6861      	ldr	r1, [r4, #4]
 800c3d8:	eb0a 0609 	add.w	r6, sl, r9
 800c3dc:	42b3      	cmp	r3, r6
 800c3de:	b085      	sub	sp, #20
 800c3e0:	bfb8      	it	lt
 800c3e2:	3101      	addlt	r1, #1
 800c3e4:	f7ff fedc 	bl	800c1a0 <_Balloc>
 800c3e8:	b930      	cbnz	r0, 800c3f8 <__multiply+0x44>
 800c3ea:	4602      	mov	r2, r0
 800c3ec:	4b44      	ldr	r3, [pc, #272]	@ (800c500 <__multiply+0x14c>)
 800c3ee:	4845      	ldr	r0, [pc, #276]	@ (800c504 <__multiply+0x150>)
 800c3f0:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 800c3f4:	f000 fb20 	bl	800ca38 <__assert_func>
 800c3f8:	f100 0514 	add.w	r5, r0, #20
 800c3fc:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800c400:	462b      	mov	r3, r5
 800c402:	2200      	movs	r2, #0
 800c404:	4543      	cmp	r3, r8
 800c406:	d321      	bcc.n	800c44c <__multiply+0x98>
 800c408:	f107 0114 	add.w	r1, r7, #20
 800c40c:	f104 0214 	add.w	r2, r4, #20
 800c410:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 800c414:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 800c418:	9302      	str	r3, [sp, #8]
 800c41a:	1b13      	subs	r3, r2, r4
 800c41c:	3b15      	subs	r3, #21
 800c41e:	f023 0303 	bic.w	r3, r3, #3
 800c422:	3304      	adds	r3, #4
 800c424:	f104 0715 	add.w	r7, r4, #21
 800c428:	42ba      	cmp	r2, r7
 800c42a:	bf38      	it	cc
 800c42c:	2304      	movcc	r3, #4
 800c42e:	9301      	str	r3, [sp, #4]
 800c430:	9b02      	ldr	r3, [sp, #8]
 800c432:	9103      	str	r1, [sp, #12]
 800c434:	428b      	cmp	r3, r1
 800c436:	d80c      	bhi.n	800c452 <__multiply+0x9e>
 800c438:	2e00      	cmp	r6, #0
 800c43a:	dd03      	ble.n	800c444 <__multiply+0x90>
 800c43c:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800c440:	2b00      	cmp	r3, #0
 800c442:	d05b      	beq.n	800c4fc <__multiply+0x148>
 800c444:	6106      	str	r6, [r0, #16]
 800c446:	b005      	add	sp, #20
 800c448:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c44c:	f843 2b04 	str.w	r2, [r3], #4
 800c450:	e7d8      	b.n	800c404 <__multiply+0x50>
 800c452:	f8b1 a000 	ldrh.w	sl, [r1]
 800c456:	f1ba 0f00 	cmp.w	sl, #0
 800c45a:	d024      	beq.n	800c4a6 <__multiply+0xf2>
 800c45c:	f104 0e14 	add.w	lr, r4, #20
 800c460:	46a9      	mov	r9, r5
 800c462:	f04f 0c00 	mov.w	ip, #0
 800c466:	f85e 7b04 	ldr.w	r7, [lr], #4
 800c46a:	f8d9 3000 	ldr.w	r3, [r9]
 800c46e:	fa1f fb87 	uxth.w	fp, r7
 800c472:	b29b      	uxth	r3, r3
 800c474:	fb0a 330b 	mla	r3, sl, fp, r3
 800c478:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 800c47c:	f8d9 7000 	ldr.w	r7, [r9]
 800c480:	4463      	add	r3, ip
 800c482:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800c486:	fb0a c70b 	mla	r7, sl, fp, ip
 800c48a:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 800c48e:	b29b      	uxth	r3, r3
 800c490:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800c494:	4572      	cmp	r2, lr
 800c496:	f849 3b04 	str.w	r3, [r9], #4
 800c49a:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800c49e:	d8e2      	bhi.n	800c466 <__multiply+0xb2>
 800c4a0:	9b01      	ldr	r3, [sp, #4]
 800c4a2:	f845 c003 	str.w	ip, [r5, r3]
 800c4a6:	9b03      	ldr	r3, [sp, #12]
 800c4a8:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 800c4ac:	3104      	adds	r1, #4
 800c4ae:	f1b9 0f00 	cmp.w	r9, #0
 800c4b2:	d021      	beq.n	800c4f8 <__multiply+0x144>
 800c4b4:	682b      	ldr	r3, [r5, #0]
 800c4b6:	f104 0c14 	add.w	ip, r4, #20
 800c4ba:	46ae      	mov	lr, r5
 800c4bc:	f04f 0a00 	mov.w	sl, #0
 800c4c0:	f8bc b000 	ldrh.w	fp, [ip]
 800c4c4:	f8be 7002 	ldrh.w	r7, [lr, #2]
 800c4c8:	fb09 770b 	mla	r7, r9, fp, r7
 800c4cc:	4457      	add	r7, sl
 800c4ce:	b29b      	uxth	r3, r3
 800c4d0:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800c4d4:	f84e 3b04 	str.w	r3, [lr], #4
 800c4d8:	f85c 3b04 	ldr.w	r3, [ip], #4
 800c4dc:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800c4e0:	f8be 3000 	ldrh.w	r3, [lr]
 800c4e4:	fb09 330a 	mla	r3, r9, sl, r3
 800c4e8:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 800c4ec:	4562      	cmp	r2, ip
 800c4ee:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800c4f2:	d8e5      	bhi.n	800c4c0 <__multiply+0x10c>
 800c4f4:	9f01      	ldr	r7, [sp, #4]
 800c4f6:	51eb      	str	r3, [r5, r7]
 800c4f8:	3504      	adds	r5, #4
 800c4fa:	e799      	b.n	800c430 <__multiply+0x7c>
 800c4fc:	3e01      	subs	r6, #1
 800c4fe:	e79b      	b.n	800c438 <__multiply+0x84>
 800c500:	0800d168 	.word	0x0800d168
 800c504:	0800d179 	.word	0x0800d179

0800c508 <__pow5mult>:
 800c508:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c50c:	4615      	mov	r5, r2
 800c50e:	f012 0203 	ands.w	r2, r2, #3
 800c512:	4607      	mov	r7, r0
 800c514:	460e      	mov	r6, r1
 800c516:	d007      	beq.n	800c528 <__pow5mult+0x20>
 800c518:	4c25      	ldr	r4, [pc, #148]	@ (800c5b0 <__pow5mult+0xa8>)
 800c51a:	3a01      	subs	r2, #1
 800c51c:	2300      	movs	r3, #0
 800c51e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800c522:	f7ff fe9f 	bl	800c264 <__multadd>
 800c526:	4606      	mov	r6, r0
 800c528:	10ad      	asrs	r5, r5, #2
 800c52a:	d03d      	beq.n	800c5a8 <__pow5mult+0xa0>
 800c52c:	69fc      	ldr	r4, [r7, #28]
 800c52e:	b97c      	cbnz	r4, 800c550 <__pow5mult+0x48>
 800c530:	2010      	movs	r0, #16
 800c532:	f7ff fd7f 	bl	800c034 <malloc>
 800c536:	4602      	mov	r2, r0
 800c538:	61f8      	str	r0, [r7, #28]
 800c53a:	b928      	cbnz	r0, 800c548 <__pow5mult+0x40>
 800c53c:	4b1d      	ldr	r3, [pc, #116]	@ (800c5b4 <__pow5mult+0xac>)
 800c53e:	481e      	ldr	r0, [pc, #120]	@ (800c5b8 <__pow5mult+0xb0>)
 800c540:	f240 11b3 	movw	r1, #435	@ 0x1b3
 800c544:	f000 fa78 	bl	800ca38 <__assert_func>
 800c548:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800c54c:	6004      	str	r4, [r0, #0]
 800c54e:	60c4      	str	r4, [r0, #12]
 800c550:	f8d7 801c 	ldr.w	r8, [r7, #28]
 800c554:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800c558:	b94c      	cbnz	r4, 800c56e <__pow5mult+0x66>
 800c55a:	f240 2171 	movw	r1, #625	@ 0x271
 800c55e:	4638      	mov	r0, r7
 800c560:	f7ff ff12 	bl	800c388 <__i2b>
 800c564:	2300      	movs	r3, #0
 800c566:	f8c8 0008 	str.w	r0, [r8, #8]
 800c56a:	4604      	mov	r4, r0
 800c56c:	6003      	str	r3, [r0, #0]
 800c56e:	f04f 0900 	mov.w	r9, #0
 800c572:	07eb      	lsls	r3, r5, #31
 800c574:	d50a      	bpl.n	800c58c <__pow5mult+0x84>
 800c576:	4631      	mov	r1, r6
 800c578:	4622      	mov	r2, r4
 800c57a:	4638      	mov	r0, r7
 800c57c:	f7ff ff1a 	bl	800c3b4 <__multiply>
 800c580:	4631      	mov	r1, r6
 800c582:	4680      	mov	r8, r0
 800c584:	4638      	mov	r0, r7
 800c586:	f7ff fe4b 	bl	800c220 <_Bfree>
 800c58a:	4646      	mov	r6, r8
 800c58c:	106d      	asrs	r5, r5, #1
 800c58e:	d00b      	beq.n	800c5a8 <__pow5mult+0xa0>
 800c590:	6820      	ldr	r0, [r4, #0]
 800c592:	b938      	cbnz	r0, 800c5a4 <__pow5mult+0x9c>
 800c594:	4622      	mov	r2, r4
 800c596:	4621      	mov	r1, r4
 800c598:	4638      	mov	r0, r7
 800c59a:	f7ff ff0b 	bl	800c3b4 <__multiply>
 800c59e:	6020      	str	r0, [r4, #0]
 800c5a0:	f8c0 9000 	str.w	r9, [r0]
 800c5a4:	4604      	mov	r4, r0
 800c5a6:	e7e4      	b.n	800c572 <__pow5mult+0x6a>
 800c5a8:	4630      	mov	r0, r6
 800c5aa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c5ae:	bf00      	nop
 800c5b0:	0800d1d4 	.word	0x0800d1d4
 800c5b4:	0800d0f9 	.word	0x0800d0f9
 800c5b8:	0800d179 	.word	0x0800d179

0800c5bc <__lshift>:
 800c5bc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c5c0:	460c      	mov	r4, r1
 800c5c2:	6849      	ldr	r1, [r1, #4]
 800c5c4:	6923      	ldr	r3, [r4, #16]
 800c5c6:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800c5ca:	68a3      	ldr	r3, [r4, #8]
 800c5cc:	4607      	mov	r7, r0
 800c5ce:	4691      	mov	r9, r2
 800c5d0:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800c5d4:	f108 0601 	add.w	r6, r8, #1
 800c5d8:	42b3      	cmp	r3, r6
 800c5da:	db0b      	blt.n	800c5f4 <__lshift+0x38>
 800c5dc:	4638      	mov	r0, r7
 800c5de:	f7ff fddf 	bl	800c1a0 <_Balloc>
 800c5e2:	4605      	mov	r5, r0
 800c5e4:	b948      	cbnz	r0, 800c5fa <__lshift+0x3e>
 800c5e6:	4602      	mov	r2, r0
 800c5e8:	4b28      	ldr	r3, [pc, #160]	@ (800c68c <__lshift+0xd0>)
 800c5ea:	4829      	ldr	r0, [pc, #164]	@ (800c690 <__lshift+0xd4>)
 800c5ec:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 800c5f0:	f000 fa22 	bl	800ca38 <__assert_func>
 800c5f4:	3101      	adds	r1, #1
 800c5f6:	005b      	lsls	r3, r3, #1
 800c5f8:	e7ee      	b.n	800c5d8 <__lshift+0x1c>
 800c5fa:	2300      	movs	r3, #0
 800c5fc:	f100 0114 	add.w	r1, r0, #20
 800c600:	f100 0210 	add.w	r2, r0, #16
 800c604:	4618      	mov	r0, r3
 800c606:	4553      	cmp	r3, sl
 800c608:	db33      	blt.n	800c672 <__lshift+0xb6>
 800c60a:	6920      	ldr	r0, [r4, #16]
 800c60c:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800c610:	f104 0314 	add.w	r3, r4, #20
 800c614:	f019 091f 	ands.w	r9, r9, #31
 800c618:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800c61c:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800c620:	d02b      	beq.n	800c67a <__lshift+0xbe>
 800c622:	f1c9 0e20 	rsb	lr, r9, #32
 800c626:	468a      	mov	sl, r1
 800c628:	2200      	movs	r2, #0
 800c62a:	6818      	ldr	r0, [r3, #0]
 800c62c:	fa00 f009 	lsl.w	r0, r0, r9
 800c630:	4310      	orrs	r0, r2
 800c632:	f84a 0b04 	str.w	r0, [sl], #4
 800c636:	f853 2b04 	ldr.w	r2, [r3], #4
 800c63a:	459c      	cmp	ip, r3
 800c63c:	fa22 f20e 	lsr.w	r2, r2, lr
 800c640:	d8f3      	bhi.n	800c62a <__lshift+0x6e>
 800c642:	ebac 0304 	sub.w	r3, ip, r4
 800c646:	3b15      	subs	r3, #21
 800c648:	f023 0303 	bic.w	r3, r3, #3
 800c64c:	3304      	adds	r3, #4
 800c64e:	f104 0015 	add.w	r0, r4, #21
 800c652:	4584      	cmp	ip, r0
 800c654:	bf38      	it	cc
 800c656:	2304      	movcc	r3, #4
 800c658:	50ca      	str	r2, [r1, r3]
 800c65a:	b10a      	cbz	r2, 800c660 <__lshift+0xa4>
 800c65c:	f108 0602 	add.w	r6, r8, #2
 800c660:	3e01      	subs	r6, #1
 800c662:	4638      	mov	r0, r7
 800c664:	612e      	str	r6, [r5, #16]
 800c666:	4621      	mov	r1, r4
 800c668:	f7ff fdda 	bl	800c220 <_Bfree>
 800c66c:	4628      	mov	r0, r5
 800c66e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c672:	f842 0f04 	str.w	r0, [r2, #4]!
 800c676:	3301      	adds	r3, #1
 800c678:	e7c5      	b.n	800c606 <__lshift+0x4a>
 800c67a:	3904      	subs	r1, #4
 800c67c:	f853 2b04 	ldr.w	r2, [r3], #4
 800c680:	f841 2f04 	str.w	r2, [r1, #4]!
 800c684:	459c      	cmp	ip, r3
 800c686:	d8f9      	bhi.n	800c67c <__lshift+0xc0>
 800c688:	e7ea      	b.n	800c660 <__lshift+0xa4>
 800c68a:	bf00      	nop
 800c68c:	0800d168 	.word	0x0800d168
 800c690:	0800d179 	.word	0x0800d179

0800c694 <__mcmp>:
 800c694:	690a      	ldr	r2, [r1, #16]
 800c696:	4603      	mov	r3, r0
 800c698:	6900      	ldr	r0, [r0, #16]
 800c69a:	1a80      	subs	r0, r0, r2
 800c69c:	b530      	push	{r4, r5, lr}
 800c69e:	d10e      	bne.n	800c6be <__mcmp+0x2a>
 800c6a0:	3314      	adds	r3, #20
 800c6a2:	3114      	adds	r1, #20
 800c6a4:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 800c6a8:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800c6ac:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800c6b0:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800c6b4:	4295      	cmp	r5, r2
 800c6b6:	d003      	beq.n	800c6c0 <__mcmp+0x2c>
 800c6b8:	d205      	bcs.n	800c6c6 <__mcmp+0x32>
 800c6ba:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800c6be:	bd30      	pop	{r4, r5, pc}
 800c6c0:	42a3      	cmp	r3, r4
 800c6c2:	d3f3      	bcc.n	800c6ac <__mcmp+0x18>
 800c6c4:	e7fb      	b.n	800c6be <__mcmp+0x2a>
 800c6c6:	2001      	movs	r0, #1
 800c6c8:	e7f9      	b.n	800c6be <__mcmp+0x2a>
	...

0800c6cc <__mdiff>:
 800c6cc:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c6d0:	4689      	mov	r9, r1
 800c6d2:	4606      	mov	r6, r0
 800c6d4:	4611      	mov	r1, r2
 800c6d6:	4648      	mov	r0, r9
 800c6d8:	4614      	mov	r4, r2
 800c6da:	f7ff ffdb 	bl	800c694 <__mcmp>
 800c6de:	1e05      	subs	r5, r0, #0
 800c6e0:	d112      	bne.n	800c708 <__mdiff+0x3c>
 800c6e2:	4629      	mov	r1, r5
 800c6e4:	4630      	mov	r0, r6
 800c6e6:	f7ff fd5b 	bl	800c1a0 <_Balloc>
 800c6ea:	4602      	mov	r2, r0
 800c6ec:	b928      	cbnz	r0, 800c6fa <__mdiff+0x2e>
 800c6ee:	4b3f      	ldr	r3, [pc, #252]	@ (800c7ec <__mdiff+0x120>)
 800c6f0:	f240 2137 	movw	r1, #567	@ 0x237
 800c6f4:	483e      	ldr	r0, [pc, #248]	@ (800c7f0 <__mdiff+0x124>)
 800c6f6:	f000 f99f 	bl	800ca38 <__assert_func>
 800c6fa:	2301      	movs	r3, #1
 800c6fc:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800c700:	4610      	mov	r0, r2
 800c702:	b003      	add	sp, #12
 800c704:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c708:	bfbc      	itt	lt
 800c70a:	464b      	movlt	r3, r9
 800c70c:	46a1      	movlt	r9, r4
 800c70e:	4630      	mov	r0, r6
 800c710:	f8d9 1004 	ldr.w	r1, [r9, #4]
 800c714:	bfba      	itte	lt
 800c716:	461c      	movlt	r4, r3
 800c718:	2501      	movlt	r5, #1
 800c71a:	2500      	movge	r5, #0
 800c71c:	f7ff fd40 	bl	800c1a0 <_Balloc>
 800c720:	4602      	mov	r2, r0
 800c722:	b918      	cbnz	r0, 800c72c <__mdiff+0x60>
 800c724:	4b31      	ldr	r3, [pc, #196]	@ (800c7ec <__mdiff+0x120>)
 800c726:	f240 2145 	movw	r1, #581	@ 0x245
 800c72a:	e7e3      	b.n	800c6f4 <__mdiff+0x28>
 800c72c:	f8d9 7010 	ldr.w	r7, [r9, #16]
 800c730:	6926      	ldr	r6, [r4, #16]
 800c732:	60c5      	str	r5, [r0, #12]
 800c734:	f109 0310 	add.w	r3, r9, #16
 800c738:	f109 0514 	add.w	r5, r9, #20
 800c73c:	f104 0e14 	add.w	lr, r4, #20
 800c740:	f100 0b14 	add.w	fp, r0, #20
 800c744:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 800c748:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 800c74c:	9301      	str	r3, [sp, #4]
 800c74e:	46d9      	mov	r9, fp
 800c750:	f04f 0c00 	mov.w	ip, #0
 800c754:	9b01      	ldr	r3, [sp, #4]
 800c756:	f85e 0b04 	ldr.w	r0, [lr], #4
 800c75a:	f853 af04 	ldr.w	sl, [r3, #4]!
 800c75e:	9301      	str	r3, [sp, #4]
 800c760:	fa1f f38a 	uxth.w	r3, sl
 800c764:	4619      	mov	r1, r3
 800c766:	b283      	uxth	r3, r0
 800c768:	1acb      	subs	r3, r1, r3
 800c76a:	0c00      	lsrs	r0, r0, #16
 800c76c:	4463      	add	r3, ip
 800c76e:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 800c772:	eb00 4023 	add.w	r0, r0, r3, asr #16
 800c776:	b29b      	uxth	r3, r3
 800c778:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 800c77c:	4576      	cmp	r6, lr
 800c77e:	f849 3b04 	str.w	r3, [r9], #4
 800c782:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800c786:	d8e5      	bhi.n	800c754 <__mdiff+0x88>
 800c788:	1b33      	subs	r3, r6, r4
 800c78a:	3b15      	subs	r3, #21
 800c78c:	f023 0303 	bic.w	r3, r3, #3
 800c790:	3415      	adds	r4, #21
 800c792:	3304      	adds	r3, #4
 800c794:	42a6      	cmp	r6, r4
 800c796:	bf38      	it	cc
 800c798:	2304      	movcc	r3, #4
 800c79a:	441d      	add	r5, r3
 800c79c:	445b      	add	r3, fp
 800c79e:	461e      	mov	r6, r3
 800c7a0:	462c      	mov	r4, r5
 800c7a2:	4544      	cmp	r4, r8
 800c7a4:	d30e      	bcc.n	800c7c4 <__mdiff+0xf8>
 800c7a6:	f108 0103 	add.w	r1, r8, #3
 800c7aa:	1b49      	subs	r1, r1, r5
 800c7ac:	f021 0103 	bic.w	r1, r1, #3
 800c7b0:	3d03      	subs	r5, #3
 800c7b2:	45a8      	cmp	r8, r5
 800c7b4:	bf38      	it	cc
 800c7b6:	2100      	movcc	r1, #0
 800c7b8:	440b      	add	r3, r1
 800c7ba:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800c7be:	b191      	cbz	r1, 800c7e6 <__mdiff+0x11a>
 800c7c0:	6117      	str	r7, [r2, #16]
 800c7c2:	e79d      	b.n	800c700 <__mdiff+0x34>
 800c7c4:	f854 1b04 	ldr.w	r1, [r4], #4
 800c7c8:	46e6      	mov	lr, ip
 800c7ca:	0c08      	lsrs	r0, r1, #16
 800c7cc:	fa1c fc81 	uxtah	ip, ip, r1
 800c7d0:	4471      	add	r1, lr
 800c7d2:	eb00 402c 	add.w	r0, r0, ip, asr #16
 800c7d6:	b289      	uxth	r1, r1
 800c7d8:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800c7dc:	f846 1b04 	str.w	r1, [r6], #4
 800c7e0:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800c7e4:	e7dd      	b.n	800c7a2 <__mdiff+0xd6>
 800c7e6:	3f01      	subs	r7, #1
 800c7e8:	e7e7      	b.n	800c7ba <__mdiff+0xee>
 800c7ea:	bf00      	nop
 800c7ec:	0800d168 	.word	0x0800d168
 800c7f0:	0800d179 	.word	0x0800d179

0800c7f4 <__d2b>:
 800c7f4:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800c7f8:	460f      	mov	r7, r1
 800c7fa:	2101      	movs	r1, #1
 800c7fc:	ec59 8b10 	vmov	r8, r9, d0
 800c800:	4616      	mov	r6, r2
 800c802:	f7ff fccd 	bl	800c1a0 <_Balloc>
 800c806:	4604      	mov	r4, r0
 800c808:	b930      	cbnz	r0, 800c818 <__d2b+0x24>
 800c80a:	4602      	mov	r2, r0
 800c80c:	4b23      	ldr	r3, [pc, #140]	@ (800c89c <__d2b+0xa8>)
 800c80e:	4824      	ldr	r0, [pc, #144]	@ (800c8a0 <__d2b+0xac>)
 800c810:	f240 310f 	movw	r1, #783	@ 0x30f
 800c814:	f000 f910 	bl	800ca38 <__assert_func>
 800c818:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800c81c:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800c820:	b10d      	cbz	r5, 800c826 <__d2b+0x32>
 800c822:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800c826:	9301      	str	r3, [sp, #4]
 800c828:	f1b8 0300 	subs.w	r3, r8, #0
 800c82c:	d023      	beq.n	800c876 <__d2b+0x82>
 800c82e:	4668      	mov	r0, sp
 800c830:	9300      	str	r3, [sp, #0]
 800c832:	f7ff fd7c 	bl	800c32e <__lo0bits>
 800c836:	e9dd 1200 	ldrd	r1, r2, [sp]
 800c83a:	b1d0      	cbz	r0, 800c872 <__d2b+0x7e>
 800c83c:	f1c0 0320 	rsb	r3, r0, #32
 800c840:	fa02 f303 	lsl.w	r3, r2, r3
 800c844:	430b      	orrs	r3, r1
 800c846:	40c2      	lsrs	r2, r0
 800c848:	6163      	str	r3, [r4, #20]
 800c84a:	9201      	str	r2, [sp, #4]
 800c84c:	9b01      	ldr	r3, [sp, #4]
 800c84e:	61a3      	str	r3, [r4, #24]
 800c850:	2b00      	cmp	r3, #0
 800c852:	bf0c      	ite	eq
 800c854:	2201      	moveq	r2, #1
 800c856:	2202      	movne	r2, #2
 800c858:	6122      	str	r2, [r4, #16]
 800c85a:	b1a5      	cbz	r5, 800c886 <__d2b+0x92>
 800c85c:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 800c860:	4405      	add	r5, r0
 800c862:	603d      	str	r5, [r7, #0]
 800c864:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 800c868:	6030      	str	r0, [r6, #0]
 800c86a:	4620      	mov	r0, r4
 800c86c:	b003      	add	sp, #12
 800c86e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800c872:	6161      	str	r1, [r4, #20]
 800c874:	e7ea      	b.n	800c84c <__d2b+0x58>
 800c876:	a801      	add	r0, sp, #4
 800c878:	f7ff fd59 	bl	800c32e <__lo0bits>
 800c87c:	9b01      	ldr	r3, [sp, #4]
 800c87e:	6163      	str	r3, [r4, #20]
 800c880:	3020      	adds	r0, #32
 800c882:	2201      	movs	r2, #1
 800c884:	e7e8      	b.n	800c858 <__d2b+0x64>
 800c886:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800c88a:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 800c88e:	6038      	str	r0, [r7, #0]
 800c890:	6918      	ldr	r0, [r3, #16]
 800c892:	f7ff fd2d 	bl	800c2f0 <__hi0bits>
 800c896:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800c89a:	e7e5      	b.n	800c868 <__d2b+0x74>
 800c89c:	0800d168 	.word	0x0800d168
 800c8a0:	0800d179 	.word	0x0800d179

0800c8a4 <__sflush_r>:
 800c8a4:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800c8a8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c8ac:	0716      	lsls	r6, r2, #28
 800c8ae:	4605      	mov	r5, r0
 800c8b0:	460c      	mov	r4, r1
 800c8b2:	d454      	bmi.n	800c95e <__sflush_r+0xba>
 800c8b4:	684b      	ldr	r3, [r1, #4]
 800c8b6:	2b00      	cmp	r3, #0
 800c8b8:	dc02      	bgt.n	800c8c0 <__sflush_r+0x1c>
 800c8ba:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800c8bc:	2b00      	cmp	r3, #0
 800c8be:	dd48      	ble.n	800c952 <__sflush_r+0xae>
 800c8c0:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800c8c2:	2e00      	cmp	r6, #0
 800c8c4:	d045      	beq.n	800c952 <__sflush_r+0xae>
 800c8c6:	2300      	movs	r3, #0
 800c8c8:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800c8cc:	682f      	ldr	r7, [r5, #0]
 800c8ce:	6a21      	ldr	r1, [r4, #32]
 800c8d0:	602b      	str	r3, [r5, #0]
 800c8d2:	d030      	beq.n	800c936 <__sflush_r+0x92>
 800c8d4:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800c8d6:	89a3      	ldrh	r3, [r4, #12]
 800c8d8:	0759      	lsls	r1, r3, #29
 800c8da:	d505      	bpl.n	800c8e8 <__sflush_r+0x44>
 800c8dc:	6863      	ldr	r3, [r4, #4]
 800c8de:	1ad2      	subs	r2, r2, r3
 800c8e0:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800c8e2:	b10b      	cbz	r3, 800c8e8 <__sflush_r+0x44>
 800c8e4:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800c8e6:	1ad2      	subs	r2, r2, r3
 800c8e8:	2300      	movs	r3, #0
 800c8ea:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800c8ec:	6a21      	ldr	r1, [r4, #32]
 800c8ee:	4628      	mov	r0, r5
 800c8f0:	47b0      	blx	r6
 800c8f2:	1c43      	adds	r3, r0, #1
 800c8f4:	89a3      	ldrh	r3, [r4, #12]
 800c8f6:	d106      	bne.n	800c906 <__sflush_r+0x62>
 800c8f8:	6829      	ldr	r1, [r5, #0]
 800c8fa:	291d      	cmp	r1, #29
 800c8fc:	d82b      	bhi.n	800c956 <__sflush_r+0xb2>
 800c8fe:	4a2a      	ldr	r2, [pc, #168]	@ (800c9a8 <__sflush_r+0x104>)
 800c900:	410a      	asrs	r2, r1
 800c902:	07d6      	lsls	r6, r2, #31
 800c904:	d427      	bmi.n	800c956 <__sflush_r+0xb2>
 800c906:	2200      	movs	r2, #0
 800c908:	6062      	str	r2, [r4, #4]
 800c90a:	04d9      	lsls	r1, r3, #19
 800c90c:	6922      	ldr	r2, [r4, #16]
 800c90e:	6022      	str	r2, [r4, #0]
 800c910:	d504      	bpl.n	800c91c <__sflush_r+0x78>
 800c912:	1c42      	adds	r2, r0, #1
 800c914:	d101      	bne.n	800c91a <__sflush_r+0x76>
 800c916:	682b      	ldr	r3, [r5, #0]
 800c918:	b903      	cbnz	r3, 800c91c <__sflush_r+0x78>
 800c91a:	6560      	str	r0, [r4, #84]	@ 0x54
 800c91c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800c91e:	602f      	str	r7, [r5, #0]
 800c920:	b1b9      	cbz	r1, 800c952 <__sflush_r+0xae>
 800c922:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800c926:	4299      	cmp	r1, r3
 800c928:	d002      	beq.n	800c930 <__sflush_r+0x8c>
 800c92a:	4628      	mov	r0, r5
 800c92c:	f7ff fb38 	bl	800bfa0 <_free_r>
 800c930:	2300      	movs	r3, #0
 800c932:	6363      	str	r3, [r4, #52]	@ 0x34
 800c934:	e00d      	b.n	800c952 <__sflush_r+0xae>
 800c936:	2301      	movs	r3, #1
 800c938:	4628      	mov	r0, r5
 800c93a:	47b0      	blx	r6
 800c93c:	4602      	mov	r2, r0
 800c93e:	1c50      	adds	r0, r2, #1
 800c940:	d1c9      	bne.n	800c8d6 <__sflush_r+0x32>
 800c942:	682b      	ldr	r3, [r5, #0]
 800c944:	2b00      	cmp	r3, #0
 800c946:	d0c6      	beq.n	800c8d6 <__sflush_r+0x32>
 800c948:	2b1d      	cmp	r3, #29
 800c94a:	d001      	beq.n	800c950 <__sflush_r+0xac>
 800c94c:	2b16      	cmp	r3, #22
 800c94e:	d11e      	bne.n	800c98e <__sflush_r+0xea>
 800c950:	602f      	str	r7, [r5, #0]
 800c952:	2000      	movs	r0, #0
 800c954:	e022      	b.n	800c99c <__sflush_r+0xf8>
 800c956:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800c95a:	b21b      	sxth	r3, r3
 800c95c:	e01b      	b.n	800c996 <__sflush_r+0xf2>
 800c95e:	690f      	ldr	r7, [r1, #16]
 800c960:	2f00      	cmp	r7, #0
 800c962:	d0f6      	beq.n	800c952 <__sflush_r+0xae>
 800c964:	0793      	lsls	r3, r2, #30
 800c966:	680e      	ldr	r6, [r1, #0]
 800c968:	bf08      	it	eq
 800c96a:	694b      	ldreq	r3, [r1, #20]
 800c96c:	600f      	str	r7, [r1, #0]
 800c96e:	bf18      	it	ne
 800c970:	2300      	movne	r3, #0
 800c972:	eba6 0807 	sub.w	r8, r6, r7
 800c976:	608b      	str	r3, [r1, #8]
 800c978:	f1b8 0f00 	cmp.w	r8, #0
 800c97c:	dde9      	ble.n	800c952 <__sflush_r+0xae>
 800c97e:	6a21      	ldr	r1, [r4, #32]
 800c980:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800c982:	4643      	mov	r3, r8
 800c984:	463a      	mov	r2, r7
 800c986:	4628      	mov	r0, r5
 800c988:	47b0      	blx	r6
 800c98a:	2800      	cmp	r0, #0
 800c98c:	dc08      	bgt.n	800c9a0 <__sflush_r+0xfc>
 800c98e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c992:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800c996:	81a3      	strh	r3, [r4, #12]
 800c998:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800c99c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c9a0:	4407      	add	r7, r0
 800c9a2:	eba8 0800 	sub.w	r8, r8, r0
 800c9a6:	e7e7      	b.n	800c978 <__sflush_r+0xd4>
 800c9a8:	dfbffffe 	.word	0xdfbffffe

0800c9ac <_fflush_r>:
 800c9ac:	b538      	push	{r3, r4, r5, lr}
 800c9ae:	690b      	ldr	r3, [r1, #16]
 800c9b0:	4605      	mov	r5, r0
 800c9b2:	460c      	mov	r4, r1
 800c9b4:	b913      	cbnz	r3, 800c9bc <_fflush_r+0x10>
 800c9b6:	2500      	movs	r5, #0
 800c9b8:	4628      	mov	r0, r5
 800c9ba:	bd38      	pop	{r3, r4, r5, pc}
 800c9bc:	b118      	cbz	r0, 800c9c6 <_fflush_r+0x1a>
 800c9be:	6a03      	ldr	r3, [r0, #32]
 800c9c0:	b90b      	cbnz	r3, 800c9c6 <_fflush_r+0x1a>
 800c9c2:	f7fe fba7 	bl	800b114 <__sinit>
 800c9c6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c9ca:	2b00      	cmp	r3, #0
 800c9cc:	d0f3      	beq.n	800c9b6 <_fflush_r+0xa>
 800c9ce:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800c9d0:	07d0      	lsls	r0, r2, #31
 800c9d2:	d404      	bmi.n	800c9de <_fflush_r+0x32>
 800c9d4:	0599      	lsls	r1, r3, #22
 800c9d6:	d402      	bmi.n	800c9de <_fflush_r+0x32>
 800c9d8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800c9da:	f7fe fc92 	bl	800b302 <__retarget_lock_acquire_recursive>
 800c9de:	4628      	mov	r0, r5
 800c9e0:	4621      	mov	r1, r4
 800c9e2:	f7ff ff5f 	bl	800c8a4 <__sflush_r>
 800c9e6:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800c9e8:	07da      	lsls	r2, r3, #31
 800c9ea:	4605      	mov	r5, r0
 800c9ec:	d4e4      	bmi.n	800c9b8 <_fflush_r+0xc>
 800c9ee:	89a3      	ldrh	r3, [r4, #12]
 800c9f0:	059b      	lsls	r3, r3, #22
 800c9f2:	d4e1      	bmi.n	800c9b8 <_fflush_r+0xc>
 800c9f4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800c9f6:	f7fe fc85 	bl	800b304 <__retarget_lock_release_recursive>
 800c9fa:	e7dd      	b.n	800c9b8 <_fflush_r+0xc>

0800c9fc <_sbrk_r>:
 800c9fc:	b538      	push	{r3, r4, r5, lr}
 800c9fe:	4d06      	ldr	r5, [pc, #24]	@ (800ca18 <_sbrk_r+0x1c>)
 800ca00:	2300      	movs	r3, #0
 800ca02:	4604      	mov	r4, r0
 800ca04:	4608      	mov	r0, r1
 800ca06:	602b      	str	r3, [r5, #0]
 800ca08:	f7f5 fe8a 	bl	8002720 <_sbrk>
 800ca0c:	1c43      	adds	r3, r0, #1
 800ca0e:	d102      	bne.n	800ca16 <_sbrk_r+0x1a>
 800ca10:	682b      	ldr	r3, [r5, #0]
 800ca12:	b103      	cbz	r3, 800ca16 <_sbrk_r+0x1a>
 800ca14:	6023      	str	r3, [r4, #0]
 800ca16:	bd38      	pop	{r3, r4, r5, pc}
 800ca18:	20001a14 	.word	0x20001a14

0800ca1c <memcpy>:
 800ca1c:	440a      	add	r2, r1
 800ca1e:	4291      	cmp	r1, r2
 800ca20:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
 800ca24:	d100      	bne.n	800ca28 <memcpy+0xc>
 800ca26:	4770      	bx	lr
 800ca28:	b510      	push	{r4, lr}
 800ca2a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800ca2e:	f803 4f01 	strb.w	r4, [r3, #1]!
 800ca32:	4291      	cmp	r1, r2
 800ca34:	d1f9      	bne.n	800ca2a <memcpy+0xe>
 800ca36:	bd10      	pop	{r4, pc}

0800ca38 <__assert_func>:
 800ca38:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800ca3a:	4614      	mov	r4, r2
 800ca3c:	461a      	mov	r2, r3
 800ca3e:	4b09      	ldr	r3, [pc, #36]	@ (800ca64 <__assert_func+0x2c>)
 800ca40:	681b      	ldr	r3, [r3, #0]
 800ca42:	4605      	mov	r5, r0
 800ca44:	68d8      	ldr	r0, [r3, #12]
 800ca46:	b954      	cbnz	r4, 800ca5e <__assert_func+0x26>
 800ca48:	4b07      	ldr	r3, [pc, #28]	@ (800ca68 <__assert_func+0x30>)
 800ca4a:	461c      	mov	r4, r3
 800ca4c:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800ca50:	9100      	str	r1, [sp, #0]
 800ca52:	462b      	mov	r3, r5
 800ca54:	4905      	ldr	r1, [pc, #20]	@ (800ca6c <__assert_func+0x34>)
 800ca56:	f000 f841 	bl	800cadc <fiprintf>
 800ca5a:	f000 f851 	bl	800cb00 <abort>
 800ca5e:	4b04      	ldr	r3, [pc, #16]	@ (800ca70 <__assert_func+0x38>)
 800ca60:	e7f4      	b.n	800ca4c <__assert_func+0x14>
 800ca62:	bf00      	nop
 800ca64:	200001a0 	.word	0x200001a0
 800ca68:	0800d315 	.word	0x0800d315
 800ca6c:	0800d2e7 	.word	0x0800d2e7
 800ca70:	0800d2da 	.word	0x0800d2da

0800ca74 <_calloc_r>:
 800ca74:	b570      	push	{r4, r5, r6, lr}
 800ca76:	fba1 5402 	umull	r5, r4, r1, r2
 800ca7a:	b93c      	cbnz	r4, 800ca8c <_calloc_r+0x18>
 800ca7c:	4629      	mov	r1, r5
 800ca7e:	f7ff fb03 	bl	800c088 <_malloc_r>
 800ca82:	4606      	mov	r6, r0
 800ca84:	b928      	cbnz	r0, 800ca92 <_calloc_r+0x1e>
 800ca86:	2600      	movs	r6, #0
 800ca88:	4630      	mov	r0, r6
 800ca8a:	bd70      	pop	{r4, r5, r6, pc}
 800ca8c:	220c      	movs	r2, #12
 800ca8e:	6002      	str	r2, [r0, #0]
 800ca90:	e7f9      	b.n	800ca86 <_calloc_r+0x12>
 800ca92:	462a      	mov	r2, r5
 800ca94:	4621      	mov	r1, r4
 800ca96:	f7fe fbb6 	bl	800b206 <memset>
 800ca9a:	e7f5      	b.n	800ca88 <_calloc_r+0x14>

0800ca9c <__ascii_mbtowc>:
 800ca9c:	b082      	sub	sp, #8
 800ca9e:	b901      	cbnz	r1, 800caa2 <__ascii_mbtowc+0x6>
 800caa0:	a901      	add	r1, sp, #4
 800caa2:	b142      	cbz	r2, 800cab6 <__ascii_mbtowc+0x1a>
 800caa4:	b14b      	cbz	r3, 800caba <__ascii_mbtowc+0x1e>
 800caa6:	7813      	ldrb	r3, [r2, #0]
 800caa8:	600b      	str	r3, [r1, #0]
 800caaa:	7812      	ldrb	r2, [r2, #0]
 800caac:	1e10      	subs	r0, r2, #0
 800caae:	bf18      	it	ne
 800cab0:	2001      	movne	r0, #1
 800cab2:	b002      	add	sp, #8
 800cab4:	4770      	bx	lr
 800cab6:	4610      	mov	r0, r2
 800cab8:	e7fb      	b.n	800cab2 <__ascii_mbtowc+0x16>
 800caba:	f06f 0001 	mvn.w	r0, #1
 800cabe:	e7f8      	b.n	800cab2 <__ascii_mbtowc+0x16>

0800cac0 <__ascii_wctomb>:
 800cac0:	4603      	mov	r3, r0
 800cac2:	4608      	mov	r0, r1
 800cac4:	b141      	cbz	r1, 800cad8 <__ascii_wctomb+0x18>
 800cac6:	2aff      	cmp	r2, #255	@ 0xff
 800cac8:	d904      	bls.n	800cad4 <__ascii_wctomb+0x14>
 800caca:	228a      	movs	r2, #138	@ 0x8a
 800cacc:	601a      	str	r2, [r3, #0]
 800cace:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800cad2:	4770      	bx	lr
 800cad4:	700a      	strb	r2, [r1, #0]
 800cad6:	2001      	movs	r0, #1
 800cad8:	4770      	bx	lr
	...

0800cadc <fiprintf>:
 800cadc:	b40e      	push	{r1, r2, r3}
 800cade:	b503      	push	{r0, r1, lr}
 800cae0:	4601      	mov	r1, r0
 800cae2:	ab03      	add	r3, sp, #12
 800cae4:	4805      	ldr	r0, [pc, #20]	@ (800cafc <fiprintf+0x20>)
 800cae6:	f853 2b04 	ldr.w	r2, [r3], #4
 800caea:	6800      	ldr	r0, [r0, #0]
 800caec:	9301      	str	r3, [sp, #4]
 800caee:	f000 f837 	bl	800cb60 <_vfiprintf_r>
 800caf2:	b002      	add	sp, #8
 800caf4:	f85d eb04 	ldr.w	lr, [sp], #4
 800caf8:	b003      	add	sp, #12
 800cafa:	4770      	bx	lr
 800cafc:	200001a0 	.word	0x200001a0

0800cb00 <abort>:
 800cb00:	b508      	push	{r3, lr}
 800cb02:	2006      	movs	r0, #6
 800cb04:	f000 fa00 	bl	800cf08 <raise>
 800cb08:	2001      	movs	r0, #1
 800cb0a:	f7f5 fd91 	bl	8002630 <_exit>

0800cb0e <__sfputc_r>:
 800cb0e:	6893      	ldr	r3, [r2, #8]
 800cb10:	3b01      	subs	r3, #1
 800cb12:	2b00      	cmp	r3, #0
 800cb14:	b410      	push	{r4}
 800cb16:	6093      	str	r3, [r2, #8]
 800cb18:	da08      	bge.n	800cb2c <__sfputc_r+0x1e>
 800cb1a:	6994      	ldr	r4, [r2, #24]
 800cb1c:	42a3      	cmp	r3, r4
 800cb1e:	db01      	blt.n	800cb24 <__sfputc_r+0x16>
 800cb20:	290a      	cmp	r1, #10
 800cb22:	d103      	bne.n	800cb2c <__sfputc_r+0x1e>
 800cb24:	f85d 4b04 	ldr.w	r4, [sp], #4
 800cb28:	f000 b932 	b.w	800cd90 <__swbuf_r>
 800cb2c:	6813      	ldr	r3, [r2, #0]
 800cb2e:	1c58      	adds	r0, r3, #1
 800cb30:	6010      	str	r0, [r2, #0]
 800cb32:	7019      	strb	r1, [r3, #0]
 800cb34:	4608      	mov	r0, r1
 800cb36:	f85d 4b04 	ldr.w	r4, [sp], #4
 800cb3a:	4770      	bx	lr

0800cb3c <__sfputs_r>:
 800cb3c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cb3e:	4606      	mov	r6, r0
 800cb40:	460f      	mov	r7, r1
 800cb42:	4614      	mov	r4, r2
 800cb44:	18d5      	adds	r5, r2, r3
 800cb46:	42ac      	cmp	r4, r5
 800cb48:	d101      	bne.n	800cb4e <__sfputs_r+0x12>
 800cb4a:	2000      	movs	r0, #0
 800cb4c:	e007      	b.n	800cb5e <__sfputs_r+0x22>
 800cb4e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800cb52:	463a      	mov	r2, r7
 800cb54:	4630      	mov	r0, r6
 800cb56:	f7ff ffda 	bl	800cb0e <__sfputc_r>
 800cb5a:	1c43      	adds	r3, r0, #1
 800cb5c:	d1f3      	bne.n	800cb46 <__sfputs_r+0xa>
 800cb5e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800cb60 <_vfiprintf_r>:
 800cb60:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cb64:	460d      	mov	r5, r1
 800cb66:	b09d      	sub	sp, #116	@ 0x74
 800cb68:	4614      	mov	r4, r2
 800cb6a:	4698      	mov	r8, r3
 800cb6c:	4606      	mov	r6, r0
 800cb6e:	b118      	cbz	r0, 800cb78 <_vfiprintf_r+0x18>
 800cb70:	6a03      	ldr	r3, [r0, #32]
 800cb72:	b90b      	cbnz	r3, 800cb78 <_vfiprintf_r+0x18>
 800cb74:	f7fe face 	bl	800b114 <__sinit>
 800cb78:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800cb7a:	07d9      	lsls	r1, r3, #31
 800cb7c:	d405      	bmi.n	800cb8a <_vfiprintf_r+0x2a>
 800cb7e:	89ab      	ldrh	r3, [r5, #12]
 800cb80:	059a      	lsls	r2, r3, #22
 800cb82:	d402      	bmi.n	800cb8a <_vfiprintf_r+0x2a>
 800cb84:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800cb86:	f7fe fbbc 	bl	800b302 <__retarget_lock_acquire_recursive>
 800cb8a:	89ab      	ldrh	r3, [r5, #12]
 800cb8c:	071b      	lsls	r3, r3, #28
 800cb8e:	d501      	bpl.n	800cb94 <_vfiprintf_r+0x34>
 800cb90:	692b      	ldr	r3, [r5, #16]
 800cb92:	b99b      	cbnz	r3, 800cbbc <_vfiprintf_r+0x5c>
 800cb94:	4629      	mov	r1, r5
 800cb96:	4630      	mov	r0, r6
 800cb98:	f000 f938 	bl	800ce0c <__swsetup_r>
 800cb9c:	b170      	cbz	r0, 800cbbc <_vfiprintf_r+0x5c>
 800cb9e:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800cba0:	07dc      	lsls	r4, r3, #31
 800cba2:	d504      	bpl.n	800cbae <_vfiprintf_r+0x4e>
 800cba4:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800cba8:	b01d      	add	sp, #116	@ 0x74
 800cbaa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cbae:	89ab      	ldrh	r3, [r5, #12]
 800cbb0:	0598      	lsls	r0, r3, #22
 800cbb2:	d4f7      	bmi.n	800cba4 <_vfiprintf_r+0x44>
 800cbb4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800cbb6:	f7fe fba5 	bl	800b304 <__retarget_lock_release_recursive>
 800cbba:	e7f3      	b.n	800cba4 <_vfiprintf_r+0x44>
 800cbbc:	2300      	movs	r3, #0
 800cbbe:	9309      	str	r3, [sp, #36]	@ 0x24
 800cbc0:	2320      	movs	r3, #32
 800cbc2:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800cbc6:	f8cd 800c 	str.w	r8, [sp, #12]
 800cbca:	2330      	movs	r3, #48	@ 0x30
 800cbcc:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800cd7c <_vfiprintf_r+0x21c>
 800cbd0:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800cbd4:	f04f 0901 	mov.w	r9, #1
 800cbd8:	4623      	mov	r3, r4
 800cbda:	469a      	mov	sl, r3
 800cbdc:	f813 2b01 	ldrb.w	r2, [r3], #1
 800cbe0:	b10a      	cbz	r2, 800cbe6 <_vfiprintf_r+0x86>
 800cbe2:	2a25      	cmp	r2, #37	@ 0x25
 800cbe4:	d1f9      	bne.n	800cbda <_vfiprintf_r+0x7a>
 800cbe6:	ebba 0b04 	subs.w	fp, sl, r4
 800cbea:	d00b      	beq.n	800cc04 <_vfiprintf_r+0xa4>
 800cbec:	465b      	mov	r3, fp
 800cbee:	4622      	mov	r2, r4
 800cbf0:	4629      	mov	r1, r5
 800cbf2:	4630      	mov	r0, r6
 800cbf4:	f7ff ffa2 	bl	800cb3c <__sfputs_r>
 800cbf8:	3001      	adds	r0, #1
 800cbfa:	f000 80a7 	beq.w	800cd4c <_vfiprintf_r+0x1ec>
 800cbfe:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800cc00:	445a      	add	r2, fp
 800cc02:	9209      	str	r2, [sp, #36]	@ 0x24
 800cc04:	f89a 3000 	ldrb.w	r3, [sl]
 800cc08:	2b00      	cmp	r3, #0
 800cc0a:	f000 809f 	beq.w	800cd4c <_vfiprintf_r+0x1ec>
 800cc0e:	2300      	movs	r3, #0
 800cc10:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800cc14:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800cc18:	f10a 0a01 	add.w	sl, sl, #1
 800cc1c:	9304      	str	r3, [sp, #16]
 800cc1e:	9307      	str	r3, [sp, #28]
 800cc20:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800cc24:	931a      	str	r3, [sp, #104]	@ 0x68
 800cc26:	4654      	mov	r4, sl
 800cc28:	2205      	movs	r2, #5
 800cc2a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800cc2e:	4853      	ldr	r0, [pc, #332]	@ (800cd7c <_vfiprintf_r+0x21c>)
 800cc30:	f7f3 faf6 	bl	8000220 <memchr>
 800cc34:	9a04      	ldr	r2, [sp, #16]
 800cc36:	b9d8      	cbnz	r0, 800cc70 <_vfiprintf_r+0x110>
 800cc38:	06d1      	lsls	r1, r2, #27
 800cc3a:	bf44      	itt	mi
 800cc3c:	2320      	movmi	r3, #32
 800cc3e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800cc42:	0713      	lsls	r3, r2, #28
 800cc44:	bf44      	itt	mi
 800cc46:	232b      	movmi	r3, #43	@ 0x2b
 800cc48:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800cc4c:	f89a 3000 	ldrb.w	r3, [sl]
 800cc50:	2b2a      	cmp	r3, #42	@ 0x2a
 800cc52:	d015      	beq.n	800cc80 <_vfiprintf_r+0x120>
 800cc54:	9a07      	ldr	r2, [sp, #28]
 800cc56:	4654      	mov	r4, sl
 800cc58:	2000      	movs	r0, #0
 800cc5a:	f04f 0c0a 	mov.w	ip, #10
 800cc5e:	4621      	mov	r1, r4
 800cc60:	f811 3b01 	ldrb.w	r3, [r1], #1
 800cc64:	3b30      	subs	r3, #48	@ 0x30
 800cc66:	2b09      	cmp	r3, #9
 800cc68:	d94b      	bls.n	800cd02 <_vfiprintf_r+0x1a2>
 800cc6a:	b1b0      	cbz	r0, 800cc9a <_vfiprintf_r+0x13a>
 800cc6c:	9207      	str	r2, [sp, #28]
 800cc6e:	e014      	b.n	800cc9a <_vfiprintf_r+0x13a>
 800cc70:	eba0 0308 	sub.w	r3, r0, r8
 800cc74:	fa09 f303 	lsl.w	r3, r9, r3
 800cc78:	4313      	orrs	r3, r2
 800cc7a:	9304      	str	r3, [sp, #16]
 800cc7c:	46a2      	mov	sl, r4
 800cc7e:	e7d2      	b.n	800cc26 <_vfiprintf_r+0xc6>
 800cc80:	9b03      	ldr	r3, [sp, #12]
 800cc82:	1d19      	adds	r1, r3, #4
 800cc84:	681b      	ldr	r3, [r3, #0]
 800cc86:	9103      	str	r1, [sp, #12]
 800cc88:	2b00      	cmp	r3, #0
 800cc8a:	bfbb      	ittet	lt
 800cc8c:	425b      	neglt	r3, r3
 800cc8e:	f042 0202 	orrlt.w	r2, r2, #2
 800cc92:	9307      	strge	r3, [sp, #28]
 800cc94:	9307      	strlt	r3, [sp, #28]
 800cc96:	bfb8      	it	lt
 800cc98:	9204      	strlt	r2, [sp, #16]
 800cc9a:	7823      	ldrb	r3, [r4, #0]
 800cc9c:	2b2e      	cmp	r3, #46	@ 0x2e
 800cc9e:	d10a      	bne.n	800ccb6 <_vfiprintf_r+0x156>
 800cca0:	7863      	ldrb	r3, [r4, #1]
 800cca2:	2b2a      	cmp	r3, #42	@ 0x2a
 800cca4:	d132      	bne.n	800cd0c <_vfiprintf_r+0x1ac>
 800cca6:	9b03      	ldr	r3, [sp, #12]
 800cca8:	1d1a      	adds	r2, r3, #4
 800ccaa:	681b      	ldr	r3, [r3, #0]
 800ccac:	9203      	str	r2, [sp, #12]
 800ccae:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800ccb2:	3402      	adds	r4, #2
 800ccb4:	9305      	str	r3, [sp, #20]
 800ccb6:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800cd8c <_vfiprintf_r+0x22c>
 800ccba:	7821      	ldrb	r1, [r4, #0]
 800ccbc:	2203      	movs	r2, #3
 800ccbe:	4650      	mov	r0, sl
 800ccc0:	f7f3 faae 	bl	8000220 <memchr>
 800ccc4:	b138      	cbz	r0, 800ccd6 <_vfiprintf_r+0x176>
 800ccc6:	9b04      	ldr	r3, [sp, #16]
 800ccc8:	eba0 000a 	sub.w	r0, r0, sl
 800cccc:	2240      	movs	r2, #64	@ 0x40
 800ccce:	4082      	lsls	r2, r0
 800ccd0:	4313      	orrs	r3, r2
 800ccd2:	3401      	adds	r4, #1
 800ccd4:	9304      	str	r3, [sp, #16]
 800ccd6:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ccda:	4829      	ldr	r0, [pc, #164]	@ (800cd80 <_vfiprintf_r+0x220>)
 800ccdc:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800cce0:	2206      	movs	r2, #6
 800cce2:	f7f3 fa9d 	bl	8000220 <memchr>
 800cce6:	2800      	cmp	r0, #0
 800cce8:	d03f      	beq.n	800cd6a <_vfiprintf_r+0x20a>
 800ccea:	4b26      	ldr	r3, [pc, #152]	@ (800cd84 <_vfiprintf_r+0x224>)
 800ccec:	bb1b      	cbnz	r3, 800cd36 <_vfiprintf_r+0x1d6>
 800ccee:	9b03      	ldr	r3, [sp, #12]
 800ccf0:	3307      	adds	r3, #7
 800ccf2:	f023 0307 	bic.w	r3, r3, #7
 800ccf6:	3308      	adds	r3, #8
 800ccf8:	9303      	str	r3, [sp, #12]
 800ccfa:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ccfc:	443b      	add	r3, r7
 800ccfe:	9309      	str	r3, [sp, #36]	@ 0x24
 800cd00:	e76a      	b.n	800cbd8 <_vfiprintf_r+0x78>
 800cd02:	fb0c 3202 	mla	r2, ip, r2, r3
 800cd06:	460c      	mov	r4, r1
 800cd08:	2001      	movs	r0, #1
 800cd0a:	e7a8      	b.n	800cc5e <_vfiprintf_r+0xfe>
 800cd0c:	2300      	movs	r3, #0
 800cd0e:	3401      	adds	r4, #1
 800cd10:	9305      	str	r3, [sp, #20]
 800cd12:	4619      	mov	r1, r3
 800cd14:	f04f 0c0a 	mov.w	ip, #10
 800cd18:	4620      	mov	r0, r4
 800cd1a:	f810 2b01 	ldrb.w	r2, [r0], #1
 800cd1e:	3a30      	subs	r2, #48	@ 0x30
 800cd20:	2a09      	cmp	r2, #9
 800cd22:	d903      	bls.n	800cd2c <_vfiprintf_r+0x1cc>
 800cd24:	2b00      	cmp	r3, #0
 800cd26:	d0c6      	beq.n	800ccb6 <_vfiprintf_r+0x156>
 800cd28:	9105      	str	r1, [sp, #20]
 800cd2a:	e7c4      	b.n	800ccb6 <_vfiprintf_r+0x156>
 800cd2c:	fb0c 2101 	mla	r1, ip, r1, r2
 800cd30:	4604      	mov	r4, r0
 800cd32:	2301      	movs	r3, #1
 800cd34:	e7f0      	b.n	800cd18 <_vfiprintf_r+0x1b8>
 800cd36:	ab03      	add	r3, sp, #12
 800cd38:	9300      	str	r3, [sp, #0]
 800cd3a:	462a      	mov	r2, r5
 800cd3c:	4b12      	ldr	r3, [pc, #72]	@ (800cd88 <_vfiprintf_r+0x228>)
 800cd3e:	a904      	add	r1, sp, #16
 800cd40:	4630      	mov	r0, r6
 800cd42:	f7fd fda3 	bl	800a88c <_printf_float>
 800cd46:	4607      	mov	r7, r0
 800cd48:	1c78      	adds	r0, r7, #1
 800cd4a:	d1d6      	bne.n	800ccfa <_vfiprintf_r+0x19a>
 800cd4c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800cd4e:	07d9      	lsls	r1, r3, #31
 800cd50:	d405      	bmi.n	800cd5e <_vfiprintf_r+0x1fe>
 800cd52:	89ab      	ldrh	r3, [r5, #12]
 800cd54:	059a      	lsls	r2, r3, #22
 800cd56:	d402      	bmi.n	800cd5e <_vfiprintf_r+0x1fe>
 800cd58:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800cd5a:	f7fe fad3 	bl	800b304 <__retarget_lock_release_recursive>
 800cd5e:	89ab      	ldrh	r3, [r5, #12]
 800cd60:	065b      	lsls	r3, r3, #25
 800cd62:	f53f af1f 	bmi.w	800cba4 <_vfiprintf_r+0x44>
 800cd66:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800cd68:	e71e      	b.n	800cba8 <_vfiprintf_r+0x48>
 800cd6a:	ab03      	add	r3, sp, #12
 800cd6c:	9300      	str	r3, [sp, #0]
 800cd6e:	462a      	mov	r2, r5
 800cd70:	4b05      	ldr	r3, [pc, #20]	@ (800cd88 <_vfiprintf_r+0x228>)
 800cd72:	a904      	add	r1, sp, #16
 800cd74:	4630      	mov	r0, r6
 800cd76:	f7fe f821 	bl	800adbc <_printf_i>
 800cd7a:	e7e4      	b.n	800cd46 <_vfiprintf_r+0x1e6>
 800cd7c:	0800d417 	.word	0x0800d417
 800cd80:	0800d421 	.word	0x0800d421
 800cd84:	0800a88d 	.word	0x0800a88d
 800cd88:	0800cb3d 	.word	0x0800cb3d
 800cd8c:	0800d41d 	.word	0x0800d41d

0800cd90 <__swbuf_r>:
 800cd90:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cd92:	460e      	mov	r6, r1
 800cd94:	4614      	mov	r4, r2
 800cd96:	4605      	mov	r5, r0
 800cd98:	b118      	cbz	r0, 800cda2 <__swbuf_r+0x12>
 800cd9a:	6a03      	ldr	r3, [r0, #32]
 800cd9c:	b90b      	cbnz	r3, 800cda2 <__swbuf_r+0x12>
 800cd9e:	f7fe f9b9 	bl	800b114 <__sinit>
 800cda2:	69a3      	ldr	r3, [r4, #24]
 800cda4:	60a3      	str	r3, [r4, #8]
 800cda6:	89a3      	ldrh	r3, [r4, #12]
 800cda8:	071a      	lsls	r2, r3, #28
 800cdaa:	d501      	bpl.n	800cdb0 <__swbuf_r+0x20>
 800cdac:	6923      	ldr	r3, [r4, #16]
 800cdae:	b943      	cbnz	r3, 800cdc2 <__swbuf_r+0x32>
 800cdb0:	4621      	mov	r1, r4
 800cdb2:	4628      	mov	r0, r5
 800cdb4:	f000 f82a 	bl	800ce0c <__swsetup_r>
 800cdb8:	b118      	cbz	r0, 800cdc2 <__swbuf_r+0x32>
 800cdba:	f04f 37ff 	mov.w	r7, #4294967295	@ 0xffffffff
 800cdbe:	4638      	mov	r0, r7
 800cdc0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800cdc2:	6823      	ldr	r3, [r4, #0]
 800cdc4:	6922      	ldr	r2, [r4, #16]
 800cdc6:	1a98      	subs	r0, r3, r2
 800cdc8:	6963      	ldr	r3, [r4, #20]
 800cdca:	b2f6      	uxtb	r6, r6
 800cdcc:	4283      	cmp	r3, r0
 800cdce:	4637      	mov	r7, r6
 800cdd0:	dc05      	bgt.n	800cdde <__swbuf_r+0x4e>
 800cdd2:	4621      	mov	r1, r4
 800cdd4:	4628      	mov	r0, r5
 800cdd6:	f7ff fde9 	bl	800c9ac <_fflush_r>
 800cdda:	2800      	cmp	r0, #0
 800cddc:	d1ed      	bne.n	800cdba <__swbuf_r+0x2a>
 800cdde:	68a3      	ldr	r3, [r4, #8]
 800cde0:	3b01      	subs	r3, #1
 800cde2:	60a3      	str	r3, [r4, #8]
 800cde4:	6823      	ldr	r3, [r4, #0]
 800cde6:	1c5a      	adds	r2, r3, #1
 800cde8:	6022      	str	r2, [r4, #0]
 800cdea:	701e      	strb	r6, [r3, #0]
 800cdec:	6962      	ldr	r2, [r4, #20]
 800cdee:	1c43      	adds	r3, r0, #1
 800cdf0:	429a      	cmp	r2, r3
 800cdf2:	d004      	beq.n	800cdfe <__swbuf_r+0x6e>
 800cdf4:	89a3      	ldrh	r3, [r4, #12]
 800cdf6:	07db      	lsls	r3, r3, #31
 800cdf8:	d5e1      	bpl.n	800cdbe <__swbuf_r+0x2e>
 800cdfa:	2e0a      	cmp	r6, #10
 800cdfc:	d1df      	bne.n	800cdbe <__swbuf_r+0x2e>
 800cdfe:	4621      	mov	r1, r4
 800ce00:	4628      	mov	r0, r5
 800ce02:	f7ff fdd3 	bl	800c9ac <_fflush_r>
 800ce06:	2800      	cmp	r0, #0
 800ce08:	d0d9      	beq.n	800cdbe <__swbuf_r+0x2e>
 800ce0a:	e7d6      	b.n	800cdba <__swbuf_r+0x2a>

0800ce0c <__swsetup_r>:
 800ce0c:	b538      	push	{r3, r4, r5, lr}
 800ce0e:	4b29      	ldr	r3, [pc, #164]	@ (800ceb4 <__swsetup_r+0xa8>)
 800ce10:	4605      	mov	r5, r0
 800ce12:	6818      	ldr	r0, [r3, #0]
 800ce14:	460c      	mov	r4, r1
 800ce16:	b118      	cbz	r0, 800ce20 <__swsetup_r+0x14>
 800ce18:	6a03      	ldr	r3, [r0, #32]
 800ce1a:	b90b      	cbnz	r3, 800ce20 <__swsetup_r+0x14>
 800ce1c:	f7fe f97a 	bl	800b114 <__sinit>
 800ce20:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ce24:	0719      	lsls	r1, r3, #28
 800ce26:	d422      	bmi.n	800ce6e <__swsetup_r+0x62>
 800ce28:	06da      	lsls	r2, r3, #27
 800ce2a:	d407      	bmi.n	800ce3c <__swsetup_r+0x30>
 800ce2c:	2209      	movs	r2, #9
 800ce2e:	602a      	str	r2, [r5, #0]
 800ce30:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800ce34:	81a3      	strh	r3, [r4, #12]
 800ce36:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800ce3a:	e033      	b.n	800cea4 <__swsetup_r+0x98>
 800ce3c:	0758      	lsls	r0, r3, #29
 800ce3e:	d512      	bpl.n	800ce66 <__swsetup_r+0x5a>
 800ce40:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800ce42:	b141      	cbz	r1, 800ce56 <__swsetup_r+0x4a>
 800ce44:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800ce48:	4299      	cmp	r1, r3
 800ce4a:	d002      	beq.n	800ce52 <__swsetup_r+0x46>
 800ce4c:	4628      	mov	r0, r5
 800ce4e:	f7ff f8a7 	bl	800bfa0 <_free_r>
 800ce52:	2300      	movs	r3, #0
 800ce54:	6363      	str	r3, [r4, #52]	@ 0x34
 800ce56:	89a3      	ldrh	r3, [r4, #12]
 800ce58:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800ce5c:	81a3      	strh	r3, [r4, #12]
 800ce5e:	2300      	movs	r3, #0
 800ce60:	6063      	str	r3, [r4, #4]
 800ce62:	6923      	ldr	r3, [r4, #16]
 800ce64:	6023      	str	r3, [r4, #0]
 800ce66:	89a3      	ldrh	r3, [r4, #12]
 800ce68:	f043 0308 	orr.w	r3, r3, #8
 800ce6c:	81a3      	strh	r3, [r4, #12]
 800ce6e:	6923      	ldr	r3, [r4, #16]
 800ce70:	b94b      	cbnz	r3, 800ce86 <__swsetup_r+0x7a>
 800ce72:	89a3      	ldrh	r3, [r4, #12]
 800ce74:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800ce78:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800ce7c:	d003      	beq.n	800ce86 <__swsetup_r+0x7a>
 800ce7e:	4621      	mov	r1, r4
 800ce80:	4628      	mov	r0, r5
 800ce82:	f000 f883 	bl	800cf8c <__smakebuf_r>
 800ce86:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ce8a:	f013 0201 	ands.w	r2, r3, #1
 800ce8e:	d00a      	beq.n	800cea6 <__swsetup_r+0x9a>
 800ce90:	2200      	movs	r2, #0
 800ce92:	60a2      	str	r2, [r4, #8]
 800ce94:	6962      	ldr	r2, [r4, #20]
 800ce96:	4252      	negs	r2, r2
 800ce98:	61a2      	str	r2, [r4, #24]
 800ce9a:	6922      	ldr	r2, [r4, #16]
 800ce9c:	b942      	cbnz	r2, 800ceb0 <__swsetup_r+0xa4>
 800ce9e:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800cea2:	d1c5      	bne.n	800ce30 <__swsetup_r+0x24>
 800cea4:	bd38      	pop	{r3, r4, r5, pc}
 800cea6:	0799      	lsls	r1, r3, #30
 800cea8:	bf58      	it	pl
 800ceaa:	6962      	ldrpl	r2, [r4, #20]
 800ceac:	60a2      	str	r2, [r4, #8]
 800ceae:	e7f4      	b.n	800ce9a <__swsetup_r+0x8e>
 800ceb0:	2000      	movs	r0, #0
 800ceb2:	e7f7      	b.n	800cea4 <__swsetup_r+0x98>
 800ceb4:	200001a0 	.word	0x200001a0

0800ceb8 <_raise_r>:
 800ceb8:	291f      	cmp	r1, #31
 800ceba:	b538      	push	{r3, r4, r5, lr}
 800cebc:	4605      	mov	r5, r0
 800cebe:	460c      	mov	r4, r1
 800cec0:	d904      	bls.n	800cecc <_raise_r+0x14>
 800cec2:	2316      	movs	r3, #22
 800cec4:	6003      	str	r3, [r0, #0]
 800cec6:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800ceca:	bd38      	pop	{r3, r4, r5, pc}
 800cecc:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800cece:	b112      	cbz	r2, 800ced6 <_raise_r+0x1e>
 800ced0:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800ced4:	b94b      	cbnz	r3, 800ceea <_raise_r+0x32>
 800ced6:	4628      	mov	r0, r5
 800ced8:	f000 f830 	bl	800cf3c <_getpid_r>
 800cedc:	4622      	mov	r2, r4
 800cede:	4601      	mov	r1, r0
 800cee0:	4628      	mov	r0, r5
 800cee2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800cee6:	f000 b817 	b.w	800cf18 <_kill_r>
 800ceea:	2b01      	cmp	r3, #1
 800ceec:	d00a      	beq.n	800cf04 <_raise_r+0x4c>
 800ceee:	1c59      	adds	r1, r3, #1
 800cef0:	d103      	bne.n	800cefa <_raise_r+0x42>
 800cef2:	2316      	movs	r3, #22
 800cef4:	6003      	str	r3, [r0, #0]
 800cef6:	2001      	movs	r0, #1
 800cef8:	e7e7      	b.n	800ceca <_raise_r+0x12>
 800cefa:	2100      	movs	r1, #0
 800cefc:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800cf00:	4620      	mov	r0, r4
 800cf02:	4798      	blx	r3
 800cf04:	2000      	movs	r0, #0
 800cf06:	e7e0      	b.n	800ceca <_raise_r+0x12>

0800cf08 <raise>:
 800cf08:	4b02      	ldr	r3, [pc, #8]	@ (800cf14 <raise+0xc>)
 800cf0a:	4601      	mov	r1, r0
 800cf0c:	6818      	ldr	r0, [r3, #0]
 800cf0e:	f7ff bfd3 	b.w	800ceb8 <_raise_r>
 800cf12:	bf00      	nop
 800cf14:	200001a0 	.word	0x200001a0

0800cf18 <_kill_r>:
 800cf18:	b538      	push	{r3, r4, r5, lr}
 800cf1a:	4d07      	ldr	r5, [pc, #28]	@ (800cf38 <_kill_r+0x20>)
 800cf1c:	2300      	movs	r3, #0
 800cf1e:	4604      	mov	r4, r0
 800cf20:	4608      	mov	r0, r1
 800cf22:	4611      	mov	r1, r2
 800cf24:	602b      	str	r3, [r5, #0]
 800cf26:	f7f5 fb73 	bl	8002610 <_kill>
 800cf2a:	1c43      	adds	r3, r0, #1
 800cf2c:	d102      	bne.n	800cf34 <_kill_r+0x1c>
 800cf2e:	682b      	ldr	r3, [r5, #0]
 800cf30:	b103      	cbz	r3, 800cf34 <_kill_r+0x1c>
 800cf32:	6023      	str	r3, [r4, #0]
 800cf34:	bd38      	pop	{r3, r4, r5, pc}
 800cf36:	bf00      	nop
 800cf38:	20001a14 	.word	0x20001a14

0800cf3c <_getpid_r>:
 800cf3c:	f7f5 bb60 	b.w	8002600 <_getpid>

0800cf40 <__swhatbuf_r>:
 800cf40:	b570      	push	{r4, r5, r6, lr}
 800cf42:	460c      	mov	r4, r1
 800cf44:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800cf48:	2900      	cmp	r1, #0
 800cf4a:	b096      	sub	sp, #88	@ 0x58
 800cf4c:	4615      	mov	r5, r2
 800cf4e:	461e      	mov	r6, r3
 800cf50:	da0d      	bge.n	800cf6e <__swhatbuf_r+0x2e>
 800cf52:	89a3      	ldrh	r3, [r4, #12]
 800cf54:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800cf58:	f04f 0100 	mov.w	r1, #0
 800cf5c:	bf14      	ite	ne
 800cf5e:	2340      	movne	r3, #64	@ 0x40
 800cf60:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800cf64:	2000      	movs	r0, #0
 800cf66:	6031      	str	r1, [r6, #0]
 800cf68:	602b      	str	r3, [r5, #0]
 800cf6a:	b016      	add	sp, #88	@ 0x58
 800cf6c:	bd70      	pop	{r4, r5, r6, pc}
 800cf6e:	466a      	mov	r2, sp
 800cf70:	f000 f848 	bl	800d004 <_fstat_r>
 800cf74:	2800      	cmp	r0, #0
 800cf76:	dbec      	blt.n	800cf52 <__swhatbuf_r+0x12>
 800cf78:	9901      	ldr	r1, [sp, #4]
 800cf7a:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800cf7e:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800cf82:	4259      	negs	r1, r3
 800cf84:	4159      	adcs	r1, r3
 800cf86:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800cf8a:	e7eb      	b.n	800cf64 <__swhatbuf_r+0x24>

0800cf8c <__smakebuf_r>:
 800cf8c:	898b      	ldrh	r3, [r1, #12]
 800cf8e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800cf90:	079d      	lsls	r5, r3, #30
 800cf92:	4606      	mov	r6, r0
 800cf94:	460c      	mov	r4, r1
 800cf96:	d507      	bpl.n	800cfa8 <__smakebuf_r+0x1c>
 800cf98:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800cf9c:	6023      	str	r3, [r4, #0]
 800cf9e:	6123      	str	r3, [r4, #16]
 800cfa0:	2301      	movs	r3, #1
 800cfa2:	6163      	str	r3, [r4, #20]
 800cfa4:	b003      	add	sp, #12
 800cfa6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800cfa8:	ab01      	add	r3, sp, #4
 800cfaa:	466a      	mov	r2, sp
 800cfac:	f7ff ffc8 	bl	800cf40 <__swhatbuf_r>
 800cfb0:	9f00      	ldr	r7, [sp, #0]
 800cfb2:	4605      	mov	r5, r0
 800cfb4:	4639      	mov	r1, r7
 800cfb6:	4630      	mov	r0, r6
 800cfb8:	f7ff f866 	bl	800c088 <_malloc_r>
 800cfbc:	b948      	cbnz	r0, 800cfd2 <__smakebuf_r+0x46>
 800cfbe:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800cfc2:	059a      	lsls	r2, r3, #22
 800cfc4:	d4ee      	bmi.n	800cfa4 <__smakebuf_r+0x18>
 800cfc6:	f023 0303 	bic.w	r3, r3, #3
 800cfca:	f043 0302 	orr.w	r3, r3, #2
 800cfce:	81a3      	strh	r3, [r4, #12]
 800cfd0:	e7e2      	b.n	800cf98 <__smakebuf_r+0xc>
 800cfd2:	89a3      	ldrh	r3, [r4, #12]
 800cfd4:	6020      	str	r0, [r4, #0]
 800cfd6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800cfda:	81a3      	strh	r3, [r4, #12]
 800cfdc:	9b01      	ldr	r3, [sp, #4]
 800cfde:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800cfe2:	b15b      	cbz	r3, 800cffc <__smakebuf_r+0x70>
 800cfe4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800cfe8:	4630      	mov	r0, r6
 800cfea:	f000 f81d 	bl	800d028 <_isatty_r>
 800cfee:	b128      	cbz	r0, 800cffc <__smakebuf_r+0x70>
 800cff0:	89a3      	ldrh	r3, [r4, #12]
 800cff2:	f023 0303 	bic.w	r3, r3, #3
 800cff6:	f043 0301 	orr.w	r3, r3, #1
 800cffa:	81a3      	strh	r3, [r4, #12]
 800cffc:	89a3      	ldrh	r3, [r4, #12]
 800cffe:	431d      	orrs	r5, r3
 800d000:	81a5      	strh	r5, [r4, #12]
 800d002:	e7cf      	b.n	800cfa4 <__smakebuf_r+0x18>

0800d004 <_fstat_r>:
 800d004:	b538      	push	{r3, r4, r5, lr}
 800d006:	4d07      	ldr	r5, [pc, #28]	@ (800d024 <_fstat_r+0x20>)
 800d008:	2300      	movs	r3, #0
 800d00a:	4604      	mov	r4, r0
 800d00c:	4608      	mov	r0, r1
 800d00e:	4611      	mov	r1, r2
 800d010:	602b      	str	r3, [r5, #0]
 800d012:	f7f5 fb5d 	bl	80026d0 <_fstat>
 800d016:	1c43      	adds	r3, r0, #1
 800d018:	d102      	bne.n	800d020 <_fstat_r+0x1c>
 800d01a:	682b      	ldr	r3, [r5, #0]
 800d01c:	b103      	cbz	r3, 800d020 <_fstat_r+0x1c>
 800d01e:	6023      	str	r3, [r4, #0]
 800d020:	bd38      	pop	{r3, r4, r5, pc}
 800d022:	bf00      	nop
 800d024:	20001a14 	.word	0x20001a14

0800d028 <_isatty_r>:
 800d028:	b538      	push	{r3, r4, r5, lr}
 800d02a:	4d06      	ldr	r5, [pc, #24]	@ (800d044 <_isatty_r+0x1c>)
 800d02c:	2300      	movs	r3, #0
 800d02e:	4604      	mov	r4, r0
 800d030:	4608      	mov	r0, r1
 800d032:	602b      	str	r3, [r5, #0]
 800d034:	f7f5 fb5c 	bl	80026f0 <_isatty>
 800d038:	1c43      	adds	r3, r0, #1
 800d03a:	d102      	bne.n	800d042 <_isatty_r+0x1a>
 800d03c:	682b      	ldr	r3, [r5, #0]
 800d03e:	b103      	cbz	r3, 800d042 <_isatty_r+0x1a>
 800d040:	6023      	str	r3, [r4, #0]
 800d042:	bd38      	pop	{r3, r4, r5, pc}
 800d044:	20001a14 	.word	0x20001a14

0800d048 <_init>:
 800d048:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d04a:	bf00      	nop
 800d04c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d04e:	bc08      	pop	{r3}
 800d050:	469e      	mov	lr, r3
 800d052:	4770      	bx	lr

0800d054 <_fini>:
 800d054:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d056:	bf00      	nop
 800d058:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d05a:	bc08      	pop	{r3}
 800d05c:	469e      	mov	lr, r3
 800d05e:	4770      	bx	lr
