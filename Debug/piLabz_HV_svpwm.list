
piLabz_HV_svpwm.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000eee8  080001e0  080001e0  000011e0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000003c8  0800f0c8  0800f0c8  000100c8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800f490  0800f490  000114ac  2**0
                  CONTENTS
  4 .ARM          00000008  0800f490  0800f490  00010490  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800f498  0800f498  000114ac  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800f498  0800f498  00010498  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800f49c  0800f49c  0001049c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000004ac  20000000  0800f4a0  00011000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001808  200004ac  0800f94c  000114ac  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20001cb4  0800f94c  00011cb4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000114ac  2**0
                  CONTENTS, READONLY
 12 .debug_info   00020acc  00000000  00000000  000114dc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000043c3  00000000  00000000  00031fa8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001c40  00000000  00000000  00036370  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000015ca  00000000  00000000  00037fb0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000230a1  00000000  00000000  0003957a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0002118f  00000000  00000000  0005c61b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000e3a33  00000000  00000000  0007d7aa  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  001611dd  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00008774  00000000  00000000  00161220  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000069  00000000  00000000  00169994  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e0 <__do_global_dtors_aux>:
 80001e0:	b510      	push	{r4, lr}
 80001e2:	4c05      	ldr	r4, [pc, #20]	@ (80001f8 <__do_global_dtors_aux+0x18>)
 80001e4:	7823      	ldrb	r3, [r4, #0]
 80001e6:	b933      	cbnz	r3, 80001f6 <__do_global_dtors_aux+0x16>
 80001e8:	4b04      	ldr	r3, [pc, #16]	@ (80001fc <__do_global_dtors_aux+0x1c>)
 80001ea:	b113      	cbz	r3, 80001f2 <__do_global_dtors_aux+0x12>
 80001ec:	4804      	ldr	r0, [pc, #16]	@ (8000200 <__do_global_dtors_aux+0x20>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	2301      	movs	r3, #1
 80001f4:	7023      	strb	r3, [r4, #0]
 80001f6:	bd10      	pop	{r4, pc}
 80001f8:	200004ac 	.word	0x200004ac
 80001fc:	00000000 	.word	0x00000000
 8000200:	0800f0b0 	.word	0x0800f0b0

08000204 <frame_dummy>:
 8000204:	b508      	push	{r3, lr}
 8000206:	4b03      	ldr	r3, [pc, #12]	@ (8000214 <frame_dummy+0x10>)
 8000208:	b11b      	cbz	r3, 8000212 <frame_dummy+0xe>
 800020a:	4903      	ldr	r1, [pc, #12]	@ (8000218 <frame_dummy+0x14>)
 800020c:	4803      	ldr	r0, [pc, #12]	@ (800021c <frame_dummy+0x18>)
 800020e:	f3af 8000 	nop.w
 8000212:	bd08      	pop	{r3, pc}
 8000214:	00000000 	.word	0x00000000
 8000218:	200004b0 	.word	0x200004b0
 800021c:	0800f0b0 	.word	0x0800f0b0

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	@ 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <strlen>:
 80002c0:	4603      	mov	r3, r0
 80002c2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002c6:	2a00      	cmp	r2, #0
 80002c8:	d1fb      	bne.n	80002c2 <strlen+0x2>
 80002ca:	1a18      	subs	r0, r3, r0
 80002cc:	3801      	subs	r0, #1
 80002ce:	4770      	bx	lr

080002d0 <__aeabi_drsub>:
 80002d0:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80002d4:	e002      	b.n	80002dc <__adddf3>
 80002d6:	bf00      	nop

080002d8 <__aeabi_dsub>:
 80002d8:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080002dc <__adddf3>:
 80002dc:	b530      	push	{r4, r5, lr}
 80002de:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002e2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002e6:	ea94 0f05 	teq	r4, r5
 80002ea:	bf08      	it	eq
 80002ec:	ea90 0f02 	teqeq	r0, r2
 80002f0:	bf1f      	itttt	ne
 80002f2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002f6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002fa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002fe:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000302:	f000 80e2 	beq.w	80004ca <__adddf3+0x1ee>
 8000306:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800030a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800030e:	bfb8      	it	lt
 8000310:	426d      	neglt	r5, r5
 8000312:	dd0c      	ble.n	800032e <__adddf3+0x52>
 8000314:	442c      	add	r4, r5
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	ea82 0000 	eor.w	r0, r2, r0
 8000322:	ea83 0101 	eor.w	r1, r3, r1
 8000326:	ea80 0202 	eor.w	r2, r0, r2
 800032a:	ea81 0303 	eor.w	r3, r1, r3
 800032e:	2d36      	cmp	r5, #54	@ 0x36
 8000330:	bf88      	it	hi
 8000332:	bd30      	pophi	{r4, r5, pc}
 8000334:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000338:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800033c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000340:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000344:	d002      	beq.n	800034c <__adddf3+0x70>
 8000346:	4240      	negs	r0, r0
 8000348:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800034c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000350:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000354:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000358:	d002      	beq.n	8000360 <__adddf3+0x84>
 800035a:	4252      	negs	r2, r2
 800035c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000360:	ea94 0f05 	teq	r4, r5
 8000364:	f000 80a7 	beq.w	80004b6 <__adddf3+0x1da>
 8000368:	f1a4 0401 	sub.w	r4, r4, #1
 800036c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000370:	db0d      	blt.n	800038e <__adddf3+0xb2>
 8000372:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000376:	fa22 f205 	lsr.w	r2, r2, r5
 800037a:	1880      	adds	r0, r0, r2
 800037c:	f141 0100 	adc.w	r1, r1, #0
 8000380:	fa03 f20e 	lsl.w	r2, r3, lr
 8000384:	1880      	adds	r0, r0, r2
 8000386:	fa43 f305 	asr.w	r3, r3, r5
 800038a:	4159      	adcs	r1, r3
 800038c:	e00e      	b.n	80003ac <__adddf3+0xd0>
 800038e:	f1a5 0520 	sub.w	r5, r5, #32
 8000392:	f10e 0e20 	add.w	lr, lr, #32
 8000396:	2a01      	cmp	r2, #1
 8000398:	fa03 fc0e 	lsl.w	ip, r3, lr
 800039c:	bf28      	it	cs
 800039e:	f04c 0c02 	orrcs.w	ip, ip, #2
 80003a2:	fa43 f305 	asr.w	r3, r3, r5
 80003a6:	18c0      	adds	r0, r0, r3
 80003a8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80003ac:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80003b0:	d507      	bpl.n	80003c2 <__adddf3+0xe6>
 80003b2:	f04f 0e00 	mov.w	lr, #0
 80003b6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003ba:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003be:	eb6e 0101 	sbc.w	r1, lr, r1
 80003c2:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80003c6:	d31b      	bcc.n	8000400 <__adddf3+0x124>
 80003c8:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80003cc:	d30c      	bcc.n	80003e8 <__adddf3+0x10c>
 80003ce:	0849      	lsrs	r1, r1, #1
 80003d0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003d4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003d8:	f104 0401 	add.w	r4, r4, #1
 80003dc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003e0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003e4:	f080 809a 	bcs.w	800051c <__adddf3+0x240>
 80003e8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003ec:	bf08      	it	eq
 80003ee:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003f2:	f150 0000 	adcs.w	r0, r0, #0
 80003f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003fa:	ea41 0105 	orr.w	r1, r1, r5
 80003fe:	bd30      	pop	{r4, r5, pc}
 8000400:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000404:	4140      	adcs	r0, r0
 8000406:	eb41 0101 	adc.w	r1, r1, r1
 800040a:	3c01      	subs	r4, #1
 800040c:	bf28      	it	cs
 800040e:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 8000412:	d2e9      	bcs.n	80003e8 <__adddf3+0x10c>
 8000414:	f091 0f00 	teq	r1, #0
 8000418:	bf04      	itt	eq
 800041a:	4601      	moveq	r1, r0
 800041c:	2000      	moveq	r0, #0
 800041e:	fab1 f381 	clz	r3, r1
 8000422:	bf08      	it	eq
 8000424:	3320      	addeq	r3, #32
 8000426:	f1a3 030b 	sub.w	r3, r3, #11
 800042a:	f1b3 0220 	subs.w	r2, r3, #32
 800042e:	da0c      	bge.n	800044a <__adddf3+0x16e>
 8000430:	320c      	adds	r2, #12
 8000432:	dd08      	ble.n	8000446 <__adddf3+0x16a>
 8000434:	f102 0c14 	add.w	ip, r2, #20
 8000438:	f1c2 020c 	rsb	r2, r2, #12
 800043c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000440:	fa21 f102 	lsr.w	r1, r1, r2
 8000444:	e00c      	b.n	8000460 <__adddf3+0x184>
 8000446:	f102 0214 	add.w	r2, r2, #20
 800044a:	bfd8      	it	le
 800044c:	f1c2 0c20 	rsble	ip, r2, #32
 8000450:	fa01 f102 	lsl.w	r1, r1, r2
 8000454:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000458:	bfdc      	itt	le
 800045a:	ea41 010c 	orrle.w	r1, r1, ip
 800045e:	4090      	lslle	r0, r2
 8000460:	1ae4      	subs	r4, r4, r3
 8000462:	bfa2      	ittt	ge
 8000464:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000468:	4329      	orrge	r1, r5
 800046a:	bd30      	popge	{r4, r5, pc}
 800046c:	ea6f 0404 	mvn.w	r4, r4
 8000470:	3c1f      	subs	r4, #31
 8000472:	da1c      	bge.n	80004ae <__adddf3+0x1d2>
 8000474:	340c      	adds	r4, #12
 8000476:	dc0e      	bgt.n	8000496 <__adddf3+0x1ba>
 8000478:	f104 0414 	add.w	r4, r4, #20
 800047c:	f1c4 0220 	rsb	r2, r4, #32
 8000480:	fa20 f004 	lsr.w	r0, r0, r4
 8000484:	fa01 f302 	lsl.w	r3, r1, r2
 8000488:	ea40 0003 	orr.w	r0, r0, r3
 800048c:	fa21 f304 	lsr.w	r3, r1, r4
 8000490:	ea45 0103 	orr.w	r1, r5, r3
 8000494:	bd30      	pop	{r4, r5, pc}
 8000496:	f1c4 040c 	rsb	r4, r4, #12
 800049a:	f1c4 0220 	rsb	r2, r4, #32
 800049e:	fa20 f002 	lsr.w	r0, r0, r2
 80004a2:	fa01 f304 	lsl.w	r3, r1, r4
 80004a6:	ea40 0003 	orr.w	r0, r0, r3
 80004aa:	4629      	mov	r1, r5
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	fa21 f004 	lsr.w	r0, r1, r4
 80004b2:	4629      	mov	r1, r5
 80004b4:	bd30      	pop	{r4, r5, pc}
 80004b6:	f094 0f00 	teq	r4, #0
 80004ba:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80004be:	bf06      	itte	eq
 80004c0:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80004c4:	3401      	addeq	r4, #1
 80004c6:	3d01      	subne	r5, #1
 80004c8:	e74e      	b.n	8000368 <__adddf3+0x8c>
 80004ca:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ce:	bf18      	it	ne
 80004d0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004d4:	d029      	beq.n	800052a <__adddf3+0x24e>
 80004d6:	ea94 0f05 	teq	r4, r5
 80004da:	bf08      	it	eq
 80004dc:	ea90 0f02 	teqeq	r0, r2
 80004e0:	d005      	beq.n	80004ee <__adddf3+0x212>
 80004e2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004e6:	bf04      	itt	eq
 80004e8:	4619      	moveq	r1, r3
 80004ea:	4610      	moveq	r0, r2
 80004ec:	bd30      	pop	{r4, r5, pc}
 80004ee:	ea91 0f03 	teq	r1, r3
 80004f2:	bf1e      	ittt	ne
 80004f4:	2100      	movne	r1, #0
 80004f6:	2000      	movne	r0, #0
 80004f8:	bd30      	popne	{r4, r5, pc}
 80004fa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004fe:	d105      	bne.n	800050c <__adddf3+0x230>
 8000500:	0040      	lsls	r0, r0, #1
 8000502:	4149      	adcs	r1, r1
 8000504:	bf28      	it	cs
 8000506:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 800050a:	bd30      	pop	{r4, r5, pc}
 800050c:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000510:	bf3c      	itt	cc
 8000512:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 8000516:	bd30      	popcc	{r4, r5, pc}
 8000518:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800051c:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000520:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000524:	f04f 0000 	mov.w	r0, #0
 8000528:	bd30      	pop	{r4, r5, pc}
 800052a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800052e:	bf1a      	itte	ne
 8000530:	4619      	movne	r1, r3
 8000532:	4610      	movne	r0, r2
 8000534:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000538:	bf1c      	itt	ne
 800053a:	460b      	movne	r3, r1
 800053c:	4602      	movne	r2, r0
 800053e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000542:	bf06      	itte	eq
 8000544:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000548:	ea91 0f03 	teqeq	r1, r3
 800054c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000550:	bd30      	pop	{r4, r5, pc}
 8000552:	bf00      	nop

08000554 <__aeabi_ui2d>:
 8000554:	f090 0f00 	teq	r0, #0
 8000558:	bf04      	itt	eq
 800055a:	2100      	moveq	r1, #0
 800055c:	4770      	bxeq	lr
 800055e:	b530      	push	{r4, r5, lr}
 8000560:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000564:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000568:	f04f 0500 	mov.w	r5, #0
 800056c:	f04f 0100 	mov.w	r1, #0
 8000570:	e750      	b.n	8000414 <__adddf3+0x138>
 8000572:	bf00      	nop

08000574 <__aeabi_i2d>:
 8000574:	f090 0f00 	teq	r0, #0
 8000578:	bf04      	itt	eq
 800057a:	2100      	moveq	r1, #0
 800057c:	4770      	bxeq	lr
 800057e:	b530      	push	{r4, r5, lr}
 8000580:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000584:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000588:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800058c:	bf48      	it	mi
 800058e:	4240      	negmi	r0, r0
 8000590:	f04f 0100 	mov.w	r1, #0
 8000594:	e73e      	b.n	8000414 <__adddf3+0x138>
 8000596:	bf00      	nop

08000598 <__aeabi_f2d>:
 8000598:	0042      	lsls	r2, r0, #1
 800059a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800059e:	ea4f 0131 	mov.w	r1, r1, rrx
 80005a2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80005a6:	bf1f      	itttt	ne
 80005a8:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 80005ac:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80005b0:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80005b4:	4770      	bxne	lr
 80005b6:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80005ba:	bf08      	it	eq
 80005bc:	4770      	bxeq	lr
 80005be:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80005c2:	bf04      	itt	eq
 80005c4:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80005c8:	4770      	bxeq	lr
 80005ca:	b530      	push	{r4, r5, lr}
 80005cc:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80005d0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005d4:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005d8:	e71c      	b.n	8000414 <__adddf3+0x138>
 80005da:	bf00      	nop

080005dc <__aeabi_ul2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f04f 0500 	mov.w	r5, #0
 80005ea:	e00a      	b.n	8000602 <__aeabi_l2d+0x16>

080005ec <__aeabi_l2d>:
 80005ec:	ea50 0201 	orrs.w	r2, r0, r1
 80005f0:	bf08      	it	eq
 80005f2:	4770      	bxeq	lr
 80005f4:	b530      	push	{r4, r5, lr}
 80005f6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005fa:	d502      	bpl.n	8000602 <__aeabi_l2d+0x16>
 80005fc:	4240      	negs	r0, r0
 80005fe:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000602:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000606:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800060a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800060e:	f43f aed8 	beq.w	80003c2 <__adddf3+0xe6>
 8000612:	f04f 0203 	mov.w	r2, #3
 8000616:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800061a:	bf18      	it	ne
 800061c:	3203      	addne	r2, #3
 800061e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000622:	bf18      	it	ne
 8000624:	3203      	addne	r2, #3
 8000626:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800062a:	f1c2 0320 	rsb	r3, r2, #32
 800062e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000632:	fa20 f002 	lsr.w	r0, r0, r2
 8000636:	fa01 fe03 	lsl.w	lr, r1, r3
 800063a:	ea40 000e 	orr.w	r0, r0, lr
 800063e:	fa21 f102 	lsr.w	r1, r1, r2
 8000642:	4414      	add	r4, r2
 8000644:	e6bd      	b.n	80003c2 <__adddf3+0xe6>
 8000646:	bf00      	nop

08000648 <__aeabi_dmul>:
 8000648:	b570      	push	{r4, r5, r6, lr}
 800064a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800064e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000652:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000656:	bf1d      	ittte	ne
 8000658:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800065c:	ea94 0f0c 	teqne	r4, ip
 8000660:	ea95 0f0c 	teqne	r5, ip
 8000664:	f000 f8de 	bleq	8000824 <__aeabi_dmul+0x1dc>
 8000668:	442c      	add	r4, r5
 800066a:	ea81 0603 	eor.w	r6, r1, r3
 800066e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000672:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000676:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800067a:	bf18      	it	ne
 800067c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000680:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000684:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000688:	d038      	beq.n	80006fc <__aeabi_dmul+0xb4>
 800068a:	fba0 ce02 	umull	ip, lr, r0, r2
 800068e:	f04f 0500 	mov.w	r5, #0
 8000692:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000696:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800069a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800069e:	f04f 0600 	mov.w	r6, #0
 80006a2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80006a6:	f09c 0f00 	teq	ip, #0
 80006aa:	bf18      	it	ne
 80006ac:	f04e 0e01 	orrne.w	lr, lr, #1
 80006b0:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80006b4:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 80006b8:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 80006bc:	d204      	bcs.n	80006c8 <__aeabi_dmul+0x80>
 80006be:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006c2:	416d      	adcs	r5, r5
 80006c4:	eb46 0606 	adc.w	r6, r6, r6
 80006c8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006cc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006d0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006d4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006d8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006dc:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006e0:	bf88      	it	hi
 80006e2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006e6:	d81e      	bhi.n	8000726 <__aeabi_dmul+0xde>
 80006e8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006ec:	bf08      	it	eq
 80006ee:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006f2:	f150 0000 	adcs.w	r0, r0, #0
 80006f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006fa:	bd70      	pop	{r4, r5, r6, pc}
 80006fc:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000700:	ea46 0101 	orr.w	r1, r6, r1
 8000704:	ea40 0002 	orr.w	r0, r0, r2
 8000708:	ea81 0103 	eor.w	r1, r1, r3
 800070c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000710:	bfc2      	ittt	gt
 8000712:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000716:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800071a:	bd70      	popgt	{r4, r5, r6, pc}
 800071c:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000720:	f04f 0e00 	mov.w	lr, #0
 8000724:	3c01      	subs	r4, #1
 8000726:	f300 80ab 	bgt.w	8000880 <__aeabi_dmul+0x238>
 800072a:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 800072e:	bfde      	ittt	le
 8000730:	2000      	movle	r0, #0
 8000732:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 8000736:	bd70      	pople	{r4, r5, r6, pc}
 8000738:	f1c4 0400 	rsb	r4, r4, #0
 800073c:	3c20      	subs	r4, #32
 800073e:	da35      	bge.n	80007ac <__aeabi_dmul+0x164>
 8000740:	340c      	adds	r4, #12
 8000742:	dc1b      	bgt.n	800077c <__aeabi_dmul+0x134>
 8000744:	f104 0414 	add.w	r4, r4, #20
 8000748:	f1c4 0520 	rsb	r5, r4, #32
 800074c:	fa00 f305 	lsl.w	r3, r0, r5
 8000750:	fa20 f004 	lsr.w	r0, r0, r4
 8000754:	fa01 f205 	lsl.w	r2, r1, r5
 8000758:	ea40 0002 	orr.w	r0, r0, r2
 800075c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000760:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000764:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000768:	fa21 f604 	lsr.w	r6, r1, r4
 800076c:	eb42 0106 	adc.w	r1, r2, r6
 8000770:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000774:	bf08      	it	eq
 8000776:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800077a:	bd70      	pop	{r4, r5, r6, pc}
 800077c:	f1c4 040c 	rsb	r4, r4, #12
 8000780:	f1c4 0520 	rsb	r5, r4, #32
 8000784:	fa00 f304 	lsl.w	r3, r0, r4
 8000788:	fa20 f005 	lsr.w	r0, r0, r5
 800078c:	fa01 f204 	lsl.w	r2, r1, r4
 8000790:	ea40 0002 	orr.w	r0, r0, r2
 8000794:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000798:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800079c:	f141 0100 	adc.w	r1, r1, #0
 80007a0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007a4:	bf08      	it	eq
 80007a6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007aa:	bd70      	pop	{r4, r5, r6, pc}
 80007ac:	f1c4 0520 	rsb	r5, r4, #32
 80007b0:	fa00 f205 	lsl.w	r2, r0, r5
 80007b4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007b8:	fa20 f304 	lsr.w	r3, r0, r4
 80007bc:	fa01 f205 	lsl.w	r2, r1, r5
 80007c0:	ea43 0302 	orr.w	r3, r3, r2
 80007c4:	fa21 f004 	lsr.w	r0, r1, r4
 80007c8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007cc:	fa21 f204 	lsr.w	r2, r1, r4
 80007d0:	ea20 0002 	bic.w	r0, r0, r2
 80007d4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007d8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007dc:	bf08      	it	eq
 80007de:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007e2:	bd70      	pop	{r4, r5, r6, pc}
 80007e4:	f094 0f00 	teq	r4, #0
 80007e8:	d10f      	bne.n	800080a <__aeabi_dmul+0x1c2>
 80007ea:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007ee:	0040      	lsls	r0, r0, #1
 80007f0:	eb41 0101 	adc.w	r1, r1, r1
 80007f4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007f8:	bf08      	it	eq
 80007fa:	3c01      	subeq	r4, #1
 80007fc:	d0f7      	beq.n	80007ee <__aeabi_dmul+0x1a6>
 80007fe:	ea41 0106 	orr.w	r1, r1, r6
 8000802:	f095 0f00 	teq	r5, #0
 8000806:	bf18      	it	ne
 8000808:	4770      	bxne	lr
 800080a:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 800080e:	0052      	lsls	r2, r2, #1
 8000810:	eb43 0303 	adc.w	r3, r3, r3
 8000814:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000818:	bf08      	it	eq
 800081a:	3d01      	subeq	r5, #1
 800081c:	d0f7      	beq.n	800080e <__aeabi_dmul+0x1c6>
 800081e:	ea43 0306 	orr.w	r3, r3, r6
 8000822:	4770      	bx	lr
 8000824:	ea94 0f0c 	teq	r4, ip
 8000828:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800082c:	bf18      	it	ne
 800082e:	ea95 0f0c 	teqne	r5, ip
 8000832:	d00c      	beq.n	800084e <__aeabi_dmul+0x206>
 8000834:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000838:	bf18      	it	ne
 800083a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800083e:	d1d1      	bne.n	80007e4 <__aeabi_dmul+0x19c>
 8000840:	ea81 0103 	eor.w	r1, r1, r3
 8000844:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000848:	f04f 0000 	mov.w	r0, #0
 800084c:	bd70      	pop	{r4, r5, r6, pc}
 800084e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000852:	bf06      	itte	eq
 8000854:	4610      	moveq	r0, r2
 8000856:	4619      	moveq	r1, r3
 8000858:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800085c:	d019      	beq.n	8000892 <__aeabi_dmul+0x24a>
 800085e:	ea94 0f0c 	teq	r4, ip
 8000862:	d102      	bne.n	800086a <__aeabi_dmul+0x222>
 8000864:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000868:	d113      	bne.n	8000892 <__aeabi_dmul+0x24a>
 800086a:	ea95 0f0c 	teq	r5, ip
 800086e:	d105      	bne.n	800087c <__aeabi_dmul+0x234>
 8000870:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000874:	bf1c      	itt	ne
 8000876:	4610      	movne	r0, r2
 8000878:	4619      	movne	r1, r3
 800087a:	d10a      	bne.n	8000892 <__aeabi_dmul+0x24a>
 800087c:	ea81 0103 	eor.w	r1, r1, r3
 8000880:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000884:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000888:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800088c:	f04f 0000 	mov.w	r0, #0
 8000890:	bd70      	pop	{r4, r5, r6, pc}
 8000892:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000896:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800089a:	bd70      	pop	{r4, r5, r6, pc}

0800089c <__aeabi_ddiv>:
 800089c:	b570      	push	{r4, r5, r6, lr}
 800089e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80008a2:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80008a6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80008aa:	bf1d      	ittte	ne
 80008ac:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008b0:	ea94 0f0c 	teqne	r4, ip
 80008b4:	ea95 0f0c 	teqne	r5, ip
 80008b8:	f000 f8a7 	bleq	8000a0a <__aeabi_ddiv+0x16e>
 80008bc:	eba4 0405 	sub.w	r4, r4, r5
 80008c0:	ea81 0e03 	eor.w	lr, r1, r3
 80008c4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008cc:	f000 8088 	beq.w	80009e0 <__aeabi_ddiv+0x144>
 80008d0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008d4:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80008d8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008dc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008e0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008e4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008e8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ec:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008f0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008f4:	429d      	cmp	r5, r3
 80008f6:	bf08      	it	eq
 80008f8:	4296      	cmpeq	r6, r2
 80008fa:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008fe:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 8000902:	d202      	bcs.n	800090a <__aeabi_ddiv+0x6e>
 8000904:	085b      	lsrs	r3, r3, #1
 8000906:	ea4f 0232 	mov.w	r2, r2, rrx
 800090a:	1ab6      	subs	r6, r6, r2
 800090c:	eb65 0503 	sbc.w	r5, r5, r3
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 800091a:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 800091e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000922:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000926:	bf22      	ittt	cs
 8000928:	1ab6      	subcs	r6, r6, r2
 800092a:	4675      	movcs	r5, lr
 800092c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	ebb6 0e02 	subs.w	lr, r6, r2
 800093a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800093e:	bf22      	ittt	cs
 8000940:	1ab6      	subcs	r6, r6, r2
 8000942:	4675      	movcs	r5, lr
 8000944:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000948:	085b      	lsrs	r3, r3, #1
 800094a:	ea4f 0232 	mov.w	r2, r2, rrx
 800094e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000952:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000956:	bf22      	ittt	cs
 8000958:	1ab6      	subcs	r6, r6, r2
 800095a:	4675      	movcs	r5, lr
 800095c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000960:	085b      	lsrs	r3, r3, #1
 8000962:	ea4f 0232 	mov.w	r2, r2, rrx
 8000966:	ebb6 0e02 	subs.w	lr, r6, r2
 800096a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800096e:	bf22      	ittt	cs
 8000970:	1ab6      	subcs	r6, r6, r2
 8000972:	4675      	movcs	r5, lr
 8000974:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000978:	ea55 0e06 	orrs.w	lr, r5, r6
 800097c:	d018      	beq.n	80009b0 <__aeabi_ddiv+0x114>
 800097e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000982:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000986:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800098a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800098e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000992:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000996:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800099a:	d1c0      	bne.n	800091e <__aeabi_ddiv+0x82>
 800099c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80009a0:	d10b      	bne.n	80009ba <__aeabi_ddiv+0x11e>
 80009a2:	ea41 0100 	orr.w	r1, r1, r0
 80009a6:	f04f 0000 	mov.w	r0, #0
 80009aa:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 80009ae:	e7b6      	b.n	800091e <__aeabi_ddiv+0x82>
 80009b0:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80009b4:	bf04      	itt	eq
 80009b6:	4301      	orreq	r1, r0
 80009b8:	2000      	moveq	r0, #0
 80009ba:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80009be:	bf88      	it	hi
 80009c0:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80009c4:	f63f aeaf 	bhi.w	8000726 <__aeabi_dmul+0xde>
 80009c8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009cc:	bf04      	itt	eq
 80009ce:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009d2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009d6:	f150 0000 	adcs.w	r0, r0, #0
 80009da:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009de:	bd70      	pop	{r4, r5, r6, pc}
 80009e0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009e4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009e8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ec:	bfc2      	ittt	gt
 80009ee:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009f2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009f6:	bd70      	popgt	{r4, r5, r6, pc}
 80009f8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009fc:	f04f 0e00 	mov.w	lr, #0
 8000a00:	3c01      	subs	r4, #1
 8000a02:	e690      	b.n	8000726 <__aeabi_dmul+0xde>
 8000a04:	ea45 0e06 	orr.w	lr, r5, r6
 8000a08:	e68d      	b.n	8000726 <__aeabi_dmul+0xde>
 8000a0a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000a0e:	ea94 0f0c 	teq	r4, ip
 8000a12:	bf08      	it	eq
 8000a14:	ea95 0f0c 	teqeq	r5, ip
 8000a18:	f43f af3b 	beq.w	8000892 <__aeabi_dmul+0x24a>
 8000a1c:	ea94 0f0c 	teq	r4, ip
 8000a20:	d10a      	bne.n	8000a38 <__aeabi_ddiv+0x19c>
 8000a22:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a26:	f47f af34 	bne.w	8000892 <__aeabi_dmul+0x24a>
 8000a2a:	ea95 0f0c 	teq	r5, ip
 8000a2e:	f47f af25 	bne.w	800087c <__aeabi_dmul+0x234>
 8000a32:	4610      	mov	r0, r2
 8000a34:	4619      	mov	r1, r3
 8000a36:	e72c      	b.n	8000892 <__aeabi_dmul+0x24a>
 8000a38:	ea95 0f0c 	teq	r5, ip
 8000a3c:	d106      	bne.n	8000a4c <__aeabi_ddiv+0x1b0>
 8000a3e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a42:	f43f aefd 	beq.w	8000840 <__aeabi_dmul+0x1f8>
 8000a46:	4610      	mov	r0, r2
 8000a48:	4619      	mov	r1, r3
 8000a4a:	e722      	b.n	8000892 <__aeabi_dmul+0x24a>
 8000a4c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a56:	f47f aec5 	bne.w	80007e4 <__aeabi_dmul+0x19c>
 8000a5a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a5e:	f47f af0d 	bne.w	800087c <__aeabi_dmul+0x234>
 8000a62:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a66:	f47f aeeb 	bne.w	8000840 <__aeabi_dmul+0x1f8>
 8000a6a:	e712      	b.n	8000892 <__aeabi_dmul+0x24a>

08000a6c <__gedf2>:
 8000a6c:	f04f 3cff 	mov.w	ip, #4294967295	@ 0xffffffff
 8000a70:	e006      	b.n	8000a80 <__cmpdf2+0x4>
 8000a72:	bf00      	nop

08000a74 <__ledf2>:
 8000a74:	f04f 0c01 	mov.w	ip, #1
 8000a78:	e002      	b.n	8000a80 <__cmpdf2+0x4>
 8000a7a:	bf00      	nop

08000a7c <__cmpdf2>:
 8000a7c:	f04f 0c01 	mov.w	ip, #1
 8000a80:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a84:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a88:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a8c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a90:	bf18      	it	ne
 8000a92:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a96:	d01b      	beq.n	8000ad0 <__cmpdf2+0x54>
 8000a98:	b001      	add	sp, #4
 8000a9a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a9e:	bf0c      	ite	eq
 8000aa0:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000aa4:	ea91 0f03 	teqne	r1, r3
 8000aa8:	bf02      	ittt	eq
 8000aaa:	ea90 0f02 	teqeq	r0, r2
 8000aae:	2000      	moveq	r0, #0
 8000ab0:	4770      	bxeq	lr
 8000ab2:	f110 0f00 	cmn.w	r0, #0
 8000ab6:	ea91 0f03 	teq	r1, r3
 8000aba:	bf58      	it	pl
 8000abc:	4299      	cmppl	r1, r3
 8000abe:	bf08      	it	eq
 8000ac0:	4290      	cmpeq	r0, r2
 8000ac2:	bf2c      	ite	cs
 8000ac4:	17d8      	asrcs	r0, r3, #31
 8000ac6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aca:	f040 0001 	orr.w	r0, r0, #1
 8000ace:	4770      	bx	lr
 8000ad0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad8:	d102      	bne.n	8000ae0 <__cmpdf2+0x64>
 8000ada:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ade:	d107      	bne.n	8000af0 <__cmpdf2+0x74>
 8000ae0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ae4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ae8:	d1d6      	bne.n	8000a98 <__cmpdf2+0x1c>
 8000aea:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aee:	d0d3      	beq.n	8000a98 <__cmpdf2+0x1c>
 8000af0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000af4:	4770      	bx	lr
 8000af6:	bf00      	nop

08000af8 <__aeabi_cdrcmple>:
 8000af8:	4684      	mov	ip, r0
 8000afa:	4610      	mov	r0, r2
 8000afc:	4662      	mov	r2, ip
 8000afe:	468c      	mov	ip, r1
 8000b00:	4619      	mov	r1, r3
 8000b02:	4663      	mov	r3, ip
 8000b04:	e000      	b.n	8000b08 <__aeabi_cdcmpeq>
 8000b06:	bf00      	nop

08000b08 <__aeabi_cdcmpeq>:
 8000b08:	b501      	push	{r0, lr}
 8000b0a:	f7ff ffb7 	bl	8000a7c <__cmpdf2>
 8000b0e:	2800      	cmp	r0, #0
 8000b10:	bf48      	it	mi
 8000b12:	f110 0f00 	cmnmi.w	r0, #0
 8000b16:	bd01      	pop	{r0, pc}

08000b18 <__aeabi_dcmpeq>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff fff4 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b20:	bf0c      	ite	eq
 8000b22:	2001      	moveq	r0, #1
 8000b24:	2000      	movne	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmplt>:
 8000b2c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b30:	f7ff ffea 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b34:	bf34      	ite	cc
 8000b36:	2001      	movcc	r0, #1
 8000b38:	2000      	movcs	r0, #0
 8000b3a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3e:	bf00      	nop

08000b40 <__aeabi_dcmple>:
 8000b40:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b44:	f7ff ffe0 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b48:	bf94      	ite	ls
 8000b4a:	2001      	movls	r0, #1
 8000b4c:	2000      	movhi	r0, #0
 8000b4e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b52:	bf00      	nop

08000b54 <__aeabi_dcmpge>:
 8000b54:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b58:	f7ff ffce 	bl	8000af8 <__aeabi_cdrcmple>
 8000b5c:	bf94      	ite	ls
 8000b5e:	2001      	movls	r0, #1
 8000b60:	2000      	movhi	r0, #0
 8000b62:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b66:	bf00      	nop

08000b68 <__aeabi_dcmpgt>:
 8000b68:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b6c:	f7ff ffc4 	bl	8000af8 <__aeabi_cdrcmple>
 8000b70:	bf34      	ite	cc
 8000b72:	2001      	movcc	r0, #1
 8000b74:	2000      	movcs	r0, #0
 8000b76:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b7a:	bf00      	nop

08000b7c <__aeabi_dcmpun>:
 8000b7c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b84:	d102      	bne.n	8000b8c <__aeabi_dcmpun+0x10>
 8000b86:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b8a:	d10a      	bne.n	8000ba2 <__aeabi_dcmpun+0x26>
 8000b8c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b90:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b94:	d102      	bne.n	8000b9c <__aeabi_dcmpun+0x20>
 8000b96:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b9a:	d102      	bne.n	8000ba2 <__aeabi_dcmpun+0x26>
 8000b9c:	f04f 0000 	mov.w	r0, #0
 8000ba0:	4770      	bx	lr
 8000ba2:	f04f 0001 	mov.w	r0, #1
 8000ba6:	4770      	bx	lr

08000ba8 <__aeabi_d2iz>:
 8000ba8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bac:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000bb0:	d215      	bcs.n	8000bde <__aeabi_d2iz+0x36>
 8000bb2:	d511      	bpl.n	8000bd8 <__aeabi_d2iz+0x30>
 8000bb4:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000bb8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bbc:	d912      	bls.n	8000be4 <__aeabi_d2iz+0x3c>
 8000bbe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000bc6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bca:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000bce:	fa23 f002 	lsr.w	r0, r3, r2
 8000bd2:	bf18      	it	ne
 8000bd4:	4240      	negne	r0, r0
 8000bd6:	4770      	bx	lr
 8000bd8:	f04f 0000 	mov.w	r0, #0
 8000bdc:	4770      	bx	lr
 8000bde:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000be2:	d105      	bne.n	8000bf0 <__aeabi_d2iz+0x48>
 8000be4:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000be8:	bf08      	it	eq
 8000bea:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000bee:	4770      	bx	lr
 8000bf0:	f04f 0000 	mov.w	r0, #0
 8000bf4:	4770      	bx	lr
 8000bf6:	bf00      	nop

08000bf8 <__aeabi_uldivmod>:
 8000bf8:	b953      	cbnz	r3, 8000c10 <__aeabi_uldivmod+0x18>
 8000bfa:	b94a      	cbnz	r2, 8000c10 <__aeabi_uldivmod+0x18>
 8000bfc:	2900      	cmp	r1, #0
 8000bfe:	bf08      	it	eq
 8000c00:	2800      	cmpeq	r0, #0
 8000c02:	bf1c      	itt	ne
 8000c04:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 8000c08:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 8000c0c:	f000 b96a 	b.w	8000ee4 <__aeabi_idiv0>
 8000c10:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c14:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c18:	f000 f806 	bl	8000c28 <__udivmoddi4>
 8000c1c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c20:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c24:	b004      	add	sp, #16
 8000c26:	4770      	bx	lr

08000c28 <__udivmoddi4>:
 8000c28:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c2c:	9d08      	ldr	r5, [sp, #32]
 8000c2e:	460c      	mov	r4, r1
 8000c30:	2b00      	cmp	r3, #0
 8000c32:	d14e      	bne.n	8000cd2 <__udivmoddi4+0xaa>
 8000c34:	4694      	mov	ip, r2
 8000c36:	458c      	cmp	ip, r1
 8000c38:	4686      	mov	lr, r0
 8000c3a:	fab2 f282 	clz	r2, r2
 8000c3e:	d962      	bls.n	8000d06 <__udivmoddi4+0xde>
 8000c40:	b14a      	cbz	r2, 8000c56 <__udivmoddi4+0x2e>
 8000c42:	f1c2 0320 	rsb	r3, r2, #32
 8000c46:	4091      	lsls	r1, r2
 8000c48:	fa20 f303 	lsr.w	r3, r0, r3
 8000c4c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000c50:	4319      	orrs	r1, r3
 8000c52:	fa00 fe02 	lsl.w	lr, r0, r2
 8000c56:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000c5a:	fa1f f68c 	uxth.w	r6, ip
 8000c5e:	fbb1 f4f7 	udiv	r4, r1, r7
 8000c62:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000c66:	fb07 1114 	mls	r1, r7, r4, r1
 8000c6a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c6e:	fb04 f106 	mul.w	r1, r4, r6
 8000c72:	4299      	cmp	r1, r3
 8000c74:	d90a      	bls.n	8000c8c <__udivmoddi4+0x64>
 8000c76:	eb1c 0303 	adds.w	r3, ip, r3
 8000c7a:	f104 30ff 	add.w	r0, r4, #4294967295	@ 0xffffffff
 8000c7e:	f080 8112 	bcs.w	8000ea6 <__udivmoddi4+0x27e>
 8000c82:	4299      	cmp	r1, r3
 8000c84:	f240 810f 	bls.w	8000ea6 <__udivmoddi4+0x27e>
 8000c88:	3c02      	subs	r4, #2
 8000c8a:	4463      	add	r3, ip
 8000c8c:	1a59      	subs	r1, r3, r1
 8000c8e:	fa1f f38e 	uxth.w	r3, lr
 8000c92:	fbb1 f0f7 	udiv	r0, r1, r7
 8000c96:	fb07 1110 	mls	r1, r7, r0, r1
 8000c9a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c9e:	fb00 f606 	mul.w	r6, r0, r6
 8000ca2:	429e      	cmp	r6, r3
 8000ca4:	d90a      	bls.n	8000cbc <__udivmoddi4+0x94>
 8000ca6:	eb1c 0303 	adds.w	r3, ip, r3
 8000caa:	f100 31ff 	add.w	r1, r0, #4294967295	@ 0xffffffff
 8000cae:	f080 80fc 	bcs.w	8000eaa <__udivmoddi4+0x282>
 8000cb2:	429e      	cmp	r6, r3
 8000cb4:	f240 80f9 	bls.w	8000eaa <__udivmoddi4+0x282>
 8000cb8:	4463      	add	r3, ip
 8000cba:	3802      	subs	r0, #2
 8000cbc:	1b9b      	subs	r3, r3, r6
 8000cbe:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000cc2:	2100      	movs	r1, #0
 8000cc4:	b11d      	cbz	r5, 8000cce <__udivmoddi4+0xa6>
 8000cc6:	40d3      	lsrs	r3, r2
 8000cc8:	2200      	movs	r2, #0
 8000cca:	e9c5 3200 	strd	r3, r2, [r5]
 8000cce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cd2:	428b      	cmp	r3, r1
 8000cd4:	d905      	bls.n	8000ce2 <__udivmoddi4+0xba>
 8000cd6:	b10d      	cbz	r5, 8000cdc <__udivmoddi4+0xb4>
 8000cd8:	e9c5 0100 	strd	r0, r1, [r5]
 8000cdc:	2100      	movs	r1, #0
 8000cde:	4608      	mov	r0, r1
 8000ce0:	e7f5      	b.n	8000cce <__udivmoddi4+0xa6>
 8000ce2:	fab3 f183 	clz	r1, r3
 8000ce6:	2900      	cmp	r1, #0
 8000ce8:	d146      	bne.n	8000d78 <__udivmoddi4+0x150>
 8000cea:	42a3      	cmp	r3, r4
 8000cec:	d302      	bcc.n	8000cf4 <__udivmoddi4+0xcc>
 8000cee:	4290      	cmp	r0, r2
 8000cf0:	f0c0 80f0 	bcc.w	8000ed4 <__udivmoddi4+0x2ac>
 8000cf4:	1a86      	subs	r6, r0, r2
 8000cf6:	eb64 0303 	sbc.w	r3, r4, r3
 8000cfa:	2001      	movs	r0, #1
 8000cfc:	2d00      	cmp	r5, #0
 8000cfe:	d0e6      	beq.n	8000cce <__udivmoddi4+0xa6>
 8000d00:	e9c5 6300 	strd	r6, r3, [r5]
 8000d04:	e7e3      	b.n	8000cce <__udivmoddi4+0xa6>
 8000d06:	2a00      	cmp	r2, #0
 8000d08:	f040 8090 	bne.w	8000e2c <__udivmoddi4+0x204>
 8000d0c:	eba1 040c 	sub.w	r4, r1, ip
 8000d10:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000d14:	fa1f f78c 	uxth.w	r7, ip
 8000d18:	2101      	movs	r1, #1
 8000d1a:	fbb4 f6f8 	udiv	r6, r4, r8
 8000d1e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000d22:	fb08 4416 	mls	r4, r8, r6, r4
 8000d26:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000d2a:	fb07 f006 	mul.w	r0, r7, r6
 8000d2e:	4298      	cmp	r0, r3
 8000d30:	d908      	bls.n	8000d44 <__udivmoddi4+0x11c>
 8000d32:	eb1c 0303 	adds.w	r3, ip, r3
 8000d36:	f106 34ff 	add.w	r4, r6, #4294967295	@ 0xffffffff
 8000d3a:	d202      	bcs.n	8000d42 <__udivmoddi4+0x11a>
 8000d3c:	4298      	cmp	r0, r3
 8000d3e:	f200 80cd 	bhi.w	8000edc <__udivmoddi4+0x2b4>
 8000d42:	4626      	mov	r6, r4
 8000d44:	1a1c      	subs	r4, r3, r0
 8000d46:	fa1f f38e 	uxth.w	r3, lr
 8000d4a:	fbb4 f0f8 	udiv	r0, r4, r8
 8000d4e:	fb08 4410 	mls	r4, r8, r0, r4
 8000d52:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000d56:	fb00 f707 	mul.w	r7, r0, r7
 8000d5a:	429f      	cmp	r7, r3
 8000d5c:	d908      	bls.n	8000d70 <__udivmoddi4+0x148>
 8000d5e:	eb1c 0303 	adds.w	r3, ip, r3
 8000d62:	f100 34ff 	add.w	r4, r0, #4294967295	@ 0xffffffff
 8000d66:	d202      	bcs.n	8000d6e <__udivmoddi4+0x146>
 8000d68:	429f      	cmp	r7, r3
 8000d6a:	f200 80b0 	bhi.w	8000ece <__udivmoddi4+0x2a6>
 8000d6e:	4620      	mov	r0, r4
 8000d70:	1bdb      	subs	r3, r3, r7
 8000d72:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000d76:	e7a5      	b.n	8000cc4 <__udivmoddi4+0x9c>
 8000d78:	f1c1 0620 	rsb	r6, r1, #32
 8000d7c:	408b      	lsls	r3, r1
 8000d7e:	fa22 f706 	lsr.w	r7, r2, r6
 8000d82:	431f      	orrs	r7, r3
 8000d84:	fa20 fc06 	lsr.w	ip, r0, r6
 8000d88:	fa04 f301 	lsl.w	r3, r4, r1
 8000d8c:	ea43 030c 	orr.w	r3, r3, ip
 8000d90:	40f4      	lsrs	r4, r6
 8000d92:	fa00 f801 	lsl.w	r8, r0, r1
 8000d96:	0c38      	lsrs	r0, r7, #16
 8000d98:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000d9c:	fbb4 fef0 	udiv	lr, r4, r0
 8000da0:	fa1f fc87 	uxth.w	ip, r7
 8000da4:	fb00 441e 	mls	r4, r0, lr, r4
 8000da8:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000dac:	fb0e f90c 	mul.w	r9, lr, ip
 8000db0:	45a1      	cmp	r9, r4
 8000db2:	fa02 f201 	lsl.w	r2, r2, r1
 8000db6:	d90a      	bls.n	8000dce <__udivmoddi4+0x1a6>
 8000db8:	193c      	adds	r4, r7, r4
 8000dba:	f10e 3aff 	add.w	sl, lr, #4294967295	@ 0xffffffff
 8000dbe:	f080 8084 	bcs.w	8000eca <__udivmoddi4+0x2a2>
 8000dc2:	45a1      	cmp	r9, r4
 8000dc4:	f240 8081 	bls.w	8000eca <__udivmoddi4+0x2a2>
 8000dc8:	f1ae 0e02 	sub.w	lr, lr, #2
 8000dcc:	443c      	add	r4, r7
 8000dce:	eba4 0409 	sub.w	r4, r4, r9
 8000dd2:	fa1f f983 	uxth.w	r9, r3
 8000dd6:	fbb4 f3f0 	udiv	r3, r4, r0
 8000dda:	fb00 4413 	mls	r4, r0, r3, r4
 8000dde:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000de2:	fb03 fc0c 	mul.w	ip, r3, ip
 8000de6:	45a4      	cmp	ip, r4
 8000de8:	d907      	bls.n	8000dfa <__udivmoddi4+0x1d2>
 8000dea:	193c      	adds	r4, r7, r4
 8000dec:	f103 30ff 	add.w	r0, r3, #4294967295	@ 0xffffffff
 8000df0:	d267      	bcs.n	8000ec2 <__udivmoddi4+0x29a>
 8000df2:	45a4      	cmp	ip, r4
 8000df4:	d965      	bls.n	8000ec2 <__udivmoddi4+0x29a>
 8000df6:	3b02      	subs	r3, #2
 8000df8:	443c      	add	r4, r7
 8000dfa:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000dfe:	fba0 9302 	umull	r9, r3, r0, r2
 8000e02:	eba4 040c 	sub.w	r4, r4, ip
 8000e06:	429c      	cmp	r4, r3
 8000e08:	46ce      	mov	lr, r9
 8000e0a:	469c      	mov	ip, r3
 8000e0c:	d351      	bcc.n	8000eb2 <__udivmoddi4+0x28a>
 8000e0e:	d04e      	beq.n	8000eae <__udivmoddi4+0x286>
 8000e10:	b155      	cbz	r5, 8000e28 <__udivmoddi4+0x200>
 8000e12:	ebb8 030e 	subs.w	r3, r8, lr
 8000e16:	eb64 040c 	sbc.w	r4, r4, ip
 8000e1a:	fa04 f606 	lsl.w	r6, r4, r6
 8000e1e:	40cb      	lsrs	r3, r1
 8000e20:	431e      	orrs	r6, r3
 8000e22:	40cc      	lsrs	r4, r1
 8000e24:	e9c5 6400 	strd	r6, r4, [r5]
 8000e28:	2100      	movs	r1, #0
 8000e2a:	e750      	b.n	8000cce <__udivmoddi4+0xa6>
 8000e2c:	f1c2 0320 	rsb	r3, r2, #32
 8000e30:	fa20 f103 	lsr.w	r1, r0, r3
 8000e34:	fa0c fc02 	lsl.w	ip, ip, r2
 8000e38:	fa24 f303 	lsr.w	r3, r4, r3
 8000e3c:	4094      	lsls	r4, r2
 8000e3e:	430c      	orrs	r4, r1
 8000e40:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000e44:	fa00 fe02 	lsl.w	lr, r0, r2
 8000e48:	fa1f f78c 	uxth.w	r7, ip
 8000e4c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000e50:	fb08 3110 	mls	r1, r8, r0, r3
 8000e54:	0c23      	lsrs	r3, r4, #16
 8000e56:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000e5a:	fb00 f107 	mul.w	r1, r0, r7
 8000e5e:	4299      	cmp	r1, r3
 8000e60:	d908      	bls.n	8000e74 <__udivmoddi4+0x24c>
 8000e62:	eb1c 0303 	adds.w	r3, ip, r3
 8000e66:	f100 36ff 	add.w	r6, r0, #4294967295	@ 0xffffffff
 8000e6a:	d22c      	bcs.n	8000ec6 <__udivmoddi4+0x29e>
 8000e6c:	4299      	cmp	r1, r3
 8000e6e:	d92a      	bls.n	8000ec6 <__udivmoddi4+0x29e>
 8000e70:	3802      	subs	r0, #2
 8000e72:	4463      	add	r3, ip
 8000e74:	1a5b      	subs	r3, r3, r1
 8000e76:	b2a4      	uxth	r4, r4
 8000e78:	fbb3 f1f8 	udiv	r1, r3, r8
 8000e7c:	fb08 3311 	mls	r3, r8, r1, r3
 8000e80:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000e84:	fb01 f307 	mul.w	r3, r1, r7
 8000e88:	42a3      	cmp	r3, r4
 8000e8a:	d908      	bls.n	8000e9e <__udivmoddi4+0x276>
 8000e8c:	eb1c 0404 	adds.w	r4, ip, r4
 8000e90:	f101 36ff 	add.w	r6, r1, #4294967295	@ 0xffffffff
 8000e94:	d213      	bcs.n	8000ebe <__udivmoddi4+0x296>
 8000e96:	42a3      	cmp	r3, r4
 8000e98:	d911      	bls.n	8000ebe <__udivmoddi4+0x296>
 8000e9a:	3902      	subs	r1, #2
 8000e9c:	4464      	add	r4, ip
 8000e9e:	1ae4      	subs	r4, r4, r3
 8000ea0:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000ea4:	e739      	b.n	8000d1a <__udivmoddi4+0xf2>
 8000ea6:	4604      	mov	r4, r0
 8000ea8:	e6f0      	b.n	8000c8c <__udivmoddi4+0x64>
 8000eaa:	4608      	mov	r0, r1
 8000eac:	e706      	b.n	8000cbc <__udivmoddi4+0x94>
 8000eae:	45c8      	cmp	r8, r9
 8000eb0:	d2ae      	bcs.n	8000e10 <__udivmoddi4+0x1e8>
 8000eb2:	ebb9 0e02 	subs.w	lr, r9, r2
 8000eb6:	eb63 0c07 	sbc.w	ip, r3, r7
 8000eba:	3801      	subs	r0, #1
 8000ebc:	e7a8      	b.n	8000e10 <__udivmoddi4+0x1e8>
 8000ebe:	4631      	mov	r1, r6
 8000ec0:	e7ed      	b.n	8000e9e <__udivmoddi4+0x276>
 8000ec2:	4603      	mov	r3, r0
 8000ec4:	e799      	b.n	8000dfa <__udivmoddi4+0x1d2>
 8000ec6:	4630      	mov	r0, r6
 8000ec8:	e7d4      	b.n	8000e74 <__udivmoddi4+0x24c>
 8000eca:	46d6      	mov	lr, sl
 8000ecc:	e77f      	b.n	8000dce <__udivmoddi4+0x1a6>
 8000ece:	4463      	add	r3, ip
 8000ed0:	3802      	subs	r0, #2
 8000ed2:	e74d      	b.n	8000d70 <__udivmoddi4+0x148>
 8000ed4:	4606      	mov	r6, r0
 8000ed6:	4623      	mov	r3, r4
 8000ed8:	4608      	mov	r0, r1
 8000eda:	e70f      	b.n	8000cfc <__udivmoddi4+0xd4>
 8000edc:	3e02      	subs	r6, #2
 8000ede:	4463      	add	r3, ip
 8000ee0:	e730      	b.n	8000d44 <__udivmoddi4+0x11c>
 8000ee2:	bf00      	nop

08000ee4 <__aeabi_idiv0>:
 8000ee4:	4770      	bx	lr
 8000ee6:	bf00      	nop

08000ee8 <HAL_UART_TxCpltCallback>:

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */


void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart){
 8000ee8:	b480      	push	{r7}
 8000eea:	b083      	sub	sp, #12
 8000eec:	af00      	add	r7, sp, #0
 8000eee:	6078      	str	r0, [r7, #4]
	hsLog.DMAdataSentOut += 1; // use this and keep a single buffer?
 8000ef0:	4b06      	ldr	r3, [pc, #24]	@ (8000f0c <HAL_UART_TxCpltCallback+0x24>)
 8000ef2:	f893 3fb4 	ldrb.w	r3, [r3, #4020]	@ 0xfb4
 8000ef6:	3301      	adds	r3, #1
 8000ef8:	b2da      	uxtb	r2, r3
 8000efa:	4b04      	ldr	r3, [pc, #16]	@ (8000f0c <HAL_UART_TxCpltCallback+0x24>)
 8000efc:	f883 2fb4 	strb.w	r2, [r3, #4020]	@ 0xfb4
}
 8000f00:	bf00      	nop
 8000f02:	370c      	adds	r7, #12
 8000f04:	46bd      	mov	sp, r7
 8000f06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f0a:	4770      	bx	lr
 8000f0c:	20000a20 	.word	0x20000a20

08000f10 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000f10:	b580      	push	{r7, lr}
 8000f12:	b084      	sub	sp, #16
 8000f14:	af02      	add	r7, sp, #8
 8000f16:	6078      	str	r0, [r7, #4]
	/* TIM1 is set to fire at half the pwm freq, so 10Khz as the pwm freq is 40Khz. Since RPR= 3
	 * is set before the timer is on, the timer fires at the underflow interrupt
	 */
	if (htim->Instance==TIM1){
 8000f18:	687b      	ldr	r3, [r7, #4]
 8000f1a:	681b      	ldr	r3, [r3, #0]
 8000f1c:	4a9e      	ldr	r2, [pc, #632]	@ (8001198 <HAL_TIM_PeriodElapsedCallback+0x288>)
 8000f1e:	4293      	cmp	r3, r2
 8000f20:	f040 82e3 	bne.w	80014ea <HAL_TIM_PeriodElapsedCallback+0x5da>
		dt = SysTick->VAL - t0;
 8000f24:	4b9d      	ldr	r3, [pc, #628]	@ (800119c <HAL_TIM_PeriodElapsedCallback+0x28c>)
 8000f26:	689b      	ldr	r3, [r3, #8]
 8000f28:	4a9d      	ldr	r2, [pc, #628]	@ (80011a0 <HAL_TIM_PeriodElapsedCallback+0x290>)
 8000f2a:	6812      	ldr	r2, [r2, #0]
 8000f2c:	1a9b      	subs	r3, r3, r2
 8000f2e:	461a      	mov	r2, r3
 8000f30:	4b9c      	ldr	r3, [pc, #624]	@ (80011a4 <HAL_TIM_PeriodElapsedCallback+0x294>)
 8000f32:	601a      	str	r2, [r3, #0]
		t0 = SysTick->VAL;
 8000f34:	4b99      	ldr	r3, [pc, #612]	@ (800119c <HAL_TIM_PeriodElapsedCallback+0x28c>)
 8000f36:	689b      	ldr	r3, [r3, #8]
 8000f38:	461a      	mov	r2, r3
 8000f3a:	4b99      	ldr	r3, [pc, #612]	@ (80011a0 <HAL_TIM_PeriodElapsedCallback+0x290>)
 8000f3c:	601a      	str	r2, [r3, #0]
		svpwm.loopCounter++;
 8000f3e:	4b9a      	ldr	r3, [pc, #616]	@ (80011a8 <HAL_TIM_PeriodElapsedCallback+0x298>)
 8000f40:	681b      	ldr	r3, [r3, #0]
 8000f42:	3301      	adds	r3, #1
 8000f44:	4a98      	ldr	r2, [pc, #608]	@ (80011a8 <HAL_TIM_PeriodElapsedCallback+0x298>)
 8000f46:	6013      	str	r3, [r2, #0]

		if (readPosition){
 8000f48:	4b98      	ldr	r3, [pc, #608]	@ (80011ac <HAL_TIM_PeriodElapsedCallback+0x29c>)
 8000f4a:	f993 3000 	ldrsb.w	r3, [r3]
 8000f4e:	2b00      	cmp	r3, #0
 8000f50:	d02c      	beq.n	8000fac <HAL_TIM_PeriodElapsedCallback+0x9c>
			PositionSensor_update(&ps,TIM1_DT);
 8000f52:	ed9f 0a97 	vldr	s0, [pc, #604]	@ 80011b0 <HAL_TIM_PeriodElapsedCallback+0x2a0>
 8000f56:	4897      	ldr	r0, [pc, #604]	@ (80011b4 <HAL_TIM_PeriodElapsedCallback+0x2a4>)
 8000f58:	f003 fcae 	bl	80048b8 <PositionSensor_update>
			getAveragedVelocityRadSec(&ps);
 8000f5c:	4895      	ldr	r0, [pc, #596]	@ (80011b4 <HAL_TIM_PeriodElapsedCallback+0x2a4>)
 8000f5e:	f003 fd7b 	bl	8004a58 <getAveragedVelocityRadSec>
			updateSpeedCalc(&s,&ps);
 8000f62:	4994      	ldr	r1, [pc, #592]	@ (80011b4 <HAL_TIM_PeriodElapsedCallback+0x2a4>)
 8000f64:	4894      	ldr	r0, [pc, #592]	@ (80011b8 <HAL_TIM_PeriodElapsedCallback+0x2a8>)
 8000f66:	f004 fae3 	bl	8005530 <updateSpeedCalc>
			actual_elRadians = ps.elecRadians - OL_offsetRadians;
 8000f6a:	4b92      	ldr	r3, [pc, #584]	@ (80011b4 <HAL_TIM_PeriodElapsedCallback+0x2a4>)
 8000f6c:	ed93 7a15 	vldr	s14, [r3, #84]	@ 0x54
 8000f70:	4b92      	ldr	r3, [pc, #584]	@ (80011bc <HAL_TIM_PeriodElapsedCallback+0x2ac>)
 8000f72:	edd3 7a00 	vldr	s15, [r3]
 8000f76:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000f7a:	4b91      	ldr	r3, [pc, #580]	@ (80011c0 <HAL_TIM_PeriodElapsedCallback+0x2b0>)
 8000f7c:	edc3 7a00 	vstr	s15, [r3]
			if (actual_elRadians < 0){ //works For CW
 8000f80:	4b8f      	ldr	r3, [pc, #572]	@ (80011c0 <HAL_TIM_PeriodElapsedCallback+0x2b0>)
 8000f82:	edd3 7a00 	vldr	s15, [r3]
 8000f86:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8000f8a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000f8e:	d50d      	bpl.n	8000fac <HAL_TIM_PeriodElapsedCallback+0x9c>
				temp = 6.28f - actual_elRadians;
 8000f90:	4b8b      	ldr	r3, [pc, #556]	@ (80011c0 <HAL_TIM_PeriodElapsedCallback+0x2b0>)
 8000f92:	edd3 7a00 	vldr	s15, [r3]
 8000f96:	ed9f 7a8b 	vldr	s14, [pc, #556]	@ 80011c4 <HAL_TIM_PeriodElapsedCallback+0x2b4>
 8000f9a:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000f9e:	4b8a      	ldr	r3, [pc, #552]	@ (80011c8 <HAL_TIM_PeriodElapsedCallback+0x2b8>)
 8000fa0:	edc3 7a00 	vstr	s15, [r3]
				actual_elRadians = temp;
 8000fa4:	4b88      	ldr	r3, [pc, #544]	@ (80011c8 <HAL_TIM_PeriodElapsedCallback+0x2b8>)
 8000fa6:	681b      	ldr	r3, [r3, #0]
 8000fa8:	4a85      	ldr	r2, [pc, #532]	@ (80011c0 <HAL_TIM_PeriodElapsedCallback+0x2b0>)
 8000faa:	6013      	str	r3, [r2, #0]
			}
		}

		if (runOL){
 8000fac:	4b87      	ldr	r3, [pc, #540]	@ (80011cc <HAL_TIM_PeriodElapsedCallback+0x2bc>)
 8000fae:	781b      	ldrb	r3, [r3, #0]
 8000fb0:	2b00      	cmp	r3, #0
 8000fb2:	f000 808f 	beq.w	80010d4 <HAL_TIM_PeriodElapsedCallback+0x1c4>
			if (svpwm.loopCounter > lastOL_Counter+OL_delayCycles){
 8000fb6:	4b7c      	ldr	r3, [pc, #496]	@ (80011a8 <HAL_TIM_PeriodElapsedCallback+0x298>)
 8000fb8:	681a      	ldr	r2, [r3, #0]
 8000fba:	4b85      	ldr	r3, [pc, #532]	@ (80011d0 <HAL_TIM_PeriodElapsedCallback+0x2c0>)
 8000fbc:	881b      	ldrh	r3, [r3, #0]
 8000fbe:	4619      	mov	r1, r3
 8000fc0:	4b84      	ldr	r3, [pc, #528]	@ (80011d4 <HAL_TIM_PeriodElapsedCallback+0x2c4>)
 8000fc2:	681b      	ldr	r3, [r3, #0]
 8000fc4:	440b      	add	r3, r1
 8000fc6:	429a      	cmp	r2, r3
 8000fc8:	f340 8084 	ble.w	80010d4 <HAL_TIM_PeriodElapsedCallback+0x1c4>
				OL_elecRadians += d_elecRadians;
 8000fcc:	4b82      	ldr	r3, [pc, #520]	@ (80011d8 <HAL_TIM_PeriodElapsedCallback+0x2c8>)
 8000fce:	ed93 7a00 	vldr	s14, [r3]
 8000fd2:	4b82      	ldr	r3, [pc, #520]	@ (80011dc <HAL_TIM_PeriodElapsedCallback+0x2cc>)
 8000fd4:	edd3 7a00 	vldr	s15, [r3]
 8000fd8:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000fdc:	4b7e      	ldr	r3, [pc, #504]	@ (80011d8 <HAL_TIM_PeriodElapsedCallback+0x2c8>)
 8000fde:	edc3 7a00 	vstr	s15, [r3]
				if (OL_elecRadians >= 6.28f){
 8000fe2:	4b7d      	ldr	r3, [pc, #500]	@ (80011d8 <HAL_TIM_PeriodElapsedCallback+0x2c8>)
 8000fe4:	edd3 7a00 	vldr	s15, [r3]
 8000fe8:	ed9f 7a76 	vldr	s14, [pc, #472]	@ 80011c4 <HAL_TIM_PeriodElapsedCallback+0x2b4>
 8000fec:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000ff0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000ff4:	db03      	blt.n	8000ffe <HAL_TIM_PeriodElapsedCallback+0xee>
					OL_elecRadians = 0;
 8000ff6:	4b78      	ldr	r3, [pc, #480]	@ (80011d8 <HAL_TIM_PeriodElapsedCallback+0x2c8>)
 8000ff8:	f04f 0200 	mov.w	r2, #0
 8000ffc:	601a      	str	r2, [r3, #0]
				}
				if (OL_elecRadians < 0){
 8000ffe:	4b76      	ldr	r3, [pc, #472]	@ (80011d8 <HAL_TIM_PeriodElapsedCallback+0x2c8>)
 8001000:	edd3 7a00 	vldr	s15, [r3]
 8001004:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001008:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800100c:	d502      	bpl.n	8001014 <HAL_TIM_PeriodElapsedCallback+0x104>
					OL_elecRadians = 6.28f;
 800100e:	4b72      	ldr	r3, [pc, #456]	@ (80011d8 <HAL_TIM_PeriodElapsedCallback+0x2c8>)
 8001010:	4a73      	ldr	r2, [pc, #460]	@ (80011e0 <HAL_TIM_PeriodElapsedCallback+0x2d0>)
 8001012:	601a      	str	r2, [r3, #0]
				}
				error_elecRadians = OL_elecRadians - actual_elRadians;
 8001014:	4b70      	ldr	r3, [pc, #448]	@ (80011d8 <HAL_TIM_PeriodElapsedCallback+0x2c8>)
 8001016:	ed93 7a00 	vldr	s14, [r3]
 800101a:	4b69      	ldr	r3, [pc, #420]	@ (80011c0 <HAL_TIM_PeriodElapsedCallback+0x2b0>)
 800101c:	edd3 7a00 	vldr	s15, [r3]
 8001020:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001024:	4b6f      	ldr	r3, [pc, #444]	@ (80011e4 <HAL_TIM_PeriodElapsedCallback+0x2d4>)
 8001026:	edc3 7a00 	vstr	s15, [r3]
				posPID.out = ExecPID(&posPID,OL_elecRadians,actual_elRadians,-0.5,0.5);
 800102a:	4b6b      	ldr	r3, [pc, #428]	@ (80011d8 <HAL_TIM_PeriodElapsedCallback+0x2c8>)
 800102c:	edd3 7a00 	vldr	s15, [r3]
 8001030:	4b63      	ldr	r3, [pc, #396]	@ (80011c0 <HAL_TIM_PeriodElapsedCallback+0x2b0>)
 8001032:	ed93 7a00 	vldr	s14, [r3]
 8001036:	eef6 1a00 	vmov.f32	s3, #96	@ 0x3f000000  0.5
 800103a:	eebe 1a00 	vmov.f32	s2, #224	@ 0xbf000000 -0.5
 800103e:	eef0 0a47 	vmov.f32	s1, s14
 8001042:	eeb0 0a67 	vmov.f32	s0, s15
 8001046:	4868      	ldr	r0, [pc, #416]	@ (80011e8 <HAL_TIM_PeriodElapsedCallback+0x2d8>)
 8001048:	f002 fe96 	bl	8003d78 <ExecPID>
 800104c:	eef0 7a40 	vmov.f32	s15, s0
 8001050:	4b65      	ldr	r3, [pc, #404]	@ (80011e8 <HAL_TIM_PeriodElapsedCallback+0x2d8>)
 8001052:	edc3 7a09 	vstr	s15, [r3, #36]	@ 0x24
				svpwm.voltagePercent = r.currentDutyF/TIMER1_ARR;
 8001056:	4b65      	ldr	r3, [pc, #404]	@ (80011ec <HAL_TIM_PeriodElapsedCallback+0x2dc>)
 8001058:	ed93 7a01 	vldr	s14, [r3, #4]
 800105c:	eddf 6a64 	vldr	s13, [pc, #400]	@ 80011f0 <HAL_TIM_PeriodElapsedCallback+0x2e0>
 8001060:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001064:	4b50      	ldr	r3, [pc, #320]	@ (80011a8 <HAL_TIM_PeriodElapsedCallback+0x298>)
 8001066:	edc3 7a01 	vstr	s15, [r3, #4]
				correctionPercent = posPID.out;
 800106a:	4b5f      	ldr	r3, [pc, #380]	@ (80011e8 <HAL_TIM_PeriodElapsedCallback+0x2d8>)
 800106c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800106e:	4a61      	ldr	r2, [pc, #388]	@ (80011f4 <HAL_TIM_PeriodElapsedCallback+0x2e4>)
 8001070:	6013      	str	r3, [r2, #0]
				out2  = svpwm.voltagePercent + correctionPercent;
 8001072:	4b4d      	ldr	r3, [pc, #308]	@ (80011a8 <HAL_TIM_PeriodElapsedCallback+0x298>)
 8001074:	ed93 7a01 	vldr	s14, [r3, #4]
 8001078:	4b5e      	ldr	r3, [pc, #376]	@ (80011f4 <HAL_TIM_PeriodElapsedCallback+0x2e4>)
 800107a:	edd3 7a00 	vldr	s15, [r3]
 800107e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001082:	4b5d      	ldr	r3, [pc, #372]	@ (80011f8 <HAL_TIM_PeriodElapsedCallback+0x2e8>)
 8001084:	edc3 7a00 	vstr	s15, [r3]
				foc.m = svpwm.voltagePercent;
 8001088:	4b47      	ldr	r3, [pc, #284]	@ (80011a8 <HAL_TIM_PeriodElapsedCallback+0x298>)
 800108a:	685b      	ldr	r3, [r3, #4]
 800108c:	4a5b      	ldr	r2, [pc, #364]	@ (80011fc <HAL_TIM_PeriodElapsedCallback+0x2ec>)
 800108e:	6353      	str	r3, [r2, #52]	@ 0x34
				if (addCorrectionPercent){
 8001090:	4b5b      	ldr	r3, [pc, #364]	@ (8001200 <HAL_TIM_PeriodElapsedCallback+0x2f0>)
 8001092:	781b      	ldrb	r3, [r3, #0]
 8001094:	2b00      	cmp	r3, #0
 8001096:	d003      	beq.n	80010a0 <HAL_TIM_PeriodElapsedCallback+0x190>
					foc.m = out2;
 8001098:	4b57      	ldr	r3, [pc, #348]	@ (80011f8 <HAL_TIM_PeriodElapsedCallback+0x2e8>)
 800109a:	681b      	ldr	r3, [r3, #0]
 800109c:	4a57      	ldr	r2, [pc, #348]	@ (80011fc <HAL_TIM_PeriodElapsedCallback+0x2ec>)
 800109e:	6353      	str	r3, [r2, #52]	@ 0x34
				}
				FOC_calcSVPWM(&svpwm,foc.m,OL_elecRadians,0);//PI_BY_2F);
 80010a0:	4b56      	ldr	r3, [pc, #344]	@ (80011fc <HAL_TIM_PeriodElapsedCallback+0x2ec>)
 80010a2:	edd3 7a0d 	vldr	s15, [r3, #52]	@ 0x34
 80010a6:	4b4c      	ldr	r3, [pc, #304]	@ (80011d8 <HAL_TIM_PeriodElapsedCallback+0x2c8>)
 80010a8:	ed93 7a00 	vldr	s14, [r3]
 80010ac:	ed9f 1a55 	vldr	s2, [pc, #340]	@ 8001204 <HAL_TIM_PeriodElapsedCallback+0x2f4>
 80010b0:	eef0 0a47 	vmov.f32	s1, s14
 80010b4:	eeb0 0a67 	vmov.f32	s0, s15
 80010b8:	483b      	ldr	r0, [pc, #236]	@ (80011a8 <HAL_TIM_PeriodElapsedCallback+0x298>)
 80010ba:	f002 fb25 	bl	8003708 <FOC_calcSVPWM>
				FOC_applyPWM(&svpwm,0,ms.reversePhases);
 80010be:	4b52      	ldr	r3, [pc, #328]	@ (8001208 <HAL_TIM_PeriodElapsedCallback+0x2f8>)
 80010c0:	7a9b      	ldrb	r3, [r3, #10]
 80010c2:	461a      	mov	r2, r3
 80010c4:	2100      	movs	r1, #0
 80010c6:	4838      	ldr	r0, [pc, #224]	@ (80011a8 <HAL_TIM_PeriodElapsedCallback+0x298>)
 80010c8:	f002 fc88 	bl	80039dc <FOC_applyPWM>
				lastOL_Counter = svpwm.loopCounter;
 80010cc:	4b36      	ldr	r3, [pc, #216]	@ (80011a8 <HAL_TIM_PeriodElapsedCallback+0x298>)
 80010ce:	681b      	ldr	r3, [r3, #0]
 80010d0:	4a40      	ldr	r2, [pc, #256]	@ (80011d4 <HAL_TIM_PeriodElapsedCallback+0x2c4>)
 80010d2:	6013      	str	r3, [r2, #0]
			}
		}

		//only changing the duty cycle and SVPWM
		if (r.rampPhase!=RAMP_WAIT){
 80010d4:	4b45      	ldr	r3, [pc, #276]	@ (80011ec <HAL_TIM_PeriodElapsedCallback+0x2dc>)
 80010d6:	7f1b      	ldrb	r3, [r3, #28]
 80010d8:	2b04      	cmp	r3, #4
 80010da:	f000 80d2 	beq.w	8001282 <HAL_TIM_PeriodElapsedCallback+0x372>
			svpwm.voltagePercent = r.currentDutyF/TIMER1_ARR;
 80010de:	4b43      	ldr	r3, [pc, #268]	@ (80011ec <HAL_TIM_PeriodElapsedCallback+0x2dc>)
 80010e0:	ed93 7a01 	vldr	s14, [r3, #4]
 80010e4:	eddf 6a42 	vldr	s13, [pc, #264]	@ 80011f0 <HAL_TIM_PeriodElapsedCallback+0x2e0>
 80010e8:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80010ec:	4b2e      	ldr	r3, [pc, #184]	@ (80011a8 <HAL_TIM_PeriodElapsedCallback+0x298>)
 80010ee:	edc3 7a01 	vstr	s15, [r3, #4]
			fr.inst_frictionAddition = 0;
 80010f2:	4b46      	ldr	r3, [pc, #280]	@ (800120c <HAL_TIM_PeriodElapsedCallback+0x2fc>)
 80010f4:	f04f 0200 	mov.w	r2, #0
 80010f8:	611a      	str	r2, [r3, #16]
			cg.inst_coggingAddition = 0;
 80010fa:	4b45      	ldr	r3, [pc, #276]	@ (8001210 <HAL_TIM_PeriodElapsedCallback+0x300>)
 80010fc:	f04f 0200 	mov.w	r2, #0
 8001100:	615a      	str	r2, [r3, #20]
			if (fr.frictionCompensationOn){
 8001102:	4b42      	ldr	r3, [pc, #264]	@ (800120c <HAL_TIM_PeriodElapsedCallback+0x2fc>)
 8001104:	781b      	ldrb	r3, [r3, #0]
 8001106:	2b00      	cmp	r3, #0
 8001108:	d006      	beq.n	8001118 <HAL_TIM_PeriodElapsedCallback+0x208>
				lookupFrictionAddition(&fr,ps.encoder_raw); // NOT sure why sign is changing for the two sides..
 800110a:	4b2a      	ldr	r3, [pc, #168]	@ (80011b4 <HAL_TIM_PeriodElapsedCallback+0x2a4>)
 800110c:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8001110:	4619      	mov	r1, r3
 8001112:	483e      	ldr	r0, [pc, #248]	@ (800120c <HAL_TIM_PeriodElapsedCallback+0x2fc>)
 8001114:	f002 f8a8 	bl	8003268 <lookupFrictionAddition>
			}
			if (cg.coggingCompensationOn){
 8001118:	4b3d      	ldr	r3, [pc, #244]	@ (8001210 <HAL_TIM_PeriodElapsedCallback+0x300>)
 800111a:	781b      	ldrb	r3, [r3, #0]
 800111c:	2b00      	cmp	r3, #0
 800111e:	d007      	beq.n	8001130 <HAL_TIM_PeriodElapsedCallback+0x220>
				lookupCoggingAddition(&cg,ps.elecRadians);
 8001120:	4b24      	ldr	r3, [pc, #144]	@ (80011b4 <HAL_TIM_PeriodElapsedCallback+0x2a4>)
 8001122:	edd3 7a15 	vldr	s15, [r3, #84]	@ 0x54
 8001126:	eeb0 0a67 	vmov.f32	s0, s15
 800112a:	4839      	ldr	r0, [pc, #228]	@ (8001210 <HAL_TIM_PeriodElapsedCallback+0x300>)
 800112c:	f002 f8e6 	bl	80032fc <lookupCoggingAddition>
			}
			if (direction == CW){
 8001130:	4b38      	ldr	r3, [pc, #224]	@ (8001214 <HAL_TIM_PeriodElapsedCallback+0x304>)
 8001132:	f993 3000 	ldrsb.w	r3, [r3]
 8001136:	2b01      	cmp	r3, #1
 8001138:	d170      	bne.n	800121c <HAL_TIM_PeriodElapsedCallback+0x30c>
				foc.m = svpwm.voltagePercent + fr.inst_frictionAddition + cg.inst_coggingAddition;//
 800113a:	4b1b      	ldr	r3, [pc, #108]	@ (80011a8 <HAL_TIM_PeriodElapsedCallback+0x298>)
 800113c:	ed93 7a01 	vldr	s14, [r3, #4]
 8001140:	4b32      	ldr	r3, [pc, #200]	@ (800120c <HAL_TIM_PeriodElapsedCallback+0x2fc>)
 8001142:	edd3 7a04 	vldr	s15, [r3, #16]
 8001146:	ee37 7a27 	vadd.f32	s14, s14, s15
 800114a:	4b31      	ldr	r3, [pc, #196]	@ (8001210 <HAL_TIM_PeriodElapsedCallback+0x300>)
 800114c:	edd3 7a05 	vldr	s15, [r3, #20]
 8001150:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001154:	4b29      	ldr	r3, [pc, #164]	@ (80011fc <HAL_TIM_PeriodElapsedCallback+0x2ec>)
 8001156:	edc3 7a0d 	vstr	s15, [r3, #52]	@ 0x34
				FOC_calcSVPWM(&svpwm,foc.m,ps.elecRadians,PI_BY_3F+ms.encCW_offset);
 800115a:	4b28      	ldr	r3, [pc, #160]	@ (80011fc <HAL_TIM_PeriodElapsedCallback+0x2ec>)
 800115c:	ed93 7a0d 	vldr	s14, [r3, #52]	@ 0x34
 8001160:	4b14      	ldr	r3, [pc, #80]	@ (80011b4 <HAL_TIM_PeriodElapsedCallback+0x2a4>)
 8001162:	edd3 6a15 	vldr	s13, [r3, #84]	@ 0x54
 8001166:	4b28      	ldr	r3, [pc, #160]	@ (8001208 <HAL_TIM_PeriodElapsedCallback+0x2f8>)
 8001168:	edd3 7a00 	vldr	s15, [r3]
 800116c:	ed9f 6a2a 	vldr	s12, [pc, #168]	@ 8001218 <HAL_TIM_PeriodElapsedCallback+0x308>
 8001170:	ee77 7a86 	vadd.f32	s15, s15, s12
 8001174:	eeb0 1a67 	vmov.f32	s2, s15
 8001178:	eef0 0a66 	vmov.f32	s1, s13
 800117c:	eeb0 0a47 	vmov.f32	s0, s14
 8001180:	4809      	ldr	r0, [pc, #36]	@ (80011a8 <HAL_TIM_PeriodElapsedCallback+0x298>)
 8001182:	f002 fac1 	bl	8003708 <FOC_calcSVPWM>
				FOC_applyPWM(&svpwm,0,ms.reversePhases);
 8001186:	4b20      	ldr	r3, [pc, #128]	@ (8001208 <HAL_TIM_PeriodElapsedCallback+0x2f8>)
 8001188:	7a9b      	ldrb	r3, [r3, #10]
 800118a:	461a      	mov	r2, r3
 800118c:	2100      	movs	r1, #0
 800118e:	4806      	ldr	r0, [pc, #24]	@ (80011a8 <HAL_TIM_PeriodElapsedCallback+0x298>)
 8001190:	f002 fc24 	bl	80039dc <FOC_applyPWM>
 8001194:	e075      	b.n	8001282 <HAL_TIM_PeriodElapsedCallback+0x372>
 8001196:	bf00      	nop
 8001198:	40012c00 	.word	0x40012c00
 800119c:	e000e010 	.word	0xe000e010
 80011a0:	20001b38 	.word	0x20001b38
 80011a4:	20001b34 	.word	0x20001b34
 80011a8:	2000094c 	.word	0x2000094c
 80011ac:	20001af7 	.word	0x20001af7
 80011b0:	38d1b717 	.word	0x38d1b717
 80011b4:	20000860 	.word	0x20000860
 80011b8:	200008d0 	.word	0x200008d0
 80011bc:	20001b14 	.word	0x20001b14
 80011c0:	20001b10 	.word	0x20001b10
 80011c4:	40c8f5c3 	.word	0x40c8f5c3
 80011c8:	20001b18 	.word	0x20001b18
 80011cc:	20001b04 	.word	0x20001b04
 80011d0:	20000002 	.word	0x20000002
 80011d4:	20001b08 	.word	0x20001b08
 80011d8:	20001afc 	.word	0x20001afc
 80011dc:	20001b00 	.word	0x20001b00
 80011e0:	40c8f5c3 	.word	0x40c8f5c3
 80011e4:	20001b0c 	.word	0x20001b0c
 80011e8:	20001a0c 	.word	0x20001a0c
 80011ec:	20000980 	.word	0x20000980
 80011f0:	449c2000 	.word	0x449c2000
 80011f4:	20001b1c 	.word	0x20001b1c
 80011f8:	20001b24 	.word	0x20001b24
 80011fc:	200009b0 	.word	0x200009b0
 8001200:	20001b20 	.word	0x20001b20
 8001204:	00000000 	.word	0x00000000
 8001208:	20000974 	.word	0x20000974
 800120c:	20001a8c 	.word	0x20001a8c
 8001210:	20001aa0 	.word	0x20001aa0
 8001214:	20000000 	.word	0x20000000
 8001218:	3f860a92 	.word	0x3f860a92
			}else if (direction == CCW){
 800121c:	4b8f      	ldr	r3, [pc, #572]	@ (800145c <HAL_TIM_PeriodElapsedCallback+0x54c>)
 800121e:	f993 3000 	ldrsb.w	r3, [r3]
 8001222:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8001226:	d12c      	bne.n	8001282 <HAL_TIM_PeriodElapsedCallback+0x372>
				foc.m = svpwm.voltagePercent - fr.inst_frictionAddition + cg.inst_coggingAddition;//
 8001228:	4b8d      	ldr	r3, [pc, #564]	@ (8001460 <HAL_TIM_PeriodElapsedCallback+0x550>)
 800122a:	ed93 7a01 	vldr	s14, [r3, #4]
 800122e:	4b8d      	ldr	r3, [pc, #564]	@ (8001464 <HAL_TIM_PeriodElapsedCallback+0x554>)
 8001230:	edd3 7a04 	vldr	s15, [r3, #16]
 8001234:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001238:	4b8b      	ldr	r3, [pc, #556]	@ (8001468 <HAL_TIM_PeriodElapsedCallback+0x558>)
 800123a:	edd3 7a05 	vldr	s15, [r3, #20]
 800123e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001242:	4b8a      	ldr	r3, [pc, #552]	@ (800146c <HAL_TIM_PeriodElapsedCallback+0x55c>)
 8001244:	edc3 7a0d 	vstr	s15, [r3, #52]	@ 0x34
				FOC_calcSVPWM(&svpwm,foc.m,ps.elecRadians,-PI_BY_3F+ms.encCCW_offset);
 8001248:	4b88      	ldr	r3, [pc, #544]	@ (800146c <HAL_TIM_PeriodElapsedCallback+0x55c>)
 800124a:	ed93 7a0d 	vldr	s14, [r3, #52]	@ 0x34
 800124e:	4b88      	ldr	r3, [pc, #544]	@ (8001470 <HAL_TIM_PeriodElapsedCallback+0x560>)
 8001250:	edd3 6a15 	vldr	s13, [r3, #84]	@ 0x54
 8001254:	4b87      	ldr	r3, [pc, #540]	@ (8001474 <HAL_TIM_PeriodElapsedCallback+0x564>)
 8001256:	edd3 7a01 	vldr	s15, [r3, #4]
 800125a:	ed9f 6a87 	vldr	s12, [pc, #540]	@ 8001478 <HAL_TIM_PeriodElapsedCallback+0x568>
 800125e:	ee77 7ac6 	vsub.f32	s15, s15, s12
 8001262:	eeb0 1a67 	vmov.f32	s2, s15
 8001266:	eef0 0a66 	vmov.f32	s1, s13
 800126a:	eeb0 0a47 	vmov.f32	s0, s14
 800126e:	487c      	ldr	r0, [pc, #496]	@ (8001460 <HAL_TIM_PeriodElapsedCallback+0x550>)
 8001270:	f002 fa4a 	bl	8003708 <FOC_calcSVPWM>
				FOC_applyPWM(&svpwm,0,ms.reversePhases);
 8001274:	4b7f      	ldr	r3, [pc, #508]	@ (8001474 <HAL_TIM_PeriodElapsedCallback+0x564>)
 8001276:	7a9b      	ldrb	r3, [r3, #10]
 8001278:	461a      	mov	r2, r3
 800127a:	2100      	movs	r1, #0
 800127c:	4878      	ldr	r0, [pc, #480]	@ (8001460 <HAL_TIM_PeriodElapsedCallback+0x550>)
 800127e:	f002 fbad 	bl	80039dc <FOC_applyPWM>
			}else{}
		} //closes RAMP wait

		if (rampRPM.rampPhase!=RAMP_WAIT){
 8001282:	4b7e      	ldr	r3, [pc, #504]	@ (800147c <HAL_TIM_PeriodElapsedCallback+0x56c>)
 8001284:	7c1b      	ldrb	r3, [r3, #16]
 8001286:	2b04      	cmp	r3, #4
 8001288:	f000 80bb 	beq.w	8001402 <HAL_TIM_PeriodElapsedCallback+0x4f2>
			//quick and dirty voltage pid has no anti windup and is limited to only positive nos
			speedPID.out = ExecVoltagePID(&speedPID,rampRPM.instTargetRPM_F,fabs(ps.velocityRPM),0,800); // voltage PID running inside the Hight Task Freq!
 800128c:	4b7b      	ldr	r3, [pc, #492]	@ (800147c <HAL_TIM_PeriodElapsedCallback+0x56c>)
 800128e:	ed93 7a01 	vldr	s14, [r3, #4]
 8001292:	4b77      	ldr	r3, [pc, #476]	@ (8001470 <HAL_TIM_PeriodElapsedCallback+0x560>)
 8001294:	edd3 7a19 	vldr	s15, [r3, #100]	@ 0x64
 8001298:	eef0 7ae7 	vabs.f32	s15, s15
 800129c:	eddf 1a78 	vldr	s3, [pc, #480]	@ 8001480 <HAL_TIM_PeriodElapsedCallback+0x570>
 80012a0:	ed9f 1a78 	vldr	s2, [pc, #480]	@ 8001484 <HAL_TIM_PeriodElapsedCallback+0x574>
 80012a4:	eef0 0a67 	vmov.f32	s1, s15
 80012a8:	eeb0 0a47 	vmov.f32	s0, s14
 80012ac:	4876      	ldr	r0, [pc, #472]	@ (8001488 <HAL_TIM_PeriodElapsedCallback+0x578>)
 80012ae:	f002 fcf1 	bl	8003c94 <ExecVoltagePID>
 80012b2:	eef0 7a40 	vmov.f32	s15, s0
 80012b6:	4b74      	ldr	r3, [pc, #464]	@ (8001488 <HAL_TIM_PeriodElapsedCallback+0x578>)
 80012b8:	edc3 7a09 	vstr	s15, [r3, #36]	@ 0x24
			if (fabs(speedPID.error >300)){
 80012bc:	4b72      	ldr	r3, [pc, #456]	@ (8001488 <HAL_TIM_PeriodElapsedCallback+0x578>)
 80012be:	edd3 7a04 	vldr	s15, [r3, #16]
 80012c2:	ed9f 7a72 	vldr	s14, [pc, #456]	@ 800148c <HAL_TIM_PeriodElapsedCallback+0x57c>
 80012c6:	eef4 7ac7 	vcmpe.f32	s15, s14
 80012ca:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80012ce:	dd09      	ble.n	80012e4 <HAL_TIM_PeriodElapsedCallback+0x3d4>
				StopAllPWM(&hw)	;
 80012d0:	486f      	ldr	r0, [pc, #444]	@ (8001490 <HAL_TIM_PeriodElapsedCallback+0x580>)
 80012d2:	f002 fc65 	bl	8003ba0 <StopAllPWM>
				err.globalErrorFlag = 1;
 80012d6:	4b6f      	ldr	r3, [pc, #444]	@ (8001494 <HAL_TIM_PeriodElapsedCallback+0x584>)
 80012d8:	2201      	movs	r2, #1
 80012da:	701a      	strb	r2, [r3, #0]
				err.PID_error = 1;
 80012dc:	4b6d      	ldr	r3, [pc, #436]	@ (8001494 <HAL_TIM_PeriodElapsedCallback+0x584>)
 80012de:	2201      	movs	r2, #1
 80012e0:	715a      	strb	r2, [r3, #5]
 80012e2:	e08e      	b.n	8001402 <HAL_TIM_PeriodElapsedCallback+0x4f2>
			}else{
				svpwm.voltagePercent = speedPID.out/TIMER1_ARR;
 80012e4:	4b68      	ldr	r3, [pc, #416]	@ (8001488 <HAL_TIM_PeriodElapsedCallback+0x578>)
 80012e6:	ed93 7a09 	vldr	s14, [r3, #36]	@ 0x24
 80012ea:	eddf 6a6b 	vldr	s13, [pc, #428]	@ 8001498 <HAL_TIM_PeriodElapsedCallback+0x588>
 80012ee:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80012f2:	4b5b      	ldr	r3, [pc, #364]	@ (8001460 <HAL_TIM_PeriodElapsedCallback+0x550>)
 80012f4:	edc3 7a01 	vstr	s15, [r3, #4]

				fr.inst_frictionAddition = 0;
 80012f8:	4b5a      	ldr	r3, [pc, #360]	@ (8001464 <HAL_TIM_PeriodElapsedCallback+0x554>)
 80012fa:	f04f 0200 	mov.w	r2, #0
 80012fe:	611a      	str	r2, [r3, #16]
				cg.inst_coggingAddition = 0;
 8001300:	4b59      	ldr	r3, [pc, #356]	@ (8001468 <HAL_TIM_PeriodElapsedCallback+0x558>)
 8001302:	f04f 0200 	mov.w	r2, #0
 8001306:	615a      	str	r2, [r3, #20]
				if (fr.frictionCompensationOn){
 8001308:	4b56      	ldr	r3, [pc, #344]	@ (8001464 <HAL_TIM_PeriodElapsedCallback+0x554>)
 800130a:	781b      	ldrb	r3, [r3, #0]
 800130c:	2b00      	cmp	r3, #0
 800130e:	d006      	beq.n	800131e <HAL_TIM_PeriodElapsedCallback+0x40e>
					lookupFrictionAddition(&fr,ps.encoder_raw); // NOT sure why sign is changing for the two sides..
 8001310:	4b57      	ldr	r3, [pc, #348]	@ (8001470 <HAL_TIM_PeriodElapsedCallback+0x560>)
 8001312:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8001316:	4619      	mov	r1, r3
 8001318:	4852      	ldr	r0, [pc, #328]	@ (8001464 <HAL_TIM_PeriodElapsedCallback+0x554>)
 800131a:	f001 ffa5 	bl	8003268 <lookupFrictionAddition>
				}
				if (cg.coggingCompensationOn){
 800131e:	4b52      	ldr	r3, [pc, #328]	@ (8001468 <HAL_TIM_PeriodElapsedCallback+0x558>)
 8001320:	781b      	ldrb	r3, [r3, #0]
 8001322:	2b00      	cmp	r3, #0
 8001324:	d007      	beq.n	8001336 <HAL_TIM_PeriodElapsedCallback+0x426>
					lookupCoggingAddition(&cg,ps.elecRadians);
 8001326:	4b52      	ldr	r3, [pc, #328]	@ (8001470 <HAL_TIM_PeriodElapsedCallback+0x560>)
 8001328:	edd3 7a15 	vldr	s15, [r3, #84]	@ 0x54
 800132c:	eeb0 0a67 	vmov.f32	s0, s15
 8001330:	484d      	ldr	r0, [pc, #308]	@ (8001468 <HAL_TIM_PeriodElapsedCallback+0x558>)
 8001332:	f001 ffe3 	bl	80032fc <lookupCoggingAddition>
				}

				if (direction == CW){
 8001336:	4b49      	ldr	r3, [pc, #292]	@ (800145c <HAL_TIM_PeriodElapsedCallback+0x54c>)
 8001338:	f993 3000 	ldrsb.w	r3, [r3]
 800133c:	2b01      	cmp	r3, #1
 800133e:	d12d      	bne.n	800139c <HAL_TIM_PeriodElapsedCallback+0x48c>
					foc.m = svpwm.voltagePercent + fr.inst_frictionAddition + cg.inst_coggingAddition;//
 8001340:	4b47      	ldr	r3, [pc, #284]	@ (8001460 <HAL_TIM_PeriodElapsedCallback+0x550>)
 8001342:	ed93 7a01 	vldr	s14, [r3, #4]
 8001346:	4b47      	ldr	r3, [pc, #284]	@ (8001464 <HAL_TIM_PeriodElapsedCallback+0x554>)
 8001348:	edd3 7a04 	vldr	s15, [r3, #16]
 800134c:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001350:	4b45      	ldr	r3, [pc, #276]	@ (8001468 <HAL_TIM_PeriodElapsedCallback+0x558>)
 8001352:	edd3 7a05 	vldr	s15, [r3, #20]
 8001356:	ee77 7a27 	vadd.f32	s15, s14, s15
 800135a:	4b44      	ldr	r3, [pc, #272]	@ (800146c <HAL_TIM_PeriodElapsedCallback+0x55c>)
 800135c:	edc3 7a0d 	vstr	s15, [r3, #52]	@ 0x34
					FOC_calcSVPWM(&svpwm,foc.m,ps.elecRadians,PI_BY_3F+ms.encCW_offset);
 8001360:	4b42      	ldr	r3, [pc, #264]	@ (800146c <HAL_TIM_PeriodElapsedCallback+0x55c>)
 8001362:	ed93 7a0d 	vldr	s14, [r3, #52]	@ 0x34
 8001366:	4b42      	ldr	r3, [pc, #264]	@ (8001470 <HAL_TIM_PeriodElapsedCallback+0x560>)
 8001368:	edd3 6a15 	vldr	s13, [r3, #84]	@ 0x54
 800136c:	4b41      	ldr	r3, [pc, #260]	@ (8001474 <HAL_TIM_PeriodElapsedCallback+0x564>)
 800136e:	edd3 7a00 	vldr	s15, [r3]
 8001372:	ed9f 6a41 	vldr	s12, [pc, #260]	@ 8001478 <HAL_TIM_PeriodElapsedCallback+0x568>
 8001376:	ee77 7a86 	vadd.f32	s15, s15, s12
 800137a:	eeb0 1a67 	vmov.f32	s2, s15
 800137e:	eef0 0a66 	vmov.f32	s1, s13
 8001382:	eeb0 0a47 	vmov.f32	s0, s14
 8001386:	4836      	ldr	r0, [pc, #216]	@ (8001460 <HAL_TIM_PeriodElapsedCallback+0x550>)
 8001388:	f002 f9be 	bl	8003708 <FOC_calcSVPWM>
					FOC_applyPWM(&svpwm,0,ms.reversePhases);
 800138c:	4b39      	ldr	r3, [pc, #228]	@ (8001474 <HAL_TIM_PeriodElapsedCallback+0x564>)
 800138e:	7a9b      	ldrb	r3, [r3, #10]
 8001390:	461a      	mov	r2, r3
 8001392:	2100      	movs	r1, #0
 8001394:	4832      	ldr	r0, [pc, #200]	@ (8001460 <HAL_TIM_PeriodElapsedCallback+0x550>)
 8001396:	f002 fb21 	bl	80039dc <FOC_applyPWM>
 800139a:	e032      	b.n	8001402 <HAL_TIM_PeriodElapsedCallback+0x4f2>
				}else if (direction == CCW){
 800139c:	4b2f      	ldr	r3, [pc, #188]	@ (800145c <HAL_TIM_PeriodElapsedCallback+0x54c>)
 800139e:	f993 3000 	ldrsb.w	r3, [r3]
 80013a2:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80013a6:	d12c      	bne.n	8001402 <HAL_TIM_PeriodElapsedCallback+0x4f2>
					foc.m = svpwm.voltagePercent - fr.inst_frictionAddition + cg.inst_coggingAddition;//
 80013a8:	4b2d      	ldr	r3, [pc, #180]	@ (8001460 <HAL_TIM_PeriodElapsedCallback+0x550>)
 80013aa:	ed93 7a01 	vldr	s14, [r3, #4]
 80013ae:	4b2d      	ldr	r3, [pc, #180]	@ (8001464 <HAL_TIM_PeriodElapsedCallback+0x554>)
 80013b0:	edd3 7a04 	vldr	s15, [r3, #16]
 80013b4:	ee37 7a67 	vsub.f32	s14, s14, s15
 80013b8:	4b2b      	ldr	r3, [pc, #172]	@ (8001468 <HAL_TIM_PeriodElapsedCallback+0x558>)
 80013ba:	edd3 7a05 	vldr	s15, [r3, #20]
 80013be:	ee77 7a27 	vadd.f32	s15, s14, s15
 80013c2:	4b2a      	ldr	r3, [pc, #168]	@ (800146c <HAL_TIM_PeriodElapsedCallback+0x55c>)
 80013c4:	edc3 7a0d 	vstr	s15, [r3, #52]	@ 0x34
					FOC_calcSVPWM(&svpwm,svpwm.voltagePercent,ps.elecRadians,-PI_BY_3F+ms.encCCW_offset);
 80013c8:	4b25      	ldr	r3, [pc, #148]	@ (8001460 <HAL_TIM_PeriodElapsedCallback+0x550>)
 80013ca:	ed93 7a01 	vldr	s14, [r3, #4]
 80013ce:	4b28      	ldr	r3, [pc, #160]	@ (8001470 <HAL_TIM_PeriodElapsedCallback+0x560>)
 80013d0:	edd3 6a15 	vldr	s13, [r3, #84]	@ 0x54
 80013d4:	4b27      	ldr	r3, [pc, #156]	@ (8001474 <HAL_TIM_PeriodElapsedCallback+0x564>)
 80013d6:	edd3 7a01 	vldr	s15, [r3, #4]
 80013da:	ed9f 6a27 	vldr	s12, [pc, #156]	@ 8001478 <HAL_TIM_PeriodElapsedCallback+0x568>
 80013de:	ee77 7ac6 	vsub.f32	s15, s15, s12
 80013e2:	eeb0 1a67 	vmov.f32	s2, s15
 80013e6:	eef0 0a66 	vmov.f32	s1, s13
 80013ea:	eeb0 0a47 	vmov.f32	s0, s14
 80013ee:	481c      	ldr	r0, [pc, #112]	@ (8001460 <HAL_TIM_PeriodElapsedCallback+0x550>)
 80013f0:	f002 f98a 	bl	8003708 <FOC_calcSVPWM>
					FOC_applyPWM(&svpwm,0,ms.reversePhases);
 80013f4:	4b1f      	ldr	r3, [pc, #124]	@ (8001474 <HAL_TIM_PeriodElapsedCallback+0x564>)
 80013f6:	7a9b      	ldrb	r3, [r3, #10]
 80013f8:	461a      	mov	r2, r3
 80013fa:	2100      	movs	r1, #0
 80013fc:	4818      	ldr	r0, [pc, #96]	@ (8001460 <HAL_TIM_PeriodElapsedCallback+0x550>)
 80013fe:	f002 faed 	bl	80039dc <FOC_applyPWM>
			}

		} //closes RAMP wait

		//Logging
		if (hsLog.enable){
 8001402:	4b26      	ldr	r3, [pc, #152]	@ (800149c <HAL_TIM_PeriodElapsedCallback+0x58c>)
 8001404:	781b      	ldrb	r3, [r3, #0]
 8001406:	2b00      	cmp	r3, #0
 8001408:	d067      	beq.n	80014da <HAL_TIM_PeriodElapsedCallback+0x5ca>
			if(hsLog.addDatas == 0){
 800140a:	4b24      	ldr	r3, [pc, #144]	@ (800149c <HAL_TIM_PeriodElapsedCallback+0x58c>)
 800140c:	f8d3 3fc0 	ldr.w	r3, [r3, #4032]	@ 0xfc0
 8001410:	2b00      	cmp	r3, #0
 8001412:	d104      	bne.n	800141e <HAL_TIM_PeriodElapsedCallback+0x50e>
				hsLog.startLoopIndex = svpwm.loopCounter;
 8001414:	4b12      	ldr	r3, [pc, #72]	@ (8001460 <HAL_TIM_PeriodElapsedCallback+0x550>)
 8001416:	681b      	ldr	r3, [r3, #0]
 8001418:	4a20      	ldr	r2, [pc, #128]	@ (800149c <HAL_TIM_PeriodElapsedCallback+0x58c>)
 800141a:	f8c2 3fb8 	str.w	r3, [r2, #4024]	@ 0xfb8
			}
			if (hsLog.bufferIndex < HSARRAYSIZE - HSLOGSIZE-1){
 800141e:	4b1f      	ldr	r3, [pc, #124]	@ (800149c <HAL_TIM_PeriodElapsedCallback+0x58c>)
 8001420:	f8b3 3fae 	ldrh.w	r3, [r3, #4014]	@ 0xfae
 8001424:	f240 72ac 	movw	r2, #1964	@ 0x7ac
 8001428:	4293      	cmp	r3, r2
 800142a:	d839      	bhi.n	80014a0 <HAL_TIM_PeriodElapsedCallback+0x590>
				hsLog.bufferIndex = addData(&hsLog, &svpwm, &ps,&foc,&fr,&cg);
 800142c:	4b0e      	ldr	r3, [pc, #56]	@ (8001468 <HAL_TIM_PeriodElapsedCallback+0x558>)
 800142e:	9301      	str	r3, [sp, #4]
 8001430:	4b0c      	ldr	r3, [pc, #48]	@ (8001464 <HAL_TIM_PeriodElapsedCallback+0x554>)
 8001432:	9300      	str	r3, [sp, #0]
 8001434:	4b0d      	ldr	r3, [pc, #52]	@ (800146c <HAL_TIM_PeriodElapsedCallback+0x55c>)
 8001436:	4a0e      	ldr	r2, [pc, #56]	@ (8001470 <HAL_TIM_PeriodElapsedCallback+0x560>)
 8001438:	4909      	ldr	r1, [pc, #36]	@ (8001460 <HAL_TIM_PeriodElapsedCallback+0x550>)
 800143a:	4818      	ldr	r0, [pc, #96]	@ (800149c <HAL_TIM_PeriodElapsedCallback+0x58c>)
 800143c:	f002 feb4 	bl	80041a8 <addData>
 8001440:	4603      	mov	r3, r0
 8001442:	461a      	mov	r2, r3
 8001444:	4b15      	ldr	r3, [pc, #84]	@ (800149c <HAL_TIM_PeriodElapsedCallback+0x58c>)
 8001446:	f8a3 2fae 	strh.w	r2, [r3, #4014]	@ 0xfae
				hsLog.addDatas+=1;
 800144a:	4b14      	ldr	r3, [pc, #80]	@ (800149c <HAL_TIM_PeriodElapsedCallback+0x58c>)
 800144c:	f8d3 3fc0 	ldr.w	r3, [r3, #4032]	@ 0xfc0
 8001450:	3301      	adds	r3, #1
 8001452:	4a12      	ldr	r2, [pc, #72]	@ (800149c <HAL_TIM_PeriodElapsedCallback+0x58c>)
 8001454:	f8c2 3fc0 	str.w	r3, [r2, #4032]	@ 0xfc0
 8001458:	e03f      	b.n	80014da <HAL_TIM_PeriodElapsedCallback+0x5ca>
 800145a:	bf00      	nop
 800145c:	20000000 	.word	0x20000000
 8001460:	2000094c 	.word	0x2000094c
 8001464:	20001a8c 	.word	0x20001a8c
 8001468:	20001aa0 	.word	0x20001aa0
 800146c:	200009b0 	.word	0x200009b0
 8001470:	20000860 	.word	0x20000860
 8001474:	20000974 	.word	0x20000974
 8001478:	3f860a92 	.word	0x3f860a92
 800147c:	200009f0 	.word	0x200009f0
 8001480:	44480000 	.word	0x44480000
 8001484:	00000000 	.word	0x00000000
 8001488:	200019e4 	.word	0x200019e4
 800148c:	43960000 	.word	0x43960000
 8001490:	20000970 	.word	0x20000970
 8001494:	20001ad0 	.word	0x20001ad0
 8001498:	449c2000 	.word	0x449c2000
 800149c:	20000a20 	.word	0x20000a20
			}else{
				switchBuffers(&hsLog);
 80014a0:	4828      	ldr	r0, [pc, #160]	@ (8001544 <HAL_TIM_PeriodElapsedCallback+0x634>)
 80014a2:	f002 fd35 	bl	8003f10 <switchBuffers>
				hsLog.bufferIndex  = 0;
 80014a6:	4b27      	ldr	r3, [pc, #156]	@ (8001544 <HAL_TIM_PeriodElapsedCallback+0x634>)
 80014a8:	2200      	movs	r2, #0
 80014aa:	f8a3 2fae 	strh.w	r2, [r3, #4014]	@ 0xfae
				hsLog.bufferIndex = addData(&hsLog, &svpwm, &ps,&foc,&fr,&cg);
 80014ae:	4b26      	ldr	r3, [pc, #152]	@ (8001548 <HAL_TIM_PeriodElapsedCallback+0x638>)
 80014b0:	9301      	str	r3, [sp, #4]
 80014b2:	4b26      	ldr	r3, [pc, #152]	@ (800154c <HAL_TIM_PeriodElapsedCallback+0x63c>)
 80014b4:	9300      	str	r3, [sp, #0]
 80014b6:	4b26      	ldr	r3, [pc, #152]	@ (8001550 <HAL_TIM_PeriodElapsedCallback+0x640>)
 80014b8:	4a26      	ldr	r2, [pc, #152]	@ (8001554 <HAL_TIM_PeriodElapsedCallback+0x644>)
 80014ba:	4927      	ldr	r1, [pc, #156]	@ (8001558 <HAL_TIM_PeriodElapsedCallback+0x648>)
 80014bc:	4821      	ldr	r0, [pc, #132]	@ (8001544 <HAL_TIM_PeriodElapsedCallback+0x634>)
 80014be:	f002 fe73 	bl	80041a8 <addData>
 80014c2:	4603      	mov	r3, r0
 80014c4:	461a      	mov	r2, r3
 80014c6:	4b1f      	ldr	r3, [pc, #124]	@ (8001544 <HAL_TIM_PeriodElapsedCallback+0x634>)
 80014c8:	f8a3 2fae 	strh.w	r2, [r3, #4014]	@ 0xfae
				hsLog.addDatas+=1;
 80014cc:	4b1d      	ldr	r3, [pc, #116]	@ (8001544 <HAL_TIM_PeriodElapsedCallback+0x634>)
 80014ce:	f8d3 3fc0 	ldr.w	r3, [r3, #4032]	@ 0xfc0
 80014d2:	3301      	adds	r3, #1
 80014d4:	4a1b      	ldr	r2, [pc, #108]	@ (8001544 <HAL_TIM_PeriodElapsedCallback+0x634>)
 80014d6:	f8c2 3fc0 	str.w	r3, [r2, #4032]	@ 0xfc0
			}
		}

		dt2 = SysTick->VAL - t0;
 80014da:	4b20      	ldr	r3, [pc, #128]	@ (800155c <HAL_TIM_PeriodElapsedCallback+0x64c>)
 80014dc:	689b      	ldr	r3, [r3, #8]
 80014de:	4a20      	ldr	r2, [pc, #128]	@ (8001560 <HAL_TIM_PeriodElapsedCallback+0x650>)
 80014e0:	6812      	ldr	r2, [r2, #0]
 80014e2:	1a9b      	subs	r3, r3, r2
 80014e4:	461a      	mov	r2, r3
 80014e6:	4b1f      	ldr	r3, [pc, #124]	@ (8001564 <HAL_TIM_PeriodElapsedCallback+0x654>)
 80014e8:	601a      	str	r2, [r3, #0]

	}//closes tim1if

	if (htim->Instance ==TIM6){ // 20ms Loop
 80014ea:	687b      	ldr	r3, [r7, #4]
 80014ec:	681b      	ldr	r3, [r3, #0]
 80014ee:	4a1e      	ldr	r2, [pc, #120]	@ (8001568 <HAL_TIM_PeriodElapsedCallback+0x658>)
 80014f0:	4293      	cmp	r3, r2
 80014f2:	d11b      	bne.n	800152c <HAL_TIM_PeriodElapsedCallback+0x61c>

		if (r.rampPhase != RAMP_WAIT){
 80014f4:	4b1d      	ldr	r3, [pc, #116]	@ (800156c <HAL_TIM_PeriodElapsedCallback+0x65c>)
 80014f6:	7f1b      	ldrb	r3, [r3, #28]
 80014f8:	2b04      	cmp	r3, #4
 80014fa:	d009      	beq.n	8001510 <HAL_TIM_PeriodElapsedCallback+0x600>
			ExecRampDuty(&r);
 80014fc:	481b      	ldr	r0, [pc, #108]	@ (800156c <HAL_TIM_PeriodElapsedCallback+0x65c>)
 80014fe:	f003 fbdd 	bl	8004cbc <ExecRampDuty>
			if (r.rampPhase == RAMP_WAIT){
 8001502:	4b1a      	ldr	r3, [pc, #104]	@ (800156c <HAL_TIM_PeriodElapsedCallback+0x65c>)
 8001504:	7f1b      	ldrb	r3, [r3, #28]
 8001506:	2b04      	cmp	r3, #4
 8001508:	d102      	bne.n	8001510 <HAL_TIM_PeriodElapsedCallback+0x600>
				turnOffPWMS = 1;
 800150a:	4b19      	ldr	r3, [pc, #100]	@ (8001570 <HAL_TIM_PeriodElapsedCallback+0x660>)
 800150c:	2201      	movs	r2, #1
 800150e:	701a      	strb	r2, [r3, #0]
			}
		}

		if (rampRPM.rampPhase != RAMP_WAIT){
 8001510:	4b18      	ldr	r3, [pc, #96]	@ (8001574 <HAL_TIM_PeriodElapsedCallback+0x664>)
 8001512:	7c1b      	ldrb	r3, [r3, #16]
 8001514:	2b04      	cmp	r3, #4
 8001516:	d009      	beq.n	800152c <HAL_TIM_PeriodElapsedCallback+0x61c>
			ExecRampRPM(&rampRPM);
 8001518:	4816      	ldr	r0, [pc, #88]	@ (8001574 <HAL_TIM_PeriodElapsedCallback+0x664>)
 800151a:	f003 fe1c 	bl	8005156 <ExecRampRPM>
			if (rampRPM.rampPhase == RAMP_WAIT){
 800151e:	4b15      	ldr	r3, [pc, #84]	@ (8001574 <HAL_TIM_PeriodElapsedCallback+0x664>)
 8001520:	7c1b      	ldrb	r3, [r3, #16]
 8001522:	2b04      	cmp	r3, #4
 8001524:	d102      	bne.n	800152c <HAL_TIM_PeriodElapsedCallback+0x61c>
				turnOffPWMS = 1;
 8001526:	4b12      	ldr	r3, [pc, #72]	@ (8001570 <HAL_TIM_PeriodElapsedCallback+0x660>)
 8001528:	2201      	movs	r2, #1
 800152a:	701a      	strb	r2, [r3, #0]
			//sprintf(UART_buffer,"F:%06.2f,%06.2f,%06.2f,%06.2f,%06.2f,%06.2f,%06.2f,%06.2f,%06.2f:E\r\n",rampRPM.instTargetRPM_F,s.RPM,speedPID.error,foc.IqRef,foc.IdRef,foc.Iq,foc.Id,speedPID.KpTerm,speedPID.KiTerm);
			//HAL_UART_Transmit_IT(&huart3,(uint8_t *)UART_buffer,70);
		}*/
	}

	if (htim->Instance ==TIM7){ // 1ms Loop
 800152c:	687b      	ldr	r3, [r7, #4]
 800152e:	681b      	ldr	r3, [r3, #0]
 8001530:	4a11      	ldr	r2, [pc, #68]	@ (8001578 <HAL_TIM_PeriodElapsedCallback+0x668>)
 8001532:	4293      	cmp	r3, r2
 8001534:	d102      	bne.n	800153c <HAL_TIM_PeriodElapsedCallback+0x62c>
		 ExecPosTrajectory(&p);
 8001536:	4811      	ldr	r0, [pc, #68]	@ (800157c <HAL_TIM_PeriodElapsedCallback+0x66c>)
 8001538:	f003 f872 	bl	8004620 <ExecPosTrajectory>
	}

}
 800153c:	bf00      	nop
 800153e:	3708      	adds	r7, #8
 8001540:	46bd      	mov	sp, r7
 8001542:	bd80      	pop	{r7, pc}
 8001544:	20000a20 	.word	0x20000a20
 8001548:	20001aa0 	.word	0x20001aa0
 800154c:	20001a8c 	.word	0x20001a8c
 8001550:	200009b0 	.word	0x200009b0
 8001554:	20000860 	.word	0x20000860
 8001558:	2000094c 	.word	0x2000094c
 800155c:	e000e010 	.word	0xe000e010
 8001560:	20001b38 	.word	0x20001b38
 8001564:	20001b3c 	.word	0x20001b3c
 8001568:	40001000 	.word	0x40001000
 800156c:	20000980 	.word	0x20000980
 8001570:	20001af6 	.word	0x20001af6
 8001574:	200009f0 	.word	0x200009f0
 8001578:	40001400 	.word	0x40001400
 800157c:	20001a34 	.word	0x20001a34

08001580 <HAL_ADC_ConvCpltCallback>:


void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8001580:	b480      	push	{r7}
 8001582:	b083      	sub	sp, #12
 8001584:	af00      	add	r7, sp, #0
 8001586:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  if(hadc==&hadc2)
 8001588:	687b      	ldr	r3, [r7, #4]
 800158a:	4a0c      	ldr	r2, [pc, #48]	@ (80015bc <HAL_ADC_ConvCpltCallback+0x3c>)
 800158c:	4293      	cmp	r3, r2
 800158e:	d10e      	bne.n	80015ae <HAL_ADC_ConvCpltCallback+0x2e>
  {
	  adc.FetTemp_ADC =ADC2_buff[0];
 8001590:	4b0b      	ldr	r3, [pc, #44]	@ (80015c0 <HAL_ADC_ConvCpltCallback+0x40>)
 8001592:	881a      	ldrh	r2, [r3, #0]
 8001594:	4b0b      	ldr	r3, [pc, #44]	@ (80015c4 <HAL_ADC_ConvCpltCallback+0x44>)
 8001596:	805a      	strh	r2, [r3, #2]
	  adc.motorTemp_ADC =ADC2_buff[1];
 8001598:	4b09      	ldr	r3, [pc, #36]	@ (80015c0 <HAL_ADC_ConvCpltCallback+0x40>)
 800159a:	885a      	ldrh	r2, [r3, #2]
 800159c:	4b09      	ldr	r3, [pc, #36]	@ (80015c4 <HAL_ADC_ConvCpltCallback+0x44>)
 800159e:	809a      	strh	r2, [r3, #4]
	  adc.DCV_ADC =ADC2_buff[2];
 80015a0:	4b07      	ldr	r3, [pc, #28]	@ (80015c0 <HAL_ADC_ConvCpltCallback+0x40>)
 80015a2:	889a      	ldrh	r2, [r3, #4]
 80015a4:	4b07      	ldr	r3, [pc, #28]	@ (80015c4 <HAL_ADC_ConvCpltCallback+0x44>)
 80015a6:	80da      	strh	r2, [r3, #6]
	  adc.updated = 1;
 80015a8:	4b06      	ldr	r3, [pc, #24]	@ (80015c4 <HAL_ADC_ConvCpltCallback+0x44>)
 80015aa:	2201      	movs	r2, #1
 80015ac:	751a      	strb	r2, [r3, #20]
  }
}
 80015ae:	bf00      	nop
 80015b0:	370c      	adds	r7, #12
 80015b2:	46bd      	mov	sp, r7
 80015b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015b8:	4770      	bx	lr
 80015ba:	bf00      	nop
 80015bc:	200004c8 	.word	0x200004c8
 80015c0:	20001adc 	.word	0x20001adc
 80015c4:	20001ab8 	.word	0x20001ab8

080015c8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80015c8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80015ca:	b08f      	sub	sp, #60	@ 0x3c
 80015cc:	af0e      	add	r7, sp, #56	@ 0x38
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80015ce:	f004 f861 	bl	8005694 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80015d2:	f000 fbf9 	bl	8001dc8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80015d6:	f000 ff23 	bl	8002420 <MX_GPIO_Init>
  MX_DMA_Init();
 80015da:	f000 feef 	bl	80023bc <MX_DMA_Init>
  MX_SPI1_Init();
 80015de:	f000 fcd9 	bl	8001f94 <MX_SPI1_Init>
  MX_TIM1_Init();
 80015e2:	f000 fd15 	bl	8002010 <MX_TIM1_Init>
  MX_CORDIC_Init();
 80015e6:	f000 fcc1 	bl	8001f6c <MX_CORDIC_Init>
  MX_TIM6_Init();
 80015ea:	f000 fe2b 	bl	8002244 <MX_TIM6_Init>
  MX_TIM7_Init();
 80015ee:	f000 fe61 	bl	80022b4 <MX_TIM7_Init>
  MX_USART2_UART_Init();
 80015f2:	f000 fe95 	bl	8002320 <MX_USART2_UART_Init>
  MX_ADC2_Init();
 80015f6:	f000 fc31 	bl	8001e5c <MX_ADC2_Init>
  MX_TIM4_Init();
 80015fa:	f000 fdd3 	bl	80021a4 <MX_TIM4_Init>
  /* USER CODE BEGIN 2 */

  //Calibrate ADCs
  HAL_Delay(100);
 80015fe:	2064      	movs	r0, #100	@ 0x64
 8001600:	f004 f8b8 	bl	8005774 <HAL_Delay>
  HAL_ADCEx_Calibration_Start(&hadc2,ADC_SINGLE_ENDED);
 8001604:	217f      	movs	r1, #127	@ 0x7f
 8001606:	488a      	ldr	r0, [pc, #552]	@ (8001830 <main+0x268>)
 8001608:	f005 fd42 	bl	8007090 <HAL_ADCEx_Calibration_Start>
  HAL_Delay(100);
 800160c:	2064      	movs	r0, #100	@ 0x64
 800160e:	f004 f8b1 	bl	8005774 <HAL_Delay>

  HW_statesInit(&hw);
 8001612:	4888      	ldr	r0, [pc, #544]	@ (8001834 <main+0x26c>)
 8001614:	f002 fa81 	bl	8003b1a <HW_statesInit>
  hsLogInit(&hsLog);
 8001618:	4887      	ldr	r0, [pc, #540]	@ (8001838 <main+0x270>)
 800161a:	f002 fc1f 	bl	8003e5c <hsLogInit>
  /*This board has no external Eeprom. Till we add the code to use the
  internal flash as an eeprom, we have to keep seperate codes for the 45mm stack
  and the 30 mm stack motor*/

  //---45 mm Values ----//
  ms.encAvg_offset = 5210;//d axis 45mmstack -> Daxis 5210,
 800161e:	4b87      	ldr	r3, [pc, #540]	@ (800183c <main+0x274>)
 8001620:	f241 425a 	movw	r2, #5210	@ 0x145a
 8001624:	811a      	strh	r2, [r3, #8]
  ms.reversePhases = 1;
 8001626:	4b85      	ldr	r3, [pc, #532]	@ (800183c <main+0x274>)
 8001628:	2201      	movs	r2, #1
 800162a:	729a      	strb	r2, [r3, #10]
  ms.encCW_offset = 0; //find these nos by watching where the current is lowest for say 1000 rpm in closed loop
 800162c:	4b83      	ldr	r3, [pc, #524]	@ (800183c <main+0x274>)
 800162e:	f04f 0200 	mov.w	r2, #0
 8001632:	601a      	str	r2, [r3, #0]
  ms.encCCW_offset = -1.3;
 8001634:	4b81      	ldr	r3, [pc, #516]	@ (800183c <main+0x274>)
 8001636:	4a82      	ldr	r2, [pc, #520]	@ (8001840 <main+0x278>)
 8001638:	605a      	str	r2, [r3, #4]
//  ms.encAvg_offset = 3706;
//  ms.reversePhases = 1;
//  ms.encCW_offset = 0; //find these nos by watching where the current is lowest for say 1000 rpm in closed loop
//  ms.encCCW_offset = -1.3;

  setupOK = Encoder_setup(); //setup ABI mode without PWM
 800163a:	f001 ffc8 	bl	80035ce <Encoder_setup>
 800163e:	4603      	mov	r3, r0
 8001640:	461a      	mov	r2, r3
 8001642:	4b80      	ldr	r3, [pc, #512]	@ (8001844 <main+0x27c>)
 8001644:	701a      	strb	r2, [r3, #0]
  encZeroPosSetup = Encoder_updateZeroPosition(ms.encAvg_offset);
 8001646:	4b7d      	ldr	r3, [pc, #500]	@ (800183c <main+0x274>)
 8001648:	891b      	ldrh	r3, [r3, #8]
 800164a:	4618      	mov	r0, r3
 800164c:	f001 ffde 	bl	800360c <Encoder_updateZeroPosition>
 8001650:	4603      	mov	r3, r0
 8001652:	461a      	mov	r2, r3
 8001654:	4b7c      	ldr	r3, [pc, #496]	@ (8001848 <main+0x280>)
 8001656:	701a      	strb	r2, [r3, #0]
  errorSetupOK = Encoder_enableMagErrors();
 8001658:	f001 fffa 	bl	8003650 <Encoder_enableMagErrors>
 800165c:	4603      	mov	r3, r0
 800165e:	461a      	mov	r2, r3
 8001660:	4b7a      	ldr	r3, [pc, #488]	@ (800184c <main+0x284>)
 8001662:	701a      	strb	r2, [r3, #0]
  Cordic_setup(hcordic,sCordicConfig);
 8001664:	4e7a      	ldr	r6, [pc, #488]	@ (8001850 <main+0x288>)
 8001666:	4b7b      	ldr	r3, [pc, #492]	@ (8001854 <main+0x28c>)
 8001668:	ac06      	add	r4, sp, #24
 800166a:	461d      	mov	r5, r3
 800166c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800166e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001670:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8001674:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8001678:	466d      	mov	r5, sp
 800167a:	f106 0410 	add.w	r4, r6, #16
 800167e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001680:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001682:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001686:	e885 0003 	stmia.w	r5, {r0, r1}
 800168a:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 800168e:	f001 fe71 	bl	8003374 <Cordic_setup>

  //position trajectory setup
  Init_ConstJerk_PosControl(&p);
 8001692:	4871      	ldr	r0, [pc, #452]	@ (8001858 <main+0x290>)
 8001694:	f002 fe9c 	bl	80043d0 <Init_ConstJerk_PosControl>
  Reset_posControlJC(&p);
 8001698:	486f      	ldr	r0, [pc, #444]	@ (8001858 <main+0x290>)
 800169a:	f002 feb3 	bl	8004404 <Reset_posControlJC>

  r.rampPhase = RAMP_WAIT;
 800169e:	4b6f      	ldr	r3, [pc, #444]	@ (800185c <main+0x294>)
 80016a0:	2204      	movs	r2, #4
 80016a2:	771a      	strb	r2, [r3, #28]
  rampRPM.rampPhase = RAMP_WAIT;
 80016a4:	4b6e      	ldr	r3, [pc, #440]	@ (8001860 <main+0x298>)
 80016a6:	2204      	movs	r2, #4
 80016a8:	741a      	strb	r2, [r3, #16]

  // plotted and found Kp ki constant values with dbgTorque..
  Init_PID_Terms(&speedPID,3.0f,0.4f,0.0f,0.05f);
 80016aa:	eddf 1a6e 	vldr	s3, [pc, #440]	@ 8001864 <main+0x29c>
 80016ae:	ed9f 1a6e 	vldr	s2, [pc, #440]	@ 8001868 <main+0x2a0>
 80016b2:	eddf 0a6e 	vldr	s1, [pc, #440]	@ 800186c <main+0x2a4>
 80016b6:	eeb0 0a08 	vmov.f32	s0, #8	@ 0x40400000  3.0
 80016ba:	486d      	ldr	r0, [pc, #436]	@ (8001870 <main+0x2a8>)
 80016bc:	f002 fac4 	bl	8003c48 <Init_PID_Terms>
  Init_PID_Terms(&posPID,3.0f,0.001f,0.00f,0.005f);
 80016c0:	eddf 1a6c 	vldr	s3, [pc, #432]	@ 8001874 <main+0x2ac>
 80016c4:	ed9f 1a68 	vldr	s2, [pc, #416]	@ 8001868 <main+0x2a0>
 80016c8:	eddf 0a6b 	vldr	s1, [pc, #428]	@ 8001878 <main+0x2b0>
 80016cc:	eeb0 0a08 	vmov.f32	s0, #8	@ 0x40400000  3.0
 80016d0:	486a      	ldr	r0, [pc, #424]	@ (800187c <main+0x2b4>)
 80016d2:	f002 fab9 	bl	8003c48 <Init_PID_Terms>

  //only start the timer after youve done calibration properly, cos your reading the ADC in the timer also.
  HAL_TIM_Base_Start_IT(&htim1);
 80016d6:	486a      	ldr	r0, [pc, #424]	@ (8001880 <main+0x2b8>)
 80016d8:	f008 f84a 	bl	8009770 <HAL_TIM_Base_Start_IT>
  htim1.Instance->RCR = 1; // If its after the counter has started, interrupt is on the OVF, and division of interrupt is at (RCR+1), so for 1, divide by 2, for 0->1
 80016dc:	4b68      	ldr	r3, [pc, #416]	@ (8001880 <main+0x2b8>)
 80016de:	681b      	ldr	r3, [r3, #0]
 80016e0:	2201      	movs	r2, #1
 80016e2:	631a      	str	r2, [r3, #48]	@ 0x30

  HAL_TIM_Base_Start_IT(&htim6); // 20 ms interrupt
 80016e4:	4867      	ldr	r0, [pc, #412]	@ (8001884 <main+0x2bc>)
 80016e6:	f008 f843 	bl	8009770 <HAL_TIM_Base_Start_IT>
  HAL_TIM_Base_Start_IT(&htim7); // 1 ms interrupt
 80016ea:	4867      	ldr	r0, [pc, #412]	@ (8001888 <main+0x2c0>)
 80016ec:	f008 f840 	bl	8009770 <HAL_TIM_Base_Start_IT>
  //first values of the position sensor are noisy. so start reading it here, wait
  //for a while and then turn it off
  readPosition = 1;
 80016f0:	4b66      	ldr	r3, [pc, #408]	@ (800188c <main+0x2c4>)
 80016f2:	2201      	movs	r2, #1
 80016f4:	701a      	strb	r2, [r3, #0]
  HAL_Delay(10);
 80016f6:	200a      	movs	r0, #10
 80016f8:	f004 f83c 	bl	8005774 <HAL_Delay>
  readPosition = 0;
 80016fc:	4b63      	ldr	r3, [pc, #396]	@ (800188c <main+0x2c4>)
 80016fe:	2200      	movs	r2, #0
 8001700:	701a      	strb	r2, [r3, #0]

  setMaxFrictionPWM(&fr,frictionMaxPWM);
 8001702:	4b63      	ldr	r3, [pc, #396]	@ (8001890 <main+0x2c8>)
 8001704:	881b      	ldrh	r3, [r3, #0]
 8001706:	4619      	mov	r1, r3
 8001708:	4862      	ldr	r0, [pc, #392]	@ (8001894 <main+0x2cc>)
 800170a:	f001 fd8f 	bl	800322c <setMaxFrictionPWM>
  setMaxCoggingPWM(&cg,coggingMaxPWM);
 800170e:	4b62      	ldr	r3, [pc, #392]	@ (8001898 <main+0x2d0>)
 8001710:	881b      	ldrh	r3, [r3, #0]
 8001712:	4619      	mov	r1, r3
 8001714:	4861      	ldr	r0, [pc, #388]	@ (800189c <main+0x2d4>)
 8001716:	f001 fdd3 	bl	80032c0 <setMaxCoggingPWM>
  fr.frictionCompensationOn = 0;
 800171a:	4b5e      	ldr	r3, [pc, #376]	@ (8001894 <main+0x2cc>)
 800171c:	2200      	movs	r2, #0
 800171e:	701a      	strb	r2, [r3, #0]
  cg.coggingCompensationOn = 0;
 8001720:	4b5e      	ldr	r3, [pc, #376]	@ (800189c <main+0x2d4>)
 8001722:	2200      	movs	r2, #0
 8001724:	701a      	strb	r2, [r3, #0]

  //Start the ADCs -only for DC voltage and Temperature.
  HAL_TIM_Base_Start_IT(&htim4);//start timer for adc2 trigger
 8001726:	485e      	ldr	r0, [pc, #376]	@ (80018a0 <main+0x2d8>)
 8001728:	f008 f822 	bl	8009770 <HAL_TIM_Base_Start_IT>
  HAL_ADC_Start_DMA(&hadc2,(uint32_t*)ADC2_buff,3);
 800172c:	2203      	movs	r2, #3
 800172e:	495d      	ldr	r1, [pc, #372]	@ (80018a4 <main+0x2dc>)
 8001730:	483f      	ldr	r0, [pc, #252]	@ (8001830 <main+0x268>)
 8001732:	f004 fc2b 	bl	8005f8c <HAL_ADC_Start_DMA>
  HAL_Delay(100);
 8001736:	2064      	movs	r0, #100	@ 0x64
 8001738:	f004 f81c 	bl	8005774 <HAL_Delay>
  adc.FET_thermistor_open = checkThermistorOpen(adc.FetTemp_ADC);
 800173c:	4b5a      	ldr	r3, [pc, #360]	@ (80018a8 <main+0x2e0>)
 800173e:	885b      	ldrh	r3, [r3, #2]
 8001740:	4618      	mov	r0, r3
 8001742:	f001 fb3e 	bl	8002dc2 <checkThermistorOpen>
 8001746:	4603      	mov	r3, r0
 8001748:	b2da      	uxtb	r2, r3
 800174a:	4b57      	ldr	r3, [pc, #348]	@ (80018a8 <main+0x2e0>)
 800174c:	701a      	strb	r2, [r3, #0]
  adc.motor_thermistor_open = checkThermistorOpen(adc.motorTemp_ADC);
 800174e:	4b56      	ldr	r3, [pc, #344]	@ (80018a8 <main+0x2e0>)
 8001750:	889b      	ldrh	r3, [r3, #4]
 8001752:	4618      	mov	r0, r3
 8001754:	f001 fb35 	bl	8002dc2 <checkThermistorOpen>
 8001758:	4603      	mov	r3, r0
 800175a:	b2da      	uxtb	r2, r3
 800175c:	4b52      	ldr	r3, [pc, #328]	@ (80018a8 <main+0x2e0>)
 800175e:	705a      	strb	r2, [r3, #1]

  if (adc.FET_thermistor_open == 1){
 8001760:	4b51      	ldr	r3, [pc, #324]	@ (80018a8 <main+0x2e0>)
 8001762:	781b      	ldrb	r3, [r3, #0]
 8001764:	2b01      	cmp	r3, #1
 8001766:	d105      	bne.n	8001774 <main+0x1ac>
	  err.globalErrorFlag = 1;
 8001768:	4b50      	ldr	r3, [pc, #320]	@ (80018ac <main+0x2e4>)
 800176a:	2201      	movs	r2, #1
 800176c:	701a      	strb	r2, [r3, #0]
	  err.fetThermistorOpen = 1;
 800176e:	4b4f      	ldr	r3, [pc, #316]	@ (80018ac <main+0x2e4>)
 8001770:	2201      	movs	r2, #1
 8001772:	705a      	strb	r2, [r3, #1]
  }
  if (adc.motor_thermistor_open == 1){
 8001774:	4b4c      	ldr	r3, [pc, #304]	@ (80018a8 <main+0x2e0>)
 8001776:	785b      	ldrb	r3, [r3, #1]
 8001778:	2b01      	cmp	r3, #1
 800177a:	d105      	bne.n	8001788 <main+0x1c0>
	  err.globalErrorFlag = 1;
 800177c:	4b4b      	ldr	r3, [pc, #300]	@ (80018ac <main+0x2e4>)
 800177e:	2201      	movs	r2, #1
 8001780:	701a      	strb	r2, [r3, #0]
	  err.windingsThermistorOpen = 1;
 8001782:	4b4a      	ldr	r3, [pc, #296]	@ (80018ac <main+0x2e4>)
 8001784:	2201      	movs	r2, #1
 8001786:	709a      	strb	r2, [r3, #2]

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  if (adc.updated){
 8001788:	4b47      	ldr	r3, [pc, #284]	@ (80018a8 <main+0x2e0>)
 800178a:	7d1b      	ldrb	r3, [r3, #20]
 800178c:	2b00      	cmp	r3, #0
 800178e:	d03c      	beq.n	800180a <main+0x242>
		  adc.FetTemp_C = get_temperature(adc.FetTemp_ADC);
 8001790:	4b45      	ldr	r3, [pc, #276]	@ (80018a8 <main+0x2e0>)
 8001792:	885b      	ldrh	r3, [r3, #2]
 8001794:	4618      	mov	r0, r3
 8001796:	f001 fb2b 	bl	8002df0 <get_temperature>
 800179a:	4603      	mov	r3, r0
 800179c:	ee07 3a90 	vmov	s15, r3
 80017a0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80017a4:	4b40      	ldr	r3, [pc, #256]	@ (80018a8 <main+0x2e0>)
 80017a6:	edc3 7a02 	vstr	s15, [r3, #8]
		  adc.motorTemp_C = get_temperature(adc.motorTemp_ADC);
 80017aa:	4b3f      	ldr	r3, [pc, #252]	@ (80018a8 <main+0x2e0>)
 80017ac:	889b      	ldrh	r3, [r3, #4]
 80017ae:	4618      	mov	r0, r3
 80017b0:	f001 fb1e 	bl	8002df0 <get_temperature>
 80017b4:	4603      	mov	r3, r0
 80017b6:	ee07 3a90 	vmov	s15, r3
 80017ba:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80017be:	4b3a      	ldr	r3, [pc, #232]	@ (80018a8 <main+0x2e0>)
 80017c0:	edc3 7a03 	vstr	s15, [r3, #12]
		  if (adc.FetTemp_C > 65){
 80017c4:	4b38      	ldr	r3, [pc, #224]	@ (80018a8 <main+0x2e0>)
 80017c6:	edd3 7a02 	vldr	s15, [r3, #8]
 80017ca:	ed9f 7a39 	vldr	s14, [pc, #228]	@ 80018b0 <main+0x2e8>
 80017ce:	eef4 7ac7 	vcmpe.f32	s15, s14
 80017d2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80017d6:	dd05      	ble.n	80017e4 <main+0x21c>
			  err.globalErrorFlag = 1;
 80017d8:	4b34      	ldr	r3, [pc, #208]	@ (80018ac <main+0x2e4>)
 80017da:	2201      	movs	r2, #1
 80017dc:	701a      	strb	r2, [r3, #0]
			  err.temp_FET_outOfBounds = 1;
 80017de:	4b33      	ldr	r3, [pc, #204]	@ (80018ac <main+0x2e4>)
 80017e0:	2201      	movs	r2, #1
 80017e2:	70da      	strb	r2, [r3, #3]
		  }
		  if (adc.motorTemp_C > 90){
 80017e4:	4b30      	ldr	r3, [pc, #192]	@ (80018a8 <main+0x2e0>)
 80017e6:	edd3 7a03 	vldr	s15, [r3, #12]
 80017ea:	ed9f 7a32 	vldr	s14, [pc, #200]	@ 80018b4 <main+0x2ec>
 80017ee:	eef4 7ac7 	vcmpe.f32	s15, s14
 80017f2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80017f6:	dd05      	ble.n	8001804 <main+0x23c>
			  err.globalErrorFlag = 1;
 80017f8:	4b2c      	ldr	r3, [pc, #176]	@ (80018ac <main+0x2e4>)
 80017fa:	2201      	movs	r2, #1
 80017fc:	701a      	strb	r2, [r3, #0]
			  err.temp_windings_outOfBounds = 1;
 80017fe:	4b2b      	ldr	r3, [pc, #172]	@ (80018ac <main+0x2e4>)
 8001800:	2201      	movs	r2, #1
 8001802:	711a      	strb	r2, [r3, #4]
		  }

		  adc.updated=0;
 8001804:	4b28      	ldr	r3, [pc, #160]	@ (80018a8 <main+0x2e0>)
 8001806:	2200      	movs	r2, #0
 8001808:	751a      	strb	r2, [r3, #20]
	  }

	  if (err.globalErrorFlag == 1){
 800180a:	4b28      	ldr	r3, [pc, #160]	@ (80018ac <main+0x2e4>)
 800180c:	781b      	ldrb	r3, [r3, #0]
 800180e:	2b01      	cmp	r3, #1
 8001810:	d152      	bne.n	80018b8 <main+0x2f0>
		  StopAllPWM(&hw);
 8001812:	4808      	ldr	r0, [pc, #32]	@ (8001834 <main+0x26c>)
 8001814:	f002 f9c4 	bl	8003ba0 <StopAllPWM>
		  while(1){
			  err.counter++;
 8001818:	4b24      	ldr	r3, [pc, #144]	@ (80018ac <main+0x2e4>)
 800181a:	689b      	ldr	r3, [r3, #8]
 800181c:	3301      	adds	r3, #1
 800181e:	4a23      	ldr	r2, [pc, #140]	@ (80018ac <main+0x2e4>)
 8001820:	6093      	str	r3, [r2, #8]
			  HAL_Delay(1000);
 8001822:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8001826:	f003 ffa5 	bl	8005774 <HAL_Delay>
			  err.counter++;
 800182a:	bf00      	nop
 800182c:	e7f4      	b.n	8001818 <main+0x250>
 800182e:	bf00      	nop
 8001830:	200004c8 	.word	0x200004c8
 8001834:	20000970 	.word	0x20000970
 8001838:	20000a20 	.word	0x20000a20
 800183c:	20000974 	.word	0x20000974
 8001840:	bfa66666 	.word	0xbfa66666
 8001844:	20001ae2 	.word	0x20001ae2
 8001848:	20001ae4 	.word	0x20001ae4
 800184c:	20001ae3 	.word	0x20001ae3
 8001850:	20000594 	.word	0x20000594
 8001854:	20000844 	.word	0x20000844
 8001858:	20001a34 	.word	0x20001a34
 800185c:	20000980 	.word	0x20000980
 8001860:	200009f0 	.word	0x200009f0
 8001864:	3d4ccccd 	.word	0x3d4ccccd
 8001868:	00000000 	.word	0x00000000
 800186c:	3ecccccd 	.word	0x3ecccccd
 8001870:	200019e4 	.word	0x200019e4
 8001874:	3ba3d70a 	.word	0x3ba3d70a
 8001878:	3a83126f 	.word	0x3a83126f
 800187c:	20001a0c 	.word	0x20001a0c
 8001880:	20000620 	.word	0x20000620
 8001884:	200006b8 	.word	0x200006b8
 8001888:	20000704 	.word	0x20000704
 800188c:	20001af7 	.word	0x20001af7
 8001890:	20000004 	.word	0x20000004
 8001894:	20001a8c 	.word	0x20001a8c
 8001898:	20000006 	.word	0x20000006
 800189c:	20001aa0 	.word	0x20001aa0
 80018a0:	2000066c 	.word	0x2000066c
 80018a4:	20001adc 	.word	0x20001adc
 80018a8:	20001ab8 	.word	0x20001ab8
 80018ac:	20001ad0 	.word	0x20001ad0
 80018b0:	42820000 	.word	0x42820000
 80018b4:	42b40000 	.word	0x42b40000
		  }
	  }

	  if (turnOffPWMS){
 80018b8:	4ba8      	ldr	r3, [pc, #672]	@ (8001b5c <main+0x594>)
 80018ba:	f993 3000 	ldrsb.w	r3, [r3]
 80018be:	2b00      	cmp	r3, #0
 80018c0:	d005      	beq.n	80018ce <main+0x306>
		  StopAllPWM(&hw);
 80018c2:	48a7      	ldr	r0, [pc, #668]	@ (8001b60 <main+0x598>)
 80018c4:	f002 f96c 	bl	8003ba0 <StopAllPWM>
		  turnOffPWMS = 0;
 80018c8:	4ba4      	ldr	r3, [pc, #656]	@ (8001b5c <main+0x594>)
 80018ca:	2200      	movs	r2, #0
 80018cc:	701a      	strb	r2, [r3, #0]
	  }

	  if (checkEncoderHealth){
 80018ce:	4ba5      	ldr	r3, [pc, #660]	@ (8001b64 <main+0x59c>)
 80018d0:	781b      	ldrb	r3, [r3, #0]
 80018d2:	2b00      	cmp	r3, #0
 80018d4:	d008      	beq.n	80018e8 <main+0x320>
		  encoderNOK = Encoder_checkHealth();
 80018d6:	f001 fde3 	bl	80034a0 <Encoder_checkHealth>
 80018da:	4603      	mov	r3, r0
 80018dc:	461a      	mov	r2, r3
 80018de:	4ba2      	ldr	r3, [pc, #648]	@ (8001b68 <main+0x5a0>)
 80018e0:	701a      	strb	r2, [r3, #0]
		  checkEncoderHealth = 0;
 80018e2:	4ba0      	ldr	r3, [pc, #640]	@ (8001b64 <main+0x59c>)
 80018e4:	2200      	movs	r2, #0
 80018e6:	701a      	strb	r2, [r3, #0]
	  }

	  if (turnOff_sensors){
 80018e8:	4ba0      	ldr	r3, [pc, #640]	@ (8001b6c <main+0x5a4>)
 80018ea:	f993 3000 	ldrsb.w	r3, [r3]
 80018ee:	2b00      	cmp	r3, #0
 80018f0:	d008      	beq.n	8001904 <main+0x33c>
		  readPosition = 0;
 80018f2:	4b9f      	ldr	r3, [pc, #636]	@ (8001b70 <main+0x5a8>)
 80018f4:	2200      	movs	r2, #0
 80018f6:	701a      	strb	r2, [r3, #0]
		  turnOff_sensors = 0;
 80018f8:	4b9c      	ldr	r3, [pc, #624]	@ (8001b6c <main+0x5a4>)
 80018fa:	2200      	movs	r2, #0
 80018fc:	701a      	strb	r2, [r3, #0]
		  turnOffPWMS = 1;
 80018fe:	4b97      	ldr	r3, [pc, #604]	@ (8001b5c <main+0x594>)
 8001900:	2201      	movs	r2, #1
 8001902:	701a      	strb	r2, [r3, #0]
	  }

	  if (setupPosJC){
 8001904:	4b9b      	ldr	r3, [pc, #620]	@ (8001b74 <main+0x5ac>)
 8001906:	781b      	ldrb	r3, [r3, #0]
 8001908:	2b00      	cmp	r3, #0
 800190a:	d012      	beq.n	8001932 <main+0x36a>
		  Reset_posControlJC(&p);
 800190c:	489a      	ldr	r0, [pc, #616]	@ (8001b78 <main+0x5b0>)
 800190e:	f002 fd79 	bl	8004404 <Reset_posControlJC>
		  Setup_posControlJC(&p,pos_targetThetaDeg,pos_targetTime_ms);
 8001912:	4b9a      	ldr	r3, [pc, #616]	@ (8001b7c <main+0x5b4>)
 8001914:	edd3 7a00 	vldr	s15, [r3]
 8001918:	4b99      	ldr	r3, [pc, #612]	@ (8001b80 <main+0x5b8>)
 800191a:	ed93 7a00 	vldr	s14, [r3]
 800191e:	eef0 0a47 	vmov.f32	s1, s14
 8001922:	eeb0 0a67 	vmov.f32	s0, s15
 8001926:	4894      	ldr	r0, [pc, #592]	@ (8001b78 <main+0x5b0>)
 8001928:	f002 fdc2 	bl	80044b0 <Setup_posControlJC>
		  setupPosJC = 0;
 800192c:	4b91      	ldr	r3, [pc, #580]	@ (8001b74 <main+0x5ac>)
 800192e:	2200      	movs	r2, #0
 8001930:	701a      	strb	r2, [r3, #0]
	  }

	  if (startPosC){
 8001932:	4b94      	ldr	r3, [pc, #592]	@ (8001b84 <main+0x5bc>)
 8001934:	781b      	ldrb	r3, [r3, #0]
 8001936:	2b00      	cmp	r3, #0
 8001938:	d006      	beq.n	8001948 <main+0x380>
		  p.state = POS_RUNNING;
 800193a:	4b8f      	ldr	r3, [pc, #572]	@ (8001b78 <main+0x5b0>)
 800193c:	2201      	movs	r2, #1
 800193e:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
		  startPosC = 0;
 8001942:	4b90      	ldr	r3, [pc, #576]	@ (8001b84 <main+0x5bc>)
 8001944:	2200      	movs	r2, #0
 8001946:	701a      	strb	r2, [r3, #0]
	  }
	  if (stopPosC){
 8001948:	4b8f      	ldr	r3, [pc, #572]	@ (8001b88 <main+0x5c0>)
 800194a:	781b      	ldrb	r3, [r3, #0]
 800194c:	2b00      	cmp	r3, #0
 800194e:	d006      	beq.n	800195e <main+0x396>
		  p.state = POS_OVER;
 8001950:	4b89      	ldr	r3, [pc, #548]	@ (8001b78 <main+0x5b0>)
 8001952:	2202      	movs	r2, #2
 8001954:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
		  stopPosC = 0;
 8001958:	4b8b      	ldr	r3, [pc, #556]	@ (8001b88 <main+0x5c0>)
 800195a:	2200      	movs	r2, #0
 800195c:	701a      	strb	r2, [r3, #0]
	  }

	  if (setupFrictionAddition){
 800195e:	4b8b      	ldr	r3, [pc, #556]	@ (8001b8c <main+0x5c4>)
 8001960:	781b      	ldrb	r3, [r3, #0]
 8001962:	2b00      	cmp	r3, #0
 8001964:	d008      	beq.n	8001978 <main+0x3b0>
		  setMaxFrictionPWM(&fr,frictionMaxPWM);
 8001966:	4b8a      	ldr	r3, [pc, #552]	@ (8001b90 <main+0x5c8>)
 8001968:	881b      	ldrh	r3, [r3, #0]
 800196a:	4619      	mov	r1, r3
 800196c:	4889      	ldr	r0, [pc, #548]	@ (8001b94 <main+0x5cc>)
 800196e:	f001 fc5d 	bl	800322c <setMaxFrictionPWM>
		  setupFrictionAddition = 0;
 8001972:	4b86      	ldr	r3, [pc, #536]	@ (8001b8c <main+0x5c4>)
 8001974:	2200      	movs	r2, #0
 8001976:	701a      	strb	r2, [r3, #0]
	  }

	  if (setupCoggingAddition){
 8001978:	4b87      	ldr	r3, [pc, #540]	@ (8001b98 <main+0x5d0>)
 800197a:	781b      	ldrb	r3, [r3, #0]
 800197c:	2b00      	cmp	r3, #0
 800197e:	d008      	beq.n	8001992 <main+0x3ca>
		  setMaxCoggingPWM(&cg,coggingMaxPWM);
 8001980:	4b86      	ldr	r3, [pc, #536]	@ (8001b9c <main+0x5d4>)
 8001982:	881b      	ldrh	r3, [r3, #0]
 8001984:	4619      	mov	r1, r3
 8001986:	4886      	ldr	r0, [pc, #536]	@ (8001ba0 <main+0x5d8>)
 8001988:	f001 fc9a 	bl	80032c0 <setMaxCoggingPWM>
		  setupCoggingAddition = 0;
 800198c:	4b82      	ldr	r3, [pc, #520]	@ (8001b98 <main+0x5d0>)
 800198e:	2200      	movs	r2, #0
 8001990:	701a      	strb	r2, [r3, #0]
	  }
	  /*RMF control!
	  change d_elec Radians. MAke negative to change direction.
	  start with a value of 0.005 and slowly increase or decrease.
	  V.IMP -> motor has to rotate clockwise if d_elec is positive*/
	  if (OL_init){ // do with a position Loop
 8001992:	4b84      	ldr	r3, [pc, #528]	@ (8001ba4 <main+0x5dc>)
 8001994:	781b      	ldrb	r3, [r3, #0]
 8001996:	2b00      	cmp	r3, #0
 8001998:	d01b      	beq.n	80019d2 <main+0x40a>
		  //turn on the PWMS
		  readPosition = 1;
 800199a:	4b75      	ldr	r3, [pc, #468]	@ (8001b70 <main+0x5a8>)
 800199c:	2201      	movs	r2, #1
 800199e:	701a      	strb	r2, [r3, #0]
		  d_elecRadians = 0.001;
 80019a0:	4b81      	ldr	r3, [pc, #516]	@ (8001ba8 <main+0x5e0>)
 80019a2:	4a82      	ldr	r2, [pc, #520]	@ (8001bac <main+0x5e4>)
 80019a4:	601a      	str	r2, [r3, #0]
		  r.currentDutyF = 100;
 80019a6:	4b82      	ldr	r3, [pc, #520]	@ (8001bb0 <main+0x5e8>)
 80019a8:	4a82      	ldr	r2, [pc, #520]	@ (8001bb4 <main+0x5ec>)
 80019aa:	605a      	str	r2, [r3, #4]
		  //turn on the PWMS
		  ZeroAllCCRs(&svpwm);
 80019ac:	4882      	ldr	r0, [pc, #520]	@ (8001bb8 <main+0x5f0>)
 80019ae:	f002 f8a1 	bl	8003af4 <ZeroAllCCRs>
		  StartAllPWM(&hw);
 80019b2:	486b      	ldr	r0, [pc, #428]	@ (8001b60 <main+0x598>)
 80019b4:	f002 f8be 	bl	8003b34 <StartAllPWM>
		  runOL = 1;
 80019b8:	4b80      	ldr	r3, [pc, #512]	@ (8001bbc <main+0x5f4>)
 80019ba:	2201      	movs	r2, #1
 80019bc:	701a      	strb	r2, [r3, #0]
		  OL_init = 0;
 80019be:	4b79      	ldr	r3, [pc, #484]	@ (8001ba4 <main+0x5dc>)
 80019c0:	2200      	movs	r2, #0
 80019c2:	701a      	strb	r2, [r3, #0]
		  //pid stuff
		  HAL_Delay(100); // time for a reading to be taken.
 80019c4:	2064      	movs	r0, #100	@ 0x64
 80019c6:	f003 fed5 	bl	8005774 <HAL_Delay>
		  OL_offsetRadians = ps.elecRadians;
 80019ca:	4b7d      	ldr	r3, [pc, #500]	@ (8001bc0 <main+0x5f8>)
 80019cc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80019ce:	4a7d      	ldr	r2, [pc, #500]	@ (8001bc4 <main+0x5fc>)
 80019d0:	6013      	str	r3, [r2, #0]
	  }

	  if (OL_stop){
 80019d2:	4b7d      	ldr	r3, [pc, #500]	@ (8001bc8 <main+0x600>)
 80019d4:	781b      	ldrb	r3, [r3, #0]
 80019d6:	2b00      	cmp	r3, #0
 80019d8:	d00b      	beq.n	80019f2 <main+0x42a>
		  runOL = 0;
 80019da:	4b78      	ldr	r3, [pc, #480]	@ (8001bbc <main+0x5f4>)
 80019dc:	2200      	movs	r2, #0
 80019de:	701a      	strb	r2, [r3, #0]
		  StopAllPWM(&hw);
 80019e0:	485f      	ldr	r0, [pc, #380]	@ (8001b60 <main+0x598>)
 80019e2:	f002 f8dd 	bl	8003ba0 <StopAllPWM>
		  turnOff_sensors =1;
 80019e6:	4b61      	ldr	r3, [pc, #388]	@ (8001b6c <main+0x5a4>)
 80019e8:	2201      	movs	r2, #1
 80019ea:	701a      	strb	r2, [r3, #0]
		  OL_stop = 0;
 80019ec:	4b76      	ldr	r3, [pc, #472]	@ (8001bc8 <main+0x600>)
 80019ee:	2200      	movs	r2, #0
 80019f0:	701a      	strb	r2, [r3, #0]
	  }


	  /*---------------*/
	  //RUN with some DUTY CYCLE
	  if (dbg_rampDuty_RUStart){
 80019f2:	4b76      	ldr	r3, [pc, #472]	@ (8001bcc <main+0x604>)
 80019f4:	781b      	ldrb	r3, [r3, #0]
 80019f6:	2b00      	cmp	r3, #0
 80019f8:	d01a      	beq.n	8001a30 <main+0x468>
		readPosition = 1;
 80019fa:	4b5d      	ldr	r3, [pc, #372]	@ (8001b70 <main+0x5a8>)
 80019fc:	2201      	movs	r2, #1
 80019fe:	701a      	strb	r2, [r3, #0]
		//direction = CW ; not set here so u can change direction in debug mode. 1 or -1 ONLY!!
		//fill up the Ramp Duty Struct- TargetRPRm,rampUp Time, rampDownTime, and steadY state runTime
		InitRampDutyStruct(&r,targetDuty,5000,5000,300);
 8001a00:	4b73      	ldr	r3, [pc, #460]	@ (8001bd0 <main+0x608>)
 8001a02:	8819      	ldrh	r1, [r3, #0]
 8001a04:	f44f 7396 	mov.w	r3, #300	@ 0x12c
 8001a08:	9300      	str	r3, [sp, #0]
 8001a0a:	f241 3388 	movw	r3, #5000	@ 0x1388
 8001a0e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001a12:	4867      	ldr	r0, [pc, #412]	@ (8001bb0 <main+0x5e8>)
 8001a14:	f003 f894 	bl	8004b40 <InitRampDutyStruct>
		StartRampDuty(&r);
 8001a18:	4865      	ldr	r0, [pc, #404]	@ (8001bb0 <main+0x5e8>)
 8001a1a:	f003 f919 	bl	8004c50 <StartRampDuty>
		//turn on the PWMS
		ZeroAllCCRs(&svpwm);
 8001a1e:	4866      	ldr	r0, [pc, #408]	@ (8001bb8 <main+0x5f0>)
 8001a20:	f002 f868 	bl	8003af4 <ZeroAllCCRs>
		StartAllPWM(&hw);
 8001a24:	484e      	ldr	r0, [pc, #312]	@ (8001b60 <main+0x598>)
 8001a26:	f002 f885 	bl	8003b34 <StartAllPWM>
		dbg_rampDuty_RUStart = 0;
 8001a2a:	4b68      	ldr	r3, [pc, #416]	@ (8001bcc <main+0x604>)
 8001a2c:	2200      	movs	r2, #0
 8001a2e:	701a      	strb	r2, [r3, #0]
	  }

	  if (dbg_rampDuty_RDStart){
 8001a30:	4b68      	ldr	r3, [pc, #416]	@ (8001bd4 <main+0x60c>)
 8001a32:	781b      	ldrb	r3, [r3, #0]
 8001a34:	2b00      	cmp	r3, #0
 8001a36:	d005      	beq.n	8001a44 <main+0x47c>
		  StartRampDownDuty(&r);
 8001a38:	485d      	ldr	r0, [pc, #372]	@ (8001bb0 <main+0x5e8>)
 8001a3a:	f003 f916 	bl	8004c6a <StartRampDownDuty>
		  dbg_rampDuty_RDStart= 0;
 8001a3e:	4b65      	ldr	r3, [pc, #404]	@ (8001bd4 <main+0x60c>)
 8001a40:	2200      	movs	r2, #0
 8001a42:	701a      	strb	r2, [r3, #0]
		  // change this later to keep track of where rpm becomes zero,
		  // and there make swithc of the PWMs
	  }

	  //Set transition Target and Transition Time in RM
	  if(dbg_rampDuty_ChangeDuty){
 8001a44:	4b64      	ldr	r3, [pc, #400]	@ (8001bd8 <main+0x610>)
 8001a46:	781b      	ldrb	r3, [r3, #0]
 8001a48:	2b00      	cmp	r3, #0
 8001a4a:	d00e      	beq.n	8001a6a <main+0x4a2>
		  ChangeDuty(&r);
 8001a4c:	4858      	ldr	r0, [pc, #352]	@ (8001bb0 <main+0x5e8>)
 8001a4e:	f003 fa29 	bl	8004ea4 <ChangeDuty>
		  Recalculate_RampDuty_RampRates(&r,r.transitionTarget);
 8001a52:	4b57      	ldr	r3, [pc, #348]	@ (8001bb0 <main+0x5e8>)
 8001a54:	8bdb      	ldrh	r3, [r3, #30]
 8001a56:	4619      	mov	r1, r3
 8001a58:	4855      	ldr	r0, [pc, #340]	@ (8001bb0 <main+0x5e8>)
 8001a5a:	f003 fa75 	bl	8004f48 <Recalculate_RampDuty_RampRates>
		  r.rampPhase = RAMP_CHANGE;
 8001a5e:	4b54      	ldr	r3, [pc, #336]	@ (8001bb0 <main+0x5e8>)
 8001a60:	2208      	movs	r2, #8
 8001a62:	771a      	strb	r2, [r3, #28]
		  dbg_rampDuty_ChangeDuty = 0;
 8001a64:	4b5c      	ldr	r3, [pc, #368]	@ (8001bd8 <main+0x610>)
 8001a66:	2200      	movs	r2, #0
 8001a68:	701a      	strb	r2, [r3, #0]
	  }

	  if (dbg_rampDuty_Stop){
 8001a6a:	4b5c      	ldr	r3, [pc, #368]	@ (8001bdc <main+0x614>)
 8001a6c:	781b      	ldrb	r3, [r3, #0]
 8001a6e:	2b00      	cmp	r3, #0
 8001a70:	d008      	beq.n	8001a84 <main+0x4bc>
		  // we need to stop the six sector Obj, and then stop the Ramp
		  StopAllPWM(&hw);
 8001a72:	483b      	ldr	r0, [pc, #236]	@ (8001b60 <main+0x598>)
 8001a74:	f002 f894 	bl	8003ba0 <StopAllPWM>
		  StopRampDuty(&r);
 8001a78:	484d      	ldr	r0, [pc, #308]	@ (8001bb0 <main+0x5e8>)
 8001a7a:	f003 f907 	bl	8004c8c <StopRampDuty>
		  dbg_rampDuty_Stop =0;
 8001a7e:	4b57      	ldr	r3, [pc, #348]	@ (8001bdc <main+0x614>)
 8001a80:	2200      	movs	r2, #0
 8001a82:	701a      	strb	r2, [r3, #0]
	  }


	  /*------------------------------------------*/
	  //run with RPM
	  if (dbg_rampRPM_RUStart){
 8001a84:	4b56      	ldr	r3, [pc, #344]	@ (8001be0 <main+0x618>)
 8001a86:	781b      	ldrb	r3, [r3, #0]
 8001a88:	2b00      	cmp	r3, #0
 8001a8a:	d01d      	beq.n	8001ac8 <main+0x500>
		//fill up the Ramp Duty Struct- TargetRPRm,rampUp Time, rampDownTime, and steadY state runTime
		InitRampRPMStruct(&rampRPM,targetRPM,10.0f,12.0f,300.0f);
 8001a8c:	4b55      	ldr	r3, [pc, #340]	@ (8001be4 <main+0x61c>)
 8001a8e:	881b      	ldrh	r3, [r3, #0]
 8001a90:	ed9f 1a55 	vldr	s2, [pc, #340]	@ 8001be8 <main+0x620>
 8001a94:	eef2 0a08 	vmov.f32	s1, #40	@ 0x41400000  12.0
 8001a98:	eeb2 0a04 	vmov.f32	s0, #36	@ 0x41200000  10.0
 8001a9c:	4619      	mov	r1, r3
 8001a9e:	4853      	ldr	r0, [pc, #332]	@ (8001bec <main+0x624>)
 8001aa0:	f003 fab2 	bl	8005008 <InitRampRPMStruct>
		readPosition = 1;
 8001aa4:	4b32      	ldr	r3, [pc, #200]	@ (8001b70 <main+0x5a8>)
 8001aa6:	2201      	movs	r2, #1
 8001aa8:	701a      	strb	r2, [r3, #0]
		Zero_PID_Terms(&speedPID);
 8001aaa:	4851      	ldr	r0, [pc, #324]	@ (8001bf0 <main+0x628>)
 8001aac:	f002 f8b2 	bl	8003c14 <Zero_PID_Terms>
		StartRampRPM(&rampRPM); 		// we need to start the Ramp
 8001ab0:	484e      	ldr	r0, [pc, #312]	@ (8001bec <main+0x624>)
 8001ab2:	f003 fb29 	bl	8005108 <StartRampRPM>
		ZeroAllCCRs(&svpwm);
 8001ab6:	4840      	ldr	r0, [pc, #256]	@ (8001bb8 <main+0x5f0>)
 8001ab8:	f002 f81c 	bl	8003af4 <ZeroAllCCRs>
		StartAllPWM(&hw); 		//turn on the PWMS
 8001abc:	4828      	ldr	r0, [pc, #160]	@ (8001b60 <main+0x598>)
 8001abe:	f002 f839 	bl	8003b34 <StartAllPWM>
		//need to reset the timer to allow for calculation of Time to take place
		dbg_rampRPM_RUStart = 0;
 8001ac2:	4b47      	ldr	r3, [pc, #284]	@ (8001be0 <main+0x618>)
 8001ac4:	2200      	movs	r2, #0
 8001ac6:	701a      	strb	r2, [r3, #0]
	  }

	  if (dbg_rampRPM_RDStart){
 8001ac8:	4b4a      	ldr	r3, [pc, #296]	@ (8001bf4 <main+0x62c>)
 8001aca:	781b      	ldrb	r3, [r3, #0]
 8001acc:	2b00      	cmp	r3, #0
 8001ace:	d005      	beq.n	8001adc <main+0x514>
		  StartRampDownRPM(&rampRPM);
 8001ad0:	4846      	ldr	r0, [pc, #280]	@ (8001bec <main+0x624>)
 8001ad2:	f003 fb26 	bl	8005122 <StartRampDownRPM>
		  dbg_rampRPM_RDStart= 0;
 8001ad6:	4b47      	ldr	r3, [pc, #284]	@ (8001bf4 <main+0x62c>)
 8001ad8:	2200      	movs	r2, #0
 8001ada:	701a      	strb	r2, [r3, #0]
	  }

	  //Set transition Target and Transition Time in RM
	  if(dbg_rampRPM_ChangeRPM){
 8001adc:	4b46      	ldr	r3, [pc, #280]	@ (8001bf8 <main+0x630>)
 8001ade:	781b      	ldrb	r3, [r3, #0]
 8001ae0:	2b00      	cmp	r3, #0
 8001ae2:	d019      	beq.n	8001b18 <main+0x550>
		  ChangeRPM(&rampRPM,RPM_transitionTarget,RPM_transitionTime);
 8001ae4:	4b45      	ldr	r3, [pc, #276]	@ (8001bfc <main+0x634>)
 8001ae6:	881b      	ldrh	r3, [r3, #0]
 8001ae8:	4a45      	ldr	r2, [pc, #276]	@ (8001c00 <main+0x638>)
 8001aea:	8812      	ldrh	r2, [r2, #0]
 8001aec:	ee07 2a90 	vmov	s15, r2
 8001af0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001af4:	eeb0 0a67 	vmov.f32	s0, s15
 8001af8:	4619      	mov	r1, r3
 8001afa:	483c      	ldr	r0, [pc, #240]	@ (8001bec <main+0x624>)
 8001afc:	f003 fc46 	bl	800538c <ChangeRPM>
		  Recalculate_RampRPM_RampRates(&rampRPM,RPM_transitionTarget);
 8001b00:	4b3e      	ldr	r3, [pc, #248]	@ (8001bfc <main+0x634>)
 8001b02:	881b      	ldrh	r3, [r3, #0]
 8001b04:	4619      	mov	r1, r3
 8001b06:	4839      	ldr	r0, [pc, #228]	@ (8001bec <main+0x624>)
 8001b08:	f003 fcbd 	bl	8005486 <Recalculate_RampRPM_RampRates>
		  rampRPM.rampPhase = RAMP_CHANGE;
 8001b0c:	4b37      	ldr	r3, [pc, #220]	@ (8001bec <main+0x624>)
 8001b0e:	2208      	movs	r2, #8
 8001b10:	741a      	strb	r2, [r3, #16]
		  dbg_rampRPM_ChangeRPM = 0;
 8001b12:	4b39      	ldr	r3, [pc, #228]	@ (8001bf8 <main+0x630>)
 8001b14:	2200      	movs	r2, #0
 8001b16:	701a      	strb	r2, [r3, #0]
	  }

	  //STOP CLOSED LOOP
	  if (dbg_rampRPM_Stop){
 8001b18:	4b3a      	ldr	r3, [pc, #232]	@ (8001c04 <main+0x63c>)
 8001b1a:	781b      	ldrb	r3, [r3, #0]
 8001b1c:	2b00      	cmp	r3, #0
 8001b1e:	d008      	beq.n	8001b32 <main+0x56a>
		  StopAllPWM(&hw);
 8001b20:	480f      	ldr	r0, [pc, #60]	@ (8001b60 <main+0x598>)
 8001b22:	f002 f83d 	bl	8003ba0 <StopAllPWM>
		  StopRampRPM(&rampRPM);
 8001b26:	4831      	ldr	r0, [pc, #196]	@ (8001bec <main+0x624>)
 8001b28:	f003 fb08 	bl	800513c <StopRampRPM>
		  dbg_rampRPM_Stop =0;
 8001b2c:	4b35      	ldr	r3, [pc, #212]	@ (8001c04 <main+0x63c>)
 8001b2e:	2200      	movs	r2, #0
 8001b30:	701a      	strb	r2, [r3, #0]
	  }

	  /*--------------------------------------------------*/

	  if(checkUartDmA){
 8001b32:	4b35      	ldr	r3, [pc, #212]	@ (8001c08 <main+0x640>)
 8001b34:	781b      	ldrb	r3, [r3, #0]
 8001b36:	2b00      	cmp	r3, #0
 8001b38:	d007      	beq.n	8001b4a <main+0x582>
		  HAL_UART_Transmit_DMA(&huart2,(uint8_t *)"is this Working????\r\n",22);
 8001b3a:	2216      	movs	r2, #22
 8001b3c:	4933      	ldr	r1, [pc, #204]	@ (8001c0c <main+0x644>)
 8001b3e:	4834      	ldr	r0, [pc, #208]	@ (8001c10 <main+0x648>)
 8001b40:	f009 fb2e 	bl	800b1a0 <HAL_UART_Transmit_DMA>
		  checkUartDmA = 0;
 8001b44:	4b30      	ldr	r3, [pc, #192]	@ (8001c08 <main+0x640>)
 8001b46:	2200      	movs	r2, #0
 8001b48:	701a      	strb	r2, [r3, #0]
	  }
	  /*------------------------------------------------*/

	  if (hsLogOn){
 8001b4a:	4b32      	ldr	r3, [pc, #200]	@ (8001c14 <main+0x64c>)
 8001b4c:	781b      	ldrb	r3, [r3, #0]
 8001b4e:	2b00      	cmp	r3, #0
 8001b50:	f000 811a 	beq.w	8001d88 <main+0x7c0>
		  if (hsLog.firstTime == 0){
 8001b54:	4b30      	ldr	r3, [pc, #192]	@ (8001c18 <main+0x650>)
 8001b56:	785b      	ldrb	r3, [r3, #1]
 8001b58:	2b00      	cmp	r3, #0
 8001b5a:	e05f      	b.n	8001c1c <main+0x654>
 8001b5c:	20001af6 	.word	0x20001af6
 8001b60:	20000970 	.word	0x20000970
 8001b64:	20001b52 	.word	0x20001b52
 8001b68:	20001b53 	.word	0x20001b53
 8001b6c:	20001af8 	.word	0x20001af8
 8001b70:	20001af7 	.word	0x20001af7
 8001b74:	20001b28 	.word	0x20001b28
 8001b78:	20001a34 	.word	0x20001a34
 8001b7c:	20001b2c 	.word	0x20001b2c
 8001b80:	20001b30 	.word	0x20001b30
 8001b84:	20001b29 	.word	0x20001b29
 8001b88:	20001b2a 	.word	0x20001b2a
 8001b8c:	20001b50 	.word	0x20001b50
 8001b90:	20000004 	.word	0x20000004
 8001b94:	20001a8c 	.word	0x20001a8c
 8001b98:	20001b51 	.word	0x20001b51
 8001b9c:	20000006 	.word	0x20000006
 8001ba0:	20001aa0 	.word	0x20001aa0
 8001ba4:	20001b05 	.word	0x20001b05
 8001ba8:	20001b00 	.word	0x20001b00
 8001bac:	3a83126f 	.word	0x3a83126f
 8001bb0:	20000980 	.word	0x20000980
 8001bb4:	42c80000 	.word	0x42c80000
 8001bb8:	2000094c 	.word	0x2000094c
 8001bbc:	20001b04 	.word	0x20001b04
 8001bc0:	20000860 	.word	0x20000860
 8001bc4:	20001b14 	.word	0x20001b14
 8001bc8:	20001b06 	.word	0x20001b06
 8001bcc:	20001ae5 	.word	0x20001ae5
 8001bd0:	20001af2 	.word	0x20001af2
 8001bd4:	20001ae6 	.word	0x20001ae6
 8001bd8:	20001ae7 	.word	0x20001ae7
 8001bdc:	20001ae8 	.word	0x20001ae8
 8001be0:	20001ae9 	.word	0x20001ae9
 8001be4:	20001af4 	.word	0x20001af4
 8001be8:	43960000 	.word	0x43960000
 8001bec:	200009f0 	.word	0x200009f0
 8001bf0:	200019e4 	.word	0x200019e4
 8001bf4:	20001aea 	.word	0x20001aea
 8001bf8:	20001aeb 	.word	0x20001aeb
 8001bfc:	20001af0 	.word	0x20001af0
 8001c00:	20001aee 	.word	0x20001aee
 8001c04:	20001aec 	.word	0x20001aec
 8001c08:	20001b41 	.word	0x20001b41
 8001c0c:	0800f0c8 	.word	0x0800f0c8
 8001c10:	20000750 	.word	0x20000750
 8001c14:	20001b40 	.word	0x20001b40
 8001c18:	20000a20 	.word	0x20000a20
 8001c1c:	d11f      	bne.n	8001c5e <main+0x696>
			  hsLogStart(&hsLog,&ps);
 8001c1e:	495c      	ldr	r1, [pc, #368]	@ (8001d90 <main+0x7c8>)
 8001c20:	485c      	ldr	r0, [pc, #368]	@ (8001d94 <main+0x7cc>)
 8001c22:	f002 f933 	bl	8003e8c <hsLogStart>
			  hsLog.end_multiTurns = hsLog.start_multiTurns  + (direction * TWO_PI_F * LOG_TURNS);
 8001c26:	4b5b      	ldr	r3, [pc, #364]	@ (8001d94 <main+0x7cc>)
 8001c28:	ed93 7a01 	vldr	s14, [r3, #4]
 8001c2c:	4b5a      	ldr	r3, [pc, #360]	@ (8001d98 <main+0x7d0>)
 8001c2e:	f993 3000 	ldrsb.w	r3, [r3]
 8001c32:	ee07 3a90 	vmov	s15, r3
 8001c36:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001c3a:	eddf 6a58 	vldr	s13, [pc, #352]	@ 8001d9c <main+0x7d4>
 8001c3e:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8001c42:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8001c46:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001c4a:	4b52      	ldr	r3, [pc, #328]	@ (8001d94 <main+0x7cc>)
 8001c4c:	edc3 7a02 	vstr	s15, [r3, #8]
			  hsLog.addDatas = 0;
 8001c50:	4b50      	ldr	r3, [pc, #320]	@ (8001d94 <main+0x7cc>)
 8001c52:	2200      	movs	r2, #0
 8001c54:	f8c3 2fc0 	str.w	r2, [r3, #4032]	@ 0xfc0
			  totalBytes = 0;
 8001c58:	4b51      	ldr	r3, [pc, #324]	@ (8001da0 <main+0x7d8>)
 8001c5a:	2200      	movs	r2, #0
 8001c5c:	601a      	str	r2, [r3, #0]
		  }

		  if (hsLog.sendOut == BUFFER1){
 8001c5e:	4b4d      	ldr	r3, [pc, #308]	@ (8001d94 <main+0x7cc>)
 8001c60:	f893 3fb0 	ldrb.w	r3, [r3, #4016]	@ 0xfb0
 8001c64:	2b01      	cmp	r3, #1
 8001c66:	d11f      	bne.n	8001ca8 <main+0x6e0>
			  HAL_UART_Transmit_DMA(&huart2,(uint8_t *)hsLog.HSbuffer1,hsLog.sendOutBufferSize);
 8001c68:	4b4a      	ldr	r3, [pc, #296]	@ (8001d94 <main+0x7cc>)
 8001c6a:	f8b3 3fb2 	ldrh.w	r3, [r3, #4018]	@ 0xfb2
 8001c6e:	461a      	mov	r2, r3
 8001c70:	494c      	ldr	r1, [pc, #304]	@ (8001da4 <main+0x7dc>)
 8001c72:	484d      	ldr	r0, [pc, #308]	@ (8001da8 <main+0x7e0>)
 8001c74:	f009 fa94 	bl	800b1a0 <HAL_UART_Transmit_DMA>
			  //hsLog.DMAdataSentOut = 0;
			  hsLog.sendOut = NOBUFFER;
 8001c78:	4b46      	ldr	r3, [pc, #280]	@ (8001d94 <main+0x7cc>)
 8001c7a:	2200      	movs	r2, #0
 8001c7c:	f883 2fb0 	strb.w	r2, [r3, #4016]	@ 0xfb0
			  totalBytes += hsLog.sendOutBufferSize;
 8001c80:	4b44      	ldr	r3, [pc, #272]	@ (8001d94 <main+0x7cc>)
 8001c82:	f8b3 3fb2 	ldrh.w	r3, [r3, #4018]	@ 0xfb2
 8001c86:	461a      	mov	r2, r3
 8001c88:	4b45      	ldr	r3, [pc, #276]	@ (8001da0 <main+0x7d8>)
 8001c8a:	681b      	ldr	r3, [r3, #0]
 8001c8c:	4413      	add	r3, r2
 8001c8e:	4a44      	ldr	r2, [pc, #272]	@ (8001da0 <main+0x7d8>)
 8001c90:	6013      	str	r3, [r2, #0]
			  hsLog.sendOutBufferSize = 0;
 8001c92:	4b40      	ldr	r3, [pc, #256]	@ (8001d94 <main+0x7cc>)
 8001c94:	2200      	movs	r2, #0
 8001c96:	f8a3 2fb2 	strh.w	r2, [r3, #4018]	@ 0xfb2
			  buffer1Sent+=1;
 8001c9a:	4b44      	ldr	r3, [pc, #272]	@ (8001dac <main+0x7e4>)
 8001c9c:	881b      	ldrh	r3, [r3, #0]
 8001c9e:	3301      	adds	r3, #1
 8001ca0:	b29a      	uxth	r2, r3
 8001ca2:	4b42      	ldr	r3, [pc, #264]	@ (8001dac <main+0x7e4>)
 8001ca4:	801a      	strh	r2, [r3, #0]
 8001ca6:	e023      	b.n	8001cf0 <main+0x728>
		  }
		  else if (hsLog.sendOut == BUFFER2){
 8001ca8:	4b3a      	ldr	r3, [pc, #232]	@ (8001d94 <main+0x7cc>)
 8001caa:	f893 3fb0 	ldrb.w	r3, [r3, #4016]	@ 0xfb0
 8001cae:	2b02      	cmp	r3, #2
 8001cb0:	d11e      	bne.n	8001cf0 <main+0x728>
			  HAL_UART_Transmit_DMA(&huart2,(uint8_t *)hsLog.HSbuffer2,hsLog.sendOutBufferSize);
 8001cb2:	4b38      	ldr	r3, [pc, #224]	@ (8001d94 <main+0x7cc>)
 8001cb4:	f8b3 3fb2 	ldrh.w	r3, [r3, #4018]	@ 0xfb2
 8001cb8:	461a      	mov	r2, r3
 8001cba:	493d      	ldr	r1, [pc, #244]	@ (8001db0 <main+0x7e8>)
 8001cbc:	483a      	ldr	r0, [pc, #232]	@ (8001da8 <main+0x7e0>)
 8001cbe:	f009 fa6f 	bl	800b1a0 <HAL_UART_Transmit_DMA>
			  //hsLog.DMAdataSentOut = 0;
			  hsLog.sendOut = NOBUFFER;
 8001cc2:	4b34      	ldr	r3, [pc, #208]	@ (8001d94 <main+0x7cc>)
 8001cc4:	2200      	movs	r2, #0
 8001cc6:	f883 2fb0 	strb.w	r2, [r3, #4016]	@ 0xfb0
			  totalBytes += hsLog.sendOutBufferSize;
 8001cca:	4b32      	ldr	r3, [pc, #200]	@ (8001d94 <main+0x7cc>)
 8001ccc:	f8b3 3fb2 	ldrh.w	r3, [r3, #4018]	@ 0xfb2
 8001cd0:	461a      	mov	r2, r3
 8001cd2:	4b33      	ldr	r3, [pc, #204]	@ (8001da0 <main+0x7d8>)
 8001cd4:	681b      	ldr	r3, [r3, #0]
 8001cd6:	4413      	add	r3, r2
 8001cd8:	4a31      	ldr	r2, [pc, #196]	@ (8001da0 <main+0x7d8>)
 8001cda:	6013      	str	r3, [r2, #0]
			  hsLog.sendOutBufferSize = 0;
 8001cdc:	4b2d      	ldr	r3, [pc, #180]	@ (8001d94 <main+0x7cc>)
 8001cde:	2200      	movs	r2, #0
 8001ce0:	f8a3 2fb2 	strh.w	r2, [r3, #4018]	@ 0xfb2
			  buffer2Sent+=1;
 8001ce4:	4b33      	ldr	r3, [pc, #204]	@ (8001db4 <main+0x7ec>)
 8001ce6:	881b      	ldrh	r3, [r3, #0]
 8001ce8:	3301      	adds	r3, #1
 8001cea:	b29a      	uxth	r2, r3
 8001cec:	4b31      	ldr	r3, [pc, #196]	@ (8001db4 <main+0x7ec>)
 8001cee:	801a      	strh	r2, [r3, #0]
		  }
		  else {}
		  hsLog_CheckStopConditionReached(&hsLog,&ps,direction);
 8001cf0:	4b29      	ldr	r3, [pc, #164]	@ (8001d98 <main+0x7d0>)
 8001cf2:	f993 3000 	ldrsb.w	r3, [r3]
 8001cf6:	461a      	mov	r2, r3
 8001cf8:	4925      	ldr	r1, [pc, #148]	@ (8001d90 <main+0x7c8>)
 8001cfa:	4826      	ldr	r0, [pc, #152]	@ (8001d94 <main+0x7cc>)
 8001cfc:	f002 faf8 	bl	80042f0 <hsLog_CheckStopConditionReached>
		  if (hsLog.stopAndFlushBuffer){
 8001d00:	4b24      	ldr	r3, [pc, #144]	@ (8001d94 <main+0x7cc>)
 8001d02:	7b1b      	ldrb	r3, [r3, #12]
 8001d04:	2b00      	cmp	r3, #0
 8001d06:	f43f ad3f 	beq.w	8001788 <main+0x1c0>
			  //stop  the log, send out whatever data
			 hsLog.enable = 0;
 8001d0a:	4b22      	ldr	r3, [pc, #136]	@ (8001d94 <main+0x7cc>)
 8001d0c:	2200      	movs	r2, #0
 8001d0e:	701a      	strb	r2, [r3, #0]
			 hsLog.endLoopIndex = svpwm.loopCounter;
 8001d10:	4b29      	ldr	r3, [pc, #164]	@ (8001db8 <main+0x7f0>)
 8001d12:	681b      	ldr	r3, [r3, #0]
 8001d14:	4a1f      	ldr	r2, [pc, #124]	@ (8001d94 <main+0x7cc>)
 8001d16:	f8c2 3fbc 	str.w	r3, [r2, #4028]	@ 0xfbc
			 if (hsLog.runningBuffer == BUFFER1){
 8001d1a:	4b1e      	ldr	r3, [pc, #120]	@ (8001d94 <main+0x7cc>)
 8001d1c:	7b5b      	ldrb	r3, [r3, #13]
 8001d1e:	2b01      	cmp	r3, #1
 8001d20:	d117      	bne.n	8001d52 <main+0x78a>
				HAL_UART_Transmit_DMA(&huart2,(uint8_t *)hsLog.HSbuffer1,hsLog.bufferIndex);
 8001d22:	4b1c      	ldr	r3, [pc, #112]	@ (8001d94 <main+0x7cc>)
 8001d24:	f8b3 3fae 	ldrh.w	r3, [r3, #4014]	@ 0xfae
 8001d28:	461a      	mov	r2, r3
 8001d2a:	491e      	ldr	r1, [pc, #120]	@ (8001da4 <main+0x7dc>)
 8001d2c:	481e      	ldr	r0, [pc, #120]	@ (8001da8 <main+0x7e0>)
 8001d2e:	f009 fa37 	bl	800b1a0 <HAL_UART_Transmit_DMA>
				buffer1flush+=1;
 8001d32:	4b22      	ldr	r3, [pc, #136]	@ (8001dbc <main+0x7f4>)
 8001d34:	881b      	ldrh	r3, [r3, #0]
 8001d36:	3301      	adds	r3, #1
 8001d38:	b29a      	uxth	r2, r3
 8001d3a:	4b20      	ldr	r3, [pc, #128]	@ (8001dbc <main+0x7f4>)
 8001d3c:	801a      	strh	r2, [r3, #0]
				totalBytes += hsLog.sendOutBufferSize;
 8001d3e:	4b15      	ldr	r3, [pc, #84]	@ (8001d94 <main+0x7cc>)
 8001d40:	f8b3 3fb2 	ldrh.w	r3, [r3, #4018]	@ 0xfb2
 8001d44:	461a      	mov	r2, r3
 8001d46:	4b16      	ldr	r3, [pc, #88]	@ (8001da0 <main+0x7d8>)
 8001d48:	681b      	ldr	r3, [r3, #0]
 8001d4a:	4413      	add	r3, r2
 8001d4c:	4a14      	ldr	r2, [pc, #80]	@ (8001da0 <main+0x7d8>)
 8001d4e:	6013      	str	r3, [r2, #0]
 8001d50:	e016      	b.n	8001d80 <main+0x7b8>
			 }else{
				HAL_UART_Transmit_DMA(&huart2,(uint8_t *)hsLog.HSbuffer2,hsLog.bufferIndex);
 8001d52:	4b10      	ldr	r3, [pc, #64]	@ (8001d94 <main+0x7cc>)
 8001d54:	f8b3 3fae 	ldrh.w	r3, [r3, #4014]	@ 0xfae
 8001d58:	461a      	mov	r2, r3
 8001d5a:	4915      	ldr	r1, [pc, #84]	@ (8001db0 <main+0x7e8>)
 8001d5c:	4812      	ldr	r0, [pc, #72]	@ (8001da8 <main+0x7e0>)
 8001d5e:	f009 fa1f 	bl	800b1a0 <HAL_UART_Transmit_DMA>
				buffer2flush+=1;
 8001d62:	4b17      	ldr	r3, [pc, #92]	@ (8001dc0 <main+0x7f8>)
 8001d64:	881b      	ldrh	r3, [r3, #0]
 8001d66:	3301      	adds	r3, #1
 8001d68:	b29a      	uxth	r2, r3
 8001d6a:	4b15      	ldr	r3, [pc, #84]	@ (8001dc0 <main+0x7f8>)
 8001d6c:	801a      	strh	r2, [r3, #0]
				totalBytes += hsLog.sendOutBufferSize;
 8001d6e:	4b09      	ldr	r3, [pc, #36]	@ (8001d94 <main+0x7cc>)
 8001d70:	f8b3 3fb2 	ldrh.w	r3, [r3, #4018]	@ 0xfb2
 8001d74:	461a      	mov	r2, r3
 8001d76:	4b0a      	ldr	r3, [pc, #40]	@ (8001da0 <main+0x7d8>)
 8001d78:	681b      	ldr	r3, [r3, #0]
 8001d7a:	4413      	add	r3, r2
 8001d7c:	4a08      	ldr	r2, [pc, #32]	@ (8001da0 <main+0x7d8>)
 8001d7e:	6013      	str	r3, [r2, #0]
			 }
			 hsLogOn = 0;
 8001d80:	4b10      	ldr	r3, [pc, #64]	@ (8001dc4 <main+0x7fc>)
 8001d82:	2200      	movs	r2, #0
 8001d84:	701a      	strb	r2, [r3, #0]
 8001d86:	e4ff      	b.n	8001788 <main+0x1c0>
		  }
	  }else{
		  hsLogReset(&hsLog);
 8001d88:	4802      	ldr	r0, [pc, #8]	@ (8001d94 <main+0x7cc>)
 8001d8a:	f002 f8a2 	bl	8003ed2 <hsLogReset>
	  if (adc.updated){
 8001d8e:	e4fb      	b.n	8001788 <main+0x1c0>
 8001d90:	20000860 	.word	0x20000860
 8001d94:	20000a20 	.word	0x20000a20
 8001d98:	20000000 	.word	0x20000000
 8001d9c:	40c90fda 	.word	0x40c90fda
 8001da0:	20001b4c 	.word	0x20001b4c
 8001da4:	20000a2e 	.word	0x20000a2e
 8001da8:	20000750 	.word	0x20000750
 8001dac:	20001b42 	.word	0x20001b42
 8001db0:	200011fe 	.word	0x200011fe
 8001db4:	20001b48 	.word	0x20001b48
 8001db8:	2000094c 	.word	0x2000094c
 8001dbc:	20001b44 	.word	0x20001b44
 8001dc0:	20001b46 	.word	0x20001b46
 8001dc4:	20001b40 	.word	0x20001b40

08001dc8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001dc8:	b580      	push	{r7, lr}
 8001dca:	b094      	sub	sp, #80	@ 0x50
 8001dcc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001dce:	f107 0318 	add.w	r3, r7, #24
 8001dd2:	2238      	movs	r2, #56	@ 0x38
 8001dd4:	2100      	movs	r1, #0
 8001dd6:	4618      	mov	r0, r3
 8001dd8:	f00b fa47 	bl	800d26a <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001ddc:	1d3b      	adds	r3, r7, #4
 8001dde:	2200      	movs	r2, #0
 8001de0:	601a      	str	r2, [r3, #0]
 8001de2:	605a      	str	r2, [r3, #4]
 8001de4:	609a      	str	r2, [r3, #8]
 8001de6:	60da      	str	r2, [r3, #12]
 8001de8:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001dea:	f44f 7000 	mov.w	r0, #512	@ 0x200
 8001dee:	f006 f86b 	bl	8007ec8 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001df2:	2301      	movs	r3, #1
 8001df4:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001df6:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8001dfa:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001dfc:	2302      	movs	r3, #2
 8001dfe:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001e00:	2303      	movs	r3, #3
 8001e02:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV4;
 8001e04:	2304      	movs	r3, #4
 8001e06:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 75;
 8001e08:	234b      	movs	r3, #75	@ 0x4b
 8001e0a:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001e0c:	2302      	movs	r3, #2
 8001e0e:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8001e10:	2302      	movs	r3, #2
 8001e12:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8001e14:	2302      	movs	r3, #2
 8001e16:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001e18:	f107 0318 	add.w	r3, r7, #24
 8001e1c:	4618      	mov	r0, r3
 8001e1e:	f006 f907 	bl	8008030 <HAL_RCC_OscConfig>
 8001e22:	4603      	mov	r3, r0
 8001e24:	2b00      	cmp	r3, #0
 8001e26:	d001      	beq.n	8001e2c <SystemClock_Config+0x64>
  {
    Error_Handler();
 8001e28:	f000 fbaa 	bl	8002580 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001e2c:	230f      	movs	r3, #15
 8001e2e:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001e30:	2303      	movs	r3, #3
 8001e32:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001e34:	2300      	movs	r3, #0
 8001e36:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001e38:	2300      	movs	r3, #0
 8001e3a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001e3c:	2300      	movs	r3, #0
 8001e3e:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8001e40:	1d3b      	adds	r3, r7, #4
 8001e42:	2104      	movs	r1, #4
 8001e44:	4618      	mov	r0, r3
 8001e46:	f006 fc05 	bl	8008654 <HAL_RCC_ClockConfig>
 8001e4a:	4603      	mov	r3, r0
 8001e4c:	2b00      	cmp	r3, #0
 8001e4e:	d001      	beq.n	8001e54 <SystemClock_Config+0x8c>
  {
    Error_Handler();
 8001e50:	f000 fb96 	bl	8002580 <Error_Handler>
  }
}
 8001e54:	bf00      	nop
 8001e56:	3750      	adds	r7, #80	@ 0x50
 8001e58:	46bd      	mov	sp, r7
 8001e5a:	bd80      	pop	{r7, pc}

08001e5c <MX_ADC2_Init>:
  * @brief ADC2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC2_Init(void)
{
 8001e5c:	b580      	push	{r7, lr}
 8001e5e:	b088      	sub	sp, #32
 8001e60:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001e62:	463b      	mov	r3, r7
 8001e64:	2220      	movs	r2, #32
 8001e66:	2100      	movs	r1, #0
 8001e68:	4618      	mov	r0, r3
 8001e6a:	f00b f9fe 	bl	800d26a <memset>

  /* USER CODE END ADC2_Init 1 */

  /** Common config
  */
  hadc2.Instance = ADC2;
 8001e6e:	4b3a      	ldr	r3, [pc, #232]	@ (8001f58 <MX_ADC2_Init+0xfc>)
 8001e70:	4a3a      	ldr	r2, [pc, #232]	@ (8001f5c <MX_ADC2_Init+0x100>)
 8001e72:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8001e74:	4b38      	ldr	r3, [pc, #224]	@ (8001f58 <MX_ADC2_Init+0xfc>)
 8001e76:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 8001e7a:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 8001e7c:	4b36      	ldr	r3, [pc, #216]	@ (8001f58 <MX_ADC2_Init+0xfc>)
 8001e7e:	2200      	movs	r2, #0
 8001e80:	609a      	str	r2, [r3, #8]
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001e82:	4b35      	ldr	r3, [pc, #212]	@ (8001f58 <MX_ADC2_Init+0xfc>)
 8001e84:	2200      	movs	r2, #0
 8001e86:	60da      	str	r2, [r3, #12]
  hadc2.Init.GainCompensation = 0;
 8001e88:	4b33      	ldr	r3, [pc, #204]	@ (8001f58 <MX_ADC2_Init+0xfc>)
 8001e8a:	2200      	movs	r2, #0
 8001e8c:	611a      	str	r2, [r3, #16]
  hadc2.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8001e8e:	4b32      	ldr	r3, [pc, #200]	@ (8001f58 <MX_ADC2_Init+0xfc>)
 8001e90:	2201      	movs	r2, #1
 8001e92:	615a      	str	r2, [r3, #20]
  hadc2.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 8001e94:	4b30      	ldr	r3, [pc, #192]	@ (8001f58 <MX_ADC2_Init+0xfc>)
 8001e96:	2208      	movs	r2, #8
 8001e98:	619a      	str	r2, [r3, #24]
  hadc2.Init.LowPowerAutoWait = DISABLE;
 8001e9a:	4b2f      	ldr	r3, [pc, #188]	@ (8001f58 <MX_ADC2_Init+0xfc>)
 8001e9c:	2200      	movs	r2, #0
 8001e9e:	771a      	strb	r2, [r3, #28]
  hadc2.Init.ContinuousConvMode = DISABLE;
 8001ea0:	4b2d      	ldr	r3, [pc, #180]	@ (8001f58 <MX_ADC2_Init+0xfc>)
 8001ea2:	2200      	movs	r2, #0
 8001ea4:	775a      	strb	r2, [r3, #29]
  hadc2.Init.NbrOfConversion = 3;
 8001ea6:	4b2c      	ldr	r3, [pc, #176]	@ (8001f58 <MX_ADC2_Init+0xfc>)
 8001ea8:	2203      	movs	r2, #3
 8001eaa:	621a      	str	r2, [r3, #32]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 8001eac:	4b2a      	ldr	r3, [pc, #168]	@ (8001f58 <MX_ADC2_Init+0xfc>)
 8001eae:	2200      	movs	r2, #0
 8001eb0:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  hadc2.Init.ExternalTrigConv = ADC_EXTERNALTRIG_T4_TRGO;
 8001eb4:	4b28      	ldr	r3, [pc, #160]	@ (8001f58 <MX_ADC2_Init+0xfc>)
 8001eb6:	f44f 62b0 	mov.w	r2, #1408	@ 0x580
 8001eba:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 8001ebc:	4b26      	ldr	r3, [pc, #152]	@ (8001f58 <MX_ADC2_Init+0xfc>)
 8001ebe:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001ec2:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc2.Init.DMAContinuousRequests = ENABLE;
 8001ec4:	4b24      	ldr	r3, [pc, #144]	@ (8001f58 <MX_ADC2_Init+0xfc>)
 8001ec6:	2201      	movs	r2, #1
 8001ec8:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  hadc2.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8001ecc:	4b22      	ldr	r3, [pc, #136]	@ (8001f58 <MX_ADC2_Init+0xfc>)
 8001ece:	2200      	movs	r2, #0
 8001ed0:	63da      	str	r2, [r3, #60]	@ 0x3c
  hadc2.Init.OversamplingMode = DISABLE;
 8001ed2:	4b21      	ldr	r3, [pc, #132]	@ (8001f58 <MX_ADC2_Init+0xfc>)
 8001ed4:	2200      	movs	r2, #0
 8001ed6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 8001eda:	481f      	ldr	r0, [pc, #124]	@ (8001f58 <MX_ADC2_Init+0xfc>)
 8001edc:	f003 fed2 	bl	8005c84 <HAL_ADC_Init>
 8001ee0:	4603      	mov	r3, r0
 8001ee2:	2b00      	cmp	r3, #0
 8001ee4:	d001      	beq.n	8001eea <MX_ADC2_Init+0x8e>
  {
    Error_Handler();
 8001ee6:	f000 fb4b 	bl	8002580 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_2;
 8001eea:	4b1d      	ldr	r3, [pc, #116]	@ (8001f60 <MX_ADC2_Init+0x104>)
 8001eec:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8001eee:	2306      	movs	r3, #6
 8001ef0:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_24CYCLES_5;
 8001ef2:	2303      	movs	r3, #3
 8001ef4:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8001ef6:	237f      	movs	r3, #127	@ 0x7f
 8001ef8:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8001efa:	2304      	movs	r3, #4
 8001efc:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 8001efe:	2300      	movs	r3, #0
 8001f00:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8001f02:	463b      	mov	r3, r7
 8001f04:	4619      	mov	r1, r3
 8001f06:	4814      	ldr	r0, [pc, #80]	@ (8001f58 <MX_ADC2_Init+0xfc>)
 8001f08:	f004 fb2c 	bl	8006564 <HAL_ADC_ConfigChannel>
 8001f0c:	4603      	mov	r3, r0
 8001f0e:	2b00      	cmp	r3, #0
 8001f10:	d001      	beq.n	8001f16 <MX_ADC2_Init+0xba>
  {
    Error_Handler();
 8001f12:	f000 fb35 	bl	8002580 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_13;
 8001f16:	4b13      	ldr	r3, [pc, #76]	@ (8001f64 <MX_ADC2_Init+0x108>)
 8001f18:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 8001f1a:	230c      	movs	r3, #12
 8001f1c:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8001f1e:	463b      	mov	r3, r7
 8001f20:	4619      	mov	r1, r3
 8001f22:	480d      	ldr	r0, [pc, #52]	@ (8001f58 <MX_ADC2_Init+0xfc>)
 8001f24:	f004 fb1e 	bl	8006564 <HAL_ADC_ConfigChannel>
 8001f28:	4603      	mov	r3, r0
 8001f2a:	2b00      	cmp	r3, #0
 8001f2c:	d001      	beq.n	8001f32 <MX_ADC2_Init+0xd6>
  {
    Error_Handler();
 8001f2e:	f000 fb27 	bl	8002580 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_17;
 8001f32:	4b0d      	ldr	r3, [pc, #52]	@ (8001f68 <MX_ADC2_Init+0x10c>)
 8001f34:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 8001f36:	2312      	movs	r3, #18
 8001f38:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8001f3a:	463b      	mov	r3, r7
 8001f3c:	4619      	mov	r1, r3
 8001f3e:	4806      	ldr	r0, [pc, #24]	@ (8001f58 <MX_ADC2_Init+0xfc>)
 8001f40:	f004 fb10 	bl	8006564 <HAL_ADC_ConfigChannel>
 8001f44:	4603      	mov	r3, r0
 8001f46:	2b00      	cmp	r3, #0
 8001f48:	d001      	beq.n	8001f4e <MX_ADC2_Init+0xf2>
  {
    Error_Handler();
 8001f4a:	f000 fb19 	bl	8002580 <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 8001f4e:	bf00      	nop
 8001f50:	3720      	adds	r7, #32
 8001f52:	46bd      	mov	sp, r7
 8001f54:	bd80      	pop	{r7, pc}
 8001f56:	bf00      	nop
 8001f58:	200004c8 	.word	0x200004c8
 8001f5c:	50000100 	.word	0x50000100
 8001f60:	08600004 	.word	0x08600004
 8001f64:	36902000 	.word	0x36902000
 8001f68:	47520000 	.word	0x47520000

08001f6c <MX_CORDIC_Init>:
  * @brief CORDIC Initialization Function
  * @param None
  * @retval None
  */
static void MX_CORDIC_Init(void)
{
 8001f6c:	b580      	push	{r7, lr}
 8001f6e:	af00      	add	r7, sp, #0
  /* USER CODE END CORDIC_Init 0 */

  /* USER CODE BEGIN CORDIC_Init 1 */

  /* USER CODE END CORDIC_Init 1 */
  hcordic.Instance = CORDIC;
 8001f70:	4b06      	ldr	r3, [pc, #24]	@ (8001f8c <MX_CORDIC_Init+0x20>)
 8001f72:	4a07      	ldr	r2, [pc, #28]	@ (8001f90 <MX_CORDIC_Init+0x24>)
 8001f74:	601a      	str	r2, [r3, #0]
  if (HAL_CORDIC_Init(&hcordic) != HAL_OK)
 8001f76:	4805      	ldr	r0, [pc, #20]	@ (8001f8c <MX_CORDIC_Init+0x20>)
 8001f78:	f005 f91e 	bl	80071b8 <HAL_CORDIC_Init>
 8001f7c:	4603      	mov	r3, r0
 8001f7e:	2b00      	cmp	r3, #0
 8001f80:	d001      	beq.n	8001f86 <MX_CORDIC_Init+0x1a>
  {
    Error_Handler();
 8001f82:	f000 fafd 	bl	8002580 <Error_Handler>
  }
  /* USER CODE BEGIN CORDIC_Init 2 */

  /* USER CODE END CORDIC_Init 2 */

}
 8001f86:	bf00      	nop
 8001f88:	bd80      	pop	{r7, pc}
 8001f8a:	bf00      	nop
 8001f8c:	20000594 	.word	0x20000594
 8001f90:	40020c00 	.word	0x40020c00

08001f94 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8001f94:	b580      	push	{r7, lr}
 8001f96:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8001f98:	4b1b      	ldr	r3, [pc, #108]	@ (8002008 <MX_SPI1_Init+0x74>)
 8001f9a:	4a1c      	ldr	r2, [pc, #112]	@ (800200c <MX_SPI1_Init+0x78>)
 8001f9c:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8001f9e:	4b1a      	ldr	r3, [pc, #104]	@ (8002008 <MX_SPI1_Init+0x74>)
 8001fa0:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8001fa4:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8001fa6:	4b18      	ldr	r3, [pc, #96]	@ (8002008 <MX_SPI1_Init+0x74>)
 8001fa8:	2200      	movs	r2, #0
 8001faa:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8001fac:	4b16      	ldr	r3, [pc, #88]	@ (8002008 <MX_SPI1_Init+0x74>)
 8001fae:	f44f 62e0 	mov.w	r2, #1792	@ 0x700
 8001fb2:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001fb4:	4b14      	ldr	r3, [pc, #80]	@ (8002008 <MX_SPI1_Init+0x74>)
 8001fb6:	2200      	movs	r2, #0
 8001fb8:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_2EDGE;
 8001fba:	4b13      	ldr	r3, [pc, #76]	@ (8002008 <MX_SPI1_Init+0x74>)
 8001fbc:	2201      	movs	r2, #1
 8001fbe:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8001fc0:	4b11      	ldr	r3, [pc, #68]	@ (8002008 <MX_SPI1_Init+0x74>)
 8001fc2:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001fc6:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 8001fc8:	4b0f      	ldr	r3, [pc, #60]	@ (8002008 <MX_SPI1_Init+0x74>)
 8001fca:	2218      	movs	r2, #24
 8001fcc:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001fce:	4b0e      	ldr	r3, [pc, #56]	@ (8002008 <MX_SPI1_Init+0x74>)
 8001fd0:	2200      	movs	r2, #0
 8001fd2:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001fd4:	4b0c      	ldr	r3, [pc, #48]	@ (8002008 <MX_SPI1_Init+0x74>)
 8001fd6:	2200      	movs	r2, #0
 8001fd8:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001fda:	4b0b      	ldr	r3, [pc, #44]	@ (8002008 <MX_SPI1_Init+0x74>)
 8001fdc:	2200      	movs	r2, #0
 8001fde:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 7;
 8001fe0:	4b09      	ldr	r3, [pc, #36]	@ (8002008 <MX_SPI1_Init+0x74>)
 8001fe2:	2207      	movs	r2, #7
 8001fe4:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8001fe6:	4b08      	ldr	r3, [pc, #32]	@ (8002008 <MX_SPI1_Init+0x74>)
 8001fe8:	2200      	movs	r2, #0
 8001fea:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 8001fec:	4b06      	ldr	r3, [pc, #24]	@ (8002008 <MX_SPI1_Init+0x74>)
 8001fee:	2200      	movs	r2, #0
 8001ff0:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001ff2:	4805      	ldr	r0, [pc, #20]	@ (8002008 <MX_SPI1_Init+0x74>)
 8001ff4:	f006 ff36 	bl	8008e64 <HAL_SPI_Init>
 8001ff8:	4603      	mov	r3, r0
 8001ffa:	2b00      	cmp	r3, #0
 8001ffc:	d001      	beq.n	8002002 <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 8001ffe:	f000 fabf 	bl	8002580 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8002002:	bf00      	nop
 8002004:	bd80      	pop	{r7, pc}
 8002006:	bf00      	nop
 8002008:	200005bc 	.word	0x200005bc
 800200c:	40013000 	.word	0x40013000

08002010 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8002010:	b580      	push	{r7, lr}
 8002012:	b09c      	sub	sp, #112	@ 0x70
 8002014:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002016:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 800201a:	2200      	movs	r2, #0
 800201c:	601a      	str	r2, [r3, #0]
 800201e:	605a      	str	r2, [r3, #4]
 8002020:	609a      	str	r2, [r3, #8]
 8002022:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002024:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8002028:	2200      	movs	r2, #0
 800202a:	601a      	str	r2, [r3, #0]
 800202c:	605a      	str	r2, [r3, #4]
 800202e:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002030:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8002034:	2200      	movs	r2, #0
 8002036:	601a      	str	r2, [r3, #0]
 8002038:	605a      	str	r2, [r3, #4]
 800203a:	609a      	str	r2, [r3, #8]
 800203c:	60da      	str	r2, [r3, #12]
 800203e:	611a      	str	r2, [r3, #16]
 8002040:	615a      	str	r2, [r3, #20]
 8002042:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8002044:	1d3b      	adds	r3, r7, #4
 8002046:	2234      	movs	r2, #52	@ 0x34
 8002048:	2100      	movs	r1, #0
 800204a:	4618      	mov	r0, r3
 800204c:	f00b f90d 	bl	800d26a <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8002050:	4b52      	ldr	r3, [pc, #328]	@ (800219c <MX_TIM1_Init+0x18c>)
 8002052:	4a53      	ldr	r2, [pc, #332]	@ (80021a0 <MX_TIM1_Init+0x190>)
 8002054:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 5;
 8002056:	4b51      	ldr	r3, [pc, #324]	@ (800219c <MX_TIM1_Init+0x18c>)
 8002058:	2205      	movs	r2, #5
 800205a:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_CENTERALIGNED1;
 800205c:	4b4f      	ldr	r3, [pc, #316]	@ (800219c <MX_TIM1_Init+0x18c>)
 800205e:	2220      	movs	r2, #32
 8002060:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 1249;
 8002062:	4b4e      	ldr	r3, [pc, #312]	@ (800219c <MX_TIM1_Init+0x18c>)
 8002064:	f240 42e1 	movw	r2, #1249	@ 0x4e1
 8002068:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800206a:	4b4c      	ldr	r3, [pc, #304]	@ (800219c <MX_TIM1_Init+0x18c>)
 800206c:	2200      	movs	r2, #0
 800206e:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8002070:	4b4a      	ldr	r3, [pc, #296]	@ (800219c <MX_TIM1_Init+0x18c>)
 8002072:	2200      	movs	r2, #0
 8002074:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002076:	4b49      	ldr	r3, [pc, #292]	@ (800219c <MX_TIM1_Init+0x18c>)
 8002078:	2200      	movs	r2, #0
 800207a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 800207c:	4847      	ldr	r0, [pc, #284]	@ (800219c <MX_TIM1_Init+0x18c>)
 800207e:	f007 fb1f 	bl	80096c0 <HAL_TIM_Base_Init>
 8002082:	4603      	mov	r3, r0
 8002084:	2b00      	cmp	r3, #0
 8002086:	d001      	beq.n	800208c <MX_TIM1_Init+0x7c>
  {
    Error_Handler();
 8002088:	f000 fa7a 	bl	8002580 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800208c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002090:	663b      	str	r3, [r7, #96]	@ 0x60
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8002092:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 8002096:	4619      	mov	r1, r3
 8002098:	4840      	ldr	r0, [pc, #256]	@ (800219c <MX_TIM1_Init+0x18c>)
 800209a:	f008 f82f 	bl	800a0fc <HAL_TIM_ConfigClockSource>
 800209e:	4603      	mov	r3, r0
 80020a0:	2b00      	cmp	r3, #0
 80020a2:	d001      	beq.n	80020a8 <MX_TIM1_Init+0x98>
  {
    Error_Handler();
 80020a4:	f000 fa6c 	bl	8002580 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 80020a8:	483c      	ldr	r0, [pc, #240]	@ (800219c <MX_TIM1_Init+0x18c>)
 80020aa:	f007 fbcb 	bl	8009844 <HAL_TIM_PWM_Init>
 80020ae:	4603      	mov	r3, r0
 80020b0:	2b00      	cmp	r3, #0
 80020b2:	d001      	beq.n	80020b8 <MX_TIM1_Init+0xa8>
  {
    Error_Handler();
 80020b4:	f000 fa64 	bl	8002580 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80020b8:	2300      	movs	r3, #0
 80020ba:	657b      	str	r3, [r7, #84]	@ 0x54
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 80020bc:	2300      	movs	r3, #0
 80020be:	65bb      	str	r3, [r7, #88]	@ 0x58
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80020c0:	2300      	movs	r3, #0
 80020c2:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80020c4:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 80020c8:	4619      	mov	r1, r3
 80020ca:	4834      	ldr	r0, [pc, #208]	@ (800219c <MX_TIM1_Init+0x18c>)
 80020cc:	f008 fe9e 	bl	800ae0c <HAL_TIMEx_MasterConfigSynchronization>
 80020d0:	4603      	mov	r3, r0
 80020d2:	2b00      	cmp	r3, #0
 80020d4:	d001      	beq.n	80020da <MX_TIM1_Init+0xca>
  {
    Error_Handler();
 80020d6:	f000 fa53 	bl	8002580 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80020da:	2360      	movs	r3, #96	@ 0x60
 80020dc:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.Pulse = 0;
 80020de:	2300      	movs	r3, #0
 80020e0:	63fb      	str	r3, [r7, #60]	@ 0x3c
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80020e2:	2300      	movs	r3, #0
 80020e4:	643b      	str	r3, [r7, #64]	@ 0x40
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_LOW;
 80020e6:	2308      	movs	r3, #8
 80020e8:	647b      	str	r3, [r7, #68]	@ 0x44
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80020ea:	2300      	movs	r3, #0
 80020ec:	64bb      	str	r3, [r7, #72]	@ 0x48
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80020ee:	2300      	movs	r3, #0
 80020f0:	64fb      	str	r3, [r7, #76]	@ 0x4c
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_SET;
 80020f2:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80020f6:	653b      	str	r3, [r7, #80]	@ 0x50
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80020f8:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 80020fc:	2200      	movs	r2, #0
 80020fe:	4619      	mov	r1, r3
 8002100:	4826      	ldr	r0, [pc, #152]	@ (800219c <MX_TIM1_Init+0x18c>)
 8002102:	f007 fee7 	bl	8009ed4 <HAL_TIM_PWM_ConfigChannel>
 8002106:	4603      	mov	r3, r0
 8002108:	2b00      	cmp	r3, #0
 800210a:	d001      	beq.n	8002110 <MX_TIM1_Init+0x100>
  {
    Error_Handler();
 800210c:	f000 fa38 	bl	8002580 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8002110:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8002114:	2204      	movs	r2, #4
 8002116:	4619      	mov	r1, r3
 8002118:	4820      	ldr	r0, [pc, #128]	@ (800219c <MX_TIM1_Init+0x18c>)
 800211a:	f007 fedb 	bl	8009ed4 <HAL_TIM_PWM_ConfigChannel>
 800211e:	4603      	mov	r3, r0
 8002120:	2b00      	cmp	r3, #0
 8002122:	d001      	beq.n	8002128 <MX_TIM1_Init+0x118>
  {
    Error_Handler();
 8002124:	f000 fa2c 	bl	8002580 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8002128:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 800212c:	2208      	movs	r2, #8
 800212e:	4619      	mov	r1, r3
 8002130:	481a      	ldr	r0, [pc, #104]	@ (800219c <MX_TIM1_Init+0x18c>)
 8002132:	f007 fecf 	bl	8009ed4 <HAL_TIM_PWM_ConfigChannel>
 8002136:	4603      	mov	r3, r0
 8002138:	2b00      	cmp	r3, #0
 800213a:	d001      	beq.n	8002140 <MX_TIM1_Init+0x130>
  {
    Error_Handler();
 800213c:	f000 fa20 	bl	8002580 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8002140:	2300      	movs	r3, #0
 8002142:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8002144:	2300      	movs	r3, #0
 8002146:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8002148:	2300      	movs	r3, #0
 800214a:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 90;
 800214c:	235a      	movs	r3, #90	@ 0x5a
 800214e:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8002150:	2300      	movs	r3, #0
 8002152:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8002154:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8002158:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 800215a:	2300      	movs	r3, #0
 800215c:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 800215e:	2300      	movs	r3, #0
 8002160:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8002162:	2300      	movs	r3, #0
 8002164:	627b      	str	r3, [r7, #36]	@ 0x24
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8002166:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800216a:	62bb      	str	r3, [r7, #40]	@ 0x28
  sBreakDeadTimeConfig.Break2Filter = 0;
 800216c:	2300      	movs	r3, #0
 800216e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 8002170:	2300      	movs	r3, #0
 8002172:	633b      	str	r3, [r7, #48]	@ 0x30
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8002174:	2300      	movs	r3, #0
 8002176:	637b      	str	r3, [r7, #52]	@ 0x34
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8002178:	1d3b      	adds	r3, r7, #4
 800217a:	4619      	mov	r1, r3
 800217c:	4807      	ldr	r0, [pc, #28]	@ (800219c <MX_TIM1_Init+0x18c>)
 800217e:	f008 fec7 	bl	800af10 <HAL_TIMEx_ConfigBreakDeadTime>
 8002182:	4603      	mov	r3, r0
 8002184:	2b00      	cmp	r3, #0
 8002186:	d001      	beq.n	800218c <MX_TIM1_Init+0x17c>
  {
    Error_Handler();
 8002188:	f000 f9fa 	bl	8002580 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 800218c:	4803      	ldr	r0, [pc, #12]	@ (800219c <MX_TIM1_Init+0x18c>)
 800218e:	f000 fb8b 	bl	80028a8 <HAL_TIM_MspPostInit>

}
 8002192:	bf00      	nop
 8002194:	3770      	adds	r7, #112	@ 0x70
 8002196:	46bd      	mov	sp, r7
 8002198:	bd80      	pop	{r7, pc}
 800219a:	bf00      	nop
 800219c:	20000620 	.word	0x20000620
 80021a0:	40012c00 	.word	0x40012c00

080021a4 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 80021a4:	b580      	push	{r7, lr}
 80021a6:	b088      	sub	sp, #32
 80021a8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80021aa:	f107 0310 	add.w	r3, r7, #16
 80021ae:	2200      	movs	r2, #0
 80021b0:	601a      	str	r2, [r3, #0]
 80021b2:	605a      	str	r2, [r3, #4]
 80021b4:	609a      	str	r2, [r3, #8]
 80021b6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80021b8:	1d3b      	adds	r3, r7, #4
 80021ba:	2200      	movs	r2, #0
 80021bc:	601a      	str	r2, [r3, #0]
 80021be:	605a      	str	r2, [r3, #4]
 80021c0:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 80021c2:	4b1e      	ldr	r3, [pc, #120]	@ (800223c <MX_TIM4_Init+0x98>)
 80021c4:	4a1e      	ldr	r2, [pc, #120]	@ (8002240 <MX_TIM4_Init+0x9c>)
 80021c6:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 1249;
 80021c8:	4b1c      	ldr	r3, [pc, #112]	@ (800223c <MX_TIM4_Init+0x98>)
 80021ca:	f240 42e1 	movw	r2, #1249	@ 0x4e1
 80021ce:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 80021d0:	4b1a      	ldr	r3, [pc, #104]	@ (800223c <MX_TIM4_Init+0x98>)
 80021d2:	2200      	movs	r2, #0
 80021d4:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 2399;
 80021d6:	4b19      	ldr	r3, [pc, #100]	@ (800223c <MX_TIM4_Init+0x98>)
 80021d8:	f640 125f 	movw	r2, #2399	@ 0x95f
 80021dc:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80021de:	4b17      	ldr	r3, [pc, #92]	@ (800223c <MX_TIM4_Init+0x98>)
 80021e0:	2200      	movs	r2, #0
 80021e2:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80021e4:	4b15      	ldr	r3, [pc, #84]	@ (800223c <MX_TIM4_Init+0x98>)
 80021e6:	2200      	movs	r2, #0
 80021e8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 80021ea:	4814      	ldr	r0, [pc, #80]	@ (800223c <MX_TIM4_Init+0x98>)
 80021ec:	f007 fa68 	bl	80096c0 <HAL_TIM_Base_Init>
 80021f0:	4603      	mov	r3, r0
 80021f2:	2b00      	cmp	r3, #0
 80021f4:	d001      	beq.n	80021fa <MX_TIM4_Init+0x56>
  {
    Error_Handler();
 80021f6:	f000 f9c3 	bl	8002580 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80021fa:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80021fe:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8002200:	f107 0310 	add.w	r3, r7, #16
 8002204:	4619      	mov	r1, r3
 8002206:	480d      	ldr	r0, [pc, #52]	@ (800223c <MX_TIM4_Init+0x98>)
 8002208:	f007 ff78 	bl	800a0fc <HAL_TIM_ConfigClockSource>
 800220c:	4603      	mov	r3, r0
 800220e:	2b00      	cmp	r3, #0
 8002210:	d001      	beq.n	8002216 <MX_TIM4_Init+0x72>
  {
    Error_Handler();
 8002212:	f000 f9b5 	bl	8002580 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8002216:	2320      	movs	r3, #32
 8002218:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800221a:	2300      	movs	r3, #0
 800221c:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 800221e:	1d3b      	adds	r3, r7, #4
 8002220:	4619      	mov	r1, r3
 8002222:	4806      	ldr	r0, [pc, #24]	@ (800223c <MX_TIM4_Init+0x98>)
 8002224:	f008 fdf2 	bl	800ae0c <HAL_TIMEx_MasterConfigSynchronization>
 8002228:	4603      	mov	r3, r0
 800222a:	2b00      	cmp	r3, #0
 800222c:	d001      	beq.n	8002232 <MX_TIM4_Init+0x8e>
  {
    Error_Handler();
 800222e:	f000 f9a7 	bl	8002580 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8002232:	bf00      	nop
 8002234:	3720      	adds	r7, #32
 8002236:	46bd      	mov	sp, r7
 8002238:	bd80      	pop	{r7, pc}
 800223a:	bf00      	nop
 800223c:	2000066c 	.word	0x2000066c
 8002240:	40000800 	.word	0x40000800

08002244 <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 8002244:	b580      	push	{r7, lr}
 8002246:	b084      	sub	sp, #16
 8002248:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800224a:	1d3b      	adds	r3, r7, #4
 800224c:	2200      	movs	r2, #0
 800224e:	601a      	str	r2, [r3, #0]
 8002250:	605a      	str	r2, [r3, #4]
 8002252:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8002254:	4b15      	ldr	r3, [pc, #84]	@ (80022ac <MX_TIM6_Init+0x68>)
 8002256:	4a16      	ldr	r2, [pc, #88]	@ (80022b0 <MX_TIM6_Init+0x6c>)
 8002258:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 1249;
 800225a:	4b14      	ldr	r3, [pc, #80]	@ (80022ac <MX_TIM6_Init+0x68>)
 800225c:	f240 42e1 	movw	r2, #1249	@ 0x4e1
 8002260:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002262:	4b12      	ldr	r3, [pc, #72]	@ (80022ac <MX_TIM6_Init+0x68>)
 8002264:	2200      	movs	r2, #0
 8002266:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 2399;
 8002268:	4b10      	ldr	r3, [pc, #64]	@ (80022ac <MX_TIM6_Init+0x68>)
 800226a:	f640 125f 	movw	r2, #2399	@ 0x95f
 800226e:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002270:	4b0e      	ldr	r3, [pc, #56]	@ (80022ac <MX_TIM6_Init+0x68>)
 8002272:	2200      	movs	r2, #0
 8002274:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8002276:	480d      	ldr	r0, [pc, #52]	@ (80022ac <MX_TIM6_Init+0x68>)
 8002278:	f007 fa22 	bl	80096c0 <HAL_TIM_Base_Init>
 800227c:	4603      	mov	r3, r0
 800227e:	2b00      	cmp	r3, #0
 8002280:	d001      	beq.n	8002286 <MX_TIM6_Init+0x42>
  {
    Error_Handler();
 8002282:	f000 f97d 	bl	8002580 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002286:	2300      	movs	r3, #0
 8002288:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800228a:	2300      	movs	r3, #0
 800228c:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 800228e:	1d3b      	adds	r3, r7, #4
 8002290:	4619      	mov	r1, r3
 8002292:	4806      	ldr	r0, [pc, #24]	@ (80022ac <MX_TIM6_Init+0x68>)
 8002294:	f008 fdba 	bl	800ae0c <HAL_TIMEx_MasterConfigSynchronization>
 8002298:	4603      	mov	r3, r0
 800229a:	2b00      	cmp	r3, #0
 800229c:	d001      	beq.n	80022a2 <MX_TIM6_Init+0x5e>
  {
    Error_Handler();
 800229e:	f000 f96f 	bl	8002580 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 80022a2:	bf00      	nop
 80022a4:	3710      	adds	r7, #16
 80022a6:	46bd      	mov	sp, r7
 80022a8:	bd80      	pop	{r7, pc}
 80022aa:	bf00      	nop
 80022ac:	200006b8 	.word	0x200006b8
 80022b0:	40001000 	.word	0x40001000

080022b4 <MX_TIM7_Init>:
  * @brief TIM7 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM7_Init(void)
{
 80022b4:	b580      	push	{r7, lr}
 80022b6:	b084      	sub	sp, #16
 80022b8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM7_Init 0 */

  /* USER CODE END TIM7_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80022ba:	1d3b      	adds	r3, r7, #4
 80022bc:	2200      	movs	r2, #0
 80022be:	601a      	str	r2, [r3, #0]
 80022c0:	605a      	str	r2, [r3, #4]
 80022c2:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM7_Init 1 */

  /* USER CODE END TIM7_Init 1 */
  htim7.Instance = TIM7;
 80022c4:	4b14      	ldr	r3, [pc, #80]	@ (8002318 <MX_TIM7_Init+0x64>)
 80022c6:	4a15      	ldr	r2, [pc, #84]	@ (800231c <MX_TIM7_Init+0x68>)
 80022c8:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 1499;
 80022ca:	4b13      	ldr	r3, [pc, #76]	@ (8002318 <MX_TIM7_Init+0x64>)
 80022cc:	f240 52db 	movw	r2, #1499	@ 0x5db
 80022d0:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 80022d2:	4b11      	ldr	r3, [pc, #68]	@ (8002318 <MX_TIM7_Init+0x64>)
 80022d4:	2200      	movs	r2, #0
 80022d6:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 99;
 80022d8:	4b0f      	ldr	r3, [pc, #60]	@ (8002318 <MX_TIM7_Init+0x64>)
 80022da:	2263      	movs	r2, #99	@ 0x63
 80022dc:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80022de:	4b0e      	ldr	r3, [pc, #56]	@ (8002318 <MX_TIM7_Init+0x64>)
 80022e0:	2200      	movs	r2, #0
 80022e2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 80022e4:	480c      	ldr	r0, [pc, #48]	@ (8002318 <MX_TIM7_Init+0x64>)
 80022e6:	f007 f9eb 	bl	80096c0 <HAL_TIM_Base_Init>
 80022ea:	4603      	mov	r3, r0
 80022ec:	2b00      	cmp	r3, #0
 80022ee:	d001      	beq.n	80022f4 <MX_TIM7_Init+0x40>
  {
    Error_Handler();
 80022f0:	f000 f946 	bl	8002580 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80022f4:	2300      	movs	r3, #0
 80022f6:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80022f8:	2300      	movs	r3, #0
 80022fa:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 80022fc:	1d3b      	adds	r3, r7, #4
 80022fe:	4619      	mov	r1, r3
 8002300:	4805      	ldr	r0, [pc, #20]	@ (8002318 <MX_TIM7_Init+0x64>)
 8002302:	f008 fd83 	bl	800ae0c <HAL_TIMEx_MasterConfigSynchronization>
 8002306:	4603      	mov	r3, r0
 8002308:	2b00      	cmp	r3, #0
 800230a:	d001      	beq.n	8002310 <MX_TIM7_Init+0x5c>
  {
    Error_Handler();
 800230c:	f000 f938 	bl	8002580 <Error_Handler>
  }
  /* USER CODE BEGIN TIM7_Init 2 */

  /* USER CODE END TIM7_Init 2 */

}
 8002310:	bf00      	nop
 8002312:	3710      	adds	r7, #16
 8002314:	46bd      	mov	sp, r7
 8002316:	bd80      	pop	{r7, pc}
 8002318:	20000704 	.word	0x20000704
 800231c:	40001400 	.word	0x40001400

08002320 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8002320:	b580      	push	{r7, lr}
 8002322:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8002324:	4b22      	ldr	r3, [pc, #136]	@ (80023b0 <MX_USART2_UART_Init+0x90>)
 8002326:	4a23      	ldr	r2, [pc, #140]	@ (80023b4 <MX_USART2_UART_Init+0x94>)
 8002328:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 4800000;
 800232a:	4b21      	ldr	r3, [pc, #132]	@ (80023b0 <MX_USART2_UART_Init+0x90>)
 800232c:	4a22      	ldr	r2, [pc, #136]	@ (80023b8 <MX_USART2_UART_Init+0x98>)
 800232e:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8002330:	4b1f      	ldr	r3, [pc, #124]	@ (80023b0 <MX_USART2_UART_Init+0x90>)
 8002332:	2200      	movs	r2, #0
 8002334:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8002336:	4b1e      	ldr	r3, [pc, #120]	@ (80023b0 <MX_USART2_UART_Init+0x90>)
 8002338:	2200      	movs	r2, #0
 800233a:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800233c:	4b1c      	ldr	r3, [pc, #112]	@ (80023b0 <MX_USART2_UART_Init+0x90>)
 800233e:	2200      	movs	r2, #0
 8002340:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX;
 8002342:	4b1b      	ldr	r3, [pc, #108]	@ (80023b0 <MX_USART2_UART_Init+0x90>)
 8002344:	2208      	movs	r2, #8
 8002346:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002348:	4b19      	ldr	r3, [pc, #100]	@ (80023b0 <MX_USART2_UART_Init+0x90>)
 800234a:	2200      	movs	r2, #0
 800234c:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800234e:	4b18      	ldr	r3, [pc, #96]	@ (80023b0 <MX_USART2_UART_Init+0x90>)
 8002350:	2200      	movs	r2, #0
 8002352:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002354:	4b16      	ldr	r3, [pc, #88]	@ (80023b0 <MX_USART2_UART_Init+0x90>)
 8002356:	2200      	movs	r2, #0
 8002358:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 800235a:	4b15      	ldr	r3, [pc, #84]	@ (80023b0 <MX_USART2_UART_Init+0x90>)
 800235c:	2200      	movs	r2, #0
 800235e:	625a      	str	r2, [r3, #36]	@ 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002360:	4b13      	ldr	r3, [pc, #76]	@ (80023b0 <MX_USART2_UART_Init+0x90>)
 8002362:	2200      	movs	r2, #0
 8002364:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8002366:	4812      	ldr	r0, [pc, #72]	@ (80023b0 <MX_USART2_UART_Init+0x90>)
 8002368:	f008 fec9 	bl	800b0fe <HAL_UART_Init>
 800236c:	4603      	mov	r3, r0
 800236e:	2b00      	cmp	r3, #0
 8002370:	d001      	beq.n	8002376 <MX_USART2_UART_Init+0x56>
  {
    Error_Handler();
 8002372:	f000 f905 	bl	8002580 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002376:	2100      	movs	r1, #0
 8002378:	480d      	ldr	r0, [pc, #52]	@ (80023b0 <MX_USART2_UART_Init+0x90>)
 800237a:	f00a f94e 	bl	800c61a <HAL_UARTEx_SetTxFifoThreshold>
 800237e:	4603      	mov	r3, r0
 8002380:	2b00      	cmp	r3, #0
 8002382:	d001      	beq.n	8002388 <MX_USART2_UART_Init+0x68>
  {
    Error_Handler();
 8002384:	f000 f8fc 	bl	8002580 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002388:	2100      	movs	r1, #0
 800238a:	4809      	ldr	r0, [pc, #36]	@ (80023b0 <MX_USART2_UART_Init+0x90>)
 800238c:	f00a f983 	bl	800c696 <HAL_UARTEx_SetRxFifoThreshold>
 8002390:	4603      	mov	r3, r0
 8002392:	2b00      	cmp	r3, #0
 8002394:	d001      	beq.n	800239a <MX_USART2_UART_Init+0x7a>
  {
    Error_Handler();
 8002396:	f000 f8f3 	bl	8002580 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 800239a:	4805      	ldr	r0, [pc, #20]	@ (80023b0 <MX_USART2_UART_Init+0x90>)
 800239c:	f00a f904 	bl	800c5a8 <HAL_UARTEx_DisableFifoMode>
 80023a0:	4603      	mov	r3, r0
 80023a2:	2b00      	cmp	r3, #0
 80023a4:	d001      	beq.n	80023aa <MX_USART2_UART_Init+0x8a>
  {
    Error_Handler();
 80023a6:	f000 f8eb 	bl	8002580 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80023aa:	bf00      	nop
 80023ac:	bd80      	pop	{r7, pc}
 80023ae:	bf00      	nop
 80023b0:	20000750 	.word	0x20000750
 80023b4:	40004400 	.word	0x40004400
 80023b8:	00493e00 	.word	0x00493e00

080023bc <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80023bc:	b580      	push	{r7, lr}
 80023be:	b082      	sub	sp, #8
 80023c0:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 80023c2:	4b16      	ldr	r3, [pc, #88]	@ (800241c <MX_DMA_Init+0x60>)
 80023c4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80023c6:	4a15      	ldr	r2, [pc, #84]	@ (800241c <MX_DMA_Init+0x60>)
 80023c8:	f043 0304 	orr.w	r3, r3, #4
 80023cc:	6493      	str	r3, [r2, #72]	@ 0x48
 80023ce:	4b13      	ldr	r3, [pc, #76]	@ (800241c <MX_DMA_Init+0x60>)
 80023d0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80023d2:	f003 0304 	and.w	r3, r3, #4
 80023d6:	607b      	str	r3, [r7, #4]
 80023d8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 80023da:	4b10      	ldr	r3, [pc, #64]	@ (800241c <MX_DMA_Init+0x60>)
 80023dc:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80023de:	4a0f      	ldr	r2, [pc, #60]	@ (800241c <MX_DMA_Init+0x60>)
 80023e0:	f043 0301 	orr.w	r3, r3, #1
 80023e4:	6493      	str	r3, [r2, #72]	@ 0x48
 80023e6:	4b0d      	ldr	r3, [pc, #52]	@ (800241c <MX_DMA_Init+0x60>)
 80023e8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80023ea:	f003 0301 	and.w	r3, r3, #1
 80023ee:	603b      	str	r3, [r7, #0]
 80023f0:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 80023f2:	2200      	movs	r2, #0
 80023f4:	2100      	movs	r1, #0
 80023f6:	200b      	movs	r0, #11
 80023f8:	f005 f827 	bl	800744a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 80023fc:	200b      	movs	r0, #11
 80023fe:	f005 f83e 	bl	800747e <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_IRQn, 0, 0);
 8002402:	2200      	movs	r2, #0
 8002404:	2100      	movs	r1, #0
 8002406:	200c      	movs	r0, #12
 8002408:	f005 f81f 	bl	800744a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_IRQn);
 800240c:	200c      	movs	r0, #12
 800240e:	f005 f836 	bl	800747e <HAL_NVIC_EnableIRQ>

}
 8002412:	bf00      	nop
 8002414:	3708      	adds	r7, #8
 8002416:	46bd      	mov	sp, r7
 8002418:	bd80      	pop	{r7, pc}
 800241a:	bf00      	nop
 800241c:	40021000 	.word	0x40021000

08002420 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002420:	b580      	push	{r7, lr}
 8002422:	b08a      	sub	sp, #40	@ 0x28
 8002424:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002426:	f107 0314 	add.w	r3, r7, #20
 800242a:	2200      	movs	r2, #0
 800242c:	601a      	str	r2, [r3, #0]
 800242e:	605a      	str	r2, [r3, #4]
 8002430:	609a      	str	r2, [r3, #8]
 8002432:	60da      	str	r2, [r3, #12]
 8002434:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002436:	4b4e      	ldr	r3, [pc, #312]	@ (8002570 <MX_GPIO_Init+0x150>)
 8002438:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800243a:	4a4d      	ldr	r2, [pc, #308]	@ (8002570 <MX_GPIO_Init+0x150>)
 800243c:	f043 0304 	orr.w	r3, r3, #4
 8002440:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002442:	4b4b      	ldr	r3, [pc, #300]	@ (8002570 <MX_GPIO_Init+0x150>)
 8002444:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002446:	f003 0304 	and.w	r3, r3, #4
 800244a:	613b      	str	r3, [r7, #16]
 800244c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800244e:	4b48      	ldr	r3, [pc, #288]	@ (8002570 <MX_GPIO_Init+0x150>)
 8002450:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002452:	4a47      	ldr	r2, [pc, #284]	@ (8002570 <MX_GPIO_Init+0x150>)
 8002454:	f043 0320 	orr.w	r3, r3, #32
 8002458:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800245a:	4b45      	ldr	r3, [pc, #276]	@ (8002570 <MX_GPIO_Init+0x150>)
 800245c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800245e:	f003 0320 	and.w	r3, r3, #32
 8002462:	60fb      	str	r3, [r7, #12]
 8002464:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8002466:	4b42      	ldr	r3, [pc, #264]	@ (8002570 <MX_GPIO_Init+0x150>)
 8002468:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800246a:	4a41      	ldr	r2, [pc, #260]	@ (8002570 <MX_GPIO_Init+0x150>)
 800246c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8002470:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002472:	4b3f      	ldr	r3, [pc, #252]	@ (8002570 <MX_GPIO_Init+0x150>)
 8002474:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002476:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800247a:	60bb      	str	r3, [r7, #8]
 800247c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800247e:	4b3c      	ldr	r3, [pc, #240]	@ (8002570 <MX_GPIO_Init+0x150>)
 8002480:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002482:	4a3b      	ldr	r2, [pc, #236]	@ (8002570 <MX_GPIO_Init+0x150>)
 8002484:	f043 0301 	orr.w	r3, r3, #1
 8002488:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800248a:	4b39      	ldr	r3, [pc, #228]	@ (8002570 <MX_GPIO_Init+0x150>)
 800248c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800248e:	f003 0301 	and.w	r3, r3, #1
 8002492:	607b      	str	r3, [r7, #4]
 8002494:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002496:	4b36      	ldr	r3, [pc, #216]	@ (8002570 <MX_GPIO_Init+0x150>)
 8002498:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800249a:	4a35      	ldr	r2, [pc, #212]	@ (8002570 <MX_GPIO_Init+0x150>)
 800249c:	f043 0302 	orr.w	r3, r3, #2
 80024a0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80024a2:	4b33      	ldr	r3, [pc, #204]	@ (8002570 <MX_GPIO_Init+0x150>)
 80024a4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80024a6:	f003 0302 	and.w	r3, r3, #2
 80024aa:	603b      	str	r3, [r7, #0]
 80024ac:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, SPI1_CS_Pin|FAULT_LED_Pin, GPIO_PIN_RESET);
 80024ae:	2200      	movs	r2, #0
 80024b0:	21c0      	movs	r1, #192	@ 0xc0
 80024b2:	4830      	ldr	r0, [pc, #192]	@ (8002574 <MX_GPIO_Init+0x154>)
 80024b4:	f005 fcb2 	bl	8007e1c <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PC13 PC14 PC15 */
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 80024b8:	f44f 4360 	mov.w	r3, #57344	@ 0xe000
 80024bc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80024be:	2303      	movs	r3, #3
 80024c0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80024c2:	2300      	movs	r3, #0
 80024c4:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80024c6:	f107 0314 	add.w	r3, r7, #20
 80024ca:	4619      	mov	r1, r3
 80024cc:	482a      	ldr	r0, [pc, #168]	@ (8002578 <MX_GPIO_Init+0x158>)
 80024ce:	f005 fb23 	bl	8007b18 <HAL_GPIO_Init>

  /*Configure GPIO pin : PG10 */
  GPIO_InitStruct.Pin = GPIO_PIN_10;
 80024d2:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80024d6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80024d8:	2303      	movs	r3, #3
 80024da:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80024dc:	2300      	movs	r3, #0
 80024de:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80024e0:	f107 0314 	add.w	r3, r7, #20
 80024e4:	4619      	mov	r1, r3
 80024e6:	4825      	ldr	r0, [pc, #148]	@ (800257c <MX_GPIO_Init+0x15c>)
 80024e8:	f005 fb16 	bl	8007b18 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA0 PA6 PA7 PA11
                           PA12 PA15 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_11
 80024ec:	f649 03c1 	movw	r3, #39105	@ 0x98c1
 80024f0:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_12|GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80024f2:	2303      	movs	r3, #3
 80024f4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80024f6:	2300      	movs	r3, #0
 80024f8:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80024fa:	f107 0314 	add.w	r3, r7, #20
 80024fe:	4619      	mov	r1, r3
 8002500:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002504:	f005 fb08 	bl	8007b18 <HAL_GPIO_Init>

  /*Configure GPIO pin : ENC_INDEX_Pin */
  GPIO_InitStruct.Pin = ENC_INDEX_Pin;
 8002508:	2301      	movs	r3, #1
 800250a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800250c:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8002510:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002512:	2300      	movs	r3, #0
 8002514:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(ENC_INDEX_GPIO_Port, &GPIO_InitStruct);
 8002516:	f107 0314 	add.w	r3, r7, #20
 800251a:	4619      	mov	r1, r3
 800251c:	4815      	ldr	r0, [pc, #84]	@ (8002574 <MX_GPIO_Init+0x154>)
 800251e:	f005 fafb 	bl	8007b18 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB1 PB2 PB10 PB11
                           PB12 PB8 PB9 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_10|GPIO_PIN_11
 8002522:	f641 7306 	movw	r3, #7942	@ 0x1f06
 8002526:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_12|GPIO_PIN_8|GPIO_PIN_9;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002528:	2303      	movs	r3, #3
 800252a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800252c:	2300      	movs	r3, #0
 800252e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002530:	f107 0314 	add.w	r3, r7, #20
 8002534:	4619      	mov	r1, r3
 8002536:	480f      	ldr	r0, [pc, #60]	@ (8002574 <MX_GPIO_Init+0x154>)
 8002538:	f005 faee 	bl	8007b18 <HAL_GPIO_Init>

  /*Configure GPIO pins : SPI1_CS_Pin FAULT_LED_Pin */
  GPIO_InitStruct.Pin = SPI1_CS_Pin|FAULT_LED_Pin;
 800253c:	23c0      	movs	r3, #192	@ 0xc0
 800253e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002540:	2301      	movs	r3, #1
 8002542:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002544:	2300      	movs	r3, #0
 8002546:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002548:	2300      	movs	r3, #0
 800254a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800254c:	f107 0314 	add.w	r3, r7, #20
 8002550:	4619      	mov	r1, r3
 8002552:	4808      	ldr	r0, [pc, #32]	@ (8002574 <MX_GPIO_Init+0x154>)
 8002554:	f005 fae0 	bl	8007b18 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 8002558:	2200      	movs	r2, #0
 800255a:	2100      	movs	r1, #0
 800255c:	2006      	movs	r0, #6
 800255e:	f004 ff74 	bl	800744a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8002562:	2006      	movs	r0, #6
 8002564:	f004 ff8b 	bl	800747e <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8002568:	bf00      	nop
 800256a:	3728      	adds	r7, #40	@ 0x28
 800256c:	46bd      	mov	sp, r7
 800256e:	bd80      	pop	{r7, pc}
 8002570:	40021000 	.word	0x40021000
 8002574:	48000400 	.word	0x48000400
 8002578:	48000800 	.word	0x48000800
 800257c:	48001800 	.word	0x48001800

08002580 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002580:	b480      	push	{r7}
 8002582:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002584:	b672      	cpsid	i
}
 8002586:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002588:	bf00      	nop
 800258a:	e7fd      	b.n	8002588 <Error_Handler+0x8>

0800258c <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800258c:	b580      	push	{r7, lr}
 800258e:	b082      	sub	sp, #8
 8002590:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002592:	4b0f      	ldr	r3, [pc, #60]	@ (80025d0 <HAL_MspInit+0x44>)
 8002594:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002596:	4a0e      	ldr	r2, [pc, #56]	@ (80025d0 <HAL_MspInit+0x44>)
 8002598:	f043 0301 	orr.w	r3, r3, #1
 800259c:	6613      	str	r3, [r2, #96]	@ 0x60
 800259e:	4b0c      	ldr	r3, [pc, #48]	@ (80025d0 <HAL_MspInit+0x44>)
 80025a0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80025a2:	f003 0301 	and.w	r3, r3, #1
 80025a6:	607b      	str	r3, [r7, #4]
 80025a8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80025aa:	4b09      	ldr	r3, [pc, #36]	@ (80025d0 <HAL_MspInit+0x44>)
 80025ac:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80025ae:	4a08      	ldr	r2, [pc, #32]	@ (80025d0 <HAL_MspInit+0x44>)
 80025b0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80025b4:	6593      	str	r3, [r2, #88]	@ 0x58
 80025b6:	4b06      	ldr	r3, [pc, #24]	@ (80025d0 <HAL_MspInit+0x44>)
 80025b8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80025ba:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80025be:	603b      	str	r3, [r7, #0]
 80025c0:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 80025c2:	f005 fd25 	bl	8008010 <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80025c6:	bf00      	nop
 80025c8:	3708      	adds	r7, #8
 80025ca:	46bd      	mov	sp, r7
 80025cc:	bd80      	pop	{r7, pc}
 80025ce:	bf00      	nop
 80025d0:	40021000 	.word	0x40021000

080025d4 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80025d4:	b580      	push	{r7, lr}
 80025d6:	b09a      	sub	sp, #104	@ 0x68
 80025d8:	af00      	add	r7, sp, #0
 80025da:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80025dc:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 80025e0:	2200      	movs	r2, #0
 80025e2:	601a      	str	r2, [r3, #0]
 80025e4:	605a      	str	r2, [r3, #4]
 80025e6:	609a      	str	r2, [r3, #8]
 80025e8:	60da      	str	r2, [r3, #12]
 80025ea:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80025ec:	f107 0310 	add.w	r3, r7, #16
 80025f0:	2244      	movs	r2, #68	@ 0x44
 80025f2:	2100      	movs	r1, #0
 80025f4:	4618      	mov	r0, r3
 80025f6:	f00a fe38 	bl	800d26a <memset>
  if(hadc->Instance==ADC2)
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	681b      	ldr	r3, [r3, #0]
 80025fe:	4a37      	ldr	r2, [pc, #220]	@ (80026dc <HAL_ADC_MspInit+0x108>)
 8002600:	4293      	cmp	r3, r2
 8002602:	d167      	bne.n	80026d4 <HAL_ADC_MspInit+0x100>

  /* USER CODE END ADC2_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12;
 8002604:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8002608:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_SYSCLK;
 800260a:	f04f 5300 	mov.w	r3, #536870912	@ 0x20000000
 800260e:	64fb      	str	r3, [r7, #76]	@ 0x4c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002610:	f107 0310 	add.w	r3, r7, #16
 8002614:	4618      	mov	r0, r3
 8002616:	f006 fa35 	bl	8008a84 <HAL_RCCEx_PeriphCLKConfig>
 800261a:	4603      	mov	r3, r0
 800261c:	2b00      	cmp	r3, #0
 800261e:	d001      	beq.n	8002624 <HAL_ADC_MspInit+0x50>
    {
      Error_Handler();
 8002620:	f7ff ffae 	bl	8002580 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 8002624:	4b2e      	ldr	r3, [pc, #184]	@ (80026e0 <HAL_ADC_MspInit+0x10c>)
 8002626:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002628:	4a2d      	ldr	r2, [pc, #180]	@ (80026e0 <HAL_ADC_MspInit+0x10c>)
 800262a:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 800262e:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002630:	4b2b      	ldr	r3, [pc, #172]	@ (80026e0 <HAL_ADC_MspInit+0x10c>)
 8002632:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002634:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002638:	60fb      	str	r3, [r7, #12]
 800263a:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800263c:	4b28      	ldr	r3, [pc, #160]	@ (80026e0 <HAL_ADC_MspInit+0x10c>)
 800263e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002640:	4a27      	ldr	r2, [pc, #156]	@ (80026e0 <HAL_ADC_MspInit+0x10c>)
 8002642:	f043 0301 	orr.w	r3, r3, #1
 8002646:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002648:	4b25      	ldr	r3, [pc, #148]	@ (80026e0 <HAL_ADC_MspInit+0x10c>)
 800264a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800264c:	f003 0301 	and.w	r3, r3, #1
 8002650:	60bb      	str	r3, [r7, #8]
 8002652:	68bb      	ldr	r3, [r7, #8]
    /**ADC2 GPIO Configuration
    PA1     ------> ADC2_IN2
    PA4     ------> ADC2_IN17
    PA5     ------> ADC2_IN13
    */
    GPIO_InitStruct.Pin = INVERTER_TEMP_Pin|DC_VOLTAGE_Pin|MOTOR_TEMP_Pin;
 8002654:	2332      	movs	r3, #50	@ 0x32
 8002656:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002658:	2303      	movs	r3, #3
 800265a:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800265c:	2300      	movs	r3, #0
 800265e:	65fb      	str	r3, [r7, #92]	@ 0x5c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002660:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8002664:	4619      	mov	r1, r3
 8002666:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800266a:	f005 fa55 	bl	8007b18 <HAL_GPIO_Init>

    /* ADC2 DMA Init */
    /* ADC2 Init */
    hdma_adc2.Instance = DMA1_Channel2;
 800266e:	4b1d      	ldr	r3, [pc, #116]	@ (80026e4 <HAL_ADC_MspInit+0x110>)
 8002670:	4a1d      	ldr	r2, [pc, #116]	@ (80026e8 <HAL_ADC_MspInit+0x114>)
 8002672:	601a      	str	r2, [r3, #0]
    hdma_adc2.Init.Request = DMA_REQUEST_ADC2;
 8002674:	4b1b      	ldr	r3, [pc, #108]	@ (80026e4 <HAL_ADC_MspInit+0x110>)
 8002676:	2224      	movs	r2, #36	@ 0x24
 8002678:	605a      	str	r2, [r3, #4]
    hdma_adc2.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800267a:	4b1a      	ldr	r3, [pc, #104]	@ (80026e4 <HAL_ADC_MspInit+0x110>)
 800267c:	2200      	movs	r2, #0
 800267e:	609a      	str	r2, [r3, #8]
    hdma_adc2.Init.PeriphInc = DMA_PINC_DISABLE;
 8002680:	4b18      	ldr	r3, [pc, #96]	@ (80026e4 <HAL_ADC_MspInit+0x110>)
 8002682:	2200      	movs	r2, #0
 8002684:	60da      	str	r2, [r3, #12]
    hdma_adc2.Init.MemInc = DMA_MINC_ENABLE;
 8002686:	4b17      	ldr	r3, [pc, #92]	@ (80026e4 <HAL_ADC_MspInit+0x110>)
 8002688:	2280      	movs	r2, #128	@ 0x80
 800268a:	611a      	str	r2, [r3, #16]
    hdma_adc2.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 800268c:	4b15      	ldr	r3, [pc, #84]	@ (80026e4 <HAL_ADC_MspInit+0x110>)
 800268e:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8002692:	615a      	str	r2, [r3, #20]
    hdma_adc2.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8002694:	4b13      	ldr	r3, [pc, #76]	@ (80026e4 <HAL_ADC_MspInit+0x110>)
 8002696:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800269a:	619a      	str	r2, [r3, #24]
    hdma_adc2.Init.Mode = DMA_CIRCULAR;
 800269c:	4b11      	ldr	r3, [pc, #68]	@ (80026e4 <HAL_ADC_MspInit+0x110>)
 800269e:	2220      	movs	r2, #32
 80026a0:	61da      	str	r2, [r3, #28]
    hdma_adc2.Init.Priority = DMA_PRIORITY_LOW;
 80026a2:	4b10      	ldr	r3, [pc, #64]	@ (80026e4 <HAL_ADC_MspInit+0x110>)
 80026a4:	2200      	movs	r2, #0
 80026a6:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc2) != HAL_OK)
 80026a8:	480e      	ldr	r0, [pc, #56]	@ (80026e4 <HAL_ADC_MspInit+0x110>)
 80026aa:	f004 ff03 	bl	80074b4 <HAL_DMA_Init>
 80026ae:	4603      	mov	r3, r0
 80026b0:	2b00      	cmp	r3, #0
 80026b2:	d001      	beq.n	80026b8 <HAL_ADC_MspInit+0xe4>
    {
      Error_Handler();
 80026b4:	f7ff ff64 	bl	8002580 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc2);
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	4a0a      	ldr	r2, [pc, #40]	@ (80026e4 <HAL_ADC_MspInit+0x110>)
 80026bc:	655a      	str	r2, [r3, #84]	@ 0x54
 80026be:	4a09      	ldr	r2, [pc, #36]	@ (80026e4 <HAL_ADC_MspInit+0x110>)
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	6293      	str	r3, [r2, #40]	@ 0x28

    /* ADC2 interrupt Init */
    HAL_NVIC_SetPriority(ADC1_2_IRQn, 0, 0);
 80026c4:	2200      	movs	r2, #0
 80026c6:	2100      	movs	r1, #0
 80026c8:	2012      	movs	r0, #18
 80026ca:	f004 febe 	bl	800744a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
 80026ce:	2012      	movs	r0, #18
 80026d0:	f004 fed5 	bl	800747e <HAL_NVIC_EnableIRQ>

  /* USER CODE END ADC2_MspInit 1 */

  }

}
 80026d4:	bf00      	nop
 80026d6:	3768      	adds	r7, #104	@ 0x68
 80026d8:	46bd      	mov	sp, r7
 80026da:	bd80      	pop	{r7, pc}
 80026dc:	50000100 	.word	0x50000100
 80026e0:	40021000 	.word	0x40021000
 80026e4:	20000534 	.word	0x20000534
 80026e8:	4002001c 	.word	0x4002001c

080026ec <HAL_CORDIC_MspInit>:
* This function configures the hardware resources used in this example
* @param hcordic: CORDIC handle pointer
* @retval None
*/
void HAL_CORDIC_MspInit(CORDIC_HandleTypeDef* hcordic)
{
 80026ec:	b480      	push	{r7}
 80026ee:	b085      	sub	sp, #20
 80026f0:	af00      	add	r7, sp, #0
 80026f2:	6078      	str	r0, [r7, #4]
  if(hcordic->Instance==CORDIC)
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	681b      	ldr	r3, [r3, #0]
 80026f8:	4a0a      	ldr	r2, [pc, #40]	@ (8002724 <HAL_CORDIC_MspInit+0x38>)
 80026fa:	4293      	cmp	r3, r2
 80026fc:	d10b      	bne.n	8002716 <HAL_CORDIC_MspInit+0x2a>
  {
  /* USER CODE BEGIN CORDIC_MspInit 0 */

  /* USER CODE END CORDIC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CORDIC_CLK_ENABLE();
 80026fe:	4b0a      	ldr	r3, [pc, #40]	@ (8002728 <HAL_CORDIC_MspInit+0x3c>)
 8002700:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002702:	4a09      	ldr	r2, [pc, #36]	@ (8002728 <HAL_CORDIC_MspInit+0x3c>)
 8002704:	f043 0308 	orr.w	r3, r3, #8
 8002708:	6493      	str	r3, [r2, #72]	@ 0x48
 800270a:	4b07      	ldr	r3, [pc, #28]	@ (8002728 <HAL_CORDIC_MspInit+0x3c>)
 800270c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800270e:	f003 0308 	and.w	r3, r3, #8
 8002712:	60fb      	str	r3, [r7, #12]
 8002714:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END CORDIC_MspInit 1 */

  }

}
 8002716:	bf00      	nop
 8002718:	3714      	adds	r7, #20
 800271a:	46bd      	mov	sp, r7
 800271c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002720:	4770      	bx	lr
 8002722:	bf00      	nop
 8002724:	40020c00 	.word	0x40020c00
 8002728:	40021000 	.word	0x40021000

0800272c <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 800272c:	b580      	push	{r7, lr}
 800272e:	b08a      	sub	sp, #40	@ 0x28
 8002730:	af00      	add	r7, sp, #0
 8002732:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002734:	f107 0314 	add.w	r3, r7, #20
 8002738:	2200      	movs	r2, #0
 800273a:	601a      	str	r2, [r3, #0]
 800273c:	605a      	str	r2, [r3, #4]
 800273e:	609a      	str	r2, [r3, #8]
 8002740:	60da      	str	r2, [r3, #12]
 8002742:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	681b      	ldr	r3, [r3, #0]
 8002748:	4a17      	ldr	r2, [pc, #92]	@ (80027a8 <HAL_SPI_MspInit+0x7c>)
 800274a:	4293      	cmp	r3, r2
 800274c:	d127      	bne.n	800279e <HAL_SPI_MspInit+0x72>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 800274e:	4b17      	ldr	r3, [pc, #92]	@ (80027ac <HAL_SPI_MspInit+0x80>)
 8002750:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002752:	4a16      	ldr	r2, [pc, #88]	@ (80027ac <HAL_SPI_MspInit+0x80>)
 8002754:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8002758:	6613      	str	r3, [r2, #96]	@ 0x60
 800275a:	4b14      	ldr	r3, [pc, #80]	@ (80027ac <HAL_SPI_MspInit+0x80>)
 800275c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800275e:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002762:	613b      	str	r3, [r7, #16]
 8002764:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002766:	4b11      	ldr	r3, [pc, #68]	@ (80027ac <HAL_SPI_MspInit+0x80>)
 8002768:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800276a:	4a10      	ldr	r2, [pc, #64]	@ (80027ac <HAL_SPI_MspInit+0x80>)
 800276c:	f043 0302 	orr.w	r3, r3, #2
 8002770:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002772:	4b0e      	ldr	r3, [pc, #56]	@ (80027ac <HAL_SPI_MspInit+0x80>)
 8002774:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002776:	f003 0302 	and.w	r3, r3, #2
 800277a:	60fb      	str	r3, [r7, #12]
 800277c:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PB3     ------> SPI1_SCK
    PB4     ------> SPI1_MISO
    PB5     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5;
 800277e:	2338      	movs	r3, #56	@ 0x38
 8002780:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002782:	2302      	movs	r3, #2
 8002784:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002786:	2300      	movs	r3, #0
 8002788:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800278a:	2300      	movs	r3, #0
 800278c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800278e:	2305      	movs	r3, #5
 8002790:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002792:	f107 0314 	add.w	r3, r7, #20
 8002796:	4619      	mov	r1, r3
 8002798:	4805      	ldr	r0, [pc, #20]	@ (80027b0 <HAL_SPI_MspInit+0x84>)
 800279a:	f005 f9bd 	bl	8007b18 <HAL_GPIO_Init>

  /* USER CODE END SPI1_MspInit 1 */

  }

}
 800279e:	bf00      	nop
 80027a0:	3728      	adds	r7, #40	@ 0x28
 80027a2:	46bd      	mov	sp, r7
 80027a4:	bd80      	pop	{r7, pc}
 80027a6:	bf00      	nop
 80027a8:	40013000 	.word	0x40013000
 80027ac:	40021000 	.word	0x40021000
 80027b0:	48000400 	.word	0x48000400

080027b4 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80027b4:	b580      	push	{r7, lr}
 80027b6:	b086      	sub	sp, #24
 80027b8:	af00      	add	r7, sp, #0
 80027ba:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	681b      	ldr	r3, [r3, #0]
 80027c0:	4a34      	ldr	r2, [pc, #208]	@ (8002894 <HAL_TIM_Base_MspInit+0xe0>)
 80027c2:	4293      	cmp	r3, r2
 80027c4:	d114      	bne.n	80027f0 <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80027c6:	4b34      	ldr	r3, [pc, #208]	@ (8002898 <HAL_TIM_Base_MspInit+0xe4>)
 80027c8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80027ca:	4a33      	ldr	r2, [pc, #204]	@ (8002898 <HAL_TIM_Base_MspInit+0xe4>)
 80027cc:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 80027d0:	6613      	str	r3, [r2, #96]	@ 0x60
 80027d2:	4b31      	ldr	r3, [pc, #196]	@ (8002898 <HAL_TIM_Base_MspInit+0xe4>)
 80027d4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80027d6:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80027da:	617b      	str	r3, [r7, #20]
 80027dc:	697b      	ldr	r3, [r7, #20]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, 2, 0);
 80027de:	2200      	movs	r2, #0
 80027e0:	2102      	movs	r1, #2
 80027e2:	2019      	movs	r0, #25
 80027e4:	f004 fe31 	bl	800744a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 80027e8:	2019      	movs	r0, #25
 80027ea:	f004 fe48 	bl	800747e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM7_MspInit 1 */

  /* USER CODE END TIM7_MspInit 1 */
  }

}
 80027ee:	e04c      	b.n	800288a <HAL_TIM_Base_MspInit+0xd6>
  else if(htim_base->Instance==TIM4)
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	681b      	ldr	r3, [r3, #0]
 80027f4:	4a29      	ldr	r2, [pc, #164]	@ (800289c <HAL_TIM_Base_MspInit+0xe8>)
 80027f6:	4293      	cmp	r3, r2
 80027f8:	d114      	bne.n	8002824 <HAL_TIM_Base_MspInit+0x70>
    __HAL_RCC_TIM4_CLK_ENABLE();
 80027fa:	4b27      	ldr	r3, [pc, #156]	@ (8002898 <HAL_TIM_Base_MspInit+0xe4>)
 80027fc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80027fe:	4a26      	ldr	r2, [pc, #152]	@ (8002898 <HAL_TIM_Base_MspInit+0xe4>)
 8002800:	f043 0304 	orr.w	r3, r3, #4
 8002804:	6593      	str	r3, [r2, #88]	@ 0x58
 8002806:	4b24      	ldr	r3, [pc, #144]	@ (8002898 <HAL_TIM_Base_MspInit+0xe4>)
 8002808:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800280a:	f003 0304 	and.w	r3, r3, #4
 800280e:	613b      	str	r3, [r7, #16]
 8002810:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 8002812:	2200      	movs	r2, #0
 8002814:	2100      	movs	r1, #0
 8002816:	201e      	movs	r0, #30
 8002818:	f004 fe17 	bl	800744a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 800281c:	201e      	movs	r0, #30
 800281e:	f004 fe2e 	bl	800747e <HAL_NVIC_EnableIRQ>
}
 8002822:	e032      	b.n	800288a <HAL_TIM_Base_MspInit+0xd6>
  else if(htim_base->Instance==TIM6)
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	681b      	ldr	r3, [r3, #0]
 8002828:	4a1d      	ldr	r2, [pc, #116]	@ (80028a0 <HAL_TIM_Base_MspInit+0xec>)
 800282a:	4293      	cmp	r3, r2
 800282c:	d114      	bne.n	8002858 <HAL_TIM_Base_MspInit+0xa4>
    __HAL_RCC_TIM6_CLK_ENABLE();
 800282e:	4b1a      	ldr	r3, [pc, #104]	@ (8002898 <HAL_TIM_Base_MspInit+0xe4>)
 8002830:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002832:	4a19      	ldr	r2, [pc, #100]	@ (8002898 <HAL_TIM_Base_MspInit+0xe4>)
 8002834:	f043 0310 	orr.w	r3, r3, #16
 8002838:	6593      	str	r3, [r2, #88]	@ 0x58
 800283a:	4b17      	ldr	r3, [pc, #92]	@ (8002898 <HAL_TIM_Base_MspInit+0xe4>)
 800283c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800283e:	f003 0310 	and.w	r3, r3, #16
 8002842:	60fb      	str	r3, [r7, #12]
 8002844:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 3, 0);
 8002846:	2200      	movs	r2, #0
 8002848:	2103      	movs	r1, #3
 800284a:	2036      	movs	r0, #54	@ 0x36
 800284c:	f004 fdfd 	bl	800744a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8002850:	2036      	movs	r0, #54	@ 0x36
 8002852:	f004 fe14 	bl	800747e <HAL_NVIC_EnableIRQ>
}
 8002856:	e018      	b.n	800288a <HAL_TIM_Base_MspInit+0xd6>
  else if(htim_base->Instance==TIM7)
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	681b      	ldr	r3, [r3, #0]
 800285c:	4a11      	ldr	r2, [pc, #68]	@ (80028a4 <HAL_TIM_Base_MspInit+0xf0>)
 800285e:	4293      	cmp	r3, r2
 8002860:	d113      	bne.n	800288a <HAL_TIM_Base_MspInit+0xd6>
    __HAL_RCC_TIM7_CLK_ENABLE();
 8002862:	4b0d      	ldr	r3, [pc, #52]	@ (8002898 <HAL_TIM_Base_MspInit+0xe4>)
 8002864:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002866:	4a0c      	ldr	r2, [pc, #48]	@ (8002898 <HAL_TIM_Base_MspInit+0xe4>)
 8002868:	f043 0320 	orr.w	r3, r3, #32
 800286c:	6593      	str	r3, [r2, #88]	@ 0x58
 800286e:	4b0a      	ldr	r3, [pc, #40]	@ (8002898 <HAL_TIM_Base_MspInit+0xe4>)
 8002870:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002872:	f003 0320 	and.w	r3, r3, #32
 8002876:	60bb      	str	r3, [r7, #8]
 8002878:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM7_IRQn, 7, 0);
 800287a:	2200      	movs	r2, #0
 800287c:	2107      	movs	r1, #7
 800287e:	2037      	movs	r0, #55	@ 0x37
 8002880:	f004 fde3 	bl	800744a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM7_IRQn);
 8002884:	2037      	movs	r0, #55	@ 0x37
 8002886:	f004 fdfa 	bl	800747e <HAL_NVIC_EnableIRQ>
}
 800288a:	bf00      	nop
 800288c:	3718      	adds	r7, #24
 800288e:	46bd      	mov	sp, r7
 8002890:	bd80      	pop	{r7, pc}
 8002892:	bf00      	nop
 8002894:	40012c00 	.word	0x40012c00
 8002898:	40021000 	.word	0x40021000
 800289c:	40000800 	.word	0x40000800
 80028a0:	40001000 	.word	0x40001000
 80028a4:	40001400 	.word	0x40001400

080028a8 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80028a8:	b580      	push	{r7, lr}
 80028aa:	b08a      	sub	sp, #40	@ 0x28
 80028ac:	af00      	add	r7, sp, #0
 80028ae:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80028b0:	f107 0314 	add.w	r3, r7, #20
 80028b4:	2200      	movs	r2, #0
 80028b6:	601a      	str	r2, [r3, #0]
 80028b8:	605a      	str	r2, [r3, #4]
 80028ba:	609a      	str	r2, [r3, #8]
 80028bc:	60da      	str	r2, [r3, #12]
 80028be:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	681b      	ldr	r3, [r3, #0]
 80028c4:	4a29      	ldr	r2, [pc, #164]	@ (800296c <HAL_TIM_MspPostInit+0xc4>)
 80028c6:	4293      	cmp	r3, r2
 80028c8:	d14b      	bne.n	8002962 <HAL_TIM_MspPostInit+0xba>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80028ca:	4b29      	ldr	r3, [pc, #164]	@ (8002970 <HAL_TIM_MspPostInit+0xc8>)
 80028cc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80028ce:	4a28      	ldr	r2, [pc, #160]	@ (8002970 <HAL_TIM_MspPostInit+0xc8>)
 80028d0:	f043 0302 	orr.w	r3, r3, #2
 80028d4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80028d6:	4b26      	ldr	r3, [pc, #152]	@ (8002970 <HAL_TIM_MspPostInit+0xc8>)
 80028d8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80028da:	f003 0302 	and.w	r3, r3, #2
 80028de:	613b      	str	r3, [r7, #16]
 80028e0:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80028e2:	4b23      	ldr	r3, [pc, #140]	@ (8002970 <HAL_TIM_MspPostInit+0xc8>)
 80028e4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80028e6:	4a22      	ldr	r2, [pc, #136]	@ (8002970 <HAL_TIM_MspPostInit+0xc8>)
 80028e8:	f043 0301 	orr.w	r3, r3, #1
 80028ec:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80028ee:	4b20      	ldr	r3, [pc, #128]	@ (8002970 <HAL_TIM_MspPostInit+0xc8>)
 80028f0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80028f2:	f003 0301 	and.w	r3, r3, #1
 80028f6:	60fb      	str	r3, [r7, #12]
 80028f8:	68fb      	ldr	r3, [r7, #12]
    PB15     ------> TIM1_CH3N
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    PA10     ------> TIM1_CH3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14;
 80028fa:	f44f 43c0 	mov.w	r3, #24576	@ 0x6000
 80028fe:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002900:	2302      	movs	r3, #2
 8002902:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002904:	2300      	movs	r3, #0
 8002906:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002908:	2300      	movs	r3, #0
 800290a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_TIM1;
 800290c:	2306      	movs	r3, #6
 800290e:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002910:	f107 0314 	add.w	r3, r7, #20
 8002914:	4619      	mov	r1, r3
 8002916:	4817      	ldr	r0, [pc, #92]	@ (8002974 <HAL_TIM_MspPostInit+0xcc>)
 8002918:	f005 f8fe 	bl	8007b18 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_15;
 800291c:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8002920:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002922:	2302      	movs	r3, #2
 8002924:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002926:	2300      	movs	r3, #0
 8002928:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800292a:	2300      	movs	r3, #0
 800292c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_TIM1;
 800292e:	2304      	movs	r3, #4
 8002930:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002932:	f107 0314 	add.w	r3, r7, #20
 8002936:	4619      	mov	r1, r3
 8002938:	480e      	ldr	r0, [pc, #56]	@ (8002974 <HAL_TIM_MspPostInit+0xcc>)
 800293a:	f005 f8ed 	bl	8007b18 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10;
 800293e:	f44f 63e0 	mov.w	r3, #1792	@ 0x700
 8002942:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002944:	2302      	movs	r3, #2
 8002946:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002948:	2300      	movs	r3, #0
 800294a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800294c:	2300      	movs	r3, #0
 800294e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_TIM1;
 8002950:	2306      	movs	r3, #6
 8002952:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002954:	f107 0314 	add.w	r3, r7, #20
 8002958:	4619      	mov	r1, r3
 800295a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800295e:	f005 f8db 	bl	8007b18 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8002962:	bf00      	nop
 8002964:	3728      	adds	r7, #40	@ 0x28
 8002966:	46bd      	mov	sp, r7
 8002968:	bd80      	pop	{r7, pc}
 800296a:	bf00      	nop
 800296c:	40012c00 	.word	0x40012c00
 8002970:	40021000 	.word	0x40021000
 8002974:	48000400 	.word	0x48000400

08002978 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002978:	b580      	push	{r7, lr}
 800297a:	b09a      	sub	sp, #104	@ 0x68
 800297c:	af00      	add	r7, sp, #0
 800297e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002980:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8002984:	2200      	movs	r2, #0
 8002986:	601a      	str	r2, [r3, #0]
 8002988:	605a      	str	r2, [r3, #4]
 800298a:	609a      	str	r2, [r3, #8]
 800298c:	60da      	str	r2, [r3, #12]
 800298e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002990:	f107 0310 	add.w	r3, r7, #16
 8002994:	2244      	movs	r2, #68	@ 0x44
 8002996:	2100      	movs	r1, #0
 8002998:	4618      	mov	r0, r3
 800299a:	f00a fc66 	bl	800d26a <memset>
  if(huart->Instance==USART2)
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	681b      	ldr	r3, [r3, #0]
 80029a2:	4a38      	ldr	r2, [pc, #224]	@ (8002a84 <HAL_UART_MspInit+0x10c>)
 80029a4:	4293      	cmp	r3, r2
 80029a6:	d168      	bne.n	8002a7a <HAL_UART_MspInit+0x102>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 80029a8:	2302      	movs	r3, #2
 80029aa:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 80029ac:	2300      	movs	r3, #0
 80029ae:	61bb      	str	r3, [r7, #24]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80029b0:	f107 0310 	add.w	r3, r7, #16
 80029b4:	4618      	mov	r0, r3
 80029b6:	f006 f865 	bl	8008a84 <HAL_RCCEx_PeriphCLKConfig>
 80029ba:	4603      	mov	r3, r0
 80029bc:	2b00      	cmp	r3, #0
 80029be:	d001      	beq.n	80029c4 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 80029c0:	f7ff fdde 	bl	8002580 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80029c4:	4b30      	ldr	r3, [pc, #192]	@ (8002a88 <HAL_UART_MspInit+0x110>)
 80029c6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80029c8:	4a2f      	ldr	r2, [pc, #188]	@ (8002a88 <HAL_UART_MspInit+0x110>)
 80029ca:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80029ce:	6593      	str	r3, [r2, #88]	@ 0x58
 80029d0:	4b2d      	ldr	r3, [pc, #180]	@ (8002a88 <HAL_UART_MspInit+0x110>)
 80029d2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80029d4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80029d8:	60fb      	str	r3, [r7, #12]
 80029da:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80029dc:	4b2a      	ldr	r3, [pc, #168]	@ (8002a88 <HAL_UART_MspInit+0x110>)
 80029de:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80029e0:	4a29      	ldr	r2, [pc, #164]	@ (8002a88 <HAL_UART_MspInit+0x110>)
 80029e2:	f043 0301 	orr.w	r3, r3, #1
 80029e6:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80029e8:	4b27      	ldr	r3, [pc, #156]	@ (8002a88 <HAL_UART_MspInit+0x110>)
 80029ea:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80029ec:	f003 0301 	and.w	r3, r3, #1
 80029f0:	60bb      	str	r3, [r7, #8]
 80029f2:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80029f4:	230c      	movs	r3, #12
 80029f6:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80029f8:	2302      	movs	r3, #2
 80029fa:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80029fc:	2300      	movs	r3, #0
 80029fe:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002a00:	2300      	movs	r3, #0
 8002a02:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8002a04:	2307      	movs	r3, #7
 8002a06:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002a08:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8002a0c:	4619      	mov	r1, r3
 8002a0e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002a12:	f005 f881 	bl	8007b18 <HAL_GPIO_Init>

    /* USART2 DMA Init */
    /* USART2_TX Init */
    hdma_usart2_tx.Instance = DMA1_Channel1;
 8002a16:	4b1d      	ldr	r3, [pc, #116]	@ (8002a8c <HAL_UART_MspInit+0x114>)
 8002a18:	4a1d      	ldr	r2, [pc, #116]	@ (8002a90 <HAL_UART_MspInit+0x118>)
 8002a1a:	601a      	str	r2, [r3, #0]
    hdma_usart2_tx.Init.Request = DMA_REQUEST_USART2_TX;
 8002a1c:	4b1b      	ldr	r3, [pc, #108]	@ (8002a8c <HAL_UART_MspInit+0x114>)
 8002a1e:	221b      	movs	r2, #27
 8002a20:	605a      	str	r2, [r3, #4]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8002a22:	4b1a      	ldr	r3, [pc, #104]	@ (8002a8c <HAL_UART_MspInit+0x114>)
 8002a24:	2210      	movs	r2, #16
 8002a26:	609a      	str	r2, [r3, #8]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002a28:	4b18      	ldr	r3, [pc, #96]	@ (8002a8c <HAL_UART_MspInit+0x114>)
 8002a2a:	2200      	movs	r2, #0
 8002a2c:	60da      	str	r2, [r3, #12]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8002a2e:	4b17      	ldr	r3, [pc, #92]	@ (8002a8c <HAL_UART_MspInit+0x114>)
 8002a30:	2280      	movs	r2, #128	@ 0x80
 8002a32:	611a      	str	r2, [r3, #16]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002a34:	4b15      	ldr	r3, [pc, #84]	@ (8002a8c <HAL_UART_MspInit+0x114>)
 8002a36:	2200      	movs	r2, #0
 8002a38:	615a      	str	r2, [r3, #20]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002a3a:	4b14      	ldr	r3, [pc, #80]	@ (8002a8c <HAL_UART_MspInit+0x114>)
 8002a3c:	2200      	movs	r2, #0
 8002a3e:	619a      	str	r2, [r3, #24]
    hdma_usart2_tx.Init.Mode = DMA_NORMAL;
 8002a40:	4b12      	ldr	r3, [pc, #72]	@ (8002a8c <HAL_UART_MspInit+0x114>)
 8002a42:	2200      	movs	r2, #0
 8002a44:	61da      	str	r2, [r3, #28]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_HIGH;
 8002a46:	4b11      	ldr	r3, [pc, #68]	@ (8002a8c <HAL_UART_MspInit+0x114>)
 8002a48:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8002a4c:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 8002a4e:	480f      	ldr	r0, [pc, #60]	@ (8002a8c <HAL_UART_MspInit+0x114>)
 8002a50:	f004 fd30 	bl	80074b4 <HAL_DMA_Init>
 8002a54:	4603      	mov	r3, r0
 8002a56:	2b00      	cmp	r3, #0
 8002a58:	d001      	beq.n	8002a5e <HAL_UART_MspInit+0xe6>
    {
      Error_Handler();
 8002a5a:	f7ff fd91 	bl	8002580 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart2_tx);
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	4a0a      	ldr	r2, [pc, #40]	@ (8002a8c <HAL_UART_MspInit+0x114>)
 8002a62:	67da      	str	r2, [r3, #124]	@ 0x7c
 8002a64:	4a09      	ldr	r2, [pc, #36]	@ (8002a8c <HAL_UART_MspInit+0x114>)
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	6293      	str	r3, [r2, #40]	@ 0x28

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 1, 0);
 8002a6a:	2200      	movs	r2, #0
 8002a6c:	2101      	movs	r1, #1
 8002a6e:	2026      	movs	r0, #38	@ 0x26
 8002a70:	f004 fceb 	bl	800744a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8002a74:	2026      	movs	r0, #38	@ 0x26
 8002a76:	f004 fd02 	bl	800747e <HAL_NVIC_EnableIRQ>

  /* USER CODE END USART2_MspInit 1 */

  }

}
 8002a7a:	bf00      	nop
 8002a7c:	3768      	adds	r7, #104	@ 0x68
 8002a7e:	46bd      	mov	sp, r7
 8002a80:	bd80      	pop	{r7, pc}
 8002a82:	bf00      	nop
 8002a84:	40004400 	.word	0x40004400
 8002a88:	40021000 	.word	0x40021000
 8002a8c:	200007e4 	.word	0x200007e4
 8002a90:	40020008 	.word	0x40020008

08002a94 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002a94:	b480      	push	{r7}
 8002a96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002a98:	bf00      	nop
 8002a9a:	e7fd      	b.n	8002a98 <NMI_Handler+0x4>

08002a9c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002a9c:	b480      	push	{r7}
 8002a9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002aa0:	bf00      	nop
 8002aa2:	e7fd      	b.n	8002aa0 <HardFault_Handler+0x4>

08002aa4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002aa4:	b480      	push	{r7}
 8002aa6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002aa8:	bf00      	nop
 8002aaa:	e7fd      	b.n	8002aa8 <MemManage_Handler+0x4>

08002aac <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002aac:	b480      	push	{r7}
 8002aae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002ab0:	bf00      	nop
 8002ab2:	e7fd      	b.n	8002ab0 <BusFault_Handler+0x4>

08002ab4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002ab4:	b480      	push	{r7}
 8002ab6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002ab8:	bf00      	nop
 8002aba:	e7fd      	b.n	8002ab8 <UsageFault_Handler+0x4>

08002abc <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002abc:	b480      	push	{r7}
 8002abe:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002ac0:	bf00      	nop
 8002ac2:	46bd      	mov	sp, r7
 8002ac4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ac8:	4770      	bx	lr

08002aca <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002aca:	b480      	push	{r7}
 8002acc:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002ace:	bf00      	nop
 8002ad0:	46bd      	mov	sp, r7
 8002ad2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ad6:	4770      	bx	lr

08002ad8 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002ad8:	b480      	push	{r7}
 8002ada:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002adc:	bf00      	nop
 8002ade:	46bd      	mov	sp, r7
 8002ae0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ae4:	4770      	bx	lr

08002ae6 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002ae6:	b580      	push	{r7, lr}
 8002ae8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002aea:	f002 fe25 	bl	8005738 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002aee:	bf00      	nop
 8002af0:	bd80      	pop	{r7, pc}
	...

08002af4 <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 8002af4:	b580      	push	{r7, lr}
 8002af6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

if (__HAL_GPIO_EXTI_GET_FLAG(ENC_INDEX_Pin))
 8002af8:	4b07      	ldr	r3, [pc, #28]	@ (8002b18 <EXTI0_IRQHandler+0x24>)
 8002afa:	695b      	ldr	r3, [r3, #20]
 8002afc:	f003 0301 	and.w	r3, r3, #1
 8002b00:	2b00      	cmp	r3, #0
 8002b02:	d003      	beq.n	8002b0c <EXTI0_IRQHandler+0x18>
	{ HAL_GPIO_TogglePin(GPIOB,FAULT_LED_Pin);
 8002b04:	2180      	movs	r1, #128	@ 0x80
 8002b06:	4805      	ldr	r0, [pc, #20]	@ (8002b1c <EXTI0_IRQHandler+0x28>)
 8002b08:	f005 f9a0 	bl	8007e4c <HAL_GPIO_TogglePin>
	}
  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(ENC_INDEX_Pin);
 8002b0c:	2001      	movs	r0, #1
 8002b0e:	f005 f9b7 	bl	8007e80 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 8002b12:	bf00      	nop
 8002b14:	bd80      	pop	{r7, pc}
 8002b16:	bf00      	nop
 8002b18:	40010400 	.word	0x40010400
 8002b1c:	48000400 	.word	0x48000400

08002b20 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8002b20:	b580      	push	{r7, lr}
 8002b22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 8002b24:	4802      	ldr	r0, [pc, #8]	@ (8002b30 <DMA1_Channel1_IRQHandler+0x10>)
 8002b26:	f004 fea8 	bl	800787a <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8002b2a:	bf00      	nop
 8002b2c:	bd80      	pop	{r7, pc}
 8002b2e:	bf00      	nop
 8002b30:	200007e4 	.word	0x200007e4

08002b34 <DMA1_Channel2_IRQHandler>:

/**
  * @brief This function handles DMA1 channel2 global interrupt.
  */
void DMA1_Channel2_IRQHandler(void)
{
 8002b34:	b580      	push	{r7, lr}
 8002b36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_IRQn 0 */

  /* USER CODE END DMA1_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc2);
 8002b38:	4802      	ldr	r0, [pc, #8]	@ (8002b44 <DMA1_Channel2_IRQHandler+0x10>)
 8002b3a:	f004 fe9e 	bl	800787a <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_IRQn 1 */

  /* USER CODE END DMA1_Channel2_IRQn 1 */
}
 8002b3e:	bf00      	nop
 8002b40:	bd80      	pop	{r7, pc}
 8002b42:	bf00      	nop
 8002b44:	20000534 	.word	0x20000534

08002b48 <ADC1_2_IRQHandler>:

/**
  * @brief This function handles ADC1 and ADC2 global interrupt.
  */
void ADC1_2_IRQHandler(void)
{
 8002b48:	b580      	push	{r7, lr}
 8002b4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC1_2_IRQn 0 */

  /* USER CODE END ADC1_2_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc2);
 8002b4c:	4802      	ldr	r0, [pc, #8]	@ (8002b58 <ADC1_2_IRQHandler+0x10>)
 8002b4e:	f003 fad1 	bl	80060f4 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC1_2_IRQn 1 */

  /* USER CODE END ADC1_2_IRQn 1 */
}
 8002b52:	bf00      	nop
 8002b54:	bd80      	pop	{r7, pc}
 8002b56:	bf00      	nop
 8002b58:	200004c8 	.word	0x200004c8

08002b5c <TIM1_UP_TIM16_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM16 global interrupt.
  */
void TIM1_UP_TIM16_IRQHandler(void)
{
 8002b5c:	b580      	push	{r7, lr}
 8002b5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8002b60:	4802      	ldr	r0, [pc, #8]	@ (8002b6c <TIM1_UP_TIM16_IRQHandler+0x10>)
 8002b62:	f007 f867 	bl	8009c34 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 1 */
}
 8002b66:	bf00      	nop
 8002b68:	bd80      	pop	{r7, pc}
 8002b6a:	bf00      	nop
 8002b6c:	20000620 	.word	0x20000620

08002b70 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8002b70:	b580      	push	{r7, lr}
 8002b72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8002b74:	4802      	ldr	r0, [pc, #8]	@ (8002b80 <TIM4_IRQHandler+0x10>)
 8002b76:	f007 f85d 	bl	8009c34 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 8002b7a:	bf00      	nop
 8002b7c:	bd80      	pop	{r7, pc}
 8002b7e:	bf00      	nop
 8002b80:	2000066c 	.word	0x2000066c

08002b84 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt / USART2 wake-up interrupt through EXTI line 26.
  */
void USART2_IRQHandler(void)
{
 8002b84:	b580      	push	{r7, lr}
 8002b86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8002b88:	4802      	ldr	r0, [pc, #8]	@ (8002b94 <USART2_IRQHandler+0x10>)
 8002b8a:	f008 fb89 	bl	800b2a0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8002b8e:	bf00      	nop
 8002b90:	bd80      	pop	{r7, pc}
 8002b92:	bf00      	nop
 8002b94:	20000750 	.word	0x20000750

08002b98 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC3 channel underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8002b98:	b580      	push	{r7, lr}
 8002b9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8002b9c:	4802      	ldr	r0, [pc, #8]	@ (8002ba8 <TIM6_DAC_IRQHandler+0x10>)
 8002b9e:	f007 f849 	bl	8009c34 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8002ba2:	bf00      	nop
 8002ba4:	bd80      	pop	{r7, pc}
 8002ba6:	bf00      	nop
 8002ba8:	200006b8 	.word	0x200006b8

08002bac <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 8002bac:	b580      	push	{r7, lr}
 8002bae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_IRQn 0 */

  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 8002bb0:	4802      	ldr	r0, [pc, #8]	@ (8002bbc <TIM7_IRQHandler+0x10>)
 8002bb2:	f007 f83f 	bl	8009c34 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */

  /* USER CODE END TIM7_IRQn 1 */
}
 8002bb6:	bf00      	nop
 8002bb8:	bd80      	pop	{r7, pc}
 8002bba:	bf00      	nop
 8002bbc:	20000704 	.word	0x20000704

08002bc0 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002bc0:	b480      	push	{r7}
 8002bc2:	af00      	add	r7, sp, #0
  return 1;
 8002bc4:	2301      	movs	r3, #1
}
 8002bc6:	4618      	mov	r0, r3
 8002bc8:	46bd      	mov	sp, r7
 8002bca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bce:	4770      	bx	lr

08002bd0 <_kill>:

int _kill(int pid, int sig)
{
 8002bd0:	b580      	push	{r7, lr}
 8002bd2:	b082      	sub	sp, #8
 8002bd4:	af00      	add	r7, sp, #0
 8002bd6:	6078      	str	r0, [r7, #4]
 8002bd8:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8002bda:	f00a fb99 	bl	800d310 <__errno>
 8002bde:	4603      	mov	r3, r0
 8002be0:	2216      	movs	r2, #22
 8002be2:	601a      	str	r2, [r3, #0]
  return -1;
 8002be4:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 8002be8:	4618      	mov	r0, r3
 8002bea:	3708      	adds	r7, #8
 8002bec:	46bd      	mov	sp, r7
 8002bee:	bd80      	pop	{r7, pc}

08002bf0 <_exit>:

void _exit (int status)
{
 8002bf0:	b580      	push	{r7, lr}
 8002bf2:	b082      	sub	sp, #8
 8002bf4:	af00      	add	r7, sp, #0
 8002bf6:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8002bf8:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8002bfc:	6878      	ldr	r0, [r7, #4]
 8002bfe:	f7ff ffe7 	bl	8002bd0 <_kill>
  while (1) {}    /* Make sure we hang here */
 8002c02:	bf00      	nop
 8002c04:	e7fd      	b.n	8002c02 <_exit+0x12>

08002c06 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002c06:	b580      	push	{r7, lr}
 8002c08:	b086      	sub	sp, #24
 8002c0a:	af00      	add	r7, sp, #0
 8002c0c:	60f8      	str	r0, [r7, #12]
 8002c0e:	60b9      	str	r1, [r7, #8]
 8002c10:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002c12:	2300      	movs	r3, #0
 8002c14:	617b      	str	r3, [r7, #20]
 8002c16:	e00a      	b.n	8002c2e <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8002c18:	f3af 8000 	nop.w
 8002c1c:	4601      	mov	r1, r0
 8002c1e:	68bb      	ldr	r3, [r7, #8]
 8002c20:	1c5a      	adds	r2, r3, #1
 8002c22:	60ba      	str	r2, [r7, #8]
 8002c24:	b2ca      	uxtb	r2, r1
 8002c26:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002c28:	697b      	ldr	r3, [r7, #20]
 8002c2a:	3301      	adds	r3, #1
 8002c2c:	617b      	str	r3, [r7, #20]
 8002c2e:	697a      	ldr	r2, [r7, #20]
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	429a      	cmp	r2, r3
 8002c34:	dbf0      	blt.n	8002c18 <_read+0x12>
  }

  return len;
 8002c36:	687b      	ldr	r3, [r7, #4]
}
 8002c38:	4618      	mov	r0, r3
 8002c3a:	3718      	adds	r7, #24
 8002c3c:	46bd      	mov	sp, r7
 8002c3e:	bd80      	pop	{r7, pc}

08002c40 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002c40:	b580      	push	{r7, lr}
 8002c42:	b086      	sub	sp, #24
 8002c44:	af00      	add	r7, sp, #0
 8002c46:	60f8      	str	r0, [r7, #12]
 8002c48:	60b9      	str	r1, [r7, #8]
 8002c4a:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002c4c:	2300      	movs	r3, #0
 8002c4e:	617b      	str	r3, [r7, #20]
 8002c50:	e009      	b.n	8002c66 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8002c52:	68bb      	ldr	r3, [r7, #8]
 8002c54:	1c5a      	adds	r2, r3, #1
 8002c56:	60ba      	str	r2, [r7, #8]
 8002c58:	781b      	ldrb	r3, [r3, #0]
 8002c5a:	4618      	mov	r0, r3
 8002c5c:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002c60:	697b      	ldr	r3, [r7, #20]
 8002c62:	3301      	adds	r3, #1
 8002c64:	617b      	str	r3, [r7, #20]
 8002c66:	697a      	ldr	r2, [r7, #20]
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	429a      	cmp	r2, r3
 8002c6c:	dbf1      	blt.n	8002c52 <_write+0x12>
  }
  return len;
 8002c6e:	687b      	ldr	r3, [r7, #4]
}
 8002c70:	4618      	mov	r0, r3
 8002c72:	3718      	adds	r7, #24
 8002c74:	46bd      	mov	sp, r7
 8002c76:	bd80      	pop	{r7, pc}

08002c78 <_close>:

int _close(int file)
{
 8002c78:	b480      	push	{r7}
 8002c7a:	b083      	sub	sp, #12
 8002c7c:	af00      	add	r7, sp, #0
 8002c7e:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8002c80:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 8002c84:	4618      	mov	r0, r3
 8002c86:	370c      	adds	r7, #12
 8002c88:	46bd      	mov	sp, r7
 8002c8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c8e:	4770      	bx	lr

08002c90 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002c90:	b480      	push	{r7}
 8002c92:	b083      	sub	sp, #12
 8002c94:	af00      	add	r7, sp, #0
 8002c96:	6078      	str	r0, [r7, #4]
 8002c98:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8002c9a:	683b      	ldr	r3, [r7, #0]
 8002c9c:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8002ca0:	605a      	str	r2, [r3, #4]
  return 0;
 8002ca2:	2300      	movs	r3, #0
}
 8002ca4:	4618      	mov	r0, r3
 8002ca6:	370c      	adds	r7, #12
 8002ca8:	46bd      	mov	sp, r7
 8002caa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cae:	4770      	bx	lr

08002cb0 <_isatty>:

int _isatty(int file)
{
 8002cb0:	b480      	push	{r7}
 8002cb2:	b083      	sub	sp, #12
 8002cb4:	af00      	add	r7, sp, #0
 8002cb6:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8002cb8:	2301      	movs	r3, #1
}
 8002cba:	4618      	mov	r0, r3
 8002cbc:	370c      	adds	r7, #12
 8002cbe:	46bd      	mov	sp, r7
 8002cc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cc4:	4770      	bx	lr

08002cc6 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002cc6:	b480      	push	{r7}
 8002cc8:	b085      	sub	sp, #20
 8002cca:	af00      	add	r7, sp, #0
 8002ccc:	60f8      	str	r0, [r7, #12]
 8002cce:	60b9      	str	r1, [r7, #8]
 8002cd0:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8002cd2:	2300      	movs	r3, #0
}
 8002cd4:	4618      	mov	r0, r3
 8002cd6:	3714      	adds	r7, #20
 8002cd8:	46bd      	mov	sp, r7
 8002cda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cde:	4770      	bx	lr

08002ce0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002ce0:	b580      	push	{r7, lr}
 8002ce2:	b086      	sub	sp, #24
 8002ce4:	af00      	add	r7, sp, #0
 8002ce6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002ce8:	4a14      	ldr	r2, [pc, #80]	@ (8002d3c <_sbrk+0x5c>)
 8002cea:	4b15      	ldr	r3, [pc, #84]	@ (8002d40 <_sbrk+0x60>)
 8002cec:	1ad3      	subs	r3, r2, r3
 8002cee:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002cf0:	697b      	ldr	r3, [r7, #20]
 8002cf2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002cf4:	4b13      	ldr	r3, [pc, #76]	@ (8002d44 <_sbrk+0x64>)
 8002cf6:	681b      	ldr	r3, [r3, #0]
 8002cf8:	2b00      	cmp	r3, #0
 8002cfa:	d102      	bne.n	8002d02 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002cfc:	4b11      	ldr	r3, [pc, #68]	@ (8002d44 <_sbrk+0x64>)
 8002cfe:	4a12      	ldr	r2, [pc, #72]	@ (8002d48 <_sbrk+0x68>)
 8002d00:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002d02:	4b10      	ldr	r3, [pc, #64]	@ (8002d44 <_sbrk+0x64>)
 8002d04:	681a      	ldr	r2, [r3, #0]
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	4413      	add	r3, r2
 8002d0a:	693a      	ldr	r2, [r7, #16]
 8002d0c:	429a      	cmp	r2, r3
 8002d0e:	d207      	bcs.n	8002d20 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002d10:	f00a fafe 	bl	800d310 <__errno>
 8002d14:	4603      	mov	r3, r0
 8002d16:	220c      	movs	r2, #12
 8002d18:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002d1a:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8002d1e:	e009      	b.n	8002d34 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002d20:	4b08      	ldr	r3, [pc, #32]	@ (8002d44 <_sbrk+0x64>)
 8002d22:	681b      	ldr	r3, [r3, #0]
 8002d24:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002d26:	4b07      	ldr	r3, [pc, #28]	@ (8002d44 <_sbrk+0x64>)
 8002d28:	681a      	ldr	r2, [r3, #0]
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	4413      	add	r3, r2
 8002d2e:	4a05      	ldr	r2, [pc, #20]	@ (8002d44 <_sbrk+0x64>)
 8002d30:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002d32:	68fb      	ldr	r3, [r7, #12]
}
 8002d34:	4618      	mov	r0, r3
 8002d36:	3718      	adds	r7, #24
 8002d38:	46bd      	mov	sp, r7
 8002d3a:	bd80      	pop	{r7, pc}
 8002d3c:	20008000 	.word	0x20008000
 8002d40:	00000400 	.word	0x00000400
 8002d44:	20001b54 	.word	0x20001b54
 8002d48:	20001cb8 	.word	0x20001cb8

08002d4c <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8002d4c:	b480      	push	{r7}
 8002d4e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8002d50:	4b06      	ldr	r3, [pc, #24]	@ (8002d6c <SystemInit+0x20>)
 8002d52:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002d56:	4a05      	ldr	r2, [pc, #20]	@ (8002d6c <SystemInit+0x20>)
 8002d58:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8002d5c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002d60:	bf00      	nop
 8002d62:	46bd      	mov	sp, r7
 8002d64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d68:	4770      	bx	lr
 8002d6a:	bf00      	nop
 8002d6c:	e000ed00 	.word	0xe000ed00

08002d70 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8002d70:	480d      	ldr	r0, [pc, #52]	@ (8002da8 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8002d72:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002d74:	480d      	ldr	r0, [pc, #52]	@ (8002dac <LoopForever+0x6>)
  ldr r1, =_edata
 8002d76:	490e      	ldr	r1, [pc, #56]	@ (8002db0 <LoopForever+0xa>)
  ldr r2, =_sidata
 8002d78:	4a0e      	ldr	r2, [pc, #56]	@ (8002db4 <LoopForever+0xe>)
  movs r3, #0
 8002d7a:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8002d7c:	e002      	b.n	8002d84 <LoopCopyDataInit>

08002d7e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002d7e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002d80:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002d82:	3304      	adds	r3, #4

08002d84 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002d84:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002d86:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002d88:	d3f9      	bcc.n	8002d7e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002d8a:	4a0b      	ldr	r2, [pc, #44]	@ (8002db8 <LoopForever+0x12>)
  ldr r4, =_ebss
 8002d8c:	4c0b      	ldr	r4, [pc, #44]	@ (8002dbc <LoopForever+0x16>)
  movs r3, #0
 8002d8e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002d90:	e001      	b.n	8002d96 <LoopFillZerobss>

08002d92 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002d92:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002d94:	3204      	adds	r2, #4

08002d96 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002d96:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002d98:	d3fb      	bcc.n	8002d92 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8002d9a:	f7ff ffd7 	bl	8002d4c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002d9e:	f00a fabd 	bl	800d31c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8002da2:	f7fe fc11 	bl	80015c8 <main>

08002da6 <LoopForever>:

LoopForever:
    b LoopForever
 8002da6:	e7fe      	b.n	8002da6 <LoopForever>
  ldr   r0, =_estack
 8002da8:	20008000 	.word	0x20008000
  ldr r0, =_sdata
 8002dac:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002db0:	200004ac 	.word	0x200004ac
  ldr r2, =_sidata
 8002db4:	0800f4a0 	.word	0x0800f4a0
  ldr r2, =_sbss
 8002db8:	200004ac 	.word	0x200004ac
  ldr r4, =_ebss
 8002dbc:	20001cb4 	.word	0x20001cb4

08002dc0 <COMP1_2_3_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8002dc0:	e7fe      	b.n	8002dc0 <COMP1_2_3_IRQHandler>

08002dc2 <checkThermistorOpen>:

uint8_t FET_Celsius_array[] = {20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130};
uint16_t FET_ADC_array[] = {2250, 2209, 2169, 2128, 2088, 2048, 2008, 1969, 1930, 1891, 1853, 1815, 1777, 1740, 1703, 1667, 1631, 1596, 1561, 1527, 1493, 1460, 1427, 1395, 1364, 1333, 1302, 1272, 1243, 1214, 1186, 1159, 1131, 1105, 1079, 1054, 1029, 1004, 981, 957, 935, 912, 891, 870, 849, 829, 809, 790, 771, 752, 734, 717, 700, 683, 667, 651, 636, 621, 606, 592, 578, 564, 551, 538, 526, 513, 501, 490, 478, 467, 456, 446, 436, 426, 416, 407, 397, 388, 380, 371, 363, 355, 347, 339, 332, 324, 317, 310, 303, 297, 290, 284, 278, 272, 266, 261, 255, 250, 244, 239, 234, 229, 225, 220, 215, 211, 207, 202, 198, 194, 190, 187};


uint8_t checkThermistorOpen(uint16_t adcVal){
 8002dc2:	b480      	push	{r7}
 8002dc4:	b083      	sub	sp, #12
 8002dc6:	af00      	add	r7, sp, #0
 8002dc8:	4603      	mov	r3, r0
 8002dca:	80fb      	strh	r3, [r7, #6]
	if(adcVal<50 || adcVal>2300){
 8002dcc:	88fb      	ldrh	r3, [r7, #6]
 8002dce:	2b31      	cmp	r3, #49	@ 0x31
 8002dd0:	d904      	bls.n	8002ddc <checkThermistorOpen+0x1a>
 8002dd2:	88fb      	ldrh	r3, [r7, #6]
 8002dd4:	f640 02fc 	movw	r2, #2300	@ 0x8fc
 8002dd8:	4293      	cmp	r3, r2
 8002dda:	d901      	bls.n	8002de0 <checkThermistorOpen+0x1e>
		return 1;
 8002ddc:	2301      	movs	r3, #1
 8002dde:	e000      	b.n	8002de2 <checkThermistorOpen+0x20>
	}
	return 0;
 8002de0:	2300      	movs	r3, #0
}
 8002de2:	4618      	mov	r0, r3
 8002de4:	370c      	adds	r7, #12
 8002de6:	46bd      	mov	sp, r7
 8002de8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dec:	4770      	bx	lr
	...

08002df0 <get_temperature>:
uint8_t get_temperature(uint16_t adcVal){
 8002df0:	b480      	push	{r7}
 8002df2:	b085      	sub	sp, #20
 8002df4:	af00      	add	r7, sp, #0
 8002df6:	4603      	mov	r3, r0
 8002df8:	80fb      	strh	r3, [r7, #6]
	uint8_t index;
	for(int i=0; i<111; i++){
 8002dfa:	2300      	movs	r3, #0
 8002dfc:	60bb      	str	r3, [r7, #8]
 8002dfe:	e014      	b.n	8002e2a <get_temperature+0x3a>
		if(adcVal <= FET_ADC_array[i] && adcVal > FET_ADC_array[i+1]){
 8002e00:	4a16      	ldr	r2, [pc, #88]	@ (8002e5c <get_temperature+0x6c>)
 8002e02:	68bb      	ldr	r3, [r7, #8]
 8002e04:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8002e08:	88fa      	ldrh	r2, [r7, #6]
 8002e0a:	429a      	cmp	r2, r3
 8002e0c:	d80a      	bhi.n	8002e24 <get_temperature+0x34>
 8002e0e:	68bb      	ldr	r3, [r7, #8]
 8002e10:	3301      	adds	r3, #1
 8002e12:	4a12      	ldr	r2, [pc, #72]	@ (8002e5c <get_temperature+0x6c>)
 8002e14:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8002e18:	88fa      	ldrh	r2, [r7, #6]
 8002e1a:	429a      	cmp	r2, r3
 8002e1c:	d902      	bls.n	8002e24 <get_temperature+0x34>
			index = i;
 8002e1e:	68bb      	ldr	r3, [r7, #8]
 8002e20:	73fb      	strb	r3, [r7, #15]
			break;
 8002e22:	e005      	b.n	8002e30 <get_temperature+0x40>
	for(int i=0; i<111; i++){
 8002e24:	68bb      	ldr	r3, [r7, #8]
 8002e26:	3301      	adds	r3, #1
 8002e28:	60bb      	str	r3, [r7, #8]
 8002e2a:	68bb      	ldr	r3, [r7, #8]
 8002e2c:	2b6e      	cmp	r3, #110	@ 0x6e
 8002e2e:	dde7      	ble.n	8002e00 <get_temperature+0x10>
		}
	}
	if(adcVal>2251){
 8002e30:	88fb      	ldrh	r3, [r7, #6]
 8002e32:	f640 02cb 	movw	r2, #2251	@ 0x8cb
 8002e36:	4293      	cmp	r3, r2
 8002e38:	d901      	bls.n	8002e3e <get_temperature+0x4e>
		index=0;
 8002e3a:	2300      	movs	r3, #0
 8002e3c:	73fb      	strb	r3, [r7, #15]
	}
	if(adcVal<187){
 8002e3e:	88fb      	ldrh	r3, [r7, #6]
 8002e40:	2bba      	cmp	r3, #186	@ 0xba
 8002e42:	d801      	bhi.n	8002e48 <get_temperature+0x58>
		index=110;
 8002e44:	236e      	movs	r3, #110	@ 0x6e
 8002e46:	73fb      	strb	r3, [r7, #15]
	}
	return FET_Celsius_array[index];
 8002e48:	7bfb      	ldrb	r3, [r7, #15]
 8002e4a:	4a05      	ldr	r2, [pc, #20]	@ (8002e60 <get_temperature+0x70>)
 8002e4c:	5cd3      	ldrb	r3, [r2, r3]
}
 8002e4e:	4618      	mov	r0, r3
 8002e50:	3714      	adds	r7, #20
 8002e52:	46bd      	mov	sp, r7
 8002e54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e58:	4770      	bx	lr
 8002e5a:	bf00      	nop
 8002e5c:	2000007c 	.word	0x2000007c
 8002e60:	2000000c 	.word	0x2000000c

08002e64 <parityCheck>:
uint8_t checkReadForError(uint16_t data){
	return (data & 0x4000)>>15; // check if 15th bit is 1.
}

// Check Parity of a given data.
bool parityCheck(uint16_t data){
 8002e64:	b480      	push	{r7}
 8002e66:	b087      	sub	sp, #28
 8002e68:	af00      	add	r7, sp, #0
 8002e6a:	4603      	mov	r3, r0
 8002e6c:	80fb      	strh	r3, [r7, #6]
  uint16_t count=0;
 8002e6e:	2300      	movs	r3, #0
 8002e70:	82fb      	strh	r3, [r7, #22]
  uint16_t b = 1;
 8002e72:	2301      	movs	r3, #1
 8002e74:	81fb      	strh	r3, [r7, #14]
  for (int i=0; i<15; i++){
 8002e76:	2300      	movs	r3, #0
 8002e78:	613b      	str	r3, [r7, #16]
 8002e7a:	e00d      	b.n	8002e98 <parityCheck+0x34>
    if (data & (b << i)) {
 8002e7c:	88fa      	ldrh	r2, [r7, #6]
 8002e7e:	89f9      	ldrh	r1, [r7, #14]
 8002e80:	693b      	ldr	r3, [r7, #16]
 8002e82:	fa01 f303 	lsl.w	r3, r1, r3
 8002e86:	4013      	ands	r3, r2
 8002e88:	2b00      	cmp	r3, #0
 8002e8a:	d002      	beq.n	8002e92 <parityCheck+0x2e>
      count++;
 8002e8c:	8afb      	ldrh	r3, [r7, #22]
 8002e8e:	3301      	adds	r3, #1
 8002e90:	82fb      	strh	r3, [r7, #22]
  for (int i=0; i<15; i++){
 8002e92:	693b      	ldr	r3, [r7, #16]
 8002e94:	3301      	adds	r3, #1
 8002e96:	613b      	str	r3, [r7, #16]
 8002e98:	693b      	ldr	r3, [r7, #16]
 8002e9a:	2b0e      	cmp	r3, #14
 8002e9c:	ddee      	ble.n	8002e7c <parityCheck+0x18>
    }
  }

  if (count%2==0) {
 8002e9e:	8afb      	ldrh	r3, [r7, #22]
 8002ea0:	f003 0301 	and.w	r3, r3, #1
 8002ea4:	b29b      	uxth	r3, r3
 8002ea6:	2b00      	cmp	r3, #0
 8002ea8:	d101      	bne.n	8002eae <parityCheck+0x4a>
    return 0;
 8002eaa:	2300      	movs	r3, #0
 8002eac:	e000      	b.n	8002eb0 <parityCheck+0x4c>
  } else {
    return 1;
 8002eae:	2301      	movs	r3, #1
  }
}
 8002eb0:	4618      	mov	r0, r3
 8002eb2:	371c      	adds	r7, #28
 8002eb4:	46bd      	mov	sp, r7
 8002eb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eba:	4770      	bx	lr

08002ebc <AS5047_SPI_Write>:

//SPI_write and read are polling Fns;Timeout is set for 100ms
uint8_t AS5047_SPI_Write(uint16_t addressFrame, uint16_t valueFrame) {
 8002ebc:	b580      	push	{r7, lr}
 8002ebe:	b086      	sub	sp, #24
 8002ec0:	af02      	add	r7, sp, #8
 8002ec2:	4603      	mov	r3, r0
 8002ec4:	460a      	mov	r2, r1
 8002ec6:	80fb      	strh	r3, [r7, #6]
 8002ec8:	4613      	mov	r3, r2
 8002eca:	80bb      	strh	r3, [r7, #4]

  //write which address needed to be updated.
  txbuf[0] = (addressFrame) >> 8;
 8002ecc:	88fb      	ldrh	r3, [r7, #6]
 8002ece:	0a1b      	lsrs	r3, r3, #8
 8002ed0:	b29b      	uxth	r3, r3
 8002ed2:	b2da      	uxtb	r2, r3
 8002ed4:	4b48      	ldr	r3, [pc, #288]	@ (8002ff8 <AS5047_SPI_Write+0x13c>)
 8002ed6:	701a      	strb	r2, [r3, #0]
  txbuf[1] = addressFrame & 0xFF;
 8002ed8:	88fb      	ldrh	r3, [r7, #6]
 8002eda:	b2da      	uxtb	r2, r3
 8002edc:	4b46      	ldr	r3, [pc, #280]	@ (8002ff8 <AS5047_SPI_Write+0x13c>)
 8002ede:	705a      	strb	r2, [r3, #1]
  HAL_GPIO_WritePin(SPI1_CS_GPIO_Port, SPI1_CS_Pin, GPIO_PIN_RESET);
 8002ee0:	2200      	movs	r2, #0
 8002ee2:	2140      	movs	r1, #64	@ 0x40
 8002ee4:	4845      	ldr	r0, [pc, #276]	@ (8002ffc <AS5047_SPI_Write+0x140>)
 8002ee6:	f004 ff99 	bl	8007e1c <HAL_GPIO_WritePin>
  HAL_SPI_TransmitReceive(&hspi1, (uint8_t*)&txbuf, (uint8_t*)&rxbuf, 2, 100);
 8002eea:	2364      	movs	r3, #100	@ 0x64
 8002eec:	9300      	str	r3, [sp, #0]
 8002eee:	2302      	movs	r3, #2
 8002ef0:	4a43      	ldr	r2, [pc, #268]	@ (8003000 <AS5047_SPI_Write+0x144>)
 8002ef2:	4941      	ldr	r1, [pc, #260]	@ (8002ff8 <AS5047_SPI_Write+0x13c>)
 8002ef4:	4843      	ldr	r0, [pc, #268]	@ (8003004 <AS5047_SPI_Write+0x148>)
 8002ef6:	f006 f860 	bl	8008fba <HAL_SPI_TransmitReceive>
  while( hspi1.State == HAL_SPI_STATE_BUSY );
 8002efa:	bf00      	nop
 8002efc:	4b41      	ldr	r3, [pc, #260]	@ (8003004 <AS5047_SPI_Write+0x148>)
 8002efe:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8002f02:	b2db      	uxtb	r3, r3
 8002f04:	2b02      	cmp	r3, #2
 8002f06:	d0f9      	beq.n	8002efc <AS5047_SPI_Write+0x40>
  HAL_GPIO_WritePin(SPI1_CS_GPIO_Port, SPI1_CS_Pin, GPIO_PIN_SET);
 8002f08:	2201      	movs	r2, #1
 8002f0a:	2140      	movs	r1, #64	@ 0x40
 8002f0c:	483b      	ldr	r0, [pc, #236]	@ (8002ffc <AS5047_SPI_Write+0x140>)
 8002f0e:	f004 ff85 	bl	8007e1c <HAL_GPIO_WritePin>

  uint16_t recievedFrame = ((uint16_t)rxbuf[0])<<8;
 8002f12:	4b3b      	ldr	r3, [pc, #236]	@ (8003000 <AS5047_SPI_Write+0x144>)
 8002f14:	781b      	ldrb	r3, [r3, #0]
 8002f16:	021b      	lsls	r3, r3, #8
 8002f18:	81fb      	strh	r3, [r7, #14]
  recievedFrame += rxbuf[1];
 8002f1a:	4b39      	ldr	r3, [pc, #228]	@ (8003000 <AS5047_SPI_Write+0x144>)
 8002f1c:	785b      	ldrb	r3, [r3, #1]
 8002f1e:	461a      	mov	r2, r3
 8002f20:	89fb      	ldrh	r3, [r7, #14]
 8002f22:	4413      	add	r3, r2
 8002f24:	81fb      	strh	r3, [r7, #14]

  //this is value that will be stored inside the respective register
  txbuf[0] = (valueFrame) >> 8;
 8002f26:	88bb      	ldrh	r3, [r7, #4]
 8002f28:	0a1b      	lsrs	r3, r3, #8
 8002f2a:	b29b      	uxth	r3, r3
 8002f2c:	b2da      	uxtb	r2, r3
 8002f2e:	4b32      	ldr	r3, [pc, #200]	@ (8002ff8 <AS5047_SPI_Write+0x13c>)
 8002f30:	701a      	strb	r2, [r3, #0]
  txbuf[1] = valueFrame & 0xFF;
 8002f32:	88bb      	ldrh	r3, [r7, #4]
 8002f34:	b2da      	uxtb	r2, r3
 8002f36:	4b30      	ldr	r3, [pc, #192]	@ (8002ff8 <AS5047_SPI_Write+0x13c>)
 8002f38:	705a      	strb	r2, [r3, #1]
  HAL_GPIO_WritePin(SPI1_CS_GPIO_Port, SPI1_CS_Pin, GPIO_PIN_RESET);
 8002f3a:	2200      	movs	r2, #0
 8002f3c:	2140      	movs	r1, #64	@ 0x40
 8002f3e:	482f      	ldr	r0, [pc, #188]	@ (8002ffc <AS5047_SPI_Write+0x140>)
 8002f40:	f004 ff6c 	bl	8007e1c <HAL_GPIO_WritePin>
  HAL_SPI_TransmitReceive(&hspi1, (uint8_t*)&txbuf, (uint8_t*)&rxbuf, 2, 100);
 8002f44:	2364      	movs	r3, #100	@ 0x64
 8002f46:	9300      	str	r3, [sp, #0]
 8002f48:	2302      	movs	r3, #2
 8002f4a:	4a2d      	ldr	r2, [pc, #180]	@ (8003000 <AS5047_SPI_Write+0x144>)
 8002f4c:	492a      	ldr	r1, [pc, #168]	@ (8002ff8 <AS5047_SPI_Write+0x13c>)
 8002f4e:	482d      	ldr	r0, [pc, #180]	@ (8003004 <AS5047_SPI_Write+0x148>)
 8002f50:	f006 f833 	bl	8008fba <HAL_SPI_TransmitReceive>
  while( hspi1.State == HAL_SPI_STATE_BUSY );
 8002f54:	bf00      	nop
 8002f56:	4b2b      	ldr	r3, [pc, #172]	@ (8003004 <AS5047_SPI_Write+0x148>)
 8002f58:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8002f5c:	b2db      	uxtb	r3, r3
 8002f5e:	2b02      	cmp	r3, #2
 8002f60:	d0f9      	beq.n	8002f56 <AS5047_SPI_Write+0x9a>
  HAL_GPIO_WritePin(SPI1_CS_GPIO_Port, SPI1_CS_Pin, GPIO_PIN_SET);
 8002f62:	2201      	movs	r2, #1
 8002f64:	2140      	movs	r1, #64	@ 0x40
 8002f66:	4825      	ldr	r0, [pc, #148]	@ (8002ffc <AS5047_SPI_Write+0x140>)
 8002f68:	f004 ff58 	bl	8007e1c <HAL_GPIO_WritePin>

  recievedFrame = ((uint16_t)rxbuf[0])<<8;
 8002f6c:	4b24      	ldr	r3, [pc, #144]	@ (8003000 <AS5047_SPI_Write+0x144>)
 8002f6e:	781b      	ldrb	r3, [r3, #0]
 8002f70:	021b      	lsls	r3, r3, #8
 8002f72:	81fb      	strh	r3, [r7, #14]
  recievedFrame += rxbuf[1];
 8002f74:	4b22      	ldr	r3, [pc, #136]	@ (8003000 <AS5047_SPI_Write+0x144>)
 8002f76:	785b      	ldrb	r3, [r3, #1]
 8002f78:	461a      	mov	r2, r3
 8002f7a:	89fb      	ldrh	r3, [r7, #14]
 8002f7c:	4413      	add	r3, r2
 8002f7e:	81fb      	strh	r3, [r7, #14]

  //check if data has been written properly, will receive the written value in the recieve buffer
  txbuf[0] = NOP_FRAME >> 8;
 8002f80:	4b1d      	ldr	r3, [pc, #116]	@ (8002ff8 <AS5047_SPI_Write+0x13c>)
 8002f82:	22c0      	movs	r2, #192	@ 0xc0
 8002f84:	701a      	strb	r2, [r3, #0]
  txbuf[1] = NOP_FRAME & 0xFF;
 8002f86:	4b1c      	ldr	r3, [pc, #112]	@ (8002ff8 <AS5047_SPI_Write+0x13c>)
 8002f88:	2200      	movs	r2, #0
 8002f8a:	705a      	strb	r2, [r3, #1]
  HAL_GPIO_WritePin(SPI1_CS_GPIO_Port, SPI1_CS_Pin, GPIO_PIN_RESET);
 8002f8c:	2200      	movs	r2, #0
 8002f8e:	2140      	movs	r1, #64	@ 0x40
 8002f90:	481a      	ldr	r0, [pc, #104]	@ (8002ffc <AS5047_SPI_Write+0x140>)
 8002f92:	f004 ff43 	bl	8007e1c <HAL_GPIO_WritePin>
  HAL_SPI_TransmitReceive(&hspi1, (uint8_t*)&txbuf, (uint8_t*)&rxbuf, 2, 100);
 8002f96:	2364      	movs	r3, #100	@ 0x64
 8002f98:	9300      	str	r3, [sp, #0]
 8002f9a:	2302      	movs	r3, #2
 8002f9c:	4a18      	ldr	r2, [pc, #96]	@ (8003000 <AS5047_SPI_Write+0x144>)
 8002f9e:	4916      	ldr	r1, [pc, #88]	@ (8002ff8 <AS5047_SPI_Write+0x13c>)
 8002fa0:	4818      	ldr	r0, [pc, #96]	@ (8003004 <AS5047_SPI_Write+0x148>)
 8002fa2:	f006 f80a 	bl	8008fba <HAL_SPI_TransmitReceive>
  while( hspi1.State == HAL_SPI_STATE_BUSY );
 8002fa6:	bf00      	nop
 8002fa8:	4b16      	ldr	r3, [pc, #88]	@ (8003004 <AS5047_SPI_Write+0x148>)
 8002faa:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8002fae:	b2db      	uxtb	r3, r3
 8002fb0:	2b02      	cmp	r3, #2
 8002fb2:	d0f9      	beq.n	8002fa8 <AS5047_SPI_Write+0xec>
  HAL_GPIO_WritePin(SPI1_CS_GPIO_Port, SPI1_CS_Pin, GPIO_PIN_SET);
 8002fb4:	2201      	movs	r2, #1
 8002fb6:	2140      	movs	r1, #64	@ 0x40
 8002fb8:	4810      	ldr	r0, [pc, #64]	@ (8002ffc <AS5047_SPI_Write+0x140>)
 8002fba:	f004 ff2f 	bl	8007e1c <HAL_GPIO_WritePin>

  //DEBUG WHY THIS IS NOT WORKING LATER.
  //check if recieved data is same as what we wanted to write
  recievedFrame = ((uint16_t)rxbuf[0])<<8;
 8002fbe:	4b10      	ldr	r3, [pc, #64]	@ (8003000 <AS5047_SPI_Write+0x144>)
 8002fc0:	781b      	ldrb	r3, [r3, #0]
 8002fc2:	021b      	lsls	r3, r3, #8
 8002fc4:	81fb      	strh	r3, [r7, #14]
  recievedFrame += rxbuf[1];
 8002fc6:	4b0e      	ldr	r3, [pc, #56]	@ (8003000 <AS5047_SPI_Write+0x144>)
 8002fc8:	785b      	ldrb	r3, [r3, #1]
 8002fca:	461a      	mov	r2, r3
 8002fcc:	89fb      	ldrh	r3, [r7, #14]
 8002fce:	4413      	add	r3, r2
 8002fd0:	81fb      	strh	r3, [r7, #14]

  uint16_t receivedData = recievedFrame & 0x3FFF;
 8002fd2:	89fb      	ldrh	r3, [r7, #14]
 8002fd4:	f3c3 030d 	ubfx	r3, r3, #0, #14
 8002fd8:	81bb      	strh	r3, [r7, #12]
  uint16_t writtenData = valueFrame & 0x3FFF;
 8002fda:	88bb      	ldrh	r3, [r7, #4]
 8002fdc:	f3c3 030d 	ubfx	r3, r3, #0, #14
 8002fe0:	817b      	strh	r3, [r7, #10]

  if ((writtenData) == receivedData){
 8002fe2:	897a      	ldrh	r2, [r7, #10]
 8002fe4:	89bb      	ldrh	r3, [r7, #12]
 8002fe6:	429a      	cmp	r2, r3
 8002fe8:	d101      	bne.n	8002fee <AS5047_SPI_Write+0x132>
	  return 1;
 8002fea:	2301      	movs	r3, #1
 8002fec:	e000      	b.n	8002ff0 <AS5047_SPI_Write+0x134>
  }

  return 0;
 8002fee:	2300      	movs	r3, #0
}
 8002ff0:	4618      	mov	r0, r3
 8002ff2:	3710      	adds	r7, #16
 8002ff4:	46bd      	mov	sp, r7
 8002ff6:	bd80      	pop	{r7, pc}
 8002ff8:	20001b58 	.word	0x20001b58
 8002ffc:	48000400 	.word	0x48000400
 8003000:	20001b5c 	.word	0x20001b5c
 8003004:	200005bc 	.word	0x200005bc

08003008 <AS5047_SPI_Read>:


uint16_t AS5047_SPI_Read(uint16_t command, uint8_t continuousRead) {
 8003008:	b580      	push	{r7, lr}
 800300a:	b086      	sub	sp, #24
 800300c:	af02      	add	r7, sp, #8
 800300e:	4603      	mov	r3, r0
 8003010:	460a      	mov	r2, r1
 8003012:	80fb      	strh	r3, [r7, #6]
 8003014:	4613      	mov	r3, r2
 8003016:	717b      	strb	r3, [r7, #5]
  //write command frame.
  uint16_t finalDataVal;
  txbuf[0] = command >> 8U;
 8003018:	88fb      	ldrh	r3, [r7, #6]
 800301a:	0a1b      	lsrs	r3, r3, #8
 800301c:	b29b      	uxth	r3, r3
 800301e:	b2da      	uxtb	r2, r3
 8003020:	4b27      	ldr	r3, [pc, #156]	@ (80030c0 <AS5047_SPI_Read+0xb8>)
 8003022:	701a      	strb	r2, [r3, #0]
  txbuf[1] = command & 0xFF;
 8003024:	88fb      	ldrh	r3, [r7, #6]
 8003026:	b2da      	uxtb	r2, r3
 8003028:	4b25      	ldr	r3, [pc, #148]	@ (80030c0 <AS5047_SPI_Read+0xb8>)
 800302a:	705a      	strb	r2, [r3, #1]
  HAL_GPIO_WritePin(SPI1_CS_GPIO_Port, SPI1_CS_Pin, GPIO_PIN_RESET);
 800302c:	2200      	movs	r2, #0
 800302e:	2140      	movs	r1, #64	@ 0x40
 8003030:	4824      	ldr	r0, [pc, #144]	@ (80030c4 <AS5047_SPI_Read+0xbc>)
 8003032:	f004 fef3 	bl	8007e1c <HAL_GPIO_WritePin>
  HAL_SPI_TransmitReceive(&hspi1, (uint8_t*)&txbuf, (uint8_t*)&rxbuf,2,100);
 8003036:	2364      	movs	r3, #100	@ 0x64
 8003038:	9300      	str	r3, [sp, #0]
 800303a:	2302      	movs	r3, #2
 800303c:	4a22      	ldr	r2, [pc, #136]	@ (80030c8 <AS5047_SPI_Read+0xc0>)
 800303e:	4920      	ldr	r1, [pc, #128]	@ (80030c0 <AS5047_SPI_Read+0xb8>)
 8003040:	4822      	ldr	r0, [pc, #136]	@ (80030cc <AS5047_SPI_Read+0xc4>)
 8003042:	f005 ffba 	bl	8008fba <HAL_SPI_TransmitReceive>
  while( hspi1.State == HAL_SPI_STATE_BUSY );
 8003046:	bf00      	nop
 8003048:	4b20      	ldr	r3, [pc, #128]	@ (80030cc <AS5047_SPI_Read+0xc4>)
 800304a:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 800304e:	b2db      	uxtb	r3, r3
 8003050:	2b02      	cmp	r3, #2
 8003052:	d0f9      	beq.n	8003048 <AS5047_SPI_Read+0x40>
  HAL_GPIO_WritePin(SPI1_CS_GPIO_Port, SPI1_CS_Pin, GPIO_PIN_SET);
 8003054:	2201      	movs	r2, #1
 8003056:	2140      	movs	r1, #64	@ 0x40
 8003058:	481a      	ldr	r0, [pc, #104]	@ (80030c4 <AS5047_SPI_Read+0xbc>)
 800305a:	f004 fedf 	bl	8007e1c <HAL_GPIO_WritePin>

  if (continuousRead ==0){
 800305e:	797b      	ldrb	r3, [r7, #5]
 8003060:	2b00      	cmp	r3, #0
 8003062:	d11e      	bne.n	80030a2 <AS5047_SPI_Read+0x9a>
	  //this is the NOP command frame for receiving data if you want to read the register once.
	  txbuf[0] = NOP_FRAME >> 8;
 8003064:	4b16      	ldr	r3, [pc, #88]	@ (80030c0 <AS5047_SPI_Read+0xb8>)
 8003066:	22c0      	movs	r2, #192	@ 0xc0
 8003068:	701a      	strb	r2, [r3, #0]
	  txbuf[1] = NOP_FRAME & 0xFF;
 800306a:	4b15      	ldr	r3, [pc, #84]	@ (80030c0 <AS5047_SPI_Read+0xb8>)
 800306c:	2200      	movs	r2, #0
 800306e:	705a      	strb	r2, [r3, #1]
	  HAL_GPIO_WritePin(SPI1_CS_GPIO_Port, SPI1_CS_Pin, GPIO_PIN_RESET);
 8003070:	2200      	movs	r2, #0
 8003072:	2140      	movs	r1, #64	@ 0x40
 8003074:	4813      	ldr	r0, [pc, #76]	@ (80030c4 <AS5047_SPI_Read+0xbc>)
 8003076:	f004 fed1 	bl	8007e1c <HAL_GPIO_WritePin>
	  HAL_SPI_TransmitReceive(&hspi1, (uint8_t*)&txbuf, (uint8_t*)&rxbuf,2,100);
 800307a:	2364      	movs	r3, #100	@ 0x64
 800307c:	9300      	str	r3, [sp, #0]
 800307e:	2302      	movs	r3, #2
 8003080:	4a11      	ldr	r2, [pc, #68]	@ (80030c8 <AS5047_SPI_Read+0xc0>)
 8003082:	490f      	ldr	r1, [pc, #60]	@ (80030c0 <AS5047_SPI_Read+0xb8>)
 8003084:	4811      	ldr	r0, [pc, #68]	@ (80030cc <AS5047_SPI_Read+0xc4>)
 8003086:	f005 ff98 	bl	8008fba <HAL_SPI_TransmitReceive>
	  while( hspi1.State == HAL_SPI_STATE_BUSY );
 800308a:	bf00      	nop
 800308c:	4b0f      	ldr	r3, [pc, #60]	@ (80030cc <AS5047_SPI_Read+0xc4>)
 800308e:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8003092:	b2db      	uxtb	r3, r3
 8003094:	2b02      	cmp	r3, #2
 8003096:	d0f9      	beq.n	800308c <AS5047_SPI_Read+0x84>
	  HAL_GPIO_WritePin(SPI1_CS_GPIO_Port, SPI1_CS_Pin, GPIO_PIN_SET);
 8003098:	2201      	movs	r2, #1
 800309a:	2140      	movs	r1, #64	@ 0x40
 800309c:	4809      	ldr	r0, [pc, #36]	@ (80030c4 <AS5047_SPI_Read+0xbc>)
 800309e:	f004 febd 	bl	8007e1c <HAL_GPIO_WritePin>
  }
  finalDataVal = ((uint16_t)rxbuf[0])<<8;
 80030a2:	4b09      	ldr	r3, [pc, #36]	@ (80030c8 <AS5047_SPI_Read+0xc0>)
 80030a4:	781b      	ldrb	r3, [r3, #0]
 80030a6:	021b      	lsls	r3, r3, #8
 80030a8:	81fb      	strh	r3, [r7, #14]
  finalDataVal += rxbuf[1];
 80030aa:	4b07      	ldr	r3, [pc, #28]	@ (80030c8 <AS5047_SPI_Read+0xc0>)
 80030ac:	785b      	ldrb	r3, [r3, #1]
 80030ae:	461a      	mov	r2, r3
 80030b0:	89fb      	ldrh	r3, [r7, #14]
 80030b2:	4413      	add	r3, r2
 80030b4:	81fb      	strh	r3, [r7, #14]

  return finalDataVal;
 80030b6:	89fb      	ldrh	r3, [r7, #14]

}
 80030b8:	4618      	mov	r0, r3
 80030ba:	3710      	adds	r7, #16
 80030bc:	46bd      	mov	sp, r7
 80030be:	bd80      	pop	{r7, pc}
 80030c0:	20001b58 	.word	0x20001b58
 80030c4:	48000400 	.word	0x48000400
 80030c8:	20001b5c 	.word	0x20001b5c
 80030cc:	200005bc 	.word	0x200005bc

080030d0 <AS5047_readRegister>:

uint16_t AS5047_readRegister(uint16_t registerAddress,uint8_t continuousRead){
 80030d0:	b580      	push	{r7, lr}
 80030d2:	b084      	sub	sp, #16
 80030d4:	af00      	add	r7, sp, #0
 80030d6:	4603      	mov	r3, r0
 80030d8:	460a      	mov	r2, r1
 80030da:	80fb      	strh	r3, [r7, #6]
 80030dc:	4613      	mov	r3, r2
 80030de:	717b      	strb	r3, [r7, #5]
  CommandFrame command;
  command.raw = 0;
 80030e0:	2300      	movs	r3, #0
 80030e2:	81bb      	strh	r3, [r7, #12]
  command.values.rw = READ;
 80030e4:	7b7b      	ldrb	r3, [r7, #13]
 80030e6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80030ea:	737b      	strb	r3, [r7, #13]
  command.values.commandFrame = registerAddress;
 80030ec:	88fb      	ldrh	r3, [r7, #6]
 80030ee:	f3c3 030d 	ubfx	r3, r3, #0, #14
 80030f2:	b29a      	uxth	r2, r3
 80030f4:	89bb      	ldrh	r3, [r7, #12]
 80030f6:	f362 030d 	bfi	r3, r2, #0, #14
 80030fa:	81bb      	strh	r3, [r7, #12]
  command.values.parc = parityCheck(command.raw);
 80030fc:	89bb      	ldrh	r3, [r7, #12]
 80030fe:	4618      	mov	r0, r3
 8003100:	f7ff feb0 	bl	8002e64 <parityCheck>
 8003104:	4603      	mov	r3, r0
 8003106:	461a      	mov	r2, r3
 8003108:	7b7b      	ldrb	r3, [r7, #13]
 800310a:	f362 13c7 	bfi	r3, r2, #7, #1
 800310e:	737b      	strb	r3, [r7, #13]
  uint16_t out= AS5047_SPI_Read(command.raw, continuousRead);
 8003110:	89bb      	ldrh	r3, [r7, #12]
 8003112:	797a      	ldrb	r2, [r7, #5]
 8003114:	4611      	mov	r1, r2
 8003116:	4618      	mov	r0, r3
 8003118:	f7ff ff76 	bl	8003008 <AS5047_SPI_Read>
 800311c:	4603      	mov	r3, r0
 800311e:	81fb      	strh	r3, [r7, #14]
  return out;
 8003120:	89fb      	ldrh	r3, [r7, #14]
}
 8003122:	4618      	mov	r0, r3
 8003124:	3710      	adds	r7, #16
 8003126:	46bd      	mov	sp, r7
 8003128:	bd80      	pop	{r7, pc}

0800312a <AS5047_writeRegister>:


void AS5047_writeRegister(uint16_t registerAddress, uint16_t registerValue) {
 800312a:	b580      	push	{r7, lr}
 800312c:	b084      	sub	sp, #16
 800312e:	af00      	add	r7, sp, #0
 8003130:	4603      	mov	r3, r0
 8003132:	460a      	mov	r2, r1
 8003134:	80fb      	strh	r3, [r7, #6]
 8003136:	4613      	mov	r3, r2
 8003138:	80bb      	strh	r3, [r7, #4]
  CommandFrame command;
  command.raw=0;
 800313a:	2300      	movs	r3, #0
 800313c:	81bb      	strh	r3, [r7, #12]
  command.values.rw = WRITE;
 800313e:	7b7b      	ldrb	r3, [r7, #13]
 8003140:	f36f 1386 	bfc	r3, #6, #1
 8003144:	737b      	strb	r3, [r7, #13]
  command.values.commandFrame = registerAddress;
 8003146:	88fb      	ldrh	r3, [r7, #6]
 8003148:	f3c3 030d 	ubfx	r3, r3, #0, #14
 800314c:	b29a      	uxth	r2, r3
 800314e:	89bb      	ldrh	r3, [r7, #12]
 8003150:	f362 030d 	bfi	r3, r2, #0, #14
 8003154:	81bb      	strh	r3, [r7, #12]
  command.values.parc = parityCheck(command.raw);
 8003156:	89bb      	ldrh	r3, [r7, #12]
 8003158:	4618      	mov	r0, r3
 800315a:	f7ff fe83 	bl	8002e64 <parityCheck>
 800315e:	4603      	mov	r3, r0
 8003160:	461a      	mov	r2, r3
 8003162:	7b7b      	ldrb	r3, [r7, #13]
 8003164:	f362 13c7 	bfi	r3, r2, #7, #1
 8003168:	737b      	strb	r3, [r7, #13]

  WriteDataFrame contentFrame;
  contentFrame.raw = 0;
 800316a:	2300      	movs	r3, #0
 800316c:	813b      	strh	r3, [r7, #8]
  contentFrame.values.data = registerValue;
 800316e:	88bb      	ldrh	r3, [r7, #4]
 8003170:	f3c3 030d 	ubfx	r3, r3, #0, #14
 8003174:	b29a      	uxth	r2, r3
 8003176:	893b      	ldrh	r3, [r7, #8]
 8003178:	f362 030d 	bfi	r3, r2, #0, #14
 800317c:	813b      	strh	r3, [r7, #8]
  contentFrame.values.low = 0; //always low
 800317e:	7a7b      	ldrb	r3, [r7, #9]
 8003180:	f36f 1386 	bfc	r3, #6, #1
 8003184:	727b      	strb	r3, [r7, #9]
  contentFrame.values.pard = parityCheck(contentFrame.raw);
 8003186:	893b      	ldrh	r3, [r7, #8]
 8003188:	4618      	mov	r0, r3
 800318a:	f7ff fe6b 	bl	8002e64 <parityCheck>
 800318e:	4603      	mov	r3, r0
 8003190:	461a      	mov	r2, r3
 8003192:	7a7b      	ldrb	r3, [r7, #9]
 8003194:	f362 13c7 	bfi	r3, r2, #7, #1
 8003198:	727b      	strb	r3, [r7, #9]
  //TODO Use the out in the below fn and handle errors
  //uint8_t out = AS5047_SPI_Write(command.raw, contentFrame.raw);
  AS5047_SPI_Write(command.raw, contentFrame.raw);
 800319a:	89bb      	ldrh	r3, [r7, #12]
 800319c:	893a      	ldrh	r2, [r7, #8]
 800319e:	4611      	mov	r1, r2
 80031a0:	4618      	mov	r0, r3
 80031a2:	f7ff fe8b 	bl	8002ebc <AS5047_SPI_Write>
}
 80031a6:	bf00      	nop
 80031a8:	3710      	adds	r7, #16
 80031aa:	46bd      	mov	sp, r7
 80031ac:	bd80      	pop	{r7, pc}

080031ae <AS5047_ReadZeroValue>:

uint16_t AS5047_ReadZeroValue(void){
 80031ae:	b580      	push	{r7, lr}
 80031b0:	b082      	sub	sp, #8
 80031b2:	af00      	add	r7, sp, #0
  ZPOSH_frame ZPOS_H;
  ZPOSL_frame ZPOS_L;

  ZPOS_H.raw = AS5047_readRegister(ZPOSM_REG,0);
 80031b4:	2100      	movs	r1, #0
 80031b6:	2016      	movs	r0, #22
 80031b8:	f7ff ff8a 	bl	80030d0 <AS5047_readRegister>
 80031bc:	4603      	mov	r3, r0
 80031be:	b2db      	uxtb	r3, r3
 80031c0:	713b      	strb	r3, [r7, #4]
  ZPOS_L.raw = AS5047_readRegister(ZPOSL_REG,0);
 80031c2:	2100      	movs	r1, #0
 80031c4:	2017      	movs	r0, #23
 80031c6:	f7ff ff83 	bl	80030d0 <AS5047_readRegister>
 80031ca:	4603      	mov	r3, r0
 80031cc:	b2db      	uxtb	r3, r3
 80031ce:	703b      	strb	r3, [r7, #0]

  uint16_t zpos = (ZPOS_H.raw << 6) + (ZPOS_L.raw & 0x3F);
 80031d0:	793b      	ldrb	r3, [r7, #4]
 80031d2:	019b      	lsls	r3, r3, #6
 80031d4:	b29a      	uxth	r2, r3
 80031d6:	783b      	ldrb	r3, [r7, #0]
 80031d8:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80031dc:	b29b      	uxth	r3, r3
 80031de:	4413      	add	r3, r2
 80031e0:	80fb      	strh	r3, [r7, #6]
  return zpos;
 80031e2:	88fb      	ldrh	r3, [r7, #6]
}
 80031e4:	4618      	mov	r0, r3
 80031e6:	3708      	adds	r7, #8
 80031e8:	46bd      	mov	sp, r7
 80031ea:	bd80      	pop	{r7, pc}

080031ec <AS5047_WriteZeroValue>:


void AS5047_WriteZeroValue(uint16_t zeroValue){
 80031ec:	b580      	push	{r7, lr}
 80031ee:	b084      	sub	sp, #16
 80031f0:	af00      	add	r7, sp, #0
 80031f2:	4603      	mov	r3, r0
 80031f4:	80fb      	strh	r3, [r7, #6]
  ZPOSH_frame ZPOS_H;
  ZPOSL_frame ZPOS_L;

  ZPOS_L.values.zposl = zeroValue & 0x003F;
 80031f6:	88fb      	ldrh	r3, [r7, #6]
 80031f8:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80031fc:	b2da      	uxtb	r2, r3
 80031fe:	7a3b      	ldrb	r3, [r7, #8]
 8003200:	f362 0305 	bfi	r3, r2, #0, #6
 8003204:	723b      	strb	r3, [r7, #8]
  ZPOS_H.values.zposh = (zeroValue >> 6) & 0x00ff;
 8003206:	88fb      	ldrh	r3, [r7, #6]
 8003208:	099b      	lsrs	r3, r3, #6
 800320a:	b29b      	uxth	r3, r3
 800320c:	b2db      	uxtb	r3, r3
 800320e:	733b      	strb	r3, [r7, #12]

  AS5047_writeRegister(ZPOSM_REG, ZPOS_H.raw);
 8003210:	7b3b      	ldrb	r3, [r7, #12]
 8003212:	4619      	mov	r1, r3
 8003214:	2016      	movs	r0, #22
 8003216:	f7ff ff88 	bl	800312a <AS5047_writeRegister>
  AS5047_writeRegister(ZPOSL_REG, ZPOS_L.raw);
 800321a:	7a3b      	ldrb	r3, [r7, #8]
 800321c:	4619      	mov	r1, r3
 800321e:	2017      	movs	r0, #23
 8003220:	f7ff ff83 	bl	800312a <AS5047_writeRegister>

}
 8003224:	bf00      	nop
 8003226:	3710      	adds	r7, #16
 8003228:	46bd      	mov	sp, r7
 800322a:	bd80      	pop	{r7, pc}

0800322c <setMaxFrictionPWM>:
		 0.591f, 0.555f, 0.493f, 0.327f, 0.1f, 0.0f, 0.059f, 0.175f, 0.441f,
		 0.561f
};


void setMaxFrictionPWM(friction *f,uint16_t pwm){
 800322c:	b480      	push	{r7}
 800322e:	b083      	sub	sp, #12
 8003230:	af00      	add	r7, sp, #0
 8003232:	6078      	str	r0, [r7, #4]
 8003234:	460b      	mov	r3, r1
 8003236:	807b      	strh	r3, [r7, #2]
	f->maxFrictionPWM = pwm;
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	887a      	ldrh	r2, [r7, #2]
 800323c:	805a      	strh	r2, [r3, #2]
	f->maxFrictionPercentage = f->maxFrictionPWM /TIMER1_ARR;
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	885b      	ldrh	r3, [r3, #2]
 8003242:	ee07 3a90 	vmov	s15, r3
 8003246:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800324a:	eddf 6a06 	vldr	s13, [pc, #24]	@ 8003264 <setMaxFrictionPWM+0x38>
 800324e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	edc3 7a01 	vstr	s15, [r3, #4]
}
 8003258:	bf00      	nop
 800325a:	370c      	adds	r7, #12
 800325c:	46bd      	mov	sp, r7
 800325e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003262:	4770      	bx	lr
 8003264:	449c2000 	.word	0x449c2000

08003268 <lookupFrictionAddition>:

void lookupFrictionAddition(friction *f,uint16_t encoder_raw){
 8003268:	b480      	push	{r7}
 800326a:	b083      	sub	sp, #12
 800326c:	af00      	add	r7, sp, #0
 800326e:	6078      	str	r0, [r7, #4]
 8003270:	460b      	mov	r3, r1
 8003272:	807b      	strh	r3, [r7, #2]
	//divide encoder raw
	f->inst_encoderVal = encoder_raw;
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	887a      	ldrh	r2, [r7, #2]
 8003278:	811a      	strh	r2, [r3, #8]
	f->inst_idx =f->inst_encoderVal>>DIVISION_RIGHT_SHIFT;
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	891b      	ldrh	r3, [r3, #8]
 800327e:	0a5b      	lsrs	r3, r3, #9
 8003280:	b29b      	uxth	r3, r3
 8003282:	b2da      	uxtb	r2, r3
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	729a      	strb	r2, [r3, #10]
	f->inst_frictionNorm = frictionNormalized[f->inst_idx];
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	7a9b      	ldrb	r3, [r3, #10]
 800328c:	4a0b      	ldr	r2, [pc, #44]	@ (80032bc <lookupFrictionAddition+0x54>)
 800328e:	009b      	lsls	r3, r3, #2
 8003290:	4413      	add	r3, r2
 8003292:	681a      	ldr	r2, [r3, #0]
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	60da      	str	r2, [r3, #12]
	f->inst_frictionAddition = f->inst_frictionNorm * f->maxFrictionPercentage;
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	ed93 7a03 	vldr	s14, [r3, #12]
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	edd3 7a01 	vldr	s15, [r3, #4]
 80032a4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	edc3 7a04 	vstr	s15, [r3, #16]
}
 80032ae:	bf00      	nop
 80032b0:	370c      	adds	r7, #12
 80032b2:	46bd      	mov	sp, r7
 80032b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032b8:	4770      	bx	lr
 80032ba:	bf00      	nop
 80032bc:	2000015c 	.word	0x2000015c

080032c0 <setMaxCoggingPWM>:

void setMaxCoggingPWM(cogging *c,uint16_t pwm){
 80032c0:	b480      	push	{r7}
 80032c2:	b083      	sub	sp, #12
 80032c4:	af00      	add	r7, sp, #0
 80032c6:	6078      	str	r0, [r7, #4]
 80032c8:	460b      	mov	r3, r1
 80032ca:	807b      	strh	r3, [r7, #2]
	c->maxCoggingPWM = pwm;
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	887a      	ldrh	r2, [r7, #2]
 80032d0:	805a      	strh	r2, [r3, #2]
	c->maxCoggingPercentage = c->maxCoggingPWM /TIMER1_ARR;
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	885b      	ldrh	r3, [r3, #2]
 80032d6:	ee07 3a90 	vmov	s15, r3
 80032da:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80032de:	eddf 6a06 	vldr	s13, [pc, #24]	@ 80032f8 <setMaxCoggingPWM+0x38>
 80032e2:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	edc3 7a01 	vstr	s15, [r3, #4]
}
 80032ec:	bf00      	nop
 80032ee:	370c      	adds	r7, #12
 80032f0:	46bd      	mov	sp, r7
 80032f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032f6:	4770      	bx	lr
 80032f8:	449c2000 	.word	0x449c2000

080032fc <lookupCoggingAddition>:

void lookupCoggingAddition(cogging *c,float elecRadians){
 80032fc:	b480      	push	{r7}
 80032fe:	b085      	sub	sp, #20
 8003300:	af00      	add	r7, sp, #0
 8003302:	60f8      	str	r0, [r7, #12]
 8003304:	ed87 0a02 	vstr	s0, [r7, #8]
	//divide encoder raw
	c->inst_elecRadians = elecRadians;
 8003308:	68fb      	ldr	r3, [r7, #12]
 800330a:	68ba      	ldr	r2, [r7, #8]
 800330c:	609a      	str	r2, [r3, #8]
	c->inst_idx = c->inst_elecRadians/TWO_PI_F * COGGING_ARR_SIZE ;
 800330e:	68fb      	ldr	r3, [r7, #12]
 8003310:	ed93 7a02 	vldr	s14, [r3, #8]
 8003314:	eddf 6a14 	vldr	s13, [pc, #80]	@ 8003368 <lookupCoggingAddition+0x6c>
 8003318:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800331c:	ed9f 7a13 	vldr	s14, [pc, #76]	@ 800336c <lookupCoggingAddition+0x70>
 8003320:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003324:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003328:	edc7 7a01 	vstr	s15, [r7, #4]
 800332c:	793b      	ldrb	r3, [r7, #4]
 800332e:	b2da      	uxtb	r2, r3
 8003330:	68fb      	ldr	r3, [r7, #12]
 8003332:	731a      	strb	r2, [r3, #12]
	c->inst_coggingNorm = coggingNormalized[c->inst_idx];
 8003334:	68fb      	ldr	r3, [r7, #12]
 8003336:	7b1b      	ldrb	r3, [r3, #12]
 8003338:	4a0d      	ldr	r2, [pc, #52]	@ (8003370 <lookupCoggingAddition+0x74>)
 800333a:	009b      	lsls	r3, r3, #2
 800333c:	4413      	add	r3, r2
 800333e:	681a      	ldr	r2, [r3, #0]
 8003340:	68fb      	ldr	r3, [r7, #12]
 8003342:	611a      	str	r2, [r3, #16]
	c->inst_coggingAddition = c->inst_coggingNorm * c->maxCoggingPercentage;
 8003344:	68fb      	ldr	r3, [r7, #12]
 8003346:	ed93 7a04 	vldr	s14, [r3, #16]
 800334a:	68fb      	ldr	r3, [r7, #12]
 800334c:	edd3 7a01 	vldr	s15, [r3, #4]
 8003350:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003354:	68fb      	ldr	r3, [r7, #12]
 8003356:	edc3 7a05 	vstr	s15, [r3, #20]
}
 800335a:	bf00      	nop
 800335c:	3714      	adds	r7, #20
 800335e:	46bd      	mov	sp, r7
 8003360:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003364:	4770      	bx	lr
 8003366:	bf00      	nop
 8003368:	40c90fda 	.word	0x40c90fda
 800336c:	42800000 	.word	0x42800000
 8003370:	200001dc 	.word	0x200001dc

08003374 <Cordic_setup>:
 */

#include "MathConstants.h"
#include "Cordic.h"

void Cordic_setup(CORDIC_HandleTypeDef hcordic,CORDIC_ConfigTypeDef sCordicConfig){
 8003374:	b084      	sub	sp, #16
 8003376:	b580      	push	{r7, lr}
 8003378:	af00      	add	r7, sp, #0
 800337a:	f107 0c08 	add.w	ip, r7, #8
 800337e:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
	sCordicConfig.Function         = CORDIC_FUNCTION_SINE;     /* sine function */
 8003382:	2301      	movs	r3, #1
 8003384:	633b      	str	r3, [r7, #48]	@ 0x30
	sCordicConfig.Precision        = CORDIC_PRECISION_6CYCLES; /* 1.15 -> 2^-7 residual error  */
 8003386:	2360      	movs	r3, #96	@ 0x60
 8003388:	64bb      	str	r3, [r7, #72]	@ 0x48
	sCordicConfig.Scale            = CORDIC_SCALE_0;           /* no scale */
 800338a:	2300      	movs	r3, #0
 800338c:	637b      	str	r3, [r7, #52]	@ 0x34
	sCordicConfig.NbWrite          = CORDIC_NBWRITE_1;         /* One input data: angle. Second input data (modulus) is 1 after cordic reset */
 800338e:	2300      	movs	r3, #0
 8003390:	643b      	str	r3, [r7, #64]	@ 0x40
	sCordicConfig.NbRead           = CORDIC_NBREAD_1;          /* One output data: sine */
 8003392:	2300      	movs	r3, #0
 8003394:	647b      	str	r3, [r7, #68]	@ 0x44
	sCordicConfig.InSize           = CORDIC_INSIZE_16BITS;     /* q1.15 format for input data */
 8003396:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 800339a:	63bb      	str	r3, [r7, #56]	@ 0x38
	sCordicConfig.OutSize          = CORDIC_OUTSIZE_16BITS;    /* q1.15 format for output data */
 800339c:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 80033a0:	63fb      	str	r3, [r7, #60]	@ 0x3c
	HAL_CORDIC_Configure(&hcordic, &sCordicConfig);
 80033a2:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 80033a6:	4619      	mov	r1, r3
 80033a8:	f107 0008 	add.w	r0, r7, #8
 80033ac:	f003 ff36 	bl	800721c <HAL_CORDIC_Configure>
}
 80033b0:	bf00      	nop
 80033b2:	46bd      	mov	sp, r7
 80033b4:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80033b8:	b004      	add	sp, #16
 80033ba:	4770      	bx	lr

080033bc <RunCordic_TwoSines>:
	short out1 = out0&0xffff;
	*sin_out = (float)out1/32768.0f;
	*cos_out = (float)out2/32768.0f;
}

void RunCordic_TwoSines(CORDIC_HandleTypeDef hcordic,float theta1,float theta2,float *sin1 , float *sin2) {
 80033bc:	b084      	sub	sp, #16
 80033be:	b480      	push	{r7}
 80033c0:	b087      	sub	sp, #28
 80033c2:	af00      	add	r7, sp, #0
 80033c4:	f107 0c20 	add.w	ip, r7, #32
 80033c8:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
 80033cc:	ed87 0a01 	vstr	s0, [r7, #4]
 80033d0:	edc7 0a00 	vstr	s1, [r7]
	MODIFY_REG(hcordic.Instance->CSR,CORDIC_CSR_FUNC,SINE_FUNCTION);
 80033d4:	6a3b      	ldr	r3, [r7, #32]
 80033d6:	681b      	ldr	r3, [r3, #0]
 80033d8:	f023 020f 	bic.w	r2, r3, #15
 80033dc:	6a3b      	ldr	r3, [r7, #32]
 80033de:	f042 0201 	orr.w	r2, r2, #1
 80033e2:	601a      	str	r2, [r3, #0]
	//meant to calculate theta and 60-theta,while doing SVPWM
	int32_t cordicin = 0x7fff0000;   //  mag = 1
 80033e4:	4b2a      	ldr	r3, [pc, #168]	@ (8003490 <RunCordic_TwoSines+0xd4>)
 80033e6:	617b      	str	r3, [r7, #20]
	short thetashort = theta1*10435;
 80033e8:	edd7 7a01 	vldr	s15, [r7, #4]
 80033ec:	ed9f 7a29 	vldr	s14, [pc, #164]	@ 8003494 <RunCordic_TwoSines+0xd8>
 80033f0:	ee67 7a87 	vmul.f32	s15, s15, s14
 80033f4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80033f8:	ee17 3a90 	vmov	r3, s15
 80033fc:	827b      	strh	r3, [r7, #18]
	cordicin += thetashort;
 80033fe:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8003402:	697a      	ldr	r2, [r7, #20]
 8003404:	4413      	add	r3, r2
 8003406:	617b      	str	r3, [r7, #20]

	CORDIC->WDATA = cordicin;
 8003408:	4a23      	ldr	r2, [pc, #140]	@ (8003498 <RunCordic_TwoSines+0xdc>)
 800340a:	697b      	ldr	r3, [r7, #20]
 800340c:	6053      	str	r3, [r2, #4]
	int32_t out0 = CORDIC->RDATA;
 800340e:	4b22      	ldr	r3, [pc, #136]	@ (8003498 <RunCordic_TwoSines+0xdc>)
 8003410:	689b      	ldr	r3, [r3, #8]
 8003412:	60fb      	str	r3, [r7, #12]

	short out1 = out0&0xffff;
 8003414:	68fb      	ldr	r3, [r7, #12]
 8003416:	817b      	strh	r3, [r7, #10]
	*sin1 = (float)out1/32768.0f;
 8003418:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 800341c:	ee07 3a90 	vmov	s15, r3
 8003420:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8003424:	eddf 6a1d 	vldr	s13, [pc, #116]	@ 800349c <RunCordic_TwoSines+0xe0>
 8003428:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800342c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800342e:	edc3 7a00 	vstr	s15, [r3]

	//----------------------------------
	cordicin = 0x7fff0000;
 8003432:	4b17      	ldr	r3, [pc, #92]	@ (8003490 <RunCordic_TwoSines+0xd4>)
 8003434:	617b      	str	r3, [r7, #20]
	thetashort = theta2*10435;
 8003436:	edd7 7a00 	vldr	s15, [r7]
 800343a:	ed9f 7a16 	vldr	s14, [pc, #88]	@ 8003494 <RunCordic_TwoSines+0xd8>
 800343e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003442:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8003446:	ee17 3a90 	vmov	r3, s15
 800344a:	827b      	strh	r3, [r7, #18]
	cordicin += thetashort;
 800344c:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8003450:	697a      	ldr	r2, [r7, #20]
 8003452:	4413      	add	r3, r2
 8003454:	617b      	str	r3, [r7, #20]

	CORDIC->WDATA = cordicin;
 8003456:	4a10      	ldr	r2, [pc, #64]	@ (8003498 <RunCordic_TwoSines+0xdc>)
 8003458:	697b      	ldr	r3, [r7, #20]
 800345a:	6053      	str	r3, [r2, #4]
	out0 = CORDIC->RDATA;
 800345c:	4b0e      	ldr	r3, [pc, #56]	@ (8003498 <RunCordic_TwoSines+0xdc>)
 800345e:	689b      	ldr	r3, [r3, #8]
 8003460:	60fb      	str	r3, [r7, #12]

	out1 = out0&0xffff;
 8003462:	68fb      	ldr	r3, [r7, #12]
 8003464:	817b      	strh	r3, [r7, #10]
	*sin2 = (float)out1/32768.0f;
 8003466:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 800346a:	ee07 3a90 	vmov	s15, r3
 800346e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8003472:	eddf 6a0a 	vldr	s13, [pc, #40]	@ 800349c <RunCordic_TwoSines+0xe0>
 8003476:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800347a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800347c:	edc3 7a00 	vstr	s15, [r3]

}
 8003480:	bf00      	nop
 8003482:	371c      	adds	r7, #28
 8003484:	46bd      	mov	sp, r7
 8003486:	f85d 7b04 	ldr.w	r7, [sp], #4
 800348a:	b004      	add	sp, #16
 800348c:	4770      	bx	lr
 800348e:	bf00      	nop
 8003490:	7fff0000 	.word	0x7fff0000
 8003494:	46230c00 	.word	0x46230c00
 8003498:	40020c00 	.word	0x40020c00
 800349c:	47000000 	.word	0x47000000

080034a0 <Encoder_checkHealth>:
 */

#include "AS5x47P.h"
#include "EncoderFns.h"

uint8_t Encoder_checkHealth(void){
 80034a0:	b580      	push	{r7, lr}
 80034a2:	b082      	sub	sp, #8
 80034a4:	af00      	add	r7, sp, #0
	Diaagc diag;
	diag.raw = AS5047_SPI_Read(DIAGC_READ_FRAME,0);
 80034a6:	2100      	movs	r1, #0
 80034a8:	f64f 70fc 	movw	r0, #65532	@ 0xfffc
 80034ac:	f7ff fdac 	bl	8003008 <AS5047_SPI_Read>
 80034b0:	4603      	mov	r3, r0
 80034b2:	80bb      	strh	r3, [r7, #4]
	if(diag.values.magh == 1){
 80034b4:	797b      	ldrb	r3, [r7, #5]
 80034b6:	f003 0304 	and.w	r3, r3, #4
 80034ba:	b2db      	uxtb	r3, r3
 80034bc:	2b00      	cmp	r3, #0
 80034be:	d001      	beq.n	80034c4 <Encoder_checkHealth+0x24>
		return 1;
 80034c0:	2301      	movs	r3, #1
 80034c2:	e010      	b.n	80034e6 <Encoder_checkHealth+0x46>
	}else if (diag.values.magl == 1){
 80034c4:	797b      	ldrb	r3, [r7, #5]
 80034c6:	f003 0308 	and.w	r3, r3, #8
 80034ca:	b2db      	uxtb	r3, r3
 80034cc:	2b00      	cmp	r3, #0
 80034ce:	d001      	beq.n	80034d4 <Encoder_checkHealth+0x34>
		return 2;
 80034d0:	2302      	movs	r3, #2
 80034d2:	e008      	b.n	80034e6 <Encoder_checkHealth+0x46>
	}else if (diag.values.cof == 1){
 80034d4:	797b      	ldrb	r3, [r7, #5]
 80034d6:	f003 0302 	and.w	r3, r3, #2
 80034da:	b2db      	uxtb	r3, r3
 80034dc:	2b00      	cmp	r3, #0
 80034de:	d001      	beq.n	80034e4 <Encoder_checkHealth+0x44>
		return 3;
 80034e0:	2303      	movs	r3, #3
 80034e2:	e000      	b.n	80034e6 <Encoder_checkHealth+0x46>
	}else{
		return 0;
 80034e4:	2300      	movs	r3, #0
	}
}
 80034e6:	4618      	mov	r0, r3
 80034e8:	3708      	adds	r7, #8
 80034ea:	46bd      	mov	sp, r7
 80034ec:	bd80      	pop	{r7, pc}

080034ee <SetupABIwithoutPWM>:


void SetupABIwithoutPWM(void){
 80034ee:	b580      	push	{r7, lr}
 80034f0:	b082      	sub	sp, #8
 80034f2:	af00      	add	r7, sp, #0
  // we setup ABI with 2000 resolution but we dont use it, becuase we directly read
  // the angle through SPI. But we want to set this up so that we get the index pin
  // signal which we can probe.
  Settings1 settings1;
  settings1.raw = 0;
 80034f4:	2300      	movs	r3, #0
 80034f6:	80bb      	strh	r3, [r7, #4]
  settings1.values.factorySetting = 1;
 80034f8:	793b      	ldrb	r3, [r7, #4]
 80034fa:	f043 0301 	orr.w	r3, r3, #1
 80034fe:	713b      	strb	r3, [r7, #4]
  settings1.values.not_used = 0;
 8003500:	793b      	ldrb	r3, [r7, #4]
 8003502:	f36f 0341 	bfc	r3, #1, #1
 8003506:	713b      	strb	r3, [r7, #4]
  settings1.values.dir = 0;  // By definition A leads B for CW direction. for us seen from the front, rotating in a CW direction gives A leading B.
 8003508:	793b      	ldrb	r3, [r7, #4]
 800350a:	f36f 0382 	bfc	r3, #2, #1
 800350e:	713b      	strb	r3, [r7, #4]
  settings1.values.uvw_abi = 0; // 0-ABI with W pin as PWM, 1-UVW with I pin as PWM
 8003510:	793b      	ldrb	r3, [r7, #4]
 8003512:	f36f 03c3 	bfc	r3, #3, #1
 8003516:	713b      	strb	r3, [r7, #4]
  settings1.values.daecdis = 0;
 8003518:	793b      	ldrb	r3, [r7, #4]
 800351a:	f36f 1304 	bfc	r3, #4, #1
 800351e:	713b      	strb	r3, [r7, #4]
  settings1.values.abibin = 0; // ABI-decimal or binary.
 8003520:	793b      	ldrb	r3, [r7, #4]
 8003522:	f36f 1345 	bfc	r3, #5, #1
 8003526:	713b      	strb	r3, [r7, #4]
  settings1.values.dataselect = 0; //1 is cordic Angle, 0 is dynamic angle compensation. Remove for very slow speeds.
 8003528:	793b      	ldrb	r3, [r7, #4]
 800352a:	f36f 1386 	bfc	r3, #6, #1
 800352e:	713b      	strb	r3, [r7, #4]
  settings1.values.pwmon = 0; //sets pwm on W pin if 1.
 8003530:	793b      	ldrb	r3, [r7, #4]
 8003532:	f36f 13c7 	bfc	r3, #7, #1
 8003536:	713b      	strb	r3, [r7, #4]

  AS5047_writeRegister(SETTINGS1_REG, settings1.raw);
 8003538:	88bb      	ldrh	r3, [r7, #4]
 800353a:	4619      	mov	r1, r3
 800353c:	2018      	movs	r0, #24
 800353e:	f7ff fdf4 	bl	800312a <AS5047_writeRegister>

  Settings2 settings2;
  settings2.raw = 0;
 8003542:	2300      	movs	r3, #0
 8003544:	703b      	strb	r3, [r7, #0]
  settings2.values.abires = 0; // with abibin sets the resolution
 8003546:	783b      	ldrb	r3, [r7, #0]
 8003548:	f36f 1347 	bfc	r3, #5, #3
 800354c:	703b      	strb	r3, [r7, #0]
  settings2.values.uvwpp = 4; // 5 pole pairs - 0b100
 800354e:	783b      	ldrb	r3, [r7, #0]
 8003550:	2204      	movs	r2, #4
 8003552:	f362 0302 	bfi	r3, r2, #0, #3
 8003556:	703b      	strb	r3, [r7, #0]
  AS5047_writeRegister(SETTINGS2_REG,settings2.raw);
 8003558:	783b      	ldrb	r3, [r7, #0]
 800355a:	4619      	mov	r1, r3
 800355c:	2019      	movs	r0, #25
 800355e:	f7ff fde4 	bl	800312a <AS5047_writeRegister>
}
 8003562:	bf00      	nop
 8003564:	3708      	adds	r7, #8
 8003566:	46bd      	mov	sp, r7
 8003568:	bd80      	pop	{r7, pc}

0800356a <Check_ABI_SetCorrectly>:

uint8_t Check_ABI_SetCorrectly(Settings1 settings1, Settings2 settings2){
 800356a:	b480      	push	{r7}
 800356c:	b083      	sub	sp, #12
 800356e:	af00      	add	r7, sp, #0
 8003570:	80b8      	strh	r0, [r7, #4]
 8003572:	7039      	strb	r1, [r7, #0]
  if ((settings1.values.uvw_abi == 0) && (settings1.values.abibin == 0 ) && (settings1.values.pwmon == 0 ) && ( settings1.values.dir == 0)
 8003574:	793b      	ldrb	r3, [r7, #4]
 8003576:	f003 0308 	and.w	r3, r3, #8
 800357a:	b2db      	uxtb	r3, r3
 800357c:	2b00      	cmp	r3, #0
 800357e:	d11f      	bne.n	80035c0 <Check_ABI_SetCorrectly+0x56>
 8003580:	793b      	ldrb	r3, [r7, #4]
 8003582:	f003 0320 	and.w	r3, r3, #32
 8003586:	b2db      	uxtb	r3, r3
 8003588:	2b00      	cmp	r3, #0
 800358a:	d119      	bne.n	80035c0 <Check_ABI_SetCorrectly+0x56>
 800358c:	793b      	ldrb	r3, [r7, #4]
 800358e:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 8003592:	b2db      	uxtb	r3, r3
 8003594:	2b00      	cmp	r3, #0
 8003596:	d113      	bne.n	80035c0 <Check_ABI_SetCorrectly+0x56>
 8003598:	793b      	ldrb	r3, [r7, #4]
 800359a:	f003 0304 	and.w	r3, r3, #4
 800359e:	b2db      	uxtb	r3, r3
 80035a0:	2b00      	cmp	r3, #0
 80035a2:	d10d      	bne.n	80035c0 <Check_ABI_SetCorrectly+0x56>
      && (settings2.values.abires == 0)  && ( settings2.values.uvwpp == 4)){
 80035a4:	783b      	ldrb	r3, [r7, #0]
 80035a6:	f023 031f 	bic.w	r3, r3, #31
 80035aa:	b2db      	uxtb	r3, r3
 80035ac:	2b00      	cmp	r3, #0
 80035ae:	d107      	bne.n	80035c0 <Check_ABI_SetCorrectly+0x56>
 80035b0:	783b      	ldrb	r3, [r7, #0]
 80035b2:	f003 0307 	and.w	r3, r3, #7
 80035b6:	b2db      	uxtb	r3, r3
 80035b8:	2b04      	cmp	r3, #4
 80035ba:	d101      	bne.n	80035c0 <Check_ABI_SetCorrectly+0x56>
        return 1;
 80035bc:	2301      	movs	r3, #1
 80035be:	e000      	b.n	80035c2 <Check_ABI_SetCorrectly+0x58>
      }
  else{
    return 0;
 80035c0:	2300      	movs	r3, #0
  }
}
 80035c2:	4618      	mov	r0, r3
 80035c4:	370c      	adds	r7, #12
 80035c6:	46bd      	mov	sp, r7
 80035c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035cc:	4770      	bx	lr

080035ce <Encoder_setup>:


uint8_t Encoder_setup(void){
 80035ce:	b580      	push	{r7, lr}
 80035d0:	b082      	sub	sp, #8
 80035d2:	af00      	add	r7, sp, #0

	Settings1 settings1Reg;
	Settings2 settings2Reg;
	uint8_t abiSettingsOK;

	SetupABIwithoutPWM();
 80035d4:	f7ff ff8b 	bl	80034ee <SetupABIwithoutPWM>
	settings1Reg.raw = AS5047_SPI_Read(SETTINGS1_READ_FRAME, 0);
 80035d8:	2100      	movs	r1, #0
 80035da:	f24c 0018 	movw	r0, #49176	@ 0xc018
 80035de:	f7ff fd13 	bl	8003008 <AS5047_SPI_Read>
 80035e2:	4603      	mov	r3, r0
 80035e4:	80bb      	strh	r3, [r7, #4]
	settings2Reg.raw = AS5047_SPI_Read(SETTINGS2_READ_FRAME, 0);
 80035e6:	2100      	movs	r1, #0
 80035e8:	f244 0019 	movw	r0, #16409	@ 0x4019
 80035ec:	f7ff fd0c 	bl	8003008 <AS5047_SPI_Read>
 80035f0:	4603      	mov	r3, r0
 80035f2:	b2db      	uxtb	r3, r3
 80035f4:	703b      	strb	r3, [r7, #0]
	abiSettingsOK = Check_ABI_SetCorrectly(settings1Reg,settings2Reg);
 80035f6:	7839      	ldrb	r1, [r7, #0]
 80035f8:	88b8      	ldrh	r0, [r7, #4]
 80035fa:	f7ff ffb6 	bl	800356a <Check_ABI_SetCorrectly>
 80035fe:	4603      	mov	r3, r0
 8003600:	71fb      	strb	r3, [r7, #7]
	return abiSettingsOK;
 8003602:	79fb      	ldrb	r3, [r7, #7]
}
 8003604:	4618      	mov	r0, r3
 8003606:	3708      	adds	r7, #8
 8003608:	46bd      	mov	sp, r7
 800360a:	bd80      	pop	{r7, pc}

0800360c <Encoder_updateZeroPosition>:

uint8_t Encoder_updateZeroPosition(uint16_t zeroValue){
 800360c:	b580      	push	{r7, lr}
 800360e:	b084      	sub	sp, #16
 8003610:	af00      	add	r7, sp, #0
 8003612:	4603      	mov	r3, r0
 8003614:	80fb      	strh	r3, [r7, #6]
	uint16_t zeroPos;
	zeroPos = AS5047_ReadZeroValue();
 8003616:	f7ff fdca 	bl	80031ae <AS5047_ReadZeroValue>
 800361a:	4603      	mov	r3, r0
 800361c:	81fb      	strh	r3, [r7, #14]
	if (zeroPos != zeroValue){
 800361e:	89fa      	ldrh	r2, [r7, #14]
 8003620:	88fb      	ldrh	r3, [r7, #6]
 8003622:	429a      	cmp	r2, r3
 8003624:	d00f      	beq.n	8003646 <Encoder_updateZeroPosition+0x3a>
		AS5047_WriteZeroValue(zeroValue); //function must check if it got back the same value it wrote.
 8003626:	88fb      	ldrh	r3, [r7, #6]
 8003628:	4618      	mov	r0, r3
 800362a:	f7ff fddf 	bl	80031ec <AS5047_WriteZeroValue>
		zeroPos = AS5047_ReadZeroValue(); //to check if this value is same as what we wrote
 800362e:	f7ff fdbe 	bl	80031ae <AS5047_ReadZeroValue>
 8003632:	4603      	mov	r3, r0
 8003634:	81fb      	strh	r3, [r7, #14]
		if (zeroPos != zeroValue){
 8003636:	89fa      	ldrh	r2, [r7, #14]
 8003638:	88fb      	ldrh	r3, [r7, #6]
 800363a:	429a      	cmp	r2, r3
 800363c:	d001      	beq.n	8003642 <Encoder_updateZeroPosition+0x36>
			return 0;
 800363e:	2300      	movs	r3, #0
 8003640:	e002      	b.n	8003648 <Encoder_updateZeroPosition+0x3c>
		}else{
			return 1;
 8003642:	2301      	movs	r3, #1
 8003644:	e000      	b.n	8003648 <Encoder_updateZeroPosition+0x3c>
		}
	  }
	return 1;
 8003646:	2301      	movs	r3, #1
}
 8003648:	4618      	mov	r0, r3
 800364a:	3710      	adds	r7, #16
 800364c:	46bd      	mov	sp, r7
 800364e:	bd80      	pop	{r7, pc}

08003650 <Encoder_enableMagErrors>:


uint8_t Encoder_enableMagErrors(void){
 8003650:	b580      	push	{r7, lr}
 8003652:	b082      	sub	sp, #8
 8003654:	af00      	add	r7, sp, #0
	ZPOSL_frame ZPOS_L;
	ZPOS_L.raw = AS5047_readRegister(ZPOSL_REG,0);
 8003656:	2100      	movs	r1, #0
 8003658:	2017      	movs	r0, #23
 800365a:	f7ff fd39 	bl	80030d0 <AS5047_readRegister>
 800365e:	4603      	mov	r3, r0
 8003660:	b2db      	uxtb	r3, r3
 8003662:	713b      	strb	r3, [r7, #4]
	if ((ZPOS_L.values.comp_h_error == 0 ) || (ZPOS_L.values.comp_l_error == 0)){
 8003664:	793b      	ldrb	r3, [r7, #4]
 8003666:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 800366a:	b2db      	uxtb	r3, r3
 800366c:	2b00      	cmp	r3, #0
 800366e:	d005      	beq.n	800367c <Encoder_enableMagErrors+0x2c>
 8003670:	793b      	ldrb	r3, [r7, #4]
 8003672:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003676:	b2db      	uxtb	r3, r3
 8003678:	2b00      	cmp	r3, #0
 800367a:	d125      	bne.n	80036c8 <Encoder_enableMagErrors+0x78>
		ZPOS_L.values.comp_h_error = 1;
 800367c:	793b      	ldrb	r3, [r7, #4]
 800367e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003682:	713b      	strb	r3, [r7, #4]
		ZPOS_L.values.comp_l_error = 1;
 8003684:	793b      	ldrb	r3, [r7, #4]
 8003686:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800368a:	713b      	strb	r3, [r7, #4]
		AS5047_writeRegister(ZPOSL_REG, ZPOS_L.raw);
 800368c:	793b      	ldrb	r3, [r7, #4]
 800368e:	4619      	mov	r1, r3
 8003690:	2017      	movs	r0, #23
 8003692:	f7ff fd4a 	bl	800312a <AS5047_writeRegister>

		//check if it was written properly
		ZPOS_L.raw = 0;
 8003696:	2300      	movs	r3, #0
 8003698:	713b      	strb	r3, [r7, #4]
		ZPOS_L.raw = AS5047_readRegister(ZPOSL_REG,0);
 800369a:	2100      	movs	r1, #0
 800369c:	2017      	movs	r0, #23
 800369e:	f7ff fd17 	bl	80030d0 <AS5047_readRegister>
 80036a2:	4603      	mov	r3, r0
 80036a4:	b2db      	uxtb	r3, r3
 80036a6:	713b      	strb	r3, [r7, #4]
		if ((ZPOS_L.values.comp_h_error == 0 ) || (ZPOS_L.values.comp_l_error == 0)){
 80036a8:	793b      	ldrb	r3, [r7, #4]
 80036aa:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 80036ae:	b2db      	uxtb	r3, r3
 80036b0:	2b00      	cmp	r3, #0
 80036b2:	d005      	beq.n	80036c0 <Encoder_enableMagErrors+0x70>
 80036b4:	793b      	ldrb	r3, [r7, #4]
 80036b6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80036ba:	b2db      	uxtb	r3, r3
 80036bc:	2b00      	cmp	r3, #0
 80036be:	d101      	bne.n	80036c4 <Encoder_enableMagErrors+0x74>
			return 0;
 80036c0:	2300      	movs	r3, #0
 80036c2:	e002      	b.n	80036ca <Encoder_enableMagErrors+0x7a>
		}else{
			return 1;
 80036c4:	2301      	movs	r3, #1
 80036c6:	e000      	b.n	80036ca <Encoder_enableMagErrors+0x7a>
		}
	}
	return 1;
 80036c8:	2301      	movs	r3, #1
}
 80036ca:	4618      	mov	r0, r3
 80036cc:	3708      	adds	r7, #8
 80036ce:	46bd      	mov	sp, r7
 80036d0:	bd80      	pop	{r7, pc}

080036d2 <Encoder_get16BitMechAngle_Single>:
	angleData =  angle.values.cordicang;
	angleMech = angleData*SPI_RDNG_TO_MECH_ANGLE;
	return angleMech;
}

uint16_t Encoder_get16BitMechAngle_Single(uint8_t continuous){
 80036d2:	b580      	push	{r7, lr}
 80036d4:	b084      	sub	sp, #16
 80036d6:	af00      	add	r7, sp, #0
 80036d8:	4603      	mov	r3, r0
 80036da:	71fb      	strb	r3, [r7, #7]
	ReadDataFrame readdataframe;
	Angle angle;
	readdataframe.raw = AS5047_SPI_Read(ANGLE_READ_FRAME,continuous);
 80036dc:	79fb      	ldrb	r3, [r7, #7]
 80036de:	4619      	mov	r1, r3
 80036e0:	f647 70fe 	movw	r0, #32766	@ 0x7ffe
 80036e4:	f7ff fc90 	bl	8003008 <AS5047_SPI_Read>
 80036e8:	4603      	mov	r3, r0
 80036ea:	81bb      	strh	r3, [r7, #12]
	angle.raw = readdataframe.values.data;
 80036ec:	89bb      	ldrh	r3, [r7, #12]
 80036ee:	f3c3 030d 	ubfx	r3, r3, #0, #14
 80036f2:	b29b      	uxth	r3, r3
 80036f4:	813b      	strh	r3, [r7, #8]
	return angle.values.cordicang;
 80036f6:	893b      	ldrh	r3, [r7, #8]
 80036f8:	f3c3 030d 	ubfx	r3, r3, #0, #14
 80036fc:	b29b      	uxth	r3, r3
}
 80036fe:	4618      	mov	r0, r3
 8003700:	3710      	adds	r7, #16
 8003702:	46bd      	mov	sp, r7
 8003704:	bd80      	pop	{r7, pc}
	...

08003708 <FOC_calcSVPWM>:
 */

#include "FOC.h"


void FOC_calcSVPWM(SVPWM *svpwm,float m, float encoderAngle,float deltaTovoltageAngle){
 8003708:	b5f0      	push	{r4, r5, r6, r7, lr}
 800370a:	b093      	sub	sp, #76	@ 0x4c
 800370c:	af08      	add	r7, sp, #32
 800370e:	6178      	str	r0, [r7, #20]
 8003710:	ed87 0a04 	vstr	s0, [r7, #16]
 8003714:	edc7 0a03 	vstr	s1, [r7, #12]
 8003718:	ed87 1a02 	vstr	s2, [r7, #8]
	// encoder angle should not go above 2Pi
	svpwm->encoderAngle = encoderAngle;
 800371c:	697b      	ldr	r3, [r7, #20]
 800371e:	68fa      	ldr	r2, [r7, #12]
 8003720:	609a      	str	r2, [r3, #8]
	svpwm->voltageAngle = encoderAngle + deltaTovoltageAngle;
 8003722:	ed97 7a03 	vldr	s14, [r7, #12]
 8003726:	edd7 7a02 	vldr	s15, [r7, #8]
 800372a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800372e:	697b      	ldr	r3, [r7, #20]
 8003730:	edc3 7a03 	vstr	s15, [r3, #12]
	if (svpwm->voltageAngle > TWO_PI_F){
 8003734:	697b      	ldr	r3, [r7, #20]
 8003736:	edd3 7a03 	vldr	s15, [r3, #12]
 800373a:	ed9f 7a95 	vldr	s14, [pc, #596]	@ 8003990 <FOC_calcSVPWM+0x288>
 800373e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003742:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003746:	dd0a      	ble.n	800375e <FOC_calcSVPWM+0x56>
		svpwm->voltageAngle = svpwm->voltageAngle - TWO_PI_F;
 8003748:	697b      	ldr	r3, [r7, #20]
 800374a:	edd3 7a03 	vldr	s15, [r3, #12]
 800374e:	ed9f 7a90 	vldr	s14, [pc, #576]	@ 8003990 <FOC_calcSVPWM+0x288>
 8003752:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8003756:	697b      	ldr	r3, [r7, #20]
 8003758:	edc3 7a03 	vstr	s15, [r3, #12]
 800375c:	e011      	b.n	8003782 <FOC_calcSVPWM+0x7a>
	}else if (svpwm->voltageAngle < 0){
 800375e:	697b      	ldr	r3, [r7, #20]
 8003760:	edd3 7a03 	vldr	s15, [r3, #12]
 8003764:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8003768:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800376c:	d509      	bpl.n	8003782 <FOC_calcSVPWM+0x7a>
		svpwm->voltageAngle = svpwm->voltageAngle + TWO_PI_F;
 800376e:	697b      	ldr	r3, [r7, #20]
 8003770:	edd3 7a03 	vldr	s15, [r3, #12]
 8003774:	ed9f 7a86 	vldr	s14, [pc, #536]	@ 8003990 <FOC_calcSVPWM+0x288>
 8003778:	ee77 7a87 	vadd.f32	s15, s15, s14
 800377c:	697b      	ldr	r3, [r7, #20]
 800377e:	edc3 7a03 	vstr	s15, [r3, #12]
	}else{
		//do nothing
	}

	svpwm->sector = (uint8_t)(svpwm->voltageAngle/PI_BY_3F);
 8003782:	697b      	ldr	r3, [r7, #20]
 8003784:	ed93 7a03 	vldr	s14, [r3, #12]
 8003788:	eddf 6a82 	vldr	s13, [pc, #520]	@ 8003994 <FOC_calcSVPWM+0x28c>
 800378c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8003790:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003794:	edc7 7a01 	vstr	s15, [r7, #4]
 8003798:	793b      	ldrb	r3, [r7, #4]
 800379a:	b2da      	uxtb	r2, r3
 800379c:	697b      	ldr	r3, [r7, #20]
 800379e:	741a      	strb	r2, [r3, #16]
	svpwm->sectorAngle = svpwm->voltageAngle - (svpwm->sector * PI_BY_3F);
 80037a0:	697b      	ldr	r3, [r7, #20]
 80037a2:	ed93 7a03 	vldr	s14, [r3, #12]
 80037a6:	697b      	ldr	r3, [r7, #20]
 80037a8:	7c1b      	ldrb	r3, [r3, #16]
 80037aa:	ee07 3a90 	vmov	s15, r3
 80037ae:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80037b2:	eddf 6a78 	vldr	s13, [pc, #480]	@ 8003994 <FOC_calcSVPWM+0x28c>
 80037b6:	ee67 7aa6 	vmul.f32	s15, s15, s13
 80037ba:	ee77 7a67 	vsub.f32	s15, s14, s15
 80037be:	697b      	ldr	r3, [r7, #20]
 80037c0:	edc3 7a05 	vstr	s15, [r3, #20]
	float sixtyMinusTheta = PI_BY_3F - svpwm->sectorAngle ;
 80037c4:	697b      	ldr	r3, [r7, #20]
 80037c6:	edd3 7a05 	vldr	s15, [r3, #20]
 80037ca:	ed9f 7a72 	vldr	s14, [pc, #456]	@ 8003994 <FOC_calcSVPWM+0x28c>
 80037ce:	ee77 7a67 	vsub.f32	s15, s14, s15
 80037d2:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24

	float sinTheta,sinSixyMinusTheta;

	RunCordic_TwoSines(hcordic,svpwm->sectorAngle,sixtyMinusTheta,&sinTheta,&sinSixyMinusTheta);
 80037d6:	697b      	ldr	r3, [r7, #20]
 80037d8:	edd3 7a05 	vldr	s15, [r3, #20]
 80037dc:	4e6e      	ldr	r6, [pc, #440]	@ (8003998 <FOC_calcSVPWM+0x290>)
 80037de:	f107 031c 	add.w	r3, r7, #28
 80037e2:	9307      	str	r3, [sp, #28]
 80037e4:	f107 0320 	add.w	r3, r7, #32
 80037e8:	9306      	str	r3, [sp, #24]
 80037ea:	466d      	mov	r5, sp
 80037ec:	f106 0410 	add.w	r4, r6, #16
 80037f0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80037f2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80037f4:	e894 0003 	ldmia.w	r4, {r0, r1}
 80037f8:	e885 0003 	stmia.w	r5, {r0, r1}
 80037fc:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 8003800:	edd7 0a09 	vldr	s1, [r7, #36]	@ 0x24
 8003804:	eeb0 0a67 	vmov.f32	s0, s15
 8003808:	f7ff fdd8 	bl	80033bc <RunCordic_TwoSines>
	svpwm->PV1 = (uint16_t)(m * TIMER1_ARR * sinSixyMinusTheta);
 800380c:	edd7 7a04 	vldr	s15, [r7, #16]
 8003810:	ed9f 7a62 	vldr	s14, [pc, #392]	@ 800399c <FOC_calcSVPWM+0x294>
 8003814:	ee27 7a87 	vmul.f32	s14, s15, s14
 8003818:	edd7 7a07 	vldr	s15, [r7, #28]
 800381c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003820:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003824:	ee17 3a90 	vmov	r3, s15
 8003828:	b29a      	uxth	r2, r3
 800382a:	697b      	ldr	r3, [r7, #20]
 800382c:	831a      	strh	r2, [r3, #24]
	svpwm->PV2 = (uint16_t)(m * TIMER1_ARR * sinTheta);
 800382e:	edd7 7a04 	vldr	s15, [r7, #16]
 8003832:	ed9f 7a5a 	vldr	s14, [pc, #360]	@ 800399c <FOC_calcSVPWM+0x294>
 8003836:	ee27 7a87 	vmul.f32	s14, s15, s14
 800383a:	edd7 7a08 	vldr	s15, [r7, #32]
 800383e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003842:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003846:	ee17 3a90 	vmov	r3, s15
 800384a:	b29a      	uxth	r2, r3
 800384c:	697b      	ldr	r3, [r7, #20]
 800384e:	835a      	strh	r2, [r3, #26]
	svpwm->null = TIMER1_ARR - svpwm->PV1 - svpwm->PV2;
 8003850:	697b      	ldr	r3, [r7, #20]
 8003852:	8b1b      	ldrh	r3, [r3, #24]
 8003854:	ee07 3a90 	vmov	s15, r3
 8003858:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800385c:	ed9f 7a4f 	vldr	s14, [pc, #316]	@ 800399c <FOC_calcSVPWM+0x294>
 8003860:	ee37 7a67 	vsub.f32	s14, s14, s15
 8003864:	697b      	ldr	r3, [r7, #20]
 8003866:	8b5b      	ldrh	r3, [r3, #26]
 8003868:	ee07 3a90 	vmov	s15, r3
 800386c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003870:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003874:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003878:	ee17 3a90 	vmov	r3, s15
 800387c:	b29a      	uxth	r2, r3
 800387e:	697b      	ldr	r3, [r7, #20]
 8003880:	839a      	strh	r2, [r3, #28]

	if (svpwm->sector == 0){
 8003882:	697b      	ldr	r3, [r7, #20]
 8003884:	7c1b      	ldrb	r3, [r3, #16]
 8003886:	2b00      	cmp	r3, #0
 8003888:	d116      	bne.n	80038b8 <FOC_calcSVPWM+0x1b0>
			// U4 is pv1, U6 is PV2
			//100, then 110
			svpwm->CCR1 = svpwm->null/2;
 800388a:	697b      	ldr	r3, [r7, #20]
 800388c:	8b9b      	ldrh	r3, [r3, #28]
 800388e:	085b      	lsrs	r3, r3, #1
 8003890:	b29a      	uxth	r2, r3
 8003892:	697b      	ldr	r3, [r7, #20]
 8003894:	83da      	strh	r2, [r3, #30]
			svpwm->CCR2 = svpwm->CCR1 + svpwm->PV1;
 8003896:	697b      	ldr	r3, [r7, #20]
 8003898:	8bda      	ldrh	r2, [r3, #30]
 800389a:	697b      	ldr	r3, [r7, #20]
 800389c:	8b1b      	ldrh	r3, [r3, #24]
 800389e:	4413      	add	r3, r2
 80038a0:	b29a      	uxth	r2, r3
 80038a2:	697b      	ldr	r3, [r7, #20]
 80038a4:	841a      	strh	r2, [r3, #32]
			svpwm->CCR3 = svpwm->CCR2 + svpwm->PV2;
 80038a6:	697b      	ldr	r3, [r7, #20]
 80038a8:	8c1a      	ldrh	r2, [r3, #32]
 80038aa:	697b      	ldr	r3, [r7, #20]
 80038ac:	8b5b      	ldrh	r3, [r3, #26]
 80038ae:	4413      	add	r3, r2
 80038b0:	b29a      	uxth	r2, r3
 80038b2:	697b      	ldr	r3, [r7, #20]
 80038b4:	845a      	strh	r2, [r3, #34]	@ 0x22
			//CCR2 = PV2,CCR3 = PV1
			svpwm->CCR1 = svpwm->null/2;
			svpwm->CCR3 = svpwm->CCR1 + svpwm->PV2;
			svpwm->CCR2 = svpwm->CCR3 + svpwm->PV1;
		}
}
 80038b6:	e08d      	b.n	80039d4 <FOC_calcSVPWM+0x2cc>
		}else if (svpwm->sector == 1){
 80038b8:	697b      	ldr	r3, [r7, #20]
 80038ba:	7c1b      	ldrb	r3, [r3, #16]
 80038bc:	2b01      	cmp	r3, #1
 80038be:	d116      	bne.n	80038ee <FOC_calcSVPWM+0x1e6>
			svpwm->CCR2 = svpwm->null/2;
 80038c0:	697b      	ldr	r3, [r7, #20]
 80038c2:	8b9b      	ldrh	r3, [r3, #28]
 80038c4:	085b      	lsrs	r3, r3, #1
 80038c6:	b29a      	uxth	r2, r3
 80038c8:	697b      	ldr	r3, [r7, #20]
 80038ca:	841a      	strh	r2, [r3, #32]
			svpwm->CCR1 = svpwm->CCR2 + svpwm->PV2;
 80038cc:	697b      	ldr	r3, [r7, #20]
 80038ce:	8c1a      	ldrh	r2, [r3, #32]
 80038d0:	697b      	ldr	r3, [r7, #20]
 80038d2:	8b5b      	ldrh	r3, [r3, #26]
 80038d4:	4413      	add	r3, r2
 80038d6:	b29a      	uxth	r2, r3
 80038d8:	697b      	ldr	r3, [r7, #20]
 80038da:	83da      	strh	r2, [r3, #30]
			svpwm->CCR3 = svpwm->CCR1 + svpwm->PV1;
 80038dc:	697b      	ldr	r3, [r7, #20]
 80038de:	8bda      	ldrh	r2, [r3, #30]
 80038e0:	697b      	ldr	r3, [r7, #20]
 80038e2:	8b1b      	ldrh	r3, [r3, #24]
 80038e4:	4413      	add	r3, r2
 80038e6:	b29a      	uxth	r2, r3
 80038e8:	697b      	ldr	r3, [r7, #20]
 80038ea:	845a      	strh	r2, [r3, #34]	@ 0x22
}
 80038ec:	e072      	b.n	80039d4 <FOC_calcSVPWM+0x2cc>
		}else if (svpwm->sector == 2){
 80038ee:	697b      	ldr	r3, [r7, #20]
 80038f0:	7c1b      	ldrb	r3, [r3, #16]
 80038f2:	2b02      	cmp	r3, #2
 80038f4:	d116      	bne.n	8003924 <FOC_calcSVPWM+0x21c>
			svpwm->CCR2 = svpwm->null/2;
 80038f6:	697b      	ldr	r3, [r7, #20]
 80038f8:	8b9b      	ldrh	r3, [r3, #28]
 80038fa:	085b      	lsrs	r3, r3, #1
 80038fc:	b29a      	uxth	r2, r3
 80038fe:	697b      	ldr	r3, [r7, #20]
 8003900:	841a      	strh	r2, [r3, #32]
			svpwm->CCR3 = svpwm->CCR2 + svpwm->PV1;
 8003902:	697b      	ldr	r3, [r7, #20]
 8003904:	8c1a      	ldrh	r2, [r3, #32]
 8003906:	697b      	ldr	r3, [r7, #20]
 8003908:	8b1b      	ldrh	r3, [r3, #24]
 800390a:	4413      	add	r3, r2
 800390c:	b29a      	uxth	r2, r3
 800390e:	697b      	ldr	r3, [r7, #20]
 8003910:	845a      	strh	r2, [r3, #34]	@ 0x22
			svpwm->CCR1 = svpwm->CCR3 + svpwm->PV2;
 8003912:	697b      	ldr	r3, [r7, #20]
 8003914:	8c5a      	ldrh	r2, [r3, #34]	@ 0x22
 8003916:	697b      	ldr	r3, [r7, #20]
 8003918:	8b5b      	ldrh	r3, [r3, #26]
 800391a:	4413      	add	r3, r2
 800391c:	b29a      	uxth	r2, r3
 800391e:	697b      	ldr	r3, [r7, #20]
 8003920:	83da      	strh	r2, [r3, #30]
}
 8003922:	e057      	b.n	80039d4 <FOC_calcSVPWM+0x2cc>
		}else if (svpwm->sector == 3){
 8003924:	697b      	ldr	r3, [r7, #20]
 8003926:	7c1b      	ldrb	r3, [r3, #16]
 8003928:	2b03      	cmp	r3, #3
 800392a:	d116      	bne.n	800395a <FOC_calcSVPWM+0x252>
			svpwm->CCR3 = svpwm->null/2;
 800392c:	697b      	ldr	r3, [r7, #20]
 800392e:	8b9b      	ldrh	r3, [r3, #28]
 8003930:	085b      	lsrs	r3, r3, #1
 8003932:	b29a      	uxth	r2, r3
 8003934:	697b      	ldr	r3, [r7, #20]
 8003936:	845a      	strh	r2, [r3, #34]	@ 0x22
			svpwm->CCR2 = svpwm->CCR3 + svpwm->PV2;
 8003938:	697b      	ldr	r3, [r7, #20]
 800393a:	8c5a      	ldrh	r2, [r3, #34]	@ 0x22
 800393c:	697b      	ldr	r3, [r7, #20]
 800393e:	8b5b      	ldrh	r3, [r3, #26]
 8003940:	4413      	add	r3, r2
 8003942:	b29a      	uxth	r2, r3
 8003944:	697b      	ldr	r3, [r7, #20]
 8003946:	841a      	strh	r2, [r3, #32]
			svpwm->CCR1 = svpwm->CCR2 + svpwm->PV1;
 8003948:	697b      	ldr	r3, [r7, #20]
 800394a:	8c1a      	ldrh	r2, [r3, #32]
 800394c:	697b      	ldr	r3, [r7, #20]
 800394e:	8b1b      	ldrh	r3, [r3, #24]
 8003950:	4413      	add	r3, r2
 8003952:	b29a      	uxth	r2, r3
 8003954:	697b      	ldr	r3, [r7, #20]
 8003956:	83da      	strh	r2, [r3, #30]
}
 8003958:	e03c      	b.n	80039d4 <FOC_calcSVPWM+0x2cc>
		}else if (svpwm->sector == 4){
 800395a:	697b      	ldr	r3, [r7, #20]
 800395c:	7c1b      	ldrb	r3, [r3, #16]
 800395e:	2b04      	cmp	r3, #4
 8003960:	d11e      	bne.n	80039a0 <FOC_calcSVPWM+0x298>
			svpwm->CCR3 = svpwm->null/2;
 8003962:	697b      	ldr	r3, [r7, #20]
 8003964:	8b9b      	ldrh	r3, [r3, #28]
 8003966:	085b      	lsrs	r3, r3, #1
 8003968:	b29a      	uxth	r2, r3
 800396a:	697b      	ldr	r3, [r7, #20]
 800396c:	845a      	strh	r2, [r3, #34]	@ 0x22
			svpwm->CCR1 = svpwm->CCR3 + svpwm->PV1;
 800396e:	697b      	ldr	r3, [r7, #20]
 8003970:	8c5a      	ldrh	r2, [r3, #34]	@ 0x22
 8003972:	697b      	ldr	r3, [r7, #20]
 8003974:	8b1b      	ldrh	r3, [r3, #24]
 8003976:	4413      	add	r3, r2
 8003978:	b29a      	uxth	r2, r3
 800397a:	697b      	ldr	r3, [r7, #20]
 800397c:	83da      	strh	r2, [r3, #30]
			svpwm->CCR2 = svpwm->CCR1 + svpwm->PV2;
 800397e:	697b      	ldr	r3, [r7, #20]
 8003980:	8bda      	ldrh	r2, [r3, #30]
 8003982:	697b      	ldr	r3, [r7, #20]
 8003984:	8b5b      	ldrh	r3, [r3, #26]
 8003986:	4413      	add	r3, r2
 8003988:	b29a      	uxth	r2, r3
 800398a:	697b      	ldr	r3, [r7, #20]
 800398c:	841a      	strh	r2, [r3, #32]
}
 800398e:	e021      	b.n	80039d4 <FOC_calcSVPWM+0x2cc>
 8003990:	40c90fda 	.word	0x40c90fda
 8003994:	3f860a92 	.word	0x3f860a92
 8003998:	20000594 	.word	0x20000594
 800399c:	449c2000 	.word	0x449c2000
		}else if (svpwm->sector == 5){
 80039a0:	697b      	ldr	r3, [r7, #20]
 80039a2:	7c1b      	ldrb	r3, [r3, #16]
 80039a4:	2b05      	cmp	r3, #5
 80039a6:	d115      	bne.n	80039d4 <FOC_calcSVPWM+0x2cc>
			svpwm->CCR1 = svpwm->null/2;
 80039a8:	697b      	ldr	r3, [r7, #20]
 80039aa:	8b9b      	ldrh	r3, [r3, #28]
 80039ac:	085b      	lsrs	r3, r3, #1
 80039ae:	b29a      	uxth	r2, r3
 80039b0:	697b      	ldr	r3, [r7, #20]
 80039b2:	83da      	strh	r2, [r3, #30]
			svpwm->CCR3 = svpwm->CCR1 + svpwm->PV2;
 80039b4:	697b      	ldr	r3, [r7, #20]
 80039b6:	8bda      	ldrh	r2, [r3, #30]
 80039b8:	697b      	ldr	r3, [r7, #20]
 80039ba:	8b5b      	ldrh	r3, [r3, #26]
 80039bc:	4413      	add	r3, r2
 80039be:	b29a      	uxth	r2, r3
 80039c0:	697b      	ldr	r3, [r7, #20]
 80039c2:	845a      	strh	r2, [r3, #34]	@ 0x22
			svpwm->CCR2 = svpwm->CCR3 + svpwm->PV1;
 80039c4:	697b      	ldr	r3, [r7, #20]
 80039c6:	8c5a      	ldrh	r2, [r3, #34]	@ 0x22
 80039c8:	697b      	ldr	r3, [r7, #20]
 80039ca:	8b1b      	ldrh	r3, [r3, #24]
 80039cc:	4413      	add	r3, r2
 80039ce:	b29a      	uxth	r2, r3
 80039d0:	697b      	ldr	r3, [r7, #20]
 80039d2:	841a      	strh	r2, [r3, #32]
}
 80039d4:	bf00      	nop
 80039d6:	372c      	adds	r7, #44	@ 0x2c
 80039d8:	46bd      	mov	sp, r7
 80039da:	bdf0      	pop	{r4, r5, r6, r7, pc}

080039dc <FOC_applyPWM>:

void FOC_applyPWM(SVPWM *foc,uint8_t DT_compensation,uint8_t reversePhases){
 80039dc:	b580      	push	{r7, lr}
 80039de:	b082      	sub	sp, #8
 80039e0:	af00      	add	r7, sp, #0
 80039e2:	6078      	str	r0, [r7, #4]
 80039e4:	460b      	mov	r3, r1
 80039e6:	70fb      	strb	r3, [r7, #3]
 80039e8:	4613      	mov	r3, r2
 80039ea:	70bb      	strb	r3, [r7, #2]
	htim1.Instance->CCR1 = fast_fminf(foc->CCR1 + DT_compensation,TIMER1_ARR);
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	8bdb      	ldrh	r3, [r3, #30]
 80039f0:	461a      	mov	r2, r3
 80039f2:	78fb      	ldrb	r3, [r7, #3]
 80039f4:	4413      	add	r3, r2
 80039f6:	ee07 3a90 	vmov	s15, r3
 80039fa:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80039fe:	eddf 0a3b 	vldr	s1, [pc, #236]	@ 8003aec <FOC_applyPWM+0x110>
 8003a02:	eeb0 0a67 	vmov.f32	s0, s15
 8003a06:	f000 fcc7 	bl	8004398 <fast_fminf>
 8003a0a:	eef0 7a40 	vmov.f32	s15, s0
 8003a0e:	4b38      	ldr	r3, [pc, #224]	@ (8003af0 <FOC_applyPWM+0x114>)
 8003a10:	681b      	ldr	r3, [r3, #0]
 8003a12:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003a16:	ee17 2a90 	vmov	r2, s15
 8003a1a:	635a      	str	r2, [r3, #52]	@ 0x34
	if (reversePhases==0){
 8003a1c:	78bb      	ldrb	r3, [r7, #2]
 8003a1e:	2b00      	cmp	r3, #0
 8003a20:	d130      	bne.n	8003a84 <FOC_applyPWM+0xa8>
		htim1.Instance->CCR2 = fast_fminf(foc->CCR2 + DT_compensation,TIMER1_ARR);
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	8c1b      	ldrh	r3, [r3, #32]
 8003a26:	461a      	mov	r2, r3
 8003a28:	78fb      	ldrb	r3, [r7, #3]
 8003a2a:	4413      	add	r3, r2
 8003a2c:	ee07 3a90 	vmov	s15, r3
 8003a30:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003a34:	eddf 0a2d 	vldr	s1, [pc, #180]	@ 8003aec <FOC_applyPWM+0x110>
 8003a38:	eeb0 0a67 	vmov.f32	s0, s15
 8003a3c:	f000 fcac 	bl	8004398 <fast_fminf>
 8003a40:	eef0 7a40 	vmov.f32	s15, s0
 8003a44:	4b2a      	ldr	r3, [pc, #168]	@ (8003af0 <FOC_applyPWM+0x114>)
 8003a46:	681b      	ldr	r3, [r3, #0]
 8003a48:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003a4c:	ee17 2a90 	vmov	r2, s15
 8003a50:	639a      	str	r2, [r3, #56]	@ 0x38
		htim1.Instance->CCR3 = fast_fminf(foc->CCR3 + DT_compensation,TIMER1_ARR);
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	8c5b      	ldrh	r3, [r3, #34]	@ 0x22
 8003a56:	461a      	mov	r2, r3
 8003a58:	78fb      	ldrb	r3, [r7, #3]
 8003a5a:	4413      	add	r3, r2
 8003a5c:	ee07 3a90 	vmov	s15, r3
 8003a60:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003a64:	eddf 0a21 	vldr	s1, [pc, #132]	@ 8003aec <FOC_applyPWM+0x110>
 8003a68:	eeb0 0a67 	vmov.f32	s0, s15
 8003a6c:	f000 fc94 	bl	8004398 <fast_fminf>
 8003a70:	eef0 7a40 	vmov.f32	s15, s0
 8003a74:	4b1e      	ldr	r3, [pc, #120]	@ (8003af0 <FOC_applyPWM+0x114>)
 8003a76:	681b      	ldr	r3, [r3, #0]
 8003a78:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003a7c:	ee17 2a90 	vmov	r2, s15
 8003a80:	63da      	str	r2, [r3, #60]	@ 0x3c
	}else{
		htim1.Instance->CCR2 = fast_fminf(foc->CCR3 + DT_compensation,TIMER1_ARR);
		htim1.Instance->CCR3 = fast_fminf(foc->CCR2 + DT_compensation,TIMER1_ARR);
	}
}
 8003a82:	e02f      	b.n	8003ae4 <FOC_applyPWM+0x108>
		htim1.Instance->CCR2 = fast_fminf(foc->CCR3 + DT_compensation,TIMER1_ARR);
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	8c5b      	ldrh	r3, [r3, #34]	@ 0x22
 8003a88:	461a      	mov	r2, r3
 8003a8a:	78fb      	ldrb	r3, [r7, #3]
 8003a8c:	4413      	add	r3, r2
 8003a8e:	ee07 3a90 	vmov	s15, r3
 8003a92:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003a96:	eddf 0a15 	vldr	s1, [pc, #84]	@ 8003aec <FOC_applyPWM+0x110>
 8003a9a:	eeb0 0a67 	vmov.f32	s0, s15
 8003a9e:	f000 fc7b 	bl	8004398 <fast_fminf>
 8003aa2:	eef0 7a40 	vmov.f32	s15, s0
 8003aa6:	4b12      	ldr	r3, [pc, #72]	@ (8003af0 <FOC_applyPWM+0x114>)
 8003aa8:	681b      	ldr	r3, [r3, #0]
 8003aaa:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003aae:	ee17 2a90 	vmov	r2, s15
 8003ab2:	639a      	str	r2, [r3, #56]	@ 0x38
		htim1.Instance->CCR3 = fast_fminf(foc->CCR2 + DT_compensation,TIMER1_ARR);
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	8c1b      	ldrh	r3, [r3, #32]
 8003ab8:	461a      	mov	r2, r3
 8003aba:	78fb      	ldrb	r3, [r7, #3]
 8003abc:	4413      	add	r3, r2
 8003abe:	ee07 3a90 	vmov	s15, r3
 8003ac2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003ac6:	eddf 0a09 	vldr	s1, [pc, #36]	@ 8003aec <FOC_applyPWM+0x110>
 8003aca:	eeb0 0a67 	vmov.f32	s0, s15
 8003ace:	f000 fc63 	bl	8004398 <fast_fminf>
 8003ad2:	eef0 7a40 	vmov.f32	s15, s0
 8003ad6:	4b06      	ldr	r3, [pc, #24]	@ (8003af0 <FOC_applyPWM+0x114>)
 8003ad8:	681b      	ldr	r3, [r3, #0]
 8003ada:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003ade:	ee17 2a90 	vmov	r2, s15
 8003ae2:	63da      	str	r2, [r3, #60]	@ 0x3c
}
 8003ae4:	bf00      	nop
 8003ae6:	3708      	adds	r7, #8
 8003ae8:	46bd      	mov	sp, r7
 8003aea:	bd80      	pop	{r7, pc}
 8003aec:	449c2000 	.word	0x449c2000
 8003af0:	20000620 	.word	0x20000620

08003af4 <ZeroAllCCRs>:

void ZeroAllCCRs(SVPWM *svpwm){
 8003af4:	b480      	push	{r7}
 8003af6:	b083      	sub	sp, #12
 8003af8:	af00      	add	r7, sp, #0
 8003afa:	6078      	str	r0, [r7, #4]
	svpwm->CCR1 = 0;
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	2200      	movs	r2, #0
 8003b00:	83da      	strh	r2, [r3, #30]
	svpwm->CCR2 = 0;
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	2200      	movs	r2, #0
 8003b06:	841a      	strh	r2, [r3, #32]
	svpwm->CCR3 = 0;
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	2200      	movs	r2, #0
 8003b0c:	845a      	strh	r2, [r3, #34]	@ 0x22
}
 8003b0e:	bf00      	nop
 8003b10:	370c      	adds	r7, #12
 8003b12:	46bd      	mov	sp, r7
 8003b14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b18:	4770      	bx	lr

08003b1a <HW_statesInit>:



//------------------HW state struct functions-----------------

void HW_statesInit(HW *hw){
 8003b1a:	b480      	push	{r7}
 8003b1c:	b083      	sub	sp, #12
 8003b1e:	af00      	add	r7, sp, #0
 8003b20:	6078      	str	r0, [r7, #4]
	hw->tim1PwmHWOn = 0;
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	2200      	movs	r2, #0
 8003b26:	701a      	strb	r2, [r3, #0]
}
 8003b28:	bf00      	nop
 8003b2a:	370c      	adds	r7, #12
 8003b2c:	46bd      	mov	sp, r7
 8003b2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b32:	4770      	bx	lr

08003b34 <StartAllPWM>:


void StartAllPWM(HW *hw){
 8003b34:	b580      	push	{r7, lr}
 8003b36:	b082      	sub	sp, #8
 8003b38:	af00      	add	r7, sp, #0
 8003b3a:	6078      	str	r0, [r7, #4]
	if (hw->tim1PwmHWOn == 0){
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	781b      	ldrb	r3, [r3, #0]
 8003b40:	2b00      	cmp	r3, #0
 8003b42:	d126      	bne.n	8003b92 <StartAllPWM+0x5e>
	  htim1.Instance->CCR1 = 0;
 8003b44:	4b15      	ldr	r3, [pc, #84]	@ (8003b9c <StartAllPWM+0x68>)
 8003b46:	681b      	ldr	r3, [r3, #0]
 8003b48:	2200      	movs	r2, #0
 8003b4a:	635a      	str	r2, [r3, #52]	@ 0x34
	  htim1.Instance->CCR2 = 0;
 8003b4c:	4b13      	ldr	r3, [pc, #76]	@ (8003b9c <StartAllPWM+0x68>)
 8003b4e:	681b      	ldr	r3, [r3, #0]
 8003b50:	2200      	movs	r2, #0
 8003b52:	639a      	str	r2, [r3, #56]	@ 0x38
	  htim1.Instance->CCR3 = 0;
 8003b54:	4b11      	ldr	r3, [pc, #68]	@ (8003b9c <StartAllPWM+0x68>)
 8003b56:	681b      	ldr	r3, [r3, #0]
 8003b58:	2200      	movs	r2, #0
 8003b5a:	63da      	str	r2, [r3, #60]	@ 0x3c
	  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 8003b5c:	2100      	movs	r1, #0
 8003b5e:	480f      	ldr	r0, [pc, #60]	@ (8003b9c <StartAllPWM+0x68>)
 8003b60:	f005 fed2 	bl	8009908 <HAL_TIM_PWM_Start>
	  HAL_TIMEx_PWMN_Start(&htim1, TIM_CHANNEL_1);
 8003b64:	2100      	movs	r1, #0
 8003b66:	480d      	ldr	r0, [pc, #52]	@ (8003b9c <StartAllPWM+0x68>)
 8003b68:	f007 f83e 	bl	800abe8 <HAL_TIMEx_PWMN_Start>
	  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2);
 8003b6c:	2104      	movs	r1, #4
 8003b6e:	480b      	ldr	r0, [pc, #44]	@ (8003b9c <StartAllPWM+0x68>)
 8003b70:	f005 feca 	bl	8009908 <HAL_TIM_PWM_Start>
	  HAL_TIMEx_PWMN_Start(&htim1, TIM_CHANNEL_2);
 8003b74:	2104      	movs	r1, #4
 8003b76:	4809      	ldr	r0, [pc, #36]	@ (8003b9c <StartAllPWM+0x68>)
 8003b78:	f007 f836 	bl	800abe8 <HAL_TIMEx_PWMN_Start>
	  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_3);
 8003b7c:	2108      	movs	r1, #8
 8003b7e:	4807      	ldr	r0, [pc, #28]	@ (8003b9c <StartAllPWM+0x68>)
 8003b80:	f005 fec2 	bl	8009908 <HAL_TIM_PWM_Start>
	  HAL_TIMEx_PWMN_Start(&htim1, TIM_CHANNEL_3);
 8003b84:	2108      	movs	r1, #8
 8003b86:	4805      	ldr	r0, [pc, #20]	@ (8003b9c <StartAllPWM+0x68>)
 8003b88:	f007 f82e 	bl	800abe8 <HAL_TIMEx_PWMN_Start>
	  hw->tim1PwmHWOn = 1;
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	2201      	movs	r2, #1
 8003b90:	701a      	strb	r2, [r3, #0]
	}
}
 8003b92:	bf00      	nop
 8003b94:	3708      	adds	r7, #8
 8003b96:	46bd      	mov	sp, r7
 8003b98:	bd80      	pop	{r7, pc}
 8003b9a:	bf00      	nop
 8003b9c:	20000620 	.word	0x20000620

08003ba0 <StopAllPWM>:

void StopAllPWM(HW *hw){
 8003ba0:	b580      	push	{r7, lr}
 8003ba2:	b082      	sub	sp, #8
 8003ba4:	af00      	add	r7, sp, #0
 8003ba6:	6078      	str	r0, [r7, #4]
	if(hw->tim1PwmHWOn == 1){
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	781b      	ldrb	r3, [r3, #0]
 8003bac:	2b01      	cmp	r3, #1
 8003bae:	d12a      	bne.n	8003c06 <StopAllPWM+0x66>
		htim1.Instance->CCR1 = 0;
 8003bb0:	4b17      	ldr	r3, [pc, #92]	@ (8003c10 <StopAllPWM+0x70>)
 8003bb2:	681b      	ldr	r3, [r3, #0]
 8003bb4:	2200      	movs	r2, #0
 8003bb6:	635a      	str	r2, [r3, #52]	@ 0x34
		htim1.Instance->CCR2 = 0;
 8003bb8:	4b15      	ldr	r3, [pc, #84]	@ (8003c10 <StopAllPWM+0x70>)
 8003bba:	681b      	ldr	r3, [r3, #0]
 8003bbc:	2200      	movs	r2, #0
 8003bbe:	639a      	str	r2, [r3, #56]	@ 0x38
		htim1.Instance->CCR3 = 0;
 8003bc0:	4b13      	ldr	r3, [pc, #76]	@ (8003c10 <StopAllPWM+0x70>)
 8003bc2:	681b      	ldr	r3, [r3, #0]
 8003bc4:	2200      	movs	r2, #0
 8003bc6:	63da      	str	r2, [r3, #60]	@ 0x3c
		HAL_TIM_PWM_Stop(&htim1, TIM_CHANNEL_1);
 8003bc8:	2100      	movs	r1, #0
 8003bca:	4811      	ldr	r0, [pc, #68]	@ (8003c10 <StopAllPWM+0x70>)
 8003bcc:	f005 ff9c 	bl	8009b08 <HAL_TIM_PWM_Stop>
		HAL_TIMEx_PWMN_Stop(&htim1, TIM_CHANNEL_1);
 8003bd0:	2100      	movs	r1, #0
 8003bd2:	480f      	ldr	r0, [pc, #60]	@ (8003c10 <StopAllPWM+0x70>)
 8003bd4:	f007 f8bc 	bl	800ad50 <HAL_TIMEx_PWMN_Stop>
		HAL_TIM_PWM_Stop(&htim1, TIM_CHANNEL_2);
 8003bd8:	2104      	movs	r1, #4
 8003bda:	480d      	ldr	r0, [pc, #52]	@ (8003c10 <StopAllPWM+0x70>)
 8003bdc:	f005 ff94 	bl	8009b08 <HAL_TIM_PWM_Stop>
		HAL_TIMEx_PWMN_Stop(&htim1, TIM_CHANNEL_2);
 8003be0:	2104      	movs	r1, #4
 8003be2:	480b      	ldr	r0, [pc, #44]	@ (8003c10 <StopAllPWM+0x70>)
 8003be4:	f007 f8b4 	bl	800ad50 <HAL_TIMEx_PWMN_Stop>
		HAL_TIM_PWM_Stop(&htim1, TIM_CHANNEL_3);
 8003be8:	2108      	movs	r1, #8
 8003bea:	4809      	ldr	r0, [pc, #36]	@ (8003c10 <StopAllPWM+0x70>)
 8003bec:	f005 ff8c 	bl	8009b08 <HAL_TIM_PWM_Stop>
		HAL_TIMEx_PWMN_Stop(&htim1, TIM_CHANNEL_3);
 8003bf0:	2108      	movs	r1, #8
 8003bf2:	4807      	ldr	r0, [pc, #28]	@ (8003c10 <StopAllPWM+0x70>)
 8003bf4:	f007 f8ac 	bl	800ad50 <HAL_TIMEx_PWMN_Stop>
		hw->tim1PwmHWOn = 0;
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	2200      	movs	r2, #0
 8003bfc:	701a      	strb	r2, [r3, #0]
		htim1.State = HAL_TIM_STATE_READY;
 8003bfe:	4b04      	ldr	r3, [pc, #16]	@ (8003c10 <StopAllPWM+0x70>)
 8003c00:	2201      	movs	r2, #1
 8003c02:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
	}
}
 8003c06:	bf00      	nop
 8003c08:	3708      	adds	r7, #8
 8003c0a:	46bd      	mov	sp, r7
 8003c0c:	bd80      	pop	{r7, pc}
 8003c0e:	bf00      	nop
 8003c10:	20000620 	.word	0x20000620

08003c14 <Zero_PID_Terms>:

void Zero_PID_Terms(PID *pid){
 8003c14:	b480      	push	{r7}
 8003c16:	b083      	sub	sp, #12
 8003c18:	af00      	add	r7, sp, #0
 8003c1a:	6078      	str	r0, [r7, #4]
	pid->integralError = 0;
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	f04f 0200 	mov.w	r2, #0
 8003c22:	615a      	str	r2, [r3, #20]
	pid->KiTerm = 0;
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	f04f 0200 	mov.w	r2, #0
 8003c2a:	619a      	str	r2, [r3, #24]
	pid->error = 0;
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	f04f 0200 	mov.w	r2, #0
 8003c32:	611a      	str	r2, [r3, #16]
	pid->out = 0;
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	f04f 0200 	mov.w	r2, #0
 8003c3a:	625a      	str	r2, [r3, #36]	@ 0x24
}
 8003c3c:	bf00      	nop
 8003c3e:	370c      	adds	r7, #12
 8003c40:	46bd      	mov	sp, r7
 8003c42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c46:	4770      	bx	lr

08003c48 <Init_PID_Terms>:
void Init_PID_Terms(PID *pid,float Kp,float Ki,float SO,float FF){
 8003c48:	b480      	push	{r7}
 8003c4a:	b087      	sub	sp, #28
 8003c4c:	af00      	add	r7, sp, #0
 8003c4e:	6178      	str	r0, [r7, #20]
 8003c50:	ed87 0a04 	vstr	s0, [r7, #16]
 8003c54:	edc7 0a03 	vstr	s1, [r7, #12]
 8003c58:	ed87 1a02 	vstr	s2, [r7, #8]
 8003c5c:	edc7 1a01 	vstr	s3, [r7, #4]
	pid->Kp = Kp;
 8003c60:	697b      	ldr	r3, [r7, #20]
 8003c62:	693a      	ldr	r2, [r7, #16]
 8003c64:	601a      	str	r2, [r3, #0]
	pid->Ki = Ki;
 8003c66:	697b      	ldr	r3, [r7, #20]
 8003c68:	68fa      	ldr	r2, [r7, #12]
 8003c6a:	605a      	str	r2, [r3, #4]
	pid->FF = FF;
 8003c6c:	697b      	ldr	r3, [r7, #20]
 8003c6e:	687a      	ldr	r2, [r7, #4]
 8003c70:	60da      	str	r2, [r3, #12]
	pid->sO = SO;
 8003c72:	697b      	ldr	r3, [r7, #20]
 8003c74:	68ba      	ldr	r2, [r7, #8]
 8003c76:	609a      	str	r2, [r3, #8]
	pid->KiTerm = 0;
 8003c78:	697b      	ldr	r3, [r7, #20]
 8003c7a:	f04f 0200 	mov.w	r2, #0
 8003c7e:	619a      	str	r2, [r3, #24]
	pid->out = 0;
 8003c80:	697b      	ldr	r3, [r7, #20]
 8003c82:	f04f 0200 	mov.w	r2, #0
 8003c86:	625a      	str	r2, [r3, #36]	@ 0x24
}
 8003c88:	bf00      	nop
 8003c8a:	371c      	adds	r7, #28
 8003c8c:	46bd      	mov	sp, r7
 8003c8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c92:	4770      	bx	lr

08003c94 <ExecVoltagePID>:

float ExecVoltagePID(PID *pid,float target, float actual,float min,float max){
 8003c94:	b580      	push	{r7, lr}
 8003c96:	b088      	sub	sp, #32
 8003c98:	af00      	add	r7, sp, #0
 8003c9a:	6178      	str	r0, [r7, #20]
 8003c9c:	ed87 0a04 	vstr	s0, [r7, #16]
 8003ca0:	edc7 0a03 	vstr	s1, [r7, #12]
 8003ca4:	ed87 1a02 	vstr	s2, [r7, #8]
 8003ca8:	edc7 1a01 	vstr	s3, [r7, #4]
	pid->error = target - actual;
 8003cac:	ed97 7a04 	vldr	s14, [r7, #16]
 8003cb0:	edd7 7a03 	vldr	s15, [r7, #12]
 8003cb4:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003cb8:	697b      	ldr	r3, [r7, #20]
 8003cba:	edc3 7a04 	vstr	s15, [r3, #16]
	pid->integralError = pid->integralError + (pid->error*TIM1_DT);
 8003cbe:	697b      	ldr	r3, [r7, #20]
 8003cc0:	ed93 7a05 	vldr	s14, [r3, #20]
 8003cc4:	697b      	ldr	r3, [r7, #20]
 8003cc6:	edd3 6a04 	vldr	s13, [r3, #16]
 8003cca:	ed9f 6a2a 	vldr	s12, [pc, #168]	@ 8003d74 <ExecVoltagePID+0xe0>
 8003cce:	eec6 7a86 	vdiv.f32	s15, s13, s12
 8003cd2:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003cd6:	697b      	ldr	r3, [r7, #20]
 8003cd8:	edc3 7a05 	vstr	s15, [r3, #20]
	pid->KpTerm = pid->Kp * pid->error;
 8003cdc:	697b      	ldr	r3, [r7, #20]
 8003cde:	ed93 7a00 	vldr	s14, [r3]
 8003ce2:	697b      	ldr	r3, [r7, #20]
 8003ce4:	edd3 7a04 	vldr	s15, [r3, #16]
 8003ce8:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003cec:	697b      	ldr	r3, [r7, #20]
 8003cee:	edc3 7a07 	vstr	s15, [r3, #28]
	pid->KiTerm = pid->Ki*pid->integralError;
 8003cf2:	697b      	ldr	r3, [r7, #20]
 8003cf4:	ed93 7a01 	vldr	s14, [r3, #4]
 8003cf8:	697b      	ldr	r3, [r7, #20]
 8003cfa:	edd3 7a05 	vldr	s15, [r3, #20]
 8003cfe:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003d02:	697b      	ldr	r3, [r7, #20]
 8003d04:	edc3 7a06 	vstr	s15, [r3, #24]
	pid->FFTerm = pid->FF*target ;
 8003d08:	697b      	ldr	r3, [r7, #20]
 8003d0a:	ed93 7a03 	vldr	s14, [r3, #12]
 8003d0e:	edd7 7a04 	vldr	s15, [r7, #16]
 8003d12:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003d16:	697b      	ldr	r3, [r7, #20]
 8003d18:	edc3 7a08 	vstr	s15, [r3, #32]
	float out =  pid->KpTerm + pid->KiTerm + pid->FFTerm + pid->sO;
 8003d1c:	697b      	ldr	r3, [r7, #20]
 8003d1e:	ed93 7a07 	vldr	s14, [r3, #28]
 8003d22:	697b      	ldr	r3, [r7, #20]
 8003d24:	edd3 7a06 	vldr	s15, [r3, #24]
 8003d28:	ee37 7a27 	vadd.f32	s14, s14, s15
 8003d2c:	697b      	ldr	r3, [r7, #20]
 8003d2e:	edd3 7a08 	vldr	s15, [r3, #32]
 8003d32:	ee37 7a27 	vadd.f32	s14, s14, s15
 8003d36:	697b      	ldr	r3, [r7, #20]
 8003d38:	edd3 7a02 	vldr	s15, [r3, #8]
 8003d3c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003d40:	edc7 7a07 	vstr	s15, [r7, #28]
	out = fast_fmaxf(fast_fminf(out,max),min);
 8003d44:	edd7 0a01 	vldr	s1, [r7, #4]
 8003d48:	ed97 0a07 	vldr	s0, [r7, #28]
 8003d4c:	f000 fb24 	bl	8004398 <fast_fminf>
 8003d50:	eef0 7a40 	vmov.f32	s15, s0
 8003d54:	edd7 0a02 	vldr	s1, [r7, #8]
 8003d58:	eeb0 0a67 	vmov.f32	s0, s15
 8003d5c:	f000 fb00 	bl	8004360 <fast_fmaxf>
 8003d60:	ed87 0a07 	vstr	s0, [r7, #28]
	return out;
 8003d64:	69fb      	ldr	r3, [r7, #28]
 8003d66:	ee07 3a90 	vmov	s15, r3
}
 8003d6a:	eeb0 0a67 	vmov.f32	s0, s15
 8003d6e:	3720      	adds	r7, #32
 8003d70:	46bd      	mov	sp, r7
 8003d72:	bd80      	pop	{r7, pc}
 8003d74:	461c4000 	.word	0x461c4000

08003d78 <ExecPID>:


float ExecPID(PID *pid,float target, float actual,float min,float max){
 8003d78:	b580      	push	{r7, lr}
 8003d7a:	b088      	sub	sp, #32
 8003d7c:	af00      	add	r7, sp, #0
 8003d7e:	6178      	str	r0, [r7, #20]
 8003d80:	ed87 0a04 	vstr	s0, [r7, #16]
 8003d84:	edc7 0a03 	vstr	s1, [r7, #12]
 8003d88:	ed87 1a02 	vstr	s2, [r7, #8]
 8003d8c:	edc7 1a01 	vstr	s3, [r7, #4]
	pid->error = target - actual;
 8003d90:	ed97 7a04 	vldr	s14, [r7, #16]
 8003d94:	edd7 7a03 	vldr	s15, [r7, #12]
 8003d98:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003d9c:	697b      	ldr	r3, [r7, #20]
 8003d9e:	edc3 7a04 	vstr	s15, [r3, #16]
	pid->integralError = pid->integralError + (pid->error*TIM1_DT);
 8003da2:	697b      	ldr	r3, [r7, #20]
 8003da4:	ed93 7a05 	vldr	s14, [r3, #20]
 8003da8:	697b      	ldr	r3, [r7, #20]
 8003daa:	edd3 6a04 	vldr	s13, [r3, #16]
 8003dae:	ed9f 6a2a 	vldr	s12, [pc, #168]	@ 8003e58 <ExecPID+0xe0>
 8003db2:	eec6 7a86 	vdiv.f32	s15, s13, s12
 8003db6:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003dba:	697b      	ldr	r3, [r7, #20]
 8003dbc:	edc3 7a05 	vstr	s15, [r3, #20]
	pid->KpTerm = pid->Kp * pid->error;
 8003dc0:	697b      	ldr	r3, [r7, #20]
 8003dc2:	ed93 7a00 	vldr	s14, [r3]
 8003dc6:	697b      	ldr	r3, [r7, #20]
 8003dc8:	edd3 7a04 	vldr	s15, [r3, #16]
 8003dcc:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003dd0:	697b      	ldr	r3, [r7, #20]
 8003dd2:	edc3 7a07 	vstr	s15, [r3, #28]
	pid->KiTerm = pid->Ki*pid->integralError;
 8003dd6:	697b      	ldr	r3, [r7, #20]
 8003dd8:	ed93 7a01 	vldr	s14, [r3, #4]
 8003ddc:	697b      	ldr	r3, [r7, #20]
 8003dde:	edd3 7a05 	vldr	s15, [r3, #20]
 8003de2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003de6:	697b      	ldr	r3, [r7, #20]
 8003de8:	edc3 7a06 	vstr	s15, [r3, #24]
	pid->FFTerm = pid->FF*target ;
 8003dec:	697b      	ldr	r3, [r7, #20]
 8003dee:	ed93 7a03 	vldr	s14, [r3, #12]
 8003df2:	edd7 7a04 	vldr	s15, [r7, #16]
 8003df6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003dfa:	697b      	ldr	r3, [r7, #20]
 8003dfc:	edc3 7a08 	vstr	s15, [r3, #32]
	float out =  pid->KpTerm + pid->KiTerm + pid->FFTerm + pid->sO;
 8003e00:	697b      	ldr	r3, [r7, #20]
 8003e02:	ed93 7a07 	vldr	s14, [r3, #28]
 8003e06:	697b      	ldr	r3, [r7, #20]
 8003e08:	edd3 7a06 	vldr	s15, [r3, #24]
 8003e0c:	ee37 7a27 	vadd.f32	s14, s14, s15
 8003e10:	697b      	ldr	r3, [r7, #20]
 8003e12:	edd3 7a08 	vldr	s15, [r3, #32]
 8003e16:	ee37 7a27 	vadd.f32	s14, s14, s15
 8003e1a:	697b      	ldr	r3, [r7, #20]
 8003e1c:	edd3 7a02 	vldr	s15, [r3, #8]
 8003e20:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003e24:	edc7 7a07 	vstr	s15, [r7, #28]
	out = fast_fmaxf(fast_fminf(out,max),min);
 8003e28:	edd7 0a01 	vldr	s1, [r7, #4]
 8003e2c:	ed97 0a07 	vldr	s0, [r7, #28]
 8003e30:	f000 fab2 	bl	8004398 <fast_fminf>
 8003e34:	eef0 7a40 	vmov.f32	s15, s0
 8003e38:	edd7 0a02 	vldr	s1, [r7, #8]
 8003e3c:	eeb0 0a67 	vmov.f32	s0, s15
 8003e40:	f000 fa8e 	bl	8004360 <fast_fmaxf>
 8003e44:	ed87 0a07 	vstr	s0, [r7, #28]
	return out;
 8003e48:	69fb      	ldr	r3, [r7, #28]
 8003e4a:	ee07 3a90 	vmov	s15, r3
}
 8003e4e:	eeb0 0a67 	vmov.f32	s0, s15
 8003e52:	3720      	adds	r7, #32
 8003e54:	46bd      	mov	sp, r7
 8003e56:	bd80      	pop	{r7, pc}
 8003e58:	461c4000 	.word	0x461c4000

08003e5c <hsLogInit>:
union {
  float float_variable;
  uint8_t byte_array[4];
} uHs;

void hsLogInit(HSLogger *hsLog){
 8003e5c:	b480      	push	{r7}
 8003e5e:	b083      	sub	sp, #12
 8003e60:	af00      	add	r7, sp, #0
 8003e62:	6078      	str	r0, [r7, #4]
	hsLog->enable = 0;
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	2200      	movs	r2, #0
 8003e68:	701a      	strb	r2, [r3, #0]
	hsLog->bufferIndex = 0;
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	2200      	movs	r2, #0
 8003e6e:	f8a3 2fae 	strh.w	r2, [r3, #4014]	@ 0xfae
	hsLog->runningBuffer = BUFFER1;
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	2201      	movs	r2, #1
 8003e76:	735a      	strb	r2, [r3, #13]
	hsLog->sendOut = NOBUFFER;
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	2200      	movs	r2, #0
 8003e7c:	f883 2fb0 	strb.w	r2, [r3, #4016]	@ 0xfb0
}
 8003e80:	bf00      	nop
 8003e82:	370c      	adds	r7, #12
 8003e84:	46bd      	mov	sp, r7
 8003e86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e8a:	4770      	bx	lr

08003e8c <hsLogStart>:

void hsLogStart(HSLogger *hsLog,PositionSensor *ps){
 8003e8c:	b480      	push	{r7}
 8003e8e:	b083      	sub	sp, #12
 8003e90:	af00      	add	r7, sp, #0
 8003e92:	6078      	str	r0, [r7, #4]
 8003e94:	6039      	str	r1, [r7, #0]
	hsLog->enable = 1;
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	2201      	movs	r2, #1
 8003e9a:	701a      	strb	r2, [r3, #0]
	hsLog->firstTime = 1;
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	2201      	movs	r2, #1
 8003ea0:	705a      	strb	r2, [r3, #1]
	hsLog->bufferIndex = 0;
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	2200      	movs	r2, #0
 8003ea6:	f8a3 2fae 	strh.w	r2, [r3, #4014]	@ 0xfae
	hsLog->runningBuffer = BUFFER1;
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	2201      	movs	r2, #1
 8003eae:	735a      	strb	r2, [r3, #13]
	hsLog->sendOut = NOBUFFER;
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	2200      	movs	r2, #0
 8003eb4:	f883 2fb0 	strb.w	r2, [r3, #4016]	@ 0xfb0
	hsLog->start_multiTurns = ps->multiturn_mech_radians;
 8003eb8:	683b      	ldr	r3, [r7, #0]
 8003eba:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	605a      	str	r2, [r3, #4]
	hsLog->stopAndFlushBuffer = 0;
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	2200      	movs	r2, #0
 8003ec4:	731a      	strb	r2, [r3, #12]
}
 8003ec6:	bf00      	nop
 8003ec8:	370c      	adds	r7, #12
 8003eca:	46bd      	mov	sp, r7
 8003ecc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ed0:	4770      	bx	lr

08003ed2 <hsLogReset>:

void hsLogReset(HSLogger *hsLog){
 8003ed2:	b480      	push	{r7}
 8003ed4:	b083      	sub	sp, #12
 8003ed6:	af00      	add	r7, sp, #0
 8003ed8:	6078      	str	r0, [r7, #4]
	hsLog->enable = 0;
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	2200      	movs	r2, #0
 8003ede:	701a      	strb	r2, [r3, #0]
	hsLog->firstTime = 0;
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	2200      	movs	r2, #0
 8003ee4:	705a      	strb	r2, [r3, #1]
	hsLog->bufferIndex = 0;
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	2200      	movs	r2, #0
 8003eea:	f8a3 2fae 	strh.w	r2, [r3, #4014]	@ 0xfae
	hsLog->runningBuffer = NOBUFFER;
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	2200      	movs	r2, #0
 8003ef2:	735a      	strb	r2, [r3, #13]
	hsLog->start_multiTurns  = 0;
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	f04f 0200 	mov.w	r2, #0
 8003efa:	605a      	str	r2, [r3, #4]
	hsLog->end_multiTurns = 0;
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	f04f 0200 	mov.w	r2, #0
 8003f02:	609a      	str	r2, [r3, #8]
}
 8003f04:	bf00      	nop
 8003f06:	370c      	adds	r7, #12
 8003f08:	46bd      	mov	sp, r7
 8003f0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f0e:	4770      	bx	lr

08003f10 <switchBuffers>:


void switchBuffers(HSLogger *hL){
 8003f10:	b480      	push	{r7}
 8003f12:	b083      	sub	sp, #12
 8003f14:	af00      	add	r7, sp, #0
 8003f16:	6078      	str	r0, [r7, #4]
	if (hL->runningBuffer == BUFFER1){
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	7b5b      	ldrb	r3, [r3, #13]
 8003f1c:	2b01      	cmp	r3, #1
 8003f1e:	d111      	bne.n	8003f44 <switchBuffers+0x34>
		hL->sendOutBufferSize = hL->bufferIndex;
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	f8b3 2fae 	ldrh.w	r2, [r3, #4014]	@ 0xfae
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	f8a3 2fb2 	strh.w	r2, [r3, #4018]	@ 0xfb2
		hL->sendOut = BUFFER1;
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	2201      	movs	r2, #1
 8003f30:	f883 2fb0 	strb.w	r2, [r3, #4016]	@ 0xfb0
		hL->bufferIndex  = 0;
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	2200      	movs	r2, #0
 8003f38:	f8a3 2fae 	strh.w	r2, [r3, #4014]	@ 0xfae
		hL->runningBuffer = BUFFER2;
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	2202      	movs	r2, #2
 8003f40:	735a      	strb	r2, [r3, #13]
		hL->sendOutBufferSize = hL->bufferIndex;
		hL->sendOut = BUFFER2;
		hL->bufferIndex  = 0;
		hL->runningBuffer = BUFFER1;
	}
}
 8003f42:	e014      	b.n	8003f6e <switchBuffers+0x5e>
	}else if (hL->runningBuffer == BUFFER2){
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	7b5b      	ldrb	r3, [r3, #13]
 8003f48:	2b02      	cmp	r3, #2
 8003f4a:	d110      	bne.n	8003f6e <switchBuffers+0x5e>
		hL->sendOutBufferSize = hL->bufferIndex;
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	f8b3 2fae 	ldrh.w	r2, [r3, #4014]	@ 0xfae
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	f8a3 2fb2 	strh.w	r2, [r3, #4018]	@ 0xfb2
		hL->sendOut = BUFFER2;
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	2202      	movs	r2, #2
 8003f5c:	f883 2fb0 	strb.w	r2, [r3, #4016]	@ 0xfb0
		hL->bufferIndex  = 0;
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	2200      	movs	r2, #0
 8003f64:	f8a3 2fae 	strh.w	r2, [r3, #4014]	@ 0xfae
		hL->runningBuffer = BUFFER1;
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	2201      	movs	r2, #1
 8003f6c:	735a      	strb	r2, [r3, #13]
}
 8003f6e:	bf00      	nop
 8003f70:	370c      	adds	r7, #12
 8003f72:	46bd      	mov	sp, r7
 8003f74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f78:	4770      	bx	lr

08003f7a <add8Bit>:

uint16_t add8Bit(HSLogger *hL,uint8_t var,uint16_t index){
 8003f7a:	b480      	push	{r7}
 8003f7c:	b083      	sub	sp, #12
 8003f7e:	af00      	add	r7, sp, #0
 8003f80:	6078      	str	r0, [r7, #4]
 8003f82:	460b      	mov	r3, r1
 8003f84:	70fb      	strb	r3, [r7, #3]
 8003f86:	4613      	mov	r3, r2
 8003f88:	803b      	strh	r3, [r7, #0]
	if (hL->runningBuffer == BUFFER1){
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	7b5b      	ldrb	r3, [r3, #13]
 8003f8e:	2b01      	cmp	r3, #1
 8003f90:	d105      	bne.n	8003f9e <add8Bit+0x24>
		hL->HSbuffer1[index] = var & 0xFF;
 8003f92:	883b      	ldrh	r3, [r7, #0]
 8003f94:	687a      	ldr	r2, [r7, #4]
 8003f96:	4413      	add	r3, r2
 8003f98:	78fa      	ldrb	r2, [r7, #3]
 8003f9a:	739a      	strb	r2, [r3, #14]
 8003f9c:	e005      	b.n	8003faa <add8Bit+0x30>
	}else{
		hL->HSbuffer2[index] = var & 0xFF;
 8003f9e:	883b      	ldrh	r3, [r7, #0]
 8003fa0:	687a      	ldr	r2, [r7, #4]
 8003fa2:	4413      	add	r3, r2
 8003fa4:	78fa      	ldrb	r2, [r7, #3]
 8003fa6:	f883 27de 	strb.w	r2, [r3, #2014]	@ 0x7de
	}
	return index+1;
 8003faa:	883b      	ldrh	r3, [r7, #0]
 8003fac:	3301      	adds	r3, #1
 8003fae:	b29b      	uxth	r3, r3
}
 8003fb0:	4618      	mov	r0, r3
 8003fb2:	370c      	adds	r7, #12
 8003fb4:	46bd      	mov	sp, r7
 8003fb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fba:	4770      	bx	lr

08003fbc <add16Bit>:

uint16_t add16Bit(HSLogger *hL,uint16_t var,uint16_t index){
 8003fbc:	b480      	push	{r7}
 8003fbe:	b083      	sub	sp, #12
 8003fc0:	af00      	add	r7, sp, #0
 8003fc2:	6078      	str	r0, [r7, #4]
 8003fc4:	460b      	mov	r3, r1
 8003fc6:	807b      	strh	r3, [r7, #2]
 8003fc8:	4613      	mov	r3, r2
 8003fca:	803b      	strh	r3, [r7, #0]
	if (hL->runningBuffer == BUFFER1){
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	7b5b      	ldrb	r3, [r3, #13]
 8003fd0:	2b01      	cmp	r3, #1
 8003fd2:	d111      	bne.n	8003ff8 <add16Bit+0x3c>
		hL->HSbuffer1[index] = var >> 8 & 0xFF;
 8003fd4:	887b      	ldrh	r3, [r7, #2]
 8003fd6:	0a1b      	lsrs	r3, r3, #8
 8003fd8:	b29a      	uxth	r2, r3
 8003fda:	883b      	ldrh	r3, [r7, #0]
 8003fdc:	b2d1      	uxtb	r1, r2
 8003fde:	687a      	ldr	r2, [r7, #4]
 8003fe0:	4413      	add	r3, r2
 8003fe2:	460a      	mov	r2, r1
 8003fe4:	739a      	strb	r2, [r3, #14]
		hL->HSbuffer1[index+1] = var & 0xFF;
 8003fe6:	883b      	ldrh	r3, [r7, #0]
 8003fe8:	3301      	adds	r3, #1
 8003fea:	887a      	ldrh	r2, [r7, #2]
 8003fec:	b2d1      	uxtb	r1, r2
 8003fee:	687a      	ldr	r2, [r7, #4]
 8003ff0:	4413      	add	r3, r2
 8003ff2:	460a      	mov	r2, r1
 8003ff4:	739a      	strb	r2, [r3, #14]
 8003ff6:	e012      	b.n	800401e <add16Bit+0x62>
	}else{
		hL->HSbuffer2[index] = var >> 8 & 0xFF;
 8003ff8:	887b      	ldrh	r3, [r7, #2]
 8003ffa:	0a1b      	lsrs	r3, r3, #8
 8003ffc:	b29a      	uxth	r2, r3
 8003ffe:	883b      	ldrh	r3, [r7, #0]
 8004000:	b2d1      	uxtb	r1, r2
 8004002:	687a      	ldr	r2, [r7, #4]
 8004004:	4413      	add	r3, r2
 8004006:	460a      	mov	r2, r1
 8004008:	f883 27de 	strb.w	r2, [r3, #2014]	@ 0x7de
		hL->HSbuffer2[index+1] = var & 0xFF;
 800400c:	883b      	ldrh	r3, [r7, #0]
 800400e:	3301      	adds	r3, #1
 8004010:	887a      	ldrh	r2, [r7, #2]
 8004012:	b2d1      	uxtb	r1, r2
 8004014:	687a      	ldr	r2, [r7, #4]
 8004016:	4413      	add	r3, r2
 8004018:	460a      	mov	r2, r1
 800401a:	f883 27de 	strb.w	r2, [r3, #2014]	@ 0x7de
	}
	return index+2;
 800401e:	883b      	ldrh	r3, [r7, #0]
 8004020:	3302      	adds	r3, #2
 8004022:	b29b      	uxth	r3, r3
}
 8004024:	4618      	mov	r0, r3
 8004026:	370c      	adds	r7, #12
 8004028:	46bd      	mov	sp, r7
 800402a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800402e:	4770      	bx	lr

08004030 <addFloat>:

uint16_t addFloat(HSLogger *hL,float var,uint16_t index){
 8004030:	b480      	push	{r7}
 8004032:	b085      	sub	sp, #20
 8004034:	af00      	add	r7, sp, #0
 8004036:	60f8      	str	r0, [r7, #12]
 8004038:	ed87 0a02 	vstr	s0, [r7, #8]
 800403c:	460b      	mov	r3, r1
 800403e:	80fb      	strh	r3, [r7, #6]
	uHs.float_variable = var;
 8004040:	4a29      	ldr	r2, [pc, #164]	@ (80040e8 <addFloat+0xb8>)
 8004042:	68bb      	ldr	r3, [r7, #8]
 8004044:	6013      	str	r3, [r2, #0]
	if (hL->runningBuffer == BUFFER1){
 8004046:	68fb      	ldr	r3, [r7, #12]
 8004048:	7b5b      	ldrb	r3, [r3, #13]
 800404a:	2b01      	cmp	r3, #1
 800404c:	d11f      	bne.n	800408e <addFloat+0x5e>
		hL->HSbuffer1[index]= (uint8_t)(uHs.byte_array[3]);
 800404e:	88fb      	ldrh	r3, [r7, #6]
 8004050:	4a25      	ldr	r2, [pc, #148]	@ (80040e8 <addFloat+0xb8>)
 8004052:	78d1      	ldrb	r1, [r2, #3]
 8004054:	68fa      	ldr	r2, [r7, #12]
 8004056:	4413      	add	r3, r2
 8004058:	460a      	mov	r2, r1
 800405a:	739a      	strb	r2, [r3, #14]
		hL->HSbuffer1[index+1]= (uint8_t)(uHs.byte_array[2]);
 800405c:	88fb      	ldrh	r3, [r7, #6]
 800405e:	3301      	adds	r3, #1
 8004060:	4a21      	ldr	r2, [pc, #132]	@ (80040e8 <addFloat+0xb8>)
 8004062:	7891      	ldrb	r1, [r2, #2]
 8004064:	68fa      	ldr	r2, [r7, #12]
 8004066:	4413      	add	r3, r2
 8004068:	460a      	mov	r2, r1
 800406a:	739a      	strb	r2, [r3, #14]
		hL->HSbuffer1[index+2]= (uint8_t)(uHs.byte_array[1]);
 800406c:	88fb      	ldrh	r3, [r7, #6]
 800406e:	3302      	adds	r3, #2
 8004070:	4a1d      	ldr	r2, [pc, #116]	@ (80040e8 <addFloat+0xb8>)
 8004072:	7851      	ldrb	r1, [r2, #1]
 8004074:	68fa      	ldr	r2, [r7, #12]
 8004076:	4413      	add	r3, r2
 8004078:	460a      	mov	r2, r1
 800407a:	739a      	strb	r2, [r3, #14]
		hL->HSbuffer1[index+3]= (uint8_t)(uHs.byte_array[0]);
 800407c:	88fb      	ldrh	r3, [r7, #6]
 800407e:	3303      	adds	r3, #3
 8004080:	4a19      	ldr	r2, [pc, #100]	@ (80040e8 <addFloat+0xb8>)
 8004082:	7811      	ldrb	r1, [r2, #0]
 8004084:	68fa      	ldr	r2, [r7, #12]
 8004086:	4413      	add	r3, r2
 8004088:	460a      	mov	r2, r1
 800408a:	739a      	strb	r2, [r3, #14]
 800408c:	e022      	b.n	80040d4 <addFloat+0xa4>
	}else{
		hL->HSbuffer2[index]= (uint8_t)(uHs.byte_array[3]);
 800408e:	88fb      	ldrh	r3, [r7, #6]
 8004090:	4a15      	ldr	r2, [pc, #84]	@ (80040e8 <addFloat+0xb8>)
 8004092:	78d1      	ldrb	r1, [r2, #3]
 8004094:	68fa      	ldr	r2, [r7, #12]
 8004096:	4413      	add	r3, r2
 8004098:	460a      	mov	r2, r1
 800409a:	f883 27de 	strb.w	r2, [r3, #2014]	@ 0x7de
		hL->HSbuffer2[index+1]= (uint8_t)(uHs.byte_array[2]);
 800409e:	88fb      	ldrh	r3, [r7, #6]
 80040a0:	3301      	adds	r3, #1
 80040a2:	4a11      	ldr	r2, [pc, #68]	@ (80040e8 <addFloat+0xb8>)
 80040a4:	7891      	ldrb	r1, [r2, #2]
 80040a6:	68fa      	ldr	r2, [r7, #12]
 80040a8:	4413      	add	r3, r2
 80040aa:	460a      	mov	r2, r1
 80040ac:	f883 27de 	strb.w	r2, [r3, #2014]	@ 0x7de
		hL->HSbuffer2[index+2]= (uint8_t)(uHs.byte_array[1]);
 80040b0:	88fb      	ldrh	r3, [r7, #6]
 80040b2:	3302      	adds	r3, #2
 80040b4:	4a0c      	ldr	r2, [pc, #48]	@ (80040e8 <addFloat+0xb8>)
 80040b6:	7851      	ldrb	r1, [r2, #1]
 80040b8:	68fa      	ldr	r2, [r7, #12]
 80040ba:	4413      	add	r3, r2
 80040bc:	460a      	mov	r2, r1
 80040be:	f883 27de 	strb.w	r2, [r3, #2014]	@ 0x7de
		hL->HSbuffer2[index+3]= (uint8_t)(uHs.byte_array[0]);
 80040c2:	88fb      	ldrh	r3, [r7, #6]
 80040c4:	3303      	adds	r3, #3
 80040c6:	4a08      	ldr	r2, [pc, #32]	@ (80040e8 <addFloat+0xb8>)
 80040c8:	7811      	ldrb	r1, [r2, #0]
 80040ca:	68fa      	ldr	r2, [r7, #12]
 80040cc:	4413      	add	r3, r2
 80040ce:	460a      	mov	r2, r1
 80040d0:	f883 27de 	strb.w	r2, [r3, #2014]	@ 0x7de
	}
	return index+4;
 80040d4:	88fb      	ldrh	r3, [r7, #6]
 80040d6:	3304      	adds	r3, #4
 80040d8:	b29b      	uxth	r3, r3
}
 80040da:	4618      	mov	r0, r3
 80040dc:	3714      	adds	r7, #20
 80040de:	46bd      	mov	sp, r7
 80040e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040e4:	4770      	bx	lr
 80040e6:	bf00      	nop
 80040e8:	20001b60 	.word	0x20001b60

080040ec <add32Bit>:

uint16_t add32Bit(HSLogger *hL,uint32_t var,uint16_t index){
 80040ec:	b480      	push	{r7}
 80040ee:	b085      	sub	sp, #20
 80040f0:	af00      	add	r7, sp, #0
 80040f2:	60f8      	str	r0, [r7, #12]
 80040f4:	60b9      	str	r1, [r7, #8]
 80040f6:	4613      	mov	r3, r2
 80040f8:	80fb      	strh	r3, [r7, #6]
	if (hL->runningBuffer == BUFFER1){
 80040fa:	68fb      	ldr	r3, [r7, #12]
 80040fc:	7b5b      	ldrb	r3, [r3, #13]
 80040fe:	2b01      	cmp	r3, #1
 8004100:	d122      	bne.n	8004148 <add32Bit+0x5c>
		hL->HSbuffer1[index]= (uint8_t)(var >> 24 & 0xFF);
 8004102:	68bb      	ldr	r3, [r7, #8]
 8004104:	0e1a      	lsrs	r2, r3, #24
 8004106:	88fb      	ldrh	r3, [r7, #6]
 8004108:	b2d1      	uxtb	r1, r2
 800410a:	68fa      	ldr	r2, [r7, #12]
 800410c:	4413      	add	r3, r2
 800410e:	460a      	mov	r2, r1
 8004110:	739a      	strb	r2, [r3, #14]
		hL->HSbuffer1[index+1]= (uint8_t)(var >> 16 & 0xFF);
 8004112:	68bb      	ldr	r3, [r7, #8]
 8004114:	0c1a      	lsrs	r2, r3, #16
 8004116:	88fb      	ldrh	r3, [r7, #6]
 8004118:	3301      	adds	r3, #1
 800411a:	b2d1      	uxtb	r1, r2
 800411c:	68fa      	ldr	r2, [r7, #12]
 800411e:	4413      	add	r3, r2
 8004120:	460a      	mov	r2, r1
 8004122:	739a      	strb	r2, [r3, #14]
		hL->HSbuffer1[index+2]= (uint8_t)(var >> 8 & 0xFF);
 8004124:	68bb      	ldr	r3, [r7, #8]
 8004126:	0a1a      	lsrs	r2, r3, #8
 8004128:	88fb      	ldrh	r3, [r7, #6]
 800412a:	3302      	adds	r3, #2
 800412c:	b2d1      	uxtb	r1, r2
 800412e:	68fa      	ldr	r2, [r7, #12]
 8004130:	4413      	add	r3, r2
 8004132:	460a      	mov	r2, r1
 8004134:	739a      	strb	r2, [r3, #14]
		hL->HSbuffer1[index+3]= (uint8_t)(var & 0xFF);
 8004136:	88fb      	ldrh	r3, [r7, #6]
 8004138:	3303      	adds	r3, #3
 800413a:	68ba      	ldr	r2, [r7, #8]
 800413c:	b2d1      	uxtb	r1, r2
 800413e:	68fa      	ldr	r2, [r7, #12]
 8004140:	4413      	add	r3, r2
 8004142:	460a      	mov	r2, r1
 8004144:	739a      	strb	r2, [r3, #14]
 8004146:	e025      	b.n	8004194 <add32Bit+0xa8>
	}else{
		hL->HSbuffer2[index]= (uint8_t)(var >> 24 & 0xFF);
 8004148:	68bb      	ldr	r3, [r7, #8]
 800414a:	0e1a      	lsrs	r2, r3, #24
 800414c:	88fb      	ldrh	r3, [r7, #6]
 800414e:	b2d1      	uxtb	r1, r2
 8004150:	68fa      	ldr	r2, [r7, #12]
 8004152:	4413      	add	r3, r2
 8004154:	460a      	mov	r2, r1
 8004156:	f883 27de 	strb.w	r2, [r3, #2014]	@ 0x7de
		hL->HSbuffer2[index+1]= (uint8_t)(var >> 16 & 0xFF);
 800415a:	68bb      	ldr	r3, [r7, #8]
 800415c:	0c1a      	lsrs	r2, r3, #16
 800415e:	88fb      	ldrh	r3, [r7, #6]
 8004160:	3301      	adds	r3, #1
 8004162:	b2d1      	uxtb	r1, r2
 8004164:	68fa      	ldr	r2, [r7, #12]
 8004166:	4413      	add	r3, r2
 8004168:	460a      	mov	r2, r1
 800416a:	f883 27de 	strb.w	r2, [r3, #2014]	@ 0x7de
		hL->HSbuffer2[index+2]= (uint8_t)(var >> 8 & 0xFF);
 800416e:	68bb      	ldr	r3, [r7, #8]
 8004170:	0a1a      	lsrs	r2, r3, #8
 8004172:	88fb      	ldrh	r3, [r7, #6]
 8004174:	3302      	adds	r3, #2
 8004176:	b2d1      	uxtb	r1, r2
 8004178:	68fa      	ldr	r2, [r7, #12]
 800417a:	4413      	add	r3, r2
 800417c:	460a      	mov	r2, r1
 800417e:	f883 27de 	strb.w	r2, [r3, #2014]	@ 0x7de
		hL->HSbuffer2[index+3]= (uint8_t)(var & 0xFF);
 8004182:	88fb      	ldrh	r3, [r7, #6]
 8004184:	3303      	adds	r3, #3
 8004186:	68ba      	ldr	r2, [r7, #8]
 8004188:	b2d1      	uxtb	r1, r2
 800418a:	68fa      	ldr	r2, [r7, #12]
 800418c:	4413      	add	r3, r2
 800418e:	460a      	mov	r2, r1
 8004190:	f883 27de 	strb.w	r2, [r3, #2014]	@ 0x7de
	}
	return index+4;
 8004194:	88fb      	ldrh	r3, [r7, #6]
 8004196:	3304      	adds	r3, #4
 8004198:	b29b      	uxth	r3, r3
}
 800419a:	4618      	mov	r0, r3
 800419c:	3714      	adds	r7, #20
 800419e:	46bd      	mov	sp, r7
 80041a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041a4:	4770      	bx	lr
	...

080041a8 <addData>:

extern float OL_elecRadians;
uint16_t addData(HSLogger *hL, SVPWM *svpwm, PositionSensor *ps, FOC *foc,friction *fr , cogging *cg){
 80041a8:	b580      	push	{r7, lr}
 80041aa:	b086      	sub	sp, #24
 80041ac:	af00      	add	r7, sp, #0
 80041ae:	60f8      	str	r0, [r7, #12]
 80041b0:	60b9      	str	r1, [r7, #8]
 80041b2:	607a      	str	r2, [r7, #4]
 80041b4:	603b      	str	r3, [r7, #0]
	uint16_t idx = hL->bufferIndex;
 80041b6:	68fb      	ldr	r3, [r7, #12]
 80041b8:	f8b3 3fae 	ldrh.w	r3, [r3, #4014]	@ 0xfae
 80041bc:	82fb      	strh	r3, [r7, #22]
	idx = add8Bit(hL,0x68,idx); // D
 80041be:	8afb      	ldrh	r3, [r7, #22]
 80041c0:	461a      	mov	r2, r3
 80041c2:	2168      	movs	r1, #104	@ 0x68
 80041c4:	68f8      	ldr	r0, [r7, #12]
 80041c6:	f7ff fed8 	bl	8003f7a <add8Bit>
 80041ca:	4603      	mov	r3, r0
 80041cc:	82fb      	strh	r3, [r7, #22]
	idx = add8Bit(hL,0x58,idx); // :
 80041ce:	8afb      	ldrh	r3, [r7, #22]
 80041d0:	461a      	mov	r2, r3
 80041d2:	2158      	movs	r1, #88	@ 0x58
 80041d4:	68f8      	ldr	r0, [r7, #12]
 80041d6:	f7ff fed0 	bl	8003f7a <add8Bit>
 80041da:	4603      	mov	r3, r0
 80041dc:	82fb      	strh	r3, [r7, #22]

	idx = add32Bit(hL,svpwm->loopCounter,idx);
 80041de:	68bb      	ldr	r3, [r7, #8]
 80041e0:	681b      	ldr	r3, [r3, #0]
 80041e2:	4619      	mov	r1, r3
 80041e4:	8afb      	ldrh	r3, [r7, #22]
 80041e6:	461a      	mov	r2, r3
 80041e8:	68f8      	ldr	r0, [r7, #12]
 80041ea:	f7ff ff7f 	bl	80040ec <add32Bit>
 80041ee:	4603      	mov	r3, r0
 80041f0:	82fb      	strh	r3, [r7, #22]
	idx = add16Bit(hL,ps->encoder_raw,idx);
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 80041f8:	8afa      	ldrh	r2, [r7, #22]
 80041fa:	4619      	mov	r1, r3
 80041fc:	68f8      	ldr	r0, [r7, #12]
 80041fe:	f7ff fedd 	bl	8003fbc <add16Bit>
 8004202:	4603      	mov	r3, r0
 8004204:	82fb      	strh	r3, [r7, #22]
	idx = addFloat(hL,ps->velocity_radsec,idx);
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	edd3 7a16 	vldr	s15, [r3, #88]	@ 0x58
 800420c:	8afb      	ldrh	r3, [r7, #22]
 800420e:	4619      	mov	r1, r3
 8004210:	eeb0 0a67 	vmov.f32	s0, s15
 8004214:	68f8      	ldr	r0, [r7, #12]
 8004216:	f7ff ff0b 	bl	8004030 <addFloat>
 800421a:	4603      	mov	r3, r0
 800421c:	82fb      	strh	r3, [r7, #22]

	idx = add8Bit(hL,fr->frictionCompensationOn,idx);
 800421e:	6a3b      	ldr	r3, [r7, #32]
 8004220:	781b      	ldrb	r3, [r3, #0]
 8004222:	8afa      	ldrh	r2, [r7, #22]
 8004224:	4619      	mov	r1, r3
 8004226:	68f8      	ldr	r0, [r7, #12]
 8004228:	f7ff fea7 	bl	8003f7a <add8Bit>
 800422c:	4603      	mov	r3, r0
 800422e:	82fb      	strh	r3, [r7, #22]
	idx = addFloat(hL,OL_elecRadians,idx);
 8004230:	4b2e      	ldr	r3, [pc, #184]	@ (80042ec <addData+0x144>)
 8004232:	edd3 7a00 	vldr	s15, [r3]
 8004236:	8afb      	ldrh	r3, [r7, #22]
 8004238:	4619      	mov	r1, r3
 800423a:	eeb0 0a67 	vmov.f32	s0, s15
 800423e:	68f8      	ldr	r0, [r7, #12]
 8004240:	f7ff fef6 	bl	8004030 <addFloat>
 8004244:	4603      	mov	r3, r0
 8004246:	82fb      	strh	r3, [r7, #22]

	idx = add8Bit(hL,cg->coggingCompensationOn,idx);
 8004248:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800424a:	781b      	ldrb	r3, [r3, #0]
 800424c:	8afa      	ldrh	r2, [r7, #22]
 800424e:	4619      	mov	r1, r3
 8004250:	68f8      	ldr	r0, [r7, #12]
 8004252:	f7ff fe92 	bl	8003f7a <add8Bit>
 8004256:	4603      	mov	r3, r0
 8004258:	82fb      	strh	r3, [r7, #22]
	idx = addFloat(hL,ps->elecRadians,idx);
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	edd3 7a15 	vldr	s15, [r3, #84]	@ 0x54
 8004260:	8afb      	ldrh	r3, [r7, #22]
 8004262:	4619      	mov	r1, r3
 8004264:	eeb0 0a67 	vmov.f32	s0, s15
 8004268:	68f8      	ldr	r0, [r7, #12]
 800426a:	f7ff fee1 	bl	8004030 <addFloat>
 800426e:	4603      	mov	r3, r0
 8004270:	82fb      	strh	r3, [r7, #22]

	idx = addFloat(hL,svpwm->voltagePercent,idx);
 8004272:	68bb      	ldr	r3, [r7, #8]
 8004274:	edd3 7a01 	vldr	s15, [r3, #4]
 8004278:	8afb      	ldrh	r3, [r7, #22]
 800427a:	4619      	mov	r1, r3
 800427c:	eeb0 0a67 	vmov.f32	s0, s15
 8004280:	68f8      	ldr	r0, [r7, #12]
 8004282:	f7ff fed5 	bl	8004030 <addFloat>
 8004286:	4603      	mov	r3, r0
 8004288:	82fb      	strh	r3, [r7, #22]
	idx = addFloat(hL,foc->m,idx);
 800428a:	683b      	ldr	r3, [r7, #0]
 800428c:	edd3 7a0d 	vldr	s15, [r3, #52]	@ 0x34
 8004290:	8afb      	ldrh	r3, [r7, #22]
 8004292:	4619      	mov	r1, r3
 8004294:	eeb0 0a67 	vmov.f32	s0, s15
 8004298:	68f8      	ldr	r0, [r7, #12]
 800429a:	f7ff fec9 	bl	8004030 <addFloat>
 800429e:	4603      	mov	r3, r0
 80042a0:	82fb      	strh	r3, [r7, #22]

	idx = add8Bit(hL,0x58,idx); // :
 80042a2:	8afb      	ldrh	r3, [r7, #22]
 80042a4:	461a      	mov	r2, r3
 80042a6:	2158      	movs	r1, #88	@ 0x58
 80042a8:	68f8      	ldr	r0, [r7, #12]
 80042aa:	f7ff fe66 	bl	8003f7a <add8Bit>
 80042ae:	4603      	mov	r3, r0
 80042b0:	82fb      	strh	r3, [r7, #22]
	idx = add8Bit(hL,0x69,idx); // E
 80042b2:	8afb      	ldrh	r3, [r7, #22]
 80042b4:	461a      	mov	r2, r3
 80042b6:	2169      	movs	r1, #105	@ 0x69
 80042b8:	68f8      	ldr	r0, [r7, #12]
 80042ba:	f7ff fe5e 	bl	8003f7a <add8Bit>
 80042be:	4603      	mov	r3, r0
 80042c0:	82fb      	strh	r3, [r7, #22]

	idx = add8Bit(hL,0x0A,idx); // 0A
 80042c2:	8afb      	ldrh	r3, [r7, #22]
 80042c4:	461a      	mov	r2, r3
 80042c6:	210a      	movs	r1, #10
 80042c8:	68f8      	ldr	r0, [r7, #12]
 80042ca:	f7ff fe56 	bl	8003f7a <add8Bit>
 80042ce:	4603      	mov	r3, r0
 80042d0:	82fb      	strh	r3, [r7, #22]
	idx = add8Bit(hL,0x0D,idx); // 0D
 80042d2:	8afb      	ldrh	r3, [r7, #22]
 80042d4:	461a      	mov	r2, r3
 80042d6:	210d      	movs	r1, #13
 80042d8:	68f8      	ldr	r0, [r7, #12]
 80042da:	f7ff fe4e 	bl	8003f7a <add8Bit>
 80042de:	4603      	mov	r3, r0
 80042e0:	82fb      	strh	r3, [r7, #22]
	return idx;
 80042e2:	8afb      	ldrh	r3, [r7, #22]
}
 80042e4:	4618      	mov	r0, r3
 80042e6:	3718      	adds	r7, #24
 80042e8:	46bd      	mov	sp, r7
 80042ea:	bd80      	pop	{r7, pc}
 80042ec:	20001afc 	.word	0x20001afc

080042f0 <hsLog_CheckStopConditionReached>:


void hsLog_CheckStopConditionReached(HSLogger *hL,PositionSensor *ps,int8_t direction){
 80042f0:	b480      	push	{r7}
 80042f2:	b085      	sub	sp, #20
 80042f4:	af00      	add	r7, sp, #0
 80042f6:	60f8      	str	r0, [r7, #12]
 80042f8:	60b9      	str	r1, [r7, #8]
 80042fa:	4613      	mov	r3, r2
 80042fc:	71fb      	strb	r3, [r7, #7]
	 hL->stopAndFlushBuffer = 0;
 80042fe:	68fb      	ldr	r3, [r7, #12]
 8004300:	2200      	movs	r2, #0
 8004302:	731a      	strb	r2, [r3, #12]
	if (direction == CW){
 8004304:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004308:	2b01      	cmp	r3, #1
 800430a:	d10f      	bne.n	800432c <hsLog_CheckStopConditionReached+0x3c>
	  if (ps->multiturn_mech_radians > hL->end_multiTurns){
 800430c:	68bb      	ldr	r3, [r7, #8]
 800430e:	ed93 7a14 	vldr	s14, [r3, #80]	@ 0x50
 8004312:	68fb      	ldr	r3, [r7, #12]
 8004314:	edd3 7a02 	vldr	s15, [r3, #8]
 8004318:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800431c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004320:	dc00      	bgt.n	8004324 <hsLog_CheckStopConditionReached+0x34>
	  if (ps->multiturn_mech_radians < hL->end_multiTurns){
		  hL->stopAndFlushBuffer = 1;
	  }
	}
	else{}
}
 8004322:	e017      	b.n	8004354 <hsLog_CheckStopConditionReached+0x64>
		  hL->stopAndFlushBuffer = 1;
 8004324:	68fb      	ldr	r3, [r7, #12]
 8004326:	2201      	movs	r2, #1
 8004328:	731a      	strb	r2, [r3, #12]
}
 800432a:	e013      	b.n	8004354 <hsLog_CheckStopConditionReached+0x64>
	else if (direction == CCW){
 800432c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004330:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8004334:	d10e      	bne.n	8004354 <hsLog_CheckStopConditionReached+0x64>
	  if (ps->multiturn_mech_radians < hL->end_multiTurns){
 8004336:	68bb      	ldr	r3, [r7, #8]
 8004338:	ed93 7a14 	vldr	s14, [r3, #80]	@ 0x50
 800433c:	68fb      	ldr	r3, [r7, #12]
 800433e:	edd3 7a02 	vldr	s15, [r3, #8]
 8004342:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8004346:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800434a:	d400      	bmi.n	800434e <hsLog_CheckStopConditionReached+0x5e>
}
 800434c:	e002      	b.n	8004354 <hsLog_CheckStopConditionReached+0x64>
		  hL->stopAndFlushBuffer = 1;
 800434e:	68fb      	ldr	r3, [r7, #12]
 8004350:	2201      	movs	r2, #1
 8004352:	731a      	strb	r2, [r3, #12]
}
 8004354:	bf00      	nop
 8004356:	3714      	adds	r7, #20
 8004358:	46bd      	mov	sp, r7
 800435a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800435e:	4770      	bx	lr

08004360 <fast_fmaxf>:
 */

#include "MathOps.h"


float fast_fmaxf(float x, float y){
 8004360:	b480      	push	{r7}
 8004362:	b083      	sub	sp, #12
 8004364:	af00      	add	r7, sp, #0
 8004366:	ed87 0a01 	vstr	s0, [r7, #4]
 800436a:	edc7 0a00 	vstr	s1, [r7]
    /// Returns maximum of x, y ///
    return (((x)>(y))?(x):(y));
 800436e:	ed97 7a01 	vldr	s14, [r7, #4]
 8004372:	edd7 7a00 	vldr	s15, [r7]
 8004376:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800437a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800437e:	dd01      	ble.n	8004384 <fast_fmaxf+0x24>
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	e000      	b.n	8004386 <fast_fmaxf+0x26>
 8004384:	683b      	ldr	r3, [r7, #0]
 8004386:	ee07 3a90 	vmov	s15, r3
    }
 800438a:	eeb0 0a67 	vmov.f32	s0, s15
 800438e:	370c      	adds	r7, #12
 8004390:	46bd      	mov	sp, r7
 8004392:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004396:	4770      	bx	lr

08004398 <fast_fminf>:

float fast_fminf(float x, float y){
 8004398:	b480      	push	{r7}
 800439a:	b083      	sub	sp, #12
 800439c:	af00      	add	r7, sp, #0
 800439e:	ed87 0a01 	vstr	s0, [r7, #4]
 80043a2:	edc7 0a00 	vstr	s1, [r7]
    /// Returns minimum of x, y ///
    return (((x)<(y))?(x):(y));
 80043a6:	ed97 7a01 	vldr	s14, [r7, #4]
 80043aa:	edd7 7a00 	vldr	s15, [r7]
 80043ae:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80043b2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80043b6:	d501      	bpl.n	80043bc <fast_fminf+0x24>
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	e000      	b.n	80043be <fast_fminf+0x26>
 80043bc:	683b      	ldr	r3, [r7, #0]
 80043be:	ee07 3a90 	vmov	s15, r3
    }
 80043c2:	eeb0 0a67 	vmov.f32	s0, s15
 80043c6:	370c      	adds	r7, #12
 80043c8:	46bd      	mov	sp, r7
 80043ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043ce:	4770      	bx	lr

080043d0 <Init_ConstJerk_PosControl>:
 */


#include "PosControl-JC.h"

void Init_ConstJerk_PosControl(posControlJC *p){
 80043d0:	b480      	push	{r7}
 80043d2:	b083      	sub	sp, #12
 80043d4:	af00      	add	r7, sp, #0
 80043d6:	6078      	str	r0, [r7, #4]
	p->execCallingTime_ms = CALLING_TIME_MS;
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 80043de:	60da      	str	r2, [r3, #12]
	p->execCallingTime_s = p->execCallingTime_ms/1000.0f;
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	ed93 7a03 	vldr	s14, [r3, #12]
 80043e6:	eddf 6a06 	vldr	s13, [pc, #24]	@ 8004400 <Init_ConstJerk_PosControl+0x30>
 80043ea:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	edc3 7a04 	vstr	s15, [r3, #16]
}
 80043f4:	bf00      	nop
 80043f6:	370c      	adds	r7, #12
 80043f8:	46bd      	mov	sp, r7
 80043fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043fe:	4770      	bx	lr
 8004400:	447a0000 	.word	0x447a0000

08004404 <Reset_posControlJC>:


void Reset_posControlJC(posControlJC *p){
 8004404:	b480      	push	{r7}
 8004406:	b085      	sub	sp, #20
 8004408:	af00      	add	r7, sp, #0
 800440a:	6078      	str	r0, [r7, #4]
	p->targetDistanceDeg = 0;
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	f04f 0200 	mov.w	r2, #0
 8004412:	601a      	str	r2, [r3, #0]
	p->targetTime_ms = 0;
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	f04f 0200 	mov.w	r2, #0
 800441a:	605a      	str	r2, [r3, #4]

	p->instTime_ms = 0;
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	f04f 0200 	mov.w	r2, #0
 8004422:	63da      	str	r2, [r3, #60]	@ 0x3c
	p->instAccel = 0;
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	f04f 0200 	mov.w	r2, #0
 800442a:	649a      	str	r2, [r3, #72]	@ 0x48
	p->instSubInterval=0;
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	f04f 0200 	mov.w	r2, #0
 8004432:	641a      	str	r2, [r3, #64]	@ 0x40
	p->instJerk=0;
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	f04f 0200 	mov.w	r2, #0
 800443a:	645a      	str	r2, [r3, #68]	@ 0x44
	p->instAccel=0;
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	f04f 0200 	mov.w	r2, #0
 8004442:	649a      	str	r2, [r3, #72]	@ 0x48
	p->instVel=0;
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	f04f 0200 	mov.w	r2, #0
 800444a:	64da      	str	r2, [r3, #76]	@ 0x4c
	p->instVelRPM=0;
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	f04f 0200 	mov.w	r2, #0
 8004452:	651a      	str	r2, [r3, #80]	@ 0x50
	p->instTheta=0;
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	f04f 0200 	mov.w	r2, #0
 800445a:	655a      	str	r2, [r3, #84]	@ 0x54

	p->subIntervalTime_ms=0;
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	2200      	movs	r2, #0
 8004460:	829a      	strh	r2, [r3, #20]
	for (int i=0;i<9;i++){
 8004462:	2300      	movs	r3, #0
 8004464:	60fb      	str	r3, [r7, #12]
 8004466:	e009      	b.n	800447c <Reset_posControlJC+0x78>
		p->subIntervalTime_msArray[i] = 0;
 8004468:	687a      	ldr	r2, [r7, #4]
 800446a:	68fb      	ldr	r3, [r7, #12]
 800446c:	330c      	adds	r3, #12
 800446e:	005b      	lsls	r3, r3, #1
 8004470:	4413      	add	r3, r2
 8004472:	2200      	movs	r2, #0
 8004474:	809a      	strh	r2, [r3, #4]
	for (int i=0;i<9;i++){
 8004476:	68fb      	ldr	r3, [r7, #12]
 8004478:	3301      	adds	r3, #1
 800447a:	60fb      	str	r3, [r7, #12]
 800447c:	68fb      	ldr	r3, [r7, #12]
 800447e:	2b08      	cmp	r3, #8
 8004480:	ddf2      	ble.n	8004468 <Reset_posControlJC+0x64>
	}
	p->jerkVal=0;
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	f04f 0200 	mov.w	r2, #0
 8004488:	619a      	str	r2, [r3, #24]
	p->maxVelRad_sec=0;
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	f04f 0200 	mov.w	r2, #0
 8004490:	631a      	str	r2, [r3, #48]	@ 0x30
	p->maxVel_RPM=0;
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	f04f 0200 	mov.w	r2, #0
 8004498:	635a      	str	r2, [r3, #52]	@ 0x34

	p->state = POS_IDLE;
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	2203      	movs	r2, #3
 800449e:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
}
 80044a2:	bf00      	nop
 80044a4:	3714      	adds	r7, #20
 80044a6:	46bd      	mov	sp, r7
 80044a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044ac:	4770      	bx	lr
	...

080044b0 <Setup_posControlJC>:

void Setup_posControlJC(posControlJC *p,float targetThetaDeg,float targetTime_ms){
 80044b0:	b480      	push	{r7}
 80044b2:	b087      	sub	sp, #28
 80044b4:	af00      	add	r7, sp, #0
 80044b6:	60f8      	str	r0, [r7, #12]
 80044b8:	ed87 0a02 	vstr	s0, [r7, #8]
 80044bc:	edc7 0a01 	vstr	s1, [r7, #4]
	p->targetDistanceDeg = targetThetaDeg;
 80044c0:	68fb      	ldr	r3, [r7, #12]
 80044c2:	68ba      	ldr	r2, [r7, #8]
 80044c4:	601a      	str	r2, [r3, #0]
	p->targetTime_ms = targetTime_ms;
 80044c6:	68fb      	ldr	r3, [r7, #12]
 80044c8:	687a      	ldr	r2, [r7, #4]
 80044ca:	605a      	str	r2, [r3, #4]

	p->subIntervalTime_ms = targetTime_ms/9.0f;
 80044cc:	ed97 7a01 	vldr	s14, [r7, #4]
 80044d0:	eef2 6a02 	vmov.f32	s13, #34	@ 0x41100000  9.0
 80044d4:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80044d8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80044dc:	ee17 3a90 	vmov	r3, s15
 80044e0:	b29a      	uxth	r2, r3
 80044e2:	68fb      	ldr	r3, [r7, #12]
 80044e4:	829a      	strh	r2, [r3, #20]
	p->targetDistanceRad = p->targetDistanceDeg*DEG_TO_RAD;
 80044e6:	68fb      	ldr	r3, [r7, #12]
 80044e8:	edd3 7a00 	vldr	s15, [r3]
 80044ec:	ed9f 7a47 	vldr	s14, [pc, #284]	@ 800460c <Setup_posControlJC+0x15c>
 80044f0:	ee27 7a87 	vmul.f32	s14, s15, s14
 80044f4:	eddf 6a46 	vldr	s13, [pc, #280]	@ 8004610 <Setup_posControlJC+0x160>
 80044f8:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80044fc:	68fb      	ldr	r3, [r7, #12]
 80044fe:	edc3 7a02 	vstr	s15, [r3, #8]
	float subInterval_s = (float)p->subIntervalTime_ms/1000.0f;
 8004502:	68fb      	ldr	r3, [r7, #12]
 8004504:	8a9b      	ldrh	r3, [r3, #20]
 8004506:	ee07 3a90 	vmov	s15, r3
 800450a:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800450e:	eddf 6a41 	vldr	s13, [pc, #260]	@ 8004614 <Setup_posControlJC+0x164>
 8004512:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8004516:	edc7 7a05 	vstr	s15, [r7, #20]
	p->jerkVal = p->targetDistanceRad/(12.0f*subInterval_s*subInterval_s*subInterval_s);
 800451a:	68fb      	ldr	r3, [r7, #12]
 800451c:	edd3 6a02 	vldr	s13, [r3, #8]
 8004520:	edd7 7a05 	vldr	s15, [r7, #20]
 8004524:	eeb2 7a08 	vmov.f32	s14, #40	@ 0x41400000  12.0
 8004528:	ee27 7a87 	vmul.f32	s14, s15, s14
 800452c:	edd7 7a05 	vldr	s15, [r7, #20]
 8004530:	ee27 7a27 	vmul.f32	s14, s14, s15
 8004534:	edd7 7a05 	vldr	s15, [r7, #20]
 8004538:	ee27 7a27 	vmul.f32	s14, s14, s15
 800453c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004540:	68fb      	ldr	r3, [r7, #12]
 8004542:	edc3 7a06 	vstr	s15, [r3, #24]

	p->maxVelRad_sec = p->jerkVal * 2.0f * subInterval_s * subInterval_s;
 8004546:	68fb      	ldr	r3, [r7, #12]
 8004548:	edd3 7a06 	vldr	s15, [r3, #24]
 800454c:	ee37 7aa7 	vadd.f32	s14, s15, s15
 8004550:	edd7 7a05 	vldr	s15, [r7, #20]
 8004554:	ee27 7a27 	vmul.f32	s14, s14, s15
 8004558:	edd7 7a05 	vldr	s15, [r7, #20]
 800455c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004560:	68fb      	ldr	r3, [r7, #12]
 8004562:	edc3 7a0c 	vstr	s15, [r3, #48]	@ 0x30
	p->maxVel_RPM = p->maxVelRad_sec * 60.0f / TWO_PI_F;
 8004566:	68fb      	ldr	r3, [r7, #12]
 8004568:	edd3 7a0c 	vldr	s15, [r3, #48]	@ 0x30
 800456c:	ed9f 7a2a 	vldr	s14, [pc, #168]	@ 8004618 <Setup_posControlJC+0x168>
 8004570:	ee27 7a87 	vmul.f32	s14, s15, s14
 8004574:	eddf 6a29 	vldr	s13, [pc, #164]	@ 800461c <Setup_posControlJC+0x16c>
 8004578:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800457c:	68fb      	ldr	r3, [r7, #12]
 800457e:	edc3 7a0d 	vstr	s15, [r3, #52]	@ 0x34

	//PUT CHECKS HERE

	p->subIntervalTime_msArray[0] = p->subIntervalTime_ms * 1;
 8004582:	68fb      	ldr	r3, [r7, #12]
 8004584:	8a9a      	ldrh	r2, [r3, #20]
 8004586:	68fb      	ldr	r3, [r7, #12]
 8004588:	839a      	strh	r2, [r3, #28]
	p->subIntervalTime_msArray[1] = p->subIntervalTime_ms * 2;
 800458a:	68fb      	ldr	r3, [r7, #12]
 800458c:	8a9b      	ldrh	r3, [r3, #20]
 800458e:	005b      	lsls	r3, r3, #1
 8004590:	b29a      	uxth	r2, r3
 8004592:	68fb      	ldr	r3, [r7, #12]
 8004594:	83da      	strh	r2, [r3, #30]
	p->subIntervalTime_msArray[2] = p->subIntervalTime_ms * 3;
 8004596:	68fb      	ldr	r3, [r7, #12]
 8004598:	8a9b      	ldrh	r3, [r3, #20]
 800459a:	461a      	mov	r2, r3
 800459c:	0052      	lsls	r2, r2, #1
 800459e:	4413      	add	r3, r2
 80045a0:	b29a      	uxth	r2, r3
 80045a2:	68fb      	ldr	r3, [r7, #12]
 80045a4:	841a      	strh	r2, [r3, #32]
	p->subIntervalTime_msArray[3] = p->subIntervalTime_ms * 4;
 80045a6:	68fb      	ldr	r3, [r7, #12]
 80045a8:	8a9b      	ldrh	r3, [r3, #20]
 80045aa:	009b      	lsls	r3, r3, #2
 80045ac:	b29a      	uxth	r2, r3
 80045ae:	68fb      	ldr	r3, [r7, #12]
 80045b0:	845a      	strh	r2, [r3, #34]	@ 0x22
	p->subIntervalTime_msArray[4] = p->subIntervalTime_ms * 5;
 80045b2:	68fb      	ldr	r3, [r7, #12]
 80045b4:	8a9b      	ldrh	r3, [r3, #20]
 80045b6:	461a      	mov	r2, r3
 80045b8:	0092      	lsls	r2, r2, #2
 80045ba:	4413      	add	r3, r2
 80045bc:	b29a      	uxth	r2, r3
 80045be:	68fb      	ldr	r3, [r7, #12]
 80045c0:	849a      	strh	r2, [r3, #36]	@ 0x24
	p->subIntervalTime_msArray[5] = p->subIntervalTime_ms * 6;
 80045c2:	68fb      	ldr	r3, [r7, #12]
 80045c4:	8a9b      	ldrh	r3, [r3, #20]
 80045c6:	461a      	mov	r2, r3
 80045c8:	0052      	lsls	r2, r2, #1
 80045ca:	4413      	add	r3, r2
 80045cc:	005b      	lsls	r3, r3, #1
 80045ce:	b29a      	uxth	r2, r3
 80045d0:	68fb      	ldr	r3, [r7, #12]
 80045d2:	84da      	strh	r2, [r3, #38]	@ 0x26
	p->subIntervalTime_msArray[6] = p->subIntervalTime_ms * 7;
 80045d4:	68fb      	ldr	r3, [r7, #12]
 80045d6:	8a9b      	ldrh	r3, [r3, #20]
 80045d8:	461a      	mov	r2, r3
 80045da:	00d2      	lsls	r2, r2, #3
 80045dc:	1ad3      	subs	r3, r2, r3
 80045de:	b29a      	uxth	r2, r3
 80045e0:	68fb      	ldr	r3, [r7, #12]
 80045e2:	851a      	strh	r2, [r3, #40]	@ 0x28
	p->subIntervalTime_msArray[7] = p->subIntervalTime_ms * 8;
 80045e4:	68fb      	ldr	r3, [r7, #12]
 80045e6:	8a9b      	ldrh	r3, [r3, #20]
 80045e8:	00db      	lsls	r3, r3, #3
 80045ea:	b29a      	uxth	r2, r3
 80045ec:	68fb      	ldr	r3, [r7, #12]
 80045ee:	855a      	strh	r2, [r3, #42]	@ 0x2a
	p->subIntervalTime_msArray[8] = p->subIntervalTime_ms * 9;
 80045f0:	68fb      	ldr	r3, [r7, #12]
 80045f2:	8a9b      	ldrh	r3, [r3, #20]
 80045f4:	461a      	mov	r2, r3
 80045f6:	00d2      	lsls	r2, r2, #3
 80045f8:	4413      	add	r3, r2
 80045fa:	b29a      	uxth	r2, r3
 80045fc:	68fb      	ldr	r3, [r7, #12]
 80045fe:	859a      	strh	r2, [r3, #44]	@ 0x2c

}
 8004600:	bf00      	nop
 8004602:	371c      	adds	r7, #28
 8004604:	46bd      	mov	sp, r7
 8004606:	f85d 7b04 	ldr.w	r7, [sp], #4
 800460a:	4770      	bx	lr
 800460c:	40490fd0 	.word	0x40490fd0
 8004610:	43340000 	.word	0x43340000
 8004614:	447a0000 	.word	0x447a0000
 8004618:	42700000 	.word	0x42700000
 800461c:	40c90fda 	.word	0x40c90fda

08004620 <ExecPosTrajectory>:


void ExecPosTrajectory(posControlJC *p){
 8004620:	b480      	push	{r7}
 8004622:	b083      	sub	sp, #12
 8004624:	af00      	add	r7, sp, #0
 8004626:	6078      	str	r0, [r7, #4]

	if (p->instTime_ms >= p->targetTime_ms){
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	ed93 7a0f 	vldr	s14, [r3, #60]	@ 0x3c
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	edd3 7a01 	vldr	s15, [r3, #4]
 8004634:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8004638:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800463c:	db03      	blt.n	8004646 <ExecPosTrajectory+0x26>
		p->state = POS_OVER;
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	2202      	movs	r2, #2
 8004642:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
	}

	if (p->state == POS_RUNNING){
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 800464c:	2b01      	cmp	r3, #1
 800464e:	f040 811f 	bne.w	8004890 <ExecPosTrajectory+0x270>
		p->instTime_ms += p->execCallingTime_ms;
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	ed93 7a0f 	vldr	s14, [r3, #60]	@ 0x3c
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	edd3 7a03 	vldr	s15, [r3, #12]
 800465e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	edc3 7a0f 	vstr	s15, [r3, #60]	@ 0x3c

		if (p->instTime_ms < p->subIntervalTime_msArray[0]){
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	ed93 7a0f 	vldr	s14, [r3, #60]	@ 0x3c
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	8b9b      	ldrh	r3, [r3, #28]
 8004672:	ee07 3a90 	vmov	s15, r3
 8004676:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800467a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800467e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004682:	d508      	bpl.n	8004696 <ExecPosTrajectory+0x76>
			p->instJerk = p->jerkVal;
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	699a      	ldr	r2, [r3, #24]
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	645a      	str	r2, [r3, #68]	@ 0x44
			p->instSubInterval = 1;
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 8004692:	641a      	str	r2, [r3, #64]	@ 0x40
 8004694:	e0be      	b.n	8004814 <ExecPosTrajectory+0x1f4>
		}
		else if (p->instTime_ms < p->subIntervalTime_msArray[1]){
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	ed93 7a0f 	vldr	s14, [r3, #60]	@ 0x3c
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	8bdb      	ldrh	r3, [r3, #30]
 80046a0:	ee07 3a90 	vmov	s15, r3
 80046a4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80046a8:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80046ac:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80046b0:	d508      	bpl.n	80046c4 <ExecPosTrajectory+0xa4>
			p->instJerk = 0;
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	f04f 0200 	mov.w	r2, #0
 80046b8:	645a      	str	r2, [r3, #68]	@ 0x44
			p->instSubInterval = 2;
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80046c0:	641a      	str	r2, [r3, #64]	@ 0x40
 80046c2:	e0a7      	b.n	8004814 <ExecPosTrajectory+0x1f4>
		}
		else if (p->instTime_ms < p->subIntervalTime_msArray[2]){
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	ed93 7a0f 	vldr	s14, [r3, #60]	@ 0x3c
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	8c1b      	ldrh	r3, [r3, #32]
 80046ce:	ee07 3a90 	vmov	s15, r3
 80046d2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80046d6:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80046da:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80046de:	d50b      	bpl.n	80046f8 <ExecPosTrajectory+0xd8>
			p->instJerk = -p->jerkVal;
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	edd3 7a06 	vldr	s15, [r3, #24]
 80046e6:	eef1 7a67 	vneg.f32	s15, s15
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	edc3 7a11 	vstr	s15, [r3, #68]	@ 0x44
			p->instSubInterval = 3;
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	4a6a      	ldr	r2, [pc, #424]	@ (800489c <ExecPosTrajectory+0x27c>)
 80046f4:	641a      	str	r2, [r3, #64]	@ 0x40
 80046f6:	e08d      	b.n	8004814 <ExecPosTrajectory+0x1f4>
		}
		else if (p->instTime_ms < p->subIntervalTime_msArray[3]){
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	ed93 7a0f 	vldr	s14, [r3, #60]	@ 0x3c
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	8c5b      	ldrh	r3, [r3, #34]	@ 0x22
 8004702:	ee07 3a90 	vmov	s15, r3
 8004706:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800470a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800470e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004712:	d508      	bpl.n	8004726 <ExecPosTrajectory+0x106>
			p->instJerk = 0;
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	f04f 0200 	mov.w	r2, #0
 800471a:	645a      	str	r2, [r3, #68]	@ 0x44
			p->instSubInterval = 4;
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	f04f 4281 	mov.w	r2, #1082130432	@ 0x40800000
 8004722:	641a      	str	r2, [r3, #64]	@ 0x40
 8004724:	e076      	b.n	8004814 <ExecPosTrajectory+0x1f4>
		}
		else if (p->instTime_ms < p->subIntervalTime_msArray[4]){
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	ed93 7a0f 	vldr	s14, [r3, #60]	@ 0x3c
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 8004730:	ee07 3a90 	vmov	s15, r3
 8004734:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004738:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800473c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004740:	d507      	bpl.n	8004752 <ExecPosTrajectory+0x132>
			p->instJerk = 0;
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	f04f 0200 	mov.w	r2, #0
 8004748:	645a      	str	r2, [r3, #68]	@ 0x44
			p->instSubInterval = 5;
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	4a54      	ldr	r2, [pc, #336]	@ (80048a0 <ExecPosTrajectory+0x280>)
 800474e:	641a      	str	r2, [r3, #64]	@ 0x40
 8004750:	e060      	b.n	8004814 <ExecPosTrajectory+0x1f4>
		}
		else if (p->instTime_ms < p->subIntervalTime_msArray[5]){
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	ed93 7a0f 	vldr	s14, [r3, #60]	@ 0x3c
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 800475c:	ee07 3a90 	vmov	s15, r3
 8004760:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004764:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8004768:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800476c:	d507      	bpl.n	800477e <ExecPosTrajectory+0x15e>
			p->instJerk = 0;
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	f04f 0200 	mov.w	r2, #0
 8004774:	645a      	str	r2, [r3, #68]	@ 0x44
			p->instSubInterval = 6;
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	4a4a      	ldr	r2, [pc, #296]	@ (80048a4 <ExecPosTrajectory+0x284>)
 800477a:	641a      	str	r2, [r3, #64]	@ 0x40
 800477c:	e04a      	b.n	8004814 <ExecPosTrajectory+0x1f4>
		}
		else if (p->instTime_ms < p->subIntervalTime_msArray[6]){
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	ed93 7a0f 	vldr	s14, [r3, #60]	@ 0x3c
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004788:	ee07 3a90 	vmov	s15, r3
 800478c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004790:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8004794:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004798:	d50b      	bpl.n	80047b2 <ExecPosTrajectory+0x192>
			p->instJerk = -p->jerkVal;
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	edd3 7a06 	vldr	s15, [r3, #24]
 80047a0:	eef1 7a67 	vneg.f32	s15, s15
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	edc3 7a11 	vstr	s15, [r3, #68]	@ 0x44
			p->instSubInterval = 7;
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	4a3e      	ldr	r2, [pc, #248]	@ (80048a8 <ExecPosTrajectory+0x288>)
 80047ae:	641a      	str	r2, [r3, #64]	@ 0x40
 80047b0:	e030      	b.n	8004814 <ExecPosTrajectory+0x1f4>
		}
		else if (p->instTime_ms < p->subIntervalTime_msArray[7]){
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	ed93 7a0f 	vldr	s14, [r3, #60]	@ 0x3c
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80047bc:	ee07 3a90 	vmov	s15, r3
 80047c0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80047c4:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80047c8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80047cc:	d508      	bpl.n	80047e0 <ExecPosTrajectory+0x1c0>
			p->instJerk = 0;
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	f04f 0200 	mov.w	r2, #0
 80047d4:	645a      	str	r2, [r3, #68]	@ 0x44
			p->instSubInterval = 8;
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	f04f 4282 	mov.w	r2, #1090519040	@ 0x41000000
 80047dc:	641a      	str	r2, [r3, #64]	@ 0x40
 80047de:	e019      	b.n	8004814 <ExecPosTrajectory+0x1f4>
		}
		else if (p->instTime_ms < p->subIntervalTime_msArray[8]){
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	ed93 7a0f 	vldr	s14, [r3, #60]	@ 0x3c
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 80047ea:	ee07 3a90 	vmov	s15, r3
 80047ee:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80047f2:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80047f6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80047fa:	d507      	bpl.n	800480c <ExecPosTrajectory+0x1ec>
			p->instJerk = p->jerkVal;
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	699a      	ldr	r2, [r3, #24]
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	645a      	str	r2, [r3, #68]	@ 0x44
			p->instSubInterval = 9;
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	4a29      	ldr	r2, [pc, #164]	@ (80048ac <ExecPosTrajectory+0x28c>)
 8004808:	641a      	str	r2, [r3, #64]	@ 0x40
 800480a:	e003      	b.n	8004814 <ExecPosTrajectory+0x1f4>
		}else{
			p->instJerk = 0;
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	f04f 0200 	mov.w	r2, #0
 8004812:	645a      	str	r2, [r3, #68]	@ 0x44
		}
	    p->instAccel = p->instAccel  + p->instJerk*p->execCallingTime_s;
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	ed93 7a12 	vldr	s14, [r3, #72]	@ 0x48
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	edd3 6a11 	vldr	s13, [r3, #68]	@ 0x44
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	edd3 7a04 	vldr	s15, [r3, #16]
 8004826:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800482a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	edc3 7a12 	vstr	s15, [r3, #72]	@ 0x48
	    p->instVel = p->instVel + p->instAccel*p->execCallingTime_s;
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	ed93 7a13 	vldr	s14, [r3, #76]	@ 0x4c
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	edd3 6a12 	vldr	s13, [r3, #72]	@ 0x48
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	edd3 7a04 	vldr	s15, [r3, #16]
 8004846:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800484a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	edc3 7a13 	vstr	s15, [r3, #76]	@ 0x4c
	    p->instTheta = p->instTheta + p->instVel * p->execCallingTime_s;
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	ed93 7a15 	vldr	s14, [r3, #84]	@ 0x54
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	edd3 6a13 	vldr	s13, [r3, #76]	@ 0x4c
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	edd3 7a04 	vldr	s15, [r3, #16]
 8004866:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800486a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	edc3 7a15 	vstr	s15, [r3, #84]	@ 0x54
	    p->instVelRPM = p->instVel * 60.0f/TWO_PI_F;
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	edd3 7a13 	vldr	s15, [r3, #76]	@ 0x4c
 800487a:	ed9f 7a0d 	vldr	s14, [pc, #52]	@ 80048b0 <ExecPosTrajectory+0x290>
 800487e:	ee27 7a87 	vmul.f32	s14, s15, s14
 8004882:	eddf 6a0c 	vldr	s13, [pc, #48]	@ 80048b4 <ExecPosTrajectory+0x294>
 8004886:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	edc3 7a14 	vstr	s15, [r3, #80]	@ 0x50

	}
}
 8004890:	bf00      	nop
 8004892:	370c      	adds	r7, #12
 8004894:	46bd      	mov	sp, r7
 8004896:	f85d 7b04 	ldr.w	r7, [sp], #4
 800489a:	4770      	bx	lr
 800489c:	40400000 	.word	0x40400000
 80048a0:	40a00000 	.word	0x40a00000
 80048a4:	40c00000 	.word	0x40c00000
 80048a8:	40e00000 	.word	0x40e00000
 80048ac:	41100000 	.word	0x41100000
 80048b0:	42700000 	.word	0x42700000
 80048b4:	40c90fda 	.word	0x40c90fda

080048b8 <PositionSensor_update>:
	ps->avgingStarted = 0;
	ps->avg_velocity_radsec = 0;
}


void PositionSensor_update(PositionSensor* ps,float dt){
 80048b8:	b580      	push	{r7, lr}
 80048ba:	b084      	sub	sp, #16
 80048bc:	af00      	add	r7, sp, #0
 80048be:	6078      	str	r0, [r7, #4]
 80048c0:	ed87 0a00 	vstr	s0, [r7]
	//relatively slow, 500 cycles
	for (int i=15;i>=1;i--){
 80048c4:	230f      	movs	r3, #15
 80048c6:	60fb      	str	r3, [r7, #12]
 80048c8:	e00d      	b.n	80048e6 <PositionSensor_update+0x2e>
		ps->multiTurn_position[i]=ps->multiTurn_position[i-1];
 80048ca:	68fb      	ldr	r3, [r7, #12]
 80048cc:	3b01      	subs	r3, #1
 80048ce:	687a      	ldr	r2, [r7, #4]
 80048d0:	009b      	lsls	r3, r3, #2
 80048d2:	4413      	add	r3, r2
 80048d4:	681a      	ldr	r2, [r3, #0]
 80048d6:	6879      	ldr	r1, [r7, #4]
 80048d8:	68fb      	ldr	r3, [r7, #12]
 80048da:	009b      	lsls	r3, r3, #2
 80048dc:	440b      	add	r3, r1
 80048de:	601a      	str	r2, [r3, #0]
	for (int i=15;i>=1;i--){
 80048e0:	68fb      	ldr	r3, [r7, #12]
 80048e2:	3b01      	subs	r3, #1
 80048e4:	60fb      	str	r3, [r7, #12]
 80048e6:	68fb      	ldr	r3, [r7, #12]
 80048e8:	2b00      	cmp	r3, #0
 80048ea:	dcee      	bgt.n	80048ca <PositionSensor_update+0x12>

	// this takes the most time -> 1800 cycles with continuous read, twice that for
	//discontinuous. speed this up with your own SPI code. If we want to check health
	//of the chip we need to restart the continuous read. for that this fn needs to
	//be modified.
	ps->encoder_raw = Encoder_get16BitMechAngle_Single(1);
 80048ec:	2001      	movs	r0, #1
 80048ee:	f7fe fef0 	bl	80036d2 <Encoder_get16BitMechAngle_Single>
 80048f2:	4603      	mov	r3, r0
 80048f4:	461a      	mov	r2, r3
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40
	ps->encoder_raw = ps->encoder_raw>> 3;
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8004902:	08db      	lsrs	r3, r3, #3
 8004904:	b29a      	uxth	r2, r3
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40
	//linearize, calibrate if you need to
	//calculations are very fast, less than 500cycles.
	ps->mechRadians_singleTurn = ps->encoder_raw*TWO_PI_F/CPR_ENCODER;
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8004912:	ee07 3a90 	vmov	s15, r3
 8004916:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800491a:	ed9f 7a4a 	vldr	s14, [pc, #296]	@ 8004a44 <PositionSensor_update+0x18c>
 800491e:	ee27 7a87 	vmul.f32	s14, s15, s14
 8004922:	eddf 6a49 	vldr	s13, [pc, #292]	@ 8004a48 <PositionSensor_update+0x190>
 8004926:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	edc3 7a11 	vstr	s15, [r3, #68]	@ 0x44
	ps->elecRadians  = getElecAngleFromMechAngle(ps->mechRadians_singleTurn); 	//get electrical rads from mech rads
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	edd3 7a11 	vldr	s15, [r3, #68]	@ 0x44
 8004936:	eeb0 0a67 	vmov.f32	s0, s15
 800493a:	f000 f8c7 	bl	8004acc <getElecAngleFromMechAngle>
 800493e:	eef0 7a40 	vmov.f32	s15, s0
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	edc3 7a15 	vstr	s15, [r3, #84]	@ 0x54

	ps->delta_mechRadians_dt = ps->mechRadians_singleTurn - ps->prev_mechRadians_singleTurn;
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	ed93 7a11 	vldr	s14, [r3, #68]	@ 0x44
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	edd3 7a12 	vldr	s15, [r3, #72]	@ 0x48
 8004954:	ee77 7a67 	vsub.f32	s15, s14, s15
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	edc3 7a13 	vstr	s15, [r3, #76]	@ 0x4c
	int8_t rollover = 0;
 800495e:	2300      	movs	r3, #0
 8004960:	72fb      	strb	r3, [r7, #11]
	if(ps->delta_mechRadians_dt > PI_F){rollover = -1;}
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	edd3 7a13 	vldr	s15, [r3, #76]	@ 0x4c
 8004968:	ed9f 7a38 	vldr	s14, [pc, #224]	@ 8004a4c <PositionSensor_update+0x194>
 800496c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004970:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004974:	dd02      	ble.n	800497c <PositionSensor_update+0xc4>
 8004976:	23ff      	movs	r3, #255	@ 0xff
 8004978:	72fb      	strb	r3, [r7, #11]
 800497a:	e00b      	b.n	8004994 <PositionSensor_update+0xdc>
	else if(ps->delta_mechRadians_dt < -PI_F){rollover = 1;}
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	edd3 7a13 	vldr	s15, [r3, #76]	@ 0x4c
 8004982:	ed9f 7a33 	vldr	s14, [pc, #204]	@ 8004a50 <PositionSensor_update+0x198>
 8004986:	eef4 7ac7 	vcmpe.f32	s15, s14
 800498a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800498e:	d501      	bpl.n	8004994 <PositionSensor_update+0xdc>
 8004990:	2301      	movs	r3, #1
 8004992:	72fb      	strb	r3, [r7, #11]
	ps->turns += rollover;
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	f9b3 306c 	ldrsh.w	r3, [r3, #108]	@ 0x6c
 800499a:	b29a      	uxth	r2, r3
 800499c:	f997 300b 	ldrsb.w	r3, [r7, #11]
 80049a0:	b29b      	uxth	r3, r3
 80049a2:	4413      	add	r3, r2
 80049a4:	b29b      	uxth	r3, r3
 80049a6:	b21a      	sxth	r2, r3
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	f8a3 206c 	strh.w	r2, [r3, #108]	@ 0x6c

	ps->multiturn_mech_radians = ps->turns * TWO_PI_F + ps->mechRadians_singleTurn;
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	f9b3 306c 	ldrsh.w	r3, [r3, #108]	@ 0x6c
 80049b4:	ee07 3a90 	vmov	s15, r3
 80049b8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80049bc:	ed9f 7a21 	vldr	s14, [pc, #132]	@ 8004a44 <PositionSensor_update+0x18c>
 80049c0:	ee27 7a87 	vmul.f32	s14, s15, s14
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	edd3 7a11 	vldr	s15, [r3, #68]	@ 0x44
 80049ca:	ee77 7a27 	vadd.f32	s15, s14, s15
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	edc3 7a14 	vstr	s15, [r3, #80]	@ 0x50
	ps->prev_mechRadians_singleTurn = ps->mechRadians_singleTurn;
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	649a      	str	r2, [r3, #72]	@ 0x48

	ps->multiTurn_position[0] = ps->multiturn_mech_radians;
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	601a      	str	r2, [r3, #0]

	ps->velocity_radsec = (ps->multiTurn_position[0] - ps->multiTurn_position[POS_SAMPLES-1])/(dt*(float)(POS_SAMPLES-1));
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	ed93 7a00 	vldr	s14, [r3]
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	edd3 7a0f 	vldr	s15, [r3, #60]	@ 0x3c
 80049f0:	ee77 6a67 	vsub.f32	s13, s14, s15
 80049f4:	edd7 7a00 	vldr	s15, [r7]
 80049f8:	eeb2 7a0e 	vmov.f32	s14, #46	@ 0x41700000  15.0
 80049fc:	ee27 7a87 	vmul.f32	s14, s15, s14
 8004a00:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	edc3 7a16 	vstr	s15, [r3, #88]	@ 0x58


	ps->velocityRPM = ps->velocity_radsec * 60.0f/TWO_PI_F;
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	edd3 7a16 	vldr	s15, [r3, #88]	@ 0x58
 8004a10:	ed9f 7a10 	vldr	s14, [pc, #64]	@ 8004a54 <PositionSensor_update+0x19c>
 8004a14:	ee27 7a87 	vmul.f32	s14, s15, s14
 8004a18:	eddf 6a0a 	vldr	s13, [pc, #40]	@ 8004a44 <PositionSensor_update+0x18c>
 8004a1c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	edc3 7a19 	vstr	s15, [r3, #100]	@ 0x64
	ps->elec_velocity_radsec = POLE_PAIRS*ps->velocity_radsec;
 8004a26:	687b      	ldr	r3, [r7, #4]
 8004a28:	edd3 7a16 	vldr	s15, [r3, #88]	@ 0x58
 8004a2c:	eeb0 7a08 	vmov.f32	s14, #8	@ 0x40400000  3.0
 8004a30:	ee67 7a87 	vmul.f32	s15, s15, s14
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	edc3 7a1a 	vstr	s15, [r3, #104]	@ 0x68

}
 8004a3a:	bf00      	nop
 8004a3c:	3710      	adds	r7, #16
 8004a3e:	46bd      	mov	sp, r7
 8004a40:	bd80      	pop	{r7, pc}
 8004a42:	bf00      	nop
 8004a44:	40c90fda 	.word	0x40c90fda
 8004a48:	45000000 	.word	0x45000000
 8004a4c:	40490fd0 	.word	0x40490fd0
 8004a50:	c0490fd0 	.word	0xc0490fd0
 8004a54:	42700000 	.word	0x42700000

08004a58 <getAveragedVelocityRadSec>:


void getAveragedVelocityRadSec(PositionSensor *ps){
 8004a58:	b480      	push	{r7}
 8004a5a:	b083      	sub	sp, #12
 8004a5c:	af00      	add	r7, sp, #0
 8004a5e:	6078      	str	r0, [r7, #4]
	//averaging
	if (ps->avgingStarted==0){
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8004a66:	2b00      	cmp	r3, #0
 8004a68:	d115      	bne.n	8004a96 <getAveragedVelocityRadSec+0x3e>
		ps->avgIdx ++;
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8004a70:	3301      	adds	r3, #1
 8004a72:	b2da      	uxtb	r2, r3
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
		ps->avg_velocity_radsec = 0 ;
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	f04f 0200 	mov.w	r2, #0
 8004a80:	661a      	str	r2, [r3, #96]	@ 0x60
		if (ps->avgIdx >= 30){
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8004a88:	2b1d      	cmp	r3, #29
 8004a8a:	d918      	bls.n	8004abe <getAveragedVelocityRadSec+0x66>
			ps->avgingStarted = 1;
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	2201      	movs	r2, #1
 8004a90:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
		}
	}
	else{
		ps->avg_velocity_radsec = ps->avg_velocity_radsec + (ps->velocity_radsec - ps->avg_velocity_radsec)/EXP_FILTER_FACTOR;
	}
}
 8004a94:	e013      	b.n	8004abe <getAveragedVelocityRadSec+0x66>
		ps->avg_velocity_radsec = ps->avg_velocity_radsec + (ps->velocity_radsec - ps->avg_velocity_radsec)/EXP_FILTER_FACTOR;
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	ed93 7a18 	vldr	s14, [r3, #96]	@ 0x60
 8004a9c:	687b      	ldr	r3, [r7, #4]
 8004a9e:	edd3 6a16 	vldr	s13, [r3, #88]	@ 0x58
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	edd3 7a18 	vldr	s15, [r3, #96]	@ 0x60
 8004aa8:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8004aac:	eeb1 6a04 	vmov.f32	s12, #20	@ 0x40a00000  5.0
 8004ab0:	eec6 7a86 	vdiv.f32	s15, s13, s12
 8004ab4:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	edc3 7a18 	vstr	s15, [r3, #96]	@ 0x60
}
 8004abe:	bf00      	nop
 8004ac0:	370c      	adds	r7, #12
 8004ac2:	46bd      	mov	sp, r7
 8004ac4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ac8:	4770      	bx	lr
	...

08004acc <getElecAngleFromMechAngle>:

float getElecAngleFromMechAngle(float mechRadians){
 8004acc:	b480      	push	{r7}
 8004ace:	b087      	sub	sp, #28
 8004ad0:	af00      	add	r7, sp, #0
 8004ad2:	ed87 0a01 	vstr	s0, [r7, #4]
	int multiplier = (int)(mechRadians/MECH_RADS_PER_ELECTRICAL_REV);
 8004ad6:	ed97 7a01 	vldr	s14, [r7, #4]
 8004ada:	eddf 6a17 	vldr	s13, [pc, #92]	@ 8004b38 <getElecAngleFromMechAngle+0x6c>
 8004ade:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8004ae2:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8004ae6:	ee17 3a90 	vmov	r3, s15
 8004aea:	617b      	str	r3, [r7, #20]
	float delta_mechRadians = mechRadians - (multiplier * MECH_RADS_PER_ELECTRICAL_REV);
 8004aec:	697b      	ldr	r3, [r7, #20]
 8004aee:	ee07 3a90 	vmov	s15, r3
 8004af2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004af6:	ed9f 7a10 	vldr	s14, [pc, #64]	@ 8004b38 <getElecAngleFromMechAngle+0x6c>
 8004afa:	ee67 7a87 	vmul.f32	s15, s15, s14
 8004afe:	ed97 7a01 	vldr	s14, [r7, #4]
 8004b02:	ee77 7a67 	vsub.f32	s15, s14, s15
 8004b06:	edc7 7a04 	vstr	s15, [r7, #16]
	float elecRadians = (delta_mechRadians * TWO_PI_F)/MECH_RADS_PER_ELECTRICAL_REV;
 8004b0a:	edd7 7a04 	vldr	s15, [r7, #16]
 8004b0e:	ed9f 7a0b 	vldr	s14, [pc, #44]	@ 8004b3c <getElecAngleFromMechAngle+0x70>
 8004b12:	ee27 7a87 	vmul.f32	s14, s15, s14
 8004b16:	eddf 6a08 	vldr	s13, [pc, #32]	@ 8004b38 <getElecAngleFromMechAngle+0x6c>
 8004b1a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8004b1e:	edc7 7a03 	vstr	s15, [r7, #12]
	return elecRadians;
 8004b22:	68fb      	ldr	r3, [r7, #12]
 8004b24:	ee07 3a90 	vmov	s15, r3
}
 8004b28:	eeb0 0a67 	vmov.f32	s0, s15
 8004b2c:	371c      	adds	r7, #28
 8004b2e:	46bd      	mov	sp, r7
 8004b30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b34:	4770      	bx	lr
 8004b36:	bf00      	nop
 8004b38:	40060aa6 	.word	0x40060aa6
 8004b3c:	40c90fda 	.word	0x40c90fda

08004b40 <InitRampDutyStruct>:
 */

#include "Ramp.h"


void InitRampDutyStruct(RampDuty *ramp,uint16_t targetDuty,long rampUpTime,long rampDownTime,int16_t rampSteadyTime){
 8004b40:	b480      	push	{r7}
 8004b42:	b087      	sub	sp, #28
 8004b44:	af00      	add	r7, sp, #0
 8004b46:	60f8      	str	r0, [r7, #12]
 8004b48:	607a      	str	r2, [r7, #4]
 8004b4a:	603b      	str	r3, [r7, #0]
 8004b4c:	460b      	mov	r3, r1
 8004b4e:	817b      	strh	r3, [r7, #10]
	uint16_t totalSteps  = 0;
 8004b50:	2300      	movs	r3, #0
 8004b52:	82fb      	strh	r3, [r7, #22]
	ramp->ramp_callingTime_s = 0.020f;
 8004b54:	68fb      	ldr	r3, [r7, #12]
 8004b56:	4a3c      	ldr	r2, [pc, #240]	@ (8004c48 <InitRampDutyStruct+0x108>)
 8004b58:	629a      	str	r2, [r3, #40]	@ 0x28
	ramp->rampUpTime_ms = rampUpTime;
 8004b5a:	68fb      	ldr	r3, [r7, #12]
 8004b5c:	687a      	ldr	r2, [r7, #4]
 8004b5e:	615a      	str	r2, [r3, #20]
	ramp->rampDownTime_ms = rampDownTime;
 8004b60:	68fb      	ldr	r3, [r7, #12]
 8004b62:	683a      	ldr	r2, [r7, #0]
 8004b64:	619a      	str	r2, [r3, #24]
	ramp->steadyRunTime_s = rampSteadyTime; // in Seconds!
 8004b66:	68fb      	ldr	r3, [r7, #12]
 8004b68:	8c3a      	ldrh	r2, [r7, #32]
 8004b6a:	821a      	strh	r2, [r3, #16]
	ramp->finalTargetDuty = targetDuty;
 8004b6c:	68fb      	ldr	r3, [r7, #12]
 8004b6e:	897a      	ldrh	r2, [r7, #10]
 8004b70:	801a      	strh	r2, [r3, #0]
	ramp->currentDutyF = 0;
 8004b72:	68fb      	ldr	r3, [r7, #12]
 8004b74:	f04f 0200 	mov.w	r2, #0
 8004b78:	605a      	str	r2, [r3, #4]
	ramp->currentDuty = 0;
 8004b7a:	68fb      	ldr	r3, [r7, #12]
 8004b7c:	2200      	movs	r2, #0
 8004b7e:	805a      	strh	r2, [r3, #2]
	//For RampUp
	totalSteps = ramp->rampUpTime_ms/((uint16_t)(ramp->ramp_callingTime_s*1000));
 8004b80:	68fb      	ldr	r3, [r7, #12]
 8004b82:	695b      	ldr	r3, [r3, #20]
 8004b84:	68fa      	ldr	r2, [r7, #12]
 8004b86:	edd2 7a0a 	vldr	s15, [r2, #40]	@ 0x28
 8004b8a:	ed9f 7a30 	vldr	s14, [pc, #192]	@ 8004c4c <InitRampDutyStruct+0x10c>
 8004b8e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8004b92:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004b96:	ee17 2a90 	vmov	r2, s15
 8004b9a:	b292      	uxth	r2, r2
 8004b9c:	fb93 f3f2 	sdiv	r3, r3, r2
 8004ba0:	82fb      	strh	r3, [r7, #22]
	if (totalSteps == 0){
 8004ba2:	8afb      	ldrh	r3, [r7, #22]
 8004ba4:	2b00      	cmp	r3, #0
 8004ba6:	d101      	bne.n	8004bac <InitRampDutyStruct+0x6c>
		totalSteps = 1;
 8004ba8:	2301      	movs	r3, #1
 8004baa:	82fb      	strh	r3, [r7, #22]
	}
	ramp->dDuty_F_RU = ((float)ramp->finalTargetDuty)/totalSteps;
 8004bac:	68fb      	ldr	r3, [r7, #12]
 8004bae:	881b      	ldrh	r3, [r3, #0]
 8004bb0:	ee07 3a90 	vmov	s15, r3
 8004bb4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004bb8:	8afb      	ldrh	r3, [r7, #22]
 8004bba:	ee07 3a90 	vmov	s15, r3
 8004bbe:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8004bc2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004bc6:	68fb      	ldr	r3, [r7, #12]
 8004bc8:	edc3 7a02 	vstr	s15, [r3, #8]

	//For RampDown
	totalSteps = ramp->rampDownTime_ms/((uint16_t)(ramp->ramp_callingTime_s*1000));
 8004bcc:	68fb      	ldr	r3, [r7, #12]
 8004bce:	699b      	ldr	r3, [r3, #24]
 8004bd0:	68fa      	ldr	r2, [r7, #12]
 8004bd2:	edd2 7a0a 	vldr	s15, [r2, #40]	@ 0x28
 8004bd6:	ed9f 7a1d 	vldr	s14, [pc, #116]	@ 8004c4c <InitRampDutyStruct+0x10c>
 8004bda:	ee67 7a87 	vmul.f32	s15, s15, s14
 8004bde:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004be2:	ee17 2a90 	vmov	r2, s15
 8004be6:	b292      	uxth	r2, r2
 8004be8:	fb93 f3f2 	sdiv	r3, r3, r2
 8004bec:	82fb      	strh	r3, [r7, #22]
	if (totalSteps == 0){
 8004bee:	8afb      	ldrh	r3, [r7, #22]
 8004bf0:	2b00      	cmp	r3, #0
 8004bf2:	d101      	bne.n	8004bf8 <InitRampDutyStruct+0xb8>
		totalSteps = 1;
 8004bf4:	2301      	movs	r3, #1
 8004bf6:	82fb      	strh	r3, [r7, #22]
	}
	ramp->dDuty_F_RD = ((float)ramp->finalTargetDuty)/totalSteps;
 8004bf8:	68fb      	ldr	r3, [r7, #12]
 8004bfa:	881b      	ldrh	r3, [r3, #0]
 8004bfc:	ee07 3a90 	vmov	s15, r3
 8004c00:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004c04:	8afb      	ldrh	r3, [r7, #22]
 8004c06:	ee07 3a90 	vmov	s15, r3
 8004c0a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8004c0e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004c12:	68fb      	ldr	r3, [r7, #12]
 8004c14:	edc3 7a03 	vstr	s15, [r3, #12]

	ramp->rampPhase = RAMP_WAIT;
 8004c18:	68fb      	ldr	r3, [r7, #12]
 8004c1a:	2204      	movs	r2, #4
 8004c1c:	771a      	strb	r2, [r3, #28]

	ramp-> transitionTarget = 0;
 8004c1e:	68fb      	ldr	r3, [r7, #12]
 8004c20:	2200      	movs	r2, #0
 8004c22:	83da      	strh	r2, [r3, #30]
	ramp-> transitionTime_ms = 0;
 8004c24:	68fb      	ldr	r3, [r7, #12]
 8004c26:	2200      	movs	r2, #0
 8004c28:	841a      	strh	r2, [r3, #32]
	ramp-> dDuty_F_transition = 0;
 8004c2a:	68fb      	ldr	r3, [r7, #12]
 8004c2c:	f04f 0200 	mov.w	r2, #0
 8004c30:	625a      	str	r2, [r3, #36]	@ 0x24

	ramp->rampTimer = 0;
 8004c32:	68fb      	ldr	r3, [r7, #12]
 8004c34:	f04f 0200 	mov.w	r2, #0
 8004c38:	62da      	str	r2, [r3, #44]	@ 0x2c
}
 8004c3a:	bf00      	nop
 8004c3c:	371c      	adds	r7, #28
 8004c3e:	46bd      	mov	sp, r7
 8004c40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c44:	4770      	bx	lr
 8004c46:	bf00      	nop
 8004c48:	3ca3d70a 	.word	0x3ca3d70a
 8004c4c:	447a0000 	.word	0x447a0000

08004c50 <StartRampDuty>:


void StartRampDuty(RampDuty *ramp){
 8004c50:	b480      	push	{r7}
 8004c52:	b083      	sub	sp, #12
 8004c54:	af00      	add	r7, sp, #0
 8004c56:	6078      	str	r0, [r7, #4]
	ramp->rampPhase = RAMP_UP;
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	2200      	movs	r2, #0
 8004c5c:	771a      	strb	r2, [r3, #28]
}
 8004c5e:	bf00      	nop
 8004c60:	370c      	adds	r7, #12
 8004c62:	46bd      	mov	sp, r7
 8004c64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c68:	4770      	bx	lr

08004c6a <StartRampDownDuty>:

void StartRampDownDuty(RampDuty *ramp){
 8004c6a:	b480      	push	{r7}
 8004c6c:	b083      	sub	sp, #12
 8004c6e:	af00      	add	r7, sp, #0
 8004c70:	6078      	str	r0, [r7, #4]
	ramp->rampPhase = RAMP_DOWN;
 8004c72:	687b      	ldr	r3, [r7, #4]
 8004c74:	2201      	movs	r2, #1
 8004c76:	771a      	strb	r2, [r3, #28]
	ramp->rampTimer = 0;
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	f04f 0200 	mov.w	r2, #0
 8004c7e:	62da      	str	r2, [r3, #44]	@ 0x2c
}
 8004c80:	bf00      	nop
 8004c82:	370c      	adds	r7, #12
 8004c84:	46bd      	mov	sp, r7
 8004c86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c8a:	4770      	bx	lr

08004c8c <StopRampDuty>:

void StopRampDuty(RampDuty *ramp){
 8004c8c:	b480      	push	{r7}
 8004c8e:	b083      	sub	sp, #12
 8004c90:	af00      	add	r7, sp, #0
 8004c92:	6078      	str	r0, [r7, #4]
	ramp->rampPhase = RAMP_WAIT;
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	2204      	movs	r2, #4
 8004c98:	771a      	strb	r2, [r3, #28]
	ramp->currentDutyF = 0;
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	f04f 0200 	mov.w	r2, #0
 8004ca0:	605a      	str	r2, [r3, #4]
	ramp->currentDuty = 0;
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	2200      	movs	r2, #0
 8004ca6:	805a      	strh	r2, [r3, #2]
	ramp->rampTimer = 0;
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	f04f 0200 	mov.w	r2, #0
 8004cae:	62da      	str	r2, [r3, #44]	@ 0x2c
}
 8004cb0:	bf00      	nop
 8004cb2:	370c      	adds	r7, #12
 8004cb4:	46bd      	mov	sp, r7
 8004cb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cba:	4770      	bx	lr

08004cbc <ExecRampDuty>:

	ramp->rampTimer = 0;
}


void ExecRampDuty(RampDuty *ramp){
 8004cbc:	b480      	push	{r7}
 8004cbe:	b083      	sub	sp, #12
 8004cc0:	af00      	add	r7, sp, #0
 8004cc2:	6078      	str	r0, [r7, #4]

	if(ramp->rampPhase != RAMP_WAIT){
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	7f1b      	ldrb	r3, [r3, #28]
 8004cc8:	2b04      	cmp	r3, #4
 8004cca:	d00a      	beq.n	8004ce2 <ExecRampDuty+0x26>
		ramp->rampTimer += 	ramp->ramp_callingTime_s;
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	ed93 7a0b 	vldr	s14, [r3, #44]	@ 0x2c
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	edd3 7a0a 	vldr	s15, [r3, #40]	@ 0x28
 8004cd8:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	edc3 7a0b 	vstr	s15, [r3, #44]	@ 0x2c
	}

	if (ramp->rampPhase == RAMP_UP){
 8004ce2:	687b      	ldr	r3, [r7, #4]
 8004ce4:	7f1b      	ldrb	r3, [r3, #28]
 8004ce6:	2b00      	cmp	r3, #0
 8004ce8:	d12e      	bne.n	8004d48 <ExecRampDuty+0x8c>
		if(ramp->currentDuty <= ramp->finalTargetDuty){
 8004cea:	687b      	ldr	r3, [r7, #4]
 8004cec:	885a      	ldrh	r2, [r3, #2]
 8004cee:	687b      	ldr	r3, [r7, #4]
 8004cf0:	881b      	ldrh	r3, [r3, #0]
 8004cf2:	429a      	cmp	r2, r3
 8004cf4:	f200 80cf 	bhi.w	8004e96 <ExecRampDuty+0x1da>
			ramp->currentDutyF += ramp->dDuty_F_RU;
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	ed93 7a01 	vldr	s14, [r3, #4]
 8004cfe:	687b      	ldr	r3, [r7, #4]
 8004d00:	edd3 7a02 	vldr	s15, [r3, #8]
 8004d04:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	edc3 7a01 	vstr	s15, [r3, #4]
			ramp->currentDuty = (uint16_t)(ramp->currentDutyF);
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	edd3 7a01 	vldr	s15, [r3, #4]
 8004d14:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004d18:	ee17 3a90 	vmov	r3, s15
 8004d1c:	b29a      	uxth	r2, r3
 8004d1e:	687b      	ldr	r3, [r7, #4]
 8004d20:	805a      	strh	r2, [r3, #2]
			if(ramp->currentDuty >= ramp->finalTargetDuty){
 8004d22:	687b      	ldr	r3, [r7, #4]
 8004d24:	885a      	ldrh	r2, [r3, #2]
 8004d26:	687b      	ldr	r3, [r7, #4]
 8004d28:	881b      	ldrh	r3, [r3, #0]
 8004d2a:	429a      	cmp	r2, r3
 8004d2c:	f0c0 80b3 	bcc.w	8004e96 <ExecRampDuty+0x1da>
				ramp->currentDuty  = ramp->finalTargetDuty;
 8004d30:	687b      	ldr	r3, [r7, #4]
 8004d32:	881a      	ldrh	r2, [r3, #0]
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	805a      	strh	r2, [r3, #2]
				ramp->rampPhase = RAMP_STEADY;
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	2202      	movs	r2, #2
 8004d3c:	771a      	strb	r2, [r3, #28]
				ramp->rampTimer = 0;
 8004d3e:	687b      	ldr	r3, [r7, #4]
 8004d40:	f04f 0200 	mov.w	r2, #0
 8004d44:	62da      	str	r2, [r3, #44]	@ 0x2c
	}
	else{
		//Do Nothing
	}

}
 8004d46:	e0a6      	b.n	8004e96 <ExecRampDuty+0x1da>
	else if (ramp->rampPhase == RAMP_STEADY){
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	7f1b      	ldrb	r3, [r3, #28]
 8004d4c:	2b02      	cmp	r3, #2
 8004d4e:	d11e      	bne.n	8004d8e <ExecRampDuty+0xd2>
		if (ramp->steadyRunTime_s != RUN_FOREVER){
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	f9b3 3010 	ldrsh.w	r3, [r3, #16]
 8004d56:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8004d5a:	f000 809c 	beq.w	8004e96 <ExecRampDuty+0x1da>
			if (ramp->rampTimer >= ramp->steadyRunTime_s){
 8004d5e:	687b      	ldr	r3, [r7, #4]
 8004d60:	ed93 7a0b 	vldr	s14, [r3, #44]	@ 0x2c
 8004d64:	687b      	ldr	r3, [r7, #4]
 8004d66:	f9b3 3010 	ldrsh.w	r3, [r3, #16]
 8004d6a:	ee07 3a90 	vmov	s15, r3
 8004d6e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004d72:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8004d76:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004d7a:	da00      	bge.n	8004d7e <ExecRampDuty+0xc2>
}
 8004d7c:	e08b      	b.n	8004e96 <ExecRampDuty+0x1da>
				ramp->rampPhase = RAMP_DOWN;
 8004d7e:	687b      	ldr	r3, [r7, #4]
 8004d80:	2201      	movs	r2, #1
 8004d82:	771a      	strb	r2, [r3, #28]
				ramp->rampTimer = 0;
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	f04f 0200 	mov.w	r2, #0
 8004d8a:	62da      	str	r2, [r3, #44]	@ 0x2c
}
 8004d8c:	e083      	b.n	8004e96 <ExecRampDuty+0x1da>
	else if (ramp->rampPhase == RAMP_CHANGE){
 8004d8e:	687b      	ldr	r3, [r7, #4]
 8004d90:	7f1b      	ldrb	r3, [r3, #28]
 8004d92:	2b08      	cmp	r3, #8
 8004d94:	d158      	bne.n	8004e48 <ExecRampDuty+0x18c>
		if(ramp->currentDuty < ramp->transitionTarget){
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	885a      	ldrh	r2, [r3, #2]
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	8bdb      	ldrh	r3, [r3, #30]
 8004d9e:	429a      	cmp	r2, r3
 8004da0:	d225      	bcs.n	8004dee <ExecRampDuty+0x132>
			ramp->currentDutyF += ramp->dDuty_F_transition;
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	ed93 7a01 	vldr	s14, [r3, #4]
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	edd3 7a09 	vldr	s15, [r3, #36]	@ 0x24
 8004dae:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	edc3 7a01 	vstr	s15, [r3, #4]
			ramp->currentDuty = (uint16_t)(ramp->currentDutyF);
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	edd3 7a01 	vldr	s15, [r3, #4]
 8004dbe:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004dc2:	ee17 3a90 	vmov	r3, s15
 8004dc6:	b29a      	uxth	r2, r3
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	805a      	strh	r2, [r3, #2]
			if(ramp->currentDuty >= ramp->transitionTarget){
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	885a      	ldrh	r2, [r3, #2]
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	8bdb      	ldrh	r3, [r3, #30]
 8004dd4:	429a      	cmp	r2, r3
 8004dd6:	d30a      	bcc.n	8004dee <ExecRampDuty+0x132>
				ramp->currentDuty  = ramp->transitionTarget;
 8004dd8:	687b      	ldr	r3, [r7, #4]
 8004dda:	8bda      	ldrh	r2, [r3, #30]
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	805a      	strh	r2, [r3, #2]
				ramp->rampPhase = RAMP_STEADY;
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	2202      	movs	r2, #2
 8004de4:	771a      	strb	r2, [r3, #28]
				ramp->rampTimer = 0;
 8004de6:	687b      	ldr	r3, [r7, #4]
 8004de8:	f04f 0200 	mov.w	r2, #0
 8004dec:	62da      	str	r2, [r3, #44]	@ 0x2c
		if(ramp->currentDuty > ramp->transitionTarget){
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	885a      	ldrh	r2, [r3, #2]
 8004df2:	687b      	ldr	r3, [r7, #4]
 8004df4:	8bdb      	ldrh	r3, [r3, #30]
 8004df6:	429a      	cmp	r2, r3
 8004df8:	d94d      	bls.n	8004e96 <ExecRampDuty+0x1da>
			ramp->currentDutyF -= ramp->dDuty_F_transition;
 8004dfa:	687b      	ldr	r3, [r7, #4]
 8004dfc:	ed93 7a01 	vldr	s14, [r3, #4]
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	edd3 7a09 	vldr	s15, [r3, #36]	@ 0x24
 8004e06:	ee77 7a67 	vsub.f32	s15, s14, s15
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	edc3 7a01 	vstr	s15, [r3, #4]
			ramp->currentDuty = (uint16_t)(ramp->currentDutyF);
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	edd3 7a01 	vldr	s15, [r3, #4]
 8004e16:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004e1a:	ee17 3a90 	vmov	r3, s15
 8004e1e:	b29a      	uxth	r2, r3
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	805a      	strh	r2, [r3, #2]
			if(ramp->currentDuty <= ramp->transitionTarget){
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	885a      	ldrh	r2, [r3, #2]
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	8bdb      	ldrh	r3, [r3, #30]
 8004e2c:	429a      	cmp	r2, r3
 8004e2e:	d832      	bhi.n	8004e96 <ExecRampDuty+0x1da>
				ramp->currentDuty  = ramp->transitionTarget;
 8004e30:	687b      	ldr	r3, [r7, #4]
 8004e32:	8bda      	ldrh	r2, [r3, #30]
 8004e34:	687b      	ldr	r3, [r7, #4]
 8004e36:	805a      	strh	r2, [r3, #2]
				ramp->rampPhase = RAMP_STEADY;
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	2202      	movs	r2, #2
 8004e3c:	771a      	strb	r2, [r3, #28]
				ramp->rampTimer = 0;
 8004e3e:	687b      	ldr	r3, [r7, #4]
 8004e40:	f04f 0200 	mov.w	r2, #0
 8004e44:	62da      	str	r2, [r3, #44]	@ 0x2c
}
 8004e46:	e026      	b.n	8004e96 <ExecRampDuty+0x1da>
	else if (ramp->rampPhase == RAMP_DOWN){
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	7f1b      	ldrb	r3, [r3, #28]
 8004e4c:	2b01      	cmp	r3, #1
 8004e4e:	d122      	bne.n	8004e96 <ExecRampDuty+0x1da>
			ramp->currentDutyF -= ramp->dDuty_F_RD;
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	ed93 7a01 	vldr	s14, [r3, #4]
 8004e56:	687b      	ldr	r3, [r7, #4]
 8004e58:	edd3 7a03 	vldr	s15, [r3, #12]
 8004e5c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	edc3 7a01 	vstr	s15, [r3, #4]
			ramp->currentDuty = (uint16_t)(ramp->currentDutyF);
 8004e66:	687b      	ldr	r3, [r7, #4]
 8004e68:	edd3 7a01 	vldr	s15, [r3, #4]
 8004e6c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004e70:	ee17 3a90 	vmov	r3, s15
 8004e74:	b29a      	uxth	r2, r3
 8004e76:	687b      	ldr	r3, [r7, #4]
 8004e78:	805a      	strh	r2, [r3, #2]
			if(ramp->currentDuty <= 0){
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	885b      	ldrh	r3, [r3, #2]
 8004e7e:	2b00      	cmp	r3, #0
 8004e80:	d109      	bne.n	8004e96 <ExecRampDuty+0x1da>
				ramp->currentDuty  = 0;
 8004e82:	687b      	ldr	r3, [r7, #4]
 8004e84:	2200      	movs	r2, #0
 8004e86:	805a      	strh	r2, [r3, #2]
				ramp->rampPhase = RAMP_WAIT;
 8004e88:	687b      	ldr	r3, [r7, #4]
 8004e8a:	2204      	movs	r2, #4
 8004e8c:	771a      	strb	r2, [r3, #28]
				ramp->rampTimer = 0;
 8004e8e:	687b      	ldr	r3, [r7, #4]
 8004e90:	f04f 0200 	mov.w	r2, #0
 8004e94:	62da      	str	r2, [r3, #44]	@ 0x2c
}
 8004e96:	bf00      	nop
 8004e98:	370c      	adds	r7, #12
 8004e9a:	46bd      	mov	sp, r7
 8004e9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ea0:	4770      	bx	lr
	...

08004ea4 <ChangeDuty>:


void  ChangeDuty(RampDuty *r){
 8004ea4:	b480      	push	{r7}
 8004ea6:	b085      	sub	sp, #20
 8004ea8:	af00      	add	r7, sp, #0
 8004eaa:	6078      	str	r0, [r7, #4]
	uint16_t deltaDuty = 0;
 8004eac:	2300      	movs	r3, #0
 8004eae:	81fb      	strh	r3, [r7, #14]
	uint16_t totalSteps = 0;
 8004eb0:	2300      	movs	r3, #0
 8004eb2:	81bb      	strh	r3, [r7, #12]
	if (r->transitionTarget > r->currentDuty){
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	8bda      	ldrh	r2, [r3, #30]
 8004eb8:	687b      	ldr	r3, [r7, #4]
 8004eba:	885b      	ldrh	r3, [r3, #2]
 8004ebc:	429a      	cmp	r2, r3
 8004ebe:	d906      	bls.n	8004ece <ChangeDuty+0x2a>
		deltaDuty = r->transitionTarget - r->currentDuty;
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	8bda      	ldrh	r2, [r3, #30]
 8004ec4:	687b      	ldr	r3, [r7, #4]
 8004ec6:	885b      	ldrh	r3, [r3, #2]
 8004ec8:	1ad3      	subs	r3, r2, r3
 8004eca:	81fb      	strh	r3, [r7, #14]
 8004ecc:	e00e      	b.n	8004eec <ChangeDuty+0x48>
	}else if (r->transitionTarget < r->currentDuty){
 8004ece:	687b      	ldr	r3, [r7, #4]
 8004ed0:	8bda      	ldrh	r2, [r3, #30]
 8004ed2:	687b      	ldr	r3, [r7, #4]
 8004ed4:	885b      	ldrh	r3, [r3, #2]
 8004ed6:	429a      	cmp	r2, r3
 8004ed8:	d206      	bcs.n	8004ee8 <ChangeDuty+0x44>
		deltaDuty = r->currentDuty - r->transitionTarget;
 8004eda:	687b      	ldr	r3, [r7, #4]
 8004edc:	885a      	ldrh	r2, [r3, #2]
 8004ede:	687b      	ldr	r3, [r7, #4]
 8004ee0:	8bdb      	ldrh	r3, [r3, #30]
 8004ee2:	1ad3      	subs	r3, r2, r3
 8004ee4:	81fb      	strh	r3, [r7, #14]
 8004ee6:	e001      	b.n	8004eec <ChangeDuty+0x48>
	}else{
		deltaDuty = 0;
 8004ee8:	2300      	movs	r3, #0
 8004eea:	81fb      	strh	r3, [r7, #14]
	}
	totalSteps = r->transitionTime_ms/((uint16_t)(r->ramp_callingTime_s*1000));
 8004eec:	687b      	ldr	r3, [r7, #4]
 8004eee:	8c1a      	ldrh	r2, [r3, #32]
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	edd3 7a0a 	vldr	s15, [r3, #40]	@ 0x28
 8004ef6:	ed9f 7a13 	vldr	s14, [pc, #76]	@ 8004f44 <ChangeDuty+0xa0>
 8004efa:	ee67 7a87 	vmul.f32	s15, s15, s14
 8004efe:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004f02:	ee17 3a90 	vmov	r3, s15
 8004f06:	b29b      	uxth	r3, r3
 8004f08:	fbb2 f3f3 	udiv	r3, r2, r3
 8004f0c:	81bb      	strh	r3, [r7, #12]
	if (totalSteps == 0){
 8004f0e:	89bb      	ldrh	r3, [r7, #12]
 8004f10:	2b00      	cmp	r3, #0
 8004f12:	d101      	bne.n	8004f18 <ChangeDuty+0x74>
		totalSteps = 1;
 8004f14:	2301      	movs	r3, #1
 8004f16:	81bb      	strh	r3, [r7, #12]
	}
	r->dDuty_F_transition = (float)deltaDuty/totalSteps;
 8004f18:	89fb      	ldrh	r3, [r7, #14]
 8004f1a:	ee07 3a90 	vmov	s15, r3
 8004f1e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004f22:	89bb      	ldrh	r3, [r7, #12]
 8004f24:	ee07 3a90 	vmov	s15, r3
 8004f28:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8004f2c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	edc3 7a09 	vstr	s15, [r3, #36]	@ 0x24
}
 8004f36:	bf00      	nop
 8004f38:	3714      	adds	r7, #20
 8004f3a:	46bd      	mov	sp, r7
 8004f3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f40:	4770      	bx	lr
 8004f42:	bf00      	nop
 8004f44:	447a0000 	.word	0x447a0000

08004f48 <Recalculate_RampDuty_RampRates>:

// when we get a change Duty, we want to do ramp UP/ramp Down times with that
// new target.
void Recalculate_RampDuty_RampRates(RampDuty *ramp,uint16_t newTarget){
 8004f48:	b480      	push	{r7}
 8004f4a:	b085      	sub	sp, #20
 8004f4c:	af00      	add	r7, sp, #0
 8004f4e:	6078      	str	r0, [r7, #4]
 8004f50:	460b      	mov	r3, r1
 8004f52:	807b      	strh	r3, [r7, #2]
	uint16_t totalSteps = 0;
 8004f54:	2300      	movs	r3, #0
 8004f56:	81fb      	strh	r3, [r7, #14]
	//For RampUp
	ramp->finalTargetDuty = newTarget;
 8004f58:	687b      	ldr	r3, [r7, #4]
 8004f5a:	887a      	ldrh	r2, [r7, #2]
 8004f5c:	801a      	strh	r2, [r3, #0]
	totalSteps = ramp->rampUpTime_ms/((uint16_t)(ramp->ramp_callingTime_s*1000));
 8004f5e:	687b      	ldr	r3, [r7, #4]
 8004f60:	695b      	ldr	r3, [r3, #20]
 8004f62:	687a      	ldr	r2, [r7, #4]
 8004f64:	edd2 7a0a 	vldr	s15, [r2, #40]	@ 0x28
 8004f68:	ed9f 7a26 	vldr	s14, [pc, #152]	@ 8005004 <Recalculate_RampDuty_RampRates+0xbc>
 8004f6c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8004f70:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004f74:	ee17 2a90 	vmov	r2, s15
 8004f78:	b292      	uxth	r2, r2
 8004f7a:	fb93 f3f2 	sdiv	r3, r3, r2
 8004f7e:	81fb      	strh	r3, [r7, #14]
	if (totalSteps == 0){
 8004f80:	89fb      	ldrh	r3, [r7, #14]
 8004f82:	2b00      	cmp	r3, #0
 8004f84:	d101      	bne.n	8004f8a <Recalculate_RampDuty_RampRates+0x42>
		totalSteps = 1;
 8004f86:	2301      	movs	r3, #1
 8004f88:	81fb      	strh	r3, [r7, #14]
	}
	ramp->dDuty_F_RU = ((float)ramp->finalTargetDuty)/totalSteps;
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	881b      	ldrh	r3, [r3, #0]
 8004f8e:	ee07 3a90 	vmov	s15, r3
 8004f92:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004f96:	89fb      	ldrh	r3, [r7, #14]
 8004f98:	ee07 3a90 	vmov	s15, r3
 8004f9c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8004fa0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004fa4:	687b      	ldr	r3, [r7, #4]
 8004fa6:	edc3 7a02 	vstr	s15, [r3, #8]

	//For RampDown
	totalSteps = ramp->rampDownTime_ms/((uint16_t)(ramp->ramp_callingTime_s*1000));
 8004faa:	687b      	ldr	r3, [r7, #4]
 8004fac:	699b      	ldr	r3, [r3, #24]
 8004fae:	687a      	ldr	r2, [r7, #4]
 8004fb0:	edd2 7a0a 	vldr	s15, [r2, #40]	@ 0x28
 8004fb4:	ed9f 7a13 	vldr	s14, [pc, #76]	@ 8005004 <Recalculate_RampDuty_RampRates+0xbc>
 8004fb8:	ee67 7a87 	vmul.f32	s15, s15, s14
 8004fbc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004fc0:	ee17 2a90 	vmov	r2, s15
 8004fc4:	b292      	uxth	r2, r2
 8004fc6:	fb93 f3f2 	sdiv	r3, r3, r2
 8004fca:	81fb      	strh	r3, [r7, #14]
	if (totalSteps == 0){
 8004fcc:	89fb      	ldrh	r3, [r7, #14]
 8004fce:	2b00      	cmp	r3, #0
 8004fd0:	d101      	bne.n	8004fd6 <Recalculate_RampDuty_RampRates+0x8e>
		totalSteps = 1;
 8004fd2:	2301      	movs	r3, #1
 8004fd4:	81fb      	strh	r3, [r7, #14]
	}
	ramp->dDuty_F_RD = ((float)ramp->finalTargetDuty)/totalSteps;
 8004fd6:	687b      	ldr	r3, [r7, #4]
 8004fd8:	881b      	ldrh	r3, [r3, #0]
 8004fda:	ee07 3a90 	vmov	s15, r3
 8004fde:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004fe2:	89fb      	ldrh	r3, [r7, #14]
 8004fe4:	ee07 3a90 	vmov	s15, r3
 8004fe8:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8004fec:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	edc3 7a03 	vstr	s15, [r3, #12]
}
 8004ff6:	bf00      	nop
 8004ff8:	3714      	adds	r7, #20
 8004ffa:	46bd      	mov	sp, r7
 8004ffc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005000:	4770      	bx	lr
 8005002:	bf00      	nop
 8005004:	447a0000 	.word	0x447a0000

08005008 <InitRampRPMStruct>:
 *      Author: harsha
 */

#include "Ramp.h"

void InitRampRPMStruct(RampRPM *ramp,uint16_t targetRPM,float rampUpTime,float rampDownTime,float rampSteadyTime){
 8005008:	b480      	push	{r7}
 800500a:	b089      	sub	sp, #36	@ 0x24
 800500c:	af00      	add	r7, sp, #0
 800500e:	6178      	str	r0, [r7, #20]
 8005010:	460b      	mov	r3, r1
 8005012:	ed87 0a03 	vstr	s0, [r7, #12]
 8005016:	edc7 0a02 	vstr	s1, [r7, #8]
 800501a:	ed87 1a01 	vstr	s2, [r7, #4]
 800501e:	827b      	strh	r3, [r7, #18]
	uint16_t totalSteps  = 0;
 8005020:	2300      	movs	r3, #0
 8005022:	83fb      	strh	r3, [r7, #30]
	ramp->ramp_callingTime_s = 0.020f;
 8005024:	697b      	ldr	r3, [r7, #20]
 8005026:	4a37      	ldr	r2, [pc, #220]	@ (8005104 <InitRampRPMStruct+0xfc>)
 8005028:	629a      	str	r2, [r3, #40]	@ 0x28
	ramp->rampUpTime_s = rampUpTime;
 800502a:	697b      	ldr	r3, [r7, #20]
 800502c:	68fa      	ldr	r2, [r7, #12]
 800502e:	621a      	str	r2, [r3, #32]
	ramp->rampDownTime_s = rampDownTime;
 8005030:	697b      	ldr	r3, [r7, #20]
 8005032:	68ba      	ldr	r2, [r7, #8]
 8005034:	625a      	str	r2, [r3, #36]	@ 0x24
	ramp->steadyRunTime_s = rampSteadyTime;
 8005036:	697b      	ldr	r3, [r7, #20]
 8005038:	687a      	ldr	r2, [r7, #4]
 800503a:	61da      	str	r2, [r3, #28]

	ramp->finalTargetRPM = targetRPM;
 800503c:	697b      	ldr	r3, [r7, #20]
 800503e:	8a7a      	ldrh	r2, [r7, #18]
 8005040:	801a      	strh	r2, [r3, #0]
	ramp->instTargetRPM_F = 0;
 8005042:	697b      	ldr	r3, [r7, #20]
 8005044:	f04f 0200 	mov.w	r2, #0
 8005048:	605a      	str	r2, [r3, #4]
	//For RampUp
	totalSteps = (uint16_t)(ramp->rampUpTime_s/ramp->ramp_callingTime_s);
 800504a:	697b      	ldr	r3, [r7, #20]
 800504c:	edd3 6a08 	vldr	s13, [r3, #32]
 8005050:	697b      	ldr	r3, [r7, #20]
 8005052:	ed93 7a0a 	vldr	s14, [r3, #40]	@ 0x28
 8005056:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800505a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800505e:	ee17 3a90 	vmov	r3, s15
 8005062:	83fb      	strh	r3, [r7, #30]
	if (totalSteps == 0){
 8005064:	8bfb      	ldrh	r3, [r7, #30]
 8005066:	2b00      	cmp	r3, #0
 8005068:	d101      	bne.n	800506e <InitRampRPMStruct+0x66>
		totalSteps = 1;
 800506a:	2301      	movs	r3, #1
 800506c:	83fb      	strh	r3, [r7, #30]
	}
	ramp->dRPM_F_RU = ((float)ramp->finalTargetRPM)/totalSteps;
 800506e:	697b      	ldr	r3, [r7, #20]
 8005070:	881b      	ldrh	r3, [r3, #0]
 8005072:	ee07 3a90 	vmov	s15, r3
 8005076:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800507a:	8bfb      	ldrh	r3, [r7, #30]
 800507c:	ee07 3a90 	vmov	s15, r3
 8005080:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8005084:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005088:	697b      	ldr	r3, [r7, #20]
 800508a:	edc3 7a02 	vstr	s15, [r3, #8]

	//For RampDown
	totalSteps = (uint16_t)(ramp->rampDownTime_s/ramp->ramp_callingTime_s);
 800508e:	697b      	ldr	r3, [r7, #20]
 8005090:	edd3 6a09 	vldr	s13, [r3, #36]	@ 0x24
 8005094:	697b      	ldr	r3, [r7, #20]
 8005096:	ed93 7a0a 	vldr	s14, [r3, #40]	@ 0x28
 800509a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800509e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80050a2:	ee17 3a90 	vmov	r3, s15
 80050a6:	83fb      	strh	r3, [r7, #30]
	if (totalSteps == 0){
 80050a8:	8bfb      	ldrh	r3, [r7, #30]
 80050aa:	2b00      	cmp	r3, #0
 80050ac:	d101      	bne.n	80050b2 <InitRampRPMStruct+0xaa>
		totalSteps = 1;
 80050ae:	2301      	movs	r3, #1
 80050b0:	83fb      	strh	r3, [r7, #30]
	}
	ramp->dRPM_F_RD = ((float)ramp->finalTargetRPM)/totalSteps;
 80050b2:	697b      	ldr	r3, [r7, #20]
 80050b4:	881b      	ldrh	r3, [r3, #0]
 80050b6:	ee07 3a90 	vmov	s15, r3
 80050ba:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80050be:	8bfb      	ldrh	r3, [r7, #30]
 80050c0:	ee07 3a90 	vmov	s15, r3
 80050c4:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80050c8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80050cc:	697b      	ldr	r3, [r7, #20]
 80050ce:	edc3 7a03 	vstr	s15, [r3, #12]

	ramp->rampPhase = RAMP_WAIT;
 80050d2:	697b      	ldr	r3, [r7, #20]
 80050d4:	2204      	movs	r2, #4
 80050d6:	741a      	strb	r2, [r3, #16]
	ramp->rampTimer = 0;
 80050d8:	697b      	ldr	r3, [r7, #20]
 80050da:	f04f 0200 	mov.w	r2, #0
 80050de:	62da      	str	r2, [r3, #44]	@ 0x2c

	ramp-> transitionTarget = 0;
 80050e0:	697b      	ldr	r3, [r7, #20]
 80050e2:	2200      	movs	r2, #0
 80050e4:	825a      	strh	r2, [r3, #18]
	ramp-> transitionTime_s = 0;
 80050e6:	697b      	ldr	r3, [r7, #20]
 80050e8:	f04f 0200 	mov.w	r2, #0
 80050ec:	615a      	str	r2, [r3, #20]
	ramp-> dRPM_F_transition = 0;
 80050ee:	697b      	ldr	r3, [r7, #20]
 80050f0:	f04f 0200 	mov.w	r2, #0
 80050f4:	619a      	str	r2, [r3, #24]

}
 80050f6:	bf00      	nop
 80050f8:	3724      	adds	r7, #36	@ 0x24
 80050fa:	46bd      	mov	sp, r7
 80050fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005100:	4770      	bx	lr
 8005102:	bf00      	nop
 8005104:	3ca3d70a 	.word	0x3ca3d70a

08005108 <StartRampRPM>:
void StartRampRPM(RampRPM *ramp){
 8005108:	b480      	push	{r7}
 800510a:	b083      	sub	sp, #12
 800510c:	af00      	add	r7, sp, #0
 800510e:	6078      	str	r0, [r7, #4]
	ramp->rampPhase = RAMP_UP;
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	2200      	movs	r2, #0
 8005114:	741a      	strb	r2, [r3, #16]
}
 8005116:	bf00      	nop
 8005118:	370c      	adds	r7, #12
 800511a:	46bd      	mov	sp, r7
 800511c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005120:	4770      	bx	lr

08005122 <StartRampDownRPM>:

void StartRampDownRPM(RampRPM *ramp){
 8005122:	b480      	push	{r7}
 8005124:	b083      	sub	sp, #12
 8005126:	af00      	add	r7, sp, #0
 8005128:	6078      	str	r0, [r7, #4]
	ramp->rampPhase = RAMP_DOWN;
 800512a:	687b      	ldr	r3, [r7, #4]
 800512c:	2201      	movs	r2, #1
 800512e:	741a      	strb	r2, [r3, #16]
}
 8005130:	bf00      	nop
 8005132:	370c      	adds	r7, #12
 8005134:	46bd      	mov	sp, r7
 8005136:	f85d 7b04 	ldr.w	r7, [sp], #4
 800513a:	4770      	bx	lr

0800513c <StopRampRPM>:

void StopRampRPM(RampRPM *ramp){
 800513c:	b480      	push	{r7}
 800513e:	b083      	sub	sp, #12
 8005140:	af00      	add	r7, sp, #0
 8005142:	6078      	str	r0, [r7, #4]
	ramp->rampPhase = RAMP_WAIT;
 8005144:	687b      	ldr	r3, [r7, #4]
 8005146:	2204      	movs	r2, #4
 8005148:	741a      	strb	r2, [r3, #16]
}
 800514a:	bf00      	nop
 800514c:	370c      	adds	r7, #12
 800514e:	46bd      	mov	sp, r7
 8005150:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005154:	4770      	bx	lr

08005156 <ExecRampRPM>:
	ramp->rampPhase = RAMP_WAIT;
	ramp->rampTimer = 0;
}


void ExecRampRPM(RampRPM *ramp){
 8005156:	b480      	push	{r7}
 8005158:	b083      	sub	sp, #12
 800515a:	af00      	add	r7, sp, #0
 800515c:	6078      	str	r0, [r7, #4]
	if(ramp->rampPhase != RAMP_WAIT){
 800515e:	687b      	ldr	r3, [r7, #4]
 8005160:	7c1b      	ldrb	r3, [r3, #16]
 8005162:	2b04      	cmp	r3, #4
 8005164:	d00a      	beq.n	800517c <ExecRampRPM+0x26>
		ramp->rampTimer += 	ramp->ramp_callingTime_s;
 8005166:	687b      	ldr	r3, [r7, #4]
 8005168:	ed93 7a0b 	vldr	s14, [r3, #44]	@ 0x2c
 800516c:	687b      	ldr	r3, [r7, #4]
 800516e:	edd3 7a0a 	vldr	s15, [r3, #40]	@ 0x28
 8005172:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005176:	687b      	ldr	r3, [r7, #4]
 8005178:	edc3 7a0b 	vstr	s15, [r3, #44]	@ 0x2c
	}

	if (ramp->rampPhase == RAMP_UP){
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	7c1b      	ldrb	r3, [r3, #16]
 8005180:	2b00      	cmp	r3, #0
 8005182:	d139      	bne.n	80051f8 <ExecRampRPM+0xa2>
		if(ramp->instTargetRPM_F <= ramp->finalTargetRPM){
 8005184:	687b      	ldr	r3, [r7, #4]
 8005186:	ed93 7a01 	vldr	s14, [r3, #4]
 800518a:	687b      	ldr	r3, [r7, #4]
 800518c:	881b      	ldrh	r3, [r3, #0]
 800518e:	ee07 3a90 	vmov	s15, r3
 8005192:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005196:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800519a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800519e:	d900      	bls.n	80051a2 <ExecRampRPM+0x4c>
				ramp->rampTimer = 0;
			}
		}
	}

}
 80051a0:	e0ee      	b.n	8005380 <ExecRampRPM+0x22a>
			ramp->instTargetRPM_F += ramp->dRPM_F_RU;
 80051a2:	687b      	ldr	r3, [r7, #4]
 80051a4:	ed93 7a01 	vldr	s14, [r3, #4]
 80051a8:	687b      	ldr	r3, [r7, #4]
 80051aa:	edd3 7a02 	vldr	s15, [r3, #8]
 80051ae:	ee77 7a27 	vadd.f32	s15, s14, s15
 80051b2:	687b      	ldr	r3, [r7, #4]
 80051b4:	edc3 7a01 	vstr	s15, [r3, #4]
			if(ramp->instTargetRPM_F >= ramp->finalTargetRPM){
 80051b8:	687b      	ldr	r3, [r7, #4]
 80051ba:	ed93 7a01 	vldr	s14, [r3, #4]
 80051be:	687b      	ldr	r3, [r7, #4]
 80051c0:	881b      	ldrh	r3, [r3, #0]
 80051c2:	ee07 3a90 	vmov	s15, r3
 80051c6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80051ca:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80051ce:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80051d2:	da00      	bge.n	80051d6 <ExecRampRPM+0x80>
}
 80051d4:	e0d4      	b.n	8005380 <ExecRampRPM+0x22a>
				ramp->instTargetRPM_F  = ramp->finalTargetRPM;
 80051d6:	687b      	ldr	r3, [r7, #4]
 80051d8:	881b      	ldrh	r3, [r3, #0]
 80051da:	ee07 3a90 	vmov	s15, r3
 80051de:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80051e2:	687b      	ldr	r3, [r7, #4]
 80051e4:	edc3 7a01 	vstr	s15, [r3, #4]
				ramp->rampPhase = RAMP_STEADY;
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	2202      	movs	r2, #2
 80051ec:	741a      	strb	r2, [r3, #16]
				ramp->rampTimer = 0;
 80051ee:	687b      	ldr	r3, [r7, #4]
 80051f0:	f04f 0200 	mov.w	r2, #0
 80051f4:	62da      	str	r2, [r3, #44]	@ 0x2c
}
 80051f6:	e0c3      	b.n	8005380 <ExecRampRPM+0x22a>
	else if (ramp->rampPhase == RAMP_STEADY){
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	7c1b      	ldrb	r3, [r3, #16]
 80051fc:	2b02      	cmp	r3, #2
 80051fe:	d11e      	bne.n	800523e <ExecRampRPM+0xe8>
		if (ramp->steadyRunTime_s != RUN_FOREVER){
 8005200:	687b      	ldr	r3, [r7, #4]
 8005202:	edd3 7a07 	vldr	s15, [r3, #28]
 8005206:	eebf 7a00 	vmov.f32	s14, #240	@ 0xbf800000 -1.0
 800520a:	eef4 7a47 	vcmp.f32	s15, s14
 800520e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005212:	f000 80b5 	beq.w	8005380 <ExecRampRPM+0x22a>
			if (ramp->rampTimer >= ramp->steadyRunTime_s){
 8005216:	687b      	ldr	r3, [r7, #4]
 8005218:	ed93 7a0b 	vldr	s14, [r3, #44]	@ 0x2c
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	edd3 7a07 	vldr	s15, [r3, #28]
 8005222:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8005226:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800522a:	da00      	bge.n	800522e <ExecRampRPM+0xd8>
}
 800522c:	e0a8      	b.n	8005380 <ExecRampRPM+0x22a>
				ramp->rampPhase = RAMP_DOWN;
 800522e:	687b      	ldr	r3, [r7, #4]
 8005230:	2201      	movs	r2, #1
 8005232:	741a      	strb	r2, [r3, #16]
				ramp->rampTimer = 0;
 8005234:	687b      	ldr	r3, [r7, #4]
 8005236:	f04f 0200 	mov.w	r2, #0
 800523a:	62da      	str	r2, [r3, #44]	@ 0x2c
}
 800523c:	e0a0      	b.n	8005380 <ExecRampRPM+0x22a>
	else if (ramp->rampPhase == RAMP_CHANGE){
 800523e:	687b      	ldr	r3, [r7, #4]
 8005240:	7c1b      	ldrb	r3, [r3, #16]
 8005242:	2b08      	cmp	r3, #8
 8005244:	d170      	bne.n	8005328 <ExecRampRPM+0x1d2>
			if(ramp->instTargetRPM_F < ramp->transitionTarget){
 8005246:	687b      	ldr	r3, [r7, #4]
 8005248:	ed93 7a01 	vldr	s14, [r3, #4]
 800524c:	687b      	ldr	r3, [r7, #4]
 800524e:	8a5b      	ldrh	r3, [r3, #18]
 8005250:	ee07 3a90 	vmov	s15, r3
 8005254:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005258:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800525c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005260:	d528      	bpl.n	80052b4 <ExecRampRPM+0x15e>
				ramp->instTargetRPM_F += ramp->dRPM_F_transition;
 8005262:	687b      	ldr	r3, [r7, #4]
 8005264:	ed93 7a01 	vldr	s14, [r3, #4]
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	edd3 7a06 	vldr	s15, [r3, #24]
 800526e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005272:	687b      	ldr	r3, [r7, #4]
 8005274:	edc3 7a01 	vstr	s15, [r3, #4]
				if(ramp->instTargetRPM_F >= ramp->transitionTarget){
 8005278:	687b      	ldr	r3, [r7, #4]
 800527a:	ed93 7a01 	vldr	s14, [r3, #4]
 800527e:	687b      	ldr	r3, [r7, #4]
 8005280:	8a5b      	ldrh	r3, [r3, #18]
 8005282:	ee07 3a90 	vmov	s15, r3
 8005286:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800528a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800528e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005292:	db0f      	blt.n	80052b4 <ExecRampRPM+0x15e>
					ramp->instTargetRPM_F  = ramp->transitionTarget;
 8005294:	687b      	ldr	r3, [r7, #4]
 8005296:	8a5b      	ldrh	r3, [r3, #18]
 8005298:	ee07 3a90 	vmov	s15, r3
 800529c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80052a0:	687b      	ldr	r3, [r7, #4]
 80052a2:	edc3 7a01 	vstr	s15, [r3, #4]
					ramp->rampPhase = RAMP_STEADY;
 80052a6:	687b      	ldr	r3, [r7, #4]
 80052a8:	2202      	movs	r2, #2
 80052aa:	741a      	strb	r2, [r3, #16]
					ramp->rampTimer = 0;
 80052ac:	687b      	ldr	r3, [r7, #4]
 80052ae:	f04f 0200 	mov.w	r2, #0
 80052b2:	62da      	str	r2, [r3, #44]	@ 0x2c
			if(ramp->instTargetRPM_F > ramp->transitionTarget){
 80052b4:	687b      	ldr	r3, [r7, #4]
 80052b6:	ed93 7a01 	vldr	s14, [r3, #4]
 80052ba:	687b      	ldr	r3, [r7, #4]
 80052bc:	8a5b      	ldrh	r3, [r3, #18]
 80052be:	ee07 3a90 	vmov	s15, r3
 80052c2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80052c6:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80052ca:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80052ce:	dc00      	bgt.n	80052d2 <ExecRampRPM+0x17c>
}
 80052d0:	e056      	b.n	8005380 <ExecRampRPM+0x22a>
				ramp->instTargetRPM_F -= ramp->dRPM_F_transition;
 80052d2:	687b      	ldr	r3, [r7, #4]
 80052d4:	ed93 7a01 	vldr	s14, [r3, #4]
 80052d8:	687b      	ldr	r3, [r7, #4]
 80052da:	edd3 7a06 	vldr	s15, [r3, #24]
 80052de:	ee77 7a67 	vsub.f32	s15, s14, s15
 80052e2:	687b      	ldr	r3, [r7, #4]
 80052e4:	edc3 7a01 	vstr	s15, [r3, #4]
				if(ramp->instTargetRPM_F <= ramp->transitionTarget){
 80052e8:	687b      	ldr	r3, [r7, #4]
 80052ea:	ed93 7a01 	vldr	s14, [r3, #4]
 80052ee:	687b      	ldr	r3, [r7, #4]
 80052f0:	8a5b      	ldrh	r3, [r3, #18]
 80052f2:	ee07 3a90 	vmov	s15, r3
 80052f6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80052fa:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80052fe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005302:	d900      	bls.n	8005306 <ExecRampRPM+0x1b0>
}
 8005304:	e03c      	b.n	8005380 <ExecRampRPM+0x22a>
					ramp->instTargetRPM_F  = ramp->transitionTarget;
 8005306:	687b      	ldr	r3, [r7, #4]
 8005308:	8a5b      	ldrh	r3, [r3, #18]
 800530a:	ee07 3a90 	vmov	s15, r3
 800530e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005312:	687b      	ldr	r3, [r7, #4]
 8005314:	edc3 7a01 	vstr	s15, [r3, #4]
					ramp->rampPhase = RAMP_STEADY;
 8005318:	687b      	ldr	r3, [r7, #4]
 800531a:	2202      	movs	r2, #2
 800531c:	741a      	strb	r2, [r3, #16]
					ramp->rampTimer = 0;
 800531e:	687b      	ldr	r3, [r7, #4]
 8005320:	f04f 0200 	mov.w	r2, #0
 8005324:	62da      	str	r2, [r3, #44]	@ 0x2c
}
 8005326:	e02b      	b.n	8005380 <ExecRampRPM+0x22a>
	else if (ramp->rampPhase == RAMP_DOWN){
 8005328:	687b      	ldr	r3, [r7, #4]
 800532a:	7c1b      	ldrb	r3, [r3, #16]
 800532c:	2b01      	cmp	r3, #1
 800532e:	d127      	bne.n	8005380 <ExecRampRPM+0x22a>
		if(ramp->instTargetRPM_F >= 0){
 8005330:	687b      	ldr	r3, [r7, #4]
 8005332:	edd3 7a01 	vldr	s15, [r3, #4]
 8005336:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800533a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800533e:	da00      	bge.n	8005342 <ExecRampRPM+0x1ec>
}
 8005340:	e01e      	b.n	8005380 <ExecRampRPM+0x22a>
			ramp->instTargetRPM_F -= ramp->dRPM_F_RD;
 8005342:	687b      	ldr	r3, [r7, #4]
 8005344:	ed93 7a01 	vldr	s14, [r3, #4]
 8005348:	687b      	ldr	r3, [r7, #4]
 800534a:	edd3 7a03 	vldr	s15, [r3, #12]
 800534e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8005352:	687b      	ldr	r3, [r7, #4]
 8005354:	edc3 7a01 	vstr	s15, [r3, #4]
			if(ramp->instTargetRPM_F <= 0){
 8005358:	687b      	ldr	r3, [r7, #4]
 800535a:	edd3 7a01 	vldr	s15, [r3, #4]
 800535e:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8005362:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005366:	d900      	bls.n	800536a <ExecRampRPM+0x214>
}
 8005368:	e00a      	b.n	8005380 <ExecRampRPM+0x22a>
				ramp->instTargetRPM_F  = 0;
 800536a:	687b      	ldr	r3, [r7, #4]
 800536c:	f04f 0200 	mov.w	r2, #0
 8005370:	605a      	str	r2, [r3, #4]
				ramp->rampPhase = RAMP_WAIT;
 8005372:	687b      	ldr	r3, [r7, #4]
 8005374:	2204      	movs	r2, #4
 8005376:	741a      	strb	r2, [r3, #16]
				ramp->rampTimer = 0;
 8005378:	687b      	ldr	r3, [r7, #4]
 800537a:	f04f 0200 	mov.w	r2, #0
 800537e:	62da      	str	r2, [r3, #44]	@ 0x2c
}
 8005380:	bf00      	nop
 8005382:	370c      	adds	r7, #12
 8005384:	46bd      	mov	sp, r7
 8005386:	f85d 7b04 	ldr.w	r7, [sp], #4
 800538a:	4770      	bx	lr

0800538c <ChangeRPM>:

void  ChangeRPM(RampRPM *r,uint16_t transitionTarget,float transitionTime_s){
 800538c:	b480      	push	{r7}
 800538e:	b087      	sub	sp, #28
 8005390:	af00      	add	r7, sp, #0
 8005392:	60f8      	str	r0, [r7, #12]
 8005394:	460b      	mov	r3, r1
 8005396:	ed87 0a01 	vstr	s0, [r7, #4]
 800539a:	817b      	strh	r3, [r7, #10]
	uint16_t deltaRPM = 0;
 800539c:	2300      	movs	r3, #0
 800539e:	82fb      	strh	r3, [r7, #22]
	uint16_t totalSteps = 0;
 80053a0:	2300      	movs	r3, #0
 80053a2:	82bb      	strh	r3, [r7, #20]
	r->transitionTarget = transitionTarget;
 80053a4:	68fb      	ldr	r3, [r7, #12]
 80053a6:	897a      	ldrh	r2, [r7, #10]
 80053a8:	825a      	strh	r2, [r3, #18]
	r->transitionTime_s = transitionTime_s;
 80053aa:	68fb      	ldr	r3, [r7, #12]
 80053ac:	687a      	ldr	r2, [r7, #4]
 80053ae:	615a      	str	r2, [r3, #20]
	r->finalTargetRPM = r->transitionTarget;
 80053b0:	68fb      	ldr	r3, [r7, #12]
 80053b2:	8a5a      	ldrh	r2, [r3, #18]
 80053b4:	68fb      	ldr	r3, [r7, #12]
 80053b6:	801a      	strh	r2, [r3, #0]
	if (r->transitionTarget > r->instTargetRPM_F){
 80053b8:	68fb      	ldr	r3, [r7, #12]
 80053ba:	8a5b      	ldrh	r3, [r3, #18]
 80053bc:	ee07 3a90 	vmov	s15, r3
 80053c0:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80053c4:	68fb      	ldr	r3, [r7, #12]
 80053c6:	edd3 7a01 	vldr	s15, [r3, #4]
 80053ca:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80053ce:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80053d2:	dd10      	ble.n	80053f6 <ChangeRPM+0x6a>
		deltaRPM = r->transitionTarget - r->instTargetRPM_F;
 80053d4:	68fb      	ldr	r3, [r7, #12]
 80053d6:	8a5b      	ldrh	r3, [r3, #18]
 80053d8:	ee07 3a90 	vmov	s15, r3
 80053dc:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80053e0:	68fb      	ldr	r3, [r7, #12]
 80053e2:	edd3 7a01 	vldr	s15, [r3, #4]
 80053e6:	ee77 7a67 	vsub.f32	s15, s14, s15
 80053ea:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80053ee:	ee17 3a90 	vmov	r3, s15
 80053f2:	82fb      	strh	r3, [r7, #22]
 80053f4:	e020      	b.n	8005438 <ChangeRPM+0xac>
	}else if (r->transitionTarget < r->instTargetRPM_F){
 80053f6:	68fb      	ldr	r3, [r7, #12]
 80053f8:	8a5b      	ldrh	r3, [r3, #18]
 80053fa:	ee07 3a90 	vmov	s15, r3
 80053fe:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8005402:	68fb      	ldr	r3, [r7, #12]
 8005404:	edd3 7a01 	vldr	s15, [r3, #4]
 8005408:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800540c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005410:	d510      	bpl.n	8005434 <ChangeRPM+0xa8>
		deltaRPM = r->instTargetRPM_F - r->transitionTarget;
 8005412:	68fb      	ldr	r3, [r7, #12]
 8005414:	ed93 7a01 	vldr	s14, [r3, #4]
 8005418:	68fb      	ldr	r3, [r7, #12]
 800541a:	8a5b      	ldrh	r3, [r3, #18]
 800541c:	ee07 3a90 	vmov	s15, r3
 8005420:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005424:	ee77 7a67 	vsub.f32	s15, s14, s15
 8005428:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800542c:	ee17 3a90 	vmov	r3, s15
 8005430:	82fb      	strh	r3, [r7, #22]
 8005432:	e001      	b.n	8005438 <ChangeRPM+0xac>
	}else{
		deltaRPM = 0;
 8005434:	2300      	movs	r3, #0
 8005436:	82fb      	strh	r3, [r7, #22]
	}
	totalSteps = r->transitionTime_s/r->ramp_callingTime_s;
 8005438:	68fb      	ldr	r3, [r7, #12]
 800543a:	edd3 6a05 	vldr	s13, [r3, #20]
 800543e:	68fb      	ldr	r3, [r7, #12]
 8005440:	ed93 7a0a 	vldr	s14, [r3, #40]	@ 0x28
 8005444:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005448:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800544c:	ee17 3a90 	vmov	r3, s15
 8005450:	82bb      	strh	r3, [r7, #20]
	if (totalSteps == 0){
 8005452:	8abb      	ldrh	r3, [r7, #20]
 8005454:	2b00      	cmp	r3, #0
 8005456:	d101      	bne.n	800545c <ChangeRPM+0xd0>
		totalSteps = 1;
 8005458:	2301      	movs	r3, #1
 800545a:	82bb      	strh	r3, [r7, #20]
	}
	r->dRPM_F_transition = ((float)deltaRPM)/totalSteps;
 800545c:	8afb      	ldrh	r3, [r7, #22]
 800545e:	ee07 3a90 	vmov	s15, r3
 8005462:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005466:	8abb      	ldrh	r3, [r7, #20]
 8005468:	ee07 3a90 	vmov	s15, r3
 800546c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8005470:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005474:	68fb      	ldr	r3, [r7, #12]
 8005476:	edc3 7a06 	vstr	s15, [r3, #24]
}
 800547a:	bf00      	nop
 800547c:	371c      	adds	r7, #28
 800547e:	46bd      	mov	sp, r7
 8005480:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005484:	4770      	bx	lr

08005486 <Recalculate_RampRPM_RampRates>:

// when we get a change RPM for the bobbin, we want to do ramp UP/ramp Down times with that
// new target.(this is used to ramo down to zero, and ramp up from zero)
void Recalculate_RampRPM_RampRates(RampRPM *ramp,uint16_t newTarget){
 8005486:	b480      	push	{r7}
 8005488:	b085      	sub	sp, #20
 800548a:	af00      	add	r7, sp, #0
 800548c:	6078      	str	r0, [r7, #4]
 800548e:	460b      	mov	r3, r1
 8005490:	807b      	strh	r3, [r7, #2]
	uint16_t totalSteps = 0;
 8005492:	2300      	movs	r3, #0
 8005494:	81fb      	strh	r3, [r7, #14]
	//For RampUp
	ramp->finalTargetRPM = newTarget;
 8005496:	687b      	ldr	r3, [r7, #4]
 8005498:	887a      	ldrh	r2, [r7, #2]
 800549a:	801a      	strh	r2, [r3, #0]
	totalSteps = ramp->rampUpTime_s/ramp->ramp_callingTime_s;
 800549c:	687b      	ldr	r3, [r7, #4]
 800549e:	edd3 6a08 	vldr	s13, [r3, #32]
 80054a2:	687b      	ldr	r3, [r7, #4]
 80054a4:	ed93 7a0a 	vldr	s14, [r3, #40]	@ 0x28
 80054a8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80054ac:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80054b0:	ee17 3a90 	vmov	r3, s15
 80054b4:	81fb      	strh	r3, [r7, #14]
	if (totalSteps == 0){
 80054b6:	89fb      	ldrh	r3, [r7, #14]
 80054b8:	2b00      	cmp	r3, #0
 80054ba:	d101      	bne.n	80054c0 <Recalculate_RampRPM_RampRates+0x3a>
		totalSteps = 1;
 80054bc:	2301      	movs	r3, #1
 80054be:	81fb      	strh	r3, [r7, #14]
	}
	ramp->dRPM_F_RU = ((float)ramp->finalTargetRPM)/totalSteps;
 80054c0:	687b      	ldr	r3, [r7, #4]
 80054c2:	881b      	ldrh	r3, [r3, #0]
 80054c4:	ee07 3a90 	vmov	s15, r3
 80054c8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80054cc:	89fb      	ldrh	r3, [r7, #14]
 80054ce:	ee07 3a90 	vmov	s15, r3
 80054d2:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80054d6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80054da:	687b      	ldr	r3, [r7, #4]
 80054dc:	edc3 7a02 	vstr	s15, [r3, #8]

	//For RampDown
	totalSteps = ramp->rampDownTime_s/ramp->ramp_callingTime_s;
 80054e0:	687b      	ldr	r3, [r7, #4]
 80054e2:	edd3 6a09 	vldr	s13, [r3, #36]	@ 0x24
 80054e6:	687b      	ldr	r3, [r7, #4]
 80054e8:	ed93 7a0a 	vldr	s14, [r3, #40]	@ 0x28
 80054ec:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80054f0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80054f4:	ee17 3a90 	vmov	r3, s15
 80054f8:	81fb      	strh	r3, [r7, #14]
	if (totalSteps == 0){
 80054fa:	89fb      	ldrh	r3, [r7, #14]
 80054fc:	2b00      	cmp	r3, #0
 80054fe:	d101      	bne.n	8005504 <Recalculate_RampRPM_RampRates+0x7e>
		totalSteps = 1;
 8005500:	2301      	movs	r3, #1
 8005502:	81fb      	strh	r3, [r7, #14]
	}
	ramp->dRPM_F_RD = ((float)ramp->finalTargetRPM)/totalSteps;
 8005504:	687b      	ldr	r3, [r7, #4]
 8005506:	881b      	ldrh	r3, [r3, #0]
 8005508:	ee07 3a90 	vmov	s15, r3
 800550c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005510:	89fb      	ldrh	r3, [r7, #14]
 8005512:	ee07 3a90 	vmov	s15, r3
 8005516:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800551a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800551e:	687b      	ldr	r3, [r7, #4]
 8005520:	edc3 7a03 	vstr	s15, [r3, #12]
}
 8005524:	bf00      	nop
 8005526:	3714      	adds	r7, #20
 8005528:	46bd      	mov	sp, r7
 800552a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800552e:	4770      	bx	lr

08005530 <updateSpeedCalc>:
 *  Created on: 25-Apr-2024
 *      Author: harsha
 */
#include "SpeedSensor.h"

void updateSpeedCalc(Speed *s, PositionSensor *ps){
 8005530:	b480      	push	{r7}
 8005532:	b085      	sub	sp, #20
 8005534:	af00      	add	r7, sp, #0
 8005536:	6078      	str	r0, [r7, #4]
 8005538:	6039      	str	r1, [r7, #0]
	//get one ms position change
	s->loopCounter ++;
 800553a:	687b      	ldr	r3, [r7, #4]
 800553c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800553e:	1c5a      	adds	r2, r3, #1
 8005540:	687b      	ldr	r3, [r7, #4]
 8005542:	651a      	str	r2, [r3, #80]	@ 0x50

	if (s->loopCounter == 9){
 8005544:	687b      	ldr	r3, [r7, #4]
 8005546:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005548:	2b09      	cmp	r3, #9
 800554a:	f040 8096 	bne.w	800567a <updateSpeedCalc+0x14a>
		s->totalDeltaRads = ps->multiturn_mech_radians - s->prevMechRads;
 800554e:	683b      	ldr	r3, [r7, #0]
 8005550:	ed93 7a14 	vldr	s14, [r3, #80]	@ 0x50
 8005554:	687b      	ldr	r3, [r7, #4]
 8005556:	edd3 7a15 	vldr	s15, [r3, #84]	@ 0x54
 800555a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800555e:	687b      	ldr	r3, [r7, #4]
 8005560:	edc3 7a17 	vstr	s15, [r3, #92]	@ 0x5c
		s->prevMechRads = ps->multiturn_mech_radians;
 8005564:	683b      	ldr	r3, [r7, #0]
 8005566:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8005568:	687b      	ldr	r3, [r7, #4]
 800556a:	655a      	str	r2, [r3, #84]	@ 0x54
		s->loopCounter = 0;
 800556c:	687b      	ldr	r3, [r7, #4]
 800556e:	2200      	movs	r2, #0
 8005570:	651a      	str	r2, [r3, #80]	@ 0x50

		// move the samples one step down
		for (int i=SPEEDSAMPLES-1;i>=1;i--){//i goes from 19 to 1
 8005572:	2313      	movs	r3, #19
 8005574:	60fb      	str	r3, [r7, #12]
 8005576:	e00d      	b.n	8005594 <updateSpeedCalc+0x64>
			s->deltaRadsArr[i]=s->deltaRadsArr[i-1];
 8005578:	68fb      	ldr	r3, [r7, #12]
 800557a:	3b01      	subs	r3, #1
 800557c:	687a      	ldr	r2, [r7, #4]
 800557e:	009b      	lsls	r3, r3, #2
 8005580:	4413      	add	r3, r2
 8005582:	681a      	ldr	r2, [r3, #0]
 8005584:	6879      	ldr	r1, [r7, #4]
 8005586:	68fb      	ldr	r3, [r7, #12]
 8005588:	009b      	lsls	r3, r3, #2
 800558a:	440b      	add	r3, r1
 800558c:	601a      	str	r2, [r3, #0]
		for (int i=SPEEDSAMPLES-1;i>=1;i--){//i goes from 19 to 1
 800558e:	68fb      	ldr	r3, [r7, #12]
 8005590:	3b01      	subs	r3, #1
 8005592:	60fb      	str	r3, [r7, #12]
 8005594:	68fb      	ldr	r3, [r7, #12]
 8005596:	2b00      	cmp	r3, #0
 8005598:	dcee      	bgt.n	8005578 <updateSpeedCalc+0x48>
			}
		// put in the new samples
		s->deltaRadsArr[0] = s->totalDeltaRads;
 800559a:	687b      	ldr	r3, [r7, #4]
 800559c:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800559e:	687b      	ldr	r3, [r7, #4]
 80055a0:	601a      	str	r2, [r3, #0]

		//now calculate the RPM with the new data
		s->tenSampleSpeed = 0;
 80055a2:	687b      	ldr	r3, [r7, #4]
 80055a4:	f04f 0200 	mov.w	r2, #0
 80055a8:	661a      	str	r2, [r3, #96]	@ 0x60
		s->twentySampleSpeed = 0;
 80055aa:	687b      	ldr	r3, [r7, #4]
 80055ac:	f04f 0200 	mov.w	r2, #0
 80055b0:	665a      	str	r2, [r3, #100]	@ 0x64
		for (int i=0;i<SPEEDSAMPLES;i++){
 80055b2:	2300      	movs	r3, #0
 80055b4:	60bb      	str	r3, [r7, #8]
 80055b6:	e021      	b.n	80055fc <updateSpeedCalc+0xcc>
			if (i<10){
 80055b8:	68bb      	ldr	r3, [r7, #8]
 80055ba:	2b09      	cmp	r3, #9
 80055bc:	dc0d      	bgt.n	80055da <updateSpeedCalc+0xaa>
				s->tenSampleSpeed += s->deltaRadsArr[i];
 80055be:	687b      	ldr	r3, [r7, #4]
 80055c0:	ed93 7a18 	vldr	s14, [r3, #96]	@ 0x60
 80055c4:	687a      	ldr	r2, [r7, #4]
 80055c6:	68bb      	ldr	r3, [r7, #8]
 80055c8:	009b      	lsls	r3, r3, #2
 80055ca:	4413      	add	r3, r2
 80055cc:	edd3 7a00 	vldr	s15, [r3]
 80055d0:	ee77 7a27 	vadd.f32	s15, s14, s15
 80055d4:	687b      	ldr	r3, [r7, #4]
 80055d6:	edc3 7a18 	vstr	s15, [r3, #96]	@ 0x60
			}
			s->twentySampleSpeed += s->deltaRadsArr[i];
 80055da:	687b      	ldr	r3, [r7, #4]
 80055dc:	ed93 7a19 	vldr	s14, [r3, #100]	@ 0x64
 80055e0:	687a      	ldr	r2, [r7, #4]
 80055e2:	68bb      	ldr	r3, [r7, #8]
 80055e4:	009b      	lsls	r3, r3, #2
 80055e6:	4413      	add	r3, r2
 80055e8:	edd3 7a00 	vldr	s15, [r3]
 80055ec:	ee77 7a27 	vadd.f32	s15, s14, s15
 80055f0:	687b      	ldr	r3, [r7, #4]
 80055f2:	edc3 7a19 	vstr	s15, [r3, #100]	@ 0x64
		for (int i=0;i<SPEEDSAMPLES;i++){
 80055f6:	68bb      	ldr	r3, [r7, #8]
 80055f8:	3301      	adds	r3, #1
 80055fa:	60bb      	str	r3, [r7, #8]
 80055fc:	68bb      	ldr	r3, [r7, #8]
 80055fe:	2b13      	cmp	r3, #19
 8005600:	ddda      	ble.n	80055b8 <updateSpeedCalc+0x88>
		}

		s->avgTenSamples = s->tenSampleSpeed/10.0f;
 8005602:	687b      	ldr	r3, [r7, #4]
 8005604:	ed93 7a18 	vldr	s14, [r3, #96]	@ 0x60
 8005608:	eef2 6a04 	vmov.f32	s13, #36	@ 0x41200000  10.0
 800560c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8005610:	687b      	ldr	r3, [r7, #4]
 8005612:	edc3 7a1a 	vstr	s15, [r3, #104]	@ 0x68
		s->tenSampleRPM = s->avgTenSamples * 1000.0f * 60.0f/TWO_PI_F;
 8005616:	687b      	ldr	r3, [r7, #4]
 8005618:	edd3 7a1a 	vldr	s15, [r3, #104]	@ 0x68
 800561c:	ed9f 7a1a 	vldr	s14, [pc, #104]	@ 8005688 <updateSpeedCalc+0x158>
 8005620:	ee67 7a87 	vmul.f32	s15, s15, s14
 8005624:	ed9f 7a19 	vldr	s14, [pc, #100]	@ 800568c <updateSpeedCalc+0x15c>
 8005628:	ee27 7a87 	vmul.f32	s14, s15, s14
 800562c:	eddf 6a18 	vldr	s13, [pc, #96]	@ 8005690 <updateSpeedCalc+0x160>
 8005630:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8005634:	687b      	ldr	r3, [r7, #4]
 8005636:	edc3 7a1c 	vstr	s15, [r3, #112]	@ 0x70
		s->avgTwentySamples = s->twentySampleSpeed/20.0f;
 800563a:	687b      	ldr	r3, [r7, #4]
 800563c:	ed93 7a19 	vldr	s14, [r3, #100]	@ 0x64
 8005640:	eef3 6a04 	vmov.f32	s13, #52	@ 0x41a00000  20.0
 8005644:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8005648:	687b      	ldr	r3, [r7, #4]
 800564a:	edc3 7a1b 	vstr	s15, [r3, #108]	@ 0x6c
		s->twentySampleRPM = s->avgTwentySamples * 1000.0f * 60.0f /TWO_PI_F;
 800564e:	687b      	ldr	r3, [r7, #4]
 8005650:	edd3 7a1b 	vldr	s15, [r3, #108]	@ 0x6c
 8005654:	ed9f 7a0c 	vldr	s14, [pc, #48]	@ 8005688 <updateSpeedCalc+0x158>
 8005658:	ee67 7a87 	vmul.f32	s15, s15, s14
 800565c:	ed9f 7a0b 	vldr	s14, [pc, #44]	@ 800568c <updateSpeedCalc+0x15c>
 8005660:	ee27 7a87 	vmul.f32	s14, s15, s14
 8005664:	eddf 6a0a 	vldr	s13, [pc, #40]	@ 8005690 <updateSpeedCalc+0x160>
 8005668:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800566c:	687b      	ldr	r3, [r7, #4]
 800566e:	edc3 7a1d 	vstr	s15, [r3, #116]	@ 0x74
		s->RPM = s->tenSampleRPM;
 8005672:	687b      	ldr	r3, [r7, #4]
 8005674:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8005676:	687b      	ldr	r3, [r7, #4]
 8005678:	679a      	str	r2, [r3, #120]	@ 0x78
	}
}
 800567a:	bf00      	nop
 800567c:	3714      	adds	r7, #20
 800567e:	46bd      	mov	sp, r7
 8005680:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005684:	4770      	bx	lr
 8005686:	bf00      	nop
 8005688:	447a0000 	.word	0x447a0000
 800568c:	42700000 	.word	0x42700000
 8005690:	40c90fda 	.word	0x40c90fda

08005694 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8005694:	b580      	push	{r7, lr}
 8005696:	b082      	sub	sp, #8
 8005698:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 800569a:	2300      	movs	r3, #0
 800569c:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800569e:	2003      	movs	r0, #3
 80056a0:	f001 fec8 	bl	8007434 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80056a4:	200f      	movs	r0, #15
 80056a6:	f000 f80d 	bl	80056c4 <HAL_InitTick>
 80056aa:	4603      	mov	r3, r0
 80056ac:	2b00      	cmp	r3, #0
 80056ae:	d002      	beq.n	80056b6 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 80056b0:	2301      	movs	r3, #1
 80056b2:	71fb      	strb	r3, [r7, #7]
 80056b4:	e001      	b.n	80056ba <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80056b6:	f7fc ff69 	bl	800258c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80056ba:	79fb      	ldrb	r3, [r7, #7]

}
 80056bc:	4618      	mov	r0, r3
 80056be:	3708      	adds	r7, #8
 80056c0:	46bd      	mov	sp, r7
 80056c2:	bd80      	pop	{r7, pc}

080056c4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80056c4:	b580      	push	{r7, lr}
 80056c6:	b084      	sub	sp, #16
 80056c8:	af00      	add	r7, sp, #0
 80056ca:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80056cc:	2300      	movs	r3, #0
 80056ce:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 80056d0:	4b16      	ldr	r3, [pc, #88]	@ (800572c <HAL_InitTick+0x68>)
 80056d2:	681b      	ldr	r3, [r3, #0]
 80056d4:	2b00      	cmp	r3, #0
 80056d6:	d022      	beq.n	800571e <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 80056d8:	4b15      	ldr	r3, [pc, #84]	@ (8005730 <HAL_InitTick+0x6c>)
 80056da:	681a      	ldr	r2, [r3, #0]
 80056dc:	4b13      	ldr	r3, [pc, #76]	@ (800572c <HAL_InitTick+0x68>)
 80056de:	681b      	ldr	r3, [r3, #0]
 80056e0:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 80056e4:	fbb1 f3f3 	udiv	r3, r1, r3
 80056e8:	fbb2 f3f3 	udiv	r3, r2, r3
 80056ec:	4618      	mov	r0, r3
 80056ee:	f001 fed4 	bl	800749a <HAL_SYSTICK_Config>
 80056f2:	4603      	mov	r3, r0
 80056f4:	2b00      	cmp	r3, #0
 80056f6:	d10f      	bne.n	8005718 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80056f8:	687b      	ldr	r3, [r7, #4]
 80056fa:	2b0f      	cmp	r3, #15
 80056fc:	d809      	bhi.n	8005712 <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80056fe:	2200      	movs	r2, #0
 8005700:	6879      	ldr	r1, [r7, #4]
 8005702:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8005706:	f001 fea0 	bl	800744a <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800570a:	4a0a      	ldr	r2, [pc, #40]	@ (8005734 <HAL_InitTick+0x70>)
 800570c:	687b      	ldr	r3, [r7, #4]
 800570e:	6013      	str	r3, [r2, #0]
 8005710:	e007      	b.n	8005722 <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 8005712:	2301      	movs	r3, #1
 8005714:	73fb      	strb	r3, [r7, #15]
 8005716:	e004      	b.n	8005722 <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8005718:	2301      	movs	r3, #1
 800571a:	73fb      	strb	r3, [r7, #15]
 800571c:	e001      	b.n	8005722 <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 800571e:	2301      	movs	r3, #1
 8005720:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8005722:	7bfb      	ldrb	r3, [r7, #15]
}
 8005724:	4618      	mov	r0, r3
 8005726:	3710      	adds	r7, #16
 8005728:	46bd      	mov	sp, r7
 800572a:	bd80      	pop	{r7, pc}
 800572c:	200002e0 	.word	0x200002e0
 8005730:	20000008 	.word	0x20000008
 8005734:	200002dc 	.word	0x200002dc

08005738 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8005738:	b480      	push	{r7}
 800573a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800573c:	4b05      	ldr	r3, [pc, #20]	@ (8005754 <HAL_IncTick+0x1c>)
 800573e:	681a      	ldr	r2, [r3, #0]
 8005740:	4b05      	ldr	r3, [pc, #20]	@ (8005758 <HAL_IncTick+0x20>)
 8005742:	681b      	ldr	r3, [r3, #0]
 8005744:	4413      	add	r3, r2
 8005746:	4a03      	ldr	r2, [pc, #12]	@ (8005754 <HAL_IncTick+0x1c>)
 8005748:	6013      	str	r3, [r2, #0]
}
 800574a:	bf00      	nop
 800574c:	46bd      	mov	sp, r7
 800574e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005752:	4770      	bx	lr
 8005754:	20001b64 	.word	0x20001b64
 8005758:	200002e0 	.word	0x200002e0

0800575c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800575c:	b480      	push	{r7}
 800575e:	af00      	add	r7, sp, #0
  return uwTick;
 8005760:	4b03      	ldr	r3, [pc, #12]	@ (8005770 <HAL_GetTick+0x14>)
 8005762:	681b      	ldr	r3, [r3, #0]
}
 8005764:	4618      	mov	r0, r3
 8005766:	46bd      	mov	sp, r7
 8005768:	f85d 7b04 	ldr.w	r7, [sp], #4
 800576c:	4770      	bx	lr
 800576e:	bf00      	nop
 8005770:	20001b64 	.word	0x20001b64

08005774 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8005774:	b580      	push	{r7, lr}
 8005776:	b084      	sub	sp, #16
 8005778:	af00      	add	r7, sp, #0
 800577a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800577c:	f7ff ffee 	bl	800575c <HAL_GetTick>
 8005780:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8005782:	687b      	ldr	r3, [r7, #4]
 8005784:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8005786:	68fb      	ldr	r3, [r7, #12]
 8005788:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800578c:	d004      	beq.n	8005798 <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 800578e:	4b09      	ldr	r3, [pc, #36]	@ (80057b4 <HAL_Delay+0x40>)
 8005790:	681b      	ldr	r3, [r3, #0]
 8005792:	68fa      	ldr	r2, [r7, #12]
 8005794:	4413      	add	r3, r2
 8005796:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8005798:	bf00      	nop
 800579a:	f7ff ffdf 	bl	800575c <HAL_GetTick>
 800579e:	4602      	mov	r2, r0
 80057a0:	68bb      	ldr	r3, [r7, #8]
 80057a2:	1ad3      	subs	r3, r2, r3
 80057a4:	68fa      	ldr	r2, [r7, #12]
 80057a6:	429a      	cmp	r2, r3
 80057a8:	d8f7      	bhi.n	800579a <HAL_Delay+0x26>
  {
  }
}
 80057aa:	bf00      	nop
 80057ac:	bf00      	nop
 80057ae:	3710      	adds	r7, #16
 80057b0:	46bd      	mov	sp, r7
 80057b2:	bd80      	pop	{r7, pc}
 80057b4:	200002e0 	.word	0x200002e0

080057b8 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 80057b8:	b480      	push	{r7}
 80057ba:	b083      	sub	sp, #12
 80057bc:	af00      	add	r7, sp, #0
 80057be:	6078      	str	r0, [r7, #4]
 80057c0:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 80057c2:	687b      	ldr	r3, [r7, #4]
 80057c4:	689b      	ldr	r3, [r3, #8]
 80057c6:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 80057ca:	683b      	ldr	r3, [r7, #0]
 80057cc:	431a      	orrs	r2, r3
 80057ce:	687b      	ldr	r3, [r7, #4]
 80057d0:	609a      	str	r2, [r3, #8]
}
 80057d2:	bf00      	nop
 80057d4:	370c      	adds	r7, #12
 80057d6:	46bd      	mov	sp, r7
 80057d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057dc:	4770      	bx	lr

080057de <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 80057de:	b480      	push	{r7}
 80057e0:	b083      	sub	sp, #12
 80057e2:	af00      	add	r7, sp, #0
 80057e4:	6078      	str	r0, [r7, #4]
 80057e6:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL, PathInternal);
 80057e8:	687b      	ldr	r3, [r7, #4]
 80057ea:	689b      	ldr	r3, [r3, #8]
 80057ec:	f023 72e0 	bic.w	r2, r3, #29360128	@ 0x1c00000
 80057f0:	683b      	ldr	r3, [r7, #0]
 80057f2:	431a      	orrs	r2, r3
 80057f4:	687b      	ldr	r3, [r7, #4]
 80057f6:	609a      	str	r2, [r3, #8]
}
 80057f8:	bf00      	nop
 80057fa:	370c      	adds	r7, #12
 80057fc:	46bd      	mov	sp, r7
 80057fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005802:	4770      	bx	lr

08005804 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8005804:	b480      	push	{r7}
 8005806:	b083      	sub	sp, #12
 8005808:	af00      	add	r7, sp, #0
 800580a:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL));
 800580c:	687b      	ldr	r3, [r7, #4]
 800580e:	689b      	ldr	r3, [r3, #8]
 8005810:	f003 73e0 	and.w	r3, r3, #29360128	@ 0x1c00000
}
 8005814:	4618      	mov	r0, r3
 8005816:	370c      	adds	r7, #12
 8005818:	46bd      	mov	sp, r7
 800581a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800581e:	4770      	bx	lr

08005820 <LL_ADC_SetOffset>:
  *             (fADC) to convert in 12-bit resolution.\n
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8005820:	b480      	push	{r7}
 8005822:	b087      	sub	sp, #28
 8005824:	af00      	add	r7, sp, #0
 8005826:	60f8      	str	r0, [r7, #12]
 8005828:	60b9      	str	r1, [r7, #8]
 800582a:	607a      	str	r2, [r7, #4]
 800582c:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800582e:	68fb      	ldr	r3, [r7, #12]
 8005830:	3360      	adds	r3, #96	@ 0x60
 8005832:	461a      	mov	r2, r3
 8005834:	68bb      	ldr	r3, [r7, #8]
 8005836:	009b      	lsls	r3, r3, #2
 8005838:	4413      	add	r3, r2
 800583a:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800583c:	697b      	ldr	r3, [r7, #20]
 800583e:	681a      	ldr	r2, [r3, #0]
 8005840:	4b08      	ldr	r3, [pc, #32]	@ (8005864 <LL_ADC_SetOffset+0x44>)
 8005842:	4013      	ands	r3, r2
 8005844:	687a      	ldr	r2, [r7, #4]
 8005846:	f002 41f8 	and.w	r1, r2, #2080374784	@ 0x7c000000
 800584a:	683a      	ldr	r2, [r7, #0]
 800584c:	430a      	orrs	r2, r1
 800584e:	4313      	orrs	r3, r2
 8005850:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8005854:	697b      	ldr	r3, [r7, #20]
 8005856:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8005858:	bf00      	nop
 800585a:	371c      	adds	r7, #28
 800585c:	46bd      	mov	sp, r7
 800585e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005862:	4770      	bx	lr
 8005864:	03fff000 	.word	0x03fff000

08005868 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4, 5, 7) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(const ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8005868:	b480      	push	{r7}
 800586a:	b085      	sub	sp, #20
 800586c:	af00      	add	r7, sp, #0
 800586e:	6078      	str	r0, [r7, #4]
 8005870:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8005872:	687b      	ldr	r3, [r7, #4]
 8005874:	3360      	adds	r3, #96	@ 0x60
 8005876:	461a      	mov	r2, r3
 8005878:	683b      	ldr	r3, [r7, #0]
 800587a:	009b      	lsls	r3, r3, #2
 800587c:	4413      	add	r3, r2
 800587e:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8005880:	68fb      	ldr	r3, [r7, #12]
 8005882:	681b      	ldr	r3, [r3, #0]
 8005884:	f003 43f8 	and.w	r3, r3, #2080374784	@ 0x7c000000
}
 8005888:	4618      	mov	r0, r3
 800588a:	3714      	adds	r7, #20
 800588c:	46bd      	mov	sp, r7
 800588e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005892:	4770      	bx	lr

08005894 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8005894:	b480      	push	{r7}
 8005896:	b087      	sub	sp, #28
 8005898:	af00      	add	r7, sp, #0
 800589a:	60f8      	str	r0, [r7, #12]
 800589c:	60b9      	str	r1, [r7, #8]
 800589e:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80058a0:	68fb      	ldr	r3, [r7, #12]
 80058a2:	3360      	adds	r3, #96	@ 0x60
 80058a4:	461a      	mov	r2, r3
 80058a6:	68bb      	ldr	r3, [r7, #8]
 80058a8:	009b      	lsls	r3, r3, #2
 80058aa:	4413      	add	r3, r2
 80058ac:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80058ae:	697b      	ldr	r3, [r7, #20]
 80058b0:	681b      	ldr	r3, [r3, #0]
 80058b2:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 80058b6:	687b      	ldr	r3, [r7, #4]
 80058b8:	431a      	orrs	r2, r3
 80058ba:	697b      	ldr	r3, [r7, #20]
 80058bc:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 80058be:	bf00      	nop
 80058c0:	371c      	adds	r7, #28
 80058c2:	46bd      	mov	sp, r7
 80058c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058c8:	4770      	bx	lr

080058ca <LL_ADC_SetOffsetSign>:
  *         @arg @ref LL_ADC_OFFSET_SIGN_NEGATIVE
  *         @arg @ref LL_ADC_OFFSET_SIGN_POSITIVE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSign(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSign)
{
 80058ca:	b480      	push	{r7}
 80058cc:	b087      	sub	sp, #28
 80058ce:	af00      	add	r7, sp, #0
 80058d0:	60f8      	str	r0, [r7, #12]
 80058d2:	60b9      	str	r1, [r7, #8]
 80058d4:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80058d6:	68fb      	ldr	r3, [r7, #12]
 80058d8:	3360      	adds	r3, #96	@ 0x60
 80058da:	461a      	mov	r2, r3
 80058dc:	68bb      	ldr	r3, [r7, #8]
 80058de:	009b      	lsls	r3, r3, #2
 80058e0:	4413      	add	r3, r2
 80058e2:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80058e4:	697b      	ldr	r3, [r7, #20]
 80058e6:	681b      	ldr	r3, [r3, #0]
 80058e8:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 80058ec:	687b      	ldr	r3, [r7, #4]
 80058ee:	431a      	orrs	r2, r3
 80058f0:	697b      	ldr	r3, [r7, #20]
 80058f2:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSETPOS,
             OffsetSign);
}
 80058f4:	bf00      	nop
 80058f6:	371c      	adds	r7, #28
 80058f8:	46bd      	mov	sp, r7
 80058fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058fe:	4770      	bx	lr

08005900 <LL_ADC_SetOffsetSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SATURATION_DISABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSaturation)
{
 8005900:	b480      	push	{r7}
 8005902:	b087      	sub	sp, #28
 8005904:	af00      	add	r7, sp, #0
 8005906:	60f8      	str	r0, [r7, #12]
 8005908:	60b9      	str	r1, [r7, #8]
 800590a:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800590c:	68fb      	ldr	r3, [r7, #12]
 800590e:	3360      	adds	r3, #96	@ 0x60
 8005910:	461a      	mov	r2, r3
 8005912:	68bb      	ldr	r3, [r7, #8]
 8005914:	009b      	lsls	r3, r3, #2
 8005916:	4413      	add	r3, r2
 8005918:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800591a:	697b      	ldr	r3, [r7, #20]
 800591c:	681b      	ldr	r3, [r3, #0]
 800591e:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 8005922:	687b      	ldr	r3, [r7, #4]
 8005924:	431a      	orrs	r2, r3
 8005926:	697b      	ldr	r3, [r7, #20]
 8005928:	601a      	str	r2, [r3, #0]
             ADC_OFR1_SATEN,
             OffsetSaturation);
}
 800592a:	bf00      	nop
 800592c:	371c      	adds	r7, #28
 800592e:	46bd      	mov	sp, r7
 8005930:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005934:	4770      	bx	lr

08005936 <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 8005936:	b480      	push	{r7}
 8005938:	b083      	sub	sp, #12
 800593a:	af00      	add	r7, sp, #0
 800593c:	6078      	str	r0, [r7, #4]
 800593e:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 8005940:	687b      	ldr	r3, [r7, #4]
 8005942:	695b      	ldr	r3, [r3, #20]
 8005944:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8005948:	683b      	ldr	r3, [r7, #0]
 800594a:	431a      	orrs	r2, r3
 800594c:	687b      	ldr	r3, [r7, #4]
 800594e:	615a      	str	r2, [r3, #20]
}
 8005950:	bf00      	nop
 8005952:	370c      	adds	r7, #12
 8005954:	46bd      	mov	sp, r7
 8005956:	f85d 7b04 	ldr.w	r7, [sp], #4
 800595a:	4770      	bx	lr

0800595c <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 800595c:	b480      	push	{r7}
 800595e:	b083      	sub	sp, #12
 8005960:	af00      	add	r7, sp, #0
 8005962:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8005964:	687b      	ldr	r3, [r7, #4]
 8005966:	68db      	ldr	r3, [r3, #12]
 8005968:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 800596c:	2b00      	cmp	r3, #0
 800596e:	d101      	bne.n	8005974 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8005970:	2301      	movs	r3, #1
 8005972:	e000      	b.n	8005976 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8005974:	2300      	movs	r3, #0
}
 8005976:	4618      	mov	r0, r3
 8005978:	370c      	adds	r7, #12
 800597a:	46bd      	mov	sp, r7
 800597c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005980:	4770      	bx	lr

08005982 <LL_ADC_REG_SetSequencerRanks>:
  *             Other channels are slow channels  allows: 6.5 (sampling) + 12.5 (conversion) = 19 ADC clock cycles
  *             (fADC) to convert in 12-bit resolution.\n
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8005982:	b480      	push	{r7}
 8005984:	b087      	sub	sp, #28
 8005986:	af00      	add	r7, sp, #0
 8005988:	60f8      	str	r0, [r7, #12]
 800598a:	60b9      	str	r1, [r7, #8]
 800598c:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1,
 800598e:	68fb      	ldr	r3, [r7, #12]
 8005990:	3330      	adds	r3, #48	@ 0x30
 8005992:	461a      	mov	r2, r3
 8005994:	68bb      	ldr	r3, [r7, #8]
 8005996:	0a1b      	lsrs	r3, r3, #8
 8005998:	009b      	lsls	r3, r3, #2
 800599a:	f003 030c 	and.w	r3, r3, #12
 800599e:	4413      	add	r3, r2
 80059a0:	617b      	str	r3, [r7, #20]
                                             ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 80059a2:	697b      	ldr	r3, [r7, #20]
 80059a4:	681a      	ldr	r2, [r3, #0]
 80059a6:	68bb      	ldr	r3, [r7, #8]
 80059a8:	f003 031f 	and.w	r3, r3, #31
 80059ac:	211f      	movs	r1, #31
 80059ae:	fa01 f303 	lsl.w	r3, r1, r3
 80059b2:	43db      	mvns	r3, r3
 80059b4:	401a      	ands	r2, r3
 80059b6:	687b      	ldr	r3, [r7, #4]
 80059b8:	0e9b      	lsrs	r3, r3, #26
 80059ba:	f003 011f 	and.w	r1, r3, #31
 80059be:	68bb      	ldr	r3, [r7, #8]
 80059c0:	f003 031f 	and.w	r3, r3, #31
 80059c4:	fa01 f303 	lsl.w	r3, r1, r3
 80059c8:	431a      	orrs	r2, r3
 80059ca:	697b      	ldr	r3, [r7, #20]
 80059cc:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
             << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 80059ce:	bf00      	nop
 80059d0:	371c      	adds	r7, #28
 80059d2:	46bd      	mov	sp, r7
 80059d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059d8:	4770      	bx	lr

080059da <LL_ADC_INJ_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 80059da:	b480      	push	{r7}
 80059dc:	b083      	sub	sp, #12
 80059de:	af00      	add	r7, sp, #0
 80059e0:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->JSQR, ADC_JSQR_JEXTEN) == (LL_ADC_INJ_TRIG_SOFTWARE & ADC_JSQR_JEXTEN)) ? 1UL : 0UL);
 80059e2:	687b      	ldr	r3, [r7, #4]
 80059e4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80059e6:	f403 73c0 	and.w	r3, r3, #384	@ 0x180
 80059ea:	2b00      	cmp	r3, #0
 80059ec:	d101      	bne.n	80059f2 <LL_ADC_INJ_IsTriggerSourceSWStart+0x18>
 80059ee:	2301      	movs	r3, #1
 80059f0:	e000      	b.n	80059f4 <LL_ADC_INJ_IsTriggerSourceSWStart+0x1a>
 80059f2:	2300      	movs	r3, #0
}
 80059f4:	4618      	mov	r0, r3
 80059f6:	370c      	adds	r7, #12
 80059f8:	46bd      	mov	sp, r7
 80059fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059fe:	4770      	bx	lr

08005a00 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8005a00:	b480      	push	{r7}
 8005a02:	b087      	sub	sp, #28
 8005a04:	af00      	add	r7, sp, #0
 8005a06:	60f8      	str	r0, [r7, #12]
 8005a08:	60b9      	str	r1, [r7, #8]
 8005a0a:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 8005a0c:	68fb      	ldr	r3, [r7, #12]
 8005a0e:	3314      	adds	r3, #20
 8005a10:	461a      	mov	r2, r3
 8005a12:	68bb      	ldr	r3, [r7, #8]
 8005a14:	0e5b      	lsrs	r3, r3, #25
 8005a16:	009b      	lsls	r3, r3, #2
 8005a18:	f003 0304 	and.w	r3, r3, #4
 8005a1c:	4413      	add	r3, r2
 8005a1e:	617b      	str	r3, [r7, #20]
                                             ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8005a20:	697b      	ldr	r3, [r7, #20]
 8005a22:	681a      	ldr	r2, [r3, #0]
 8005a24:	68bb      	ldr	r3, [r7, #8]
 8005a26:	0d1b      	lsrs	r3, r3, #20
 8005a28:	f003 031f 	and.w	r3, r3, #31
 8005a2c:	2107      	movs	r1, #7
 8005a2e:	fa01 f303 	lsl.w	r3, r1, r3
 8005a32:	43db      	mvns	r3, r3
 8005a34:	401a      	ands	r2, r3
 8005a36:	68bb      	ldr	r3, [r7, #8]
 8005a38:	0d1b      	lsrs	r3, r3, #20
 8005a3a:	f003 031f 	and.w	r3, r3, #31
 8005a3e:	6879      	ldr	r1, [r7, #4]
 8005a40:	fa01 f303 	lsl.w	r3, r1, r3
 8005a44:	431a      	orrs	r2, r3
 8005a46:	697b      	ldr	r3, [r7, #20]
 8005a48:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8005a4a:	bf00      	nop
 8005a4c:	371c      	adds	r7, #28
 8005a4e:	46bd      	mov	sp, r7
 8005a50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a54:	4770      	bx	lr
	...

08005a58 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8005a58:	b480      	push	{r7}
 8005a5a:	b085      	sub	sp, #20
 8005a5c:	af00      	add	r7, sp, #0
 8005a5e:	60f8      	str	r0, [r7, #12]
 8005a60:	60b9      	str	r1, [r7, #8]
 8005a62:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8005a64:	68fb      	ldr	r3, [r7, #12]
 8005a66:	f8d3 20b0 	ldr.w	r2, [r3, #176]	@ 0xb0
 8005a6a:	68bb      	ldr	r3, [r7, #8]
 8005a6c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005a70:	43db      	mvns	r3, r3
 8005a72:	401a      	ands	r2, r3
 8005a74:	687b      	ldr	r3, [r7, #4]
 8005a76:	f003 0318 	and.w	r3, r3, #24
 8005a7a:	4908      	ldr	r1, [pc, #32]	@ (8005a9c <LL_ADC_SetChannelSingleDiff+0x44>)
 8005a7c:	40d9      	lsrs	r1, r3
 8005a7e:	68bb      	ldr	r3, [r7, #8]
 8005a80:	400b      	ands	r3, r1
 8005a82:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005a86:	431a      	orrs	r2, r3
 8005a88:	68fb      	ldr	r3, [r7, #12]
 8005a8a:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK)
             & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 8005a8e:	bf00      	nop
 8005a90:	3714      	adds	r7, #20
 8005a92:	46bd      	mov	sp, r7
 8005a94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a98:	4770      	bx	lr
 8005a9a:	bf00      	nop
 8005a9c:	0007ffff 	.word	0x0007ffff

08005aa0 <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8005aa0:	b480      	push	{r7}
 8005aa2:	b083      	sub	sp, #12
 8005aa4:	af00      	add	r7, sp, #0
 8005aa6:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8005aa8:	687b      	ldr	r3, [r7, #4]
 8005aaa:	689b      	ldr	r3, [r3, #8]
 8005aac:	f003 031f 	and.w	r3, r3, #31
}
 8005ab0:	4618      	mov	r0, r3
 8005ab2:	370c      	adds	r7, #12
 8005ab4:	46bd      	mov	sp, r7
 8005ab6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005aba:	4770      	bx	lr

08005abc <LL_ADC_GetMultiDMATransfer>:
  *         @arg @ref LL_ADC_MULTI_REG_DMA_LIMIT_RES8_6B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES12_10B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES8_6B
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultiDMATransfer(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8005abc:	b480      	push	{r7}
 8005abe:	b083      	sub	sp, #12
 8005ac0:	af00      	add	r7, sp, #0
 8005ac2:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG));
 8005ac4:	687b      	ldr	r3, [r7, #4]
 8005ac6:	689b      	ldr	r3, [r3, #8]
 8005ac8:	f403 4360 	and.w	r3, r3, #57344	@ 0xe000
}
 8005acc:	4618      	mov	r0, r3
 8005ace:	370c      	adds	r7, #12
 8005ad0:	46bd      	mov	sp, r7
 8005ad2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ad6:	4770      	bx	lr

08005ad8 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8005ad8:	b480      	push	{r7}
 8005ada:	b083      	sub	sp, #12
 8005adc:	af00      	add	r7, sp, #0
 8005ade:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8005ae0:	687b      	ldr	r3, [r7, #4]
 8005ae2:	689b      	ldr	r3, [r3, #8]
 8005ae4:	f023 4320 	bic.w	r3, r3, #2684354560	@ 0xa0000000
 8005ae8:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8005aec:	687a      	ldr	r2, [r7, #4]
 8005aee:	6093      	str	r3, [r2, #8]
}
 8005af0:	bf00      	nop
 8005af2:	370c      	adds	r7, #12
 8005af4:	46bd      	mov	sp, r7
 8005af6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005afa:	4770      	bx	lr

08005afc <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 8005afc:	b480      	push	{r7}
 8005afe:	b083      	sub	sp, #12
 8005b00:	af00      	add	r7, sp, #0
 8005b02:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8005b04:	687b      	ldr	r3, [r7, #4]
 8005b06:	689b      	ldr	r3, [r3, #8]
 8005b08:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8005b0c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8005b10:	d101      	bne.n	8005b16 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8005b12:	2301      	movs	r3, #1
 8005b14:	e000      	b.n	8005b18 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8005b16:	2300      	movs	r3, #0
}
 8005b18:	4618      	mov	r0, r3
 8005b1a:	370c      	adds	r7, #12
 8005b1c:	46bd      	mov	sp, r7
 8005b1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b22:	4770      	bx	lr

08005b24 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8005b24:	b480      	push	{r7}
 8005b26:	b083      	sub	sp, #12
 8005b28:	af00      	add	r7, sp, #0
 8005b2a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8005b2c:	687b      	ldr	r3, [r7, #4]
 8005b2e:	689b      	ldr	r3, [r3, #8]
 8005b30:	f023 4310 	bic.w	r3, r3, #2415919104	@ 0x90000000
 8005b34:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8005b38:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 8005b3c:	687b      	ldr	r3, [r7, #4]
 8005b3e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8005b40:	bf00      	nop
 8005b42:	370c      	adds	r7, #12
 8005b44:	46bd      	mov	sp, r7
 8005b46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b4a:	4770      	bx	lr

08005b4c <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 8005b4c:	b480      	push	{r7}
 8005b4e:	b083      	sub	sp, #12
 8005b50:	af00      	add	r7, sp, #0
 8005b52:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8005b54:	687b      	ldr	r3, [r7, #4]
 8005b56:	689b      	ldr	r3, [r3, #8]
 8005b58:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005b5c:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8005b60:	d101      	bne.n	8005b66 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8005b62:	2301      	movs	r3, #1
 8005b64:	e000      	b.n	8005b68 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8005b66:	2300      	movs	r3, #0
}
 8005b68:	4618      	mov	r0, r3
 8005b6a:	370c      	adds	r7, #12
 8005b6c:	46bd      	mov	sp, r7
 8005b6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b72:	4770      	bx	lr

08005b74 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8005b74:	b480      	push	{r7}
 8005b76:	b083      	sub	sp, #12
 8005b78:	af00      	add	r7, sp, #0
 8005b7a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8005b7c:	687b      	ldr	r3, [r7, #4]
 8005b7e:	689b      	ldr	r3, [r3, #8]
 8005b80:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8005b84:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8005b88:	f043 0201 	orr.w	r2, r3, #1
 8005b8c:	687b      	ldr	r3, [r7, #4]
 8005b8e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8005b90:	bf00      	nop
 8005b92:	370c      	adds	r7, #12
 8005b94:	46bd      	mov	sp, r7
 8005b96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b9a:	4770      	bx	lr

08005b9c <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 8005b9c:	b480      	push	{r7}
 8005b9e:	b083      	sub	sp, #12
 8005ba0:	af00      	add	r7, sp, #0
 8005ba2:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8005ba4:	687b      	ldr	r3, [r7, #4]
 8005ba6:	689b      	ldr	r3, [r3, #8]
 8005ba8:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8005bac:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8005bb0:	f043 0202 	orr.w	r2, r3, #2
 8005bb4:	687b      	ldr	r3, [r7, #4]
 8005bb6:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 8005bb8:	bf00      	nop
 8005bba:	370c      	adds	r7, #12
 8005bbc:	46bd      	mov	sp, r7
 8005bbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bc2:	4770      	bx	lr

08005bc4 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 8005bc4:	b480      	push	{r7}
 8005bc6:	b083      	sub	sp, #12
 8005bc8:	af00      	add	r7, sp, #0
 8005bca:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8005bcc:	687b      	ldr	r3, [r7, #4]
 8005bce:	689b      	ldr	r3, [r3, #8]
 8005bd0:	f003 0301 	and.w	r3, r3, #1
 8005bd4:	2b01      	cmp	r3, #1
 8005bd6:	d101      	bne.n	8005bdc <LL_ADC_IsEnabled+0x18>
 8005bd8:	2301      	movs	r3, #1
 8005bda:	e000      	b.n	8005bde <LL_ADC_IsEnabled+0x1a>
 8005bdc:	2300      	movs	r3, #0
}
 8005bde:	4618      	mov	r0, r3
 8005be0:	370c      	adds	r7, #12
 8005be2:	46bd      	mov	sp, r7
 8005be4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005be8:	4770      	bx	lr

08005bea <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(const ADC_TypeDef *ADCx)
{
 8005bea:	b480      	push	{r7}
 8005bec:	b083      	sub	sp, #12
 8005bee:	af00      	add	r7, sp, #0
 8005bf0:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 8005bf2:	687b      	ldr	r3, [r7, #4]
 8005bf4:	689b      	ldr	r3, [r3, #8]
 8005bf6:	f003 0302 	and.w	r3, r3, #2
 8005bfa:	2b02      	cmp	r3, #2
 8005bfc:	d101      	bne.n	8005c02 <LL_ADC_IsDisableOngoing+0x18>
 8005bfe:	2301      	movs	r3, #1
 8005c00:	e000      	b.n	8005c04 <LL_ADC_IsDisableOngoing+0x1a>
 8005c02:	2300      	movs	r3, #0
}
 8005c04:	4618      	mov	r0, r3
 8005c06:	370c      	adds	r7, #12
 8005c08:	46bd      	mov	sp, r7
 8005c0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c0e:	4770      	bx	lr

08005c10 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8005c10:	b480      	push	{r7}
 8005c12:	b083      	sub	sp, #12
 8005c14:	af00      	add	r7, sp, #0
 8005c16:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8005c18:	687b      	ldr	r3, [r7, #4]
 8005c1a:	689b      	ldr	r3, [r3, #8]
 8005c1c:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8005c20:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8005c24:	f043 0204 	orr.w	r2, r3, #4
 8005c28:	687b      	ldr	r3, [r7, #4]
 8005c2a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8005c2c:	bf00      	nop
 8005c2e:	370c      	adds	r7, #12
 8005c30:	46bd      	mov	sp, r7
 8005c32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c36:	4770      	bx	lr

08005c38 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8005c38:	b480      	push	{r7}
 8005c3a:	b083      	sub	sp, #12
 8005c3c:	af00      	add	r7, sp, #0
 8005c3e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8005c40:	687b      	ldr	r3, [r7, #4]
 8005c42:	689b      	ldr	r3, [r3, #8]
 8005c44:	f003 0304 	and.w	r3, r3, #4
 8005c48:	2b04      	cmp	r3, #4
 8005c4a:	d101      	bne.n	8005c50 <LL_ADC_REG_IsConversionOngoing+0x18>
 8005c4c:	2301      	movs	r3, #1
 8005c4e:	e000      	b.n	8005c52 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8005c50:	2300      	movs	r3, #0
}
 8005c52:	4618      	mov	r0, r3
 8005c54:	370c      	adds	r7, #12
 8005c56:	46bd      	mov	sp, r7
 8005c58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c5c:	4770      	bx	lr

08005c5e <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8005c5e:	b480      	push	{r7}
 8005c60:	b083      	sub	sp, #12
 8005c62:	af00      	add	r7, sp, #0
 8005c64:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8005c66:	687b      	ldr	r3, [r7, #4]
 8005c68:	689b      	ldr	r3, [r3, #8]
 8005c6a:	f003 0308 	and.w	r3, r3, #8
 8005c6e:	2b08      	cmp	r3, #8
 8005c70:	d101      	bne.n	8005c76 <LL_ADC_INJ_IsConversionOngoing+0x18>
 8005c72:	2301      	movs	r3, #1
 8005c74:	e000      	b.n	8005c78 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8005c76:	2300      	movs	r3, #0
}
 8005c78:	4618      	mov	r0, r3
 8005c7a:	370c      	adds	r7, #12
 8005c7c:	46bd      	mov	sp, r7
 8005c7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c82:	4770      	bx	lr

08005c84 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8005c84:	b590      	push	{r4, r7, lr}
 8005c86:	b089      	sub	sp, #36	@ 0x24
 8005c88:	af00      	add	r7, sp, #0
 8005c8a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8005c8c:	2300      	movs	r3, #0
 8005c8e:	77fb      	strb	r3, [r7, #31]
  uint32_t tmp_cfgr;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
  __IO uint32_t wait_loop_index = 0UL;
 8005c90:	2300      	movs	r3, #0
 8005c92:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 8005c94:	687b      	ldr	r3, [r7, #4]
 8005c96:	2b00      	cmp	r3, #0
 8005c98:	d101      	bne.n	8005c9e <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8005c9a:	2301      	movs	r3, #1
 8005c9c:	e167      	b.n	8005f6e <HAL_ADC_Init+0x2ea>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8005c9e:	687b      	ldr	r3, [r7, #4]
 8005ca0:	695b      	ldr	r3, [r3, #20]
 8005ca2:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8005ca4:	687b      	ldr	r3, [r7, #4]
 8005ca6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005ca8:	2b00      	cmp	r3, #0
 8005caa:	d109      	bne.n	8005cc0 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8005cac:	6878      	ldr	r0, [r7, #4]
 8005cae:	f7fc fc91 	bl	80025d4 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8005cb2:	687b      	ldr	r3, [r7, #4]
 8005cb4:	2200      	movs	r2, #0
 8005cb6:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8005cb8:	687b      	ldr	r3, [r7, #4]
 8005cba:	2200      	movs	r2, #0
 8005cbc:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8005cc0:	687b      	ldr	r3, [r7, #4]
 8005cc2:	681b      	ldr	r3, [r3, #0]
 8005cc4:	4618      	mov	r0, r3
 8005cc6:	f7ff ff19 	bl	8005afc <LL_ADC_IsDeepPowerDownEnabled>
 8005cca:	4603      	mov	r3, r0
 8005ccc:	2b00      	cmp	r3, #0
 8005cce:	d004      	beq.n	8005cda <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8005cd0:	687b      	ldr	r3, [r7, #4]
 8005cd2:	681b      	ldr	r3, [r3, #0]
 8005cd4:	4618      	mov	r0, r3
 8005cd6:	f7ff feff 	bl	8005ad8 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8005cda:	687b      	ldr	r3, [r7, #4]
 8005cdc:	681b      	ldr	r3, [r3, #0]
 8005cde:	4618      	mov	r0, r3
 8005ce0:	f7ff ff34 	bl	8005b4c <LL_ADC_IsInternalRegulatorEnabled>
 8005ce4:	4603      	mov	r3, r0
 8005ce6:	2b00      	cmp	r3, #0
 8005ce8:	d115      	bne.n	8005d16 <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8005cea:	687b      	ldr	r3, [r7, #4]
 8005cec:	681b      	ldr	r3, [r3, #0]
 8005cee:	4618      	mov	r0, r3
 8005cf0:	f7ff ff18 	bl	8005b24 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8005cf4:	4ba0      	ldr	r3, [pc, #640]	@ (8005f78 <HAL_ADC_Init+0x2f4>)
 8005cf6:	681b      	ldr	r3, [r3, #0]
 8005cf8:	099b      	lsrs	r3, r3, #6
 8005cfa:	4aa0      	ldr	r2, [pc, #640]	@ (8005f7c <HAL_ADC_Init+0x2f8>)
 8005cfc:	fba2 2303 	umull	r2, r3, r2, r3
 8005d00:	099b      	lsrs	r3, r3, #6
 8005d02:	3301      	adds	r3, #1
 8005d04:	005b      	lsls	r3, r3, #1
 8005d06:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8005d08:	e002      	b.n	8005d10 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 8005d0a:	68fb      	ldr	r3, [r7, #12]
 8005d0c:	3b01      	subs	r3, #1
 8005d0e:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8005d10:	68fb      	ldr	r3, [r7, #12]
 8005d12:	2b00      	cmp	r3, #0
 8005d14:	d1f9      	bne.n	8005d0a <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8005d16:	687b      	ldr	r3, [r7, #4]
 8005d18:	681b      	ldr	r3, [r3, #0]
 8005d1a:	4618      	mov	r0, r3
 8005d1c:	f7ff ff16 	bl	8005b4c <LL_ADC_IsInternalRegulatorEnabled>
 8005d20:	4603      	mov	r3, r0
 8005d22:	2b00      	cmp	r3, #0
 8005d24:	d10d      	bne.n	8005d42 <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8005d26:	687b      	ldr	r3, [r7, #4]
 8005d28:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005d2a:	f043 0210 	orr.w	r2, r3, #16
 8005d2e:	687b      	ldr	r3, [r7, #4]
 8005d30:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8005d32:	687b      	ldr	r3, [r7, #4]
 8005d34:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005d36:	f043 0201 	orr.w	r2, r3, #1
 8005d3a:	687b      	ldr	r3, [r7, #4]
 8005d3c:	661a      	str	r2, [r3, #96]	@ 0x60

    tmp_hal_status = HAL_ERROR;
 8005d3e:	2301      	movs	r3, #1
 8005d40:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8005d42:	687b      	ldr	r3, [r7, #4]
 8005d44:	681b      	ldr	r3, [r3, #0]
 8005d46:	4618      	mov	r0, r3
 8005d48:	f7ff ff76 	bl	8005c38 <LL_ADC_REG_IsConversionOngoing>
 8005d4c:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8005d4e:	687b      	ldr	r3, [r7, #4]
 8005d50:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005d52:	f003 0310 	and.w	r3, r3, #16
 8005d56:	2b00      	cmp	r3, #0
 8005d58:	f040 8100 	bne.w	8005f5c <HAL_ADC_Init+0x2d8>
      && (tmp_adc_is_conversion_on_going_regular == 0UL)
 8005d5c:	697b      	ldr	r3, [r7, #20]
 8005d5e:	2b00      	cmp	r3, #0
 8005d60:	f040 80fc 	bne.w	8005f5c <HAL_ADC_Init+0x2d8>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8005d64:	687b      	ldr	r3, [r7, #4]
 8005d66:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005d68:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 8005d6c:	f043 0202 	orr.w	r2, r3, #2
 8005d70:	687b      	ldr	r3, [r7, #4]
 8005d72:	65da      	str	r2, [r3, #92]	@ 0x5c
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8005d74:	687b      	ldr	r3, [r7, #4]
 8005d76:	681b      	ldr	r3, [r3, #0]
 8005d78:	4618      	mov	r0, r3
 8005d7a:	f7ff ff23 	bl	8005bc4 <LL_ADC_IsEnabled>
 8005d7e:	4603      	mov	r3, r0
 8005d80:	2b00      	cmp	r3, #0
 8005d82:	d111      	bne.n	8005da8 <HAL_ADC_Init+0x124>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8005d84:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 8005d88:	f7ff ff1c 	bl	8005bc4 <LL_ADC_IsEnabled>
 8005d8c:	4604      	mov	r4, r0
 8005d8e:	487c      	ldr	r0, [pc, #496]	@ (8005f80 <HAL_ADC_Init+0x2fc>)
 8005d90:	f7ff ff18 	bl	8005bc4 <LL_ADC_IsEnabled>
 8005d94:	4603      	mov	r3, r0
 8005d96:	4323      	orrs	r3, r4
 8005d98:	2b00      	cmp	r3, #0
 8005d9a:	d105      	bne.n	8005da8 <HAL_ADC_Init+0x124>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8005d9c:	687b      	ldr	r3, [r7, #4]
 8005d9e:	685b      	ldr	r3, [r3, #4]
 8005da0:	4619      	mov	r1, r3
 8005da2:	4878      	ldr	r0, [pc, #480]	@ (8005f84 <HAL_ADC_Init+0x300>)
 8005da4:	f7ff fd08 	bl	80057b8 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8005da8:	687b      	ldr	r3, [r7, #4]
 8005daa:	7f5b      	ldrb	r3, [r3, #29]
 8005dac:	035a      	lsls	r2, r3, #13
                 hadc->Init.Overrun                                                     |
 8005dae:	687b      	ldr	r3, [r7, #4]
 8005db0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8005db2:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                                   |
 8005db4:	687b      	ldr	r3, [r7, #4]
 8005db6:	68db      	ldr	r3, [r3, #12]
                 hadc->Init.Overrun                                                     |
 8005db8:	431a      	orrs	r2, r3
                 hadc->Init.Resolution                                                  |
 8005dba:	687b      	ldr	r3, [r7, #4]
 8005dbc:	689b      	ldr	r3, [r3, #8]
                 hadc->Init.DataAlign                                                   |
 8005dbe:	431a      	orrs	r2, r3
                 ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8005dc0:	687b      	ldr	r3, [r7, #4]
 8005dc2:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8005dc6:	041b      	lsls	r3, r3, #16
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8005dc8:	4313      	orrs	r3, r2
 8005dca:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8005dcc:	687b      	ldr	r3, [r7, #4]
 8005dce:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8005dd2:	2b01      	cmp	r3, #1
 8005dd4:	d106      	bne.n	8005de4 <HAL_ADC_Init+0x160>
    {
      tmp_cfgr |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8005dd6:	687b      	ldr	r3, [r7, #4]
 8005dd8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005dda:	3b01      	subs	r3, #1
 8005ddc:	045b      	lsls	r3, r3, #17
 8005dde:	69ba      	ldr	r2, [r7, #24]
 8005de0:	4313      	orrs	r3, r2
 8005de2:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8005de4:	687b      	ldr	r3, [r7, #4]
 8005de6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005de8:	2b00      	cmp	r3, #0
 8005dea:	d009      	beq.n	8005e00 <HAL_ADC_Init+0x17c>
    {
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8005dec:	687b      	ldr	r3, [r7, #4]
 8005dee:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005df0:	f403 7278 	and.w	r2, r3, #992	@ 0x3e0
                   | hadc->Init.ExternalTrigConvEdge
 8005df4:	687b      	ldr	r3, [r7, #4]
 8005df6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005df8:	4313      	orrs	r3, r2
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8005dfa:	69ba      	ldr	r2, [r7, #24]
 8005dfc:	4313      	orrs	r3, r2
 8005dfe:	61bb      	str	r3, [r7, #24]
                  );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmp_cfgr);
 8005e00:	687b      	ldr	r3, [r7, #4]
 8005e02:	681b      	ldr	r3, [r3, #0]
 8005e04:	68da      	ldr	r2, [r3, #12]
 8005e06:	4b60      	ldr	r3, [pc, #384]	@ (8005f88 <HAL_ADC_Init+0x304>)
 8005e08:	4013      	ands	r3, r2
 8005e0a:	687a      	ldr	r2, [r7, #4]
 8005e0c:	6812      	ldr	r2, [r2, #0]
 8005e0e:	69b9      	ldr	r1, [r7, #24]
 8005e10:	430b      	orrs	r3, r1
 8005e12:	60d3      	str	r3, [r2, #12]

    /* Configuration of sampling mode */
    MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_BULB | ADC_CFGR2_SMPTRIG, hadc->Init.SamplingMode);
 8005e14:	687b      	ldr	r3, [r7, #4]
 8005e16:	681b      	ldr	r3, [r3, #0]
 8005e18:	691b      	ldr	r3, [r3, #16]
 8005e1a:	f023 6140 	bic.w	r1, r3, #201326592	@ 0xc000000
 8005e1e:	687b      	ldr	r3, [r7, #4]
 8005e20:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8005e22:	687b      	ldr	r3, [r7, #4]
 8005e24:	681b      	ldr	r3, [r3, #0]
 8005e26:	430a      	orrs	r2, r1
 8005e28:	611a      	str	r2, [r3, #16]
    /* conversion on going on regular and injected groups:                    */
    /*  - Gain Compensation               Init.GainCompensation               */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8005e2a:	687b      	ldr	r3, [r7, #4]
 8005e2c:	681b      	ldr	r3, [r3, #0]
 8005e2e:	4618      	mov	r0, r3
 8005e30:	f7ff ff15 	bl	8005c5e <LL_ADC_INJ_IsConversionOngoing>
 8005e34:	6138      	str	r0, [r7, #16]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8005e36:	697b      	ldr	r3, [r7, #20]
 8005e38:	2b00      	cmp	r3, #0
 8005e3a:	d16d      	bne.n	8005f18 <HAL_ADC_Init+0x294>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8005e3c:	693b      	ldr	r3, [r7, #16]
 8005e3e:	2b00      	cmp	r3, #0
 8005e40:	d16a      	bne.n	8005f18 <HAL_ADC_Init+0x294>
       )
    {
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
                   ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8005e42:	687b      	ldr	r3, [r7, #4]
 8005e44:	7f1b      	ldrb	r3, [r3, #28]
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8005e46:	039a      	lsls	r2, r3, #14
                   ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8005e48:	687b      	ldr	r3, [r7, #4]
 8005e4a:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8005e4e:	005b      	lsls	r3, r3, #1
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8005e50:	4313      	orrs	r3, r2
 8005e52:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmp_cfgr);
 8005e54:	687b      	ldr	r3, [r7, #4]
 8005e56:	681b      	ldr	r3, [r3, #0]
 8005e58:	68db      	ldr	r3, [r3, #12]
 8005e5a:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8005e5e:	f023 0302 	bic.w	r3, r3, #2
 8005e62:	687a      	ldr	r2, [r7, #4]
 8005e64:	6812      	ldr	r2, [r2, #0]
 8005e66:	69b9      	ldr	r1, [r7, #24]
 8005e68:	430b      	orrs	r3, r1
 8005e6a:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.GainCompensation != 0UL)
 8005e6c:	687b      	ldr	r3, [r7, #4]
 8005e6e:	691b      	ldr	r3, [r3, #16]
 8005e70:	2b00      	cmp	r3, #0
 8005e72:	d017      	beq.n	8005ea4 <HAL_ADC_Init+0x220>
      {
        SET_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8005e74:	687b      	ldr	r3, [r7, #4]
 8005e76:	681b      	ldr	r3, [r3, #0]
 8005e78:	691a      	ldr	r2, [r3, #16]
 8005e7a:	687b      	ldr	r3, [r7, #4]
 8005e7c:	681b      	ldr	r3, [r3, #0]
 8005e7e:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 8005e82:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, hadc->Init.GainCompensation);
 8005e84:	687b      	ldr	r3, [r7, #4]
 8005e86:	681b      	ldr	r3, [r3, #0]
 8005e88:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8005e8c:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 8005e90:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8005e94:	687a      	ldr	r2, [r7, #4]
 8005e96:	6911      	ldr	r1, [r2, #16]
 8005e98:	687a      	ldr	r2, [r7, #4]
 8005e9a:	6812      	ldr	r2, [r2, #0]
 8005e9c:	430b      	orrs	r3, r1
 8005e9e:	f8c2 30c0 	str.w	r3, [r2, #192]	@ 0xc0
 8005ea2:	e013      	b.n	8005ecc <HAL_ADC_Init+0x248>
      }
      else
      {
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8005ea4:	687b      	ldr	r3, [r7, #4]
 8005ea6:	681b      	ldr	r3, [r3, #0]
 8005ea8:	691a      	ldr	r2, [r3, #16]
 8005eaa:	687b      	ldr	r3, [r7, #4]
 8005eac:	681b      	ldr	r3, [r3, #0]
 8005eae:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 8005eb2:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, 0UL);
 8005eb4:	687b      	ldr	r3, [r7, #4]
 8005eb6:	681b      	ldr	r3, [r3, #0]
 8005eb8:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8005ebc:	687a      	ldr	r2, [r7, #4]
 8005ebe:	6812      	ldr	r2, [r2, #0]
 8005ec0:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 8005ec4:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8005ec8:	f8c2 30c0 	str.w	r3, [r2, #192]	@ 0xc0
      }

      if (hadc->Init.OversamplingMode == ENABLE)
 8005ecc:	687b      	ldr	r3, [r7, #4]
 8005ece:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8005ed2:	2b01      	cmp	r3, #1
 8005ed4:	d118      	bne.n	8005f08 <HAL_ADC_Init+0x284>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 8005ed6:	687b      	ldr	r3, [r7, #4]
 8005ed8:	681b      	ldr	r3, [r3, #0]
 8005eda:	691b      	ldr	r3, [r3, #16]
 8005edc:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 8005ee0:	f023 0304 	bic.w	r3, r3, #4
 8005ee4:	687a      	ldr	r2, [r7, #4]
 8005ee6:	6c51      	ldr	r1, [r2, #68]	@ 0x44
 8005ee8:	687a      	ldr	r2, [r7, #4]
 8005eea:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8005eec:	4311      	orrs	r1, r2
 8005eee:	687a      	ldr	r2, [r7, #4]
 8005ef0:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 8005ef2:	4311      	orrs	r1, r2
 8005ef4:	687a      	ldr	r2, [r7, #4]
 8005ef6:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8005ef8:	430a      	orrs	r2, r1
 8005efa:	431a      	orrs	r2, r3
 8005efc:	687b      	ldr	r3, [r7, #4]
 8005efe:	681b      	ldr	r3, [r3, #0]
 8005f00:	f042 0201 	orr.w	r2, r2, #1
 8005f04:	611a      	str	r2, [r3, #16]
 8005f06:	e007      	b.n	8005f18 <HAL_ADC_Init+0x294>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8005f08:	687b      	ldr	r3, [r7, #4]
 8005f0a:	681b      	ldr	r3, [r3, #0]
 8005f0c:	691a      	ldr	r2, [r3, #16]
 8005f0e:	687b      	ldr	r3, [r7, #4]
 8005f10:	681b      	ldr	r3, [r3, #0]
 8005f12:	f022 0201 	bic.w	r2, r2, #1
 8005f16:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8005f18:	687b      	ldr	r3, [r7, #4]
 8005f1a:	695b      	ldr	r3, [r3, #20]
 8005f1c:	2b01      	cmp	r3, #1
 8005f1e:	d10c      	bne.n	8005f3a <HAL_ADC_Init+0x2b6>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8005f20:	687b      	ldr	r3, [r7, #4]
 8005f22:	681b      	ldr	r3, [r3, #0]
 8005f24:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005f26:	f023 010f 	bic.w	r1, r3, #15
 8005f2a:	687b      	ldr	r3, [r7, #4]
 8005f2c:	6a1b      	ldr	r3, [r3, #32]
 8005f2e:	1e5a      	subs	r2, r3, #1
 8005f30:	687b      	ldr	r3, [r7, #4]
 8005f32:	681b      	ldr	r3, [r3, #0]
 8005f34:	430a      	orrs	r2, r1
 8005f36:	631a      	str	r2, [r3, #48]	@ 0x30
 8005f38:	e007      	b.n	8005f4a <HAL_ADC_Init+0x2c6>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8005f3a:	687b      	ldr	r3, [r7, #4]
 8005f3c:	681b      	ldr	r3, [r3, #0]
 8005f3e:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8005f40:	687b      	ldr	r3, [r7, #4]
 8005f42:	681b      	ldr	r3, [r3, #0]
 8005f44:	f022 020f 	bic.w	r2, r2, #15
 8005f48:	631a      	str	r2, [r3, #48]	@ 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8005f4a:	687b      	ldr	r3, [r7, #4]
 8005f4c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005f4e:	f023 0303 	bic.w	r3, r3, #3
 8005f52:	f043 0201 	orr.w	r2, r3, #1
 8005f56:	687b      	ldr	r3, [r7, #4]
 8005f58:	65da      	str	r2, [r3, #92]	@ 0x5c
 8005f5a:	e007      	b.n	8005f6c <HAL_ADC_Init+0x2e8>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8005f5c:	687b      	ldr	r3, [r7, #4]
 8005f5e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005f60:	f043 0210 	orr.w	r2, r3, #16
 8005f64:	687b      	ldr	r3, [r7, #4]
 8005f66:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 8005f68:	2301      	movs	r3, #1
 8005f6a:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8005f6c:	7ffb      	ldrb	r3, [r7, #31]
}
 8005f6e:	4618      	mov	r0, r3
 8005f70:	3724      	adds	r7, #36	@ 0x24
 8005f72:	46bd      	mov	sp, r7
 8005f74:	bd90      	pop	{r4, r7, pc}
 8005f76:	bf00      	nop
 8005f78:	20000008 	.word	0x20000008
 8005f7c:	053e2d63 	.word	0x053e2d63
 8005f80:	50000100 	.word	0x50000100
 8005f84:	50000300 	.word	0x50000300
 8005f88:	fff04007 	.word	0xfff04007

08005f8c <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 8005f8c:	b580      	push	{r7, lr}
 8005f8e:	b086      	sub	sp, #24
 8005f90:	af00      	add	r7, sp, #0
 8005f92:	60f8      	str	r0, [r7, #12]
 8005f94:	60b9      	str	r1, [r7, #8]
 8005f96:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
#if defined(ADC_MULTIMODE_SUPPORT)
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8005f98:	4851      	ldr	r0, [pc, #324]	@ (80060e0 <HAL_ADC_Start_DMA+0x154>)
 8005f9a:	f7ff fd81 	bl	8005aa0 <LL_ADC_GetMultimode>
 8005f9e:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8005fa0:	68fb      	ldr	r3, [r7, #12]
 8005fa2:	681b      	ldr	r3, [r3, #0]
 8005fa4:	4618      	mov	r0, r3
 8005fa6:	f7ff fe47 	bl	8005c38 <LL_ADC_REG_IsConversionOngoing>
 8005faa:	4603      	mov	r3, r0
 8005fac:	2b00      	cmp	r3, #0
 8005fae:	f040 808f 	bne.w	80060d0 <HAL_ADC_Start_DMA+0x144>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8005fb2:	68fb      	ldr	r3, [r7, #12]
 8005fb4:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 8005fb8:	2b01      	cmp	r3, #1
 8005fba:	d101      	bne.n	8005fc0 <HAL_ADC_Start_DMA+0x34>
 8005fbc:	2302      	movs	r3, #2
 8005fbe:	e08a      	b.n	80060d6 <HAL_ADC_Start_DMA+0x14a>
 8005fc0:	68fb      	ldr	r3, [r7, #12]
 8005fc2:	2201      	movs	r2, #1
 8005fc4:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

#if defined(ADC_MULTIMODE_SUPPORT)
    /* Ensure that multimode regular conversions are not enabled.   */
    /* Otherwise, dedicated API HAL_ADCEx_MultiModeStart_DMA() must be used.  */
    if ((ADC_IS_INDEPENDENT(hadc) != RESET)
 8005fc8:	693b      	ldr	r3, [r7, #16]
 8005fca:	2b00      	cmp	r3, #0
 8005fcc:	d005      	beq.n	8005fda <HAL_ADC_Start_DMA+0x4e>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8005fce:	693b      	ldr	r3, [r7, #16]
 8005fd0:	2b05      	cmp	r3, #5
 8005fd2:	d002      	beq.n	8005fda <HAL_ADC_Start_DMA+0x4e>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8005fd4:	693b      	ldr	r3, [r7, #16]
 8005fd6:	2b09      	cmp	r3, #9
 8005fd8:	d173      	bne.n	80060c2 <HAL_ADC_Start_DMA+0x136>
       )
#endif /* ADC_MULTIMODE_SUPPORT */
    {
      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 8005fda:	68f8      	ldr	r0, [r7, #12]
 8005fdc:	f000 feb2 	bl	8006d44 <ADC_Enable>
 8005fe0:	4603      	mov	r3, r0
 8005fe2:	75fb      	strb	r3, [r7, #23]

      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 8005fe4:	7dfb      	ldrb	r3, [r7, #23]
 8005fe6:	2b00      	cmp	r3, #0
 8005fe8:	d166      	bne.n	80060b8 <HAL_ADC_Start_DMA+0x12c>
      {
        /* Set ADC state                                                        */
        /* - Clear state bitfield related to regular group conversion results   */
        /* - Set state bitfield related to regular operation                    */
        ADC_STATE_CLR_SET(hadc->State,
 8005fea:	68fb      	ldr	r3, [r7, #12]
 8005fec:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005fee:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8005ff2:	f023 0301 	bic.w	r3, r3, #1
 8005ff6:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8005ffa:	68fb      	ldr	r3, [r7, #12]
 8005ffc:	65da      	str	r2, [r3, #92]	@ 0x5c

#if defined(ADC_MULTIMODE_SUPPORT)
        /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
          - if ADC instance is master or if multimode feature is not available
          - if multimode setting is disabled (ADC instance slave in independent mode) */
        if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8005ffe:	68fb      	ldr	r3, [r7, #12]
 8006000:	681b      	ldr	r3, [r3, #0]
 8006002:	4a38      	ldr	r2, [pc, #224]	@ (80060e4 <HAL_ADC_Start_DMA+0x158>)
 8006004:	4293      	cmp	r3, r2
 8006006:	d002      	beq.n	800600e <HAL_ADC_Start_DMA+0x82>
 8006008:	68fb      	ldr	r3, [r7, #12]
 800600a:	681b      	ldr	r3, [r3, #0]
 800600c:	e001      	b.n	8006012 <HAL_ADC_Start_DMA+0x86>
 800600e:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 8006012:	68fa      	ldr	r2, [r7, #12]
 8006014:	6812      	ldr	r2, [r2, #0]
 8006016:	4293      	cmp	r3, r2
 8006018:	d002      	beq.n	8006020 <HAL_ADC_Start_DMA+0x94>
            || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 800601a:	693b      	ldr	r3, [r7, #16]
 800601c:	2b00      	cmp	r3, #0
 800601e:	d105      	bne.n	800602c <HAL_ADC_Start_DMA+0xa0>
           )
        {
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8006020:	68fb      	ldr	r3, [r7, #12]
 8006022:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006024:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8006028:	68fb      	ldr	r3, [r7, #12]
 800602a:	65da      	str	r2, [r3, #92]	@ 0x5c
        }
#endif /* ADC_MULTIMODE_SUPPORT */

        /* Check if a conversion is on going on ADC group injected */
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 800602c:	68fb      	ldr	r3, [r7, #12]
 800602e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006030:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8006034:	2b00      	cmp	r3, #0
 8006036:	d006      	beq.n	8006046 <HAL_ADC_Start_DMA+0xba>
        {
          /* Reset ADC error code fields related to regular conversions only */
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8006038:	68fb      	ldr	r3, [r7, #12]
 800603a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800603c:	f023 0206 	bic.w	r2, r3, #6
 8006040:	68fb      	ldr	r3, [r7, #12]
 8006042:	661a      	str	r2, [r3, #96]	@ 0x60
 8006044:	e002      	b.n	800604c <HAL_ADC_Start_DMA+0xc0>
        }
        else
        {
          /* Reset all ADC error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 8006046:	68fb      	ldr	r3, [r7, #12]
 8006048:	2200      	movs	r2, #0
 800604a:	661a      	str	r2, [r3, #96]	@ 0x60
        }

        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 800604c:	68fb      	ldr	r3, [r7, #12]
 800604e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006050:	4a25      	ldr	r2, [pc, #148]	@ (80060e8 <HAL_ADC_Start_DMA+0x15c>)
 8006052:	62da      	str	r2, [r3, #44]	@ 0x2c

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8006054:	68fb      	ldr	r3, [r7, #12]
 8006056:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006058:	4a24      	ldr	r2, [pc, #144]	@ (80060ec <HAL_ADC_Start_DMA+0x160>)
 800605a:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 800605c:	68fb      	ldr	r3, [r7, #12]
 800605e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006060:	4a23      	ldr	r2, [pc, #140]	@ (80060f0 <HAL_ADC_Start_DMA+0x164>)
 8006062:	635a      	str	r2, [r3, #52]	@ 0x34
        /* ADC start (in case of SW start):                                   */

        /* Clear regular group conversion flag and overrun flag               */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8006064:	68fb      	ldr	r3, [r7, #12]
 8006066:	681b      	ldr	r3, [r3, #0]
 8006068:	221c      	movs	r2, #28
 800606a:	601a      	str	r2, [r3, #0]

        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 800606c:	68fb      	ldr	r3, [r7, #12]
 800606e:	2200      	movs	r2, #0
 8006070:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

        /* With DMA, overrun event is always considered as an error even if
           hadc->Init.Overrun is set to ADC_OVR_DATA_OVERWRITTEN. Therefore,
           ADC_IT_OVR is enabled. */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8006074:	68fb      	ldr	r3, [r7, #12]
 8006076:	681b      	ldr	r3, [r3, #0]
 8006078:	685a      	ldr	r2, [r3, #4]
 800607a:	68fb      	ldr	r3, [r7, #12]
 800607c:	681b      	ldr	r3, [r3, #0]
 800607e:	f042 0210 	orr.w	r2, r2, #16
 8006082:	605a      	str	r2, [r3, #4]

        /* Enable ADC DMA mode */
        SET_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 8006084:	68fb      	ldr	r3, [r7, #12]
 8006086:	681b      	ldr	r3, [r3, #0]
 8006088:	68da      	ldr	r2, [r3, #12]
 800608a:	68fb      	ldr	r3, [r7, #12]
 800608c:	681b      	ldr	r3, [r3, #0]
 800608e:	f042 0201 	orr.w	r2, r2, #1
 8006092:	60da      	str	r2, [r3, #12]

        /* Start the DMA channel */
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8006094:	68fb      	ldr	r3, [r7, #12]
 8006096:	6d58      	ldr	r0, [r3, #84]	@ 0x54
 8006098:	68fb      	ldr	r3, [r7, #12]
 800609a:	681b      	ldr	r3, [r3, #0]
 800609c:	3340      	adds	r3, #64	@ 0x40
 800609e:	4619      	mov	r1, r3
 80060a0:	68ba      	ldr	r2, [r7, #8]
 80060a2:	687b      	ldr	r3, [r7, #4]
 80060a4:	f001 faae 	bl	8007604 <HAL_DMA_Start_IT>
 80060a8:	4603      	mov	r3, r0
 80060aa:	75fb      	strb	r3, [r7, #23]
        /* Enable conversion of regular group.                                  */
        /* If software start has been selected, conversion starts immediately.  */
        /* If external trigger has been selected, conversion will start at next */
        /* trigger event.                                                       */
        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 80060ac:	68fb      	ldr	r3, [r7, #12]
 80060ae:	681b      	ldr	r3, [r3, #0]
 80060b0:	4618      	mov	r0, r3
 80060b2:	f7ff fdad 	bl	8005c10 <LL_ADC_REG_StartConversion>
      if (tmp_hal_status == HAL_OK)
 80060b6:	e00d      	b.n	80060d4 <HAL_ADC_Start_DMA+0x148>
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 80060b8:	68fb      	ldr	r3, [r7, #12]
 80060ba:	2200      	movs	r2, #0
 80060bc:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
      if (tmp_hal_status == HAL_OK)
 80060c0:	e008      	b.n	80060d4 <HAL_ADC_Start_DMA+0x148>

    }
#if defined(ADC_MULTIMODE_SUPPORT)
    else
    {
      tmp_hal_status = HAL_ERROR;
 80060c2:	2301      	movs	r3, #1
 80060c4:	75fb      	strb	r3, [r7, #23]
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 80060c6:	68fb      	ldr	r3, [r7, #12]
 80060c8:	2200      	movs	r2, #0
 80060ca:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
 80060ce:	e001      	b.n	80060d4 <HAL_ADC_Start_DMA+0x148>
    }
#endif /* ADC_MULTIMODE_SUPPORT */
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 80060d0:	2302      	movs	r3, #2
 80060d2:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 80060d4:	7dfb      	ldrb	r3, [r7, #23]
}
 80060d6:	4618      	mov	r0, r3
 80060d8:	3718      	adds	r7, #24
 80060da:	46bd      	mov	sp, r7
 80060dc:	bd80      	pop	{r7, pc}
 80060de:	bf00      	nop
 80060e0:	50000300 	.word	0x50000300
 80060e4:	50000100 	.word	0x50000100
 80060e8:	08006f0f 	.word	0x08006f0f
 80060ec:	08006fe7 	.word	0x08006fe7
 80060f0:	08007003 	.word	0x08007003

080060f4 <HAL_ADC_IRQHandler>:
  * @brief  Handle ADC interrupt request.
  * @param hadc ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef *hadc)
{
 80060f4:	b580      	push	{r7, lr}
 80060f6:	b08a      	sub	sp, #40	@ 0x28
 80060f8:	af00      	add	r7, sp, #0
 80060fa:	6078      	str	r0, [r7, #4]
  uint32_t overrun_error = 0UL; /* flag set if overrun occurrence has to be considered as an error */
 80060fc:	2300      	movs	r3, #0
 80060fe:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t tmp_isr = hadc->Instance->ISR;
 8006100:	687b      	ldr	r3, [r7, #4]
 8006102:	681b      	ldr	r3, [r3, #0]
 8006104:	681b      	ldr	r3, [r3, #0]
 8006106:	61fb      	str	r3, [r7, #28]
  uint32_t tmp_ier = hadc->Instance->IER;
 8006108:	687b      	ldr	r3, [r7, #4]
 800610a:	681b      	ldr	r3, [r3, #0]
 800610c:	685b      	ldr	r3, [r3, #4]
 800610e:	61bb      	str	r3, [r7, #24]
  uint32_t tmp_adc_inj_is_trigger_source_sw_start;
  uint32_t tmp_adc_reg_is_trigger_source_sw_start;
  uint32_t tmp_cfgr;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8006110:	4883      	ldr	r0, [pc, #524]	@ (8006320 <HAL_ADC_IRQHandler+0x22c>)
 8006112:	f7ff fcc5 	bl	8005aa0 <LL_ADC_GetMultimode>
 8006116:	6178      	str	r0, [r7, #20]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));

  /* ========== Check End of Sampling flag for ADC group regular ========== */
  if (((tmp_isr & ADC_FLAG_EOSMP) == ADC_FLAG_EOSMP) && ((tmp_ier & ADC_IT_EOSMP) == ADC_IT_EOSMP))
 8006118:	69fb      	ldr	r3, [r7, #28]
 800611a:	f003 0302 	and.w	r3, r3, #2
 800611e:	2b00      	cmp	r3, #0
 8006120:	d017      	beq.n	8006152 <HAL_ADC_IRQHandler+0x5e>
 8006122:	69bb      	ldr	r3, [r7, #24]
 8006124:	f003 0302 	and.w	r3, r3, #2
 8006128:	2b00      	cmp	r3, #0
 800612a:	d012      	beq.n	8006152 <HAL_ADC_IRQHandler+0x5e>
  {
    /* Update state machine on end of sampling status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 800612c:	687b      	ldr	r3, [r7, #4]
 800612e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006130:	f003 0310 	and.w	r3, r3, #16
 8006134:	2b00      	cmp	r3, #0
 8006136:	d105      	bne.n	8006144 <HAL_ADC_IRQHandler+0x50>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOSMP);
 8006138:	687b      	ldr	r3, [r7, #4]
 800613a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800613c:	f443 6200 	orr.w	r2, r3, #2048	@ 0x800
 8006140:	687b      	ldr	r3, [r7, #4]
 8006142:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* End Of Sampling callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->EndOfSamplingCallback(hadc);
#else
    HAL_ADCEx_EndOfSamplingCallback(hadc);
 8006144:	6878      	ldr	r0, [r7, #4]
 8006146:	f001 f82d 	bl	80071a4 <HAL_ADCEx_EndOfSamplingCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOSMP);
 800614a:	687b      	ldr	r3, [r7, #4]
 800614c:	681b      	ldr	r3, [r3, #0]
 800614e:	2202      	movs	r2, #2
 8006150:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group regular end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 8006152:	69fb      	ldr	r3, [r7, #28]
 8006154:	f003 0304 	and.w	r3, r3, #4
 8006158:	2b00      	cmp	r3, #0
 800615a:	d004      	beq.n	8006166 <HAL_ADC_IRQHandler+0x72>
 800615c:	69bb      	ldr	r3, [r7, #24]
 800615e:	f003 0304 	and.w	r3, r3, #4
 8006162:	2b00      	cmp	r3, #0
 8006164:	d10a      	bne.n	800617c <HAL_ADC_IRQHandler+0x88>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 8006166:	69fb      	ldr	r3, [r7, #28]
 8006168:	f003 0308 	and.w	r3, r3, #8
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 800616c:	2b00      	cmp	r3, #0
 800616e:	f000 8085 	beq.w	800627c <HAL_ADC_IRQHandler+0x188>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 8006172:	69bb      	ldr	r3, [r7, #24]
 8006174:	f003 0308 	and.w	r3, r3, #8
 8006178:	2b00      	cmp	r3, #0
 800617a:	d07f      	beq.n	800627c <HAL_ADC_IRQHandler+0x188>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 800617c:	687b      	ldr	r3, [r7, #4]
 800617e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006180:	f003 0310 	and.w	r3, r3, #16
 8006184:	2b00      	cmp	r3, #0
 8006186:	d105      	bne.n	8006194 <HAL_ADC_IRQHandler+0xa0>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8006188:	687b      	ldr	r3, [r7, #4]
 800618a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800618c:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8006190:	687b      	ldr	r3, [r7, #4]
 8006192:	65da      	str	r2, [r3, #92]	@ 0x5c
    }

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8006194:	687b      	ldr	r3, [r7, #4]
 8006196:	681b      	ldr	r3, [r3, #0]
 8006198:	4618      	mov	r0, r3
 800619a:	f7ff fbdf 	bl	800595c <LL_ADC_REG_IsTriggerSourceSWStart>
 800619e:	4603      	mov	r3, r0
 80061a0:	2b00      	cmp	r3, #0
 80061a2:	d064      	beq.n	800626e <HAL_ADC_IRQHandler+0x17a>
    {
      /* Get relevant register CFGR in ADC instance of ADC master or slave    */
      /* in function of multimode state (for devices with multimode           */
      /* available).                                                          */
#if defined(ADC_MULTIMODE_SUPPORT)
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 80061a4:	687b      	ldr	r3, [r7, #4]
 80061a6:	681b      	ldr	r3, [r3, #0]
 80061a8:	4a5e      	ldr	r2, [pc, #376]	@ (8006324 <HAL_ADC_IRQHandler+0x230>)
 80061aa:	4293      	cmp	r3, r2
 80061ac:	d002      	beq.n	80061b4 <HAL_ADC_IRQHandler+0xc0>
 80061ae:	687b      	ldr	r3, [r7, #4]
 80061b0:	681b      	ldr	r3, [r3, #0]
 80061b2:	e001      	b.n	80061b8 <HAL_ADC_IRQHandler+0xc4>
 80061b4:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 80061b8:	687a      	ldr	r2, [r7, #4]
 80061ba:	6812      	ldr	r2, [r2, #0]
 80061bc:	4293      	cmp	r3, r2
 80061be:	d008      	beq.n	80061d2 <HAL_ADC_IRQHandler+0xde>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80061c0:	697b      	ldr	r3, [r7, #20]
 80061c2:	2b00      	cmp	r3, #0
 80061c4:	d005      	beq.n	80061d2 <HAL_ADC_IRQHandler+0xde>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 80061c6:	697b      	ldr	r3, [r7, #20]
 80061c8:	2b05      	cmp	r3, #5
 80061ca:	d002      	beq.n	80061d2 <HAL_ADC_IRQHandler+0xde>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 80061cc:	697b      	ldr	r3, [r7, #20]
 80061ce:	2b09      	cmp	r3, #9
 80061d0:	d104      	bne.n	80061dc <HAL_ADC_IRQHandler+0xe8>
         )
      {
        /* check CONT bit directly in handle ADC CFGR register */
        tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 80061d2:	687b      	ldr	r3, [r7, #4]
 80061d4:	681b      	ldr	r3, [r3, #0]
 80061d6:	68db      	ldr	r3, [r3, #12]
 80061d8:	623b      	str	r3, [r7, #32]
 80061da:	e00d      	b.n	80061f8 <HAL_ADC_IRQHandler+0x104>
      }
      else
      {
        /* else need to check Master ADC CONT bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 80061dc:	687b      	ldr	r3, [r7, #4]
 80061de:	681b      	ldr	r3, [r3, #0]
 80061e0:	4a50      	ldr	r2, [pc, #320]	@ (8006324 <HAL_ADC_IRQHandler+0x230>)
 80061e2:	4293      	cmp	r3, r2
 80061e4:	d002      	beq.n	80061ec <HAL_ADC_IRQHandler+0xf8>
 80061e6:	687b      	ldr	r3, [r7, #4]
 80061e8:	681b      	ldr	r3, [r3, #0]
 80061ea:	e001      	b.n	80061f0 <HAL_ADC_IRQHandler+0xfc>
 80061ec:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 80061f0:	613b      	str	r3, [r7, #16]
        tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 80061f2:	693b      	ldr	r3, [r7, #16]
 80061f4:	68db      	ldr	r3, [r3, #12]
 80061f6:	623b      	str	r3, [r7, #32]
#else
      tmp_cfgr = READ_REG(hadc->Instance->CFGR);
#endif /* ADC_MULTIMODE_SUPPORT */

      /* Carry on if continuous mode is disabled */
      if (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) != ADC_CFGR_CONT)
 80061f8:	6a3b      	ldr	r3, [r7, #32]
 80061fa:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80061fe:	2b00      	cmp	r3, #0
 8006200:	d135      	bne.n	800626e <HAL_ADC_IRQHandler+0x17a>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 8006202:	687b      	ldr	r3, [r7, #4]
 8006204:	681b      	ldr	r3, [r3, #0]
 8006206:	681b      	ldr	r3, [r3, #0]
 8006208:	f003 0308 	and.w	r3, r3, #8
 800620c:	2b08      	cmp	r3, #8
 800620e:	d12e      	bne.n	800626e <HAL_ADC_IRQHandler+0x17a>
        {
          /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit         */
          /* ADSTART==0 (no conversion on going)                              */
          if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8006210:	687b      	ldr	r3, [r7, #4]
 8006212:	681b      	ldr	r3, [r3, #0]
 8006214:	4618      	mov	r0, r3
 8006216:	f7ff fd0f 	bl	8005c38 <LL_ADC_REG_IsConversionOngoing>
 800621a:	4603      	mov	r3, r0
 800621c:	2b00      	cmp	r3, #0
 800621e:	d11a      	bne.n	8006256 <HAL_ADC_IRQHandler+0x162>
          {
            /* Disable ADC end of sequence conversion interrupt */
            /* Note: Overrun interrupt was enabled with EOC interrupt in      */
            /* HAL_Start_IT(), but is not disabled here because can be used   */
            /* by overrun IRQ process below.                                  */
            __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 8006220:	687b      	ldr	r3, [r7, #4]
 8006222:	681b      	ldr	r3, [r3, #0]
 8006224:	685a      	ldr	r2, [r3, #4]
 8006226:	687b      	ldr	r3, [r7, #4]
 8006228:	681b      	ldr	r3, [r3, #0]
 800622a:	f022 020c 	bic.w	r2, r2, #12
 800622e:	605a      	str	r2, [r3, #4]

            /* Set ADC state */
            CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8006230:	687b      	ldr	r3, [r7, #4]
 8006232:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006234:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8006238:	687b      	ldr	r3, [r7, #4]
 800623a:	65da      	str	r2, [r3, #92]	@ 0x5c

            if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 800623c:	687b      	ldr	r3, [r7, #4]
 800623e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006240:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8006244:	2b00      	cmp	r3, #0
 8006246:	d112      	bne.n	800626e <HAL_ADC_IRQHandler+0x17a>
            {
              SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8006248:	687b      	ldr	r3, [r7, #4]
 800624a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800624c:	f043 0201 	orr.w	r2, r3, #1
 8006250:	687b      	ldr	r3, [r7, #4]
 8006252:	65da      	str	r2, [r3, #92]	@ 0x5c
 8006254:	e00b      	b.n	800626e <HAL_ADC_IRQHandler+0x17a>
            }
          }
          else
          {
            /* Change ADC state to error state */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8006256:	687b      	ldr	r3, [r7, #4]
 8006258:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800625a:	f043 0210 	orr.w	r2, r3, #16
 800625e:	687b      	ldr	r3, [r7, #4]
 8006260:	65da      	str	r2, [r3, #92]	@ 0x5c

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8006262:	687b      	ldr	r3, [r7, #4]
 8006264:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006266:	f043 0201 	orr.w	r2, r3, #1
 800626a:	687b      	ldr	r3, [r7, #4]
 800626c:	661a      	str	r2, [r3, #96]	@ 0x60
    /*       possibility to use:                                              */
    /*        " if ( __HAL_ADC_GET_FLAG(&hadc, ADC_FLAG_EOS)) "               */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 800626e:	6878      	ldr	r0, [r7, #4]
 8006270:	f7fb f986 	bl	8001580 <HAL_ADC_ConvCpltCallback>
    /* Clear regular group conversion flag */
    /* Note: in case of overrun set to ADC_OVR_DATA_PRESERVED, end of         */
    /*       conversion flags clear induces the release of the preserved data.*/
    /*       Therefore, if the preserved data value is needed, it must be     */
    /*       read preliminarily into HAL_ADC_ConvCpltCallback().              */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8006274:	687b      	ldr	r3, [r7, #4]
 8006276:	681b      	ldr	r3, [r3, #0]
 8006278:	220c      	movs	r2, #12
 800627a:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group injected end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 800627c:	69fb      	ldr	r3, [r7, #28]
 800627e:	f003 0320 	and.w	r3, r3, #32
 8006282:	2b00      	cmp	r3, #0
 8006284:	d004      	beq.n	8006290 <HAL_ADC_IRQHandler+0x19c>
 8006286:	69bb      	ldr	r3, [r7, #24]
 8006288:	f003 0320 	and.w	r3, r3, #32
 800628c:	2b00      	cmp	r3, #0
 800628e:	d10b      	bne.n	80062a8 <HAL_ADC_IRQHandler+0x1b4>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 8006290:	69fb      	ldr	r3, [r7, #28]
 8006292:	f003 0340 	and.w	r3, r3, #64	@ 0x40
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 8006296:	2b00      	cmp	r3, #0
 8006298:	f000 809e 	beq.w	80063d8 <HAL_ADC_IRQHandler+0x2e4>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 800629c:	69bb      	ldr	r3, [r7, #24]
 800629e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80062a2:	2b00      	cmp	r3, #0
 80062a4:	f000 8098 	beq.w	80063d8 <HAL_ADC_IRQHandler+0x2e4>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80062a8:	687b      	ldr	r3, [r7, #4]
 80062aa:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80062ac:	f003 0310 	and.w	r3, r3, #16
 80062b0:	2b00      	cmp	r3, #0
 80062b2:	d105      	bne.n	80062c0 <HAL_ADC_IRQHandler+0x1cc>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 80062b4:	687b      	ldr	r3, [r7, #4]
 80062b6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80062b8:	f443 5200 	orr.w	r2, r3, #8192	@ 0x2000
 80062bc:	687b      	ldr	r3, [r7, #4]
 80062be:	65da      	str	r2, [r3, #92]	@ 0x5c
    }

    /* Retrieve ADC configuration */
    tmp_adc_inj_is_trigger_source_sw_start = LL_ADC_INJ_IsTriggerSourceSWStart(hadc->Instance);
 80062c0:	687b      	ldr	r3, [r7, #4]
 80062c2:	681b      	ldr	r3, [r3, #0]
 80062c4:	4618      	mov	r0, r3
 80062c6:	f7ff fb88 	bl	80059da <LL_ADC_INJ_IsTriggerSourceSWStart>
 80062ca:	60f8      	str	r0, [r7, #12]
    tmp_adc_reg_is_trigger_source_sw_start = LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance);
 80062cc:	687b      	ldr	r3, [r7, #4]
 80062ce:	681b      	ldr	r3, [r3, #0]
 80062d0:	4618      	mov	r0, r3
 80062d2:	f7ff fb43 	bl	800595c <LL_ADC_REG_IsTriggerSourceSWStart>
 80062d6:	60b8      	str	r0, [r7, #8]
    /* Get relevant register CFGR in ADC instance of ADC master or slave  */
    /* in function of multimode state (for devices with multimode         */
    /* available).                                                        */
#if defined(ADC_MULTIMODE_SUPPORT)
    if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 80062d8:	687b      	ldr	r3, [r7, #4]
 80062da:	681b      	ldr	r3, [r3, #0]
 80062dc:	4a11      	ldr	r2, [pc, #68]	@ (8006324 <HAL_ADC_IRQHandler+0x230>)
 80062de:	4293      	cmp	r3, r2
 80062e0:	d002      	beq.n	80062e8 <HAL_ADC_IRQHandler+0x1f4>
 80062e2:	687b      	ldr	r3, [r7, #4]
 80062e4:	681b      	ldr	r3, [r3, #0]
 80062e6:	e001      	b.n	80062ec <HAL_ADC_IRQHandler+0x1f8>
 80062e8:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 80062ec:	687a      	ldr	r2, [r7, #4]
 80062ee:	6812      	ldr	r2, [r2, #0]
 80062f0:	4293      	cmp	r3, r2
 80062f2:	d008      	beq.n	8006306 <HAL_ADC_IRQHandler+0x212>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80062f4:	697b      	ldr	r3, [r7, #20]
 80062f6:	2b00      	cmp	r3, #0
 80062f8:	d005      	beq.n	8006306 <HAL_ADC_IRQHandler+0x212>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_SIMULT)
 80062fa:	697b      	ldr	r3, [r7, #20]
 80062fc:	2b06      	cmp	r3, #6
 80062fe:	d002      	beq.n	8006306 <HAL_ADC_IRQHandler+0x212>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_INTERL)
 8006300:	697b      	ldr	r3, [r7, #20]
 8006302:	2b07      	cmp	r3, #7
 8006304:	d104      	bne.n	8006310 <HAL_ADC_IRQHandler+0x21c>
       )
    {
      tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8006306:	687b      	ldr	r3, [r7, #4]
 8006308:	681b      	ldr	r3, [r3, #0]
 800630a:	68db      	ldr	r3, [r3, #12]
 800630c:	623b      	str	r3, [r7, #32]
 800630e:	e011      	b.n	8006334 <HAL_ADC_IRQHandler+0x240>
    }
    else
    {
      tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8006310:	687b      	ldr	r3, [r7, #4]
 8006312:	681b      	ldr	r3, [r3, #0]
 8006314:	4a03      	ldr	r2, [pc, #12]	@ (8006324 <HAL_ADC_IRQHandler+0x230>)
 8006316:	4293      	cmp	r3, r2
 8006318:	d006      	beq.n	8006328 <HAL_ADC_IRQHandler+0x234>
 800631a:	687b      	ldr	r3, [r7, #4]
 800631c:	681b      	ldr	r3, [r3, #0]
 800631e:	e005      	b.n	800632c <HAL_ADC_IRQHandler+0x238>
 8006320:	50000300 	.word	0x50000300
 8006324:	50000100 	.word	0x50000100
 8006328:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 800632c:	613b      	str	r3, [r7, #16]
      tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 800632e:	693b      	ldr	r3, [r7, #16]
 8006330:	68db      	ldr	r3, [r3, #12]
 8006332:	623b      	str	r3, [r7, #32]
    /* Disable interruption if no further conversion upcoming by injected     */
    /* external trigger or by automatic injected conversion with regular      */
    /* group having no further conversion upcoming (same conditions as        */
    /* regular group interruption disabling above),                           */
    /* and if injected scan sequence is completed.                            */
    if (tmp_adc_inj_is_trigger_source_sw_start != 0UL)
 8006334:	68fb      	ldr	r3, [r7, #12]
 8006336:	2b00      	cmp	r3, #0
 8006338:	d047      	beq.n	80063ca <HAL_ADC_IRQHandler+0x2d6>
    {
      if ((READ_BIT(tmp_cfgr, ADC_CFGR_JAUTO) == 0UL) ||
 800633a:	6a3b      	ldr	r3, [r7, #32]
 800633c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006340:	2b00      	cmp	r3, #0
 8006342:	d007      	beq.n	8006354 <HAL_ADC_IRQHandler+0x260>
 8006344:	68bb      	ldr	r3, [r7, #8]
 8006346:	2b00      	cmp	r3, #0
 8006348:	d03f      	beq.n	80063ca <HAL_ADC_IRQHandler+0x2d6>
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
           (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) == 0UL)))
 800634a:	6a3b      	ldr	r3, [r7, #32]
 800634c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
 8006350:	2b00      	cmp	r3, #0
 8006352:	d13a      	bne.n	80063ca <HAL_ADC_IRQHandler+0x2d6>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS))
 8006354:	687b      	ldr	r3, [r7, #4]
 8006356:	681b      	ldr	r3, [r3, #0]
 8006358:	681b      	ldr	r3, [r3, #0]
 800635a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800635e:	2b40      	cmp	r3, #64	@ 0x40
 8006360:	d133      	bne.n	80063ca <HAL_ADC_IRQHandler+0x2d6>
          /* when the last context has been fully processed, JSQR is reset      */
          /* by the hardware. Even if no injected conversion is planned to come */
          /* (queue empty, triggers are ignored), it can start again            */
          /* immediately after setting a new context (JADSTART is still set).   */
          /* Therefore, state of HAL ADC injected group is kept to busy.        */
          if (READ_BIT(tmp_cfgr, ADC_CFGR_JQM) == 0UL)
 8006362:	6a3b      	ldr	r3, [r7, #32]
 8006364:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8006368:	2b00      	cmp	r3, #0
 800636a:	d12e      	bne.n	80063ca <HAL_ADC_IRQHandler+0x2d6>
          {
            /* Allowed to modify bits ADC_IT_JEOC/ADC_IT_JEOS only if bit       */
            /* JADSTART==0 (no conversion on going)                             */
            if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) == 0UL)
 800636c:	687b      	ldr	r3, [r7, #4]
 800636e:	681b      	ldr	r3, [r3, #0]
 8006370:	4618      	mov	r0, r3
 8006372:	f7ff fc74 	bl	8005c5e <LL_ADC_INJ_IsConversionOngoing>
 8006376:	4603      	mov	r3, r0
 8006378:	2b00      	cmp	r3, #0
 800637a:	d11a      	bne.n	80063b2 <HAL_ADC_IRQHandler+0x2be>
            {
              /* Disable ADC end of sequence conversion interrupt  */
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC | ADC_IT_JEOS);
 800637c:	687b      	ldr	r3, [r7, #4]
 800637e:	681b      	ldr	r3, [r3, #0]
 8006380:	685a      	ldr	r2, [r3, #4]
 8006382:	687b      	ldr	r3, [r7, #4]
 8006384:	681b      	ldr	r3, [r3, #0]
 8006386:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 800638a:	605a      	str	r2, [r3, #4]

              /* Set ADC state */
              CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);
 800638c:	687b      	ldr	r3, [r7, #4]
 800638e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006390:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8006394:	687b      	ldr	r3, [r7, #4]
 8006396:	65da      	str	r2, [r3, #92]	@ 0x5c

              if ((hadc->State & HAL_ADC_STATE_REG_BUSY) == 0UL)
 8006398:	687b      	ldr	r3, [r7, #4]
 800639a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800639c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80063a0:	2b00      	cmp	r3, #0
 80063a2:	d112      	bne.n	80063ca <HAL_ADC_IRQHandler+0x2d6>
              {
                SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80063a4:	687b      	ldr	r3, [r7, #4]
 80063a6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80063a8:	f043 0201 	orr.w	r2, r3, #1
 80063ac:	687b      	ldr	r3, [r7, #4]
 80063ae:	65da      	str	r2, [r3, #92]	@ 0x5c
 80063b0:	e00b      	b.n	80063ca <HAL_ADC_IRQHandler+0x2d6>
              }
            }
            else
            {
              /* Update ADC state machine to error */
              SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80063b2:	687b      	ldr	r3, [r7, #4]
 80063b4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80063b6:	f043 0210 	orr.w	r2, r3, #16
 80063ba:	687b      	ldr	r3, [r7, #4]
 80063bc:	65da      	str	r2, [r3, #92]	@ 0x5c

              /* Set ADC error code to ADC peripheral internal error */
              SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80063be:	687b      	ldr	r3, [r7, #4]
 80063c0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80063c2:	f043 0201 	orr.w	r2, r3, #1
 80063c6:	687b      	ldr	r3, [r7, #4]
 80063c8:	661a      	str	r2, [r3, #96]	@ 0x60
              interruption has been triggered by end of conversion or end of
              sequence.    */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedConvCpltCallback(hadc);
#else
    HAL_ADCEx_InjectedConvCpltCallback(hadc);
 80063ca:	6878      	ldr	r0, [r7, #4]
 80063cc:	f000 fec2 	bl	8007154 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOC | ADC_FLAG_JEOS);
 80063d0:	687b      	ldr	r3, [r7, #4]
 80063d2:	681b      	ldr	r3, [r3, #0]
 80063d4:	2260      	movs	r2, #96	@ 0x60
 80063d6:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Analog watchdog 1 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD1) == ADC_FLAG_AWD1) && ((tmp_ier & ADC_IT_AWD1) == ADC_IT_AWD1))
 80063d8:	69fb      	ldr	r3, [r7, #28]
 80063da:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80063de:	2b00      	cmp	r3, #0
 80063e0:	d011      	beq.n	8006406 <HAL_ADC_IRQHandler+0x312>
 80063e2:	69bb      	ldr	r3, [r7, #24]
 80063e4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80063e8:	2b00      	cmp	r3, #0
 80063ea:	d00c      	beq.n	8006406 <HAL_ADC_IRQHandler+0x312>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 80063ec:	687b      	ldr	r3, [r7, #4]
 80063ee:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80063f0:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 80063f4:	687b      	ldr	r3, [r7, #4]
 80063f6:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Level out of window 1 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindowCallback(hadc);
#else
    HAL_ADC_LevelOutOfWindowCallback(hadc);
 80063f8:	6878      	ldr	r0, [r7, #4]
 80063fa:	f000 f89f 	bl	800653c <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD1);
 80063fe:	687b      	ldr	r3, [r7, #4]
 8006400:	681b      	ldr	r3, [r3, #0]
 8006402:	2280      	movs	r2, #128	@ 0x80
 8006404:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 2 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD2) == ADC_FLAG_AWD2) && ((tmp_ier & ADC_IT_AWD2) == ADC_IT_AWD2))
 8006406:	69fb      	ldr	r3, [r7, #28]
 8006408:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800640c:	2b00      	cmp	r3, #0
 800640e:	d012      	beq.n	8006436 <HAL_ADC_IRQHandler+0x342>
 8006410:	69bb      	ldr	r3, [r7, #24]
 8006412:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006416:	2b00      	cmp	r3, #0
 8006418:	d00d      	beq.n	8006436 <HAL_ADC_IRQHandler+0x342>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD2);
 800641a:	687b      	ldr	r3, [r7, #4]
 800641c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800641e:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8006422:	687b      	ldr	r3, [r7, #4]
 8006424:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Level out of window 2 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow2Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow2Callback(hadc);
 8006426:	6878      	ldr	r0, [r7, #4]
 8006428:	f000 fea8 	bl	800717c <HAL_ADCEx_LevelOutOfWindow2Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD2);
 800642c:	687b      	ldr	r3, [r7, #4]
 800642e:	681b      	ldr	r3, [r3, #0]
 8006430:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8006434:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 3 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD3) == ADC_FLAG_AWD3) && ((tmp_ier & ADC_IT_AWD3) == ADC_IT_AWD3))
 8006436:	69fb      	ldr	r3, [r7, #28]
 8006438:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800643c:	2b00      	cmp	r3, #0
 800643e:	d012      	beq.n	8006466 <HAL_ADC_IRQHandler+0x372>
 8006440:	69bb      	ldr	r3, [r7, #24]
 8006442:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8006446:	2b00      	cmp	r3, #0
 8006448:	d00d      	beq.n	8006466 <HAL_ADC_IRQHandler+0x372>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD3);
 800644a:	687b      	ldr	r3, [r7, #4]
 800644c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800644e:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 8006452:	687b      	ldr	r3, [r7, #4]
 8006454:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Level out of window 3 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow3Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow3Callback(hadc);
 8006456:	6878      	ldr	r0, [r7, #4]
 8006458:	f000 fe9a 	bl	8007190 <HAL_ADCEx_LevelOutOfWindow3Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD3);
 800645c:	687b      	ldr	r3, [r7, #4]
 800645e:	681b      	ldr	r3, [r3, #0]
 8006460:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8006464:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Overrun flag ========== */
  if (((tmp_isr & ADC_FLAG_OVR) == ADC_FLAG_OVR) && ((tmp_ier & ADC_IT_OVR) == ADC_IT_OVR))
 8006466:	69fb      	ldr	r3, [r7, #28]
 8006468:	f003 0310 	and.w	r3, r3, #16
 800646c:	2b00      	cmp	r3, #0
 800646e:	d036      	beq.n	80064de <HAL_ADC_IRQHandler+0x3ea>
 8006470:	69bb      	ldr	r3, [r7, #24]
 8006472:	f003 0310 	and.w	r3, r3, #16
 8006476:	2b00      	cmp	r3, #0
 8006478:	d031      	beq.n	80064de <HAL_ADC_IRQHandler+0x3ea>
    /* overrun event is not considered as an error.                           */
    /* (cf ref manual "Managing conversions without using the DMA and without */
    /* overrun ")                                                             */
    /* Exception for usage with DMA overrun event always considered as an     */
    /* error.                                                                 */
    if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 800647a:	687b      	ldr	r3, [r7, #4]
 800647c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800647e:	2b00      	cmp	r3, #0
 8006480:	d102      	bne.n	8006488 <HAL_ADC_IRQHandler+0x394>
    {
      overrun_error = 1UL;
 8006482:	2301      	movs	r3, #1
 8006484:	627b      	str	r3, [r7, #36]	@ 0x24
 8006486:	e014      	b.n	80064b2 <HAL_ADC_IRQHandler+0x3be>
    }
    else
    {
      /* Check DMA configuration */
#if defined(ADC_MULTIMODE_SUPPORT)
      if (tmp_multimode_config != LL_ADC_MULTI_INDEPENDENT)
 8006488:	697b      	ldr	r3, [r7, #20]
 800648a:	2b00      	cmp	r3, #0
 800648c:	d008      	beq.n	80064a0 <HAL_ADC_IRQHandler+0x3ac>
      {
        /* Multimode (when feature is available) is enabled,
           Common Control Register MDMA bits must be checked. */
        if (LL_ADC_GetMultiDMATransfer(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) != LL_ADC_MULTI_REG_DMA_EACH_ADC)
 800648e:	4825      	ldr	r0, [pc, #148]	@ (8006524 <HAL_ADC_IRQHandler+0x430>)
 8006490:	f7ff fb14 	bl	8005abc <LL_ADC_GetMultiDMATransfer>
 8006494:	4603      	mov	r3, r0
 8006496:	2b00      	cmp	r3, #0
 8006498:	d00b      	beq.n	80064b2 <HAL_ADC_IRQHandler+0x3be>
        {
          overrun_error = 1UL;
 800649a:	2301      	movs	r3, #1
 800649c:	627b      	str	r3, [r7, #36]	@ 0x24
 800649e:	e008      	b.n	80064b2 <HAL_ADC_IRQHandler+0x3be>
      }
      else
#endif /* ADC_MULTIMODE_SUPPORT */
      {
        /* Multimode not set or feature not available or ADC independent */
        if ((hadc->Instance->CFGR & ADC_CFGR_DMAEN) != 0UL)
 80064a0:	687b      	ldr	r3, [r7, #4]
 80064a2:	681b      	ldr	r3, [r3, #0]
 80064a4:	68db      	ldr	r3, [r3, #12]
 80064a6:	f003 0301 	and.w	r3, r3, #1
 80064aa:	2b00      	cmp	r3, #0
 80064ac:	d001      	beq.n	80064b2 <HAL_ADC_IRQHandler+0x3be>
        {
          overrun_error = 1UL;
 80064ae:	2301      	movs	r3, #1
 80064b0:	627b      	str	r3, [r7, #36]	@ 0x24
        }
      }
    }

    if (overrun_error == 1UL)
 80064b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80064b4:	2b01      	cmp	r3, #1
 80064b6:	d10e      	bne.n	80064d6 <HAL_ADC_IRQHandler+0x3e2>
    {
      /* Change ADC state to error state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_OVR);
 80064b8:	687b      	ldr	r3, [r7, #4]
 80064ba:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80064bc:	f443 6280 	orr.w	r2, r3, #1024	@ 0x400
 80064c0:	687b      	ldr	r3, [r7, #4]
 80064c2:	65da      	str	r2, [r3, #92]	@ 0x5c

      /* Set ADC error code to overrun */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 80064c4:	687b      	ldr	r3, [r7, #4]
 80064c6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80064c8:	f043 0202 	orr.w	r2, r3, #2
 80064cc:	687b      	ldr	r3, [r7, #4]
 80064ce:	661a      	str	r2, [r3, #96]	@ 0x60
      /*       Therefore, old ADC conversion data can be retrieved in         */
      /*       function "HAL_ADC_ErrorCallback()".                            */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 80064d0:	6878      	ldr	r0, [r7, #4]
 80064d2:	f000 f83d 	bl	8006550 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    }

    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 80064d6:	687b      	ldr	r3, [r7, #4]
 80064d8:	681b      	ldr	r3, [r3, #0]
 80064da:	2210      	movs	r2, #16
 80064dc:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Injected context queue overflow flag ========== */
  if (((tmp_isr & ADC_FLAG_JQOVF) == ADC_FLAG_JQOVF) && ((tmp_ier & ADC_IT_JQOVF) == ADC_IT_JQOVF))
 80064de:	69fb      	ldr	r3, [r7, #28]
 80064e0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80064e4:	2b00      	cmp	r3, #0
 80064e6:	d018      	beq.n	800651a <HAL_ADC_IRQHandler+0x426>
 80064e8:	69bb      	ldr	r3, [r7, #24]
 80064ea:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80064ee:	2b00      	cmp	r3, #0
 80064f0:	d013      	beq.n	800651a <HAL_ADC_IRQHandler+0x426>
  {
    /* Change ADC state to overrun state */
    SET_BIT(hadc->State, HAL_ADC_STATE_INJ_JQOVF);
 80064f2:	687b      	ldr	r3, [r7, #4]
 80064f4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80064f6:	f443 4280 	orr.w	r2, r3, #16384	@ 0x4000
 80064fa:	687b      	ldr	r3, [r7, #4]
 80064fc:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Set ADC error code to Injected context queue overflow */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_JQOVF);
 80064fe:	687b      	ldr	r3, [r7, #4]
 8006500:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006502:	f043 0208 	orr.w	r2, r3, #8
 8006506:	687b      	ldr	r3, [r7, #4]
 8006508:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Clear the Injected context queue overflow flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JQOVF);
 800650a:	687b      	ldr	r3, [r7, #4]
 800650c:	681b      	ldr	r3, [r3, #0]
 800650e:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8006512:	601a      	str	r2, [r3, #0]

    /* Injected context queue overflow callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedQueueOverflowCallback(hadc);
#else
    HAL_ADCEx_InjectedQueueOverflowCallback(hadc);
 8006514:	6878      	ldr	r0, [r7, #4]
 8006516:	f000 fe27 	bl	8007168 <HAL_ADCEx_InjectedQueueOverflowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
  }

}
 800651a:	bf00      	nop
 800651c:	3728      	adds	r7, #40	@ 0x28
 800651e:	46bd      	mov	sp, r7
 8006520:	bd80      	pop	{r7, pc}
 8006522:	bf00      	nop
 8006524:	50000300 	.word	0x50000300

08006528 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 8006528:	b480      	push	{r7}
 800652a:	b083      	sub	sp, #12
 800652c:	af00      	add	r7, sp, #0
 800652e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 8006530:	bf00      	nop
 8006532:	370c      	adds	r7, #12
 8006534:	46bd      	mov	sp, r7
 8006536:	f85d 7b04 	ldr.w	r7, [sp], #4
 800653a:	4770      	bx	lr

0800653c <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog 1 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef *hadc)
{
 800653c:	b480      	push	{r7}
 800653e:	b083      	sub	sp, #12
 8006540:	af00      	add	r7, sp, #0
 8006542:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOutOfWindowCallback must be implemented in the user file.
  */
}
 8006544:	bf00      	nop
 8006546:	370c      	adds	r7, #12
 8006548:	46bd      	mov	sp, r7
 800654a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800654e:	4770      	bx	lr

08006550 <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8006550:	b480      	push	{r7}
 8006552:	b083      	sub	sp, #12
 8006554:	af00      	add	r7, sp, #0
 8006556:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8006558:	bf00      	nop
 800655a:	370c      	adds	r7, #12
 800655c:	46bd      	mov	sp, r7
 800655e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006562:	4770      	bx	lr

08006564 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *pConfig)
{
 8006564:	b580      	push	{r7, lr}
 8006566:	b0b6      	sub	sp, #216	@ 0xd8
 8006568:	af00      	add	r7, sp, #0
 800656a:	6078      	str	r0, [r7, #4]
 800656c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800656e:	2300      	movs	r3, #0
 8006570:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8006574:	2300      	movs	r3, #0
 8006576:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, pConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8006578:	687b      	ldr	r3, [r7, #4]
 800657a:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 800657e:	2b01      	cmp	r3, #1
 8006580:	d101      	bne.n	8006586 <HAL_ADC_ConfigChannel+0x22>
 8006582:	2302      	movs	r3, #2
 8006584:	e3c8      	b.n	8006d18 <HAL_ADC_ConfigChannel+0x7b4>
 8006586:	687b      	ldr	r3, [r7, #4]
 8006588:	2201      	movs	r2, #1
 800658a:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800658e:	687b      	ldr	r3, [r7, #4]
 8006590:	681b      	ldr	r3, [r3, #0]
 8006592:	4618      	mov	r0, r3
 8006594:	f7ff fb50 	bl	8005c38 <LL_ADC_REG_IsConversionOngoing>
 8006598:	4603      	mov	r3, r0
 800659a:	2b00      	cmp	r3, #0
 800659c:	f040 83ad 	bne.w	8006cfa <HAL_ADC_ConfigChannel+0x796>
  {
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, pConfig->Rank, pConfig->Channel);
 80065a0:	687b      	ldr	r3, [r7, #4]
 80065a2:	6818      	ldr	r0, [r3, #0]
 80065a4:	683b      	ldr	r3, [r7, #0]
 80065a6:	6859      	ldr	r1, [r3, #4]
 80065a8:	683b      	ldr	r3, [r7, #0]
 80065aa:	681b      	ldr	r3, [r3, #0]
 80065ac:	461a      	mov	r2, r3
 80065ae:	f7ff f9e8 	bl	8005982 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80065b2:	687b      	ldr	r3, [r7, #4]
 80065b4:	681b      	ldr	r3, [r3, #0]
 80065b6:	4618      	mov	r0, r3
 80065b8:	f7ff fb3e 	bl	8005c38 <LL_ADC_REG_IsConversionOngoing>
 80065bc:	f8c7 00d0 	str.w	r0, [r7, #208]	@ 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80065c0:	687b      	ldr	r3, [r7, #4]
 80065c2:	681b      	ldr	r3, [r3, #0]
 80065c4:	4618      	mov	r0, r3
 80065c6:	f7ff fb4a 	bl	8005c5e <LL_ADC_INJ_IsConversionOngoing>
 80065ca:	f8c7 00cc 	str.w	r0, [r7, #204]	@ 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80065ce:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 80065d2:	2b00      	cmp	r3, #0
 80065d4:	f040 81d9 	bne.w	800698a <HAL_ADC_ConfigChannel+0x426>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80065d8:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80065dc:	2b00      	cmp	r3, #0
 80065de:	f040 81d4 	bne.w	800698a <HAL_ADC_ConfigChannel+0x426>
       )
    {
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (pConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 80065e2:	683b      	ldr	r3, [r7, #0]
 80065e4:	689b      	ldr	r3, [r3, #8]
 80065e6:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80065ea:	d10f      	bne.n	800660c <HAL_ADC_ConfigChannel+0xa8>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 80065ec:	687b      	ldr	r3, [r7, #4]
 80065ee:	6818      	ldr	r0, [r3, #0]
 80065f0:	683b      	ldr	r3, [r7, #0]
 80065f2:	681b      	ldr	r3, [r3, #0]
 80065f4:	2200      	movs	r2, #0
 80065f6:	4619      	mov	r1, r3
 80065f8:	f7ff fa02 	bl	8005a00 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 80065fc:	687b      	ldr	r3, [r7, #4]
 80065fe:	681b      	ldr	r3, [r3, #0]
 8006600:	f04f 4100 	mov.w	r1, #2147483648	@ 0x80000000
 8006604:	4618      	mov	r0, r3
 8006606:	f7ff f996 	bl	8005936 <LL_ADC_SetSamplingTimeCommonConfig>
 800660a:	e00e      	b.n	800662a <HAL_ADC_ConfigChannel+0xc6>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 800660c:	687b      	ldr	r3, [r7, #4]
 800660e:	6818      	ldr	r0, [r3, #0]
 8006610:	683b      	ldr	r3, [r7, #0]
 8006612:	6819      	ldr	r1, [r3, #0]
 8006614:	683b      	ldr	r3, [r7, #0]
 8006616:	689b      	ldr	r3, [r3, #8]
 8006618:	461a      	mov	r2, r3
 800661a:	f7ff f9f1 	bl	8005a00 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 800661e:	687b      	ldr	r3, [r7, #4]
 8006620:	681b      	ldr	r3, [r3, #0]
 8006622:	2100      	movs	r1, #0
 8006624:	4618      	mov	r0, r3
 8006626:	f7ff f986 	bl	8005936 <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)pConfig->Offset);
 800662a:	683b      	ldr	r3, [r7, #0]
 800662c:	695a      	ldr	r2, [r3, #20]
 800662e:	687b      	ldr	r3, [r7, #4]
 8006630:	681b      	ldr	r3, [r3, #0]
 8006632:	68db      	ldr	r3, [r3, #12]
 8006634:	08db      	lsrs	r3, r3, #3
 8006636:	f003 0303 	and.w	r3, r3, #3
 800663a:	005b      	lsls	r3, r3, #1
 800663c:	fa02 f303 	lsl.w	r3, r2, r3
 8006640:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8

      if (pConfig->OffsetNumber != ADC_OFFSET_NONE)
 8006644:	683b      	ldr	r3, [r7, #0]
 8006646:	691b      	ldr	r3, [r3, #16]
 8006648:	2b04      	cmp	r3, #4
 800664a:	d022      	beq.n	8006692 <HAL_ADC_ConfigChannel+0x12e>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, pConfig->OffsetNumber, pConfig->Channel, tmpOffsetShifted);
 800664c:	687b      	ldr	r3, [r7, #4]
 800664e:	6818      	ldr	r0, [r3, #0]
 8006650:	683b      	ldr	r3, [r7, #0]
 8006652:	6919      	ldr	r1, [r3, #16]
 8006654:	683b      	ldr	r3, [r7, #0]
 8006656:	681a      	ldr	r2, [r3, #0]
 8006658:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800665c:	f7ff f8e0 	bl	8005820 <LL_ADC_SetOffset>

        assert_param(IS_ADC_OFFSET_SIGN(pConfig->OffsetSign));
        assert_param(IS_FUNCTIONAL_STATE(pConfig->OffsetSaturation));
        /* Set ADC selected offset sign & saturation */
        LL_ADC_SetOffsetSign(hadc->Instance, pConfig->OffsetNumber, pConfig->OffsetSign);
 8006660:	687b      	ldr	r3, [r7, #4]
 8006662:	6818      	ldr	r0, [r3, #0]
 8006664:	683b      	ldr	r3, [r7, #0]
 8006666:	6919      	ldr	r1, [r3, #16]
 8006668:	683b      	ldr	r3, [r7, #0]
 800666a:	699b      	ldr	r3, [r3, #24]
 800666c:	461a      	mov	r2, r3
 800666e:	f7ff f92c 	bl	80058ca <LL_ADC_SetOffsetSign>
        LL_ADC_SetOffsetSaturation(hadc->Instance, pConfig->OffsetNumber,
 8006672:	687b      	ldr	r3, [r7, #4]
 8006674:	6818      	ldr	r0, [r3, #0]
 8006676:	683b      	ldr	r3, [r7, #0]
 8006678:	6919      	ldr	r1, [r3, #16]
                                   (pConfig->OffsetSaturation == ENABLE) ?
 800667a:	683b      	ldr	r3, [r7, #0]
 800667c:	7f1b      	ldrb	r3, [r3, #28]
        LL_ADC_SetOffsetSaturation(hadc->Instance, pConfig->OffsetNumber,
 800667e:	2b01      	cmp	r3, #1
 8006680:	d102      	bne.n	8006688 <HAL_ADC_ConfigChannel+0x124>
 8006682:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8006686:	e000      	b.n	800668a <HAL_ADC_ConfigChannel+0x126>
 8006688:	2300      	movs	r3, #0
 800668a:	461a      	mov	r2, r3
 800668c:	f7ff f938 	bl	8005900 <LL_ADC_SetOffsetSaturation>
 8006690:	e17b      	b.n	800698a <HAL_ADC_ConfigChannel+0x426>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8006692:	687b      	ldr	r3, [r7, #4]
 8006694:	681b      	ldr	r3, [r3, #0]
 8006696:	2100      	movs	r1, #0
 8006698:	4618      	mov	r0, r3
 800669a:	f7ff f8e5 	bl	8005868 <LL_ADC_GetOffsetChannel>
 800669e:	4603      	mov	r3, r0
 80066a0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80066a4:	2b00      	cmp	r3, #0
 80066a6:	d10a      	bne.n	80066be <HAL_ADC_ConfigChannel+0x15a>
 80066a8:	687b      	ldr	r3, [r7, #4]
 80066aa:	681b      	ldr	r3, [r3, #0]
 80066ac:	2100      	movs	r1, #0
 80066ae:	4618      	mov	r0, r3
 80066b0:	f7ff f8da 	bl	8005868 <LL_ADC_GetOffsetChannel>
 80066b4:	4603      	mov	r3, r0
 80066b6:	0e9b      	lsrs	r3, r3, #26
 80066b8:	f003 021f 	and.w	r2, r3, #31
 80066bc:	e01e      	b.n	80066fc <HAL_ADC_ConfigChannel+0x198>
 80066be:	687b      	ldr	r3, [r7, #4]
 80066c0:	681b      	ldr	r3, [r3, #0]
 80066c2:	2100      	movs	r1, #0
 80066c4:	4618      	mov	r0, r3
 80066c6:	f7ff f8cf 	bl	8005868 <LL_ADC_GetOffsetChannel>
 80066ca:	4603      	mov	r3, r0
 80066cc:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80066d0:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 80066d4:	fa93 f3a3 	rbit	r3, r3
 80066d8:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 80066dc:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 80066e0:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 80066e4:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 80066e8:	2b00      	cmp	r3, #0
 80066ea:	d101      	bne.n	80066f0 <HAL_ADC_ConfigChannel+0x18c>
  {
    return 32U;
 80066ec:	2320      	movs	r3, #32
 80066ee:	e004      	b.n	80066fa <HAL_ADC_ConfigChannel+0x196>
  }
  return __builtin_clz(value);
 80066f0:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 80066f4:	fab3 f383 	clz	r3, r3
 80066f8:	b2db      	uxtb	r3, r3
 80066fa:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 80066fc:	683b      	ldr	r3, [r7, #0]
 80066fe:	681b      	ldr	r3, [r3, #0]
 8006700:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006704:	2b00      	cmp	r3, #0
 8006706:	d105      	bne.n	8006714 <HAL_ADC_ConfigChannel+0x1b0>
 8006708:	683b      	ldr	r3, [r7, #0]
 800670a:	681b      	ldr	r3, [r3, #0]
 800670c:	0e9b      	lsrs	r3, r3, #26
 800670e:	f003 031f 	and.w	r3, r3, #31
 8006712:	e018      	b.n	8006746 <HAL_ADC_ConfigChannel+0x1e2>
 8006714:	683b      	ldr	r3, [r7, #0]
 8006716:	681b      	ldr	r3, [r3, #0]
 8006718:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800671c:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8006720:	fa93 f3a3 	rbit	r3, r3
 8006724:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  return result;
 8006728:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800672c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  if (value == 0U)
 8006730:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8006734:	2b00      	cmp	r3, #0
 8006736:	d101      	bne.n	800673c <HAL_ADC_ConfigChannel+0x1d8>
    return 32U;
 8006738:	2320      	movs	r3, #32
 800673a:	e004      	b.n	8006746 <HAL_ADC_ConfigChannel+0x1e2>
  return __builtin_clz(value);
 800673c:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8006740:	fab3 f383 	clz	r3, r3
 8006744:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8006746:	429a      	cmp	r2, r3
 8006748:	d106      	bne.n	8006758 <HAL_ADC_ConfigChannel+0x1f4>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 800674a:	687b      	ldr	r3, [r7, #4]
 800674c:	681b      	ldr	r3, [r3, #0]
 800674e:	2200      	movs	r2, #0
 8006750:	2100      	movs	r1, #0
 8006752:	4618      	mov	r0, r3
 8006754:	f7ff f89e 	bl	8005894 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8006758:	687b      	ldr	r3, [r7, #4]
 800675a:	681b      	ldr	r3, [r3, #0]
 800675c:	2101      	movs	r1, #1
 800675e:	4618      	mov	r0, r3
 8006760:	f7ff f882 	bl	8005868 <LL_ADC_GetOffsetChannel>
 8006764:	4603      	mov	r3, r0
 8006766:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800676a:	2b00      	cmp	r3, #0
 800676c:	d10a      	bne.n	8006784 <HAL_ADC_ConfigChannel+0x220>
 800676e:	687b      	ldr	r3, [r7, #4]
 8006770:	681b      	ldr	r3, [r3, #0]
 8006772:	2101      	movs	r1, #1
 8006774:	4618      	mov	r0, r3
 8006776:	f7ff f877 	bl	8005868 <LL_ADC_GetOffsetChannel>
 800677a:	4603      	mov	r3, r0
 800677c:	0e9b      	lsrs	r3, r3, #26
 800677e:	f003 021f 	and.w	r2, r3, #31
 8006782:	e01e      	b.n	80067c2 <HAL_ADC_ConfigChannel+0x25e>
 8006784:	687b      	ldr	r3, [r7, #4]
 8006786:	681b      	ldr	r3, [r3, #0]
 8006788:	2101      	movs	r1, #1
 800678a:	4618      	mov	r0, r3
 800678c:	f7ff f86c 	bl	8005868 <LL_ADC_GetOffsetChannel>
 8006790:	4603      	mov	r3, r0
 8006792:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006796:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800679a:	fa93 f3a3 	rbit	r3, r3
 800679e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
  return result;
 80067a2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80067a6:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  if (value == 0U)
 80067aa:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 80067ae:	2b00      	cmp	r3, #0
 80067b0:	d101      	bne.n	80067b6 <HAL_ADC_ConfigChannel+0x252>
    return 32U;
 80067b2:	2320      	movs	r3, #32
 80067b4:	e004      	b.n	80067c0 <HAL_ADC_ConfigChannel+0x25c>
  return __builtin_clz(value);
 80067b6:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 80067ba:	fab3 f383 	clz	r3, r3
 80067be:	b2db      	uxtb	r3, r3
 80067c0:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 80067c2:	683b      	ldr	r3, [r7, #0]
 80067c4:	681b      	ldr	r3, [r3, #0]
 80067c6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80067ca:	2b00      	cmp	r3, #0
 80067cc:	d105      	bne.n	80067da <HAL_ADC_ConfigChannel+0x276>
 80067ce:	683b      	ldr	r3, [r7, #0]
 80067d0:	681b      	ldr	r3, [r3, #0]
 80067d2:	0e9b      	lsrs	r3, r3, #26
 80067d4:	f003 031f 	and.w	r3, r3, #31
 80067d8:	e018      	b.n	800680c <HAL_ADC_ConfigChannel+0x2a8>
 80067da:	683b      	ldr	r3, [r7, #0]
 80067dc:	681b      	ldr	r3, [r3, #0]
 80067de:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80067e2:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80067e6:	fa93 f3a3 	rbit	r3, r3
 80067ea:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
  return result;
 80067ee:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 80067f2:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
  if (value == 0U)
 80067f6:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80067fa:	2b00      	cmp	r3, #0
 80067fc:	d101      	bne.n	8006802 <HAL_ADC_ConfigChannel+0x29e>
    return 32U;
 80067fe:	2320      	movs	r3, #32
 8006800:	e004      	b.n	800680c <HAL_ADC_ConfigChannel+0x2a8>
  return __builtin_clz(value);
 8006802:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8006806:	fab3 f383 	clz	r3, r3
 800680a:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 800680c:	429a      	cmp	r2, r3
 800680e:	d106      	bne.n	800681e <HAL_ADC_ConfigChannel+0x2ba>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8006810:	687b      	ldr	r3, [r7, #4]
 8006812:	681b      	ldr	r3, [r3, #0]
 8006814:	2200      	movs	r2, #0
 8006816:	2101      	movs	r1, #1
 8006818:	4618      	mov	r0, r3
 800681a:	f7ff f83b 	bl	8005894 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 800681e:	687b      	ldr	r3, [r7, #4]
 8006820:	681b      	ldr	r3, [r3, #0]
 8006822:	2102      	movs	r1, #2
 8006824:	4618      	mov	r0, r3
 8006826:	f7ff f81f 	bl	8005868 <LL_ADC_GetOffsetChannel>
 800682a:	4603      	mov	r3, r0
 800682c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006830:	2b00      	cmp	r3, #0
 8006832:	d10a      	bne.n	800684a <HAL_ADC_ConfigChannel+0x2e6>
 8006834:	687b      	ldr	r3, [r7, #4]
 8006836:	681b      	ldr	r3, [r3, #0]
 8006838:	2102      	movs	r1, #2
 800683a:	4618      	mov	r0, r3
 800683c:	f7ff f814 	bl	8005868 <LL_ADC_GetOffsetChannel>
 8006840:	4603      	mov	r3, r0
 8006842:	0e9b      	lsrs	r3, r3, #26
 8006844:	f003 021f 	and.w	r2, r3, #31
 8006848:	e01e      	b.n	8006888 <HAL_ADC_ConfigChannel+0x324>
 800684a:	687b      	ldr	r3, [r7, #4]
 800684c:	681b      	ldr	r3, [r3, #0]
 800684e:	2102      	movs	r1, #2
 8006850:	4618      	mov	r0, r3
 8006852:	f7ff f809 	bl	8005868 <LL_ADC_GetOffsetChannel>
 8006856:	4603      	mov	r3, r0
 8006858:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800685c:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8006860:	fa93 f3a3 	rbit	r3, r3
 8006864:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  return result;
 8006868:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800686c:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
  if (value == 0U)
 8006870:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8006874:	2b00      	cmp	r3, #0
 8006876:	d101      	bne.n	800687c <HAL_ADC_ConfigChannel+0x318>
    return 32U;
 8006878:	2320      	movs	r3, #32
 800687a:	e004      	b.n	8006886 <HAL_ADC_ConfigChannel+0x322>
  return __builtin_clz(value);
 800687c:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8006880:	fab3 f383 	clz	r3, r3
 8006884:	b2db      	uxtb	r3, r3
 8006886:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8006888:	683b      	ldr	r3, [r7, #0]
 800688a:	681b      	ldr	r3, [r3, #0]
 800688c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006890:	2b00      	cmp	r3, #0
 8006892:	d105      	bne.n	80068a0 <HAL_ADC_ConfigChannel+0x33c>
 8006894:	683b      	ldr	r3, [r7, #0]
 8006896:	681b      	ldr	r3, [r3, #0]
 8006898:	0e9b      	lsrs	r3, r3, #26
 800689a:	f003 031f 	and.w	r3, r3, #31
 800689e:	e016      	b.n	80068ce <HAL_ADC_ConfigChannel+0x36a>
 80068a0:	683b      	ldr	r3, [r7, #0]
 80068a2:	681b      	ldr	r3, [r3, #0]
 80068a4:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80068a8:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 80068ac:	fa93 f3a3 	rbit	r3, r3
 80068b0:	67fb      	str	r3, [r7, #124]	@ 0x7c
  return result;
 80068b2:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80068b4:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  if (value == 0U)
 80068b8:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80068bc:	2b00      	cmp	r3, #0
 80068be:	d101      	bne.n	80068c4 <HAL_ADC_ConfigChannel+0x360>
    return 32U;
 80068c0:	2320      	movs	r3, #32
 80068c2:	e004      	b.n	80068ce <HAL_ADC_ConfigChannel+0x36a>
  return __builtin_clz(value);
 80068c4:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80068c8:	fab3 f383 	clz	r3, r3
 80068cc:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 80068ce:	429a      	cmp	r2, r3
 80068d0:	d106      	bne.n	80068e0 <HAL_ADC_ConfigChannel+0x37c>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 80068d2:	687b      	ldr	r3, [r7, #4]
 80068d4:	681b      	ldr	r3, [r3, #0]
 80068d6:	2200      	movs	r2, #0
 80068d8:	2102      	movs	r1, #2
 80068da:	4618      	mov	r0, r3
 80068dc:	f7fe ffda 	bl	8005894 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 80068e0:	687b      	ldr	r3, [r7, #4]
 80068e2:	681b      	ldr	r3, [r3, #0]
 80068e4:	2103      	movs	r1, #3
 80068e6:	4618      	mov	r0, r3
 80068e8:	f7fe ffbe 	bl	8005868 <LL_ADC_GetOffsetChannel>
 80068ec:	4603      	mov	r3, r0
 80068ee:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80068f2:	2b00      	cmp	r3, #0
 80068f4:	d10a      	bne.n	800690c <HAL_ADC_ConfigChannel+0x3a8>
 80068f6:	687b      	ldr	r3, [r7, #4]
 80068f8:	681b      	ldr	r3, [r3, #0]
 80068fa:	2103      	movs	r1, #3
 80068fc:	4618      	mov	r0, r3
 80068fe:	f7fe ffb3 	bl	8005868 <LL_ADC_GetOffsetChannel>
 8006902:	4603      	mov	r3, r0
 8006904:	0e9b      	lsrs	r3, r3, #26
 8006906:	f003 021f 	and.w	r2, r3, #31
 800690a:	e017      	b.n	800693c <HAL_ADC_ConfigChannel+0x3d8>
 800690c:	687b      	ldr	r3, [r7, #4]
 800690e:	681b      	ldr	r3, [r3, #0]
 8006910:	2103      	movs	r1, #3
 8006912:	4618      	mov	r0, r3
 8006914:	f7fe ffa8 	bl	8005868 <LL_ADC_GetOffsetChannel>
 8006918:	4603      	mov	r3, r0
 800691a:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800691c:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800691e:	fa93 f3a3 	rbit	r3, r3
 8006922:	673b      	str	r3, [r7, #112]	@ 0x70
  return result;
 8006924:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8006926:	67bb      	str	r3, [r7, #120]	@ 0x78
  if (value == 0U)
 8006928:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800692a:	2b00      	cmp	r3, #0
 800692c:	d101      	bne.n	8006932 <HAL_ADC_ConfigChannel+0x3ce>
    return 32U;
 800692e:	2320      	movs	r3, #32
 8006930:	e003      	b.n	800693a <HAL_ADC_ConfigChannel+0x3d6>
  return __builtin_clz(value);
 8006932:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8006934:	fab3 f383 	clz	r3, r3
 8006938:	b2db      	uxtb	r3, r3
 800693a:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 800693c:	683b      	ldr	r3, [r7, #0]
 800693e:	681b      	ldr	r3, [r3, #0]
 8006940:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006944:	2b00      	cmp	r3, #0
 8006946:	d105      	bne.n	8006954 <HAL_ADC_ConfigChannel+0x3f0>
 8006948:	683b      	ldr	r3, [r7, #0]
 800694a:	681b      	ldr	r3, [r3, #0]
 800694c:	0e9b      	lsrs	r3, r3, #26
 800694e:	f003 031f 	and.w	r3, r3, #31
 8006952:	e011      	b.n	8006978 <HAL_ADC_ConfigChannel+0x414>
 8006954:	683b      	ldr	r3, [r7, #0]
 8006956:	681b      	ldr	r3, [r3, #0]
 8006958:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800695a:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800695c:	fa93 f3a3 	rbit	r3, r3
 8006960:	667b      	str	r3, [r7, #100]	@ 0x64
  return result;
 8006962:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8006964:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (value == 0U)
 8006966:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8006968:	2b00      	cmp	r3, #0
 800696a:	d101      	bne.n	8006970 <HAL_ADC_ConfigChannel+0x40c>
    return 32U;
 800696c:	2320      	movs	r3, #32
 800696e:	e003      	b.n	8006978 <HAL_ADC_ConfigChannel+0x414>
  return __builtin_clz(value);
 8006970:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8006972:	fab3 f383 	clz	r3, r3
 8006976:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8006978:	429a      	cmp	r2, r3
 800697a:	d106      	bne.n	800698a <HAL_ADC_ConfigChannel+0x426>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 800697c:	687b      	ldr	r3, [r7, #4]
 800697e:	681b      	ldr	r3, [r3, #0]
 8006980:	2200      	movs	r2, #0
 8006982:	2103      	movs	r1, #3
 8006984:	4618      	mov	r0, r3
 8006986:	f7fe ff85 	bl	8005894 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800698a:	687b      	ldr	r3, [r7, #4]
 800698c:	681b      	ldr	r3, [r3, #0]
 800698e:	4618      	mov	r0, r3
 8006990:	f7ff f918 	bl	8005bc4 <LL_ADC_IsEnabled>
 8006994:	4603      	mov	r3, r0
 8006996:	2b00      	cmp	r3, #0
 8006998:	f040 8140 	bne.w	8006c1c <HAL_ADC_ConfigChannel+0x6b8>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfig->Channel, pConfig->SingleDiff);
 800699c:	687b      	ldr	r3, [r7, #4]
 800699e:	6818      	ldr	r0, [r3, #0]
 80069a0:	683b      	ldr	r3, [r7, #0]
 80069a2:	6819      	ldr	r1, [r3, #0]
 80069a4:	683b      	ldr	r3, [r7, #0]
 80069a6:	68db      	ldr	r3, [r3, #12]
 80069a8:	461a      	mov	r2, r3
 80069aa:	f7ff f855 	bl	8005a58 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (pConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 80069ae:	683b      	ldr	r3, [r7, #0]
 80069b0:	68db      	ldr	r3, [r3, #12]
 80069b2:	4a8f      	ldr	r2, [pc, #572]	@ (8006bf0 <HAL_ADC_ConfigChannel+0x68c>)
 80069b4:	4293      	cmp	r3, r2
 80069b6:	f040 8131 	bne.w	8006c1c <HAL_ADC_ConfigChannel+0x6b8>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80069ba:	687b      	ldr	r3, [r7, #4]
 80069bc:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 80069be:	683b      	ldr	r3, [r7, #0]
 80069c0:	681b      	ldr	r3, [r3, #0]
 80069c2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80069c6:	2b00      	cmp	r3, #0
 80069c8:	d10b      	bne.n	80069e2 <HAL_ADC_ConfigChannel+0x47e>
 80069ca:	683b      	ldr	r3, [r7, #0]
 80069cc:	681b      	ldr	r3, [r3, #0]
 80069ce:	0e9b      	lsrs	r3, r3, #26
 80069d0:	3301      	adds	r3, #1
 80069d2:	f003 031f 	and.w	r3, r3, #31
 80069d6:	2b09      	cmp	r3, #9
 80069d8:	bf94      	ite	ls
 80069da:	2301      	movls	r3, #1
 80069dc:	2300      	movhi	r3, #0
 80069de:	b2db      	uxtb	r3, r3
 80069e0:	e019      	b.n	8006a16 <HAL_ADC_ConfigChannel+0x4b2>
 80069e2:	683b      	ldr	r3, [r7, #0]
 80069e4:	681b      	ldr	r3, [r3, #0]
 80069e6:	65fb      	str	r3, [r7, #92]	@ 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80069e8:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80069ea:	fa93 f3a3 	rbit	r3, r3
 80069ee:	65bb      	str	r3, [r7, #88]	@ 0x58
  return result;
 80069f0:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80069f2:	663b      	str	r3, [r7, #96]	@ 0x60
  if (value == 0U)
 80069f4:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80069f6:	2b00      	cmp	r3, #0
 80069f8:	d101      	bne.n	80069fe <HAL_ADC_ConfigChannel+0x49a>
    return 32U;
 80069fa:	2320      	movs	r3, #32
 80069fc:	e003      	b.n	8006a06 <HAL_ADC_ConfigChannel+0x4a2>
  return __builtin_clz(value);
 80069fe:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8006a00:	fab3 f383 	clz	r3, r3
 8006a04:	b2db      	uxtb	r3, r3
 8006a06:	3301      	adds	r3, #1
 8006a08:	f003 031f 	and.w	r3, r3, #31
 8006a0c:	2b09      	cmp	r3, #9
 8006a0e:	bf94      	ite	ls
 8006a10:	2301      	movls	r3, #1
 8006a12:	2300      	movhi	r3, #0
 8006a14:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8006a16:	2b00      	cmp	r3, #0
 8006a18:	d079      	beq.n	8006b0e <HAL_ADC_ConfigChannel+0x5aa>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8006a1a:	683b      	ldr	r3, [r7, #0]
 8006a1c:	681b      	ldr	r3, [r3, #0]
 8006a1e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006a22:	2b00      	cmp	r3, #0
 8006a24:	d107      	bne.n	8006a36 <HAL_ADC_ConfigChannel+0x4d2>
 8006a26:	683b      	ldr	r3, [r7, #0]
 8006a28:	681b      	ldr	r3, [r3, #0]
 8006a2a:	0e9b      	lsrs	r3, r3, #26
 8006a2c:	3301      	adds	r3, #1
 8006a2e:	069b      	lsls	r3, r3, #26
 8006a30:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8006a34:	e015      	b.n	8006a62 <HAL_ADC_ConfigChannel+0x4fe>
 8006a36:	683b      	ldr	r3, [r7, #0]
 8006a38:	681b      	ldr	r3, [r3, #0]
 8006a3a:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006a3c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8006a3e:	fa93 f3a3 	rbit	r3, r3
 8006a42:	64fb      	str	r3, [r7, #76]	@ 0x4c
  return result;
 8006a44:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006a46:	657b      	str	r3, [r7, #84]	@ 0x54
  if (value == 0U)
 8006a48:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006a4a:	2b00      	cmp	r3, #0
 8006a4c:	d101      	bne.n	8006a52 <HAL_ADC_ConfigChannel+0x4ee>
    return 32U;
 8006a4e:	2320      	movs	r3, #32
 8006a50:	e003      	b.n	8006a5a <HAL_ADC_ConfigChannel+0x4f6>
  return __builtin_clz(value);
 8006a52:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006a54:	fab3 f383 	clz	r3, r3
 8006a58:	b2db      	uxtb	r3, r3
 8006a5a:	3301      	adds	r3, #1
 8006a5c:	069b      	lsls	r3, r3, #26
 8006a5e:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8006a62:	683b      	ldr	r3, [r7, #0]
 8006a64:	681b      	ldr	r3, [r3, #0]
 8006a66:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006a6a:	2b00      	cmp	r3, #0
 8006a6c:	d109      	bne.n	8006a82 <HAL_ADC_ConfigChannel+0x51e>
 8006a6e:	683b      	ldr	r3, [r7, #0]
 8006a70:	681b      	ldr	r3, [r3, #0]
 8006a72:	0e9b      	lsrs	r3, r3, #26
 8006a74:	3301      	adds	r3, #1
 8006a76:	f003 031f 	and.w	r3, r3, #31
 8006a7a:	2101      	movs	r1, #1
 8006a7c:	fa01 f303 	lsl.w	r3, r1, r3
 8006a80:	e017      	b.n	8006ab2 <HAL_ADC_ConfigChannel+0x54e>
 8006a82:	683b      	ldr	r3, [r7, #0]
 8006a84:	681b      	ldr	r3, [r3, #0]
 8006a86:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006a88:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006a8a:	fa93 f3a3 	rbit	r3, r3
 8006a8e:	643b      	str	r3, [r7, #64]	@ 0x40
  return result;
 8006a90:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006a92:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (value == 0U)
 8006a94:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8006a96:	2b00      	cmp	r3, #0
 8006a98:	d101      	bne.n	8006a9e <HAL_ADC_ConfigChannel+0x53a>
    return 32U;
 8006a9a:	2320      	movs	r3, #32
 8006a9c:	e003      	b.n	8006aa6 <HAL_ADC_ConfigChannel+0x542>
  return __builtin_clz(value);
 8006a9e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8006aa0:	fab3 f383 	clz	r3, r3
 8006aa4:	b2db      	uxtb	r3, r3
 8006aa6:	3301      	adds	r3, #1
 8006aa8:	f003 031f 	and.w	r3, r3, #31
 8006aac:	2101      	movs	r1, #1
 8006aae:	fa01 f303 	lsl.w	r3, r1, r3
 8006ab2:	ea42 0103 	orr.w	r1, r2, r3
 8006ab6:	683b      	ldr	r3, [r7, #0]
 8006ab8:	681b      	ldr	r3, [r3, #0]
 8006aba:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006abe:	2b00      	cmp	r3, #0
 8006ac0:	d10a      	bne.n	8006ad8 <HAL_ADC_ConfigChannel+0x574>
 8006ac2:	683b      	ldr	r3, [r7, #0]
 8006ac4:	681b      	ldr	r3, [r3, #0]
 8006ac6:	0e9b      	lsrs	r3, r3, #26
 8006ac8:	3301      	adds	r3, #1
 8006aca:	f003 021f 	and.w	r2, r3, #31
 8006ace:	4613      	mov	r3, r2
 8006ad0:	005b      	lsls	r3, r3, #1
 8006ad2:	4413      	add	r3, r2
 8006ad4:	051b      	lsls	r3, r3, #20
 8006ad6:	e018      	b.n	8006b0a <HAL_ADC_ConfigChannel+0x5a6>
 8006ad8:	683b      	ldr	r3, [r7, #0]
 8006ada:	681b      	ldr	r3, [r3, #0]
 8006adc:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006ade:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006ae0:	fa93 f3a3 	rbit	r3, r3
 8006ae4:	637b      	str	r3, [r7, #52]	@ 0x34
  return result;
 8006ae6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006ae8:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (value == 0U)
 8006aea:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006aec:	2b00      	cmp	r3, #0
 8006aee:	d101      	bne.n	8006af4 <HAL_ADC_ConfigChannel+0x590>
    return 32U;
 8006af0:	2320      	movs	r3, #32
 8006af2:	e003      	b.n	8006afc <HAL_ADC_ConfigChannel+0x598>
  return __builtin_clz(value);
 8006af4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006af6:	fab3 f383 	clz	r3, r3
 8006afa:	b2db      	uxtb	r3, r3
 8006afc:	3301      	adds	r3, #1
 8006afe:	f003 021f 	and.w	r2, r3, #31
 8006b02:	4613      	mov	r3, r2
 8006b04:	005b      	lsls	r3, r3, #1
 8006b06:	4413      	add	r3, r2
 8006b08:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8006b0a:	430b      	orrs	r3, r1
 8006b0c:	e081      	b.n	8006c12 <HAL_ADC_ConfigChannel+0x6ae>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8006b0e:	683b      	ldr	r3, [r7, #0]
 8006b10:	681b      	ldr	r3, [r3, #0]
 8006b12:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006b16:	2b00      	cmp	r3, #0
 8006b18:	d107      	bne.n	8006b2a <HAL_ADC_ConfigChannel+0x5c6>
 8006b1a:	683b      	ldr	r3, [r7, #0]
 8006b1c:	681b      	ldr	r3, [r3, #0]
 8006b1e:	0e9b      	lsrs	r3, r3, #26
 8006b20:	3301      	adds	r3, #1
 8006b22:	069b      	lsls	r3, r3, #26
 8006b24:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8006b28:	e015      	b.n	8006b56 <HAL_ADC_ConfigChannel+0x5f2>
 8006b2a:	683b      	ldr	r3, [r7, #0]
 8006b2c:	681b      	ldr	r3, [r3, #0]
 8006b2e:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006b30:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006b32:	fa93 f3a3 	rbit	r3, r3
 8006b36:	62bb      	str	r3, [r7, #40]	@ 0x28
  return result;
 8006b38:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006b3a:	633b      	str	r3, [r7, #48]	@ 0x30
  if (value == 0U)
 8006b3c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006b3e:	2b00      	cmp	r3, #0
 8006b40:	d101      	bne.n	8006b46 <HAL_ADC_ConfigChannel+0x5e2>
    return 32U;
 8006b42:	2320      	movs	r3, #32
 8006b44:	e003      	b.n	8006b4e <HAL_ADC_ConfigChannel+0x5ea>
  return __builtin_clz(value);
 8006b46:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006b48:	fab3 f383 	clz	r3, r3
 8006b4c:	b2db      	uxtb	r3, r3
 8006b4e:	3301      	adds	r3, #1
 8006b50:	069b      	lsls	r3, r3, #26
 8006b52:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8006b56:	683b      	ldr	r3, [r7, #0]
 8006b58:	681b      	ldr	r3, [r3, #0]
 8006b5a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006b5e:	2b00      	cmp	r3, #0
 8006b60:	d109      	bne.n	8006b76 <HAL_ADC_ConfigChannel+0x612>
 8006b62:	683b      	ldr	r3, [r7, #0]
 8006b64:	681b      	ldr	r3, [r3, #0]
 8006b66:	0e9b      	lsrs	r3, r3, #26
 8006b68:	3301      	adds	r3, #1
 8006b6a:	f003 031f 	and.w	r3, r3, #31
 8006b6e:	2101      	movs	r1, #1
 8006b70:	fa01 f303 	lsl.w	r3, r1, r3
 8006b74:	e017      	b.n	8006ba6 <HAL_ADC_ConfigChannel+0x642>
 8006b76:	683b      	ldr	r3, [r7, #0]
 8006b78:	681b      	ldr	r3, [r3, #0]
 8006b7a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006b7c:	6a3b      	ldr	r3, [r7, #32]
 8006b7e:	fa93 f3a3 	rbit	r3, r3
 8006b82:	61fb      	str	r3, [r7, #28]
  return result;
 8006b84:	69fb      	ldr	r3, [r7, #28]
 8006b86:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 8006b88:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006b8a:	2b00      	cmp	r3, #0
 8006b8c:	d101      	bne.n	8006b92 <HAL_ADC_ConfigChannel+0x62e>
    return 32U;
 8006b8e:	2320      	movs	r3, #32
 8006b90:	e003      	b.n	8006b9a <HAL_ADC_ConfigChannel+0x636>
  return __builtin_clz(value);
 8006b92:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006b94:	fab3 f383 	clz	r3, r3
 8006b98:	b2db      	uxtb	r3, r3
 8006b9a:	3301      	adds	r3, #1
 8006b9c:	f003 031f 	and.w	r3, r3, #31
 8006ba0:	2101      	movs	r1, #1
 8006ba2:	fa01 f303 	lsl.w	r3, r1, r3
 8006ba6:	ea42 0103 	orr.w	r1, r2, r3
 8006baa:	683b      	ldr	r3, [r7, #0]
 8006bac:	681b      	ldr	r3, [r3, #0]
 8006bae:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006bb2:	2b00      	cmp	r3, #0
 8006bb4:	d10d      	bne.n	8006bd2 <HAL_ADC_ConfigChannel+0x66e>
 8006bb6:	683b      	ldr	r3, [r7, #0]
 8006bb8:	681b      	ldr	r3, [r3, #0]
 8006bba:	0e9b      	lsrs	r3, r3, #26
 8006bbc:	3301      	adds	r3, #1
 8006bbe:	f003 021f 	and.w	r2, r3, #31
 8006bc2:	4613      	mov	r3, r2
 8006bc4:	005b      	lsls	r3, r3, #1
 8006bc6:	4413      	add	r3, r2
 8006bc8:	3b1e      	subs	r3, #30
 8006bca:	051b      	lsls	r3, r3, #20
 8006bcc:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8006bd0:	e01e      	b.n	8006c10 <HAL_ADC_ConfigChannel+0x6ac>
 8006bd2:	683b      	ldr	r3, [r7, #0]
 8006bd4:	681b      	ldr	r3, [r3, #0]
 8006bd6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006bd8:	697b      	ldr	r3, [r7, #20]
 8006bda:	fa93 f3a3 	rbit	r3, r3
 8006bde:	613b      	str	r3, [r7, #16]
  return result;
 8006be0:	693b      	ldr	r3, [r7, #16]
 8006be2:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8006be4:	69bb      	ldr	r3, [r7, #24]
 8006be6:	2b00      	cmp	r3, #0
 8006be8:	d104      	bne.n	8006bf4 <HAL_ADC_ConfigChannel+0x690>
    return 32U;
 8006bea:	2320      	movs	r3, #32
 8006bec:	e006      	b.n	8006bfc <HAL_ADC_ConfigChannel+0x698>
 8006bee:	bf00      	nop
 8006bf0:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 8006bf4:	69bb      	ldr	r3, [r7, #24]
 8006bf6:	fab3 f383 	clz	r3, r3
 8006bfa:	b2db      	uxtb	r3, r3
 8006bfc:	3301      	adds	r3, #1
 8006bfe:	f003 021f 	and.w	r2, r3, #31
 8006c02:	4613      	mov	r3, r2
 8006c04:	005b      	lsls	r3, r3, #1
 8006c06:	4413      	add	r3, r2
 8006c08:	3b1e      	subs	r3, #30
 8006c0a:	051b      	lsls	r3, r3, #20
 8006c0c:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8006c10:	430b      	orrs	r3, r1
                                                   (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)pConfig->Channel)
                                                    + 1UL) & 0x1FUL)),
                                      pConfig->SamplingTime);
 8006c12:	683a      	ldr	r2, [r7, #0]
 8006c14:	6892      	ldr	r2, [r2, #8]
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8006c16:	4619      	mov	r1, r3
 8006c18:	f7fe fef2 	bl	8005a00 <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8006c1c:	683b      	ldr	r3, [r7, #0]
 8006c1e:	681a      	ldr	r2, [r3, #0]
 8006c20:	4b3f      	ldr	r3, [pc, #252]	@ (8006d20 <HAL_ADC_ConfigChannel+0x7bc>)
 8006c22:	4013      	ands	r3, r2
 8006c24:	2b00      	cmp	r3, #0
 8006c26:	d071      	beq.n	8006d0c <HAL_ADC_ConfigChannel+0x7a8>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8006c28:	483e      	ldr	r0, [pc, #248]	@ (8006d24 <HAL_ADC_ConfigChannel+0x7c0>)
 8006c2a:	f7fe fdeb 	bl	8005804 <LL_ADC_GetCommonPathInternalCh>
 8006c2e:	f8c7 00c4 	str.w	r0, [r7, #196]	@ 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if (((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC1) || (pConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC5))
 8006c32:	683b      	ldr	r3, [r7, #0]
 8006c34:	681b      	ldr	r3, [r3, #0]
 8006c36:	4a3c      	ldr	r2, [pc, #240]	@ (8006d28 <HAL_ADC_ConfigChannel+0x7c4>)
 8006c38:	4293      	cmp	r3, r2
 8006c3a:	d004      	beq.n	8006c46 <HAL_ADC_ConfigChannel+0x6e2>
 8006c3c:	683b      	ldr	r3, [r7, #0]
 8006c3e:	681b      	ldr	r3, [r3, #0]
 8006c40:	4a3a      	ldr	r2, [pc, #232]	@ (8006d2c <HAL_ADC_ConfigChannel+0x7c8>)
 8006c42:	4293      	cmp	r3, r2
 8006c44:	d127      	bne.n	8006c96 <HAL_ADC_ConfigChannel+0x732>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8006c46:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8006c4a:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8006c4e:	2b00      	cmp	r3, #0
 8006c50:	d121      	bne.n	8006c96 <HAL_ADC_ConfigChannel+0x732>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8006c52:	687b      	ldr	r3, [r7, #4]
 8006c54:	681b      	ldr	r3, [r3, #0]
 8006c56:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8006c5a:	d157      	bne.n	8006d0c <HAL_ADC_ConfigChannel+0x7a8>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8006c5c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8006c60:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8006c64:	4619      	mov	r1, r3
 8006c66:	482f      	ldr	r0, [pc, #188]	@ (8006d24 <HAL_ADC_ConfigChannel+0x7c0>)
 8006c68:	f7fe fdb9 	bl	80057de <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8006c6c:	4b30      	ldr	r3, [pc, #192]	@ (8006d30 <HAL_ADC_ConfigChannel+0x7cc>)
 8006c6e:	681b      	ldr	r3, [r3, #0]
 8006c70:	099b      	lsrs	r3, r3, #6
 8006c72:	4a30      	ldr	r2, [pc, #192]	@ (8006d34 <HAL_ADC_ConfigChannel+0x7d0>)
 8006c74:	fba2 2303 	umull	r2, r3, r2, r3
 8006c78:	099b      	lsrs	r3, r3, #6
 8006c7a:	1c5a      	adds	r2, r3, #1
 8006c7c:	4613      	mov	r3, r2
 8006c7e:	005b      	lsls	r3, r3, #1
 8006c80:	4413      	add	r3, r2
 8006c82:	009b      	lsls	r3, r3, #2
 8006c84:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8006c86:	e002      	b.n	8006c8e <HAL_ADC_ConfigChannel+0x72a>
          {
            wait_loop_index--;
 8006c88:	68fb      	ldr	r3, [r7, #12]
 8006c8a:	3b01      	subs	r3, #1
 8006c8c:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8006c8e:	68fb      	ldr	r3, [r7, #12]
 8006c90:	2b00      	cmp	r3, #0
 8006c92:	d1f9      	bne.n	8006c88 <HAL_ADC_ConfigChannel+0x724>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8006c94:	e03a      	b.n	8006d0c <HAL_ADC_ConfigChannel+0x7a8>
          }
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 8006c96:	683b      	ldr	r3, [r7, #0]
 8006c98:	681b      	ldr	r3, [r3, #0]
 8006c9a:	4a27      	ldr	r2, [pc, #156]	@ (8006d38 <HAL_ADC_ConfigChannel+0x7d4>)
 8006c9c:	4293      	cmp	r3, r2
 8006c9e:	d113      	bne.n	8006cc8 <HAL_ADC_ConfigChannel+0x764>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8006ca0:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8006ca4:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8006ca8:	2b00      	cmp	r3, #0
 8006caa:	d10d      	bne.n	8006cc8 <HAL_ADC_ConfigChannel+0x764>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8006cac:	687b      	ldr	r3, [r7, #4]
 8006cae:	681b      	ldr	r3, [r3, #0]
 8006cb0:	4a22      	ldr	r2, [pc, #136]	@ (8006d3c <HAL_ADC_ConfigChannel+0x7d8>)
 8006cb2:	4293      	cmp	r3, r2
 8006cb4:	d02a      	beq.n	8006d0c <HAL_ADC_ConfigChannel+0x7a8>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8006cb6:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8006cba:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8006cbe:	4619      	mov	r1, r3
 8006cc0:	4818      	ldr	r0, [pc, #96]	@ (8006d24 <HAL_ADC_ConfigChannel+0x7c0>)
 8006cc2:	f7fe fd8c 	bl	80057de <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8006cc6:	e021      	b.n	8006d0c <HAL_ADC_ConfigChannel+0x7a8>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VREFINT)
 8006cc8:	683b      	ldr	r3, [r7, #0]
 8006cca:	681b      	ldr	r3, [r3, #0]
 8006ccc:	4a1c      	ldr	r2, [pc, #112]	@ (8006d40 <HAL_ADC_ConfigChannel+0x7dc>)
 8006cce:	4293      	cmp	r3, r2
 8006cd0:	d11c      	bne.n	8006d0c <HAL_ADC_ConfigChannel+0x7a8>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8006cd2:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8006cd6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8006cda:	2b00      	cmp	r3, #0
 8006cdc:	d116      	bne.n	8006d0c <HAL_ADC_ConfigChannel+0x7a8>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 8006cde:	687b      	ldr	r3, [r7, #4]
 8006ce0:	681b      	ldr	r3, [r3, #0]
 8006ce2:	4a16      	ldr	r2, [pc, #88]	@ (8006d3c <HAL_ADC_ConfigChannel+0x7d8>)
 8006ce4:	4293      	cmp	r3, r2
 8006ce6:	d011      	beq.n	8006d0c <HAL_ADC_ConfigChannel+0x7a8>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8006ce8:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8006cec:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8006cf0:	4619      	mov	r1, r3
 8006cf2:	480c      	ldr	r0, [pc, #48]	@ (8006d24 <HAL_ADC_ConfigChannel+0x7c0>)
 8006cf4:	f7fe fd73 	bl	80057de <LL_ADC_SetCommonPathInternalCh>
 8006cf8:	e008      	b.n	8006d0c <HAL_ADC_ConfigChannel+0x7a8>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8006cfa:	687b      	ldr	r3, [r7, #4]
 8006cfc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006cfe:	f043 0220 	orr.w	r2, r3, #32
 8006d02:	687b      	ldr	r3, [r7, #4]
 8006d04:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 8006d06:	2301      	movs	r3, #1
 8006d08:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8006d0c:	687b      	ldr	r3, [r7, #4]
 8006d0e:	2200      	movs	r2, #0
 8006d10:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Return function status */
  return tmp_hal_status;
 8006d14:	f897 30d7 	ldrb.w	r3, [r7, #215]	@ 0xd7
}
 8006d18:	4618      	mov	r0, r3
 8006d1a:	37d8      	adds	r7, #216	@ 0xd8
 8006d1c:	46bd      	mov	sp, r7
 8006d1e:	bd80      	pop	{r7, pc}
 8006d20:	80080000 	.word	0x80080000
 8006d24:	50000300 	.word	0x50000300
 8006d28:	c3210000 	.word	0xc3210000
 8006d2c:	90c00010 	.word	0x90c00010
 8006d30:	20000008 	.word	0x20000008
 8006d34:	053e2d63 	.word	0x053e2d63
 8006d38:	c7520000 	.word	0xc7520000
 8006d3c:	50000100 	.word	0x50000100
 8006d40:	cb840000 	.word	0xcb840000

08006d44 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8006d44:	b580      	push	{r7, lr}
 8006d46:	b084      	sub	sp, #16
 8006d48:	af00      	add	r7, sp, #0
 8006d4a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 8006d4c:	2300      	movs	r3, #0
 8006d4e:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8006d50:	687b      	ldr	r3, [r7, #4]
 8006d52:	681b      	ldr	r3, [r3, #0]
 8006d54:	4618      	mov	r0, r3
 8006d56:	f7fe ff35 	bl	8005bc4 <LL_ADC_IsEnabled>
 8006d5a:	4603      	mov	r3, r0
 8006d5c:	2b00      	cmp	r3, #0
 8006d5e:	d169      	bne.n	8006e34 <ADC_Enable+0xf0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 8006d60:	687b      	ldr	r3, [r7, #4]
 8006d62:	681b      	ldr	r3, [r3, #0]
 8006d64:	689a      	ldr	r2, [r3, #8]
 8006d66:	4b36      	ldr	r3, [pc, #216]	@ (8006e40 <ADC_Enable+0xfc>)
 8006d68:	4013      	ands	r3, r2
 8006d6a:	2b00      	cmp	r3, #0
 8006d6c:	d00d      	beq.n	8006d8a <ADC_Enable+0x46>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8006d6e:	687b      	ldr	r3, [r7, #4]
 8006d70:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006d72:	f043 0210 	orr.w	r2, r3, #16
 8006d76:	687b      	ldr	r3, [r7, #4]
 8006d78:	65da      	str	r2, [r3, #92]	@ 0x5c

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8006d7a:	687b      	ldr	r3, [r7, #4]
 8006d7c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006d7e:	f043 0201 	orr.w	r2, r3, #1
 8006d82:	687b      	ldr	r3, [r7, #4]
 8006d84:	661a      	str	r2, [r3, #96]	@ 0x60

      return HAL_ERROR;
 8006d86:	2301      	movs	r3, #1
 8006d88:	e055      	b.n	8006e36 <ADC_Enable+0xf2>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8006d8a:	687b      	ldr	r3, [r7, #4]
 8006d8c:	681b      	ldr	r3, [r3, #0]
 8006d8e:	4618      	mov	r0, r3
 8006d90:	f7fe fef0 	bl	8005b74 <LL_ADC_Enable>

    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 8006d94:	482b      	ldr	r0, [pc, #172]	@ (8006e44 <ADC_Enable+0x100>)
 8006d96:	f7fe fd35 	bl	8005804 <LL_ADC_GetCommonPathInternalCh>
 8006d9a:	4603      	mov	r3, r0
         & LL_ADC_PATH_INTERNAL_TEMPSENSOR) != 0UL)
 8006d9c:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 8006da0:	2b00      	cmp	r3, #0
 8006da2:	d013      	beq.n	8006dcc <ADC_Enable+0x88>

      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8006da4:	4b28      	ldr	r3, [pc, #160]	@ (8006e48 <ADC_Enable+0x104>)
 8006da6:	681b      	ldr	r3, [r3, #0]
 8006da8:	099b      	lsrs	r3, r3, #6
 8006daa:	4a28      	ldr	r2, [pc, #160]	@ (8006e4c <ADC_Enable+0x108>)
 8006dac:	fba2 2303 	umull	r2, r3, r2, r3
 8006db0:	099b      	lsrs	r3, r3, #6
 8006db2:	1c5a      	adds	r2, r3, #1
 8006db4:	4613      	mov	r3, r2
 8006db6:	005b      	lsls	r3, r3, #1
 8006db8:	4413      	add	r3, r2
 8006dba:	009b      	lsls	r3, r3, #2
 8006dbc:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8006dbe:	e002      	b.n	8006dc6 <ADC_Enable+0x82>
      {
        wait_loop_index--;
 8006dc0:	68bb      	ldr	r3, [r7, #8]
 8006dc2:	3b01      	subs	r3, #1
 8006dc4:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8006dc6:	68bb      	ldr	r3, [r7, #8]
 8006dc8:	2b00      	cmp	r3, #0
 8006dca:	d1f9      	bne.n	8006dc0 <ADC_Enable+0x7c>
      }
    }

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 8006dcc:	f7fe fcc6 	bl	800575c <HAL_GetTick>
 8006dd0:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8006dd2:	e028      	b.n	8006e26 <ADC_Enable+0xe2>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8006dd4:	687b      	ldr	r3, [r7, #4]
 8006dd6:	681b      	ldr	r3, [r3, #0]
 8006dd8:	4618      	mov	r0, r3
 8006dda:	f7fe fef3 	bl	8005bc4 <LL_ADC_IsEnabled>
 8006dde:	4603      	mov	r3, r0
 8006de0:	2b00      	cmp	r3, #0
 8006de2:	d104      	bne.n	8006dee <ADC_Enable+0xaa>
      {
        LL_ADC_Enable(hadc->Instance);
 8006de4:	687b      	ldr	r3, [r7, #4]
 8006de6:	681b      	ldr	r3, [r3, #0]
 8006de8:	4618      	mov	r0, r3
 8006dea:	f7fe fec3 	bl	8005b74 <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8006dee:	f7fe fcb5 	bl	800575c <HAL_GetTick>
 8006df2:	4602      	mov	r2, r0
 8006df4:	68fb      	ldr	r3, [r7, #12]
 8006df6:	1ad3      	subs	r3, r2, r3
 8006df8:	2b02      	cmp	r3, #2
 8006dfa:	d914      	bls.n	8006e26 <ADC_Enable+0xe2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8006dfc:	687b      	ldr	r3, [r7, #4]
 8006dfe:	681b      	ldr	r3, [r3, #0]
 8006e00:	681b      	ldr	r3, [r3, #0]
 8006e02:	f003 0301 	and.w	r3, r3, #1
 8006e06:	2b01      	cmp	r3, #1
 8006e08:	d00d      	beq.n	8006e26 <ADC_Enable+0xe2>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8006e0a:	687b      	ldr	r3, [r7, #4]
 8006e0c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006e0e:	f043 0210 	orr.w	r2, r3, #16
 8006e12:	687b      	ldr	r3, [r7, #4]
 8006e14:	65da      	str	r2, [r3, #92]	@ 0x5c

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8006e16:	687b      	ldr	r3, [r7, #4]
 8006e18:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006e1a:	f043 0201 	orr.w	r2, r3, #1
 8006e1e:	687b      	ldr	r3, [r7, #4]
 8006e20:	661a      	str	r2, [r3, #96]	@ 0x60

          return HAL_ERROR;
 8006e22:	2301      	movs	r3, #1
 8006e24:	e007      	b.n	8006e36 <ADC_Enable+0xf2>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8006e26:	687b      	ldr	r3, [r7, #4]
 8006e28:	681b      	ldr	r3, [r3, #0]
 8006e2a:	681b      	ldr	r3, [r3, #0]
 8006e2c:	f003 0301 	and.w	r3, r3, #1
 8006e30:	2b01      	cmp	r3, #1
 8006e32:	d1cf      	bne.n	8006dd4 <ADC_Enable+0x90>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8006e34:	2300      	movs	r3, #0
}
 8006e36:	4618      	mov	r0, r3
 8006e38:	3710      	adds	r7, #16
 8006e3a:	46bd      	mov	sp, r7
 8006e3c:	bd80      	pop	{r7, pc}
 8006e3e:	bf00      	nop
 8006e40:	8000003f 	.word	0x8000003f
 8006e44:	50000300 	.word	0x50000300
 8006e48:	20000008 	.word	0x20000008
 8006e4c:	053e2d63 	.word	0x053e2d63

08006e50 <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 8006e50:	b580      	push	{r7, lr}
 8006e52:	b084      	sub	sp, #16
 8006e54:	af00      	add	r7, sp, #0
 8006e56:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 8006e58:	687b      	ldr	r3, [r7, #4]
 8006e5a:	681b      	ldr	r3, [r3, #0]
 8006e5c:	4618      	mov	r0, r3
 8006e5e:	f7fe fec4 	bl	8005bea <LL_ADC_IsDisableOngoing>
 8006e62:	60f8      	str	r0, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 8006e64:	687b      	ldr	r3, [r7, #4]
 8006e66:	681b      	ldr	r3, [r3, #0]
 8006e68:	4618      	mov	r0, r3
 8006e6a:	f7fe feab 	bl	8005bc4 <LL_ADC_IsEnabled>
 8006e6e:	4603      	mov	r3, r0
 8006e70:	2b00      	cmp	r3, #0
 8006e72:	d047      	beq.n	8006f04 <ADC_Disable+0xb4>
      && (tmp_adc_is_disable_on_going == 0UL)
 8006e74:	68fb      	ldr	r3, [r7, #12]
 8006e76:	2b00      	cmp	r3, #0
 8006e78:	d144      	bne.n	8006f04 <ADC_Disable+0xb4>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 8006e7a:	687b      	ldr	r3, [r7, #4]
 8006e7c:	681b      	ldr	r3, [r3, #0]
 8006e7e:	689b      	ldr	r3, [r3, #8]
 8006e80:	f003 030d 	and.w	r3, r3, #13
 8006e84:	2b01      	cmp	r3, #1
 8006e86:	d10c      	bne.n	8006ea2 <ADC_Disable+0x52>
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 8006e88:	687b      	ldr	r3, [r7, #4]
 8006e8a:	681b      	ldr	r3, [r3, #0]
 8006e8c:	4618      	mov	r0, r3
 8006e8e:	f7fe fe85 	bl	8005b9c <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 8006e92:	687b      	ldr	r3, [r7, #4]
 8006e94:	681b      	ldr	r3, [r3, #0]
 8006e96:	2203      	movs	r2, #3
 8006e98:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 8006e9a:	f7fe fc5f 	bl	800575c <HAL_GetTick>
 8006e9e:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8006ea0:	e029      	b.n	8006ef6 <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8006ea2:	687b      	ldr	r3, [r7, #4]
 8006ea4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006ea6:	f043 0210 	orr.w	r2, r3, #16
 8006eaa:	687b      	ldr	r3, [r7, #4]
 8006eac:	65da      	str	r2, [r3, #92]	@ 0x5c
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8006eae:	687b      	ldr	r3, [r7, #4]
 8006eb0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006eb2:	f043 0201 	orr.w	r2, r3, #1
 8006eb6:	687b      	ldr	r3, [r7, #4]
 8006eb8:	661a      	str	r2, [r3, #96]	@ 0x60
      return HAL_ERROR;
 8006eba:	2301      	movs	r3, #1
 8006ebc:	e023      	b.n	8006f06 <ADC_Disable+0xb6>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8006ebe:	f7fe fc4d 	bl	800575c <HAL_GetTick>
 8006ec2:	4602      	mov	r2, r0
 8006ec4:	68bb      	ldr	r3, [r7, #8]
 8006ec6:	1ad3      	subs	r3, r2, r3
 8006ec8:	2b02      	cmp	r3, #2
 8006eca:	d914      	bls.n	8006ef6 <ADC_Disable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8006ecc:	687b      	ldr	r3, [r7, #4]
 8006ece:	681b      	ldr	r3, [r3, #0]
 8006ed0:	689b      	ldr	r3, [r3, #8]
 8006ed2:	f003 0301 	and.w	r3, r3, #1
 8006ed6:	2b00      	cmp	r3, #0
 8006ed8:	d00d      	beq.n	8006ef6 <ADC_Disable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8006eda:	687b      	ldr	r3, [r7, #4]
 8006edc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006ede:	f043 0210 	orr.w	r2, r3, #16
 8006ee2:	687b      	ldr	r3, [r7, #4]
 8006ee4:	65da      	str	r2, [r3, #92]	@ 0x5c

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8006ee6:	687b      	ldr	r3, [r7, #4]
 8006ee8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006eea:	f043 0201 	orr.w	r2, r3, #1
 8006eee:	687b      	ldr	r3, [r7, #4]
 8006ef0:	661a      	str	r2, [r3, #96]	@ 0x60

          return HAL_ERROR;
 8006ef2:	2301      	movs	r3, #1
 8006ef4:	e007      	b.n	8006f06 <ADC_Disable+0xb6>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8006ef6:	687b      	ldr	r3, [r7, #4]
 8006ef8:	681b      	ldr	r3, [r3, #0]
 8006efa:	689b      	ldr	r3, [r3, #8]
 8006efc:	f003 0301 	and.w	r3, r3, #1
 8006f00:	2b00      	cmp	r3, #0
 8006f02:	d1dc      	bne.n	8006ebe <ADC_Disable+0x6e>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8006f04:	2300      	movs	r3, #0
}
 8006f06:	4618      	mov	r0, r3
 8006f08:	3710      	adds	r7, #16
 8006f0a:	46bd      	mov	sp, r7
 8006f0c:	bd80      	pop	{r7, pc}

08006f0e <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8006f0e:	b580      	push	{r7, lr}
 8006f10:	b084      	sub	sp, #16
 8006f12:	af00      	add	r7, sp, #0
 8006f14:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006f16:	687b      	ldr	r3, [r7, #4]
 8006f18:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006f1a:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 8006f1c:	68fb      	ldr	r3, [r7, #12]
 8006f1e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006f20:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8006f24:	2b00      	cmp	r3, #0
 8006f26:	d14b      	bne.n	8006fc0 <ADC_DMAConvCplt+0xb2>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8006f28:	68fb      	ldr	r3, [r7, #12]
 8006f2a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006f2c:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8006f30:	68fb      	ldr	r3, [r7, #12]
 8006f32:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    /* Is it the end of the regular sequence ? */
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 8006f34:	68fb      	ldr	r3, [r7, #12]
 8006f36:	681b      	ldr	r3, [r3, #0]
 8006f38:	681b      	ldr	r3, [r3, #0]
 8006f3a:	f003 0308 	and.w	r3, r3, #8
 8006f3e:	2b00      	cmp	r3, #0
 8006f40:	d021      	beq.n	8006f86 <ADC_DMAConvCplt+0x78>
    {
      /* Are conversions software-triggered ? */
      if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8006f42:	68fb      	ldr	r3, [r7, #12]
 8006f44:	681b      	ldr	r3, [r3, #0]
 8006f46:	4618      	mov	r0, r3
 8006f48:	f7fe fd08 	bl	800595c <LL_ADC_REG_IsTriggerSourceSWStart>
 8006f4c:	4603      	mov	r3, r0
 8006f4e:	2b00      	cmp	r3, #0
 8006f50:	d032      	beq.n	8006fb8 <ADC_DMAConvCplt+0xaa>
      {
        /* Is CONT bit set ? */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 8006f52:	68fb      	ldr	r3, [r7, #12]
 8006f54:	681b      	ldr	r3, [r3, #0]
 8006f56:	68db      	ldr	r3, [r3, #12]
 8006f58:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8006f5c:	2b00      	cmp	r3, #0
 8006f5e:	d12b      	bne.n	8006fb8 <ADC_DMAConvCplt+0xaa>
        {
          /* CONT bit is not set, no more conversions expected */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8006f60:	68fb      	ldr	r3, [r7, #12]
 8006f62:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006f64:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8006f68:	68fb      	ldr	r3, [r7, #12]
 8006f6a:	65da      	str	r2, [r3, #92]	@ 0x5c
          if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8006f6c:	68fb      	ldr	r3, [r7, #12]
 8006f6e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006f70:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8006f74:	2b00      	cmp	r3, #0
 8006f76:	d11f      	bne.n	8006fb8 <ADC_DMAConvCplt+0xaa>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8006f78:	68fb      	ldr	r3, [r7, #12]
 8006f7a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006f7c:	f043 0201 	orr.w	r2, r3, #1
 8006f80:	68fb      	ldr	r3, [r7, #12]
 8006f82:	65da      	str	r2, [r3, #92]	@ 0x5c
 8006f84:	e018      	b.n	8006fb8 <ADC_DMAConvCplt+0xaa>
    }
    else
    {
      /* DMA End of Transfer interrupt was triggered but conversions sequence
         is not over. If DMACFG is set to 0, conversions are stopped. */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMACFG) == 0UL)
 8006f86:	68fb      	ldr	r3, [r7, #12]
 8006f88:	681b      	ldr	r3, [r3, #0]
 8006f8a:	68db      	ldr	r3, [r3, #12]
 8006f8c:	f003 0302 	and.w	r3, r3, #2
 8006f90:	2b00      	cmp	r3, #0
 8006f92:	d111      	bne.n	8006fb8 <ADC_DMAConvCplt+0xaa>
      {
        /* DMACFG bit is not set, conversions are stopped. */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8006f94:	68fb      	ldr	r3, [r7, #12]
 8006f96:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006f98:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8006f9c:	68fb      	ldr	r3, [r7, #12]
 8006f9e:	65da      	str	r2, [r3, #92]	@ 0x5c
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8006fa0:	68fb      	ldr	r3, [r7, #12]
 8006fa2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006fa4:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8006fa8:	2b00      	cmp	r3, #0
 8006faa:	d105      	bne.n	8006fb8 <ADC_DMAConvCplt+0xaa>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8006fac:	68fb      	ldr	r3, [r7, #12]
 8006fae:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006fb0:	f043 0201 	orr.w	r2, r3, #1
 8006fb4:	68fb      	ldr	r3, [r7, #12]
 8006fb6:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8006fb8:	68f8      	ldr	r0, [r7, #12]
 8006fba:	f7fa fae1 	bl	8001580 <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8006fbe:	e00e      	b.n	8006fde <ADC_DMAConvCplt+0xd0>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8006fc0:	68fb      	ldr	r3, [r7, #12]
 8006fc2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006fc4:	f003 0310 	and.w	r3, r3, #16
 8006fc8:	2b00      	cmp	r3, #0
 8006fca:	d003      	beq.n	8006fd4 <ADC_DMAConvCplt+0xc6>
      HAL_ADC_ErrorCallback(hadc);
 8006fcc:	68f8      	ldr	r0, [r7, #12]
 8006fce:	f7ff fabf 	bl	8006550 <HAL_ADC_ErrorCallback>
}
 8006fd2:	e004      	b.n	8006fde <ADC_DMAConvCplt+0xd0>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8006fd4:	68fb      	ldr	r3, [r7, #12]
 8006fd6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006fd8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006fda:	6878      	ldr	r0, [r7, #4]
 8006fdc:	4798      	blx	r3
}
 8006fde:	bf00      	nop
 8006fe0:	3710      	adds	r7, #16
 8006fe2:	46bd      	mov	sp, r7
 8006fe4:	bd80      	pop	{r7, pc}

08006fe6 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 8006fe6:	b580      	push	{r7, lr}
 8006fe8:	b084      	sub	sp, #16
 8006fea:	af00      	add	r7, sp, #0
 8006fec:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006fee:	687b      	ldr	r3, [r7, #4]
 8006ff0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006ff2:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8006ff4:	68f8      	ldr	r0, [r7, #12]
 8006ff6:	f7ff fa97 	bl	8006528 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8006ffa:	bf00      	nop
 8006ffc:	3710      	adds	r7, #16
 8006ffe:	46bd      	mov	sp, r7
 8007000:	bd80      	pop	{r7, pc}

08007002 <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 8007002:	b580      	push	{r7, lr}
 8007004:	b084      	sub	sp, #16
 8007006:	af00      	add	r7, sp, #0
 8007008:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800700a:	687b      	ldr	r3, [r7, #4]
 800700c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800700e:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8007010:	68fb      	ldr	r3, [r7, #12]
 8007012:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007014:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8007018:	68fb      	ldr	r3, [r7, #12]
 800701a:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 800701c:	68fb      	ldr	r3, [r7, #12]
 800701e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8007020:	f043 0204 	orr.w	r2, r3, #4
 8007024:	68fb      	ldr	r3, [r7, #12]
 8007026:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8007028:	68f8      	ldr	r0, [r7, #12]
 800702a:	f7ff fa91 	bl	8006550 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 800702e:	bf00      	nop
 8007030:	3710      	adds	r7, #16
 8007032:	46bd      	mov	sp, r7
 8007034:	bd80      	pop	{r7, pc}

08007036 <LL_ADC_StartCalibration>:
{
 8007036:	b480      	push	{r7}
 8007038:	b083      	sub	sp, #12
 800703a:	af00      	add	r7, sp, #0
 800703c:	6078      	str	r0, [r7, #4]
 800703e:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->CR,
 8007040:	687b      	ldr	r3, [r7, #4]
 8007042:	689b      	ldr	r3, [r3, #8]
 8007044:	f023 4340 	bic.w	r3, r3, #3221225472	@ 0xc0000000
 8007048:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 800704c:	683a      	ldr	r2, [r7, #0]
 800704e:	f002 4280 	and.w	r2, r2, #1073741824	@ 0x40000000
 8007052:	4313      	orrs	r3, r2
 8007054:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8007058:	687b      	ldr	r3, [r7, #4]
 800705a:	609a      	str	r2, [r3, #8]
}
 800705c:	bf00      	nop
 800705e:	370c      	adds	r7, #12
 8007060:	46bd      	mov	sp, r7
 8007062:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007066:	4770      	bx	lr

08007068 <LL_ADC_IsCalibrationOnGoing>:
{
 8007068:	b480      	push	{r7}
 800706a:	b083      	sub	sp, #12
 800706c:	af00      	add	r7, sp, #0
 800706e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADCAL) == (ADC_CR_ADCAL)) ? 1UL : 0UL);
 8007070:	687b      	ldr	r3, [r7, #4]
 8007072:	689b      	ldr	r3, [r3, #8]
 8007074:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8007078:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800707c:	d101      	bne.n	8007082 <LL_ADC_IsCalibrationOnGoing+0x1a>
 800707e:	2301      	movs	r3, #1
 8007080:	e000      	b.n	8007084 <LL_ADC_IsCalibrationOnGoing+0x1c>
 8007082:	2300      	movs	r3, #0
}
 8007084:	4618      	mov	r0, r3
 8007086:	370c      	adds	r7, #12
 8007088:	46bd      	mov	sp, r7
 800708a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800708e:	4770      	bx	lr

08007090 <HAL_ADCEx_Calibration_Start>:
  *           @arg @ref ADC_SINGLE_ENDED       Channel in mode input single ended
  *           @arg @ref ADC_DIFFERENTIAL_ENDED Channel in mode input differential ended
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef *hadc, uint32_t SingleDiff)
{
 8007090:	b580      	push	{r7, lr}
 8007092:	b084      	sub	sp, #16
 8007094:	af00      	add	r7, sp, #0
 8007096:	6078      	str	r0, [r7, #4]
 8007098:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status;
  __IO uint32_t wait_loop_index = 0UL;
 800709a:	2300      	movs	r3, #0
 800709c:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_SINGLE_DIFFERENTIAL(SingleDiff));

  /* Process locked */
  __HAL_LOCK(hadc);
 800709e:	687b      	ldr	r3, [r7, #4]
 80070a0:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 80070a4:	2b01      	cmp	r3, #1
 80070a6:	d101      	bne.n	80070ac <HAL_ADCEx_Calibration_Start+0x1c>
 80070a8:	2302      	movs	r3, #2
 80070aa:	e04d      	b.n	8007148 <HAL_ADCEx_Calibration_Start+0xb8>
 80070ac:	687b      	ldr	r3, [r7, #4]
 80070ae:	2201      	movs	r2, #1
 80070b0:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Calibration prerequisite: ADC must be disabled. */

  /* Disable the ADC (if not already disabled) */
  tmp_hal_status = ADC_Disable(hadc);
 80070b4:	6878      	ldr	r0, [r7, #4]
 80070b6:	f7ff fecb 	bl	8006e50 <ADC_Disable>
 80070ba:	4603      	mov	r3, r0
 80070bc:	73fb      	strb	r3, [r7, #15]

  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 80070be:	7bfb      	ldrb	r3, [r7, #15]
 80070c0:	2b00      	cmp	r3, #0
 80070c2:	d136      	bne.n	8007132 <HAL_ADCEx_Calibration_Start+0xa2>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80070c4:	687b      	ldr	r3, [r7, #4]
 80070c6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80070c8:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 80070cc:	f023 0302 	bic.w	r3, r3, #2
 80070d0:	f043 0202 	orr.w	r2, r3, #2
 80070d4:	687b      	ldr	r3, [r7, #4]
 80070d6:	65da      	str	r2, [r3, #92]	@ 0x5c
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Start ADC calibration in mode single-ended or differential */
    LL_ADC_StartCalibration(hadc->Instance, SingleDiff);
 80070d8:	687b      	ldr	r3, [r7, #4]
 80070da:	681b      	ldr	r3, [r3, #0]
 80070dc:	6839      	ldr	r1, [r7, #0]
 80070de:	4618      	mov	r0, r3
 80070e0:	f7ff ffa9 	bl	8007036 <LL_ADC_StartCalibration>

    /* Wait for calibration completion */
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 80070e4:	e014      	b.n	8007110 <HAL_ADCEx_Calibration_Start+0x80>
    {
      wait_loop_index++;
 80070e6:	68bb      	ldr	r3, [r7, #8]
 80070e8:	3301      	adds	r3, #1
 80070ea:	60bb      	str	r3, [r7, #8]
      if (wait_loop_index >= ADC_CALIBRATION_TIMEOUT)
 80070ec:	68bb      	ldr	r3, [r7, #8]
 80070ee:	4a18      	ldr	r2, [pc, #96]	@ (8007150 <HAL_ADCEx_Calibration_Start+0xc0>)
 80070f0:	4293      	cmp	r3, r2
 80070f2:	d90d      	bls.n	8007110 <HAL_ADCEx_Calibration_Start+0x80>
      {
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 80070f4:	687b      	ldr	r3, [r7, #4]
 80070f6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80070f8:	f023 0312 	bic.w	r3, r3, #18
 80070fc:	f043 0210 	orr.w	r2, r3, #16
 8007100:	687b      	ldr	r3, [r7, #4]
 8007102:	65da      	str	r2, [r3, #92]	@ 0x5c
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_INTERNAL);

        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8007104:	687b      	ldr	r3, [r7, #4]
 8007106:	2200      	movs	r2, #0
 8007108:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

        return HAL_ERROR;
 800710c:	2301      	movs	r3, #1
 800710e:	e01b      	b.n	8007148 <HAL_ADCEx_Calibration_Start+0xb8>
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 8007110:	687b      	ldr	r3, [r7, #4]
 8007112:	681b      	ldr	r3, [r3, #0]
 8007114:	4618      	mov	r0, r3
 8007116:	f7ff ffa7 	bl	8007068 <LL_ADC_IsCalibrationOnGoing>
 800711a:	4603      	mov	r3, r0
 800711c:	2b00      	cmp	r3, #0
 800711e:	d1e2      	bne.n	80070e6 <HAL_ADCEx_Calibration_Start+0x56>
      }
    }

    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8007120:	687b      	ldr	r3, [r7, #4]
 8007122:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007124:	f023 0303 	bic.w	r3, r3, #3
 8007128:	f043 0201 	orr.w	r2, r3, #1
 800712c:	687b      	ldr	r3, [r7, #4]
 800712e:	65da      	str	r2, [r3, #92]	@ 0x5c
 8007130:	e005      	b.n	800713e <HAL_ADCEx_Calibration_Start+0xae>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8007132:	687b      	ldr	r3, [r7, #4]
 8007134:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007136:	f043 0210 	orr.w	r2, r3, #16
 800713a:	687b      	ldr	r3, [r7, #4]
 800713c:	65da      	str	r2, [r3, #92]	@ 0x5c
    /* Note: No need to update variable "tmp_hal_status" here: already set    */
    /*       to state "HAL_ERROR" by function disabling the ADC.              */
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800713e:	687b      	ldr	r3, [r7, #4]
 8007140:	2200      	movs	r2, #0
 8007142:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Return function status */
  return tmp_hal_status;
 8007146:	7bfb      	ldrb	r3, [r7, #15]
}
 8007148:	4618      	mov	r0, r3
 800714a:	3710      	adds	r7, #16
 800714c:	46bd      	mov	sp, r7
 800714e:	bd80      	pop	{r7, pc}
 8007150:	0004de01 	.word	0x0004de01

08007154 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @brief  Injected conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8007154:	b480      	push	{r7}
 8007156:	b083      	sub	sp, #12
 8007158:	af00      	add	r7, sp, #0
 800715a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedConvCpltCallback must be implemented in the user file.
  */
}
 800715c:	bf00      	nop
 800715e:	370c      	adds	r7, #12
 8007160:	46bd      	mov	sp, r7
 8007162:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007166:	4770      	bx	lr

08007168 <HAL_ADCEx_InjectedQueueOverflowCallback>:
            contexts).
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedQueueOverflowCallback(ADC_HandleTypeDef *hadc)
{
 8007168:	b480      	push	{r7}
 800716a:	b083      	sub	sp, #12
 800716c:	af00      	add	r7, sp, #0
 800716e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedQueueOverflowCallback must be implemented in the user file.
  */
}
 8007170:	bf00      	nop
 8007172:	370c      	adds	r7, #12
 8007174:	46bd      	mov	sp, r7
 8007176:	f85d 7b04 	ldr.w	r7, [sp], #4
 800717a:	4770      	bx	lr

0800717c <HAL_ADCEx_LevelOutOfWindow2Callback>:
  * @brief  Analog watchdog 2 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow2Callback(ADC_HandleTypeDef *hadc)
{
 800717c:	b480      	push	{r7}
 800717e:	b083      	sub	sp, #12
 8007180:	af00      	add	r7, sp, #0
 8007182:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow2Callback must be implemented in the user file.
  */
}
 8007184:	bf00      	nop
 8007186:	370c      	adds	r7, #12
 8007188:	46bd      	mov	sp, r7
 800718a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800718e:	4770      	bx	lr

08007190 <HAL_ADCEx_LevelOutOfWindow3Callback>:
  * @brief  Analog watchdog 3 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow3Callback(ADC_HandleTypeDef *hadc)
{
 8007190:	b480      	push	{r7}
 8007192:	b083      	sub	sp, #12
 8007194:	af00      	add	r7, sp, #0
 8007196:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow3Callback must be implemented in the user file.
  */
}
 8007198:	bf00      	nop
 800719a:	370c      	adds	r7, #12
 800719c:	46bd      	mov	sp, r7
 800719e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071a2:	4770      	bx	lr

080071a4 <HAL_ADCEx_EndOfSamplingCallback>:
  * @brief  End Of Sampling callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_EndOfSamplingCallback(ADC_HandleTypeDef *hadc)
{
 80071a4:	b480      	push	{r7}
 80071a6:	b083      	sub	sp, #12
 80071a8:	af00      	add	r7, sp, #0
 80071aa:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_EndOfSamplingCallback must be implemented in the user file.
  */
}
 80071ac:	bf00      	nop
 80071ae:	370c      	adds	r7, #12
 80071b0:	46bd      	mov	sp, r7
 80071b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071b6:	4770      	bx	lr

080071b8 <HAL_CORDIC_Init>:
  * @brief  Initialize the CORDIC peripheral and the associated handle.
  * @param  hcordic pointer to a CORDIC_HandleTypeDef structure.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CORDIC_Init(CORDIC_HandleTypeDef *hcordic)
{
 80071b8:	b580      	push	{r7, lr}
 80071ba:	b082      	sub	sp, #8
 80071bc:	af00      	add	r7, sp, #0
 80071be:	6078      	str	r0, [r7, #4]
  /* Check the CORDIC handle allocation */
  if (hcordic == NULL)
 80071c0:	687b      	ldr	r3, [r7, #4]
 80071c2:	2b00      	cmp	r3, #0
 80071c4:	d101      	bne.n	80071ca <HAL_CORDIC_Init+0x12>
  {
    /* Return error status */
    return HAL_ERROR;
 80071c6:	2301      	movs	r3, #1
 80071c8:	e023      	b.n	8007212 <HAL_CORDIC_Init+0x5a>

    /* Initialize the low level hardware */
    hcordic->MspInitCallback(hcordic);
  }
#else
  if (hcordic->State == HAL_CORDIC_STATE_RESET)
 80071ca:	687b      	ldr	r3, [r7, #4]
 80071cc:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 80071d0:	b2db      	uxtb	r3, r3
 80071d2:	2b00      	cmp	r3, #0
 80071d4:	d106      	bne.n	80071e4 <HAL_CORDIC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hcordic->Lock = HAL_UNLOCKED;
 80071d6:	687b      	ldr	r3, [r7, #4]
 80071d8:	2200      	movs	r2, #0
 80071da:	f883 2020 	strb.w	r2, [r3, #32]

    /* Initialize the low level hardware */
    HAL_CORDIC_MspInit(hcordic);
 80071de:	6878      	ldr	r0, [r7, #4]
 80071e0:	f7fb fa84 	bl	80026ec <HAL_CORDIC_MspInit>
  }
#endif /* (USE_HAL_CORDIC_REGISTER_CALLBACKS) */

  /* Set CORDIC error code to none */
  hcordic->ErrorCode = HAL_CORDIC_ERROR_NONE;
 80071e4:	687b      	ldr	r3, [r7, #4]
 80071e6:	2200      	movs	r2, #0
 80071e8:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Reset pInBuff and pOutBuff */
  hcordic->pInBuff = NULL;
 80071ea:	687b      	ldr	r3, [r7, #4]
 80071ec:	2200      	movs	r2, #0
 80071ee:	605a      	str	r2, [r3, #4]
  hcordic->pOutBuff = NULL;
 80071f0:	687b      	ldr	r3, [r7, #4]
 80071f2:	2200      	movs	r2, #0
 80071f4:	609a      	str	r2, [r3, #8]

  /* Reset NbCalcToOrder and NbCalcToGet */
  hcordic->NbCalcToOrder = 0U;
 80071f6:	687b      	ldr	r3, [r7, #4]
 80071f8:	2200      	movs	r2, #0
 80071fa:	60da      	str	r2, [r3, #12]
  hcordic->NbCalcToGet = 0U;
 80071fc:	687b      	ldr	r3, [r7, #4]
 80071fe:	2200      	movs	r2, #0
 8007200:	611a      	str	r2, [r3, #16]

  /* Reset DMADirection */
  hcordic->DMADirection = CORDIC_DMA_DIR_NONE;
 8007202:	687b      	ldr	r3, [r7, #4]
 8007204:	2200      	movs	r2, #0
 8007206:	615a      	str	r2, [r3, #20]

  /* Change CORDIC peripheral state */
  hcordic->State = HAL_CORDIC_STATE_READY;
 8007208:	687b      	ldr	r3, [r7, #4]
 800720a:	2201      	movs	r2, #1
 800720c:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Return function status */
  return HAL_OK;
 8007210:	2300      	movs	r3, #0
}
 8007212:	4618      	mov	r0, r3
 8007214:	3708      	adds	r7, #8
 8007216:	46bd      	mov	sp, r7
 8007218:	bd80      	pop	{r7, pc}
	...

0800721c <HAL_CORDIC_Configure>:
  * @param  sConfig pointer to a CORDIC_ConfigTypeDef structure that
  *         contains the CORDIC configuration information.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CORDIC_Configure(CORDIC_HandleTypeDef *hcordic, const CORDIC_ConfigTypeDef *sConfig)
{
 800721c:	b480      	push	{r7}
 800721e:	b085      	sub	sp, #20
 8007220:	af00      	add	r7, sp, #0
 8007222:	6078      	str	r0, [r7, #4]
 8007224:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8007226:	2300      	movs	r3, #0
 8007228:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_CORDIC_NBREAD(sConfig->NbRead));
  assert_param(IS_CORDIC_INSIZE(sConfig->InSize));
  assert_param(IS_CORDIC_OUTSIZE(sConfig->OutSize));

  /* Check handle state is ready */
  if (hcordic->State == HAL_CORDIC_STATE_READY)
 800722a:	687b      	ldr	r3, [r7, #4]
 800722c:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8007230:	b2db      	uxtb	r3, r3
 8007232:	2b01      	cmp	r3, #1
 8007234:	d11d      	bne.n	8007272 <HAL_CORDIC_Configure+0x56>
  {
    /* Apply all configuration parameters in CORDIC control register */
    MODIFY_REG(hcordic->Instance->CSR,                                                         \
 8007236:	687b      	ldr	r3, [r7, #4]
 8007238:	681b      	ldr	r3, [r3, #0]
 800723a:	681a      	ldr	r2, [r3, #0]
 800723c:	4b14      	ldr	r3, [pc, #80]	@ (8007290 <HAL_CORDIC_Configure+0x74>)
 800723e:	4013      	ands	r3, r2
 8007240:	683a      	ldr	r2, [r7, #0]
 8007242:	6811      	ldr	r1, [r2, #0]
 8007244:	683a      	ldr	r2, [r7, #0]
 8007246:	6992      	ldr	r2, [r2, #24]
 8007248:	4311      	orrs	r1, r2
 800724a:	683a      	ldr	r2, [r7, #0]
 800724c:	6852      	ldr	r2, [r2, #4]
 800724e:	4311      	orrs	r1, r2
 8007250:	683a      	ldr	r2, [r7, #0]
 8007252:	6912      	ldr	r2, [r2, #16]
 8007254:	4311      	orrs	r1, r2
 8007256:	683a      	ldr	r2, [r7, #0]
 8007258:	6952      	ldr	r2, [r2, #20]
 800725a:	4311      	orrs	r1, r2
 800725c:	683a      	ldr	r2, [r7, #0]
 800725e:	6892      	ldr	r2, [r2, #8]
 8007260:	4311      	orrs	r1, r2
 8007262:	683a      	ldr	r2, [r7, #0]
 8007264:	68d2      	ldr	r2, [r2, #12]
 8007266:	4311      	orrs	r1, r2
 8007268:	687a      	ldr	r2, [r7, #4]
 800726a:	6812      	ldr	r2, [r2, #0]
 800726c:	430b      	orrs	r3, r1
 800726e:	6013      	str	r3, [r2, #0]
 8007270:	e007      	b.n	8007282 <HAL_CORDIC_Configure+0x66>
                sConfig->NbWrite | sConfig->NbRead | sConfig->InSize | sConfig->OutSize));
  }
  else
  {
    /* Set CORDIC error code */
    hcordic->ErrorCode |= HAL_CORDIC_ERROR_NOT_READY;
 8007272:	687b      	ldr	r3, [r7, #4]
 8007274:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007276:	f043 0202 	orr.w	r2, r3, #2
 800727a:	687b      	ldr	r3, [r7, #4]
 800727c:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Return error status */
    status = HAL_ERROR;
 800727e:	2301      	movs	r3, #1
 8007280:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8007282:	7bfb      	ldrb	r3, [r7, #15]
}
 8007284:	4618      	mov	r0, r3
 8007286:	3714      	adds	r7, #20
 8007288:	46bd      	mov	sp, r7
 800728a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800728e:	4770      	bx	lr
 8007290:	ff87f800 	.word	0xff87f800

08007294 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8007294:	b480      	push	{r7}
 8007296:	b085      	sub	sp, #20
 8007298:	af00      	add	r7, sp, #0
 800729a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800729c:	687b      	ldr	r3, [r7, #4]
 800729e:	f003 0307 	and.w	r3, r3, #7
 80072a2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80072a4:	4b0c      	ldr	r3, [pc, #48]	@ (80072d8 <__NVIC_SetPriorityGrouping+0x44>)
 80072a6:	68db      	ldr	r3, [r3, #12]
 80072a8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80072aa:	68ba      	ldr	r2, [r7, #8]
 80072ac:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80072b0:	4013      	ands	r3, r2
 80072b2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80072b4:	68fb      	ldr	r3, [r7, #12]
 80072b6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80072b8:	68bb      	ldr	r3, [r7, #8]
 80072ba:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80072bc:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80072c0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80072c4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80072c6:	4a04      	ldr	r2, [pc, #16]	@ (80072d8 <__NVIC_SetPriorityGrouping+0x44>)
 80072c8:	68bb      	ldr	r3, [r7, #8]
 80072ca:	60d3      	str	r3, [r2, #12]
}
 80072cc:	bf00      	nop
 80072ce:	3714      	adds	r7, #20
 80072d0:	46bd      	mov	sp, r7
 80072d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072d6:	4770      	bx	lr
 80072d8:	e000ed00 	.word	0xe000ed00

080072dc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80072dc:	b480      	push	{r7}
 80072de:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80072e0:	4b04      	ldr	r3, [pc, #16]	@ (80072f4 <__NVIC_GetPriorityGrouping+0x18>)
 80072e2:	68db      	ldr	r3, [r3, #12]
 80072e4:	0a1b      	lsrs	r3, r3, #8
 80072e6:	f003 0307 	and.w	r3, r3, #7
}
 80072ea:	4618      	mov	r0, r3
 80072ec:	46bd      	mov	sp, r7
 80072ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072f2:	4770      	bx	lr
 80072f4:	e000ed00 	.word	0xe000ed00

080072f8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80072f8:	b480      	push	{r7}
 80072fa:	b083      	sub	sp, #12
 80072fc:	af00      	add	r7, sp, #0
 80072fe:	4603      	mov	r3, r0
 8007300:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8007302:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007306:	2b00      	cmp	r3, #0
 8007308:	db0b      	blt.n	8007322 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800730a:	79fb      	ldrb	r3, [r7, #7]
 800730c:	f003 021f 	and.w	r2, r3, #31
 8007310:	4907      	ldr	r1, [pc, #28]	@ (8007330 <__NVIC_EnableIRQ+0x38>)
 8007312:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007316:	095b      	lsrs	r3, r3, #5
 8007318:	2001      	movs	r0, #1
 800731a:	fa00 f202 	lsl.w	r2, r0, r2
 800731e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8007322:	bf00      	nop
 8007324:	370c      	adds	r7, #12
 8007326:	46bd      	mov	sp, r7
 8007328:	f85d 7b04 	ldr.w	r7, [sp], #4
 800732c:	4770      	bx	lr
 800732e:	bf00      	nop
 8007330:	e000e100 	.word	0xe000e100

08007334 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8007334:	b480      	push	{r7}
 8007336:	b083      	sub	sp, #12
 8007338:	af00      	add	r7, sp, #0
 800733a:	4603      	mov	r3, r0
 800733c:	6039      	str	r1, [r7, #0]
 800733e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8007340:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007344:	2b00      	cmp	r3, #0
 8007346:	db0a      	blt.n	800735e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8007348:	683b      	ldr	r3, [r7, #0]
 800734a:	b2da      	uxtb	r2, r3
 800734c:	490c      	ldr	r1, [pc, #48]	@ (8007380 <__NVIC_SetPriority+0x4c>)
 800734e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007352:	0112      	lsls	r2, r2, #4
 8007354:	b2d2      	uxtb	r2, r2
 8007356:	440b      	add	r3, r1
 8007358:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800735c:	e00a      	b.n	8007374 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800735e:	683b      	ldr	r3, [r7, #0]
 8007360:	b2da      	uxtb	r2, r3
 8007362:	4908      	ldr	r1, [pc, #32]	@ (8007384 <__NVIC_SetPriority+0x50>)
 8007364:	79fb      	ldrb	r3, [r7, #7]
 8007366:	f003 030f 	and.w	r3, r3, #15
 800736a:	3b04      	subs	r3, #4
 800736c:	0112      	lsls	r2, r2, #4
 800736e:	b2d2      	uxtb	r2, r2
 8007370:	440b      	add	r3, r1
 8007372:	761a      	strb	r2, [r3, #24]
}
 8007374:	bf00      	nop
 8007376:	370c      	adds	r7, #12
 8007378:	46bd      	mov	sp, r7
 800737a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800737e:	4770      	bx	lr
 8007380:	e000e100 	.word	0xe000e100
 8007384:	e000ed00 	.word	0xe000ed00

08007388 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8007388:	b480      	push	{r7}
 800738a:	b089      	sub	sp, #36	@ 0x24
 800738c:	af00      	add	r7, sp, #0
 800738e:	60f8      	str	r0, [r7, #12]
 8007390:	60b9      	str	r1, [r7, #8]
 8007392:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8007394:	68fb      	ldr	r3, [r7, #12]
 8007396:	f003 0307 	and.w	r3, r3, #7
 800739a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800739c:	69fb      	ldr	r3, [r7, #28]
 800739e:	f1c3 0307 	rsb	r3, r3, #7
 80073a2:	2b04      	cmp	r3, #4
 80073a4:	bf28      	it	cs
 80073a6:	2304      	movcs	r3, #4
 80073a8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80073aa:	69fb      	ldr	r3, [r7, #28]
 80073ac:	3304      	adds	r3, #4
 80073ae:	2b06      	cmp	r3, #6
 80073b0:	d902      	bls.n	80073b8 <NVIC_EncodePriority+0x30>
 80073b2:	69fb      	ldr	r3, [r7, #28]
 80073b4:	3b03      	subs	r3, #3
 80073b6:	e000      	b.n	80073ba <NVIC_EncodePriority+0x32>
 80073b8:	2300      	movs	r3, #0
 80073ba:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80073bc:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80073c0:	69bb      	ldr	r3, [r7, #24]
 80073c2:	fa02 f303 	lsl.w	r3, r2, r3
 80073c6:	43da      	mvns	r2, r3
 80073c8:	68bb      	ldr	r3, [r7, #8]
 80073ca:	401a      	ands	r2, r3
 80073cc:	697b      	ldr	r3, [r7, #20]
 80073ce:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80073d0:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 80073d4:	697b      	ldr	r3, [r7, #20]
 80073d6:	fa01 f303 	lsl.w	r3, r1, r3
 80073da:	43d9      	mvns	r1, r3
 80073dc:	687b      	ldr	r3, [r7, #4]
 80073de:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80073e0:	4313      	orrs	r3, r2
         );
}
 80073e2:	4618      	mov	r0, r3
 80073e4:	3724      	adds	r7, #36	@ 0x24
 80073e6:	46bd      	mov	sp, r7
 80073e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073ec:	4770      	bx	lr
	...

080073f0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80073f0:	b580      	push	{r7, lr}
 80073f2:	b082      	sub	sp, #8
 80073f4:	af00      	add	r7, sp, #0
 80073f6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80073f8:	687b      	ldr	r3, [r7, #4]
 80073fa:	3b01      	subs	r3, #1
 80073fc:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8007400:	d301      	bcc.n	8007406 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8007402:	2301      	movs	r3, #1
 8007404:	e00f      	b.n	8007426 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8007406:	4a0a      	ldr	r2, [pc, #40]	@ (8007430 <SysTick_Config+0x40>)
 8007408:	687b      	ldr	r3, [r7, #4]
 800740a:	3b01      	subs	r3, #1
 800740c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800740e:	210f      	movs	r1, #15
 8007410:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8007414:	f7ff ff8e 	bl	8007334 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8007418:	4b05      	ldr	r3, [pc, #20]	@ (8007430 <SysTick_Config+0x40>)
 800741a:	2200      	movs	r2, #0
 800741c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800741e:	4b04      	ldr	r3, [pc, #16]	@ (8007430 <SysTick_Config+0x40>)
 8007420:	2207      	movs	r2, #7
 8007422:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8007424:	2300      	movs	r3, #0
}
 8007426:	4618      	mov	r0, r3
 8007428:	3708      	adds	r7, #8
 800742a:	46bd      	mov	sp, r7
 800742c:	bd80      	pop	{r7, pc}
 800742e:	bf00      	nop
 8007430:	e000e010 	.word	0xe000e010

08007434 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8007434:	b580      	push	{r7, lr}
 8007436:	b082      	sub	sp, #8
 8007438:	af00      	add	r7, sp, #0
 800743a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800743c:	6878      	ldr	r0, [r7, #4]
 800743e:	f7ff ff29 	bl	8007294 <__NVIC_SetPriorityGrouping>
}
 8007442:	bf00      	nop
 8007444:	3708      	adds	r7, #8
 8007446:	46bd      	mov	sp, r7
 8007448:	bd80      	pop	{r7, pc}

0800744a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800744a:	b580      	push	{r7, lr}
 800744c:	b086      	sub	sp, #24
 800744e:	af00      	add	r7, sp, #0
 8007450:	4603      	mov	r3, r0
 8007452:	60b9      	str	r1, [r7, #8]
 8007454:	607a      	str	r2, [r7, #4]
 8007456:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8007458:	f7ff ff40 	bl	80072dc <__NVIC_GetPriorityGrouping>
 800745c:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800745e:	687a      	ldr	r2, [r7, #4]
 8007460:	68b9      	ldr	r1, [r7, #8]
 8007462:	6978      	ldr	r0, [r7, #20]
 8007464:	f7ff ff90 	bl	8007388 <NVIC_EncodePriority>
 8007468:	4602      	mov	r2, r0
 800746a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800746e:	4611      	mov	r1, r2
 8007470:	4618      	mov	r0, r3
 8007472:	f7ff ff5f 	bl	8007334 <__NVIC_SetPriority>
}
 8007476:	bf00      	nop
 8007478:	3718      	adds	r7, #24
 800747a:	46bd      	mov	sp, r7
 800747c:	bd80      	pop	{r7, pc}

0800747e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800747e:	b580      	push	{r7, lr}
 8007480:	b082      	sub	sp, #8
 8007482:	af00      	add	r7, sp, #0
 8007484:	4603      	mov	r3, r0
 8007486:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8007488:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800748c:	4618      	mov	r0, r3
 800748e:	f7ff ff33 	bl	80072f8 <__NVIC_EnableIRQ>
}
 8007492:	bf00      	nop
 8007494:	3708      	adds	r7, #8
 8007496:	46bd      	mov	sp, r7
 8007498:	bd80      	pop	{r7, pc}

0800749a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800749a:	b580      	push	{r7, lr}
 800749c:	b082      	sub	sp, #8
 800749e:	af00      	add	r7, sp, #0
 80074a0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80074a2:	6878      	ldr	r0, [r7, #4]
 80074a4:	f7ff ffa4 	bl	80073f0 <SysTick_Config>
 80074a8:	4603      	mov	r3, r0
}
 80074aa:	4618      	mov	r0, r3
 80074ac:	3708      	adds	r7, #8
 80074ae:	46bd      	mov	sp, r7
 80074b0:	bd80      	pop	{r7, pc}
	...

080074b4 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80074b4:	b580      	push	{r7, lr}
 80074b6:	b084      	sub	sp, #16
 80074b8:	af00      	add	r7, sp, #0
 80074ba:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 80074bc:	687b      	ldr	r3, [r7, #4]
 80074be:	2b00      	cmp	r3, #0
 80074c0:	d101      	bne.n	80074c6 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 80074c2:	2301      	movs	r3, #1
 80074c4:	e08d      	b.n	80075e2 <HAL_DMA_Init+0x12e>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 80074c6:	687b      	ldr	r3, [r7, #4]
 80074c8:	681b      	ldr	r3, [r3, #0]
 80074ca:	461a      	mov	r2, r3
 80074cc:	4b47      	ldr	r3, [pc, #284]	@ (80075ec <HAL_DMA_Init+0x138>)
 80074ce:	429a      	cmp	r2, r3
 80074d0:	d80f      	bhi.n	80074f2 <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 80074d2:	687b      	ldr	r3, [r7, #4]
 80074d4:	681b      	ldr	r3, [r3, #0]
 80074d6:	461a      	mov	r2, r3
 80074d8:	4b45      	ldr	r3, [pc, #276]	@ (80075f0 <HAL_DMA_Init+0x13c>)
 80074da:	4413      	add	r3, r2
 80074dc:	4a45      	ldr	r2, [pc, #276]	@ (80075f4 <HAL_DMA_Init+0x140>)
 80074de:	fba2 2303 	umull	r2, r3, r2, r3
 80074e2:	091b      	lsrs	r3, r3, #4
 80074e4:	009a      	lsls	r2, r3, #2
 80074e6:	687b      	ldr	r3, [r7, #4]
 80074e8:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA1;
 80074ea:	687b      	ldr	r3, [r7, #4]
 80074ec:	4a42      	ldr	r2, [pc, #264]	@ (80075f8 <HAL_DMA_Init+0x144>)
 80074ee:	641a      	str	r2, [r3, #64]	@ 0x40
 80074f0:	e00e      	b.n	8007510 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 80074f2:	687b      	ldr	r3, [r7, #4]
 80074f4:	681b      	ldr	r3, [r3, #0]
 80074f6:	461a      	mov	r2, r3
 80074f8:	4b40      	ldr	r3, [pc, #256]	@ (80075fc <HAL_DMA_Init+0x148>)
 80074fa:	4413      	add	r3, r2
 80074fc:	4a3d      	ldr	r2, [pc, #244]	@ (80075f4 <HAL_DMA_Init+0x140>)
 80074fe:	fba2 2303 	umull	r2, r3, r2, r3
 8007502:	091b      	lsrs	r3, r3, #4
 8007504:	009a      	lsls	r2, r3, #2
 8007506:	687b      	ldr	r3, [r7, #4]
 8007508:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA2;
 800750a:	687b      	ldr	r3, [r7, #4]
 800750c:	4a3c      	ldr	r2, [pc, #240]	@ (8007600 <HAL_DMA_Init+0x14c>)
 800750e:	641a      	str	r2, [r3, #64]	@ 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8007510:	687b      	ldr	r3, [r7, #4]
 8007512:	2202      	movs	r2, #2
 8007514:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8007518:	687b      	ldr	r3, [r7, #4]
 800751a:	681b      	ldr	r3, [r3, #0]
 800751c:	681b      	ldr	r3, [r3, #0]
 800751e:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8007520:	68fb      	ldr	r3, [r7, #12]
 8007522:	f423 43ff 	bic.w	r3, r3, #32640	@ 0x7f80
 8007526:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800752a:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 800752c:	687b      	ldr	r3, [r7, #4]
 800752e:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8007530:	687b      	ldr	r3, [r7, #4]
 8007532:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8007534:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8007536:	687b      	ldr	r3, [r7, #4]
 8007538:	691b      	ldr	r3, [r3, #16]
 800753a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800753c:	687b      	ldr	r3, [r7, #4]
 800753e:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8007540:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8007542:	687b      	ldr	r3, [r7, #4]
 8007544:	699b      	ldr	r3, [r3, #24]
 8007546:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8007548:	687b      	ldr	r3, [r7, #4]
 800754a:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800754c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800754e:	687b      	ldr	r3, [r7, #4]
 8007550:	6a1b      	ldr	r3, [r3, #32]
 8007552:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8007554:	68fa      	ldr	r2, [r7, #12]
 8007556:	4313      	orrs	r3, r2
 8007558:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 800755a:	687b      	ldr	r3, [r7, #4]
 800755c:	681b      	ldr	r3, [r3, #0]
 800755e:	68fa      	ldr	r2, [r7, #12]
 8007560:	601a      	str	r2, [r3, #0]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8007562:	6878      	ldr	r0, [r7, #4]
 8007564:	f000 fa76 	bl	8007a54 <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8007568:	687b      	ldr	r3, [r7, #4]
 800756a:	689b      	ldr	r3, [r3, #8]
 800756c:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8007570:	d102      	bne.n	8007578 <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8007572:	687b      	ldr	r3, [r7, #4]
 8007574:	2200      	movs	r2, #0
 8007576:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8007578:	687b      	ldr	r3, [r7, #4]
 800757a:	685a      	ldr	r2, [r3, #4]
 800757c:	687b      	ldr	r3, [r7, #4]
 800757e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007580:	b2d2      	uxtb	r2, r2
 8007582:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8007584:	687b      	ldr	r3, [r7, #4]
 8007586:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007588:	687a      	ldr	r2, [r7, #4]
 800758a:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 800758c:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 800758e:	687b      	ldr	r3, [r7, #4]
 8007590:	685b      	ldr	r3, [r3, #4]
 8007592:	2b00      	cmp	r3, #0
 8007594:	d010      	beq.n	80075b8 <HAL_DMA_Init+0x104>
 8007596:	687b      	ldr	r3, [r7, #4]
 8007598:	685b      	ldr	r3, [r3, #4]
 800759a:	2b04      	cmp	r3, #4
 800759c:	d80c      	bhi.n	80075b8 <HAL_DMA_Init+0x104>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 800759e:	6878      	ldr	r0, [r7, #4]
 80075a0:	f000 fa96 	bl	8007ad0 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 80075a4:	687b      	ldr	r3, [r7, #4]
 80075a6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80075a8:	2200      	movs	r2, #0
 80075aa:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80075ac:	687b      	ldr	r3, [r7, #4]
 80075ae:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80075b0:	687a      	ldr	r2, [r7, #4]
 80075b2:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 80075b4:	605a      	str	r2, [r3, #4]
 80075b6:	e008      	b.n	80075ca <HAL_DMA_Init+0x116>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 80075b8:	687b      	ldr	r3, [r7, #4]
 80075ba:	2200      	movs	r2, #0
 80075bc:	655a      	str	r2, [r3, #84]	@ 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 80075be:	687b      	ldr	r3, [r7, #4]
 80075c0:	2200      	movs	r2, #0
 80075c2:	659a      	str	r2, [r3, #88]	@ 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 80075c4:	687b      	ldr	r3, [r7, #4]
 80075c6:	2200      	movs	r2, #0
 80075c8:	65da      	str	r2, [r3, #92]	@ 0x5c
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80075ca:	687b      	ldr	r3, [r7, #4]
 80075cc:	2200      	movs	r2, #0
 80075ce:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 80075d0:	687b      	ldr	r3, [r7, #4]
 80075d2:	2201      	movs	r2, #1
 80075d4:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 80075d8:	687b      	ldr	r3, [r7, #4]
 80075da:	2200      	movs	r2, #0
 80075dc:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 80075e0:	2300      	movs	r3, #0
}
 80075e2:	4618      	mov	r0, r3
 80075e4:	3710      	adds	r7, #16
 80075e6:	46bd      	mov	sp, r7
 80075e8:	bd80      	pop	{r7, pc}
 80075ea:	bf00      	nop
 80075ec:	40020407 	.word	0x40020407
 80075f0:	bffdfff8 	.word	0xbffdfff8
 80075f4:	cccccccd 	.word	0xcccccccd
 80075f8:	40020000 	.word	0x40020000
 80075fc:	bffdfbf8 	.word	0xbffdfbf8
 8007600:	40020400 	.word	0x40020400

08007604 <HAL_DMA_Start_IT>:
  * @param  DataLength The length of data to be transferred from source to destination (up to 256Kbytes-1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress,
                                   uint32_t DataLength)
{
 8007604:	b580      	push	{r7, lr}
 8007606:	b086      	sub	sp, #24
 8007608:	af00      	add	r7, sp, #0
 800760a:	60f8      	str	r0, [r7, #12]
 800760c:	60b9      	str	r1, [r7, #8]
 800760e:	607a      	str	r2, [r7, #4]
 8007610:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8007612:	2300      	movs	r3, #0
 8007614:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8007616:	68fb      	ldr	r3, [r7, #12]
 8007618:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 800761c:	2b01      	cmp	r3, #1
 800761e:	d101      	bne.n	8007624 <HAL_DMA_Start_IT+0x20>
 8007620:	2302      	movs	r3, #2
 8007622:	e066      	b.n	80076f2 <HAL_DMA_Start_IT+0xee>
 8007624:	68fb      	ldr	r3, [r7, #12]
 8007626:	2201      	movs	r2, #1
 8007628:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 800762c:	68fb      	ldr	r3, [r7, #12]
 800762e:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8007632:	b2db      	uxtb	r3, r3
 8007634:	2b01      	cmp	r3, #1
 8007636:	d155      	bne.n	80076e4 <HAL_DMA_Start_IT+0xe0>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8007638:	68fb      	ldr	r3, [r7, #12]
 800763a:	2202      	movs	r2, #2
 800763c:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8007640:	68fb      	ldr	r3, [r7, #12]
 8007642:	2200      	movs	r2, #0
 8007644:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8007646:	68fb      	ldr	r3, [r7, #12]
 8007648:	681b      	ldr	r3, [r3, #0]
 800764a:	681a      	ldr	r2, [r3, #0]
 800764c:	68fb      	ldr	r3, [r7, #12]
 800764e:	681b      	ldr	r3, [r3, #0]
 8007650:	f022 0201 	bic.w	r2, r2, #1
 8007654:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8007656:	683b      	ldr	r3, [r7, #0]
 8007658:	687a      	ldr	r2, [r7, #4]
 800765a:	68b9      	ldr	r1, [r7, #8]
 800765c:	68f8      	ldr	r0, [r7, #12]
 800765e:	f000 f9bb 	bl	80079d8 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 8007662:	68fb      	ldr	r3, [r7, #12]
 8007664:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007666:	2b00      	cmp	r3, #0
 8007668:	d008      	beq.n	800767c <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800766a:	68fb      	ldr	r3, [r7, #12]
 800766c:	681b      	ldr	r3, [r3, #0]
 800766e:	681a      	ldr	r2, [r3, #0]
 8007670:	68fb      	ldr	r3, [r7, #12]
 8007672:	681b      	ldr	r3, [r3, #0]
 8007674:	f042 020e 	orr.w	r2, r2, #14
 8007678:	601a      	str	r2, [r3, #0]
 800767a:	e00f      	b.n	800769c <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800767c:	68fb      	ldr	r3, [r7, #12]
 800767e:	681b      	ldr	r3, [r3, #0]
 8007680:	681a      	ldr	r2, [r3, #0]
 8007682:	68fb      	ldr	r3, [r7, #12]
 8007684:	681b      	ldr	r3, [r3, #0]
 8007686:	f022 0204 	bic.w	r2, r2, #4
 800768a:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 800768c:	68fb      	ldr	r3, [r7, #12]
 800768e:	681b      	ldr	r3, [r3, #0]
 8007690:	681a      	ldr	r2, [r3, #0]
 8007692:	68fb      	ldr	r3, [r7, #12]
 8007694:	681b      	ldr	r3, [r3, #0]
 8007696:	f042 020a 	orr.w	r2, r2, #10
 800769a:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 800769c:	68fb      	ldr	r3, [r7, #12]
 800769e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80076a0:	681b      	ldr	r3, [r3, #0]
 80076a2:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80076a6:	2b00      	cmp	r3, #0
 80076a8:	d007      	beq.n	80076ba <HAL_DMA_Start_IT+0xb6>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 80076aa:	68fb      	ldr	r3, [r7, #12]
 80076ac:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80076ae:	681a      	ldr	r2, [r3, #0]
 80076b0:	68fb      	ldr	r3, [r7, #12]
 80076b2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80076b4:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80076b8:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 80076ba:	68fb      	ldr	r3, [r7, #12]
 80076bc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80076be:	2b00      	cmp	r3, #0
 80076c0:	d007      	beq.n	80076d2 <HAL_DMA_Start_IT+0xce>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 80076c2:	68fb      	ldr	r3, [r7, #12]
 80076c4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80076c6:	681a      	ldr	r2, [r3, #0]
 80076c8:	68fb      	ldr	r3, [r7, #12]
 80076ca:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80076cc:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80076d0:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80076d2:	68fb      	ldr	r3, [r7, #12]
 80076d4:	681b      	ldr	r3, [r3, #0]
 80076d6:	681a      	ldr	r2, [r3, #0]
 80076d8:	68fb      	ldr	r3, [r7, #12]
 80076da:	681b      	ldr	r3, [r3, #0]
 80076dc:	f042 0201 	orr.w	r2, r2, #1
 80076e0:	601a      	str	r2, [r3, #0]
 80076e2:	e005      	b.n	80076f0 <HAL_DMA_Start_IT+0xec>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80076e4:	68fb      	ldr	r3, [r7, #12]
 80076e6:	2200      	movs	r2, #0
 80076e8:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 80076ec:	2302      	movs	r3, #2
 80076ee:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 80076f0:	7dfb      	ldrb	r3, [r7, #23]
}
 80076f2:	4618      	mov	r0, r3
 80076f4:	3718      	adds	r7, #24
 80076f6:	46bd      	mov	sp, r7
 80076f8:	bd80      	pop	{r7, pc}

080076fa <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80076fa:	b480      	push	{r7}
 80076fc:	b085      	sub	sp, #20
 80076fe:	af00      	add	r7, sp, #0
 8007700:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8007702:	2300      	movs	r3, #0
 8007704:	73fb      	strb	r3, [r7, #15]

  if(hdma->State != HAL_DMA_STATE_BUSY)
 8007706:	687b      	ldr	r3, [r7, #4]
 8007708:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 800770c:	b2db      	uxtb	r3, r3
 800770e:	2b02      	cmp	r3, #2
 8007710:	d005      	beq.n	800771e <HAL_DMA_Abort+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8007712:	687b      	ldr	r3, [r7, #4]
 8007714:	2204      	movs	r2, #4
 8007716:	63da      	str	r2, [r3, #60]	@ 0x3c

    status = HAL_ERROR;
 8007718:	2301      	movs	r3, #1
 800771a:	73fb      	strb	r3, [r7, #15]
 800771c:	e037      	b.n	800778e <HAL_DMA_Abort+0x94>
  }
  else
  {
     /* Disable DMA IT */
     __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800771e:	687b      	ldr	r3, [r7, #4]
 8007720:	681b      	ldr	r3, [r3, #0]
 8007722:	681a      	ldr	r2, [r3, #0]
 8007724:	687b      	ldr	r3, [r7, #4]
 8007726:	681b      	ldr	r3, [r3, #0]
 8007728:	f022 020e 	bic.w	r2, r2, #14
 800772c:	601a      	str	r2, [r3, #0]
     
     /* disable the DMAMUX sync overrun IT*/
     hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 800772e:	687b      	ldr	r3, [r7, #4]
 8007730:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007732:	681a      	ldr	r2, [r3, #0]
 8007734:	687b      	ldr	r3, [r7, #4]
 8007736:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007738:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800773c:	601a      	str	r2, [r3, #0]
     
     /* Disable the channel */
     __HAL_DMA_DISABLE(hdma);
 800773e:	687b      	ldr	r3, [r7, #4]
 8007740:	681b      	ldr	r3, [r3, #0]
 8007742:	681a      	ldr	r2, [r3, #0]
 8007744:	687b      	ldr	r3, [r7, #4]
 8007746:	681b      	ldr	r3, [r3, #0]
 8007748:	f022 0201 	bic.w	r2, r2, #1
 800774c:	601a      	str	r2, [r3, #0]
     
     /* Clear all flags */
     hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 800774e:	687b      	ldr	r3, [r7, #4]
 8007750:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007752:	f003 021f 	and.w	r2, r3, #31
 8007756:	687b      	ldr	r3, [r7, #4]
 8007758:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800775a:	2101      	movs	r1, #1
 800775c:	fa01 f202 	lsl.w	r2, r1, r2
 8007760:	605a      	str	r2, [r3, #4]
     
     /* Clear the DMAMUX synchro overrun flag */
     hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8007762:	687b      	ldr	r3, [r7, #4]
 8007764:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007766:	687a      	ldr	r2, [r7, #4]
 8007768:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 800776a:	605a      	str	r2, [r3, #4]
     
     if (hdma->DMAmuxRequestGen != 0U)
 800776c:	687b      	ldr	r3, [r7, #4]
 800776e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007770:	2b00      	cmp	r3, #0
 8007772:	d00c      	beq.n	800778e <HAL_DMA_Abort+0x94>
     {
       /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
       /* disable the request gen overrun IT*/
       hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8007774:	687b      	ldr	r3, [r7, #4]
 8007776:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007778:	681a      	ldr	r2, [r3, #0]
 800777a:	687b      	ldr	r3, [r7, #4]
 800777c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800777e:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8007782:	601a      	str	r2, [r3, #0]
     
       /* Clear the DMAMUX request generator overrun flag */
       hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8007784:	687b      	ldr	r3, [r7, #4]
 8007786:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007788:	687a      	ldr	r2, [r7, #4]
 800778a:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 800778c:	605a      	str	r2, [r3, #4]
     }
  }  
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800778e:	687b      	ldr	r3, [r7, #4]
 8007790:	2201      	movs	r2, #1
 8007792:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 8007796:	687b      	ldr	r3, [r7, #4]
 8007798:	2200      	movs	r2, #0
 800779a:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return status;
 800779e:	7bfb      	ldrb	r3, [r7, #15]
}
 80077a0:	4618      	mov	r0, r3
 80077a2:	3714      	adds	r7, #20
 80077a4:	46bd      	mov	sp, r7
 80077a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077aa:	4770      	bx	lr

080077ac <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80077ac:	b580      	push	{r7, lr}
 80077ae:	b084      	sub	sp, #16
 80077b0:	af00      	add	r7, sp, #0
 80077b2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80077b4:	2300      	movs	r3, #0
 80077b6:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 80077b8:	687b      	ldr	r3, [r7, #4]
 80077ba:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 80077be:	b2db      	uxtb	r3, r3
 80077c0:	2b02      	cmp	r3, #2
 80077c2:	d00d      	beq.n	80077e0 <HAL_DMA_Abort_IT+0x34>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80077c4:	687b      	ldr	r3, [r7, #4]
 80077c6:	2204      	movs	r2, #4
 80077c8:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80077ca:	687b      	ldr	r3, [r7, #4]
 80077cc:	2201      	movs	r2, #1
 80077ce:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80077d2:	687b      	ldr	r3, [r7, #4]
 80077d4:	2200      	movs	r2, #0
 80077d6:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    status = HAL_ERROR;
 80077da:	2301      	movs	r3, #1
 80077dc:	73fb      	strb	r3, [r7, #15]
 80077de:	e047      	b.n	8007870 <HAL_DMA_Abort_IT+0xc4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80077e0:	687b      	ldr	r3, [r7, #4]
 80077e2:	681b      	ldr	r3, [r3, #0]
 80077e4:	681a      	ldr	r2, [r3, #0]
 80077e6:	687b      	ldr	r3, [r7, #4]
 80077e8:	681b      	ldr	r3, [r3, #0]
 80077ea:	f022 020e 	bic.w	r2, r2, #14
 80077ee:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80077f0:	687b      	ldr	r3, [r7, #4]
 80077f2:	681b      	ldr	r3, [r3, #0]
 80077f4:	681a      	ldr	r2, [r3, #0]
 80077f6:	687b      	ldr	r3, [r7, #4]
 80077f8:	681b      	ldr	r3, [r3, #0]
 80077fa:	f022 0201 	bic.w	r2, r2, #1
 80077fe:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8007800:	687b      	ldr	r3, [r7, #4]
 8007802:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007804:	681a      	ldr	r2, [r3, #0]
 8007806:	687b      	ldr	r3, [r7, #4]
 8007808:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800780a:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800780e:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8007810:	687b      	ldr	r3, [r7, #4]
 8007812:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007814:	f003 021f 	and.w	r2, r3, #31
 8007818:	687b      	ldr	r3, [r7, #4]
 800781a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800781c:	2101      	movs	r1, #1
 800781e:	fa01 f202 	lsl.w	r2, r1, r2
 8007822:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8007824:	687b      	ldr	r3, [r7, #4]
 8007826:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007828:	687a      	ldr	r2, [r7, #4]
 800782a:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 800782c:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 800782e:	687b      	ldr	r3, [r7, #4]
 8007830:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007832:	2b00      	cmp	r3, #0
 8007834:	d00c      	beq.n	8007850 <HAL_DMA_Abort_IT+0xa4>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8007836:	687b      	ldr	r3, [r7, #4]
 8007838:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800783a:	681a      	ldr	r2, [r3, #0]
 800783c:	687b      	ldr	r3, [r7, #4]
 800783e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007840:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8007844:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8007846:	687b      	ldr	r3, [r7, #4]
 8007848:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800784a:	687a      	ldr	r2, [r7, #4]
 800784c:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 800784e:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8007850:	687b      	ldr	r3, [r7, #4]
 8007852:	2201      	movs	r2, #1
 8007854:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8007858:	687b      	ldr	r3, [r7, #4]
 800785a:	2200      	movs	r2, #0
 800785c:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8007860:	687b      	ldr	r3, [r7, #4]
 8007862:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007864:	2b00      	cmp	r3, #0
 8007866:	d003      	beq.n	8007870 <HAL_DMA_Abort_IT+0xc4>
    {
      hdma->XferAbortCallback(hdma);
 8007868:	687b      	ldr	r3, [r7, #4]
 800786a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800786c:	6878      	ldr	r0, [r7, #4]
 800786e:	4798      	blx	r3
    }
  }
  return status;
 8007870:	7bfb      	ldrb	r3, [r7, #15]
}
 8007872:	4618      	mov	r0, r3
 8007874:	3710      	adds	r7, #16
 8007876:	46bd      	mov	sp, r7
 8007878:	bd80      	pop	{r7, pc}

0800787a <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800787a:	b580      	push	{r7, lr}
 800787c:	b084      	sub	sp, #16
 800787e:	af00      	add	r7, sp, #0
 8007880:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8007882:	687b      	ldr	r3, [r7, #4]
 8007884:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007886:	681b      	ldr	r3, [r3, #0]
 8007888:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 800788a:	687b      	ldr	r3, [r7, #4]
 800788c:	681b      	ldr	r3, [r3, #0]
 800788e:	681b      	ldr	r3, [r3, #0]
 8007890:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((0U != (flag_it & ((uint32_t)DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1FU)))) && (0U != (source_it & DMA_IT_HT)))
 8007892:	687b      	ldr	r3, [r7, #4]
 8007894:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007896:	f003 031f 	and.w	r3, r3, #31
 800789a:	2204      	movs	r2, #4
 800789c:	409a      	lsls	r2, r3
 800789e:	68fb      	ldr	r3, [r7, #12]
 80078a0:	4013      	ands	r3, r2
 80078a2:	2b00      	cmp	r3, #0
 80078a4:	d026      	beq.n	80078f4 <HAL_DMA_IRQHandler+0x7a>
 80078a6:	68bb      	ldr	r3, [r7, #8]
 80078a8:	f003 0304 	and.w	r3, r3, #4
 80078ac:	2b00      	cmp	r3, #0
 80078ae:	d021      	beq.n	80078f4 <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80078b0:	687b      	ldr	r3, [r7, #4]
 80078b2:	681b      	ldr	r3, [r3, #0]
 80078b4:	681b      	ldr	r3, [r3, #0]
 80078b6:	f003 0320 	and.w	r3, r3, #32
 80078ba:	2b00      	cmp	r3, #0
 80078bc:	d107      	bne.n	80078ce <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80078be:	687b      	ldr	r3, [r7, #4]
 80078c0:	681b      	ldr	r3, [r3, #0]
 80078c2:	681a      	ldr	r2, [r3, #0]
 80078c4:	687b      	ldr	r3, [r7, #4]
 80078c6:	681b      	ldr	r3, [r3, #0]
 80078c8:	f022 0204 	bic.w	r2, r2, #4
 80078cc:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1FU));
 80078ce:	687b      	ldr	r3, [r7, #4]
 80078d0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80078d2:	f003 021f 	and.w	r2, r3, #31
 80078d6:	687b      	ldr	r3, [r7, #4]
 80078d8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80078da:	2104      	movs	r1, #4
 80078dc:	fa01 f202 	lsl.w	r2, r1, r2
 80078e0:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 80078e2:	687b      	ldr	r3, [r7, #4]
 80078e4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80078e6:	2b00      	cmp	r3, #0
 80078e8:	d071      	beq.n	80079ce <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 80078ea:	687b      	ldr	r3, [r7, #4]
 80078ec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80078ee:	6878      	ldr	r0, [r7, #4]
 80078f0:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 80078f2:	e06c      	b.n	80079ce <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1FU))))
 80078f4:	687b      	ldr	r3, [r7, #4]
 80078f6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80078f8:	f003 031f 	and.w	r3, r3, #31
 80078fc:	2202      	movs	r2, #2
 80078fe:	409a      	lsls	r2, r3
 8007900:	68fb      	ldr	r3, [r7, #12]
 8007902:	4013      	ands	r3, r2
 8007904:	2b00      	cmp	r3, #0
 8007906:	d02e      	beq.n	8007966 <HAL_DMA_IRQHandler+0xec>
           && (0U != (source_it & DMA_IT_TC)))
 8007908:	68bb      	ldr	r3, [r7, #8]
 800790a:	f003 0302 	and.w	r3, r3, #2
 800790e:	2b00      	cmp	r3, #0
 8007910:	d029      	beq.n	8007966 <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8007912:	687b      	ldr	r3, [r7, #4]
 8007914:	681b      	ldr	r3, [r3, #0]
 8007916:	681b      	ldr	r3, [r3, #0]
 8007918:	f003 0320 	and.w	r3, r3, #32
 800791c:	2b00      	cmp	r3, #0
 800791e:	d10b      	bne.n	8007938 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8007920:	687b      	ldr	r3, [r7, #4]
 8007922:	681b      	ldr	r3, [r3, #0]
 8007924:	681a      	ldr	r2, [r3, #0]
 8007926:	687b      	ldr	r3, [r7, #4]
 8007928:	681b      	ldr	r3, [r3, #0]
 800792a:	f022 020a 	bic.w	r2, r2, #10
 800792e:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8007930:	687b      	ldr	r3, [r7, #4]
 8007932:	2201      	movs	r2, #1
 8007934:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1FU));
 8007938:	687b      	ldr	r3, [r7, #4]
 800793a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800793c:	f003 021f 	and.w	r2, r3, #31
 8007940:	687b      	ldr	r3, [r7, #4]
 8007942:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007944:	2102      	movs	r1, #2
 8007946:	fa01 f202 	lsl.w	r2, r1, r2
 800794a:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800794c:	687b      	ldr	r3, [r7, #4]
 800794e:	2200      	movs	r2, #0
 8007950:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferCpltCallback != NULL)
 8007954:	687b      	ldr	r3, [r7, #4]
 8007956:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007958:	2b00      	cmp	r3, #0
 800795a:	d038      	beq.n	80079ce <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 800795c:	687b      	ldr	r3, [r7, #4]
 800795e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007960:	6878      	ldr	r0, [r7, #4]
 8007962:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 8007964:	e033      	b.n	80079ce <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Error Interrupt management **************************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1FU))))
 8007966:	687b      	ldr	r3, [r7, #4]
 8007968:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800796a:	f003 031f 	and.w	r3, r3, #31
 800796e:	2208      	movs	r2, #8
 8007970:	409a      	lsls	r2, r3
 8007972:	68fb      	ldr	r3, [r7, #12]
 8007974:	4013      	ands	r3, r2
 8007976:	2b00      	cmp	r3, #0
 8007978:	d02a      	beq.n	80079d0 <HAL_DMA_IRQHandler+0x156>
           && (0U != (source_it & DMA_IT_TE)))
 800797a:	68bb      	ldr	r3, [r7, #8]
 800797c:	f003 0308 	and.w	r3, r3, #8
 8007980:	2b00      	cmp	r3, #0
 8007982:	d025      	beq.n	80079d0 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8007984:	687b      	ldr	r3, [r7, #4]
 8007986:	681b      	ldr	r3, [r3, #0]
 8007988:	681a      	ldr	r2, [r3, #0]
 800798a:	687b      	ldr	r3, [r7, #4]
 800798c:	681b      	ldr	r3, [r3, #0]
 800798e:	f022 020e 	bic.w	r2, r2, #14
 8007992:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8007994:	687b      	ldr	r3, [r7, #4]
 8007996:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007998:	f003 021f 	and.w	r2, r3, #31
 800799c:	687b      	ldr	r3, [r7, #4]
 800799e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80079a0:	2101      	movs	r1, #1
 80079a2:	fa01 f202 	lsl.w	r2, r1, r2
 80079a6:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80079a8:	687b      	ldr	r3, [r7, #4]
 80079aa:	2201      	movs	r2, #1
 80079ac:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80079ae:	687b      	ldr	r3, [r7, #4]
 80079b0:	2201      	movs	r2, #1
 80079b2:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80079b6:	687b      	ldr	r3, [r7, #4]
 80079b8:	2200      	movs	r2, #0
 80079ba:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferErrorCallback != NULL)
 80079be:	687b      	ldr	r3, [r7, #4]
 80079c0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80079c2:	2b00      	cmp	r3, #0
 80079c4:	d004      	beq.n	80079d0 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80079c6:	687b      	ldr	r3, [r7, #4]
 80079c8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80079ca:	6878      	ldr	r0, [r7, #4]
 80079cc:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 80079ce:	bf00      	nop
 80079d0:	bf00      	nop
}
 80079d2:	3710      	adds	r7, #16
 80079d4:	46bd      	mov	sp, r7
 80079d6:	bd80      	pop	{r7, pc}

080079d8 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80079d8:	b480      	push	{r7}
 80079da:	b085      	sub	sp, #20
 80079dc:	af00      	add	r7, sp, #0
 80079de:	60f8      	str	r0, [r7, #12]
 80079e0:	60b9      	str	r1, [r7, #8]
 80079e2:	607a      	str	r2, [r7, #4]
 80079e4:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80079e6:	68fb      	ldr	r3, [r7, #12]
 80079e8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80079ea:	68fa      	ldr	r2, [r7, #12]
 80079ec:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 80079ee:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 80079f0:	68fb      	ldr	r3, [r7, #12]
 80079f2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80079f4:	2b00      	cmp	r3, #0
 80079f6:	d004      	beq.n	8007a02 <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80079f8:	68fb      	ldr	r3, [r7, #12]
 80079fa:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80079fc:	68fa      	ldr	r2, [r7, #12]
 80079fe:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8007a00:	605a      	str	r2, [r3, #4]
  }

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8007a02:	68fb      	ldr	r3, [r7, #12]
 8007a04:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007a06:	f003 021f 	and.w	r2, r3, #31
 8007a0a:	68fb      	ldr	r3, [r7, #12]
 8007a0c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007a0e:	2101      	movs	r1, #1
 8007a10:	fa01 f202 	lsl.w	r2, r1, r2
 8007a14:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8007a16:	68fb      	ldr	r3, [r7, #12]
 8007a18:	681b      	ldr	r3, [r3, #0]
 8007a1a:	683a      	ldr	r2, [r7, #0]
 8007a1c:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8007a1e:	68fb      	ldr	r3, [r7, #12]
 8007a20:	689b      	ldr	r3, [r3, #8]
 8007a22:	2b10      	cmp	r3, #16
 8007a24:	d108      	bne.n	8007a38 <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8007a26:	68fb      	ldr	r3, [r7, #12]
 8007a28:	681b      	ldr	r3, [r3, #0]
 8007a2a:	687a      	ldr	r2, [r7, #4]
 8007a2c:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8007a2e:	68fb      	ldr	r3, [r7, #12]
 8007a30:	681b      	ldr	r3, [r3, #0]
 8007a32:	68ba      	ldr	r2, [r7, #8]
 8007a34:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8007a36:	e007      	b.n	8007a48 <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 8007a38:	68fb      	ldr	r3, [r7, #12]
 8007a3a:	681b      	ldr	r3, [r3, #0]
 8007a3c:	68ba      	ldr	r2, [r7, #8]
 8007a3e:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8007a40:	68fb      	ldr	r3, [r7, #12]
 8007a42:	681b      	ldr	r3, [r3, #0]
 8007a44:	687a      	ldr	r2, [r7, #4]
 8007a46:	60da      	str	r2, [r3, #12]
}
 8007a48:	bf00      	nop
 8007a4a:	3714      	adds	r7, #20
 8007a4c:	46bd      	mov	sp, r7
 8007a4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a52:	4770      	bx	lr

08007a54 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma        pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8007a54:	b480      	push	{r7}
 8007a56:	b087      	sub	sp, #28
 8007a58:	af00      	add	r7, sp, #0
 8007a5a:	6078      	str	r0, [r7, #4]
  uint32_t dmamux_base_addr;
  uint32_t channel_number;
  DMAMUX_Channel_TypeDef *DMAMUX1_ChannelBase;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 8007a5c:	687b      	ldr	r3, [r7, #4]
 8007a5e:	681b      	ldr	r3, [r3, #0]
 8007a60:	461a      	mov	r2, r3
 8007a62:	4b16      	ldr	r3, [pc, #88]	@ (8007abc <DMA_CalcDMAMUXChannelBaseAndMask+0x68>)
 8007a64:	429a      	cmp	r2, r3
 8007a66:	d802      	bhi.n	8007a6e <DMA_CalcDMAMUXChannelBaseAndMask+0x1a>
  {
    /* DMA1 */
    DMAMUX1_ChannelBase = DMAMUX1_Channel0;
 8007a68:	4b15      	ldr	r3, [pc, #84]	@ (8007ac0 <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 8007a6a:	617b      	str	r3, [r7, #20]
 8007a6c:	e001      	b.n	8007a72 <DMA_CalcDMAMUXChannelBaseAndMask+0x1e>
  {
    /* DMA2 */
#if defined (STM32G471xx) || defined (STM32G473xx) || defined (STM32G474xx) || defined (STM32G414xx) || defined (STM32G483xx) || defined (STM32G484xx) || defined (STM32G491xx) || defined (STM32G4A1xx) || defined (STM32G411xC)
    DMAMUX1_ChannelBase = DMAMUX1_Channel8;
#elif defined (STM32G411xB) || defined (STM32G431xx) || defined (STM32G441xx) || defined (STM32GBK1CB)
    DMAMUX1_ChannelBase = DMAMUX1_Channel6;
 8007a6e:	4b15      	ldr	r3, [pc, #84]	@ (8007ac4 <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 8007a70:	617b      	str	r3, [r7, #20]
#else
    DMAMUX1_ChannelBase = DMAMUX1_Channel7;
#endif /* STM32G4x1xx) */
  }
  dmamux_base_addr = (uint32_t)DMAMUX1_ChannelBase;
 8007a72:	697b      	ldr	r3, [r7, #20]
 8007a74:	613b      	str	r3, [r7, #16]
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 8007a76:	687b      	ldr	r3, [r7, #4]
 8007a78:	681b      	ldr	r3, [r3, #0]
 8007a7a:	b2db      	uxtb	r3, r3
 8007a7c:	3b08      	subs	r3, #8
 8007a7e:	4a12      	ldr	r2, [pc, #72]	@ (8007ac8 <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 8007a80:	fba2 2303 	umull	r2, r3, r2, r3
 8007a84:	091b      	lsrs	r3, r3, #4
 8007a86:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)(dmamux_base_addr + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 8007a88:	687b      	ldr	r3, [r7, #4]
 8007a8a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007a8c:	089b      	lsrs	r3, r3, #2
 8007a8e:	009a      	lsls	r2, r3, #2
 8007a90:	693b      	ldr	r3, [r7, #16]
 8007a92:	4413      	add	r3, r2
 8007a94:	461a      	mov	r2, r3
 8007a96:	687b      	ldr	r3, [r7, #4]
 8007a98:	649a      	str	r2, [r3, #72]	@ 0x48
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8007a9a:	687b      	ldr	r3, [r7, #4]
 8007a9c:	4a0b      	ldr	r2, [pc, #44]	@ (8007acc <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 8007a9e:	64da      	str	r2, [r3, #76]	@ 0x4c
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 8007aa0:	68fb      	ldr	r3, [r7, #12]
 8007aa2:	f003 031f 	and.w	r3, r3, #31
 8007aa6:	2201      	movs	r2, #1
 8007aa8:	409a      	lsls	r2, r3
 8007aaa:	687b      	ldr	r3, [r7, #4]
 8007aac:	651a      	str	r2, [r3, #80]	@ 0x50
}
 8007aae:	bf00      	nop
 8007ab0:	371c      	adds	r7, #28
 8007ab2:	46bd      	mov	sp, r7
 8007ab4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ab8:	4770      	bx	lr
 8007aba:	bf00      	nop
 8007abc:	40020407 	.word	0x40020407
 8007ac0:	40020800 	.word	0x40020800
 8007ac4:	40020820 	.word	0x40020820
 8007ac8:	cccccccd 	.word	0xcccccccd
 8007acc:	40020880 	.word	0x40020880

08007ad0 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8007ad0:	b480      	push	{r7}
 8007ad2:	b085      	sub	sp, #20
 8007ad4:	af00      	add	r7, sp, #0
 8007ad6:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8007ad8:	687b      	ldr	r3, [r7, #4]
 8007ada:	685b      	ldr	r3, [r3, #4]
 8007adc:	b2db      	uxtb	r3, r3
 8007ade:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8007ae0:	68fa      	ldr	r2, [r7, #12]
 8007ae2:	4b0b      	ldr	r3, [pc, #44]	@ (8007b10 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 8007ae4:	4413      	add	r3, r2
 8007ae6:	009b      	lsls	r3, r3, #2
 8007ae8:	461a      	mov	r2, r3
 8007aea:	687b      	ldr	r3, [r7, #4]
 8007aec:	655a      	str	r2, [r3, #84]	@ 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8007aee:	687b      	ldr	r3, [r7, #4]
 8007af0:	4a08      	ldr	r2, [pc, #32]	@ (8007b14 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 8007af2:	659a      	str	r2, [r3, #88]	@ 0x58

  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x1FU);
 8007af4:	68fb      	ldr	r3, [r7, #12]
 8007af6:	3b01      	subs	r3, #1
 8007af8:	f003 031f 	and.w	r3, r3, #31
 8007afc:	2201      	movs	r2, #1
 8007afe:	409a      	lsls	r2, r3
 8007b00:	687b      	ldr	r3, [r7, #4]
 8007b02:	65da      	str	r2, [r3, #92]	@ 0x5c
}
 8007b04:	bf00      	nop
 8007b06:	3714      	adds	r7, #20
 8007b08:	46bd      	mov	sp, r7
 8007b0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b0e:	4770      	bx	lr
 8007b10:	1000823f 	.word	0x1000823f
 8007b14:	40020940 	.word	0x40020940

08007b18 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8007b18:	b480      	push	{r7}
 8007b1a:	b087      	sub	sp, #28
 8007b1c:	af00      	add	r7, sp, #0
 8007b1e:	6078      	str	r0, [r7, #4]
 8007b20:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8007b22:	2300      	movs	r3, #0
 8007b24:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 8007b26:	e15a      	b.n	8007dde <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8007b28:	683b      	ldr	r3, [r7, #0]
 8007b2a:	681a      	ldr	r2, [r3, #0]
 8007b2c:	2101      	movs	r1, #1
 8007b2e:	697b      	ldr	r3, [r7, #20]
 8007b30:	fa01 f303 	lsl.w	r3, r1, r3
 8007b34:	4013      	ands	r3, r2
 8007b36:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8007b38:	68fb      	ldr	r3, [r7, #12]
 8007b3a:	2b00      	cmp	r3, #0
 8007b3c:	f000 814c 	beq.w	8007dd8 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8007b40:	683b      	ldr	r3, [r7, #0]
 8007b42:	685b      	ldr	r3, [r3, #4]
 8007b44:	f003 0303 	and.w	r3, r3, #3
 8007b48:	2b01      	cmp	r3, #1
 8007b4a:	d005      	beq.n	8007b58 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8007b4c:	683b      	ldr	r3, [r7, #0]
 8007b4e:	685b      	ldr	r3, [r3, #4]
 8007b50:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8007b54:	2b02      	cmp	r3, #2
 8007b56:	d130      	bne.n	8007bba <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8007b58:	687b      	ldr	r3, [r7, #4]
 8007b5a:	689b      	ldr	r3, [r3, #8]
 8007b5c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8007b5e:	697b      	ldr	r3, [r7, #20]
 8007b60:	005b      	lsls	r3, r3, #1
 8007b62:	2203      	movs	r2, #3
 8007b64:	fa02 f303 	lsl.w	r3, r2, r3
 8007b68:	43db      	mvns	r3, r3
 8007b6a:	693a      	ldr	r2, [r7, #16]
 8007b6c:	4013      	ands	r3, r2
 8007b6e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8007b70:	683b      	ldr	r3, [r7, #0]
 8007b72:	68da      	ldr	r2, [r3, #12]
 8007b74:	697b      	ldr	r3, [r7, #20]
 8007b76:	005b      	lsls	r3, r3, #1
 8007b78:	fa02 f303 	lsl.w	r3, r2, r3
 8007b7c:	693a      	ldr	r2, [r7, #16]
 8007b7e:	4313      	orrs	r3, r2
 8007b80:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8007b82:	687b      	ldr	r3, [r7, #4]
 8007b84:	693a      	ldr	r2, [r7, #16]
 8007b86:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8007b88:	687b      	ldr	r3, [r7, #4]
 8007b8a:	685b      	ldr	r3, [r3, #4]
 8007b8c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8007b8e:	2201      	movs	r2, #1
 8007b90:	697b      	ldr	r3, [r7, #20]
 8007b92:	fa02 f303 	lsl.w	r3, r2, r3
 8007b96:	43db      	mvns	r3, r3
 8007b98:	693a      	ldr	r2, [r7, #16]
 8007b9a:	4013      	ands	r3, r2
 8007b9c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8007b9e:	683b      	ldr	r3, [r7, #0]
 8007ba0:	685b      	ldr	r3, [r3, #4]
 8007ba2:	091b      	lsrs	r3, r3, #4
 8007ba4:	f003 0201 	and.w	r2, r3, #1
 8007ba8:	697b      	ldr	r3, [r7, #20]
 8007baa:	fa02 f303 	lsl.w	r3, r2, r3
 8007bae:	693a      	ldr	r2, [r7, #16]
 8007bb0:	4313      	orrs	r3, r2
 8007bb2:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8007bb4:	687b      	ldr	r3, [r7, #4]
 8007bb6:	693a      	ldr	r2, [r7, #16]
 8007bb8:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8007bba:	683b      	ldr	r3, [r7, #0]
 8007bbc:	685b      	ldr	r3, [r3, #4]
 8007bbe:	f003 0303 	and.w	r3, r3, #3
 8007bc2:	2b03      	cmp	r3, #3
 8007bc4:	d017      	beq.n	8007bf6 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8007bc6:	687b      	ldr	r3, [r7, #4]
 8007bc8:	68db      	ldr	r3, [r3, #12]
 8007bca:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8007bcc:	697b      	ldr	r3, [r7, #20]
 8007bce:	005b      	lsls	r3, r3, #1
 8007bd0:	2203      	movs	r2, #3
 8007bd2:	fa02 f303 	lsl.w	r3, r2, r3
 8007bd6:	43db      	mvns	r3, r3
 8007bd8:	693a      	ldr	r2, [r7, #16]
 8007bda:	4013      	ands	r3, r2
 8007bdc:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8007bde:	683b      	ldr	r3, [r7, #0]
 8007be0:	689a      	ldr	r2, [r3, #8]
 8007be2:	697b      	ldr	r3, [r7, #20]
 8007be4:	005b      	lsls	r3, r3, #1
 8007be6:	fa02 f303 	lsl.w	r3, r2, r3
 8007bea:	693a      	ldr	r2, [r7, #16]
 8007bec:	4313      	orrs	r3, r2
 8007bee:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8007bf0:	687b      	ldr	r3, [r7, #4]
 8007bf2:	693a      	ldr	r2, [r7, #16]
 8007bf4:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8007bf6:	683b      	ldr	r3, [r7, #0]
 8007bf8:	685b      	ldr	r3, [r3, #4]
 8007bfa:	f003 0303 	and.w	r3, r3, #3
 8007bfe:	2b02      	cmp	r3, #2
 8007c00:	d123      	bne.n	8007c4a <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8007c02:	697b      	ldr	r3, [r7, #20]
 8007c04:	08da      	lsrs	r2, r3, #3
 8007c06:	687b      	ldr	r3, [r7, #4]
 8007c08:	3208      	adds	r2, #8
 8007c0a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007c0e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8007c10:	697b      	ldr	r3, [r7, #20]
 8007c12:	f003 0307 	and.w	r3, r3, #7
 8007c16:	009b      	lsls	r3, r3, #2
 8007c18:	220f      	movs	r2, #15
 8007c1a:	fa02 f303 	lsl.w	r3, r2, r3
 8007c1e:	43db      	mvns	r3, r3
 8007c20:	693a      	ldr	r2, [r7, #16]
 8007c22:	4013      	ands	r3, r2
 8007c24:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8007c26:	683b      	ldr	r3, [r7, #0]
 8007c28:	691a      	ldr	r2, [r3, #16]
 8007c2a:	697b      	ldr	r3, [r7, #20]
 8007c2c:	f003 0307 	and.w	r3, r3, #7
 8007c30:	009b      	lsls	r3, r3, #2
 8007c32:	fa02 f303 	lsl.w	r3, r2, r3
 8007c36:	693a      	ldr	r2, [r7, #16]
 8007c38:	4313      	orrs	r3, r2
 8007c3a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8007c3c:	697b      	ldr	r3, [r7, #20]
 8007c3e:	08da      	lsrs	r2, r3, #3
 8007c40:	687b      	ldr	r3, [r7, #4]
 8007c42:	3208      	adds	r2, #8
 8007c44:	6939      	ldr	r1, [r7, #16]
 8007c46:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8007c4a:	687b      	ldr	r3, [r7, #4]
 8007c4c:	681b      	ldr	r3, [r3, #0]
 8007c4e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8007c50:	697b      	ldr	r3, [r7, #20]
 8007c52:	005b      	lsls	r3, r3, #1
 8007c54:	2203      	movs	r2, #3
 8007c56:	fa02 f303 	lsl.w	r3, r2, r3
 8007c5a:	43db      	mvns	r3, r3
 8007c5c:	693a      	ldr	r2, [r7, #16]
 8007c5e:	4013      	ands	r3, r2
 8007c60:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8007c62:	683b      	ldr	r3, [r7, #0]
 8007c64:	685b      	ldr	r3, [r3, #4]
 8007c66:	f003 0203 	and.w	r2, r3, #3
 8007c6a:	697b      	ldr	r3, [r7, #20]
 8007c6c:	005b      	lsls	r3, r3, #1
 8007c6e:	fa02 f303 	lsl.w	r3, r2, r3
 8007c72:	693a      	ldr	r2, [r7, #16]
 8007c74:	4313      	orrs	r3, r2
 8007c76:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8007c78:	687b      	ldr	r3, [r7, #4]
 8007c7a:	693a      	ldr	r2, [r7, #16]
 8007c7c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8007c7e:	683b      	ldr	r3, [r7, #0]
 8007c80:	685b      	ldr	r3, [r3, #4]
 8007c82:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8007c86:	2b00      	cmp	r3, #0
 8007c88:	f000 80a6 	beq.w	8007dd8 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8007c8c:	4b5b      	ldr	r3, [pc, #364]	@ (8007dfc <HAL_GPIO_Init+0x2e4>)
 8007c8e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8007c90:	4a5a      	ldr	r2, [pc, #360]	@ (8007dfc <HAL_GPIO_Init+0x2e4>)
 8007c92:	f043 0301 	orr.w	r3, r3, #1
 8007c96:	6613      	str	r3, [r2, #96]	@ 0x60
 8007c98:	4b58      	ldr	r3, [pc, #352]	@ (8007dfc <HAL_GPIO_Init+0x2e4>)
 8007c9a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8007c9c:	f003 0301 	and.w	r3, r3, #1
 8007ca0:	60bb      	str	r3, [r7, #8]
 8007ca2:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 8007ca4:	4a56      	ldr	r2, [pc, #344]	@ (8007e00 <HAL_GPIO_Init+0x2e8>)
 8007ca6:	697b      	ldr	r3, [r7, #20]
 8007ca8:	089b      	lsrs	r3, r3, #2
 8007caa:	3302      	adds	r3, #2
 8007cac:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007cb0:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8007cb2:	697b      	ldr	r3, [r7, #20]
 8007cb4:	f003 0303 	and.w	r3, r3, #3
 8007cb8:	009b      	lsls	r3, r3, #2
 8007cba:	220f      	movs	r2, #15
 8007cbc:	fa02 f303 	lsl.w	r3, r2, r3
 8007cc0:	43db      	mvns	r3, r3
 8007cc2:	693a      	ldr	r2, [r7, #16]
 8007cc4:	4013      	ands	r3, r2
 8007cc6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8007cc8:	687b      	ldr	r3, [r7, #4]
 8007cca:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8007cce:	d01f      	beq.n	8007d10 <HAL_GPIO_Init+0x1f8>
 8007cd0:	687b      	ldr	r3, [r7, #4]
 8007cd2:	4a4c      	ldr	r2, [pc, #304]	@ (8007e04 <HAL_GPIO_Init+0x2ec>)
 8007cd4:	4293      	cmp	r3, r2
 8007cd6:	d019      	beq.n	8007d0c <HAL_GPIO_Init+0x1f4>
 8007cd8:	687b      	ldr	r3, [r7, #4]
 8007cda:	4a4b      	ldr	r2, [pc, #300]	@ (8007e08 <HAL_GPIO_Init+0x2f0>)
 8007cdc:	4293      	cmp	r3, r2
 8007cde:	d013      	beq.n	8007d08 <HAL_GPIO_Init+0x1f0>
 8007ce0:	687b      	ldr	r3, [r7, #4]
 8007ce2:	4a4a      	ldr	r2, [pc, #296]	@ (8007e0c <HAL_GPIO_Init+0x2f4>)
 8007ce4:	4293      	cmp	r3, r2
 8007ce6:	d00d      	beq.n	8007d04 <HAL_GPIO_Init+0x1ec>
 8007ce8:	687b      	ldr	r3, [r7, #4]
 8007cea:	4a49      	ldr	r2, [pc, #292]	@ (8007e10 <HAL_GPIO_Init+0x2f8>)
 8007cec:	4293      	cmp	r3, r2
 8007cee:	d007      	beq.n	8007d00 <HAL_GPIO_Init+0x1e8>
 8007cf0:	687b      	ldr	r3, [r7, #4]
 8007cf2:	4a48      	ldr	r2, [pc, #288]	@ (8007e14 <HAL_GPIO_Init+0x2fc>)
 8007cf4:	4293      	cmp	r3, r2
 8007cf6:	d101      	bne.n	8007cfc <HAL_GPIO_Init+0x1e4>
 8007cf8:	2305      	movs	r3, #5
 8007cfa:	e00a      	b.n	8007d12 <HAL_GPIO_Init+0x1fa>
 8007cfc:	2306      	movs	r3, #6
 8007cfe:	e008      	b.n	8007d12 <HAL_GPIO_Init+0x1fa>
 8007d00:	2304      	movs	r3, #4
 8007d02:	e006      	b.n	8007d12 <HAL_GPIO_Init+0x1fa>
 8007d04:	2303      	movs	r3, #3
 8007d06:	e004      	b.n	8007d12 <HAL_GPIO_Init+0x1fa>
 8007d08:	2302      	movs	r3, #2
 8007d0a:	e002      	b.n	8007d12 <HAL_GPIO_Init+0x1fa>
 8007d0c:	2301      	movs	r3, #1
 8007d0e:	e000      	b.n	8007d12 <HAL_GPIO_Init+0x1fa>
 8007d10:	2300      	movs	r3, #0
 8007d12:	697a      	ldr	r2, [r7, #20]
 8007d14:	f002 0203 	and.w	r2, r2, #3
 8007d18:	0092      	lsls	r2, r2, #2
 8007d1a:	4093      	lsls	r3, r2
 8007d1c:	693a      	ldr	r2, [r7, #16]
 8007d1e:	4313      	orrs	r3, r2
 8007d20:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8007d22:	4937      	ldr	r1, [pc, #220]	@ (8007e00 <HAL_GPIO_Init+0x2e8>)
 8007d24:	697b      	ldr	r3, [r7, #20]
 8007d26:	089b      	lsrs	r3, r3, #2
 8007d28:	3302      	adds	r3, #2
 8007d2a:	693a      	ldr	r2, [r7, #16]
 8007d2c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8007d30:	4b39      	ldr	r3, [pc, #228]	@ (8007e18 <HAL_GPIO_Init+0x300>)
 8007d32:	689b      	ldr	r3, [r3, #8]
 8007d34:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8007d36:	68fb      	ldr	r3, [r7, #12]
 8007d38:	43db      	mvns	r3, r3
 8007d3a:	693a      	ldr	r2, [r7, #16]
 8007d3c:	4013      	ands	r3, r2
 8007d3e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8007d40:	683b      	ldr	r3, [r7, #0]
 8007d42:	685b      	ldr	r3, [r3, #4]
 8007d44:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8007d48:	2b00      	cmp	r3, #0
 8007d4a:	d003      	beq.n	8007d54 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 8007d4c:	693a      	ldr	r2, [r7, #16]
 8007d4e:	68fb      	ldr	r3, [r7, #12]
 8007d50:	4313      	orrs	r3, r2
 8007d52:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8007d54:	4a30      	ldr	r2, [pc, #192]	@ (8007e18 <HAL_GPIO_Init+0x300>)
 8007d56:	693b      	ldr	r3, [r7, #16]
 8007d58:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8007d5a:	4b2f      	ldr	r3, [pc, #188]	@ (8007e18 <HAL_GPIO_Init+0x300>)
 8007d5c:	68db      	ldr	r3, [r3, #12]
 8007d5e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8007d60:	68fb      	ldr	r3, [r7, #12]
 8007d62:	43db      	mvns	r3, r3
 8007d64:	693a      	ldr	r2, [r7, #16]
 8007d66:	4013      	ands	r3, r2
 8007d68:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8007d6a:	683b      	ldr	r3, [r7, #0]
 8007d6c:	685b      	ldr	r3, [r3, #4]
 8007d6e:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8007d72:	2b00      	cmp	r3, #0
 8007d74:	d003      	beq.n	8007d7e <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 8007d76:	693a      	ldr	r2, [r7, #16]
 8007d78:	68fb      	ldr	r3, [r7, #12]
 8007d7a:	4313      	orrs	r3, r2
 8007d7c:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8007d7e:	4a26      	ldr	r2, [pc, #152]	@ (8007e18 <HAL_GPIO_Init+0x300>)
 8007d80:	693b      	ldr	r3, [r7, #16]
 8007d82:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 8007d84:	4b24      	ldr	r3, [pc, #144]	@ (8007e18 <HAL_GPIO_Init+0x300>)
 8007d86:	685b      	ldr	r3, [r3, #4]
 8007d88:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8007d8a:	68fb      	ldr	r3, [r7, #12]
 8007d8c:	43db      	mvns	r3, r3
 8007d8e:	693a      	ldr	r2, [r7, #16]
 8007d90:	4013      	ands	r3, r2
 8007d92:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8007d94:	683b      	ldr	r3, [r7, #0]
 8007d96:	685b      	ldr	r3, [r3, #4]
 8007d98:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007d9c:	2b00      	cmp	r3, #0
 8007d9e:	d003      	beq.n	8007da8 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8007da0:	693a      	ldr	r2, [r7, #16]
 8007da2:	68fb      	ldr	r3, [r7, #12]
 8007da4:	4313      	orrs	r3, r2
 8007da6:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8007da8:	4a1b      	ldr	r2, [pc, #108]	@ (8007e18 <HAL_GPIO_Init+0x300>)
 8007daa:	693b      	ldr	r3, [r7, #16]
 8007dac:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8007dae:	4b1a      	ldr	r3, [pc, #104]	@ (8007e18 <HAL_GPIO_Init+0x300>)
 8007db0:	681b      	ldr	r3, [r3, #0]
 8007db2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8007db4:	68fb      	ldr	r3, [r7, #12]
 8007db6:	43db      	mvns	r3, r3
 8007db8:	693a      	ldr	r2, [r7, #16]
 8007dba:	4013      	ands	r3, r2
 8007dbc:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8007dbe:	683b      	ldr	r3, [r7, #0]
 8007dc0:	685b      	ldr	r3, [r3, #4]
 8007dc2:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8007dc6:	2b00      	cmp	r3, #0
 8007dc8:	d003      	beq.n	8007dd2 <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 8007dca:	693a      	ldr	r2, [r7, #16]
 8007dcc:	68fb      	ldr	r3, [r7, #12]
 8007dce:	4313      	orrs	r3, r2
 8007dd0:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8007dd2:	4a11      	ldr	r2, [pc, #68]	@ (8007e18 <HAL_GPIO_Init+0x300>)
 8007dd4:	693b      	ldr	r3, [r7, #16]
 8007dd6:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8007dd8:	697b      	ldr	r3, [r7, #20]
 8007dda:	3301      	adds	r3, #1
 8007ddc:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 8007dde:	683b      	ldr	r3, [r7, #0]
 8007de0:	681a      	ldr	r2, [r3, #0]
 8007de2:	697b      	ldr	r3, [r7, #20]
 8007de4:	fa22 f303 	lsr.w	r3, r2, r3
 8007de8:	2b00      	cmp	r3, #0
 8007dea:	f47f ae9d 	bne.w	8007b28 <HAL_GPIO_Init+0x10>
  }
}
 8007dee:	bf00      	nop
 8007df0:	bf00      	nop
 8007df2:	371c      	adds	r7, #28
 8007df4:	46bd      	mov	sp, r7
 8007df6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007dfa:	4770      	bx	lr
 8007dfc:	40021000 	.word	0x40021000
 8007e00:	40010000 	.word	0x40010000
 8007e04:	48000400 	.word	0x48000400
 8007e08:	48000800 	.word	0x48000800
 8007e0c:	48000c00 	.word	0x48000c00
 8007e10:	48001000 	.word	0x48001000
 8007e14:	48001400 	.word	0x48001400
 8007e18:	40010400 	.word	0x40010400

08007e1c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8007e1c:	b480      	push	{r7}
 8007e1e:	b083      	sub	sp, #12
 8007e20:	af00      	add	r7, sp, #0
 8007e22:	6078      	str	r0, [r7, #4]
 8007e24:	460b      	mov	r3, r1
 8007e26:	807b      	strh	r3, [r7, #2]
 8007e28:	4613      	mov	r3, r2
 8007e2a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8007e2c:	787b      	ldrb	r3, [r7, #1]
 8007e2e:	2b00      	cmp	r3, #0
 8007e30:	d003      	beq.n	8007e3a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8007e32:	887a      	ldrh	r2, [r7, #2]
 8007e34:	687b      	ldr	r3, [r7, #4]
 8007e36:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8007e38:	e002      	b.n	8007e40 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8007e3a:	887a      	ldrh	r2, [r7, #2]
 8007e3c:	687b      	ldr	r3, [r7, #4]
 8007e3e:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8007e40:	bf00      	nop
 8007e42:	370c      	adds	r7, #12
 8007e44:	46bd      	mov	sp, r7
 8007e46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e4a:	4770      	bx	lr

08007e4c <HAL_GPIO_TogglePin>:
  * @param  GPIO_Pin specifies the pin to be toggled.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8007e4c:	b480      	push	{r7}
 8007e4e:	b085      	sub	sp, #20
 8007e50:	af00      	add	r7, sp, #0
 8007e52:	6078      	str	r0, [r7, #4]
 8007e54:	460b      	mov	r3, r1
 8007e56:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8007e58:	687b      	ldr	r3, [r7, #4]
 8007e5a:	695b      	ldr	r3, [r3, #20]
 8007e5c:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8007e5e:	887a      	ldrh	r2, [r7, #2]
 8007e60:	68fb      	ldr	r3, [r7, #12]
 8007e62:	4013      	ands	r3, r2
 8007e64:	041a      	lsls	r2, r3, #16
 8007e66:	68fb      	ldr	r3, [r7, #12]
 8007e68:	43d9      	mvns	r1, r3
 8007e6a:	887b      	ldrh	r3, [r7, #2]
 8007e6c:	400b      	ands	r3, r1
 8007e6e:	431a      	orrs	r2, r3
 8007e70:	687b      	ldr	r3, [r7, #4]
 8007e72:	619a      	str	r2, [r3, #24]
}
 8007e74:	bf00      	nop
 8007e76:	3714      	adds	r7, #20
 8007e78:	46bd      	mov	sp, r7
 8007e7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e7e:	4770      	bx	lr

08007e80 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8007e80:	b580      	push	{r7, lr}
 8007e82:	b082      	sub	sp, #8
 8007e84:	af00      	add	r7, sp, #0
 8007e86:	4603      	mov	r3, r0
 8007e88:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8007e8a:	4b08      	ldr	r3, [pc, #32]	@ (8007eac <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8007e8c:	695a      	ldr	r2, [r3, #20]
 8007e8e:	88fb      	ldrh	r3, [r7, #6]
 8007e90:	4013      	ands	r3, r2
 8007e92:	2b00      	cmp	r3, #0
 8007e94:	d006      	beq.n	8007ea4 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8007e96:	4a05      	ldr	r2, [pc, #20]	@ (8007eac <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8007e98:	88fb      	ldrh	r3, [r7, #6]
 8007e9a:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8007e9c:	88fb      	ldrh	r3, [r7, #6]
 8007e9e:	4618      	mov	r0, r3
 8007ea0:	f000 f806 	bl	8007eb0 <HAL_GPIO_EXTI_Callback>
  }
}
 8007ea4:	bf00      	nop
 8007ea6:	3708      	adds	r7, #8
 8007ea8:	46bd      	mov	sp, r7
 8007eaa:	bd80      	pop	{r7, pc}
 8007eac:	40010400 	.word	0x40010400

08007eb0 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8007eb0:	b480      	push	{r7}
 8007eb2:	b083      	sub	sp, #12
 8007eb4:	af00      	add	r7, sp, #0
 8007eb6:	4603      	mov	r3, r0
 8007eb8:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8007eba:	bf00      	nop
 8007ebc:	370c      	adds	r7, #12
 8007ebe:	46bd      	mov	sp, r7
 8007ec0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ec4:	4770      	bx	lr
	...

08007ec8 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8007ec8:	b480      	push	{r7}
 8007eca:	b085      	sub	sp, #20
 8007ecc:	af00      	add	r7, sp, #0
 8007ece:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8007ed0:	687b      	ldr	r3, [r7, #4]
 8007ed2:	2b00      	cmp	r3, #0
 8007ed4:	d141      	bne.n	8007f5a <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8007ed6:	4b4b      	ldr	r3, [pc, #300]	@ (8008004 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8007ed8:	681b      	ldr	r3, [r3, #0]
 8007eda:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8007ede:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007ee2:	d131      	bne.n	8007f48 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8007ee4:	4b47      	ldr	r3, [pc, #284]	@ (8008004 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8007ee6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007eea:	4a46      	ldr	r2, [pc, #280]	@ (8008004 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8007eec:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8007ef0:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8007ef4:	4b43      	ldr	r3, [pc, #268]	@ (8008004 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8007ef6:	681b      	ldr	r3, [r3, #0]
 8007ef8:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8007efc:	4a41      	ldr	r2, [pc, #260]	@ (8008004 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8007efe:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8007f02:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8007f04:	4b40      	ldr	r3, [pc, #256]	@ (8008008 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8007f06:	681b      	ldr	r3, [r3, #0]
 8007f08:	2232      	movs	r2, #50	@ 0x32
 8007f0a:	fb02 f303 	mul.w	r3, r2, r3
 8007f0e:	4a3f      	ldr	r2, [pc, #252]	@ (800800c <HAL_PWREx_ControlVoltageScaling+0x144>)
 8007f10:	fba2 2303 	umull	r2, r3, r2, r3
 8007f14:	0c9b      	lsrs	r3, r3, #18
 8007f16:	3301      	adds	r3, #1
 8007f18:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8007f1a:	e002      	b.n	8007f22 <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8007f1c:	68fb      	ldr	r3, [r7, #12]
 8007f1e:	3b01      	subs	r3, #1
 8007f20:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8007f22:	4b38      	ldr	r3, [pc, #224]	@ (8008004 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8007f24:	695b      	ldr	r3, [r3, #20]
 8007f26:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8007f2a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007f2e:	d102      	bne.n	8007f36 <HAL_PWREx_ControlVoltageScaling+0x6e>
 8007f30:	68fb      	ldr	r3, [r7, #12]
 8007f32:	2b00      	cmp	r3, #0
 8007f34:	d1f2      	bne.n	8007f1c <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8007f36:	4b33      	ldr	r3, [pc, #204]	@ (8008004 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8007f38:	695b      	ldr	r3, [r3, #20]
 8007f3a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8007f3e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007f42:	d158      	bne.n	8007ff6 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8007f44:	2303      	movs	r3, #3
 8007f46:	e057      	b.n	8007ff8 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8007f48:	4b2e      	ldr	r3, [pc, #184]	@ (8008004 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8007f4a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007f4e:	4a2d      	ldr	r2, [pc, #180]	@ (8008004 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8007f50:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8007f54:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8007f58:	e04d      	b.n	8007ff6 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8007f5a:	687b      	ldr	r3, [r7, #4]
 8007f5c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007f60:	d141      	bne.n	8007fe6 <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8007f62:	4b28      	ldr	r3, [pc, #160]	@ (8008004 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8007f64:	681b      	ldr	r3, [r3, #0]
 8007f66:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8007f6a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007f6e:	d131      	bne.n	8007fd4 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8007f70:	4b24      	ldr	r3, [pc, #144]	@ (8008004 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8007f72:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007f76:	4a23      	ldr	r2, [pc, #140]	@ (8008004 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8007f78:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8007f7c:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8007f80:	4b20      	ldr	r3, [pc, #128]	@ (8008004 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8007f82:	681b      	ldr	r3, [r3, #0]
 8007f84:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8007f88:	4a1e      	ldr	r2, [pc, #120]	@ (8008004 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8007f8a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8007f8e:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8007f90:	4b1d      	ldr	r3, [pc, #116]	@ (8008008 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8007f92:	681b      	ldr	r3, [r3, #0]
 8007f94:	2232      	movs	r2, #50	@ 0x32
 8007f96:	fb02 f303 	mul.w	r3, r2, r3
 8007f9a:	4a1c      	ldr	r2, [pc, #112]	@ (800800c <HAL_PWREx_ControlVoltageScaling+0x144>)
 8007f9c:	fba2 2303 	umull	r2, r3, r2, r3
 8007fa0:	0c9b      	lsrs	r3, r3, #18
 8007fa2:	3301      	adds	r3, #1
 8007fa4:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8007fa6:	e002      	b.n	8007fae <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8007fa8:	68fb      	ldr	r3, [r7, #12]
 8007faa:	3b01      	subs	r3, #1
 8007fac:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8007fae:	4b15      	ldr	r3, [pc, #84]	@ (8008004 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8007fb0:	695b      	ldr	r3, [r3, #20]
 8007fb2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8007fb6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007fba:	d102      	bne.n	8007fc2 <HAL_PWREx_ControlVoltageScaling+0xfa>
 8007fbc:	68fb      	ldr	r3, [r7, #12]
 8007fbe:	2b00      	cmp	r3, #0
 8007fc0:	d1f2      	bne.n	8007fa8 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8007fc2:	4b10      	ldr	r3, [pc, #64]	@ (8008004 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8007fc4:	695b      	ldr	r3, [r3, #20]
 8007fc6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8007fca:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007fce:	d112      	bne.n	8007ff6 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8007fd0:	2303      	movs	r3, #3
 8007fd2:	e011      	b.n	8007ff8 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8007fd4:	4b0b      	ldr	r3, [pc, #44]	@ (8008004 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8007fd6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007fda:	4a0a      	ldr	r2, [pc, #40]	@ (8008004 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8007fdc:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8007fe0:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8007fe4:	e007      	b.n	8007ff6 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8007fe6:	4b07      	ldr	r3, [pc, #28]	@ (8008004 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8007fe8:	681b      	ldr	r3, [r3, #0]
 8007fea:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8007fee:	4a05      	ldr	r2, [pc, #20]	@ (8008004 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8007ff0:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8007ff4:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 8007ff6:	2300      	movs	r3, #0
}
 8007ff8:	4618      	mov	r0, r3
 8007ffa:	3714      	adds	r7, #20
 8007ffc:	46bd      	mov	sp, r7
 8007ffe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008002:	4770      	bx	lr
 8008004:	40007000 	.word	0x40007000
 8008008:	20000008 	.word	0x20000008
 800800c:	431bde83 	.word	0x431bde83

08008010 <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 8008010:	b480      	push	{r7}
 8008012:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 8008014:	4b05      	ldr	r3, [pc, #20]	@ (800802c <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8008016:	689b      	ldr	r3, [r3, #8]
 8008018:	4a04      	ldr	r2, [pc, #16]	@ (800802c <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 800801a:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800801e:	6093      	str	r3, [r2, #8]
}
 8008020:	bf00      	nop
 8008022:	46bd      	mov	sp, r7
 8008024:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008028:	4770      	bx	lr
 800802a:	bf00      	nop
 800802c:	40007000 	.word	0x40007000

08008030 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8008030:	b580      	push	{r7, lr}
 8008032:	b088      	sub	sp, #32
 8008034:	af00      	add	r7, sp, #0
 8008036:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8008038:	687b      	ldr	r3, [r7, #4]
 800803a:	2b00      	cmp	r3, #0
 800803c:	d101      	bne.n	8008042 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800803e:	2301      	movs	r3, #1
 8008040:	e2fe      	b.n	8008640 <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8008042:	687b      	ldr	r3, [r7, #4]
 8008044:	681b      	ldr	r3, [r3, #0]
 8008046:	f003 0301 	and.w	r3, r3, #1
 800804a:	2b00      	cmp	r3, #0
 800804c:	d075      	beq.n	800813a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800804e:	4b97      	ldr	r3, [pc, #604]	@ (80082ac <HAL_RCC_OscConfig+0x27c>)
 8008050:	689b      	ldr	r3, [r3, #8]
 8008052:	f003 030c 	and.w	r3, r3, #12
 8008056:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8008058:	4b94      	ldr	r3, [pc, #592]	@ (80082ac <HAL_RCC_OscConfig+0x27c>)
 800805a:	68db      	ldr	r3, [r3, #12]
 800805c:	f003 0303 	and.w	r3, r3, #3
 8008060:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 8008062:	69bb      	ldr	r3, [r7, #24]
 8008064:	2b0c      	cmp	r3, #12
 8008066:	d102      	bne.n	800806e <HAL_RCC_OscConfig+0x3e>
 8008068:	697b      	ldr	r3, [r7, #20]
 800806a:	2b03      	cmp	r3, #3
 800806c:	d002      	beq.n	8008074 <HAL_RCC_OscConfig+0x44>
 800806e:	69bb      	ldr	r3, [r7, #24]
 8008070:	2b08      	cmp	r3, #8
 8008072:	d10b      	bne.n	800808c <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8008074:	4b8d      	ldr	r3, [pc, #564]	@ (80082ac <HAL_RCC_OscConfig+0x27c>)
 8008076:	681b      	ldr	r3, [r3, #0]
 8008078:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800807c:	2b00      	cmp	r3, #0
 800807e:	d05b      	beq.n	8008138 <HAL_RCC_OscConfig+0x108>
 8008080:	687b      	ldr	r3, [r7, #4]
 8008082:	685b      	ldr	r3, [r3, #4]
 8008084:	2b00      	cmp	r3, #0
 8008086:	d157      	bne.n	8008138 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8008088:	2301      	movs	r3, #1
 800808a:	e2d9      	b.n	8008640 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800808c:	687b      	ldr	r3, [r7, #4]
 800808e:	685b      	ldr	r3, [r3, #4]
 8008090:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8008094:	d106      	bne.n	80080a4 <HAL_RCC_OscConfig+0x74>
 8008096:	4b85      	ldr	r3, [pc, #532]	@ (80082ac <HAL_RCC_OscConfig+0x27c>)
 8008098:	681b      	ldr	r3, [r3, #0]
 800809a:	4a84      	ldr	r2, [pc, #528]	@ (80082ac <HAL_RCC_OscConfig+0x27c>)
 800809c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80080a0:	6013      	str	r3, [r2, #0]
 80080a2:	e01d      	b.n	80080e0 <HAL_RCC_OscConfig+0xb0>
 80080a4:	687b      	ldr	r3, [r7, #4]
 80080a6:	685b      	ldr	r3, [r3, #4]
 80080a8:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80080ac:	d10c      	bne.n	80080c8 <HAL_RCC_OscConfig+0x98>
 80080ae:	4b7f      	ldr	r3, [pc, #508]	@ (80082ac <HAL_RCC_OscConfig+0x27c>)
 80080b0:	681b      	ldr	r3, [r3, #0]
 80080b2:	4a7e      	ldr	r2, [pc, #504]	@ (80082ac <HAL_RCC_OscConfig+0x27c>)
 80080b4:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80080b8:	6013      	str	r3, [r2, #0]
 80080ba:	4b7c      	ldr	r3, [pc, #496]	@ (80082ac <HAL_RCC_OscConfig+0x27c>)
 80080bc:	681b      	ldr	r3, [r3, #0]
 80080be:	4a7b      	ldr	r2, [pc, #492]	@ (80082ac <HAL_RCC_OscConfig+0x27c>)
 80080c0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80080c4:	6013      	str	r3, [r2, #0]
 80080c6:	e00b      	b.n	80080e0 <HAL_RCC_OscConfig+0xb0>
 80080c8:	4b78      	ldr	r3, [pc, #480]	@ (80082ac <HAL_RCC_OscConfig+0x27c>)
 80080ca:	681b      	ldr	r3, [r3, #0]
 80080cc:	4a77      	ldr	r2, [pc, #476]	@ (80082ac <HAL_RCC_OscConfig+0x27c>)
 80080ce:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80080d2:	6013      	str	r3, [r2, #0]
 80080d4:	4b75      	ldr	r3, [pc, #468]	@ (80082ac <HAL_RCC_OscConfig+0x27c>)
 80080d6:	681b      	ldr	r3, [r3, #0]
 80080d8:	4a74      	ldr	r2, [pc, #464]	@ (80082ac <HAL_RCC_OscConfig+0x27c>)
 80080da:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80080de:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80080e0:	687b      	ldr	r3, [r7, #4]
 80080e2:	685b      	ldr	r3, [r3, #4]
 80080e4:	2b00      	cmp	r3, #0
 80080e6:	d013      	beq.n	8008110 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80080e8:	f7fd fb38 	bl	800575c <HAL_GetTick>
 80080ec:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80080ee:	e008      	b.n	8008102 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80080f0:	f7fd fb34 	bl	800575c <HAL_GetTick>
 80080f4:	4602      	mov	r2, r0
 80080f6:	693b      	ldr	r3, [r7, #16]
 80080f8:	1ad3      	subs	r3, r2, r3
 80080fa:	2b64      	cmp	r3, #100	@ 0x64
 80080fc:	d901      	bls.n	8008102 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80080fe:	2303      	movs	r3, #3
 8008100:	e29e      	b.n	8008640 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8008102:	4b6a      	ldr	r3, [pc, #424]	@ (80082ac <HAL_RCC_OscConfig+0x27c>)
 8008104:	681b      	ldr	r3, [r3, #0]
 8008106:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800810a:	2b00      	cmp	r3, #0
 800810c:	d0f0      	beq.n	80080f0 <HAL_RCC_OscConfig+0xc0>
 800810e:	e014      	b.n	800813a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008110:	f7fd fb24 	bl	800575c <HAL_GetTick>
 8008114:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8008116:	e008      	b.n	800812a <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8008118:	f7fd fb20 	bl	800575c <HAL_GetTick>
 800811c:	4602      	mov	r2, r0
 800811e:	693b      	ldr	r3, [r7, #16]
 8008120:	1ad3      	subs	r3, r2, r3
 8008122:	2b64      	cmp	r3, #100	@ 0x64
 8008124:	d901      	bls.n	800812a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8008126:	2303      	movs	r3, #3
 8008128:	e28a      	b.n	8008640 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800812a:	4b60      	ldr	r3, [pc, #384]	@ (80082ac <HAL_RCC_OscConfig+0x27c>)
 800812c:	681b      	ldr	r3, [r3, #0]
 800812e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8008132:	2b00      	cmp	r3, #0
 8008134:	d1f0      	bne.n	8008118 <HAL_RCC_OscConfig+0xe8>
 8008136:	e000      	b.n	800813a <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8008138:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800813a:	687b      	ldr	r3, [r7, #4]
 800813c:	681b      	ldr	r3, [r3, #0]
 800813e:	f003 0302 	and.w	r3, r3, #2
 8008142:	2b00      	cmp	r3, #0
 8008144:	d075      	beq.n	8008232 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8008146:	4b59      	ldr	r3, [pc, #356]	@ (80082ac <HAL_RCC_OscConfig+0x27c>)
 8008148:	689b      	ldr	r3, [r3, #8]
 800814a:	f003 030c 	and.w	r3, r3, #12
 800814e:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8008150:	4b56      	ldr	r3, [pc, #344]	@ (80082ac <HAL_RCC_OscConfig+0x27c>)
 8008152:	68db      	ldr	r3, [r3, #12]
 8008154:	f003 0303 	and.w	r3, r3, #3
 8008158:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 800815a:	69bb      	ldr	r3, [r7, #24]
 800815c:	2b0c      	cmp	r3, #12
 800815e:	d102      	bne.n	8008166 <HAL_RCC_OscConfig+0x136>
 8008160:	697b      	ldr	r3, [r7, #20]
 8008162:	2b02      	cmp	r3, #2
 8008164:	d002      	beq.n	800816c <HAL_RCC_OscConfig+0x13c>
 8008166:	69bb      	ldr	r3, [r7, #24]
 8008168:	2b04      	cmp	r3, #4
 800816a:	d11f      	bne.n	80081ac <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800816c:	4b4f      	ldr	r3, [pc, #316]	@ (80082ac <HAL_RCC_OscConfig+0x27c>)
 800816e:	681b      	ldr	r3, [r3, #0]
 8008170:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8008174:	2b00      	cmp	r3, #0
 8008176:	d005      	beq.n	8008184 <HAL_RCC_OscConfig+0x154>
 8008178:	687b      	ldr	r3, [r7, #4]
 800817a:	68db      	ldr	r3, [r3, #12]
 800817c:	2b00      	cmp	r3, #0
 800817e:	d101      	bne.n	8008184 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 8008180:	2301      	movs	r3, #1
 8008182:	e25d      	b.n	8008640 <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8008184:	4b49      	ldr	r3, [pc, #292]	@ (80082ac <HAL_RCC_OscConfig+0x27c>)
 8008186:	685b      	ldr	r3, [r3, #4]
 8008188:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 800818c:	687b      	ldr	r3, [r7, #4]
 800818e:	691b      	ldr	r3, [r3, #16]
 8008190:	061b      	lsls	r3, r3, #24
 8008192:	4946      	ldr	r1, [pc, #280]	@ (80082ac <HAL_RCC_OscConfig+0x27c>)
 8008194:	4313      	orrs	r3, r2
 8008196:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8008198:	4b45      	ldr	r3, [pc, #276]	@ (80082b0 <HAL_RCC_OscConfig+0x280>)
 800819a:	681b      	ldr	r3, [r3, #0]
 800819c:	4618      	mov	r0, r3
 800819e:	f7fd fa91 	bl	80056c4 <HAL_InitTick>
 80081a2:	4603      	mov	r3, r0
 80081a4:	2b00      	cmp	r3, #0
 80081a6:	d043      	beq.n	8008230 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 80081a8:	2301      	movs	r3, #1
 80081aa:	e249      	b.n	8008640 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80081ac:	687b      	ldr	r3, [r7, #4]
 80081ae:	68db      	ldr	r3, [r3, #12]
 80081b0:	2b00      	cmp	r3, #0
 80081b2:	d023      	beq.n	80081fc <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80081b4:	4b3d      	ldr	r3, [pc, #244]	@ (80082ac <HAL_RCC_OscConfig+0x27c>)
 80081b6:	681b      	ldr	r3, [r3, #0]
 80081b8:	4a3c      	ldr	r2, [pc, #240]	@ (80082ac <HAL_RCC_OscConfig+0x27c>)
 80081ba:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80081be:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80081c0:	f7fd facc 	bl	800575c <HAL_GetTick>
 80081c4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80081c6:	e008      	b.n	80081da <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80081c8:	f7fd fac8 	bl	800575c <HAL_GetTick>
 80081cc:	4602      	mov	r2, r0
 80081ce:	693b      	ldr	r3, [r7, #16]
 80081d0:	1ad3      	subs	r3, r2, r3
 80081d2:	2b02      	cmp	r3, #2
 80081d4:	d901      	bls.n	80081da <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 80081d6:	2303      	movs	r3, #3
 80081d8:	e232      	b.n	8008640 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80081da:	4b34      	ldr	r3, [pc, #208]	@ (80082ac <HAL_RCC_OscConfig+0x27c>)
 80081dc:	681b      	ldr	r3, [r3, #0]
 80081de:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80081e2:	2b00      	cmp	r3, #0
 80081e4:	d0f0      	beq.n	80081c8 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80081e6:	4b31      	ldr	r3, [pc, #196]	@ (80082ac <HAL_RCC_OscConfig+0x27c>)
 80081e8:	685b      	ldr	r3, [r3, #4]
 80081ea:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 80081ee:	687b      	ldr	r3, [r7, #4]
 80081f0:	691b      	ldr	r3, [r3, #16]
 80081f2:	061b      	lsls	r3, r3, #24
 80081f4:	492d      	ldr	r1, [pc, #180]	@ (80082ac <HAL_RCC_OscConfig+0x27c>)
 80081f6:	4313      	orrs	r3, r2
 80081f8:	604b      	str	r3, [r1, #4]
 80081fa:	e01a      	b.n	8008232 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80081fc:	4b2b      	ldr	r3, [pc, #172]	@ (80082ac <HAL_RCC_OscConfig+0x27c>)
 80081fe:	681b      	ldr	r3, [r3, #0]
 8008200:	4a2a      	ldr	r2, [pc, #168]	@ (80082ac <HAL_RCC_OscConfig+0x27c>)
 8008202:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8008206:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008208:	f7fd faa8 	bl	800575c <HAL_GetTick>
 800820c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800820e:	e008      	b.n	8008222 <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8008210:	f7fd faa4 	bl	800575c <HAL_GetTick>
 8008214:	4602      	mov	r2, r0
 8008216:	693b      	ldr	r3, [r7, #16]
 8008218:	1ad3      	subs	r3, r2, r3
 800821a:	2b02      	cmp	r3, #2
 800821c:	d901      	bls.n	8008222 <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 800821e:	2303      	movs	r3, #3
 8008220:	e20e      	b.n	8008640 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8008222:	4b22      	ldr	r3, [pc, #136]	@ (80082ac <HAL_RCC_OscConfig+0x27c>)
 8008224:	681b      	ldr	r3, [r3, #0]
 8008226:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800822a:	2b00      	cmp	r3, #0
 800822c:	d1f0      	bne.n	8008210 <HAL_RCC_OscConfig+0x1e0>
 800822e:	e000      	b.n	8008232 <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8008230:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8008232:	687b      	ldr	r3, [r7, #4]
 8008234:	681b      	ldr	r3, [r3, #0]
 8008236:	f003 0308 	and.w	r3, r3, #8
 800823a:	2b00      	cmp	r3, #0
 800823c:	d041      	beq.n	80082c2 <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800823e:	687b      	ldr	r3, [r7, #4]
 8008240:	695b      	ldr	r3, [r3, #20]
 8008242:	2b00      	cmp	r3, #0
 8008244:	d01c      	beq.n	8008280 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8008246:	4b19      	ldr	r3, [pc, #100]	@ (80082ac <HAL_RCC_OscConfig+0x27c>)
 8008248:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800824c:	4a17      	ldr	r2, [pc, #92]	@ (80082ac <HAL_RCC_OscConfig+0x27c>)
 800824e:	f043 0301 	orr.w	r3, r3, #1
 8008252:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008256:	f7fd fa81 	bl	800575c <HAL_GetTick>
 800825a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800825c:	e008      	b.n	8008270 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800825e:	f7fd fa7d 	bl	800575c <HAL_GetTick>
 8008262:	4602      	mov	r2, r0
 8008264:	693b      	ldr	r3, [r7, #16]
 8008266:	1ad3      	subs	r3, r2, r3
 8008268:	2b02      	cmp	r3, #2
 800826a:	d901      	bls.n	8008270 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 800826c:	2303      	movs	r3, #3
 800826e:	e1e7      	b.n	8008640 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8008270:	4b0e      	ldr	r3, [pc, #56]	@ (80082ac <HAL_RCC_OscConfig+0x27c>)
 8008272:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8008276:	f003 0302 	and.w	r3, r3, #2
 800827a:	2b00      	cmp	r3, #0
 800827c:	d0ef      	beq.n	800825e <HAL_RCC_OscConfig+0x22e>
 800827e:	e020      	b.n	80082c2 <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8008280:	4b0a      	ldr	r3, [pc, #40]	@ (80082ac <HAL_RCC_OscConfig+0x27c>)
 8008282:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8008286:	4a09      	ldr	r2, [pc, #36]	@ (80082ac <HAL_RCC_OscConfig+0x27c>)
 8008288:	f023 0301 	bic.w	r3, r3, #1
 800828c:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008290:	f7fd fa64 	bl	800575c <HAL_GetTick>
 8008294:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8008296:	e00d      	b.n	80082b4 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8008298:	f7fd fa60 	bl	800575c <HAL_GetTick>
 800829c:	4602      	mov	r2, r0
 800829e:	693b      	ldr	r3, [r7, #16]
 80082a0:	1ad3      	subs	r3, r2, r3
 80082a2:	2b02      	cmp	r3, #2
 80082a4:	d906      	bls.n	80082b4 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 80082a6:	2303      	movs	r3, #3
 80082a8:	e1ca      	b.n	8008640 <HAL_RCC_OscConfig+0x610>
 80082aa:	bf00      	nop
 80082ac:	40021000 	.word	0x40021000
 80082b0:	200002dc 	.word	0x200002dc
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80082b4:	4b8c      	ldr	r3, [pc, #560]	@ (80084e8 <HAL_RCC_OscConfig+0x4b8>)
 80082b6:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80082ba:	f003 0302 	and.w	r3, r3, #2
 80082be:	2b00      	cmp	r3, #0
 80082c0:	d1ea      	bne.n	8008298 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80082c2:	687b      	ldr	r3, [r7, #4]
 80082c4:	681b      	ldr	r3, [r3, #0]
 80082c6:	f003 0304 	and.w	r3, r3, #4
 80082ca:	2b00      	cmp	r3, #0
 80082cc:	f000 80a6 	beq.w	800841c <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 80082d0:	2300      	movs	r3, #0
 80082d2:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80082d4:	4b84      	ldr	r3, [pc, #528]	@ (80084e8 <HAL_RCC_OscConfig+0x4b8>)
 80082d6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80082d8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80082dc:	2b00      	cmp	r3, #0
 80082de:	d101      	bne.n	80082e4 <HAL_RCC_OscConfig+0x2b4>
 80082e0:	2301      	movs	r3, #1
 80082e2:	e000      	b.n	80082e6 <HAL_RCC_OscConfig+0x2b6>
 80082e4:	2300      	movs	r3, #0
 80082e6:	2b00      	cmp	r3, #0
 80082e8:	d00d      	beq.n	8008306 <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80082ea:	4b7f      	ldr	r3, [pc, #508]	@ (80084e8 <HAL_RCC_OscConfig+0x4b8>)
 80082ec:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80082ee:	4a7e      	ldr	r2, [pc, #504]	@ (80084e8 <HAL_RCC_OscConfig+0x4b8>)
 80082f0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80082f4:	6593      	str	r3, [r2, #88]	@ 0x58
 80082f6:	4b7c      	ldr	r3, [pc, #496]	@ (80084e8 <HAL_RCC_OscConfig+0x4b8>)
 80082f8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80082fa:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80082fe:	60fb      	str	r3, [r7, #12]
 8008300:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8008302:	2301      	movs	r3, #1
 8008304:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8008306:	4b79      	ldr	r3, [pc, #484]	@ (80084ec <HAL_RCC_OscConfig+0x4bc>)
 8008308:	681b      	ldr	r3, [r3, #0]
 800830a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800830e:	2b00      	cmp	r3, #0
 8008310:	d118      	bne.n	8008344 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8008312:	4b76      	ldr	r3, [pc, #472]	@ (80084ec <HAL_RCC_OscConfig+0x4bc>)
 8008314:	681b      	ldr	r3, [r3, #0]
 8008316:	4a75      	ldr	r2, [pc, #468]	@ (80084ec <HAL_RCC_OscConfig+0x4bc>)
 8008318:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800831c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800831e:	f7fd fa1d 	bl	800575c <HAL_GetTick>
 8008322:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8008324:	e008      	b.n	8008338 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8008326:	f7fd fa19 	bl	800575c <HAL_GetTick>
 800832a:	4602      	mov	r2, r0
 800832c:	693b      	ldr	r3, [r7, #16]
 800832e:	1ad3      	subs	r3, r2, r3
 8008330:	2b02      	cmp	r3, #2
 8008332:	d901      	bls.n	8008338 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 8008334:	2303      	movs	r3, #3
 8008336:	e183      	b.n	8008640 <HAL_RCC_OscConfig+0x610>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8008338:	4b6c      	ldr	r3, [pc, #432]	@ (80084ec <HAL_RCC_OscConfig+0x4bc>)
 800833a:	681b      	ldr	r3, [r3, #0]
 800833c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008340:	2b00      	cmp	r3, #0
 8008342:	d0f0      	beq.n	8008326 <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8008344:	687b      	ldr	r3, [r7, #4]
 8008346:	689b      	ldr	r3, [r3, #8]
 8008348:	2b01      	cmp	r3, #1
 800834a:	d108      	bne.n	800835e <HAL_RCC_OscConfig+0x32e>
 800834c:	4b66      	ldr	r3, [pc, #408]	@ (80084e8 <HAL_RCC_OscConfig+0x4b8>)
 800834e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008352:	4a65      	ldr	r2, [pc, #404]	@ (80084e8 <HAL_RCC_OscConfig+0x4b8>)
 8008354:	f043 0301 	orr.w	r3, r3, #1
 8008358:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800835c:	e024      	b.n	80083a8 <HAL_RCC_OscConfig+0x378>
 800835e:	687b      	ldr	r3, [r7, #4]
 8008360:	689b      	ldr	r3, [r3, #8]
 8008362:	2b05      	cmp	r3, #5
 8008364:	d110      	bne.n	8008388 <HAL_RCC_OscConfig+0x358>
 8008366:	4b60      	ldr	r3, [pc, #384]	@ (80084e8 <HAL_RCC_OscConfig+0x4b8>)
 8008368:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800836c:	4a5e      	ldr	r2, [pc, #376]	@ (80084e8 <HAL_RCC_OscConfig+0x4b8>)
 800836e:	f043 0304 	orr.w	r3, r3, #4
 8008372:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8008376:	4b5c      	ldr	r3, [pc, #368]	@ (80084e8 <HAL_RCC_OscConfig+0x4b8>)
 8008378:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800837c:	4a5a      	ldr	r2, [pc, #360]	@ (80084e8 <HAL_RCC_OscConfig+0x4b8>)
 800837e:	f043 0301 	orr.w	r3, r3, #1
 8008382:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8008386:	e00f      	b.n	80083a8 <HAL_RCC_OscConfig+0x378>
 8008388:	4b57      	ldr	r3, [pc, #348]	@ (80084e8 <HAL_RCC_OscConfig+0x4b8>)
 800838a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800838e:	4a56      	ldr	r2, [pc, #344]	@ (80084e8 <HAL_RCC_OscConfig+0x4b8>)
 8008390:	f023 0301 	bic.w	r3, r3, #1
 8008394:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8008398:	4b53      	ldr	r3, [pc, #332]	@ (80084e8 <HAL_RCC_OscConfig+0x4b8>)
 800839a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800839e:	4a52      	ldr	r2, [pc, #328]	@ (80084e8 <HAL_RCC_OscConfig+0x4b8>)
 80083a0:	f023 0304 	bic.w	r3, r3, #4
 80083a4:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80083a8:	687b      	ldr	r3, [r7, #4]
 80083aa:	689b      	ldr	r3, [r3, #8]
 80083ac:	2b00      	cmp	r3, #0
 80083ae:	d016      	beq.n	80083de <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80083b0:	f7fd f9d4 	bl	800575c <HAL_GetTick>
 80083b4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80083b6:	e00a      	b.n	80083ce <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80083b8:	f7fd f9d0 	bl	800575c <HAL_GetTick>
 80083bc:	4602      	mov	r2, r0
 80083be:	693b      	ldr	r3, [r7, #16]
 80083c0:	1ad3      	subs	r3, r2, r3
 80083c2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80083c6:	4293      	cmp	r3, r2
 80083c8:	d901      	bls.n	80083ce <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 80083ca:	2303      	movs	r3, #3
 80083cc:	e138      	b.n	8008640 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80083ce:	4b46      	ldr	r3, [pc, #280]	@ (80084e8 <HAL_RCC_OscConfig+0x4b8>)
 80083d0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80083d4:	f003 0302 	and.w	r3, r3, #2
 80083d8:	2b00      	cmp	r3, #0
 80083da:	d0ed      	beq.n	80083b8 <HAL_RCC_OscConfig+0x388>
 80083dc:	e015      	b.n	800840a <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80083de:	f7fd f9bd 	bl	800575c <HAL_GetTick>
 80083e2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80083e4:	e00a      	b.n	80083fc <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80083e6:	f7fd f9b9 	bl	800575c <HAL_GetTick>
 80083ea:	4602      	mov	r2, r0
 80083ec:	693b      	ldr	r3, [r7, #16]
 80083ee:	1ad3      	subs	r3, r2, r3
 80083f0:	f241 3288 	movw	r2, #5000	@ 0x1388
 80083f4:	4293      	cmp	r3, r2
 80083f6:	d901      	bls.n	80083fc <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 80083f8:	2303      	movs	r3, #3
 80083fa:	e121      	b.n	8008640 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80083fc:	4b3a      	ldr	r3, [pc, #232]	@ (80084e8 <HAL_RCC_OscConfig+0x4b8>)
 80083fe:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008402:	f003 0302 	and.w	r3, r3, #2
 8008406:	2b00      	cmp	r3, #0
 8008408:	d1ed      	bne.n	80083e6 <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800840a:	7ffb      	ldrb	r3, [r7, #31]
 800840c:	2b01      	cmp	r3, #1
 800840e:	d105      	bne.n	800841c <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8008410:	4b35      	ldr	r3, [pc, #212]	@ (80084e8 <HAL_RCC_OscConfig+0x4b8>)
 8008412:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008414:	4a34      	ldr	r2, [pc, #208]	@ (80084e8 <HAL_RCC_OscConfig+0x4b8>)
 8008416:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800841a:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800841c:	687b      	ldr	r3, [r7, #4]
 800841e:	681b      	ldr	r3, [r3, #0]
 8008420:	f003 0320 	and.w	r3, r3, #32
 8008424:	2b00      	cmp	r3, #0
 8008426:	d03c      	beq.n	80084a2 <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8008428:	687b      	ldr	r3, [r7, #4]
 800842a:	699b      	ldr	r3, [r3, #24]
 800842c:	2b00      	cmp	r3, #0
 800842e:	d01c      	beq.n	800846a <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8008430:	4b2d      	ldr	r3, [pc, #180]	@ (80084e8 <HAL_RCC_OscConfig+0x4b8>)
 8008432:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8008436:	4a2c      	ldr	r2, [pc, #176]	@ (80084e8 <HAL_RCC_OscConfig+0x4b8>)
 8008438:	f043 0301 	orr.w	r3, r3, #1
 800843c:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008440:	f7fd f98c 	bl	800575c <HAL_GetTick>
 8008444:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8008446:	e008      	b.n	800845a <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8008448:	f7fd f988 	bl	800575c <HAL_GetTick>
 800844c:	4602      	mov	r2, r0
 800844e:	693b      	ldr	r3, [r7, #16]
 8008450:	1ad3      	subs	r3, r2, r3
 8008452:	2b02      	cmp	r3, #2
 8008454:	d901      	bls.n	800845a <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 8008456:	2303      	movs	r3, #3
 8008458:	e0f2      	b.n	8008640 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800845a:	4b23      	ldr	r3, [pc, #140]	@ (80084e8 <HAL_RCC_OscConfig+0x4b8>)
 800845c:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8008460:	f003 0302 	and.w	r3, r3, #2
 8008464:	2b00      	cmp	r3, #0
 8008466:	d0ef      	beq.n	8008448 <HAL_RCC_OscConfig+0x418>
 8008468:	e01b      	b.n	80084a2 <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800846a:	4b1f      	ldr	r3, [pc, #124]	@ (80084e8 <HAL_RCC_OscConfig+0x4b8>)
 800846c:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8008470:	4a1d      	ldr	r2, [pc, #116]	@ (80084e8 <HAL_RCC_OscConfig+0x4b8>)
 8008472:	f023 0301 	bic.w	r3, r3, #1
 8008476:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800847a:	f7fd f96f 	bl	800575c <HAL_GetTick>
 800847e:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8008480:	e008      	b.n	8008494 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8008482:	f7fd f96b 	bl	800575c <HAL_GetTick>
 8008486:	4602      	mov	r2, r0
 8008488:	693b      	ldr	r3, [r7, #16]
 800848a:	1ad3      	subs	r3, r2, r3
 800848c:	2b02      	cmp	r3, #2
 800848e:	d901      	bls.n	8008494 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 8008490:	2303      	movs	r3, #3
 8008492:	e0d5      	b.n	8008640 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8008494:	4b14      	ldr	r3, [pc, #80]	@ (80084e8 <HAL_RCC_OscConfig+0x4b8>)
 8008496:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800849a:	f003 0302 	and.w	r3, r3, #2
 800849e:	2b00      	cmp	r3, #0
 80084a0:	d1ef      	bne.n	8008482 <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80084a2:	687b      	ldr	r3, [r7, #4]
 80084a4:	69db      	ldr	r3, [r3, #28]
 80084a6:	2b00      	cmp	r3, #0
 80084a8:	f000 80c9 	beq.w	800863e <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80084ac:	4b0e      	ldr	r3, [pc, #56]	@ (80084e8 <HAL_RCC_OscConfig+0x4b8>)
 80084ae:	689b      	ldr	r3, [r3, #8]
 80084b0:	f003 030c 	and.w	r3, r3, #12
 80084b4:	2b0c      	cmp	r3, #12
 80084b6:	f000 8083 	beq.w	80085c0 <HAL_RCC_OscConfig+0x590>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80084ba:	687b      	ldr	r3, [r7, #4]
 80084bc:	69db      	ldr	r3, [r3, #28]
 80084be:	2b02      	cmp	r3, #2
 80084c0:	d15e      	bne.n	8008580 <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80084c2:	4b09      	ldr	r3, [pc, #36]	@ (80084e8 <HAL_RCC_OscConfig+0x4b8>)
 80084c4:	681b      	ldr	r3, [r3, #0]
 80084c6:	4a08      	ldr	r2, [pc, #32]	@ (80084e8 <HAL_RCC_OscConfig+0x4b8>)
 80084c8:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80084cc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80084ce:	f7fd f945 	bl	800575c <HAL_GetTick>
 80084d2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80084d4:	e00c      	b.n	80084f0 <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80084d6:	f7fd f941 	bl	800575c <HAL_GetTick>
 80084da:	4602      	mov	r2, r0
 80084dc:	693b      	ldr	r3, [r7, #16]
 80084de:	1ad3      	subs	r3, r2, r3
 80084e0:	2b02      	cmp	r3, #2
 80084e2:	d905      	bls.n	80084f0 <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 80084e4:	2303      	movs	r3, #3
 80084e6:	e0ab      	b.n	8008640 <HAL_RCC_OscConfig+0x610>
 80084e8:	40021000 	.word	0x40021000
 80084ec:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80084f0:	4b55      	ldr	r3, [pc, #340]	@ (8008648 <HAL_RCC_OscConfig+0x618>)
 80084f2:	681b      	ldr	r3, [r3, #0]
 80084f4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80084f8:	2b00      	cmp	r3, #0
 80084fa:	d1ec      	bne.n	80084d6 <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80084fc:	4b52      	ldr	r3, [pc, #328]	@ (8008648 <HAL_RCC_OscConfig+0x618>)
 80084fe:	68da      	ldr	r2, [r3, #12]
 8008500:	4b52      	ldr	r3, [pc, #328]	@ (800864c <HAL_RCC_OscConfig+0x61c>)
 8008502:	4013      	ands	r3, r2
 8008504:	687a      	ldr	r2, [r7, #4]
 8008506:	6a11      	ldr	r1, [r2, #32]
 8008508:	687a      	ldr	r2, [r7, #4]
 800850a:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 800850c:	3a01      	subs	r2, #1
 800850e:	0112      	lsls	r2, r2, #4
 8008510:	4311      	orrs	r1, r2
 8008512:	687a      	ldr	r2, [r7, #4]
 8008514:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 8008516:	0212      	lsls	r2, r2, #8
 8008518:	4311      	orrs	r1, r2
 800851a:	687a      	ldr	r2, [r7, #4]
 800851c:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 800851e:	0852      	lsrs	r2, r2, #1
 8008520:	3a01      	subs	r2, #1
 8008522:	0552      	lsls	r2, r2, #21
 8008524:	4311      	orrs	r1, r2
 8008526:	687a      	ldr	r2, [r7, #4]
 8008528:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 800852a:	0852      	lsrs	r2, r2, #1
 800852c:	3a01      	subs	r2, #1
 800852e:	0652      	lsls	r2, r2, #25
 8008530:	4311      	orrs	r1, r2
 8008532:	687a      	ldr	r2, [r7, #4]
 8008534:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8008536:	06d2      	lsls	r2, r2, #27
 8008538:	430a      	orrs	r2, r1
 800853a:	4943      	ldr	r1, [pc, #268]	@ (8008648 <HAL_RCC_OscConfig+0x618>)
 800853c:	4313      	orrs	r3, r2
 800853e:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8008540:	4b41      	ldr	r3, [pc, #260]	@ (8008648 <HAL_RCC_OscConfig+0x618>)
 8008542:	681b      	ldr	r3, [r3, #0]
 8008544:	4a40      	ldr	r2, [pc, #256]	@ (8008648 <HAL_RCC_OscConfig+0x618>)
 8008546:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800854a:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800854c:	4b3e      	ldr	r3, [pc, #248]	@ (8008648 <HAL_RCC_OscConfig+0x618>)
 800854e:	68db      	ldr	r3, [r3, #12]
 8008550:	4a3d      	ldr	r2, [pc, #244]	@ (8008648 <HAL_RCC_OscConfig+0x618>)
 8008552:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8008556:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008558:	f7fd f900 	bl	800575c <HAL_GetTick>
 800855c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800855e:	e008      	b.n	8008572 <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8008560:	f7fd f8fc 	bl	800575c <HAL_GetTick>
 8008564:	4602      	mov	r2, r0
 8008566:	693b      	ldr	r3, [r7, #16]
 8008568:	1ad3      	subs	r3, r2, r3
 800856a:	2b02      	cmp	r3, #2
 800856c:	d901      	bls.n	8008572 <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 800856e:	2303      	movs	r3, #3
 8008570:	e066      	b.n	8008640 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8008572:	4b35      	ldr	r3, [pc, #212]	@ (8008648 <HAL_RCC_OscConfig+0x618>)
 8008574:	681b      	ldr	r3, [r3, #0]
 8008576:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800857a:	2b00      	cmp	r3, #0
 800857c:	d0f0      	beq.n	8008560 <HAL_RCC_OscConfig+0x530>
 800857e:	e05e      	b.n	800863e <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8008580:	4b31      	ldr	r3, [pc, #196]	@ (8008648 <HAL_RCC_OscConfig+0x618>)
 8008582:	681b      	ldr	r3, [r3, #0]
 8008584:	4a30      	ldr	r2, [pc, #192]	@ (8008648 <HAL_RCC_OscConfig+0x618>)
 8008586:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800858a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800858c:	f7fd f8e6 	bl	800575c <HAL_GetTick>
 8008590:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8008592:	e008      	b.n	80085a6 <HAL_RCC_OscConfig+0x576>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8008594:	f7fd f8e2 	bl	800575c <HAL_GetTick>
 8008598:	4602      	mov	r2, r0
 800859a:	693b      	ldr	r3, [r7, #16]
 800859c:	1ad3      	subs	r3, r2, r3
 800859e:	2b02      	cmp	r3, #2
 80085a0:	d901      	bls.n	80085a6 <HAL_RCC_OscConfig+0x576>
          {
            return HAL_TIMEOUT;
 80085a2:	2303      	movs	r3, #3
 80085a4:	e04c      	b.n	8008640 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80085a6:	4b28      	ldr	r3, [pc, #160]	@ (8008648 <HAL_RCC_OscConfig+0x618>)
 80085a8:	681b      	ldr	r3, [r3, #0]
 80085aa:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80085ae:	2b00      	cmp	r3, #0
 80085b0:	d1f0      	bne.n	8008594 <HAL_RCC_OscConfig+0x564>
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 80085b2:	4b25      	ldr	r3, [pc, #148]	@ (8008648 <HAL_RCC_OscConfig+0x618>)
 80085b4:	68da      	ldr	r2, [r3, #12]
 80085b6:	4924      	ldr	r1, [pc, #144]	@ (8008648 <HAL_RCC_OscConfig+0x618>)
 80085b8:	4b25      	ldr	r3, [pc, #148]	@ (8008650 <HAL_RCC_OscConfig+0x620>)
 80085ba:	4013      	ands	r3, r2
 80085bc:	60cb      	str	r3, [r1, #12]
 80085be:	e03e      	b.n	800863e <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80085c0:	687b      	ldr	r3, [r7, #4]
 80085c2:	69db      	ldr	r3, [r3, #28]
 80085c4:	2b01      	cmp	r3, #1
 80085c6:	d101      	bne.n	80085cc <HAL_RCC_OscConfig+0x59c>
      {
        return HAL_ERROR;
 80085c8:	2301      	movs	r3, #1
 80085ca:	e039      	b.n	8008640 <HAL_RCC_OscConfig+0x610>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 80085cc:	4b1e      	ldr	r3, [pc, #120]	@ (8008648 <HAL_RCC_OscConfig+0x618>)
 80085ce:	68db      	ldr	r3, [r3, #12]
 80085d0:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80085d2:	697b      	ldr	r3, [r7, #20]
 80085d4:	f003 0203 	and.w	r2, r3, #3
 80085d8:	687b      	ldr	r3, [r7, #4]
 80085da:	6a1b      	ldr	r3, [r3, #32]
 80085dc:	429a      	cmp	r2, r3
 80085de:	d12c      	bne.n	800863a <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80085e0:	697b      	ldr	r3, [r7, #20]
 80085e2:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 80085e6:	687b      	ldr	r3, [r7, #4]
 80085e8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80085ea:	3b01      	subs	r3, #1
 80085ec:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80085ee:	429a      	cmp	r2, r3
 80085f0:	d123      	bne.n	800863a <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 80085f2:	697b      	ldr	r3, [r7, #20]
 80085f4:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 80085f8:	687b      	ldr	r3, [r7, #4]
 80085fa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80085fc:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80085fe:	429a      	cmp	r2, r3
 8008600:	d11b      	bne.n	800863a <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8008602:	697b      	ldr	r3, [r7, #20]
 8008604:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 8008608:	687b      	ldr	r3, [r7, #4]
 800860a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800860c:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 800860e:	429a      	cmp	r2, r3
 8008610:	d113      	bne.n	800863a <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8008612:	697b      	ldr	r3, [r7, #20]
 8008614:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8008618:	687b      	ldr	r3, [r7, #4]
 800861a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800861c:	085b      	lsrs	r3, r3, #1
 800861e:	3b01      	subs	r3, #1
 8008620:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8008622:	429a      	cmp	r2, r3
 8008624:	d109      	bne.n	800863a <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8008626:	697b      	ldr	r3, [r7, #20]
 8008628:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 800862c:	687b      	ldr	r3, [r7, #4]
 800862e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008630:	085b      	lsrs	r3, r3, #1
 8008632:	3b01      	subs	r3, #1
 8008634:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8008636:	429a      	cmp	r2, r3
 8008638:	d001      	beq.n	800863e <HAL_RCC_OscConfig+0x60e>
      {
        return HAL_ERROR;
 800863a:	2301      	movs	r3, #1
 800863c:	e000      	b.n	8008640 <HAL_RCC_OscConfig+0x610>
      }
    }
  }
  }

  return HAL_OK;
 800863e:	2300      	movs	r3, #0
}
 8008640:	4618      	mov	r0, r3
 8008642:	3720      	adds	r7, #32
 8008644:	46bd      	mov	sp, r7
 8008646:	bd80      	pop	{r7, pc}
 8008648:	40021000 	.word	0x40021000
 800864c:	019f800c 	.word	0x019f800c
 8008650:	feeefffc 	.word	0xfeeefffc

08008654 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8008654:	b580      	push	{r7, lr}
 8008656:	b086      	sub	sp, #24
 8008658:	af00      	add	r7, sp, #0
 800865a:	6078      	str	r0, [r7, #4]
 800865c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 800865e:	2300      	movs	r3, #0
 8008660:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8008662:	687b      	ldr	r3, [r7, #4]
 8008664:	2b00      	cmp	r3, #0
 8008666:	d101      	bne.n	800866c <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8008668:	2301      	movs	r3, #1
 800866a:	e11e      	b.n	80088aa <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800866c:	4b91      	ldr	r3, [pc, #580]	@ (80088b4 <HAL_RCC_ClockConfig+0x260>)
 800866e:	681b      	ldr	r3, [r3, #0]
 8008670:	f003 030f 	and.w	r3, r3, #15
 8008674:	683a      	ldr	r2, [r7, #0]
 8008676:	429a      	cmp	r2, r3
 8008678:	d910      	bls.n	800869c <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800867a:	4b8e      	ldr	r3, [pc, #568]	@ (80088b4 <HAL_RCC_ClockConfig+0x260>)
 800867c:	681b      	ldr	r3, [r3, #0]
 800867e:	f023 020f 	bic.w	r2, r3, #15
 8008682:	498c      	ldr	r1, [pc, #560]	@ (80088b4 <HAL_RCC_ClockConfig+0x260>)
 8008684:	683b      	ldr	r3, [r7, #0]
 8008686:	4313      	orrs	r3, r2
 8008688:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800868a:	4b8a      	ldr	r3, [pc, #552]	@ (80088b4 <HAL_RCC_ClockConfig+0x260>)
 800868c:	681b      	ldr	r3, [r3, #0]
 800868e:	f003 030f 	and.w	r3, r3, #15
 8008692:	683a      	ldr	r2, [r7, #0]
 8008694:	429a      	cmp	r2, r3
 8008696:	d001      	beq.n	800869c <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8008698:	2301      	movs	r3, #1
 800869a:	e106      	b.n	80088aa <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800869c:	687b      	ldr	r3, [r7, #4]
 800869e:	681b      	ldr	r3, [r3, #0]
 80086a0:	f003 0301 	and.w	r3, r3, #1
 80086a4:	2b00      	cmp	r3, #0
 80086a6:	d073      	beq.n	8008790 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80086a8:	687b      	ldr	r3, [r7, #4]
 80086aa:	685b      	ldr	r3, [r3, #4]
 80086ac:	2b03      	cmp	r3, #3
 80086ae:	d129      	bne.n	8008704 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80086b0:	4b81      	ldr	r3, [pc, #516]	@ (80088b8 <HAL_RCC_ClockConfig+0x264>)
 80086b2:	681b      	ldr	r3, [r3, #0]
 80086b4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80086b8:	2b00      	cmp	r3, #0
 80086ba:	d101      	bne.n	80086c0 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 80086bc:	2301      	movs	r3, #1
 80086be:	e0f4      	b.n	80088aa <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 80086c0:	f000 f99c 	bl	80089fc <RCC_GetSysClockFreqFromPLLSource>
 80086c4:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 80086c6:	693b      	ldr	r3, [r7, #16]
 80086c8:	4a7c      	ldr	r2, [pc, #496]	@ (80088bc <HAL_RCC_ClockConfig+0x268>)
 80086ca:	4293      	cmp	r3, r2
 80086cc:	d93f      	bls.n	800874e <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 80086ce:	4b7a      	ldr	r3, [pc, #488]	@ (80088b8 <HAL_RCC_ClockConfig+0x264>)
 80086d0:	689b      	ldr	r3, [r3, #8]
 80086d2:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80086d6:	2b00      	cmp	r3, #0
 80086d8:	d009      	beq.n	80086ee <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 80086da:	687b      	ldr	r3, [r7, #4]
 80086dc:	681b      	ldr	r3, [r3, #0]
 80086de:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 80086e2:	2b00      	cmp	r3, #0
 80086e4:	d033      	beq.n	800874e <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 80086e6:	687b      	ldr	r3, [r7, #4]
 80086e8:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 80086ea:	2b00      	cmp	r3, #0
 80086ec:	d12f      	bne.n	800874e <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 80086ee:	4b72      	ldr	r3, [pc, #456]	@ (80088b8 <HAL_RCC_ClockConfig+0x264>)
 80086f0:	689b      	ldr	r3, [r3, #8]
 80086f2:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80086f6:	4a70      	ldr	r2, [pc, #448]	@ (80088b8 <HAL_RCC_ClockConfig+0x264>)
 80086f8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80086fc:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 80086fe:	2380      	movs	r3, #128	@ 0x80
 8008700:	617b      	str	r3, [r7, #20]
 8008702:	e024      	b.n	800874e <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8008704:	687b      	ldr	r3, [r7, #4]
 8008706:	685b      	ldr	r3, [r3, #4]
 8008708:	2b02      	cmp	r3, #2
 800870a:	d107      	bne.n	800871c <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800870c:	4b6a      	ldr	r3, [pc, #424]	@ (80088b8 <HAL_RCC_ClockConfig+0x264>)
 800870e:	681b      	ldr	r3, [r3, #0]
 8008710:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8008714:	2b00      	cmp	r3, #0
 8008716:	d109      	bne.n	800872c <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8008718:	2301      	movs	r3, #1
 800871a:	e0c6      	b.n	80088aa <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800871c:	4b66      	ldr	r3, [pc, #408]	@ (80088b8 <HAL_RCC_ClockConfig+0x264>)
 800871e:	681b      	ldr	r3, [r3, #0]
 8008720:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8008724:	2b00      	cmp	r3, #0
 8008726:	d101      	bne.n	800872c <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8008728:	2301      	movs	r3, #1
 800872a:	e0be      	b.n	80088aa <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 800872c:	f000 f8ce 	bl	80088cc <HAL_RCC_GetSysClockFreq>
 8008730:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 8008732:	693b      	ldr	r3, [r7, #16]
 8008734:	4a61      	ldr	r2, [pc, #388]	@ (80088bc <HAL_RCC_ClockConfig+0x268>)
 8008736:	4293      	cmp	r3, r2
 8008738:	d909      	bls.n	800874e <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 800873a:	4b5f      	ldr	r3, [pc, #380]	@ (80088b8 <HAL_RCC_ClockConfig+0x264>)
 800873c:	689b      	ldr	r3, [r3, #8]
 800873e:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8008742:	4a5d      	ldr	r2, [pc, #372]	@ (80088b8 <HAL_RCC_ClockConfig+0x264>)
 8008744:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008748:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 800874a:	2380      	movs	r3, #128	@ 0x80
 800874c:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800874e:	4b5a      	ldr	r3, [pc, #360]	@ (80088b8 <HAL_RCC_ClockConfig+0x264>)
 8008750:	689b      	ldr	r3, [r3, #8]
 8008752:	f023 0203 	bic.w	r2, r3, #3
 8008756:	687b      	ldr	r3, [r7, #4]
 8008758:	685b      	ldr	r3, [r3, #4]
 800875a:	4957      	ldr	r1, [pc, #348]	@ (80088b8 <HAL_RCC_ClockConfig+0x264>)
 800875c:	4313      	orrs	r3, r2
 800875e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8008760:	f7fc fffc 	bl	800575c <HAL_GetTick>
 8008764:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8008766:	e00a      	b.n	800877e <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8008768:	f7fc fff8 	bl	800575c <HAL_GetTick>
 800876c:	4602      	mov	r2, r0
 800876e:	68fb      	ldr	r3, [r7, #12]
 8008770:	1ad3      	subs	r3, r2, r3
 8008772:	f241 3288 	movw	r2, #5000	@ 0x1388
 8008776:	4293      	cmp	r3, r2
 8008778:	d901      	bls.n	800877e <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 800877a:	2303      	movs	r3, #3
 800877c:	e095      	b.n	80088aa <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800877e:	4b4e      	ldr	r3, [pc, #312]	@ (80088b8 <HAL_RCC_ClockConfig+0x264>)
 8008780:	689b      	ldr	r3, [r3, #8]
 8008782:	f003 020c 	and.w	r2, r3, #12
 8008786:	687b      	ldr	r3, [r7, #4]
 8008788:	685b      	ldr	r3, [r3, #4]
 800878a:	009b      	lsls	r3, r3, #2
 800878c:	429a      	cmp	r2, r3
 800878e:	d1eb      	bne.n	8008768 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8008790:	687b      	ldr	r3, [r7, #4]
 8008792:	681b      	ldr	r3, [r3, #0]
 8008794:	f003 0302 	and.w	r3, r3, #2
 8008798:	2b00      	cmp	r3, #0
 800879a:	d023      	beq.n	80087e4 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800879c:	687b      	ldr	r3, [r7, #4]
 800879e:	681b      	ldr	r3, [r3, #0]
 80087a0:	f003 0304 	and.w	r3, r3, #4
 80087a4:	2b00      	cmp	r3, #0
 80087a6:	d005      	beq.n	80087b4 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80087a8:	4b43      	ldr	r3, [pc, #268]	@ (80088b8 <HAL_RCC_ClockConfig+0x264>)
 80087aa:	689b      	ldr	r3, [r3, #8]
 80087ac:	4a42      	ldr	r2, [pc, #264]	@ (80088b8 <HAL_RCC_ClockConfig+0x264>)
 80087ae:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 80087b2:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80087b4:	687b      	ldr	r3, [r7, #4]
 80087b6:	681b      	ldr	r3, [r3, #0]
 80087b8:	f003 0308 	and.w	r3, r3, #8
 80087bc:	2b00      	cmp	r3, #0
 80087be:	d007      	beq.n	80087d0 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 80087c0:	4b3d      	ldr	r3, [pc, #244]	@ (80088b8 <HAL_RCC_ClockConfig+0x264>)
 80087c2:	689b      	ldr	r3, [r3, #8]
 80087c4:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 80087c8:	4a3b      	ldr	r2, [pc, #236]	@ (80088b8 <HAL_RCC_ClockConfig+0x264>)
 80087ca:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 80087ce:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80087d0:	4b39      	ldr	r3, [pc, #228]	@ (80088b8 <HAL_RCC_ClockConfig+0x264>)
 80087d2:	689b      	ldr	r3, [r3, #8]
 80087d4:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80087d8:	687b      	ldr	r3, [r7, #4]
 80087da:	689b      	ldr	r3, [r3, #8]
 80087dc:	4936      	ldr	r1, [pc, #216]	@ (80088b8 <HAL_RCC_ClockConfig+0x264>)
 80087de:	4313      	orrs	r3, r2
 80087e0:	608b      	str	r3, [r1, #8]
 80087e2:	e008      	b.n	80087f6 <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 80087e4:	697b      	ldr	r3, [r7, #20]
 80087e6:	2b80      	cmp	r3, #128	@ 0x80
 80087e8:	d105      	bne.n	80087f6 <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 80087ea:	4b33      	ldr	r3, [pc, #204]	@ (80088b8 <HAL_RCC_ClockConfig+0x264>)
 80087ec:	689b      	ldr	r3, [r3, #8]
 80087ee:	4a32      	ldr	r2, [pc, #200]	@ (80088b8 <HAL_RCC_ClockConfig+0x264>)
 80087f0:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80087f4:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80087f6:	4b2f      	ldr	r3, [pc, #188]	@ (80088b4 <HAL_RCC_ClockConfig+0x260>)
 80087f8:	681b      	ldr	r3, [r3, #0]
 80087fa:	f003 030f 	and.w	r3, r3, #15
 80087fe:	683a      	ldr	r2, [r7, #0]
 8008800:	429a      	cmp	r2, r3
 8008802:	d21d      	bcs.n	8008840 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8008804:	4b2b      	ldr	r3, [pc, #172]	@ (80088b4 <HAL_RCC_ClockConfig+0x260>)
 8008806:	681b      	ldr	r3, [r3, #0]
 8008808:	f023 020f 	bic.w	r2, r3, #15
 800880c:	4929      	ldr	r1, [pc, #164]	@ (80088b4 <HAL_RCC_ClockConfig+0x260>)
 800880e:	683b      	ldr	r3, [r7, #0]
 8008810:	4313      	orrs	r3, r2
 8008812:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8008814:	f7fc ffa2 	bl	800575c <HAL_GetTick>
 8008818:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800881a:	e00a      	b.n	8008832 <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800881c:	f7fc ff9e 	bl	800575c <HAL_GetTick>
 8008820:	4602      	mov	r2, r0
 8008822:	68fb      	ldr	r3, [r7, #12]
 8008824:	1ad3      	subs	r3, r2, r3
 8008826:	f241 3288 	movw	r2, #5000	@ 0x1388
 800882a:	4293      	cmp	r3, r2
 800882c:	d901      	bls.n	8008832 <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 800882e:	2303      	movs	r3, #3
 8008830:	e03b      	b.n	80088aa <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8008832:	4b20      	ldr	r3, [pc, #128]	@ (80088b4 <HAL_RCC_ClockConfig+0x260>)
 8008834:	681b      	ldr	r3, [r3, #0]
 8008836:	f003 030f 	and.w	r3, r3, #15
 800883a:	683a      	ldr	r2, [r7, #0]
 800883c:	429a      	cmp	r2, r3
 800883e:	d1ed      	bne.n	800881c <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8008840:	687b      	ldr	r3, [r7, #4]
 8008842:	681b      	ldr	r3, [r3, #0]
 8008844:	f003 0304 	and.w	r3, r3, #4
 8008848:	2b00      	cmp	r3, #0
 800884a:	d008      	beq.n	800885e <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800884c:	4b1a      	ldr	r3, [pc, #104]	@ (80088b8 <HAL_RCC_ClockConfig+0x264>)
 800884e:	689b      	ldr	r3, [r3, #8]
 8008850:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8008854:	687b      	ldr	r3, [r7, #4]
 8008856:	68db      	ldr	r3, [r3, #12]
 8008858:	4917      	ldr	r1, [pc, #92]	@ (80088b8 <HAL_RCC_ClockConfig+0x264>)
 800885a:	4313      	orrs	r3, r2
 800885c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800885e:	687b      	ldr	r3, [r7, #4]
 8008860:	681b      	ldr	r3, [r3, #0]
 8008862:	f003 0308 	and.w	r3, r3, #8
 8008866:	2b00      	cmp	r3, #0
 8008868:	d009      	beq.n	800887e <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800886a:	4b13      	ldr	r3, [pc, #76]	@ (80088b8 <HAL_RCC_ClockConfig+0x264>)
 800886c:	689b      	ldr	r3, [r3, #8]
 800886e:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8008872:	687b      	ldr	r3, [r7, #4]
 8008874:	691b      	ldr	r3, [r3, #16]
 8008876:	00db      	lsls	r3, r3, #3
 8008878:	490f      	ldr	r1, [pc, #60]	@ (80088b8 <HAL_RCC_ClockConfig+0x264>)
 800887a:	4313      	orrs	r3, r2
 800887c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800887e:	f000 f825 	bl	80088cc <HAL_RCC_GetSysClockFreq>
 8008882:	4602      	mov	r2, r0
 8008884:	4b0c      	ldr	r3, [pc, #48]	@ (80088b8 <HAL_RCC_ClockConfig+0x264>)
 8008886:	689b      	ldr	r3, [r3, #8]
 8008888:	091b      	lsrs	r3, r3, #4
 800888a:	f003 030f 	and.w	r3, r3, #15
 800888e:	490c      	ldr	r1, [pc, #48]	@ (80088c0 <HAL_RCC_ClockConfig+0x26c>)
 8008890:	5ccb      	ldrb	r3, [r1, r3]
 8008892:	f003 031f 	and.w	r3, r3, #31
 8008896:	fa22 f303 	lsr.w	r3, r2, r3
 800889a:	4a0a      	ldr	r2, [pc, #40]	@ (80088c4 <HAL_RCC_ClockConfig+0x270>)
 800889c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 800889e:	4b0a      	ldr	r3, [pc, #40]	@ (80088c8 <HAL_RCC_ClockConfig+0x274>)
 80088a0:	681b      	ldr	r3, [r3, #0]
 80088a2:	4618      	mov	r0, r3
 80088a4:	f7fc ff0e 	bl	80056c4 <HAL_InitTick>
 80088a8:	4603      	mov	r3, r0
}
 80088aa:	4618      	mov	r0, r3
 80088ac:	3718      	adds	r7, #24
 80088ae:	46bd      	mov	sp, r7
 80088b0:	bd80      	pop	{r7, pc}
 80088b2:	bf00      	nop
 80088b4:	40022000 	.word	0x40022000
 80088b8:	40021000 	.word	0x40021000
 80088bc:	04c4b400 	.word	0x04c4b400
 80088c0:	0800f0e0 	.word	0x0800f0e0
 80088c4:	20000008 	.word	0x20000008
 80088c8:	200002dc 	.word	0x200002dc

080088cc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80088cc:	b480      	push	{r7}
 80088ce:	b087      	sub	sp, #28
 80088d0:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 80088d2:	4b2c      	ldr	r3, [pc, #176]	@ (8008984 <HAL_RCC_GetSysClockFreq+0xb8>)
 80088d4:	689b      	ldr	r3, [r3, #8]
 80088d6:	f003 030c 	and.w	r3, r3, #12
 80088da:	2b04      	cmp	r3, #4
 80088dc:	d102      	bne.n	80088e4 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80088de:	4b2a      	ldr	r3, [pc, #168]	@ (8008988 <HAL_RCC_GetSysClockFreq+0xbc>)
 80088e0:	613b      	str	r3, [r7, #16]
 80088e2:	e047      	b.n	8008974 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 80088e4:	4b27      	ldr	r3, [pc, #156]	@ (8008984 <HAL_RCC_GetSysClockFreq+0xb8>)
 80088e6:	689b      	ldr	r3, [r3, #8]
 80088e8:	f003 030c 	and.w	r3, r3, #12
 80088ec:	2b08      	cmp	r3, #8
 80088ee:	d102      	bne.n	80088f6 <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80088f0:	4b25      	ldr	r3, [pc, #148]	@ (8008988 <HAL_RCC_GetSysClockFreq+0xbc>)
 80088f2:	613b      	str	r3, [r7, #16]
 80088f4:	e03e      	b.n	8008974 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 80088f6:	4b23      	ldr	r3, [pc, #140]	@ (8008984 <HAL_RCC_GetSysClockFreq+0xb8>)
 80088f8:	689b      	ldr	r3, [r3, #8]
 80088fa:	f003 030c 	and.w	r3, r3, #12
 80088fe:	2b0c      	cmp	r3, #12
 8008900:	d136      	bne.n	8008970 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8008902:	4b20      	ldr	r3, [pc, #128]	@ (8008984 <HAL_RCC_GetSysClockFreq+0xb8>)
 8008904:	68db      	ldr	r3, [r3, #12]
 8008906:	f003 0303 	and.w	r3, r3, #3
 800890a:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800890c:	4b1d      	ldr	r3, [pc, #116]	@ (8008984 <HAL_RCC_GetSysClockFreq+0xb8>)
 800890e:	68db      	ldr	r3, [r3, #12]
 8008910:	091b      	lsrs	r3, r3, #4
 8008912:	f003 030f 	and.w	r3, r3, #15
 8008916:	3301      	adds	r3, #1
 8008918:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 800891a:	68fb      	ldr	r3, [r7, #12]
 800891c:	2b03      	cmp	r3, #3
 800891e:	d10c      	bne.n	800893a <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8008920:	4a19      	ldr	r2, [pc, #100]	@ (8008988 <HAL_RCC_GetSysClockFreq+0xbc>)
 8008922:	68bb      	ldr	r3, [r7, #8]
 8008924:	fbb2 f3f3 	udiv	r3, r2, r3
 8008928:	4a16      	ldr	r2, [pc, #88]	@ (8008984 <HAL_RCC_GetSysClockFreq+0xb8>)
 800892a:	68d2      	ldr	r2, [r2, #12]
 800892c:	0a12      	lsrs	r2, r2, #8
 800892e:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8008932:	fb02 f303 	mul.w	r3, r2, r3
 8008936:	617b      	str	r3, [r7, #20]
      break;
 8008938:	e00c      	b.n	8008954 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800893a:	4a13      	ldr	r2, [pc, #76]	@ (8008988 <HAL_RCC_GetSysClockFreq+0xbc>)
 800893c:	68bb      	ldr	r3, [r7, #8]
 800893e:	fbb2 f3f3 	udiv	r3, r2, r3
 8008942:	4a10      	ldr	r2, [pc, #64]	@ (8008984 <HAL_RCC_GetSysClockFreq+0xb8>)
 8008944:	68d2      	ldr	r2, [r2, #12]
 8008946:	0a12      	lsrs	r2, r2, #8
 8008948:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 800894c:	fb02 f303 	mul.w	r3, r2, r3
 8008950:	617b      	str	r3, [r7, #20]
      break;
 8008952:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8008954:	4b0b      	ldr	r3, [pc, #44]	@ (8008984 <HAL_RCC_GetSysClockFreq+0xb8>)
 8008956:	68db      	ldr	r3, [r3, #12]
 8008958:	0e5b      	lsrs	r3, r3, #25
 800895a:	f003 0303 	and.w	r3, r3, #3
 800895e:	3301      	adds	r3, #1
 8008960:	005b      	lsls	r3, r3, #1
 8008962:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 8008964:	697a      	ldr	r2, [r7, #20]
 8008966:	687b      	ldr	r3, [r7, #4]
 8008968:	fbb2 f3f3 	udiv	r3, r2, r3
 800896c:	613b      	str	r3, [r7, #16]
 800896e:	e001      	b.n	8008974 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 8008970:	2300      	movs	r3, #0
 8008972:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8008974:	693b      	ldr	r3, [r7, #16]
}
 8008976:	4618      	mov	r0, r3
 8008978:	371c      	adds	r7, #28
 800897a:	46bd      	mov	sp, r7
 800897c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008980:	4770      	bx	lr
 8008982:	bf00      	nop
 8008984:	40021000 	.word	0x40021000
 8008988:	00f42400 	.word	0x00f42400

0800898c <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800898c:	b480      	push	{r7}
 800898e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8008990:	4b03      	ldr	r3, [pc, #12]	@ (80089a0 <HAL_RCC_GetHCLKFreq+0x14>)
 8008992:	681b      	ldr	r3, [r3, #0]
}
 8008994:	4618      	mov	r0, r3
 8008996:	46bd      	mov	sp, r7
 8008998:	f85d 7b04 	ldr.w	r7, [sp], #4
 800899c:	4770      	bx	lr
 800899e:	bf00      	nop
 80089a0:	20000008 	.word	0x20000008

080089a4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80089a4:	b580      	push	{r7, lr}
 80089a6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 80089a8:	f7ff fff0 	bl	800898c <HAL_RCC_GetHCLKFreq>
 80089ac:	4602      	mov	r2, r0
 80089ae:	4b06      	ldr	r3, [pc, #24]	@ (80089c8 <HAL_RCC_GetPCLK1Freq+0x24>)
 80089b0:	689b      	ldr	r3, [r3, #8]
 80089b2:	0a1b      	lsrs	r3, r3, #8
 80089b4:	f003 0307 	and.w	r3, r3, #7
 80089b8:	4904      	ldr	r1, [pc, #16]	@ (80089cc <HAL_RCC_GetPCLK1Freq+0x28>)
 80089ba:	5ccb      	ldrb	r3, [r1, r3]
 80089bc:	f003 031f 	and.w	r3, r3, #31
 80089c0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80089c4:	4618      	mov	r0, r3
 80089c6:	bd80      	pop	{r7, pc}
 80089c8:	40021000 	.word	0x40021000
 80089cc:	0800f0f0 	.word	0x0800f0f0

080089d0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80089d0:	b580      	push	{r7, lr}
 80089d2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 80089d4:	f7ff ffda 	bl	800898c <HAL_RCC_GetHCLKFreq>
 80089d8:	4602      	mov	r2, r0
 80089da:	4b06      	ldr	r3, [pc, #24]	@ (80089f4 <HAL_RCC_GetPCLK2Freq+0x24>)
 80089dc:	689b      	ldr	r3, [r3, #8]
 80089de:	0adb      	lsrs	r3, r3, #11
 80089e0:	f003 0307 	and.w	r3, r3, #7
 80089e4:	4904      	ldr	r1, [pc, #16]	@ (80089f8 <HAL_RCC_GetPCLK2Freq+0x28>)
 80089e6:	5ccb      	ldrb	r3, [r1, r3]
 80089e8:	f003 031f 	and.w	r3, r3, #31
 80089ec:	fa22 f303 	lsr.w	r3, r2, r3
}
 80089f0:	4618      	mov	r0, r3
 80089f2:	bd80      	pop	{r7, pc}
 80089f4:	40021000 	.word	0x40021000
 80089f8:	0800f0f0 	.word	0x0800f0f0

080089fc <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 80089fc:	b480      	push	{r7}
 80089fe:	b087      	sub	sp, #28
 8008a00:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8008a02:	4b1e      	ldr	r3, [pc, #120]	@ (8008a7c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8008a04:	68db      	ldr	r3, [r3, #12]
 8008a06:	f003 0303 	and.w	r3, r3, #3
 8008a0a:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8008a0c:	4b1b      	ldr	r3, [pc, #108]	@ (8008a7c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8008a0e:	68db      	ldr	r3, [r3, #12]
 8008a10:	091b      	lsrs	r3, r3, #4
 8008a12:	f003 030f 	and.w	r3, r3, #15
 8008a16:	3301      	adds	r3, #1
 8008a18:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8008a1a:	693b      	ldr	r3, [r7, #16]
 8008a1c:	2b03      	cmp	r3, #3
 8008a1e:	d10c      	bne.n	8008a3a <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8008a20:	4a17      	ldr	r2, [pc, #92]	@ (8008a80 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 8008a22:	68fb      	ldr	r3, [r7, #12]
 8008a24:	fbb2 f3f3 	udiv	r3, r2, r3
 8008a28:	4a14      	ldr	r2, [pc, #80]	@ (8008a7c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8008a2a:	68d2      	ldr	r2, [r2, #12]
 8008a2c:	0a12      	lsrs	r2, r2, #8
 8008a2e:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8008a32:	fb02 f303 	mul.w	r3, r2, r3
 8008a36:	617b      	str	r3, [r7, #20]
    break;
 8008a38:	e00c      	b.n	8008a54 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8008a3a:	4a11      	ldr	r2, [pc, #68]	@ (8008a80 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 8008a3c:	68fb      	ldr	r3, [r7, #12]
 8008a3e:	fbb2 f3f3 	udiv	r3, r2, r3
 8008a42:	4a0e      	ldr	r2, [pc, #56]	@ (8008a7c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8008a44:	68d2      	ldr	r2, [r2, #12]
 8008a46:	0a12      	lsrs	r2, r2, #8
 8008a48:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8008a4c:	fb02 f303 	mul.w	r3, r2, r3
 8008a50:	617b      	str	r3, [r7, #20]
    break;
 8008a52:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8008a54:	4b09      	ldr	r3, [pc, #36]	@ (8008a7c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8008a56:	68db      	ldr	r3, [r3, #12]
 8008a58:	0e5b      	lsrs	r3, r3, #25
 8008a5a:	f003 0303 	and.w	r3, r3, #3
 8008a5e:	3301      	adds	r3, #1
 8008a60:	005b      	lsls	r3, r3, #1
 8008a62:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 8008a64:	697a      	ldr	r2, [r7, #20]
 8008a66:	68bb      	ldr	r3, [r7, #8]
 8008a68:	fbb2 f3f3 	udiv	r3, r2, r3
 8008a6c:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 8008a6e:	687b      	ldr	r3, [r7, #4]
}
 8008a70:	4618      	mov	r0, r3
 8008a72:	371c      	adds	r7, #28
 8008a74:	46bd      	mov	sp, r7
 8008a76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a7a:	4770      	bx	lr
 8008a7c:	40021000 	.word	0x40021000
 8008a80:	00f42400 	.word	0x00f42400

08008a84 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8008a84:	b580      	push	{r7, lr}
 8008a86:	b086      	sub	sp, #24
 8008a88:	af00      	add	r7, sp, #0
 8008a8a:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8008a8c:	2300      	movs	r3, #0
 8008a8e:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8008a90:	2300      	movs	r3, #0
 8008a92:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8008a94:	687b      	ldr	r3, [r7, #4]
 8008a96:	681b      	ldr	r3, [r3, #0]
 8008a98:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8008a9c:	2b00      	cmp	r3, #0
 8008a9e:	f000 8098 	beq.w	8008bd2 <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8008aa2:	2300      	movs	r3, #0
 8008aa4:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8008aa6:	4b43      	ldr	r3, [pc, #268]	@ (8008bb4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8008aa8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008aaa:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8008aae:	2b00      	cmp	r3, #0
 8008ab0:	d10d      	bne.n	8008ace <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8008ab2:	4b40      	ldr	r3, [pc, #256]	@ (8008bb4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8008ab4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008ab6:	4a3f      	ldr	r2, [pc, #252]	@ (8008bb4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8008ab8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8008abc:	6593      	str	r3, [r2, #88]	@ 0x58
 8008abe:	4b3d      	ldr	r3, [pc, #244]	@ (8008bb4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8008ac0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008ac2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8008ac6:	60bb      	str	r3, [r7, #8]
 8008ac8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8008aca:	2301      	movs	r3, #1
 8008acc:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8008ace:	4b3a      	ldr	r3, [pc, #232]	@ (8008bb8 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8008ad0:	681b      	ldr	r3, [r3, #0]
 8008ad2:	4a39      	ldr	r2, [pc, #228]	@ (8008bb8 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8008ad4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8008ad8:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8008ada:	f7fc fe3f 	bl	800575c <HAL_GetTick>
 8008ade:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8008ae0:	e009      	b.n	8008af6 <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8008ae2:	f7fc fe3b 	bl	800575c <HAL_GetTick>
 8008ae6:	4602      	mov	r2, r0
 8008ae8:	68fb      	ldr	r3, [r7, #12]
 8008aea:	1ad3      	subs	r3, r2, r3
 8008aec:	2b02      	cmp	r3, #2
 8008aee:	d902      	bls.n	8008af6 <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 8008af0:	2303      	movs	r3, #3
 8008af2:	74fb      	strb	r3, [r7, #19]
        break;
 8008af4:	e005      	b.n	8008b02 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8008af6:	4b30      	ldr	r3, [pc, #192]	@ (8008bb8 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8008af8:	681b      	ldr	r3, [r3, #0]
 8008afa:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008afe:	2b00      	cmp	r3, #0
 8008b00:	d0ef      	beq.n	8008ae2 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 8008b02:	7cfb      	ldrb	r3, [r7, #19]
 8008b04:	2b00      	cmp	r3, #0
 8008b06:	d159      	bne.n	8008bbc <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8008b08:	4b2a      	ldr	r3, [pc, #168]	@ (8008bb4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8008b0a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008b0e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8008b12:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8008b14:	697b      	ldr	r3, [r7, #20]
 8008b16:	2b00      	cmp	r3, #0
 8008b18:	d01e      	beq.n	8008b58 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8008b1a:	687b      	ldr	r3, [r7, #4]
 8008b1c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008b1e:	697a      	ldr	r2, [r7, #20]
 8008b20:	429a      	cmp	r2, r3
 8008b22:	d019      	beq.n	8008b58 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8008b24:	4b23      	ldr	r3, [pc, #140]	@ (8008bb4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8008b26:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008b2a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8008b2e:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8008b30:	4b20      	ldr	r3, [pc, #128]	@ (8008bb4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8008b32:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008b36:	4a1f      	ldr	r2, [pc, #124]	@ (8008bb4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8008b38:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8008b3c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8008b40:	4b1c      	ldr	r3, [pc, #112]	@ (8008bb4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8008b42:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008b46:	4a1b      	ldr	r2, [pc, #108]	@ (8008bb4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8008b48:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8008b4c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8008b50:	4a18      	ldr	r2, [pc, #96]	@ (8008bb4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8008b52:	697b      	ldr	r3, [r7, #20]
 8008b54:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8008b58:	697b      	ldr	r3, [r7, #20]
 8008b5a:	f003 0301 	and.w	r3, r3, #1
 8008b5e:	2b00      	cmp	r3, #0
 8008b60:	d016      	beq.n	8008b90 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008b62:	f7fc fdfb 	bl	800575c <HAL_GetTick>
 8008b66:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8008b68:	e00b      	b.n	8008b82 <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8008b6a:	f7fc fdf7 	bl	800575c <HAL_GetTick>
 8008b6e:	4602      	mov	r2, r0
 8008b70:	68fb      	ldr	r3, [r7, #12]
 8008b72:	1ad3      	subs	r3, r2, r3
 8008b74:	f241 3288 	movw	r2, #5000	@ 0x1388
 8008b78:	4293      	cmp	r3, r2
 8008b7a:	d902      	bls.n	8008b82 <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 8008b7c:	2303      	movs	r3, #3
 8008b7e:	74fb      	strb	r3, [r7, #19]
            break;
 8008b80:	e006      	b.n	8008b90 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8008b82:	4b0c      	ldr	r3, [pc, #48]	@ (8008bb4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8008b84:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008b88:	f003 0302 	and.w	r3, r3, #2
 8008b8c:	2b00      	cmp	r3, #0
 8008b8e:	d0ec      	beq.n	8008b6a <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 8008b90:	7cfb      	ldrb	r3, [r7, #19]
 8008b92:	2b00      	cmp	r3, #0
 8008b94:	d10b      	bne.n	8008bae <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8008b96:	4b07      	ldr	r3, [pc, #28]	@ (8008bb4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8008b98:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008b9c:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8008ba0:	687b      	ldr	r3, [r7, #4]
 8008ba2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008ba4:	4903      	ldr	r1, [pc, #12]	@ (8008bb4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8008ba6:	4313      	orrs	r3, r2
 8008ba8:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8008bac:	e008      	b.n	8008bc0 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8008bae:	7cfb      	ldrb	r3, [r7, #19]
 8008bb0:	74bb      	strb	r3, [r7, #18]
 8008bb2:	e005      	b.n	8008bc0 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8008bb4:	40021000 	.word	0x40021000
 8008bb8:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008bbc:	7cfb      	ldrb	r3, [r7, #19]
 8008bbe:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8008bc0:	7c7b      	ldrb	r3, [r7, #17]
 8008bc2:	2b01      	cmp	r3, #1
 8008bc4:	d105      	bne.n	8008bd2 <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8008bc6:	4ba6      	ldr	r3, [pc, #664]	@ (8008e60 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8008bc8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008bca:	4aa5      	ldr	r2, [pc, #660]	@ (8008e60 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8008bcc:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8008bd0:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8008bd2:	687b      	ldr	r3, [r7, #4]
 8008bd4:	681b      	ldr	r3, [r3, #0]
 8008bd6:	f003 0301 	and.w	r3, r3, #1
 8008bda:	2b00      	cmp	r3, #0
 8008bdc:	d00a      	beq.n	8008bf4 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8008bde:	4ba0      	ldr	r3, [pc, #640]	@ (8008e60 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8008be0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008be4:	f023 0203 	bic.w	r2, r3, #3
 8008be8:	687b      	ldr	r3, [r7, #4]
 8008bea:	685b      	ldr	r3, [r3, #4]
 8008bec:	499c      	ldr	r1, [pc, #624]	@ (8008e60 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8008bee:	4313      	orrs	r3, r2
 8008bf0:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8008bf4:	687b      	ldr	r3, [r7, #4]
 8008bf6:	681b      	ldr	r3, [r3, #0]
 8008bf8:	f003 0302 	and.w	r3, r3, #2
 8008bfc:	2b00      	cmp	r3, #0
 8008bfe:	d00a      	beq.n	8008c16 <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8008c00:	4b97      	ldr	r3, [pc, #604]	@ (8008e60 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8008c02:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008c06:	f023 020c 	bic.w	r2, r3, #12
 8008c0a:	687b      	ldr	r3, [r7, #4]
 8008c0c:	689b      	ldr	r3, [r3, #8]
 8008c0e:	4994      	ldr	r1, [pc, #592]	@ (8008e60 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8008c10:	4313      	orrs	r3, r2
 8008c12:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8008c16:	687b      	ldr	r3, [r7, #4]
 8008c18:	681b      	ldr	r3, [r3, #0]
 8008c1a:	f003 0304 	and.w	r3, r3, #4
 8008c1e:	2b00      	cmp	r3, #0
 8008c20:	d00a      	beq.n	8008c38 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8008c22:	4b8f      	ldr	r3, [pc, #572]	@ (8008e60 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8008c24:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008c28:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8008c2c:	687b      	ldr	r3, [r7, #4]
 8008c2e:	68db      	ldr	r3, [r3, #12]
 8008c30:	498b      	ldr	r1, [pc, #556]	@ (8008e60 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8008c32:	4313      	orrs	r3, r2
 8008c34:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#endif /* USART3 */

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8008c38:	687b      	ldr	r3, [r7, #4]
 8008c3a:	681b      	ldr	r3, [r3, #0]
 8008c3c:	f003 0308 	and.w	r3, r3, #8
 8008c40:	2b00      	cmp	r3, #0
 8008c42:	d00a      	beq.n	8008c5a <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8008c44:	4b86      	ldr	r3, [pc, #536]	@ (8008e60 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8008c46:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008c4a:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8008c4e:	687b      	ldr	r3, [r7, #4]
 8008c50:	691b      	ldr	r3, [r3, #16]
 8008c52:	4983      	ldr	r1, [pc, #524]	@ (8008e60 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8008c54:	4313      	orrs	r3, r2
 8008c56:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8008c5a:	687b      	ldr	r3, [r7, #4]
 8008c5c:	681b      	ldr	r3, [r3, #0]
 8008c5e:	f003 0320 	and.w	r3, r3, #32
 8008c62:	2b00      	cmp	r3, #0
 8008c64:	d00a      	beq.n	8008c7c <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8008c66:	4b7e      	ldr	r3, [pc, #504]	@ (8008e60 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8008c68:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008c6c:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8008c70:	687b      	ldr	r3, [r7, #4]
 8008c72:	695b      	ldr	r3, [r3, #20]
 8008c74:	497a      	ldr	r1, [pc, #488]	@ (8008e60 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8008c76:	4313      	orrs	r3, r2
 8008c78:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8008c7c:	687b      	ldr	r3, [r7, #4]
 8008c7e:	681b      	ldr	r3, [r3, #0]
 8008c80:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008c84:	2b00      	cmp	r3, #0
 8008c86:	d00a      	beq.n	8008c9e <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8008c88:	4b75      	ldr	r3, [pc, #468]	@ (8008e60 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8008c8a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008c8e:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8008c92:	687b      	ldr	r3, [r7, #4]
 8008c94:	699b      	ldr	r3, [r3, #24]
 8008c96:	4972      	ldr	r1, [pc, #456]	@ (8008e60 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8008c98:	4313      	orrs	r3, r2
 8008c9a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8008c9e:	687b      	ldr	r3, [r7, #4]
 8008ca0:	681b      	ldr	r3, [r3, #0]
 8008ca2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008ca6:	2b00      	cmp	r3, #0
 8008ca8:	d00a      	beq.n	8008cc0 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8008caa:	4b6d      	ldr	r3, [pc, #436]	@ (8008e60 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8008cac:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008cb0:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8008cb4:	687b      	ldr	r3, [r7, #4]
 8008cb6:	69db      	ldr	r3, [r3, #28]
 8008cb8:	4969      	ldr	r1, [pc, #420]	@ (8008e60 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8008cba:	4313      	orrs	r3, r2
 8008cbc:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }
#if defined(I2C3)

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8008cc0:	687b      	ldr	r3, [r7, #4]
 8008cc2:	681b      	ldr	r3, [r3, #0]
 8008cc4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008cc8:	2b00      	cmp	r3, #0
 8008cca:	d00a      	beq.n	8008ce2 <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8008ccc:	4b64      	ldr	r3, [pc, #400]	@ (8008e60 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8008cce:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008cd2:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8008cd6:	687b      	ldr	r3, [r7, #4]
 8008cd8:	6a1b      	ldr	r3, [r3, #32]
 8008cda:	4961      	ldr	r1, [pc, #388]	@ (8008e60 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8008cdc:	4313      	orrs	r3, r2
 8008cde:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8008ce2:	687b      	ldr	r3, [r7, #4]
 8008ce4:	681b      	ldr	r3, [r3, #0]
 8008ce6:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8008cea:	2b00      	cmp	r3, #0
 8008cec:	d00a      	beq.n	8008d04 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8008cee:	4b5c      	ldr	r3, [pc, #368]	@ (8008e60 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8008cf0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008cf4:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8008cf8:	687b      	ldr	r3, [r7, #4]
 8008cfa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008cfc:	4958      	ldr	r1, [pc, #352]	@ (8008e60 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8008cfe:	4313      	orrs	r3, r2
 8008d00:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(SAI1) 
  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8008d04:	687b      	ldr	r3, [r7, #4]
 8008d06:	681b      	ldr	r3, [r3, #0]
 8008d08:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8008d0c:	2b00      	cmp	r3, #0
 8008d0e:	d015      	beq.n	8008d3c <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8008d10:	4b53      	ldr	r3, [pc, #332]	@ (8008e60 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8008d12:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008d16:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8008d1a:	687b      	ldr	r3, [r7, #4]
 8008d1c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008d1e:	4950      	ldr	r1, [pc, #320]	@ (8008e60 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8008d20:	4313      	orrs	r3, r2
 8008d22:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 8008d26:	687b      	ldr	r3, [r7, #4]
 8008d28:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008d2a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8008d2e:	d105      	bne.n	8008d3c <HAL_RCCEx_PeriphCLKConfig+0x2b8>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8008d30:	4b4b      	ldr	r3, [pc, #300]	@ (8008e60 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8008d32:	68db      	ldr	r3, [r3, #12]
 8008d34:	4a4a      	ldr	r2, [pc, #296]	@ (8008e60 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8008d36:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8008d3a:	60d3      	str	r3, [r2, #12]

#endif /* SAI1 */

#if defined(SPI_I2S_SUPPORT)
  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8008d3c:	687b      	ldr	r3, [r7, #4]
 8008d3e:	681b      	ldr	r3, [r3, #0]
 8008d40:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8008d44:	2b00      	cmp	r3, #0
 8008d46:	d015      	beq.n	8008d74 <HAL_RCCEx_PeriphCLKConfig+0x2f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8008d48:	4b45      	ldr	r3, [pc, #276]	@ (8008e60 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8008d4a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008d4e:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8008d52:	687b      	ldr	r3, [r7, #4]
 8008d54:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008d56:	4942      	ldr	r1, [pc, #264]	@ (8008e60 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8008d58:	4313      	orrs	r3, r2
 8008d5a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 8008d5e:	687b      	ldr	r3, [r7, #4]
 8008d60:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008d62:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8008d66:	d105      	bne.n	8008d74 <HAL_RCCEx_PeriphCLKConfig+0x2f0>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8008d68:	4b3d      	ldr	r3, [pc, #244]	@ (8008e60 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8008d6a:	68db      	ldr	r3, [r3, #12]
 8008d6c:	4a3c      	ldr	r2, [pc, #240]	@ (8008e60 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8008d6e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8008d72:	60d3      	str	r3, [r2, #12]

#endif /* SPI_I2S_SUPPORT */

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8008d74:	687b      	ldr	r3, [r7, #4]
 8008d76:	681b      	ldr	r3, [r3, #0]
 8008d78:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8008d7c:	2b00      	cmp	r3, #0
 8008d7e:	d015      	beq.n	8008dac <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8008d80:	4b37      	ldr	r3, [pc, #220]	@ (8008e60 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8008d82:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008d86:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 8008d8a:	687b      	ldr	r3, [r7, #4]
 8008d8c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008d8e:	4934      	ldr	r1, [pc, #208]	@ (8008e60 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8008d90:	4313      	orrs	r3, r2
 8008d92:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 8008d96:	687b      	ldr	r3, [r7, #4]
 8008d98:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008d9a:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8008d9e:	d105      	bne.n	8008dac <HAL_RCCEx_PeriphCLKConfig+0x328>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8008da0:	4b2f      	ldr	r3, [pc, #188]	@ (8008e60 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8008da2:	68db      	ldr	r3, [r3, #12]
 8008da4:	4a2e      	ldr	r2, [pc, #184]	@ (8008e60 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8008da6:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8008daa:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8008dac:	687b      	ldr	r3, [r7, #4]
 8008dae:	681b      	ldr	r3, [r3, #0]
 8008db0:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8008db4:	2b00      	cmp	r3, #0
 8008db6:	d015      	beq.n	8008de4 <HAL_RCCEx_PeriphCLKConfig+0x360>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8008db8:	4b29      	ldr	r3, [pc, #164]	@ (8008e60 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8008dba:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008dbe:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8008dc2:	687b      	ldr	r3, [r7, #4]
 8008dc4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008dc6:	4926      	ldr	r1, [pc, #152]	@ (8008e60 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8008dc8:	4313      	orrs	r3, r2
 8008dca:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8008dce:	687b      	ldr	r3, [r7, #4]
 8008dd0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008dd2:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8008dd6:	d105      	bne.n	8008de4 <HAL_RCCEx_PeriphCLKConfig+0x360>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8008dd8:	4b21      	ldr	r3, [pc, #132]	@ (8008e60 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8008dda:	68db      	ldr	r3, [r3, #12]
 8008ddc:	4a20      	ldr	r2, [pc, #128]	@ (8008e60 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8008dde:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8008de2:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8008de4:	687b      	ldr	r3, [r7, #4]
 8008de6:	681b      	ldr	r3, [r3, #0]
 8008de8:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8008dec:	2b00      	cmp	r3, #0
 8008dee:	d015      	beq.n	8008e1c <HAL_RCCEx_PeriphCLKConfig+0x398>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8008df0:	4b1b      	ldr	r3, [pc, #108]	@ (8008e60 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8008df2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008df6:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8008dfa:	687b      	ldr	r3, [r7, #4]
 8008dfc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008dfe:	4918      	ldr	r1, [pc, #96]	@ (8008e60 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8008e00:	4313      	orrs	r3, r2
 8008e02:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8008e06:	687b      	ldr	r3, [r7, #4]
 8008e08:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008e0a:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8008e0e:	d105      	bne.n	8008e1c <HAL_RCCEx_PeriphCLKConfig+0x398>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8008e10:	4b13      	ldr	r3, [pc, #76]	@ (8008e60 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8008e12:	68db      	ldr	r3, [r3, #12]
 8008e14:	4a12      	ldr	r2, [pc, #72]	@ (8008e60 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8008e16:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8008e1a:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8008e1c:	687b      	ldr	r3, [r7, #4]
 8008e1e:	681b      	ldr	r3, [r3, #0]
 8008e20:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8008e24:	2b00      	cmp	r3, #0
 8008e26:	d015      	beq.n	8008e54 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8008e28:	4b0d      	ldr	r3, [pc, #52]	@ (8008e60 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8008e2a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008e2e:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 8008e32:	687b      	ldr	r3, [r7, #4]
 8008e34:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008e36:	490a      	ldr	r1, [pc, #40]	@ (8008e60 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8008e38:	4313      	orrs	r3, r2
 8008e3a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 8008e3e:	687b      	ldr	r3, [r7, #4]
 8008e40:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008e42:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8008e46:	d105      	bne.n	8008e54 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8008e48:	4b05      	ldr	r3, [pc, #20]	@ (8008e60 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8008e4a:	68db      	ldr	r3, [r3, #12]
 8008e4c:	4a04      	ldr	r2, [pc, #16]	@ (8008e60 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8008e4e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8008e52:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 8008e54:	7cbb      	ldrb	r3, [r7, #18]
}
 8008e56:	4618      	mov	r0, r3
 8008e58:	3718      	adds	r7, #24
 8008e5a:	46bd      	mov	sp, r7
 8008e5c:	bd80      	pop	{r7, pc}
 8008e5e:	bf00      	nop
 8008e60:	40021000 	.word	0x40021000

08008e64 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8008e64:	b580      	push	{r7, lr}
 8008e66:	b084      	sub	sp, #16
 8008e68:	af00      	add	r7, sp, #0
 8008e6a:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8008e6c:	687b      	ldr	r3, [r7, #4]
 8008e6e:	2b00      	cmp	r3, #0
 8008e70:	d101      	bne.n	8008e76 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8008e72:	2301      	movs	r3, #1
 8008e74:	e09d      	b.n	8008fb2 <HAL_SPI_Init+0x14e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8008e76:	687b      	ldr	r3, [r7, #4]
 8008e78:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008e7a:	2b00      	cmp	r3, #0
 8008e7c:	d108      	bne.n	8008e90 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8008e7e:	687b      	ldr	r3, [r7, #4]
 8008e80:	685b      	ldr	r3, [r3, #4]
 8008e82:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8008e86:	d009      	beq.n	8008e9c <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8008e88:	687b      	ldr	r3, [r7, #4]
 8008e8a:	2200      	movs	r2, #0
 8008e8c:	61da      	str	r2, [r3, #28]
 8008e8e:	e005      	b.n	8008e9c <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8008e90:	687b      	ldr	r3, [r7, #4]
 8008e92:	2200      	movs	r2, #0
 8008e94:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8008e96:	687b      	ldr	r3, [r7, #4]
 8008e98:	2200      	movs	r2, #0
 8008e9a:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8008e9c:	687b      	ldr	r3, [r7, #4]
 8008e9e:	2200      	movs	r2, #0
 8008ea0:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8008ea2:	687b      	ldr	r3, [r7, #4]
 8008ea4:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8008ea8:	b2db      	uxtb	r3, r3
 8008eaa:	2b00      	cmp	r3, #0
 8008eac:	d106      	bne.n	8008ebc <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8008eae:	687b      	ldr	r3, [r7, #4]
 8008eb0:	2200      	movs	r2, #0
 8008eb2:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8008eb6:	6878      	ldr	r0, [r7, #4]
 8008eb8:	f7f9 fc38 	bl	800272c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8008ebc:	687b      	ldr	r3, [r7, #4]
 8008ebe:	2202      	movs	r2, #2
 8008ec0:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8008ec4:	687b      	ldr	r3, [r7, #4]
 8008ec6:	681b      	ldr	r3, [r3, #0]
 8008ec8:	681a      	ldr	r2, [r3, #0]
 8008eca:	687b      	ldr	r3, [r7, #4]
 8008ecc:	681b      	ldr	r3, [r3, #0]
 8008ece:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8008ed2:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8008ed4:	687b      	ldr	r3, [r7, #4]
 8008ed6:	68db      	ldr	r3, [r3, #12]
 8008ed8:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8008edc:	d902      	bls.n	8008ee4 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8008ede:	2300      	movs	r3, #0
 8008ee0:	60fb      	str	r3, [r7, #12]
 8008ee2:	e002      	b.n	8008eea <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8008ee4:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8008ee8:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8008eea:	687b      	ldr	r3, [r7, #4]
 8008eec:	68db      	ldr	r3, [r3, #12]
 8008eee:	f5b3 6f70 	cmp.w	r3, #3840	@ 0xf00
 8008ef2:	d007      	beq.n	8008f04 <HAL_SPI_Init+0xa0>
 8008ef4:	687b      	ldr	r3, [r7, #4]
 8008ef6:	68db      	ldr	r3, [r3, #12]
 8008ef8:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8008efc:	d002      	beq.n	8008f04 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8008efe:	687b      	ldr	r3, [r7, #4]
 8008f00:	2200      	movs	r2, #0
 8008f02:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8008f04:	687b      	ldr	r3, [r7, #4]
 8008f06:	685b      	ldr	r3, [r3, #4]
 8008f08:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8008f0c:	687b      	ldr	r3, [r7, #4]
 8008f0e:	689b      	ldr	r3, [r3, #8]
 8008f10:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8008f14:	431a      	orrs	r2, r3
 8008f16:	687b      	ldr	r3, [r7, #4]
 8008f18:	691b      	ldr	r3, [r3, #16]
 8008f1a:	f003 0302 	and.w	r3, r3, #2
 8008f1e:	431a      	orrs	r2, r3
 8008f20:	687b      	ldr	r3, [r7, #4]
 8008f22:	695b      	ldr	r3, [r3, #20]
 8008f24:	f003 0301 	and.w	r3, r3, #1
 8008f28:	431a      	orrs	r2, r3
 8008f2a:	687b      	ldr	r3, [r7, #4]
 8008f2c:	699b      	ldr	r3, [r3, #24]
 8008f2e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8008f32:	431a      	orrs	r2, r3
 8008f34:	687b      	ldr	r3, [r7, #4]
 8008f36:	69db      	ldr	r3, [r3, #28]
 8008f38:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8008f3c:	431a      	orrs	r2, r3
 8008f3e:	687b      	ldr	r3, [r7, #4]
 8008f40:	6a1b      	ldr	r3, [r3, #32]
 8008f42:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008f46:	ea42 0103 	orr.w	r1, r2, r3
 8008f4a:	687b      	ldr	r3, [r7, #4]
 8008f4c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008f4e:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8008f52:	687b      	ldr	r3, [r7, #4]
 8008f54:	681b      	ldr	r3, [r3, #0]
 8008f56:	430a      	orrs	r2, r1
 8008f58:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8008f5a:	687b      	ldr	r3, [r7, #4]
 8008f5c:	699b      	ldr	r3, [r3, #24]
 8008f5e:	0c1b      	lsrs	r3, r3, #16
 8008f60:	f003 0204 	and.w	r2, r3, #4
 8008f64:	687b      	ldr	r3, [r7, #4]
 8008f66:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008f68:	f003 0310 	and.w	r3, r3, #16
 8008f6c:	431a      	orrs	r2, r3
 8008f6e:	687b      	ldr	r3, [r7, #4]
 8008f70:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008f72:	f003 0308 	and.w	r3, r3, #8
 8008f76:	431a      	orrs	r2, r3
 8008f78:	687b      	ldr	r3, [r7, #4]
 8008f7a:	68db      	ldr	r3, [r3, #12]
 8008f7c:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 8008f80:	ea42 0103 	orr.w	r1, r2, r3
 8008f84:	68fb      	ldr	r3, [r7, #12]
 8008f86:	f403 5280 	and.w	r2, r3, #4096	@ 0x1000
 8008f8a:	687b      	ldr	r3, [r7, #4]
 8008f8c:	681b      	ldr	r3, [r3, #0]
 8008f8e:	430a      	orrs	r2, r1
 8008f90:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8008f92:	687b      	ldr	r3, [r7, #4]
 8008f94:	681b      	ldr	r3, [r3, #0]
 8008f96:	69da      	ldr	r2, [r3, #28]
 8008f98:	687b      	ldr	r3, [r7, #4]
 8008f9a:	681b      	ldr	r3, [r3, #0]
 8008f9c:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8008fa0:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8008fa2:	687b      	ldr	r3, [r7, #4]
 8008fa4:	2200      	movs	r2, #0
 8008fa6:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8008fa8:	687b      	ldr	r3, [r7, #4]
 8008faa:	2201      	movs	r2, #1
 8008fac:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  return HAL_OK;
 8008fb0:	2300      	movs	r3, #0
}
 8008fb2:	4618      	mov	r0, r3
 8008fb4:	3710      	adds	r7, #16
 8008fb6:	46bd      	mov	sp, r7
 8008fb8:	bd80      	pop	{r7, pc}

08008fba <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, const uint8_t *pTxData, uint8_t *pRxData,
                                          uint16_t Size, uint32_t Timeout)
{
 8008fba:	b580      	push	{r7, lr}
 8008fbc:	b08a      	sub	sp, #40	@ 0x28
 8008fbe:	af00      	add	r7, sp, #0
 8008fc0:	60f8      	str	r0, [r7, #12]
 8008fc2:	60b9      	str	r1, [r7, #8]
 8008fc4:	607a      	str	r2, [r7, #4]
 8008fc6:	807b      	strh	r3, [r7, #2]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8008fc8:	2301      	movs	r3, #1
 8008fca:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8008fcc:	f7fc fbc6 	bl	800575c <HAL_GetTick>
 8008fd0:	6238      	str	r0, [r7, #32]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8008fd2:	68fb      	ldr	r3, [r7, #12]
 8008fd4:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8008fd8:	77fb      	strb	r3, [r7, #31]
  tmp_mode            = hspi->Init.Mode;
 8008fda:	68fb      	ldr	r3, [r7, #12]
 8008fdc:	685b      	ldr	r3, [r3, #4]
 8008fde:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 8008fe0:	887b      	ldrh	r3, [r7, #2]
 8008fe2:	82fb      	strh	r3, [r7, #22]
  initial_RxXferCount = Size;
 8008fe4:	887b      	ldrh	r3, [r7, #2]
 8008fe6:	82bb      	strh	r3, [r7, #20]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8008fe8:	7ffb      	ldrb	r3, [r7, #31]
 8008fea:	2b01      	cmp	r3, #1
 8008fec:	d00c      	beq.n	8009008 <HAL_SPI_TransmitReceive+0x4e>
 8008fee:	69bb      	ldr	r3, [r7, #24]
 8008ff0:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8008ff4:	d106      	bne.n	8009004 <HAL_SPI_TransmitReceive+0x4a>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) &&
 8008ff6:	68fb      	ldr	r3, [r7, #12]
 8008ff8:	689b      	ldr	r3, [r3, #8]
 8008ffa:	2b00      	cmp	r3, #0
 8008ffc:	d102      	bne.n	8009004 <HAL_SPI_TransmitReceive+0x4a>
 8008ffe:	7ffb      	ldrb	r3, [r7, #31]
 8009000:	2b04      	cmp	r3, #4
 8009002:	d001      	beq.n	8009008 <HAL_SPI_TransmitReceive+0x4e>
         (tmp_state == HAL_SPI_STATE_BUSY_RX))))
  {
    return HAL_BUSY;
 8009004:	2302      	movs	r3, #2
 8009006:	e1f3      	b.n	80093f0 <HAL_SPI_TransmitReceive+0x436>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8009008:	68bb      	ldr	r3, [r7, #8]
 800900a:	2b00      	cmp	r3, #0
 800900c:	d005      	beq.n	800901a <HAL_SPI_TransmitReceive+0x60>
 800900e:	687b      	ldr	r3, [r7, #4]
 8009010:	2b00      	cmp	r3, #0
 8009012:	d002      	beq.n	800901a <HAL_SPI_TransmitReceive+0x60>
 8009014:	887b      	ldrh	r3, [r7, #2]
 8009016:	2b00      	cmp	r3, #0
 8009018:	d101      	bne.n	800901e <HAL_SPI_TransmitReceive+0x64>
  {
    return HAL_ERROR;
 800901a:	2301      	movs	r3, #1
 800901c:	e1e8      	b.n	80093f0 <HAL_SPI_TransmitReceive+0x436>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 800901e:	68fb      	ldr	r3, [r7, #12]
 8009020:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8009024:	2b01      	cmp	r3, #1
 8009026:	d101      	bne.n	800902c <HAL_SPI_TransmitReceive+0x72>
 8009028:	2302      	movs	r3, #2
 800902a:	e1e1      	b.n	80093f0 <HAL_SPI_TransmitReceive+0x436>
 800902c:	68fb      	ldr	r3, [r7, #12]
 800902e:	2201      	movs	r2, #1
 8009030:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8009034:	68fb      	ldr	r3, [r7, #12]
 8009036:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 800903a:	b2db      	uxtb	r3, r3
 800903c:	2b04      	cmp	r3, #4
 800903e:	d003      	beq.n	8009048 <HAL_SPI_TransmitReceive+0x8e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8009040:	68fb      	ldr	r3, [r7, #12]
 8009042:	2205      	movs	r2, #5
 8009044:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8009048:	68fb      	ldr	r3, [r7, #12]
 800904a:	2200      	movs	r2, #0
 800904c:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800904e:	68fb      	ldr	r3, [r7, #12]
 8009050:	687a      	ldr	r2, [r7, #4]
 8009052:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferCount = Size;
 8009054:	68fb      	ldr	r3, [r7, #12]
 8009056:	887a      	ldrh	r2, [r7, #2]
 8009058:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  hspi->RxXferSize  = Size;
 800905c:	68fb      	ldr	r3, [r7, #12]
 800905e:	887a      	ldrh	r2, [r7, #2]
 8009060:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->pTxBuffPtr  = (const uint8_t *)pTxData;
 8009064:	68fb      	ldr	r3, [r7, #12]
 8009066:	68ba      	ldr	r2, [r7, #8]
 8009068:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferCount = Size;
 800906a:	68fb      	ldr	r3, [r7, #12]
 800906c:	887a      	ldrh	r2, [r7, #2]
 800906e:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxXferSize  = Size;
 8009070:	68fb      	ldr	r3, [r7, #12]
 8009072:	887a      	ldrh	r2, [r7, #2]
 8009074:	879a      	strh	r2, [r3, #60]	@ 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8009076:	68fb      	ldr	r3, [r7, #12]
 8009078:	2200      	movs	r2, #0
 800907a:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi->TxISR       = NULL;
 800907c:	68fb      	ldr	r3, [r7, #12]
 800907e:	2200      	movs	r2, #0
 8009080:	651a      	str	r2, [r3, #80]	@ 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 8009082:	68fb      	ldr	r3, [r7, #12]
 8009084:	68db      	ldr	r3, [r3, #12]
 8009086:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 800908a:	d802      	bhi.n	8009092 <HAL_SPI_TransmitReceive+0xd8>
 800908c:	8abb      	ldrh	r3, [r7, #20]
 800908e:	2b01      	cmp	r3, #1
 8009090:	d908      	bls.n	80090a4 <HAL_SPI_TransmitReceive+0xea>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8009092:	68fb      	ldr	r3, [r7, #12]
 8009094:	681b      	ldr	r3, [r3, #0]
 8009096:	685a      	ldr	r2, [r3, #4]
 8009098:	68fb      	ldr	r3, [r7, #12]
 800909a:	681b      	ldr	r3, [r3, #0]
 800909c:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 80090a0:	605a      	str	r2, [r3, #4]
 80090a2:	e007      	b.n	80090b4 <HAL_SPI_TransmitReceive+0xfa>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80090a4:	68fb      	ldr	r3, [r7, #12]
 80090a6:	681b      	ldr	r3, [r3, #0]
 80090a8:	685a      	ldr	r2, [r3, #4]
 80090aa:	68fb      	ldr	r3, [r7, #12]
 80090ac:	681b      	ldr	r3, [r3, #0]
 80090ae:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 80090b2:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80090b4:	68fb      	ldr	r3, [r7, #12]
 80090b6:	681b      	ldr	r3, [r3, #0]
 80090b8:	681b      	ldr	r3, [r3, #0]
 80090ba:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80090be:	2b40      	cmp	r3, #64	@ 0x40
 80090c0:	d007      	beq.n	80090d2 <HAL_SPI_TransmitReceive+0x118>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80090c2:	68fb      	ldr	r3, [r7, #12]
 80090c4:	681b      	ldr	r3, [r3, #0]
 80090c6:	681a      	ldr	r2, [r3, #0]
 80090c8:	68fb      	ldr	r3, [r7, #12]
 80090ca:	681b      	ldr	r3, [r3, #0]
 80090cc:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80090d0:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80090d2:	68fb      	ldr	r3, [r7, #12]
 80090d4:	68db      	ldr	r3, [r3, #12]
 80090d6:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 80090da:	f240 8083 	bls.w	80091e4 <HAL_SPI_TransmitReceive+0x22a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80090de:	68fb      	ldr	r3, [r7, #12]
 80090e0:	685b      	ldr	r3, [r3, #4]
 80090e2:	2b00      	cmp	r3, #0
 80090e4:	d002      	beq.n	80090ec <HAL_SPI_TransmitReceive+0x132>
 80090e6:	8afb      	ldrh	r3, [r7, #22]
 80090e8:	2b01      	cmp	r3, #1
 80090ea:	d16f      	bne.n	80091cc <HAL_SPI_TransmitReceive+0x212>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 80090ec:	68fb      	ldr	r3, [r7, #12]
 80090ee:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80090f0:	881a      	ldrh	r2, [r3, #0]
 80090f2:	68fb      	ldr	r3, [r7, #12]
 80090f4:	681b      	ldr	r3, [r3, #0]
 80090f6:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80090f8:	68fb      	ldr	r3, [r7, #12]
 80090fa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80090fc:	1c9a      	adds	r2, r3, #2
 80090fe:	68fb      	ldr	r3, [r7, #12]
 8009100:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 8009102:	68fb      	ldr	r3, [r7, #12]
 8009104:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8009106:	b29b      	uxth	r3, r3
 8009108:	3b01      	subs	r3, #1
 800910a:	b29a      	uxth	r2, r3
 800910c:	68fb      	ldr	r3, [r7, #12]
 800910e:	87da      	strh	r2, [r3, #62]	@ 0x3e
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8009110:	e05c      	b.n	80091cc <HAL_SPI_TransmitReceive+0x212>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8009112:	68fb      	ldr	r3, [r7, #12]
 8009114:	681b      	ldr	r3, [r3, #0]
 8009116:	689b      	ldr	r3, [r3, #8]
 8009118:	f003 0302 	and.w	r3, r3, #2
 800911c:	2b02      	cmp	r3, #2
 800911e:	d11b      	bne.n	8009158 <HAL_SPI_TransmitReceive+0x19e>
 8009120:	68fb      	ldr	r3, [r7, #12]
 8009122:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8009124:	b29b      	uxth	r3, r3
 8009126:	2b00      	cmp	r3, #0
 8009128:	d016      	beq.n	8009158 <HAL_SPI_TransmitReceive+0x19e>
 800912a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800912c:	2b01      	cmp	r3, #1
 800912e:	d113      	bne.n	8009158 <HAL_SPI_TransmitReceive+0x19e>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8009130:	68fb      	ldr	r3, [r7, #12]
 8009132:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009134:	881a      	ldrh	r2, [r3, #0]
 8009136:	68fb      	ldr	r3, [r7, #12]
 8009138:	681b      	ldr	r3, [r3, #0]
 800913a:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800913c:	68fb      	ldr	r3, [r7, #12]
 800913e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009140:	1c9a      	adds	r2, r3, #2
 8009142:	68fb      	ldr	r3, [r7, #12]
 8009144:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8009146:	68fb      	ldr	r3, [r7, #12]
 8009148:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800914a:	b29b      	uxth	r3, r3
 800914c:	3b01      	subs	r3, #1
 800914e:	b29a      	uxth	r2, r3
 8009150:	68fb      	ldr	r3, [r7, #12]
 8009152:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8009154:	2300      	movs	r3, #0
 8009156:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8009158:	68fb      	ldr	r3, [r7, #12]
 800915a:	681b      	ldr	r3, [r3, #0]
 800915c:	689b      	ldr	r3, [r3, #8]
 800915e:	f003 0301 	and.w	r3, r3, #1
 8009162:	2b01      	cmp	r3, #1
 8009164:	d11c      	bne.n	80091a0 <HAL_SPI_TransmitReceive+0x1e6>
 8009166:	68fb      	ldr	r3, [r7, #12]
 8009168:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800916c:	b29b      	uxth	r3, r3
 800916e:	2b00      	cmp	r3, #0
 8009170:	d016      	beq.n	80091a0 <HAL_SPI_TransmitReceive+0x1e6>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8009172:	68fb      	ldr	r3, [r7, #12]
 8009174:	681b      	ldr	r3, [r3, #0]
 8009176:	68da      	ldr	r2, [r3, #12]
 8009178:	68fb      	ldr	r3, [r7, #12]
 800917a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800917c:	b292      	uxth	r2, r2
 800917e:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8009180:	68fb      	ldr	r3, [r7, #12]
 8009182:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009184:	1c9a      	adds	r2, r3, #2
 8009186:	68fb      	ldr	r3, [r7, #12]
 8009188:	641a      	str	r2, [r3, #64]	@ 0x40
        hspi->RxXferCount--;
 800918a:	68fb      	ldr	r3, [r7, #12]
 800918c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8009190:	b29b      	uxth	r3, r3
 8009192:	3b01      	subs	r3, #1
 8009194:	b29a      	uxth	r2, r3
 8009196:	68fb      	ldr	r3, [r7, #12]
 8009198:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800919c:	2301      	movs	r3, #1
 800919e:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 80091a0:	f7fc fadc 	bl	800575c <HAL_GetTick>
 80091a4:	4602      	mov	r2, r0
 80091a6:	6a3b      	ldr	r3, [r7, #32]
 80091a8:	1ad3      	subs	r3, r2, r3
 80091aa:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80091ac:	429a      	cmp	r2, r3
 80091ae:	d80d      	bhi.n	80091cc <HAL_SPI_TransmitReceive+0x212>
 80091b0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80091b2:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80091b6:	d009      	beq.n	80091cc <HAL_SPI_TransmitReceive+0x212>
      {
        hspi->State = HAL_SPI_STATE_READY;
 80091b8:	68fb      	ldr	r3, [r7, #12]
 80091ba:	2201      	movs	r2, #1
 80091bc:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
        __HAL_UNLOCK(hspi);
 80091c0:	68fb      	ldr	r3, [r7, #12]
 80091c2:	2200      	movs	r2, #0
 80091c4:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
        return HAL_TIMEOUT;
 80091c8:	2303      	movs	r3, #3
 80091ca:	e111      	b.n	80093f0 <HAL_SPI_TransmitReceive+0x436>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80091cc:	68fb      	ldr	r3, [r7, #12]
 80091ce:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80091d0:	b29b      	uxth	r3, r3
 80091d2:	2b00      	cmp	r3, #0
 80091d4:	d19d      	bne.n	8009112 <HAL_SPI_TransmitReceive+0x158>
 80091d6:	68fb      	ldr	r3, [r7, #12]
 80091d8:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 80091dc:	b29b      	uxth	r3, r3
 80091de:	2b00      	cmp	r3, #0
 80091e0:	d197      	bne.n	8009112 <HAL_SPI_TransmitReceive+0x158>
 80091e2:	e0e5      	b.n	80093b0 <HAL_SPI_TransmitReceive+0x3f6>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80091e4:	68fb      	ldr	r3, [r7, #12]
 80091e6:	685b      	ldr	r3, [r3, #4]
 80091e8:	2b00      	cmp	r3, #0
 80091ea:	d003      	beq.n	80091f4 <HAL_SPI_TransmitReceive+0x23a>
 80091ec:	8afb      	ldrh	r3, [r7, #22]
 80091ee:	2b01      	cmp	r3, #1
 80091f0:	f040 80d1 	bne.w	8009396 <HAL_SPI_TransmitReceive+0x3dc>
    {
      if (hspi->TxXferCount > 1U)
 80091f4:	68fb      	ldr	r3, [r7, #12]
 80091f6:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80091f8:	b29b      	uxth	r3, r3
 80091fa:	2b01      	cmp	r3, #1
 80091fc:	d912      	bls.n	8009224 <HAL_SPI_TransmitReceive+0x26a>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 80091fe:	68fb      	ldr	r3, [r7, #12]
 8009200:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009202:	881a      	ldrh	r2, [r3, #0]
 8009204:	68fb      	ldr	r3, [r7, #12]
 8009206:	681b      	ldr	r3, [r3, #0]
 8009208:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800920a:	68fb      	ldr	r3, [r7, #12]
 800920c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800920e:	1c9a      	adds	r2, r3, #2
 8009210:	68fb      	ldr	r3, [r7, #12]
 8009212:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount -= 2U;
 8009214:	68fb      	ldr	r3, [r7, #12]
 8009216:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8009218:	b29b      	uxth	r3, r3
 800921a:	3b02      	subs	r3, #2
 800921c:	b29a      	uxth	r2, r3
 800921e:	68fb      	ldr	r3, [r7, #12]
 8009220:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8009222:	e0b8      	b.n	8009396 <HAL_SPI_TransmitReceive+0x3dc>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = *((const uint8_t *)hspi->pTxBuffPtr);
 8009224:	68fb      	ldr	r3, [r7, #12]
 8009226:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8009228:	68fb      	ldr	r3, [r7, #12]
 800922a:	681b      	ldr	r3, [r3, #0]
 800922c:	330c      	adds	r3, #12
 800922e:	7812      	ldrb	r2, [r2, #0]
 8009230:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8009232:	68fb      	ldr	r3, [r7, #12]
 8009234:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009236:	1c5a      	adds	r2, r3, #1
 8009238:	68fb      	ldr	r3, [r7, #12]
 800923a:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 800923c:	68fb      	ldr	r3, [r7, #12]
 800923e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8009240:	b29b      	uxth	r3, r3
 8009242:	3b01      	subs	r3, #1
 8009244:	b29a      	uxth	r2, r3
 8009246:	68fb      	ldr	r3, [r7, #12]
 8009248:	87da      	strh	r2, [r3, #62]	@ 0x3e
          SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
        }
#endif /* USE_SPI_CRC */
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800924a:	e0a4      	b.n	8009396 <HAL_SPI_TransmitReceive+0x3dc>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800924c:	68fb      	ldr	r3, [r7, #12]
 800924e:	681b      	ldr	r3, [r3, #0]
 8009250:	689b      	ldr	r3, [r3, #8]
 8009252:	f003 0302 	and.w	r3, r3, #2
 8009256:	2b02      	cmp	r3, #2
 8009258:	d134      	bne.n	80092c4 <HAL_SPI_TransmitReceive+0x30a>
 800925a:	68fb      	ldr	r3, [r7, #12]
 800925c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800925e:	b29b      	uxth	r3, r3
 8009260:	2b00      	cmp	r3, #0
 8009262:	d02f      	beq.n	80092c4 <HAL_SPI_TransmitReceive+0x30a>
 8009264:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009266:	2b01      	cmp	r3, #1
 8009268:	d12c      	bne.n	80092c4 <HAL_SPI_TransmitReceive+0x30a>
      {
        if (hspi->TxXferCount > 1U)
 800926a:	68fb      	ldr	r3, [r7, #12]
 800926c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800926e:	b29b      	uxth	r3, r3
 8009270:	2b01      	cmp	r3, #1
 8009272:	d912      	bls.n	800929a <HAL_SPI_TransmitReceive+0x2e0>
        {
          hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8009274:	68fb      	ldr	r3, [r7, #12]
 8009276:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009278:	881a      	ldrh	r2, [r3, #0]
 800927a:	68fb      	ldr	r3, [r7, #12]
 800927c:	681b      	ldr	r3, [r3, #0]
 800927e:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8009280:	68fb      	ldr	r3, [r7, #12]
 8009282:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009284:	1c9a      	adds	r2, r3, #2
 8009286:	68fb      	ldr	r3, [r7, #12]
 8009288:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount -= 2U;
 800928a:	68fb      	ldr	r3, [r7, #12]
 800928c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800928e:	b29b      	uxth	r3, r3
 8009290:	3b02      	subs	r3, #2
 8009292:	b29a      	uxth	r2, r3
 8009294:	68fb      	ldr	r3, [r7, #12]
 8009296:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8009298:	e012      	b.n	80092c0 <HAL_SPI_TransmitReceive+0x306>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = *((const uint8_t *)hspi->pTxBuffPtr);
 800929a:	68fb      	ldr	r3, [r7, #12]
 800929c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800929e:	68fb      	ldr	r3, [r7, #12]
 80092a0:	681b      	ldr	r3, [r3, #0]
 80092a2:	330c      	adds	r3, #12
 80092a4:	7812      	ldrb	r2, [r2, #0]
 80092a6:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 80092a8:	68fb      	ldr	r3, [r7, #12]
 80092aa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80092ac:	1c5a      	adds	r2, r3, #1
 80092ae:	68fb      	ldr	r3, [r7, #12]
 80092b0:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount--;
 80092b2:	68fb      	ldr	r3, [r7, #12]
 80092b4:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80092b6:	b29b      	uxth	r3, r3
 80092b8:	3b01      	subs	r3, #1
 80092ba:	b29a      	uxth	r2, r3
 80092bc:	68fb      	ldr	r3, [r7, #12]
 80092be:	87da      	strh	r2, [r3, #62]	@ 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80092c0:	2300      	movs	r3, #0
 80092c2:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80092c4:	68fb      	ldr	r3, [r7, #12]
 80092c6:	681b      	ldr	r3, [r3, #0]
 80092c8:	689b      	ldr	r3, [r3, #8]
 80092ca:	f003 0301 	and.w	r3, r3, #1
 80092ce:	2b01      	cmp	r3, #1
 80092d0:	d148      	bne.n	8009364 <HAL_SPI_TransmitReceive+0x3aa>
 80092d2:	68fb      	ldr	r3, [r7, #12]
 80092d4:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 80092d8:	b29b      	uxth	r3, r3
 80092da:	2b00      	cmp	r3, #0
 80092dc:	d042      	beq.n	8009364 <HAL_SPI_TransmitReceive+0x3aa>
      {
        if (hspi->RxXferCount > 1U)
 80092de:	68fb      	ldr	r3, [r7, #12]
 80092e0:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 80092e4:	b29b      	uxth	r3, r3
 80092e6:	2b01      	cmp	r3, #1
 80092e8:	d923      	bls.n	8009332 <HAL_SPI_TransmitReceive+0x378>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80092ea:	68fb      	ldr	r3, [r7, #12]
 80092ec:	681b      	ldr	r3, [r3, #0]
 80092ee:	68da      	ldr	r2, [r3, #12]
 80092f0:	68fb      	ldr	r3, [r7, #12]
 80092f2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80092f4:	b292      	uxth	r2, r2
 80092f6:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 80092f8:	68fb      	ldr	r3, [r7, #12]
 80092fa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80092fc:	1c9a      	adds	r2, r3, #2
 80092fe:	68fb      	ldr	r3, [r7, #12]
 8009300:	641a      	str	r2, [r3, #64]	@ 0x40
          hspi->RxXferCount -= 2U;
 8009302:	68fb      	ldr	r3, [r7, #12]
 8009304:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8009308:	b29b      	uxth	r3, r3
 800930a:	3b02      	subs	r3, #2
 800930c:	b29a      	uxth	r2, r3
 800930e:	68fb      	ldr	r3, [r7, #12]
 8009310:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
          if (hspi->RxXferCount <= 1U)
 8009314:	68fb      	ldr	r3, [r7, #12]
 8009316:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800931a:	b29b      	uxth	r3, r3
 800931c:	2b01      	cmp	r3, #1
 800931e:	d81f      	bhi.n	8009360 <HAL_SPI_TransmitReceive+0x3a6>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8009320:	68fb      	ldr	r3, [r7, #12]
 8009322:	681b      	ldr	r3, [r3, #0]
 8009324:	685a      	ldr	r2, [r3, #4]
 8009326:	68fb      	ldr	r3, [r7, #12]
 8009328:	681b      	ldr	r3, [r3, #0]
 800932a:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 800932e:	605a      	str	r2, [r3, #4]
 8009330:	e016      	b.n	8009360 <HAL_SPI_TransmitReceive+0x3a6>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8009332:	68fb      	ldr	r3, [r7, #12]
 8009334:	681b      	ldr	r3, [r3, #0]
 8009336:	f103 020c 	add.w	r2, r3, #12
 800933a:	68fb      	ldr	r3, [r7, #12]
 800933c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800933e:	7812      	ldrb	r2, [r2, #0]
 8009340:	b2d2      	uxtb	r2, r2
 8009342:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 8009344:	68fb      	ldr	r3, [r7, #12]
 8009346:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009348:	1c5a      	adds	r2, r3, #1
 800934a:	68fb      	ldr	r3, [r7, #12]
 800934c:	641a      	str	r2, [r3, #64]	@ 0x40
          hspi->RxXferCount--;
 800934e:	68fb      	ldr	r3, [r7, #12]
 8009350:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8009354:	b29b      	uxth	r3, r3
 8009356:	3b01      	subs	r3, #1
 8009358:	b29a      	uxth	r2, r3
 800935a:	68fb      	ldr	r3, [r7, #12]
 800935c:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8009360:	2301      	movs	r3, #1
 8009362:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8009364:	f7fc f9fa 	bl	800575c <HAL_GetTick>
 8009368:	4602      	mov	r2, r0
 800936a:	6a3b      	ldr	r3, [r7, #32]
 800936c:	1ad3      	subs	r3, r2, r3
 800936e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8009370:	429a      	cmp	r2, r3
 8009372:	d803      	bhi.n	800937c <HAL_SPI_TransmitReceive+0x3c2>
 8009374:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009376:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800937a:	d102      	bne.n	8009382 <HAL_SPI_TransmitReceive+0x3c8>
 800937c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800937e:	2b00      	cmp	r3, #0
 8009380:	d109      	bne.n	8009396 <HAL_SPI_TransmitReceive+0x3dc>
      {
        hspi->State = HAL_SPI_STATE_READY;
 8009382:	68fb      	ldr	r3, [r7, #12]
 8009384:	2201      	movs	r2, #1
 8009386:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
        __HAL_UNLOCK(hspi);
 800938a:	68fb      	ldr	r3, [r7, #12]
 800938c:	2200      	movs	r2, #0
 800938e:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
        return HAL_TIMEOUT;
 8009392:	2303      	movs	r3, #3
 8009394:	e02c      	b.n	80093f0 <HAL_SPI_TransmitReceive+0x436>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8009396:	68fb      	ldr	r3, [r7, #12]
 8009398:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800939a:	b29b      	uxth	r3, r3
 800939c:	2b00      	cmp	r3, #0
 800939e:	f47f af55 	bne.w	800924c <HAL_SPI_TransmitReceive+0x292>
 80093a2:	68fb      	ldr	r3, [r7, #12]
 80093a4:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 80093a8:	b29b      	uxth	r3, r3
 80093aa:	2b00      	cmp	r3, #0
 80093ac:	f47f af4e 	bne.w	800924c <HAL_SPI_TransmitReceive+0x292>
    return HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80093b0:	6a3a      	ldr	r2, [r7, #32]
 80093b2:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 80093b4:	68f8      	ldr	r0, [r7, #12]
 80093b6:	f000 f93d 	bl	8009634 <SPI_EndRxTxTransaction>
 80093ba:	4603      	mov	r3, r0
 80093bc:	2b00      	cmp	r3, #0
 80093be:	d008      	beq.n	80093d2 <HAL_SPI_TransmitReceive+0x418>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80093c0:	68fb      	ldr	r3, [r7, #12]
 80093c2:	2220      	movs	r2, #32
 80093c4:	661a      	str	r2, [r3, #96]	@ 0x60
    __HAL_UNLOCK(hspi);
 80093c6:	68fb      	ldr	r3, [r7, #12]
 80093c8:	2200      	movs	r2, #0
 80093ca:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
    return HAL_ERROR;
 80093ce:	2301      	movs	r3, #1
 80093d0:	e00e      	b.n	80093f0 <HAL_SPI_TransmitReceive+0x436>
  }


  hspi->State = HAL_SPI_STATE_READY;
 80093d2:	68fb      	ldr	r3, [r7, #12]
 80093d4:	2201      	movs	r2, #1
 80093d6:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 80093da:	68fb      	ldr	r3, [r7, #12]
 80093dc:	2200      	movs	r2, #0
 80093de:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80093e2:	68fb      	ldr	r3, [r7, #12]
 80093e4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80093e6:	2b00      	cmp	r3, #0
 80093e8:	d001      	beq.n	80093ee <HAL_SPI_TransmitReceive+0x434>
  {
    return HAL_ERROR;
 80093ea:	2301      	movs	r3, #1
 80093ec:	e000      	b.n	80093f0 <HAL_SPI_TransmitReceive+0x436>
  }
  else
  {
    return HAL_OK;
 80093ee:	2300      	movs	r3, #0
  }
}
 80093f0:	4618      	mov	r0, r3
 80093f2:	3728      	adds	r7, #40	@ 0x28
 80093f4:	46bd      	mov	sp, r7
 80093f6:	bd80      	pop	{r7, pc}

080093f8 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80093f8:	b580      	push	{r7, lr}
 80093fa:	b088      	sub	sp, #32
 80093fc:	af00      	add	r7, sp, #0
 80093fe:	60f8      	str	r0, [r7, #12]
 8009400:	60b9      	str	r1, [r7, #8]
 8009402:	603b      	str	r3, [r7, #0]
 8009404:	4613      	mov	r3, r2
 8009406:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8009408:	f7fc f9a8 	bl	800575c <HAL_GetTick>
 800940c:	4602      	mov	r2, r0
 800940e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009410:	1a9b      	subs	r3, r3, r2
 8009412:	683a      	ldr	r2, [r7, #0]
 8009414:	4413      	add	r3, r2
 8009416:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8009418:	f7fc f9a0 	bl	800575c <HAL_GetTick>
 800941c:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800941e:	4b39      	ldr	r3, [pc, #228]	@ (8009504 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8009420:	681b      	ldr	r3, [r3, #0]
 8009422:	015b      	lsls	r3, r3, #5
 8009424:	0d1b      	lsrs	r3, r3, #20
 8009426:	69fa      	ldr	r2, [r7, #28]
 8009428:	fb02 f303 	mul.w	r3, r2, r3
 800942c:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800942e:	e054      	b.n	80094da <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8009430:	683b      	ldr	r3, [r7, #0]
 8009432:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8009436:	d050      	beq.n	80094da <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8009438:	f7fc f990 	bl	800575c <HAL_GetTick>
 800943c:	4602      	mov	r2, r0
 800943e:	69bb      	ldr	r3, [r7, #24]
 8009440:	1ad3      	subs	r3, r2, r3
 8009442:	69fa      	ldr	r2, [r7, #28]
 8009444:	429a      	cmp	r2, r3
 8009446:	d902      	bls.n	800944e <SPI_WaitFlagStateUntilTimeout+0x56>
 8009448:	69fb      	ldr	r3, [r7, #28]
 800944a:	2b00      	cmp	r3, #0
 800944c:	d13d      	bne.n	80094ca <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800944e:	68fb      	ldr	r3, [r7, #12]
 8009450:	681b      	ldr	r3, [r3, #0]
 8009452:	685a      	ldr	r2, [r3, #4]
 8009454:	68fb      	ldr	r3, [r7, #12]
 8009456:	681b      	ldr	r3, [r3, #0]
 8009458:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 800945c:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800945e:	68fb      	ldr	r3, [r7, #12]
 8009460:	685b      	ldr	r3, [r3, #4]
 8009462:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8009466:	d111      	bne.n	800948c <SPI_WaitFlagStateUntilTimeout+0x94>
 8009468:	68fb      	ldr	r3, [r7, #12]
 800946a:	689b      	ldr	r3, [r3, #8]
 800946c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8009470:	d004      	beq.n	800947c <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8009472:	68fb      	ldr	r3, [r7, #12]
 8009474:	689b      	ldr	r3, [r3, #8]
 8009476:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800947a:	d107      	bne.n	800948c <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800947c:	68fb      	ldr	r3, [r7, #12]
 800947e:	681b      	ldr	r3, [r3, #0]
 8009480:	681a      	ldr	r2, [r3, #0]
 8009482:	68fb      	ldr	r3, [r7, #12]
 8009484:	681b      	ldr	r3, [r3, #0]
 8009486:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800948a:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800948c:	68fb      	ldr	r3, [r7, #12]
 800948e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009490:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8009494:	d10f      	bne.n	80094b6 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8009496:	68fb      	ldr	r3, [r7, #12]
 8009498:	681b      	ldr	r3, [r3, #0]
 800949a:	681a      	ldr	r2, [r3, #0]
 800949c:	68fb      	ldr	r3, [r7, #12]
 800949e:	681b      	ldr	r3, [r3, #0]
 80094a0:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80094a4:	601a      	str	r2, [r3, #0]
 80094a6:	68fb      	ldr	r3, [r7, #12]
 80094a8:	681b      	ldr	r3, [r3, #0]
 80094aa:	681a      	ldr	r2, [r3, #0]
 80094ac:	68fb      	ldr	r3, [r7, #12]
 80094ae:	681b      	ldr	r3, [r3, #0]
 80094b0:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80094b4:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80094b6:	68fb      	ldr	r3, [r7, #12]
 80094b8:	2201      	movs	r2, #1
 80094ba:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80094be:	68fb      	ldr	r3, [r7, #12]
 80094c0:	2200      	movs	r2, #0
 80094c2:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 80094c6:	2303      	movs	r3, #3
 80094c8:	e017      	b.n	80094fa <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80094ca:	697b      	ldr	r3, [r7, #20]
 80094cc:	2b00      	cmp	r3, #0
 80094ce:	d101      	bne.n	80094d4 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 80094d0:	2300      	movs	r3, #0
 80094d2:	61fb      	str	r3, [r7, #28]
      }
      count--;
 80094d4:	697b      	ldr	r3, [r7, #20]
 80094d6:	3b01      	subs	r3, #1
 80094d8:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80094da:	68fb      	ldr	r3, [r7, #12]
 80094dc:	681b      	ldr	r3, [r3, #0]
 80094de:	689a      	ldr	r2, [r3, #8]
 80094e0:	68bb      	ldr	r3, [r7, #8]
 80094e2:	4013      	ands	r3, r2
 80094e4:	68ba      	ldr	r2, [r7, #8]
 80094e6:	429a      	cmp	r2, r3
 80094e8:	bf0c      	ite	eq
 80094ea:	2301      	moveq	r3, #1
 80094ec:	2300      	movne	r3, #0
 80094ee:	b2db      	uxtb	r3, r3
 80094f0:	461a      	mov	r2, r3
 80094f2:	79fb      	ldrb	r3, [r7, #7]
 80094f4:	429a      	cmp	r2, r3
 80094f6:	d19b      	bne.n	8009430 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 80094f8:	2300      	movs	r3, #0
}
 80094fa:	4618      	mov	r0, r3
 80094fc:	3720      	adds	r7, #32
 80094fe:	46bd      	mov	sp, r7
 8009500:	bd80      	pop	{r7, pc}
 8009502:	bf00      	nop
 8009504:	20000008 	.word	0x20000008

08009508 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8009508:	b580      	push	{r7, lr}
 800950a:	b08a      	sub	sp, #40	@ 0x28
 800950c:	af00      	add	r7, sp, #0
 800950e:	60f8      	str	r0, [r7, #12]
 8009510:	60b9      	str	r1, [r7, #8]
 8009512:	607a      	str	r2, [r7, #4]
 8009514:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO const uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 8009516:	2300      	movs	r3, #0
 8009518:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 800951a:	f7fc f91f 	bl	800575c <HAL_GetTick>
 800951e:	4602      	mov	r2, r0
 8009520:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009522:	1a9b      	subs	r3, r3, r2
 8009524:	683a      	ldr	r2, [r7, #0]
 8009526:	4413      	add	r3, r2
 8009528:	627b      	str	r3, [r7, #36]	@ 0x24
  tmp_tickstart = HAL_GetTick();
 800952a:	f7fc f917 	bl	800575c <HAL_GetTick>
 800952e:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8009530:	68fb      	ldr	r3, [r7, #12]
 8009532:	681b      	ldr	r3, [r3, #0]
 8009534:	330c      	adds	r3, #12
 8009536:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8009538:	4b3d      	ldr	r3, [pc, #244]	@ (8009630 <SPI_WaitFifoStateUntilTimeout+0x128>)
 800953a:	681a      	ldr	r2, [r3, #0]
 800953c:	4613      	mov	r3, r2
 800953e:	009b      	lsls	r3, r3, #2
 8009540:	4413      	add	r3, r2
 8009542:	00da      	lsls	r2, r3, #3
 8009544:	1ad3      	subs	r3, r2, r3
 8009546:	0d1b      	lsrs	r3, r3, #20
 8009548:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800954a:	fb02 f303 	mul.w	r3, r2, r3
 800954e:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 8009550:	e060      	b.n	8009614 <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8009552:	68bb      	ldr	r3, [r7, #8]
 8009554:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 8009558:	d107      	bne.n	800956a <SPI_WaitFifoStateUntilTimeout+0x62>
 800955a:	687b      	ldr	r3, [r7, #4]
 800955c:	2b00      	cmp	r3, #0
 800955e:	d104      	bne.n	800956a <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 8009560:	69fb      	ldr	r3, [r7, #28]
 8009562:	781b      	ldrb	r3, [r3, #0]
 8009564:	b2db      	uxtb	r3, r3
 8009566:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 8009568:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 800956a:	683b      	ldr	r3, [r7, #0]
 800956c:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8009570:	d050      	beq.n	8009614 <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8009572:	f7fc f8f3 	bl	800575c <HAL_GetTick>
 8009576:	4602      	mov	r2, r0
 8009578:	6a3b      	ldr	r3, [r7, #32]
 800957a:	1ad3      	subs	r3, r2, r3
 800957c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800957e:	429a      	cmp	r2, r3
 8009580:	d902      	bls.n	8009588 <SPI_WaitFifoStateUntilTimeout+0x80>
 8009582:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009584:	2b00      	cmp	r3, #0
 8009586:	d13d      	bne.n	8009604 <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8009588:	68fb      	ldr	r3, [r7, #12]
 800958a:	681b      	ldr	r3, [r3, #0]
 800958c:	685a      	ldr	r2, [r3, #4]
 800958e:	68fb      	ldr	r3, [r7, #12]
 8009590:	681b      	ldr	r3, [r3, #0]
 8009592:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8009596:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8009598:	68fb      	ldr	r3, [r7, #12]
 800959a:	685b      	ldr	r3, [r3, #4]
 800959c:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80095a0:	d111      	bne.n	80095c6 <SPI_WaitFifoStateUntilTimeout+0xbe>
 80095a2:	68fb      	ldr	r3, [r7, #12]
 80095a4:	689b      	ldr	r3, [r3, #8]
 80095a6:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80095aa:	d004      	beq.n	80095b6 <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80095ac:	68fb      	ldr	r3, [r7, #12]
 80095ae:	689b      	ldr	r3, [r3, #8]
 80095b0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80095b4:	d107      	bne.n	80095c6 <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80095b6:	68fb      	ldr	r3, [r7, #12]
 80095b8:	681b      	ldr	r3, [r3, #0]
 80095ba:	681a      	ldr	r2, [r3, #0]
 80095bc:	68fb      	ldr	r3, [r7, #12]
 80095be:	681b      	ldr	r3, [r3, #0]
 80095c0:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80095c4:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80095c6:	68fb      	ldr	r3, [r7, #12]
 80095c8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80095ca:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80095ce:	d10f      	bne.n	80095f0 <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 80095d0:	68fb      	ldr	r3, [r7, #12]
 80095d2:	681b      	ldr	r3, [r3, #0]
 80095d4:	681a      	ldr	r2, [r3, #0]
 80095d6:	68fb      	ldr	r3, [r7, #12]
 80095d8:	681b      	ldr	r3, [r3, #0]
 80095da:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80095de:	601a      	str	r2, [r3, #0]
 80095e0:	68fb      	ldr	r3, [r7, #12]
 80095e2:	681b      	ldr	r3, [r3, #0]
 80095e4:	681a      	ldr	r2, [r3, #0]
 80095e6:	68fb      	ldr	r3, [r7, #12]
 80095e8:	681b      	ldr	r3, [r3, #0]
 80095ea:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80095ee:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80095f0:	68fb      	ldr	r3, [r7, #12]
 80095f2:	2201      	movs	r2, #1
 80095f4:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80095f8:	68fb      	ldr	r3, [r7, #12]
 80095fa:	2200      	movs	r2, #0
 80095fc:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 8009600:	2303      	movs	r3, #3
 8009602:	e010      	b.n	8009626 <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8009604:	69bb      	ldr	r3, [r7, #24]
 8009606:	2b00      	cmp	r3, #0
 8009608:	d101      	bne.n	800960e <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 800960a:	2300      	movs	r3, #0
 800960c:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      count--;
 800960e:	69bb      	ldr	r3, [r7, #24]
 8009610:	3b01      	subs	r3, #1
 8009612:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 8009614:	68fb      	ldr	r3, [r7, #12]
 8009616:	681b      	ldr	r3, [r3, #0]
 8009618:	689a      	ldr	r2, [r3, #8]
 800961a:	68bb      	ldr	r3, [r7, #8]
 800961c:	4013      	ands	r3, r2
 800961e:	687a      	ldr	r2, [r7, #4]
 8009620:	429a      	cmp	r2, r3
 8009622:	d196      	bne.n	8009552 <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 8009624:	2300      	movs	r3, #0
}
 8009626:	4618      	mov	r0, r3
 8009628:	3728      	adds	r7, #40	@ 0x28
 800962a:	46bd      	mov	sp, r7
 800962c:	bd80      	pop	{r7, pc}
 800962e:	bf00      	nop
 8009630:	20000008 	.word	0x20000008

08009634 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8009634:	b580      	push	{r7, lr}
 8009636:	b086      	sub	sp, #24
 8009638:	af02      	add	r7, sp, #8
 800963a:	60f8      	str	r0, [r7, #12]
 800963c:	60b9      	str	r1, [r7, #8]
 800963e:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8009640:	687b      	ldr	r3, [r7, #4]
 8009642:	9300      	str	r3, [sp, #0]
 8009644:	68bb      	ldr	r3, [r7, #8]
 8009646:	2200      	movs	r2, #0
 8009648:	f44f 51c0 	mov.w	r1, #6144	@ 0x1800
 800964c:	68f8      	ldr	r0, [r7, #12]
 800964e:	f7ff ff5b 	bl	8009508 <SPI_WaitFifoStateUntilTimeout>
 8009652:	4603      	mov	r3, r0
 8009654:	2b00      	cmp	r3, #0
 8009656:	d007      	beq.n	8009668 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8009658:	68fb      	ldr	r3, [r7, #12]
 800965a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800965c:	f043 0220 	orr.w	r2, r3, #32
 8009660:	68fb      	ldr	r3, [r7, #12]
 8009662:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8009664:	2303      	movs	r3, #3
 8009666:	e027      	b.n	80096b8 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8009668:	687b      	ldr	r3, [r7, #4]
 800966a:	9300      	str	r3, [sp, #0]
 800966c:	68bb      	ldr	r3, [r7, #8]
 800966e:	2200      	movs	r2, #0
 8009670:	2180      	movs	r1, #128	@ 0x80
 8009672:	68f8      	ldr	r0, [r7, #12]
 8009674:	f7ff fec0 	bl	80093f8 <SPI_WaitFlagStateUntilTimeout>
 8009678:	4603      	mov	r3, r0
 800967a:	2b00      	cmp	r3, #0
 800967c:	d007      	beq.n	800968e <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800967e:	68fb      	ldr	r3, [r7, #12]
 8009680:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8009682:	f043 0220 	orr.w	r2, r3, #32
 8009686:	68fb      	ldr	r3, [r7, #12]
 8009688:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 800968a:	2303      	movs	r3, #3
 800968c:	e014      	b.n	80096b8 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800968e:	687b      	ldr	r3, [r7, #4]
 8009690:	9300      	str	r3, [sp, #0]
 8009692:	68bb      	ldr	r3, [r7, #8]
 8009694:	2200      	movs	r2, #0
 8009696:	f44f 61c0 	mov.w	r1, #1536	@ 0x600
 800969a:	68f8      	ldr	r0, [r7, #12]
 800969c:	f7ff ff34 	bl	8009508 <SPI_WaitFifoStateUntilTimeout>
 80096a0:	4603      	mov	r3, r0
 80096a2:	2b00      	cmp	r3, #0
 80096a4:	d007      	beq.n	80096b6 <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80096a6:	68fb      	ldr	r3, [r7, #12]
 80096a8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80096aa:	f043 0220 	orr.w	r2, r3, #32
 80096ae:	68fb      	ldr	r3, [r7, #12]
 80096b0:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 80096b2:	2303      	movs	r3, #3
 80096b4:	e000      	b.n	80096b8 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 80096b6:	2300      	movs	r3, #0
}
 80096b8:	4618      	mov	r0, r3
 80096ba:	3710      	adds	r7, #16
 80096bc:	46bd      	mov	sp, r7
 80096be:	bd80      	pop	{r7, pc}

080096c0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80096c0:	b580      	push	{r7, lr}
 80096c2:	b082      	sub	sp, #8
 80096c4:	af00      	add	r7, sp, #0
 80096c6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80096c8:	687b      	ldr	r3, [r7, #4]
 80096ca:	2b00      	cmp	r3, #0
 80096cc:	d101      	bne.n	80096d2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80096ce:	2301      	movs	r3, #1
 80096d0:	e049      	b.n	8009766 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80096d2:	687b      	ldr	r3, [r7, #4]
 80096d4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80096d8:	b2db      	uxtb	r3, r3
 80096da:	2b00      	cmp	r3, #0
 80096dc:	d106      	bne.n	80096ec <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80096de:	687b      	ldr	r3, [r7, #4]
 80096e0:	2200      	movs	r2, #0
 80096e2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80096e6:	6878      	ldr	r0, [r7, #4]
 80096e8:	f7f9 f864 	bl	80027b4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80096ec:	687b      	ldr	r3, [r7, #4]
 80096ee:	2202      	movs	r2, #2
 80096f0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80096f4:	687b      	ldr	r3, [r7, #4]
 80096f6:	681a      	ldr	r2, [r3, #0]
 80096f8:	687b      	ldr	r3, [r7, #4]
 80096fa:	3304      	adds	r3, #4
 80096fc:	4619      	mov	r1, r3
 80096fe:	4610      	mov	r0, r2
 8009700:	f000 fe1e 	bl	800a340 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8009704:	687b      	ldr	r3, [r7, #4]
 8009706:	2201      	movs	r2, #1
 8009708:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800970c:	687b      	ldr	r3, [r7, #4]
 800970e:	2201      	movs	r2, #1
 8009710:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8009714:	687b      	ldr	r3, [r7, #4]
 8009716:	2201      	movs	r2, #1
 8009718:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800971c:	687b      	ldr	r3, [r7, #4]
 800971e:	2201      	movs	r2, #1
 8009720:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8009724:	687b      	ldr	r3, [r7, #4]
 8009726:	2201      	movs	r2, #1
 8009728:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800972c:	687b      	ldr	r3, [r7, #4]
 800972e:	2201      	movs	r2, #1
 8009730:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8009734:	687b      	ldr	r3, [r7, #4]
 8009736:	2201      	movs	r2, #1
 8009738:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800973c:	687b      	ldr	r3, [r7, #4]
 800973e:	2201      	movs	r2, #1
 8009740:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8009744:	687b      	ldr	r3, [r7, #4]
 8009746:	2201      	movs	r2, #1
 8009748:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800974c:	687b      	ldr	r3, [r7, #4]
 800974e:	2201      	movs	r2, #1
 8009750:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8009754:	687b      	ldr	r3, [r7, #4]
 8009756:	2201      	movs	r2, #1
 8009758:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800975c:	687b      	ldr	r3, [r7, #4]
 800975e:	2201      	movs	r2, #1
 8009760:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8009764:	2300      	movs	r3, #0
}
 8009766:	4618      	mov	r0, r3
 8009768:	3708      	adds	r7, #8
 800976a:	46bd      	mov	sp, r7
 800976c:	bd80      	pop	{r7, pc}
	...

08009770 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8009770:	b480      	push	{r7}
 8009772:	b085      	sub	sp, #20
 8009774:	af00      	add	r7, sp, #0
 8009776:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8009778:	687b      	ldr	r3, [r7, #4]
 800977a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800977e:	b2db      	uxtb	r3, r3
 8009780:	2b01      	cmp	r3, #1
 8009782:	d001      	beq.n	8009788 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8009784:	2301      	movs	r3, #1
 8009786:	e04a      	b.n	800981e <HAL_TIM_Base_Start_IT+0xae>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009788:	687b      	ldr	r3, [r7, #4]
 800978a:	2202      	movs	r2, #2
 800978c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8009790:	687b      	ldr	r3, [r7, #4]
 8009792:	681b      	ldr	r3, [r3, #0]
 8009794:	68da      	ldr	r2, [r3, #12]
 8009796:	687b      	ldr	r3, [r7, #4]
 8009798:	681b      	ldr	r3, [r3, #0]
 800979a:	f042 0201 	orr.w	r2, r2, #1
 800979e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80097a0:	687b      	ldr	r3, [r7, #4]
 80097a2:	681b      	ldr	r3, [r3, #0]
 80097a4:	4a21      	ldr	r2, [pc, #132]	@ (800982c <HAL_TIM_Base_Start_IT+0xbc>)
 80097a6:	4293      	cmp	r3, r2
 80097a8:	d018      	beq.n	80097dc <HAL_TIM_Base_Start_IT+0x6c>
 80097aa:	687b      	ldr	r3, [r7, #4]
 80097ac:	681b      	ldr	r3, [r3, #0]
 80097ae:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80097b2:	d013      	beq.n	80097dc <HAL_TIM_Base_Start_IT+0x6c>
 80097b4:	687b      	ldr	r3, [r7, #4]
 80097b6:	681b      	ldr	r3, [r3, #0]
 80097b8:	4a1d      	ldr	r2, [pc, #116]	@ (8009830 <HAL_TIM_Base_Start_IT+0xc0>)
 80097ba:	4293      	cmp	r3, r2
 80097bc:	d00e      	beq.n	80097dc <HAL_TIM_Base_Start_IT+0x6c>
 80097be:	687b      	ldr	r3, [r7, #4]
 80097c0:	681b      	ldr	r3, [r3, #0]
 80097c2:	4a1c      	ldr	r2, [pc, #112]	@ (8009834 <HAL_TIM_Base_Start_IT+0xc4>)
 80097c4:	4293      	cmp	r3, r2
 80097c6:	d009      	beq.n	80097dc <HAL_TIM_Base_Start_IT+0x6c>
 80097c8:	687b      	ldr	r3, [r7, #4]
 80097ca:	681b      	ldr	r3, [r3, #0]
 80097cc:	4a1a      	ldr	r2, [pc, #104]	@ (8009838 <HAL_TIM_Base_Start_IT+0xc8>)
 80097ce:	4293      	cmp	r3, r2
 80097d0:	d004      	beq.n	80097dc <HAL_TIM_Base_Start_IT+0x6c>
 80097d2:	687b      	ldr	r3, [r7, #4]
 80097d4:	681b      	ldr	r3, [r3, #0]
 80097d6:	4a19      	ldr	r2, [pc, #100]	@ (800983c <HAL_TIM_Base_Start_IT+0xcc>)
 80097d8:	4293      	cmp	r3, r2
 80097da:	d115      	bne.n	8009808 <HAL_TIM_Base_Start_IT+0x98>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80097dc:	687b      	ldr	r3, [r7, #4]
 80097de:	681b      	ldr	r3, [r3, #0]
 80097e0:	689a      	ldr	r2, [r3, #8]
 80097e2:	4b17      	ldr	r3, [pc, #92]	@ (8009840 <HAL_TIM_Base_Start_IT+0xd0>)
 80097e4:	4013      	ands	r3, r2
 80097e6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80097e8:	68fb      	ldr	r3, [r7, #12]
 80097ea:	2b06      	cmp	r3, #6
 80097ec:	d015      	beq.n	800981a <HAL_TIM_Base_Start_IT+0xaa>
 80097ee:	68fb      	ldr	r3, [r7, #12]
 80097f0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80097f4:	d011      	beq.n	800981a <HAL_TIM_Base_Start_IT+0xaa>
    {
      __HAL_TIM_ENABLE(htim);
 80097f6:	687b      	ldr	r3, [r7, #4]
 80097f8:	681b      	ldr	r3, [r3, #0]
 80097fa:	681a      	ldr	r2, [r3, #0]
 80097fc:	687b      	ldr	r3, [r7, #4]
 80097fe:	681b      	ldr	r3, [r3, #0]
 8009800:	f042 0201 	orr.w	r2, r2, #1
 8009804:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009806:	e008      	b.n	800981a <HAL_TIM_Base_Start_IT+0xaa>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8009808:	687b      	ldr	r3, [r7, #4]
 800980a:	681b      	ldr	r3, [r3, #0]
 800980c:	681a      	ldr	r2, [r3, #0]
 800980e:	687b      	ldr	r3, [r7, #4]
 8009810:	681b      	ldr	r3, [r3, #0]
 8009812:	f042 0201 	orr.w	r2, r2, #1
 8009816:	601a      	str	r2, [r3, #0]
 8009818:	e000      	b.n	800981c <HAL_TIM_Base_Start_IT+0xac>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800981a:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800981c:	2300      	movs	r3, #0
}
 800981e:	4618      	mov	r0, r3
 8009820:	3714      	adds	r7, #20
 8009822:	46bd      	mov	sp, r7
 8009824:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009828:	4770      	bx	lr
 800982a:	bf00      	nop
 800982c:	40012c00 	.word	0x40012c00
 8009830:	40000400 	.word	0x40000400
 8009834:	40000800 	.word	0x40000800
 8009838:	40013400 	.word	0x40013400
 800983c:	40014000 	.word	0x40014000
 8009840:	00010007 	.word	0x00010007

08009844 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8009844:	b580      	push	{r7, lr}
 8009846:	b082      	sub	sp, #8
 8009848:	af00      	add	r7, sp, #0
 800984a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800984c:	687b      	ldr	r3, [r7, #4]
 800984e:	2b00      	cmp	r3, #0
 8009850:	d101      	bne.n	8009856 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8009852:	2301      	movs	r3, #1
 8009854:	e049      	b.n	80098ea <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8009856:	687b      	ldr	r3, [r7, #4]
 8009858:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800985c:	b2db      	uxtb	r3, r3
 800985e:	2b00      	cmp	r3, #0
 8009860:	d106      	bne.n	8009870 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8009862:	687b      	ldr	r3, [r7, #4]
 8009864:	2200      	movs	r2, #0
 8009866:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800986a:	6878      	ldr	r0, [r7, #4]
 800986c:	f000 f841 	bl	80098f2 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009870:	687b      	ldr	r3, [r7, #4]
 8009872:	2202      	movs	r2, #2
 8009874:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8009878:	687b      	ldr	r3, [r7, #4]
 800987a:	681a      	ldr	r2, [r3, #0]
 800987c:	687b      	ldr	r3, [r7, #4]
 800987e:	3304      	adds	r3, #4
 8009880:	4619      	mov	r1, r3
 8009882:	4610      	mov	r0, r2
 8009884:	f000 fd5c 	bl	800a340 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8009888:	687b      	ldr	r3, [r7, #4]
 800988a:	2201      	movs	r2, #1
 800988c:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009890:	687b      	ldr	r3, [r7, #4]
 8009892:	2201      	movs	r2, #1
 8009894:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8009898:	687b      	ldr	r3, [r7, #4]
 800989a:	2201      	movs	r2, #1
 800989c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80098a0:	687b      	ldr	r3, [r7, #4]
 80098a2:	2201      	movs	r2, #1
 80098a4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80098a8:	687b      	ldr	r3, [r7, #4]
 80098aa:	2201      	movs	r2, #1
 80098ac:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80098b0:	687b      	ldr	r3, [r7, #4]
 80098b2:	2201      	movs	r2, #1
 80098b4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80098b8:	687b      	ldr	r3, [r7, #4]
 80098ba:	2201      	movs	r2, #1
 80098bc:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80098c0:	687b      	ldr	r3, [r7, #4]
 80098c2:	2201      	movs	r2, #1
 80098c4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80098c8:	687b      	ldr	r3, [r7, #4]
 80098ca:	2201      	movs	r2, #1
 80098cc:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80098d0:	687b      	ldr	r3, [r7, #4]
 80098d2:	2201      	movs	r2, #1
 80098d4:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 80098d8:	687b      	ldr	r3, [r7, #4]
 80098da:	2201      	movs	r2, #1
 80098dc:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80098e0:	687b      	ldr	r3, [r7, #4]
 80098e2:	2201      	movs	r2, #1
 80098e4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80098e8:	2300      	movs	r3, #0
}
 80098ea:	4618      	mov	r0, r3
 80098ec:	3708      	adds	r7, #8
 80098ee:	46bd      	mov	sp, r7
 80098f0:	bd80      	pop	{r7, pc}

080098f2 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80098f2:	b480      	push	{r7}
 80098f4:	b083      	sub	sp, #12
 80098f6:	af00      	add	r7, sp, #0
 80098f8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80098fa:	bf00      	nop
 80098fc:	370c      	adds	r7, #12
 80098fe:	46bd      	mov	sp, r7
 8009900:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009904:	4770      	bx	lr
	...

08009908 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8009908:	b580      	push	{r7, lr}
 800990a:	b084      	sub	sp, #16
 800990c:	af00      	add	r7, sp, #0
 800990e:	6078      	str	r0, [r7, #4]
 8009910:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8009912:	683b      	ldr	r3, [r7, #0]
 8009914:	2b00      	cmp	r3, #0
 8009916:	d109      	bne.n	800992c <HAL_TIM_PWM_Start+0x24>
 8009918:	687b      	ldr	r3, [r7, #4]
 800991a:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800991e:	b2db      	uxtb	r3, r3
 8009920:	2b01      	cmp	r3, #1
 8009922:	bf14      	ite	ne
 8009924:	2301      	movne	r3, #1
 8009926:	2300      	moveq	r3, #0
 8009928:	b2db      	uxtb	r3, r3
 800992a:	e03c      	b.n	80099a6 <HAL_TIM_PWM_Start+0x9e>
 800992c:	683b      	ldr	r3, [r7, #0]
 800992e:	2b04      	cmp	r3, #4
 8009930:	d109      	bne.n	8009946 <HAL_TIM_PWM_Start+0x3e>
 8009932:	687b      	ldr	r3, [r7, #4]
 8009934:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8009938:	b2db      	uxtb	r3, r3
 800993a:	2b01      	cmp	r3, #1
 800993c:	bf14      	ite	ne
 800993e:	2301      	movne	r3, #1
 8009940:	2300      	moveq	r3, #0
 8009942:	b2db      	uxtb	r3, r3
 8009944:	e02f      	b.n	80099a6 <HAL_TIM_PWM_Start+0x9e>
 8009946:	683b      	ldr	r3, [r7, #0]
 8009948:	2b08      	cmp	r3, #8
 800994a:	d109      	bne.n	8009960 <HAL_TIM_PWM_Start+0x58>
 800994c:	687b      	ldr	r3, [r7, #4]
 800994e:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8009952:	b2db      	uxtb	r3, r3
 8009954:	2b01      	cmp	r3, #1
 8009956:	bf14      	ite	ne
 8009958:	2301      	movne	r3, #1
 800995a:	2300      	moveq	r3, #0
 800995c:	b2db      	uxtb	r3, r3
 800995e:	e022      	b.n	80099a6 <HAL_TIM_PWM_Start+0x9e>
 8009960:	683b      	ldr	r3, [r7, #0]
 8009962:	2b0c      	cmp	r3, #12
 8009964:	d109      	bne.n	800997a <HAL_TIM_PWM_Start+0x72>
 8009966:	687b      	ldr	r3, [r7, #4]
 8009968:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800996c:	b2db      	uxtb	r3, r3
 800996e:	2b01      	cmp	r3, #1
 8009970:	bf14      	ite	ne
 8009972:	2301      	movne	r3, #1
 8009974:	2300      	moveq	r3, #0
 8009976:	b2db      	uxtb	r3, r3
 8009978:	e015      	b.n	80099a6 <HAL_TIM_PWM_Start+0x9e>
 800997a:	683b      	ldr	r3, [r7, #0]
 800997c:	2b10      	cmp	r3, #16
 800997e:	d109      	bne.n	8009994 <HAL_TIM_PWM_Start+0x8c>
 8009980:	687b      	ldr	r3, [r7, #4]
 8009982:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8009986:	b2db      	uxtb	r3, r3
 8009988:	2b01      	cmp	r3, #1
 800998a:	bf14      	ite	ne
 800998c:	2301      	movne	r3, #1
 800998e:	2300      	moveq	r3, #0
 8009990:	b2db      	uxtb	r3, r3
 8009992:	e008      	b.n	80099a6 <HAL_TIM_PWM_Start+0x9e>
 8009994:	687b      	ldr	r3, [r7, #4]
 8009996:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 800999a:	b2db      	uxtb	r3, r3
 800999c:	2b01      	cmp	r3, #1
 800999e:	bf14      	ite	ne
 80099a0:	2301      	movne	r3, #1
 80099a2:	2300      	moveq	r3, #0
 80099a4:	b2db      	uxtb	r3, r3
 80099a6:	2b00      	cmp	r3, #0
 80099a8:	d001      	beq.n	80099ae <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 80099aa:	2301      	movs	r3, #1
 80099ac:	e097      	b.n	8009ade <HAL_TIM_PWM_Start+0x1d6>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80099ae:	683b      	ldr	r3, [r7, #0]
 80099b0:	2b00      	cmp	r3, #0
 80099b2:	d104      	bne.n	80099be <HAL_TIM_PWM_Start+0xb6>
 80099b4:	687b      	ldr	r3, [r7, #4]
 80099b6:	2202      	movs	r2, #2
 80099b8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80099bc:	e023      	b.n	8009a06 <HAL_TIM_PWM_Start+0xfe>
 80099be:	683b      	ldr	r3, [r7, #0]
 80099c0:	2b04      	cmp	r3, #4
 80099c2:	d104      	bne.n	80099ce <HAL_TIM_PWM_Start+0xc6>
 80099c4:	687b      	ldr	r3, [r7, #4]
 80099c6:	2202      	movs	r2, #2
 80099c8:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80099cc:	e01b      	b.n	8009a06 <HAL_TIM_PWM_Start+0xfe>
 80099ce:	683b      	ldr	r3, [r7, #0]
 80099d0:	2b08      	cmp	r3, #8
 80099d2:	d104      	bne.n	80099de <HAL_TIM_PWM_Start+0xd6>
 80099d4:	687b      	ldr	r3, [r7, #4]
 80099d6:	2202      	movs	r2, #2
 80099d8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80099dc:	e013      	b.n	8009a06 <HAL_TIM_PWM_Start+0xfe>
 80099de:	683b      	ldr	r3, [r7, #0]
 80099e0:	2b0c      	cmp	r3, #12
 80099e2:	d104      	bne.n	80099ee <HAL_TIM_PWM_Start+0xe6>
 80099e4:	687b      	ldr	r3, [r7, #4]
 80099e6:	2202      	movs	r2, #2
 80099e8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80099ec:	e00b      	b.n	8009a06 <HAL_TIM_PWM_Start+0xfe>
 80099ee:	683b      	ldr	r3, [r7, #0]
 80099f0:	2b10      	cmp	r3, #16
 80099f2:	d104      	bne.n	80099fe <HAL_TIM_PWM_Start+0xf6>
 80099f4:	687b      	ldr	r3, [r7, #4]
 80099f6:	2202      	movs	r2, #2
 80099f8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80099fc:	e003      	b.n	8009a06 <HAL_TIM_PWM_Start+0xfe>
 80099fe:	687b      	ldr	r3, [r7, #4]
 8009a00:	2202      	movs	r2, #2
 8009a02:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8009a06:	687b      	ldr	r3, [r7, #4]
 8009a08:	681b      	ldr	r3, [r3, #0]
 8009a0a:	2201      	movs	r2, #1
 8009a0c:	6839      	ldr	r1, [r7, #0]
 8009a0e:	4618      	mov	r0, r3
 8009a10:	f001 f8c4 	bl	800ab9c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8009a14:	687b      	ldr	r3, [r7, #4]
 8009a16:	681b      	ldr	r3, [r3, #0]
 8009a18:	4a33      	ldr	r2, [pc, #204]	@ (8009ae8 <HAL_TIM_PWM_Start+0x1e0>)
 8009a1a:	4293      	cmp	r3, r2
 8009a1c:	d013      	beq.n	8009a46 <HAL_TIM_PWM_Start+0x13e>
 8009a1e:	687b      	ldr	r3, [r7, #4]
 8009a20:	681b      	ldr	r3, [r3, #0]
 8009a22:	4a32      	ldr	r2, [pc, #200]	@ (8009aec <HAL_TIM_PWM_Start+0x1e4>)
 8009a24:	4293      	cmp	r3, r2
 8009a26:	d00e      	beq.n	8009a46 <HAL_TIM_PWM_Start+0x13e>
 8009a28:	687b      	ldr	r3, [r7, #4]
 8009a2a:	681b      	ldr	r3, [r3, #0]
 8009a2c:	4a30      	ldr	r2, [pc, #192]	@ (8009af0 <HAL_TIM_PWM_Start+0x1e8>)
 8009a2e:	4293      	cmp	r3, r2
 8009a30:	d009      	beq.n	8009a46 <HAL_TIM_PWM_Start+0x13e>
 8009a32:	687b      	ldr	r3, [r7, #4]
 8009a34:	681b      	ldr	r3, [r3, #0]
 8009a36:	4a2f      	ldr	r2, [pc, #188]	@ (8009af4 <HAL_TIM_PWM_Start+0x1ec>)
 8009a38:	4293      	cmp	r3, r2
 8009a3a:	d004      	beq.n	8009a46 <HAL_TIM_PWM_Start+0x13e>
 8009a3c:	687b      	ldr	r3, [r7, #4]
 8009a3e:	681b      	ldr	r3, [r3, #0]
 8009a40:	4a2d      	ldr	r2, [pc, #180]	@ (8009af8 <HAL_TIM_PWM_Start+0x1f0>)
 8009a42:	4293      	cmp	r3, r2
 8009a44:	d101      	bne.n	8009a4a <HAL_TIM_PWM_Start+0x142>
 8009a46:	2301      	movs	r3, #1
 8009a48:	e000      	b.n	8009a4c <HAL_TIM_PWM_Start+0x144>
 8009a4a:	2300      	movs	r3, #0
 8009a4c:	2b00      	cmp	r3, #0
 8009a4e:	d007      	beq.n	8009a60 <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8009a50:	687b      	ldr	r3, [r7, #4]
 8009a52:	681b      	ldr	r3, [r3, #0]
 8009a54:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8009a56:	687b      	ldr	r3, [r7, #4]
 8009a58:	681b      	ldr	r3, [r3, #0]
 8009a5a:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8009a5e:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8009a60:	687b      	ldr	r3, [r7, #4]
 8009a62:	681b      	ldr	r3, [r3, #0]
 8009a64:	4a20      	ldr	r2, [pc, #128]	@ (8009ae8 <HAL_TIM_PWM_Start+0x1e0>)
 8009a66:	4293      	cmp	r3, r2
 8009a68:	d018      	beq.n	8009a9c <HAL_TIM_PWM_Start+0x194>
 8009a6a:	687b      	ldr	r3, [r7, #4]
 8009a6c:	681b      	ldr	r3, [r3, #0]
 8009a6e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8009a72:	d013      	beq.n	8009a9c <HAL_TIM_PWM_Start+0x194>
 8009a74:	687b      	ldr	r3, [r7, #4]
 8009a76:	681b      	ldr	r3, [r3, #0]
 8009a78:	4a20      	ldr	r2, [pc, #128]	@ (8009afc <HAL_TIM_PWM_Start+0x1f4>)
 8009a7a:	4293      	cmp	r3, r2
 8009a7c:	d00e      	beq.n	8009a9c <HAL_TIM_PWM_Start+0x194>
 8009a7e:	687b      	ldr	r3, [r7, #4]
 8009a80:	681b      	ldr	r3, [r3, #0]
 8009a82:	4a1f      	ldr	r2, [pc, #124]	@ (8009b00 <HAL_TIM_PWM_Start+0x1f8>)
 8009a84:	4293      	cmp	r3, r2
 8009a86:	d009      	beq.n	8009a9c <HAL_TIM_PWM_Start+0x194>
 8009a88:	687b      	ldr	r3, [r7, #4]
 8009a8a:	681b      	ldr	r3, [r3, #0]
 8009a8c:	4a17      	ldr	r2, [pc, #92]	@ (8009aec <HAL_TIM_PWM_Start+0x1e4>)
 8009a8e:	4293      	cmp	r3, r2
 8009a90:	d004      	beq.n	8009a9c <HAL_TIM_PWM_Start+0x194>
 8009a92:	687b      	ldr	r3, [r7, #4]
 8009a94:	681b      	ldr	r3, [r3, #0]
 8009a96:	4a16      	ldr	r2, [pc, #88]	@ (8009af0 <HAL_TIM_PWM_Start+0x1e8>)
 8009a98:	4293      	cmp	r3, r2
 8009a9a:	d115      	bne.n	8009ac8 <HAL_TIM_PWM_Start+0x1c0>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8009a9c:	687b      	ldr	r3, [r7, #4]
 8009a9e:	681b      	ldr	r3, [r3, #0]
 8009aa0:	689a      	ldr	r2, [r3, #8]
 8009aa2:	4b18      	ldr	r3, [pc, #96]	@ (8009b04 <HAL_TIM_PWM_Start+0x1fc>)
 8009aa4:	4013      	ands	r3, r2
 8009aa6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009aa8:	68fb      	ldr	r3, [r7, #12]
 8009aaa:	2b06      	cmp	r3, #6
 8009aac:	d015      	beq.n	8009ada <HAL_TIM_PWM_Start+0x1d2>
 8009aae:	68fb      	ldr	r3, [r7, #12]
 8009ab0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8009ab4:	d011      	beq.n	8009ada <HAL_TIM_PWM_Start+0x1d2>
    {
      __HAL_TIM_ENABLE(htim);
 8009ab6:	687b      	ldr	r3, [r7, #4]
 8009ab8:	681b      	ldr	r3, [r3, #0]
 8009aba:	681a      	ldr	r2, [r3, #0]
 8009abc:	687b      	ldr	r3, [r7, #4]
 8009abe:	681b      	ldr	r3, [r3, #0]
 8009ac0:	f042 0201 	orr.w	r2, r2, #1
 8009ac4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009ac6:	e008      	b.n	8009ada <HAL_TIM_PWM_Start+0x1d2>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8009ac8:	687b      	ldr	r3, [r7, #4]
 8009aca:	681b      	ldr	r3, [r3, #0]
 8009acc:	681a      	ldr	r2, [r3, #0]
 8009ace:	687b      	ldr	r3, [r7, #4]
 8009ad0:	681b      	ldr	r3, [r3, #0]
 8009ad2:	f042 0201 	orr.w	r2, r2, #1
 8009ad6:	601a      	str	r2, [r3, #0]
 8009ad8:	e000      	b.n	8009adc <HAL_TIM_PWM_Start+0x1d4>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009ada:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8009adc:	2300      	movs	r3, #0
}
 8009ade:	4618      	mov	r0, r3
 8009ae0:	3710      	adds	r7, #16
 8009ae2:	46bd      	mov	sp, r7
 8009ae4:	bd80      	pop	{r7, pc}
 8009ae6:	bf00      	nop
 8009ae8:	40012c00 	.word	0x40012c00
 8009aec:	40013400 	.word	0x40013400
 8009af0:	40014000 	.word	0x40014000
 8009af4:	40014400 	.word	0x40014400
 8009af8:	40014800 	.word	0x40014800
 8009afc:	40000400 	.word	0x40000400
 8009b00:	40000800 	.word	0x40000800
 8009b04:	00010007 	.word	0x00010007

08009b08 <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8009b08:	b580      	push	{r7, lr}
 8009b0a:	b082      	sub	sp, #8
 8009b0c:	af00      	add	r7, sp, #0
 8009b0e:	6078      	str	r0, [r7, #4]
 8009b10:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8009b12:	687b      	ldr	r3, [r7, #4]
 8009b14:	681b      	ldr	r3, [r3, #0]
 8009b16:	2200      	movs	r2, #0
 8009b18:	6839      	ldr	r1, [r7, #0]
 8009b1a:	4618      	mov	r0, r3
 8009b1c:	f001 f83e 	bl	800ab9c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8009b20:	687b      	ldr	r3, [r7, #4]
 8009b22:	681b      	ldr	r3, [r3, #0]
 8009b24:	4a3e      	ldr	r2, [pc, #248]	@ (8009c20 <HAL_TIM_PWM_Stop+0x118>)
 8009b26:	4293      	cmp	r3, r2
 8009b28:	d013      	beq.n	8009b52 <HAL_TIM_PWM_Stop+0x4a>
 8009b2a:	687b      	ldr	r3, [r7, #4]
 8009b2c:	681b      	ldr	r3, [r3, #0]
 8009b2e:	4a3d      	ldr	r2, [pc, #244]	@ (8009c24 <HAL_TIM_PWM_Stop+0x11c>)
 8009b30:	4293      	cmp	r3, r2
 8009b32:	d00e      	beq.n	8009b52 <HAL_TIM_PWM_Stop+0x4a>
 8009b34:	687b      	ldr	r3, [r7, #4]
 8009b36:	681b      	ldr	r3, [r3, #0]
 8009b38:	4a3b      	ldr	r2, [pc, #236]	@ (8009c28 <HAL_TIM_PWM_Stop+0x120>)
 8009b3a:	4293      	cmp	r3, r2
 8009b3c:	d009      	beq.n	8009b52 <HAL_TIM_PWM_Stop+0x4a>
 8009b3e:	687b      	ldr	r3, [r7, #4]
 8009b40:	681b      	ldr	r3, [r3, #0]
 8009b42:	4a3a      	ldr	r2, [pc, #232]	@ (8009c2c <HAL_TIM_PWM_Stop+0x124>)
 8009b44:	4293      	cmp	r3, r2
 8009b46:	d004      	beq.n	8009b52 <HAL_TIM_PWM_Stop+0x4a>
 8009b48:	687b      	ldr	r3, [r7, #4]
 8009b4a:	681b      	ldr	r3, [r3, #0]
 8009b4c:	4a38      	ldr	r2, [pc, #224]	@ (8009c30 <HAL_TIM_PWM_Stop+0x128>)
 8009b4e:	4293      	cmp	r3, r2
 8009b50:	d101      	bne.n	8009b56 <HAL_TIM_PWM_Stop+0x4e>
 8009b52:	2301      	movs	r3, #1
 8009b54:	e000      	b.n	8009b58 <HAL_TIM_PWM_Stop+0x50>
 8009b56:	2300      	movs	r3, #0
 8009b58:	2b00      	cmp	r3, #0
 8009b5a:	d017      	beq.n	8009b8c <HAL_TIM_PWM_Stop+0x84>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 8009b5c:	687b      	ldr	r3, [r7, #4]
 8009b5e:	681b      	ldr	r3, [r3, #0]
 8009b60:	6a1a      	ldr	r2, [r3, #32]
 8009b62:	f241 1311 	movw	r3, #4369	@ 0x1111
 8009b66:	4013      	ands	r3, r2
 8009b68:	2b00      	cmp	r3, #0
 8009b6a:	d10f      	bne.n	8009b8c <HAL_TIM_PWM_Stop+0x84>
 8009b6c:	687b      	ldr	r3, [r7, #4]
 8009b6e:	681b      	ldr	r3, [r3, #0]
 8009b70:	6a1a      	ldr	r2, [r3, #32]
 8009b72:	f244 4344 	movw	r3, #17476	@ 0x4444
 8009b76:	4013      	ands	r3, r2
 8009b78:	2b00      	cmp	r3, #0
 8009b7a:	d107      	bne.n	8009b8c <HAL_TIM_PWM_Stop+0x84>
 8009b7c:	687b      	ldr	r3, [r7, #4]
 8009b7e:	681b      	ldr	r3, [r3, #0]
 8009b80:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8009b82:	687b      	ldr	r3, [r7, #4]
 8009b84:	681b      	ldr	r3, [r3, #0]
 8009b86:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8009b8a:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8009b8c:	687b      	ldr	r3, [r7, #4]
 8009b8e:	681b      	ldr	r3, [r3, #0]
 8009b90:	6a1a      	ldr	r2, [r3, #32]
 8009b92:	f241 1311 	movw	r3, #4369	@ 0x1111
 8009b96:	4013      	ands	r3, r2
 8009b98:	2b00      	cmp	r3, #0
 8009b9a:	d10f      	bne.n	8009bbc <HAL_TIM_PWM_Stop+0xb4>
 8009b9c:	687b      	ldr	r3, [r7, #4]
 8009b9e:	681b      	ldr	r3, [r3, #0]
 8009ba0:	6a1a      	ldr	r2, [r3, #32]
 8009ba2:	f244 4344 	movw	r3, #17476	@ 0x4444
 8009ba6:	4013      	ands	r3, r2
 8009ba8:	2b00      	cmp	r3, #0
 8009baa:	d107      	bne.n	8009bbc <HAL_TIM_PWM_Stop+0xb4>
 8009bac:	687b      	ldr	r3, [r7, #4]
 8009bae:	681b      	ldr	r3, [r3, #0]
 8009bb0:	681a      	ldr	r2, [r3, #0]
 8009bb2:	687b      	ldr	r3, [r7, #4]
 8009bb4:	681b      	ldr	r3, [r3, #0]
 8009bb6:	f022 0201 	bic.w	r2, r2, #1
 8009bba:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8009bbc:	683b      	ldr	r3, [r7, #0]
 8009bbe:	2b00      	cmp	r3, #0
 8009bc0:	d104      	bne.n	8009bcc <HAL_TIM_PWM_Stop+0xc4>
 8009bc2:	687b      	ldr	r3, [r7, #4]
 8009bc4:	2201      	movs	r2, #1
 8009bc6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8009bca:	e023      	b.n	8009c14 <HAL_TIM_PWM_Stop+0x10c>
 8009bcc:	683b      	ldr	r3, [r7, #0]
 8009bce:	2b04      	cmp	r3, #4
 8009bd0:	d104      	bne.n	8009bdc <HAL_TIM_PWM_Stop+0xd4>
 8009bd2:	687b      	ldr	r3, [r7, #4]
 8009bd4:	2201      	movs	r2, #1
 8009bd6:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8009bda:	e01b      	b.n	8009c14 <HAL_TIM_PWM_Stop+0x10c>
 8009bdc:	683b      	ldr	r3, [r7, #0]
 8009bde:	2b08      	cmp	r3, #8
 8009be0:	d104      	bne.n	8009bec <HAL_TIM_PWM_Stop+0xe4>
 8009be2:	687b      	ldr	r3, [r7, #4]
 8009be4:	2201      	movs	r2, #1
 8009be6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8009bea:	e013      	b.n	8009c14 <HAL_TIM_PWM_Stop+0x10c>
 8009bec:	683b      	ldr	r3, [r7, #0]
 8009bee:	2b0c      	cmp	r3, #12
 8009bf0:	d104      	bne.n	8009bfc <HAL_TIM_PWM_Stop+0xf4>
 8009bf2:	687b      	ldr	r3, [r7, #4]
 8009bf4:	2201      	movs	r2, #1
 8009bf6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8009bfa:	e00b      	b.n	8009c14 <HAL_TIM_PWM_Stop+0x10c>
 8009bfc:	683b      	ldr	r3, [r7, #0]
 8009bfe:	2b10      	cmp	r3, #16
 8009c00:	d104      	bne.n	8009c0c <HAL_TIM_PWM_Stop+0x104>
 8009c02:	687b      	ldr	r3, [r7, #4]
 8009c04:	2201      	movs	r2, #1
 8009c06:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8009c0a:	e003      	b.n	8009c14 <HAL_TIM_PWM_Stop+0x10c>
 8009c0c:	687b      	ldr	r3, [r7, #4]
 8009c0e:	2201      	movs	r2, #1
 8009c10:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Return function status */
  return HAL_OK;
 8009c14:	2300      	movs	r3, #0
}
 8009c16:	4618      	mov	r0, r3
 8009c18:	3708      	adds	r7, #8
 8009c1a:	46bd      	mov	sp, r7
 8009c1c:	bd80      	pop	{r7, pc}
 8009c1e:	bf00      	nop
 8009c20:	40012c00 	.word	0x40012c00
 8009c24:	40013400 	.word	0x40013400
 8009c28:	40014000 	.word	0x40014000
 8009c2c:	40014400 	.word	0x40014400
 8009c30:	40014800 	.word	0x40014800

08009c34 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8009c34:	b580      	push	{r7, lr}
 8009c36:	b084      	sub	sp, #16
 8009c38:	af00      	add	r7, sp, #0
 8009c3a:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8009c3c:	687b      	ldr	r3, [r7, #4]
 8009c3e:	681b      	ldr	r3, [r3, #0]
 8009c40:	68db      	ldr	r3, [r3, #12]
 8009c42:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8009c44:	687b      	ldr	r3, [r7, #4]
 8009c46:	681b      	ldr	r3, [r3, #0]
 8009c48:	691b      	ldr	r3, [r3, #16]
 8009c4a:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8009c4c:	68bb      	ldr	r3, [r7, #8]
 8009c4e:	f003 0302 	and.w	r3, r3, #2
 8009c52:	2b00      	cmp	r3, #0
 8009c54:	d020      	beq.n	8009c98 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8009c56:	68fb      	ldr	r3, [r7, #12]
 8009c58:	f003 0302 	and.w	r3, r3, #2
 8009c5c:	2b00      	cmp	r3, #0
 8009c5e:	d01b      	beq.n	8009c98 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8009c60:	687b      	ldr	r3, [r7, #4]
 8009c62:	681b      	ldr	r3, [r3, #0]
 8009c64:	f06f 0202 	mvn.w	r2, #2
 8009c68:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8009c6a:	687b      	ldr	r3, [r7, #4]
 8009c6c:	2201      	movs	r2, #1
 8009c6e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8009c70:	687b      	ldr	r3, [r7, #4]
 8009c72:	681b      	ldr	r3, [r3, #0]
 8009c74:	699b      	ldr	r3, [r3, #24]
 8009c76:	f003 0303 	and.w	r3, r3, #3
 8009c7a:	2b00      	cmp	r3, #0
 8009c7c:	d003      	beq.n	8009c86 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8009c7e:	6878      	ldr	r0, [r7, #4]
 8009c80:	f000 fb40 	bl	800a304 <HAL_TIM_IC_CaptureCallback>
 8009c84:	e005      	b.n	8009c92 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8009c86:	6878      	ldr	r0, [r7, #4]
 8009c88:	f000 fb32 	bl	800a2f0 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009c8c:	6878      	ldr	r0, [r7, #4]
 8009c8e:	f000 fb43 	bl	800a318 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009c92:	687b      	ldr	r3, [r7, #4]
 8009c94:	2200      	movs	r2, #0
 8009c96:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8009c98:	68bb      	ldr	r3, [r7, #8]
 8009c9a:	f003 0304 	and.w	r3, r3, #4
 8009c9e:	2b00      	cmp	r3, #0
 8009ca0:	d020      	beq.n	8009ce4 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8009ca2:	68fb      	ldr	r3, [r7, #12]
 8009ca4:	f003 0304 	and.w	r3, r3, #4
 8009ca8:	2b00      	cmp	r3, #0
 8009caa:	d01b      	beq.n	8009ce4 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8009cac:	687b      	ldr	r3, [r7, #4]
 8009cae:	681b      	ldr	r3, [r3, #0]
 8009cb0:	f06f 0204 	mvn.w	r2, #4
 8009cb4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8009cb6:	687b      	ldr	r3, [r7, #4]
 8009cb8:	2202      	movs	r2, #2
 8009cba:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8009cbc:	687b      	ldr	r3, [r7, #4]
 8009cbe:	681b      	ldr	r3, [r3, #0]
 8009cc0:	699b      	ldr	r3, [r3, #24]
 8009cc2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8009cc6:	2b00      	cmp	r3, #0
 8009cc8:	d003      	beq.n	8009cd2 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8009cca:	6878      	ldr	r0, [r7, #4]
 8009ccc:	f000 fb1a 	bl	800a304 <HAL_TIM_IC_CaptureCallback>
 8009cd0:	e005      	b.n	8009cde <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8009cd2:	6878      	ldr	r0, [r7, #4]
 8009cd4:	f000 fb0c 	bl	800a2f0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009cd8:	6878      	ldr	r0, [r7, #4]
 8009cda:	f000 fb1d 	bl	800a318 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009cde:	687b      	ldr	r3, [r7, #4]
 8009ce0:	2200      	movs	r2, #0
 8009ce2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8009ce4:	68bb      	ldr	r3, [r7, #8]
 8009ce6:	f003 0308 	and.w	r3, r3, #8
 8009cea:	2b00      	cmp	r3, #0
 8009cec:	d020      	beq.n	8009d30 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8009cee:	68fb      	ldr	r3, [r7, #12]
 8009cf0:	f003 0308 	and.w	r3, r3, #8
 8009cf4:	2b00      	cmp	r3, #0
 8009cf6:	d01b      	beq.n	8009d30 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8009cf8:	687b      	ldr	r3, [r7, #4]
 8009cfa:	681b      	ldr	r3, [r3, #0]
 8009cfc:	f06f 0208 	mvn.w	r2, #8
 8009d00:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8009d02:	687b      	ldr	r3, [r7, #4]
 8009d04:	2204      	movs	r2, #4
 8009d06:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8009d08:	687b      	ldr	r3, [r7, #4]
 8009d0a:	681b      	ldr	r3, [r3, #0]
 8009d0c:	69db      	ldr	r3, [r3, #28]
 8009d0e:	f003 0303 	and.w	r3, r3, #3
 8009d12:	2b00      	cmp	r3, #0
 8009d14:	d003      	beq.n	8009d1e <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8009d16:	6878      	ldr	r0, [r7, #4]
 8009d18:	f000 faf4 	bl	800a304 <HAL_TIM_IC_CaptureCallback>
 8009d1c:	e005      	b.n	8009d2a <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8009d1e:	6878      	ldr	r0, [r7, #4]
 8009d20:	f000 fae6 	bl	800a2f0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009d24:	6878      	ldr	r0, [r7, #4]
 8009d26:	f000 faf7 	bl	800a318 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009d2a:	687b      	ldr	r3, [r7, #4]
 8009d2c:	2200      	movs	r2, #0
 8009d2e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8009d30:	68bb      	ldr	r3, [r7, #8]
 8009d32:	f003 0310 	and.w	r3, r3, #16
 8009d36:	2b00      	cmp	r3, #0
 8009d38:	d020      	beq.n	8009d7c <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8009d3a:	68fb      	ldr	r3, [r7, #12]
 8009d3c:	f003 0310 	and.w	r3, r3, #16
 8009d40:	2b00      	cmp	r3, #0
 8009d42:	d01b      	beq.n	8009d7c <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8009d44:	687b      	ldr	r3, [r7, #4]
 8009d46:	681b      	ldr	r3, [r3, #0]
 8009d48:	f06f 0210 	mvn.w	r2, #16
 8009d4c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8009d4e:	687b      	ldr	r3, [r7, #4]
 8009d50:	2208      	movs	r2, #8
 8009d52:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8009d54:	687b      	ldr	r3, [r7, #4]
 8009d56:	681b      	ldr	r3, [r3, #0]
 8009d58:	69db      	ldr	r3, [r3, #28]
 8009d5a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8009d5e:	2b00      	cmp	r3, #0
 8009d60:	d003      	beq.n	8009d6a <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8009d62:	6878      	ldr	r0, [r7, #4]
 8009d64:	f000 face 	bl	800a304 <HAL_TIM_IC_CaptureCallback>
 8009d68:	e005      	b.n	8009d76 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8009d6a:	6878      	ldr	r0, [r7, #4]
 8009d6c:	f000 fac0 	bl	800a2f0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009d70:	6878      	ldr	r0, [r7, #4]
 8009d72:	f000 fad1 	bl	800a318 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009d76:	687b      	ldr	r3, [r7, #4]
 8009d78:	2200      	movs	r2, #0
 8009d7a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8009d7c:	68bb      	ldr	r3, [r7, #8]
 8009d7e:	f003 0301 	and.w	r3, r3, #1
 8009d82:	2b00      	cmp	r3, #0
 8009d84:	d00c      	beq.n	8009da0 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8009d86:	68fb      	ldr	r3, [r7, #12]
 8009d88:	f003 0301 	and.w	r3, r3, #1
 8009d8c:	2b00      	cmp	r3, #0
 8009d8e:	d007      	beq.n	8009da0 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8009d90:	687b      	ldr	r3, [r7, #4]
 8009d92:	681b      	ldr	r3, [r3, #0]
 8009d94:	f06f 0201 	mvn.w	r2, #1
 8009d98:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8009d9a:	6878      	ldr	r0, [r7, #4]
 8009d9c:	f7f7 f8b8 	bl	8000f10 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8009da0:	68bb      	ldr	r3, [r7, #8]
 8009da2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8009da6:	2b00      	cmp	r3, #0
 8009da8:	d104      	bne.n	8009db4 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 8009daa:	68bb      	ldr	r3, [r7, #8]
 8009dac:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8009db0:	2b00      	cmp	r3, #0
 8009db2:	d00c      	beq.n	8009dce <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8009db4:	68fb      	ldr	r3, [r7, #12]
 8009db6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8009dba:	2b00      	cmp	r3, #0
 8009dbc:	d007      	beq.n	8009dce <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 8009dbe:	687b      	ldr	r3, [r7, #4]
 8009dc0:	681b      	ldr	r3, [r3, #0]
 8009dc2:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 8009dc6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8009dc8:	6878      	ldr	r0, [r7, #4]
 8009dca:	f001 f937 	bl	800b03c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8009dce:	68bb      	ldr	r3, [r7, #8]
 8009dd0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8009dd4:	2b00      	cmp	r3, #0
 8009dd6:	d00c      	beq.n	8009df2 <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8009dd8:	68fb      	ldr	r3, [r7, #12]
 8009dda:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8009dde:	2b00      	cmp	r3, #0
 8009de0:	d007      	beq.n	8009df2 <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8009de2:	687b      	ldr	r3, [r7, #4]
 8009de4:	681b      	ldr	r3, [r3, #0]
 8009de6:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 8009dea:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8009dec:	6878      	ldr	r0, [r7, #4]
 8009dee:	f001 f92f 	bl	800b050 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8009df2:	68bb      	ldr	r3, [r7, #8]
 8009df4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009df8:	2b00      	cmp	r3, #0
 8009dfa:	d00c      	beq.n	8009e16 <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8009dfc:	68fb      	ldr	r3, [r7, #12]
 8009dfe:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009e02:	2b00      	cmp	r3, #0
 8009e04:	d007      	beq.n	8009e16 <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8009e06:	687b      	ldr	r3, [r7, #4]
 8009e08:	681b      	ldr	r3, [r3, #0]
 8009e0a:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8009e0e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8009e10:	6878      	ldr	r0, [r7, #4]
 8009e12:	f000 fa8b 	bl	800a32c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8009e16:	68bb      	ldr	r3, [r7, #8]
 8009e18:	f003 0320 	and.w	r3, r3, #32
 8009e1c:	2b00      	cmp	r3, #0
 8009e1e:	d00c      	beq.n	8009e3a <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8009e20:	68fb      	ldr	r3, [r7, #12]
 8009e22:	f003 0320 	and.w	r3, r3, #32
 8009e26:	2b00      	cmp	r3, #0
 8009e28:	d007      	beq.n	8009e3a <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8009e2a:	687b      	ldr	r3, [r7, #4]
 8009e2c:	681b      	ldr	r3, [r3, #0]
 8009e2e:	f06f 0220 	mvn.w	r2, #32
 8009e32:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8009e34:	6878      	ldr	r0, [r7, #4]
 8009e36:	f001 f8f7 	bl	800b028 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Encoder index event */
  if ((itflag & (TIM_FLAG_IDX)) == (TIM_FLAG_IDX))
 8009e3a:	68bb      	ldr	r3, [r7, #8]
 8009e3c:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8009e40:	2b00      	cmp	r3, #0
 8009e42:	d00c      	beq.n	8009e5e <HAL_TIM_IRQHandler+0x22a>
  {
    if ((itsource & (TIM_IT_IDX)) == (TIM_IT_IDX))
 8009e44:	68fb      	ldr	r3, [r7, #12]
 8009e46:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8009e4a:	2b00      	cmp	r3, #0
 8009e4c:	d007      	beq.n	8009e5e <HAL_TIM_IRQHandler+0x22a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IDX);
 8009e4e:	687b      	ldr	r3, [r7, #4]
 8009e50:	681b      	ldr	r3, [r3, #0]
 8009e52:	f46f 1280 	mvn.w	r2, #1048576	@ 0x100000
 8009e56:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->EncoderIndexCallback(htim);
#else
      HAL_TIMEx_EncoderIndexCallback(htim);
 8009e58:	6878      	ldr	r0, [r7, #4]
 8009e5a:	f001 f903 	bl	800b064 <HAL_TIMEx_EncoderIndexCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Direction change event */
  if ((itflag & (TIM_FLAG_DIR)) == (TIM_FLAG_DIR))
 8009e5e:	68bb      	ldr	r3, [r7, #8]
 8009e60:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8009e64:	2b00      	cmp	r3, #0
 8009e66:	d00c      	beq.n	8009e82 <HAL_TIM_IRQHandler+0x24e>
  {
    if ((itsource & (TIM_IT_DIR)) == (TIM_IT_DIR))
 8009e68:	68fb      	ldr	r3, [r7, #12]
 8009e6a:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8009e6e:	2b00      	cmp	r3, #0
 8009e70:	d007      	beq.n	8009e82 <HAL_TIM_IRQHandler+0x24e>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_DIR);
 8009e72:	687b      	ldr	r3, [r7, #4]
 8009e74:	681b      	ldr	r3, [r3, #0]
 8009e76:	f46f 1200 	mvn.w	r2, #2097152	@ 0x200000
 8009e7a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->DirectionChangeCallback(htim);
#else
      HAL_TIMEx_DirectionChangeCallback(htim);
 8009e7c:	6878      	ldr	r0, [r7, #4]
 8009e7e:	f001 f8fb 	bl	800b078 <HAL_TIMEx_DirectionChangeCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Index error event */
  if ((itflag & (TIM_FLAG_IERR)) == (TIM_FLAG_IERR))
 8009e82:	68bb      	ldr	r3, [r7, #8]
 8009e84:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8009e88:	2b00      	cmp	r3, #0
 8009e8a:	d00c      	beq.n	8009ea6 <HAL_TIM_IRQHandler+0x272>
  {
    if ((itsource & (TIM_IT_IERR)) == (TIM_IT_IERR))
 8009e8c:	68fb      	ldr	r3, [r7, #12]
 8009e8e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8009e92:	2b00      	cmp	r3, #0
 8009e94:	d007      	beq.n	8009ea6 <HAL_TIM_IRQHandler+0x272>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IERR);
 8009e96:	687b      	ldr	r3, [r7, #4]
 8009e98:	681b      	ldr	r3, [r3, #0]
 8009e9a:	f46f 0280 	mvn.w	r2, #4194304	@ 0x400000
 8009e9e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->IndexErrorCallback(htim);
#else
      HAL_TIMEx_IndexErrorCallback(htim);
 8009ea0:	6878      	ldr	r0, [r7, #4]
 8009ea2:	f001 f8f3 	bl	800b08c <HAL_TIMEx_IndexErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Transition error event */
  if ((itflag & (TIM_FLAG_TERR)) == (TIM_FLAG_TERR))
 8009ea6:	68bb      	ldr	r3, [r7, #8]
 8009ea8:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8009eac:	2b00      	cmp	r3, #0
 8009eae:	d00c      	beq.n	8009eca <HAL_TIM_IRQHandler+0x296>
  {
    if ((itsource & (TIM_IT_TERR)) == (TIM_IT_TERR))
 8009eb0:	68fb      	ldr	r3, [r7, #12]
 8009eb2:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8009eb6:	2b00      	cmp	r3, #0
 8009eb8:	d007      	beq.n	8009eca <HAL_TIM_IRQHandler+0x296>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TERR);
 8009eba:	687b      	ldr	r3, [r7, #4]
 8009ebc:	681b      	ldr	r3, [r3, #0]
 8009ebe:	f46f 0200 	mvn.w	r2, #8388608	@ 0x800000
 8009ec2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TransitionErrorCallback(htim);
#else
      HAL_TIMEx_TransitionErrorCallback(htim);
 8009ec4:	6878      	ldr	r0, [r7, #4]
 8009ec6:	f001 f8eb 	bl	800b0a0 <HAL_TIMEx_TransitionErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8009eca:	bf00      	nop
 8009ecc:	3710      	adds	r7, #16
 8009ece:	46bd      	mov	sp, r7
 8009ed0:	bd80      	pop	{r7, pc}
	...

08009ed4 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8009ed4:	b580      	push	{r7, lr}
 8009ed6:	b086      	sub	sp, #24
 8009ed8:	af00      	add	r7, sp, #0
 8009eda:	60f8      	str	r0, [r7, #12]
 8009edc:	60b9      	str	r1, [r7, #8]
 8009ede:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8009ee0:	2300      	movs	r3, #0
 8009ee2:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8009ee4:	68fb      	ldr	r3, [r7, #12]
 8009ee6:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8009eea:	2b01      	cmp	r3, #1
 8009eec:	d101      	bne.n	8009ef2 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8009eee:	2302      	movs	r3, #2
 8009ef0:	e0ff      	b.n	800a0f2 <HAL_TIM_PWM_ConfigChannel+0x21e>
 8009ef2:	68fb      	ldr	r3, [r7, #12]
 8009ef4:	2201      	movs	r2, #1
 8009ef6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8009efa:	687b      	ldr	r3, [r7, #4]
 8009efc:	2b14      	cmp	r3, #20
 8009efe:	f200 80f0 	bhi.w	800a0e2 <HAL_TIM_PWM_ConfigChannel+0x20e>
 8009f02:	a201      	add	r2, pc, #4	@ (adr r2, 8009f08 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8009f04:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009f08:	08009f5d 	.word	0x08009f5d
 8009f0c:	0800a0e3 	.word	0x0800a0e3
 8009f10:	0800a0e3 	.word	0x0800a0e3
 8009f14:	0800a0e3 	.word	0x0800a0e3
 8009f18:	08009f9d 	.word	0x08009f9d
 8009f1c:	0800a0e3 	.word	0x0800a0e3
 8009f20:	0800a0e3 	.word	0x0800a0e3
 8009f24:	0800a0e3 	.word	0x0800a0e3
 8009f28:	08009fdf 	.word	0x08009fdf
 8009f2c:	0800a0e3 	.word	0x0800a0e3
 8009f30:	0800a0e3 	.word	0x0800a0e3
 8009f34:	0800a0e3 	.word	0x0800a0e3
 8009f38:	0800a01f 	.word	0x0800a01f
 8009f3c:	0800a0e3 	.word	0x0800a0e3
 8009f40:	0800a0e3 	.word	0x0800a0e3
 8009f44:	0800a0e3 	.word	0x0800a0e3
 8009f48:	0800a061 	.word	0x0800a061
 8009f4c:	0800a0e3 	.word	0x0800a0e3
 8009f50:	0800a0e3 	.word	0x0800a0e3
 8009f54:	0800a0e3 	.word	0x0800a0e3
 8009f58:	0800a0a1 	.word	0x0800a0a1
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8009f5c:	68fb      	ldr	r3, [r7, #12]
 8009f5e:	681b      	ldr	r3, [r3, #0]
 8009f60:	68b9      	ldr	r1, [r7, #8]
 8009f62:	4618      	mov	r0, r3
 8009f64:	f000 fa88 	bl	800a478 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8009f68:	68fb      	ldr	r3, [r7, #12]
 8009f6a:	681b      	ldr	r3, [r3, #0]
 8009f6c:	699a      	ldr	r2, [r3, #24]
 8009f6e:	68fb      	ldr	r3, [r7, #12]
 8009f70:	681b      	ldr	r3, [r3, #0]
 8009f72:	f042 0208 	orr.w	r2, r2, #8
 8009f76:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8009f78:	68fb      	ldr	r3, [r7, #12]
 8009f7a:	681b      	ldr	r3, [r3, #0]
 8009f7c:	699a      	ldr	r2, [r3, #24]
 8009f7e:	68fb      	ldr	r3, [r7, #12]
 8009f80:	681b      	ldr	r3, [r3, #0]
 8009f82:	f022 0204 	bic.w	r2, r2, #4
 8009f86:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8009f88:	68fb      	ldr	r3, [r7, #12]
 8009f8a:	681b      	ldr	r3, [r3, #0]
 8009f8c:	6999      	ldr	r1, [r3, #24]
 8009f8e:	68bb      	ldr	r3, [r7, #8]
 8009f90:	691a      	ldr	r2, [r3, #16]
 8009f92:	68fb      	ldr	r3, [r7, #12]
 8009f94:	681b      	ldr	r3, [r3, #0]
 8009f96:	430a      	orrs	r2, r1
 8009f98:	619a      	str	r2, [r3, #24]
      break;
 8009f9a:	e0a5      	b.n	800a0e8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8009f9c:	68fb      	ldr	r3, [r7, #12]
 8009f9e:	681b      	ldr	r3, [r3, #0]
 8009fa0:	68b9      	ldr	r1, [r7, #8]
 8009fa2:	4618      	mov	r0, r3
 8009fa4:	f000 faf8 	bl	800a598 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8009fa8:	68fb      	ldr	r3, [r7, #12]
 8009faa:	681b      	ldr	r3, [r3, #0]
 8009fac:	699a      	ldr	r2, [r3, #24]
 8009fae:	68fb      	ldr	r3, [r7, #12]
 8009fb0:	681b      	ldr	r3, [r3, #0]
 8009fb2:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8009fb6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8009fb8:	68fb      	ldr	r3, [r7, #12]
 8009fba:	681b      	ldr	r3, [r3, #0]
 8009fbc:	699a      	ldr	r2, [r3, #24]
 8009fbe:	68fb      	ldr	r3, [r7, #12]
 8009fc0:	681b      	ldr	r3, [r3, #0]
 8009fc2:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8009fc6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8009fc8:	68fb      	ldr	r3, [r7, #12]
 8009fca:	681b      	ldr	r3, [r3, #0]
 8009fcc:	6999      	ldr	r1, [r3, #24]
 8009fce:	68bb      	ldr	r3, [r7, #8]
 8009fd0:	691b      	ldr	r3, [r3, #16]
 8009fd2:	021a      	lsls	r2, r3, #8
 8009fd4:	68fb      	ldr	r3, [r7, #12]
 8009fd6:	681b      	ldr	r3, [r3, #0]
 8009fd8:	430a      	orrs	r2, r1
 8009fda:	619a      	str	r2, [r3, #24]
      break;
 8009fdc:	e084      	b.n	800a0e8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8009fde:	68fb      	ldr	r3, [r7, #12]
 8009fe0:	681b      	ldr	r3, [r3, #0]
 8009fe2:	68b9      	ldr	r1, [r7, #8]
 8009fe4:	4618      	mov	r0, r3
 8009fe6:	f000 fb61 	bl	800a6ac <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8009fea:	68fb      	ldr	r3, [r7, #12]
 8009fec:	681b      	ldr	r3, [r3, #0]
 8009fee:	69da      	ldr	r2, [r3, #28]
 8009ff0:	68fb      	ldr	r3, [r7, #12]
 8009ff2:	681b      	ldr	r3, [r3, #0]
 8009ff4:	f042 0208 	orr.w	r2, r2, #8
 8009ff8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8009ffa:	68fb      	ldr	r3, [r7, #12]
 8009ffc:	681b      	ldr	r3, [r3, #0]
 8009ffe:	69da      	ldr	r2, [r3, #28]
 800a000:	68fb      	ldr	r3, [r7, #12]
 800a002:	681b      	ldr	r3, [r3, #0]
 800a004:	f022 0204 	bic.w	r2, r2, #4
 800a008:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800a00a:	68fb      	ldr	r3, [r7, #12]
 800a00c:	681b      	ldr	r3, [r3, #0]
 800a00e:	69d9      	ldr	r1, [r3, #28]
 800a010:	68bb      	ldr	r3, [r7, #8]
 800a012:	691a      	ldr	r2, [r3, #16]
 800a014:	68fb      	ldr	r3, [r7, #12]
 800a016:	681b      	ldr	r3, [r3, #0]
 800a018:	430a      	orrs	r2, r1
 800a01a:	61da      	str	r2, [r3, #28]
      break;
 800a01c:	e064      	b.n	800a0e8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800a01e:	68fb      	ldr	r3, [r7, #12]
 800a020:	681b      	ldr	r3, [r3, #0]
 800a022:	68b9      	ldr	r1, [r7, #8]
 800a024:	4618      	mov	r0, r3
 800a026:	f000 fbc9 	bl	800a7bc <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800a02a:	68fb      	ldr	r3, [r7, #12]
 800a02c:	681b      	ldr	r3, [r3, #0]
 800a02e:	69da      	ldr	r2, [r3, #28]
 800a030:	68fb      	ldr	r3, [r7, #12]
 800a032:	681b      	ldr	r3, [r3, #0]
 800a034:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800a038:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800a03a:	68fb      	ldr	r3, [r7, #12]
 800a03c:	681b      	ldr	r3, [r3, #0]
 800a03e:	69da      	ldr	r2, [r3, #28]
 800a040:	68fb      	ldr	r3, [r7, #12]
 800a042:	681b      	ldr	r3, [r3, #0]
 800a044:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800a048:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800a04a:	68fb      	ldr	r3, [r7, #12]
 800a04c:	681b      	ldr	r3, [r3, #0]
 800a04e:	69d9      	ldr	r1, [r3, #28]
 800a050:	68bb      	ldr	r3, [r7, #8]
 800a052:	691b      	ldr	r3, [r3, #16]
 800a054:	021a      	lsls	r2, r3, #8
 800a056:	68fb      	ldr	r3, [r7, #12]
 800a058:	681b      	ldr	r3, [r3, #0]
 800a05a:	430a      	orrs	r2, r1
 800a05c:	61da      	str	r2, [r3, #28]
      break;
 800a05e:	e043      	b.n	800a0e8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800a060:	68fb      	ldr	r3, [r7, #12]
 800a062:	681b      	ldr	r3, [r3, #0]
 800a064:	68b9      	ldr	r1, [r7, #8]
 800a066:	4618      	mov	r0, r3
 800a068:	f000 fc32 	bl	800a8d0 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 800a06c:	68fb      	ldr	r3, [r7, #12]
 800a06e:	681b      	ldr	r3, [r3, #0]
 800a070:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800a072:	68fb      	ldr	r3, [r7, #12]
 800a074:	681b      	ldr	r3, [r3, #0]
 800a076:	f042 0208 	orr.w	r2, r2, #8
 800a07a:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 800a07c:	68fb      	ldr	r3, [r7, #12]
 800a07e:	681b      	ldr	r3, [r3, #0]
 800a080:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800a082:	68fb      	ldr	r3, [r7, #12]
 800a084:	681b      	ldr	r3, [r3, #0]
 800a086:	f022 0204 	bic.w	r2, r2, #4
 800a08a:	651a      	str	r2, [r3, #80]	@ 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 800a08c:	68fb      	ldr	r3, [r7, #12]
 800a08e:	681b      	ldr	r3, [r3, #0]
 800a090:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 800a092:	68bb      	ldr	r3, [r7, #8]
 800a094:	691a      	ldr	r2, [r3, #16]
 800a096:	68fb      	ldr	r3, [r7, #12]
 800a098:	681b      	ldr	r3, [r3, #0]
 800a09a:	430a      	orrs	r2, r1
 800a09c:	651a      	str	r2, [r3, #80]	@ 0x50
      break;
 800a09e:	e023      	b.n	800a0e8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800a0a0:	68fb      	ldr	r3, [r7, #12]
 800a0a2:	681b      	ldr	r3, [r3, #0]
 800a0a4:	68b9      	ldr	r1, [r7, #8]
 800a0a6:	4618      	mov	r0, r3
 800a0a8:	f000 fc76 	bl	800a998 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 800a0ac:	68fb      	ldr	r3, [r7, #12]
 800a0ae:	681b      	ldr	r3, [r3, #0]
 800a0b0:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800a0b2:	68fb      	ldr	r3, [r7, #12]
 800a0b4:	681b      	ldr	r3, [r3, #0]
 800a0b6:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800a0ba:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 800a0bc:	68fb      	ldr	r3, [r7, #12]
 800a0be:	681b      	ldr	r3, [r3, #0]
 800a0c0:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800a0c2:	68fb      	ldr	r3, [r7, #12]
 800a0c4:	681b      	ldr	r3, [r3, #0]
 800a0c6:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800a0ca:	651a      	str	r2, [r3, #80]	@ 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 800a0cc:	68fb      	ldr	r3, [r7, #12]
 800a0ce:	681b      	ldr	r3, [r3, #0]
 800a0d0:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 800a0d2:	68bb      	ldr	r3, [r7, #8]
 800a0d4:	691b      	ldr	r3, [r3, #16]
 800a0d6:	021a      	lsls	r2, r3, #8
 800a0d8:	68fb      	ldr	r3, [r7, #12]
 800a0da:	681b      	ldr	r3, [r3, #0]
 800a0dc:	430a      	orrs	r2, r1
 800a0de:	651a      	str	r2, [r3, #80]	@ 0x50
      break;
 800a0e0:	e002      	b.n	800a0e8 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 800a0e2:	2301      	movs	r3, #1
 800a0e4:	75fb      	strb	r3, [r7, #23]
      break;
 800a0e6:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800a0e8:	68fb      	ldr	r3, [r7, #12]
 800a0ea:	2200      	movs	r2, #0
 800a0ec:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800a0f0:	7dfb      	ldrb	r3, [r7, #23]
}
 800a0f2:	4618      	mov	r0, r3
 800a0f4:	3718      	adds	r7, #24
 800a0f6:	46bd      	mov	sp, r7
 800a0f8:	bd80      	pop	{r7, pc}
 800a0fa:	bf00      	nop

0800a0fc <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800a0fc:	b580      	push	{r7, lr}
 800a0fe:	b084      	sub	sp, #16
 800a100:	af00      	add	r7, sp, #0
 800a102:	6078      	str	r0, [r7, #4]
 800a104:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800a106:	2300      	movs	r3, #0
 800a108:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800a10a:	687b      	ldr	r3, [r7, #4]
 800a10c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800a110:	2b01      	cmp	r3, #1
 800a112:	d101      	bne.n	800a118 <HAL_TIM_ConfigClockSource+0x1c>
 800a114:	2302      	movs	r3, #2
 800a116:	e0de      	b.n	800a2d6 <HAL_TIM_ConfigClockSource+0x1da>
 800a118:	687b      	ldr	r3, [r7, #4]
 800a11a:	2201      	movs	r2, #1
 800a11c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800a120:	687b      	ldr	r3, [r7, #4]
 800a122:	2202      	movs	r2, #2
 800a124:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800a128:	687b      	ldr	r3, [r7, #4]
 800a12a:	681b      	ldr	r3, [r3, #0]
 800a12c:	689b      	ldr	r3, [r3, #8]
 800a12e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800a130:	68bb      	ldr	r3, [r7, #8]
 800a132:	f423 1344 	bic.w	r3, r3, #3211264	@ 0x310000
 800a136:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 800a13a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800a13c:	68bb      	ldr	r3, [r7, #8]
 800a13e:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800a142:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800a144:	687b      	ldr	r3, [r7, #4]
 800a146:	681b      	ldr	r3, [r3, #0]
 800a148:	68ba      	ldr	r2, [r7, #8]
 800a14a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800a14c:	683b      	ldr	r3, [r7, #0]
 800a14e:	681b      	ldr	r3, [r3, #0]
 800a150:	4a63      	ldr	r2, [pc, #396]	@ (800a2e0 <HAL_TIM_ConfigClockSource+0x1e4>)
 800a152:	4293      	cmp	r3, r2
 800a154:	f000 80a9 	beq.w	800a2aa <HAL_TIM_ConfigClockSource+0x1ae>
 800a158:	4a61      	ldr	r2, [pc, #388]	@ (800a2e0 <HAL_TIM_ConfigClockSource+0x1e4>)
 800a15a:	4293      	cmp	r3, r2
 800a15c:	f200 80ae 	bhi.w	800a2bc <HAL_TIM_ConfigClockSource+0x1c0>
 800a160:	4a60      	ldr	r2, [pc, #384]	@ (800a2e4 <HAL_TIM_ConfigClockSource+0x1e8>)
 800a162:	4293      	cmp	r3, r2
 800a164:	f000 80a1 	beq.w	800a2aa <HAL_TIM_ConfigClockSource+0x1ae>
 800a168:	4a5e      	ldr	r2, [pc, #376]	@ (800a2e4 <HAL_TIM_ConfigClockSource+0x1e8>)
 800a16a:	4293      	cmp	r3, r2
 800a16c:	f200 80a6 	bhi.w	800a2bc <HAL_TIM_ConfigClockSource+0x1c0>
 800a170:	4a5d      	ldr	r2, [pc, #372]	@ (800a2e8 <HAL_TIM_ConfigClockSource+0x1ec>)
 800a172:	4293      	cmp	r3, r2
 800a174:	f000 8099 	beq.w	800a2aa <HAL_TIM_ConfigClockSource+0x1ae>
 800a178:	4a5b      	ldr	r2, [pc, #364]	@ (800a2e8 <HAL_TIM_ConfigClockSource+0x1ec>)
 800a17a:	4293      	cmp	r3, r2
 800a17c:	f200 809e 	bhi.w	800a2bc <HAL_TIM_ConfigClockSource+0x1c0>
 800a180:	4a5a      	ldr	r2, [pc, #360]	@ (800a2ec <HAL_TIM_ConfigClockSource+0x1f0>)
 800a182:	4293      	cmp	r3, r2
 800a184:	f000 8091 	beq.w	800a2aa <HAL_TIM_ConfigClockSource+0x1ae>
 800a188:	4a58      	ldr	r2, [pc, #352]	@ (800a2ec <HAL_TIM_ConfigClockSource+0x1f0>)
 800a18a:	4293      	cmp	r3, r2
 800a18c:	f200 8096 	bhi.w	800a2bc <HAL_TIM_ConfigClockSource+0x1c0>
 800a190:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 800a194:	f000 8089 	beq.w	800a2aa <HAL_TIM_ConfigClockSource+0x1ae>
 800a198:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 800a19c:	f200 808e 	bhi.w	800a2bc <HAL_TIM_ConfigClockSource+0x1c0>
 800a1a0:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800a1a4:	d03e      	beq.n	800a224 <HAL_TIM_ConfigClockSource+0x128>
 800a1a6:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800a1aa:	f200 8087 	bhi.w	800a2bc <HAL_TIM_ConfigClockSource+0x1c0>
 800a1ae:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800a1b2:	f000 8086 	beq.w	800a2c2 <HAL_TIM_ConfigClockSource+0x1c6>
 800a1b6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800a1ba:	d87f      	bhi.n	800a2bc <HAL_TIM_ConfigClockSource+0x1c0>
 800a1bc:	2b70      	cmp	r3, #112	@ 0x70
 800a1be:	d01a      	beq.n	800a1f6 <HAL_TIM_ConfigClockSource+0xfa>
 800a1c0:	2b70      	cmp	r3, #112	@ 0x70
 800a1c2:	d87b      	bhi.n	800a2bc <HAL_TIM_ConfigClockSource+0x1c0>
 800a1c4:	2b60      	cmp	r3, #96	@ 0x60
 800a1c6:	d050      	beq.n	800a26a <HAL_TIM_ConfigClockSource+0x16e>
 800a1c8:	2b60      	cmp	r3, #96	@ 0x60
 800a1ca:	d877      	bhi.n	800a2bc <HAL_TIM_ConfigClockSource+0x1c0>
 800a1cc:	2b50      	cmp	r3, #80	@ 0x50
 800a1ce:	d03c      	beq.n	800a24a <HAL_TIM_ConfigClockSource+0x14e>
 800a1d0:	2b50      	cmp	r3, #80	@ 0x50
 800a1d2:	d873      	bhi.n	800a2bc <HAL_TIM_ConfigClockSource+0x1c0>
 800a1d4:	2b40      	cmp	r3, #64	@ 0x40
 800a1d6:	d058      	beq.n	800a28a <HAL_TIM_ConfigClockSource+0x18e>
 800a1d8:	2b40      	cmp	r3, #64	@ 0x40
 800a1da:	d86f      	bhi.n	800a2bc <HAL_TIM_ConfigClockSource+0x1c0>
 800a1dc:	2b30      	cmp	r3, #48	@ 0x30
 800a1de:	d064      	beq.n	800a2aa <HAL_TIM_ConfigClockSource+0x1ae>
 800a1e0:	2b30      	cmp	r3, #48	@ 0x30
 800a1e2:	d86b      	bhi.n	800a2bc <HAL_TIM_ConfigClockSource+0x1c0>
 800a1e4:	2b20      	cmp	r3, #32
 800a1e6:	d060      	beq.n	800a2aa <HAL_TIM_ConfigClockSource+0x1ae>
 800a1e8:	2b20      	cmp	r3, #32
 800a1ea:	d867      	bhi.n	800a2bc <HAL_TIM_ConfigClockSource+0x1c0>
 800a1ec:	2b00      	cmp	r3, #0
 800a1ee:	d05c      	beq.n	800a2aa <HAL_TIM_ConfigClockSource+0x1ae>
 800a1f0:	2b10      	cmp	r3, #16
 800a1f2:	d05a      	beq.n	800a2aa <HAL_TIM_ConfigClockSource+0x1ae>
 800a1f4:	e062      	b.n	800a2bc <HAL_TIM_ConfigClockSource+0x1c0>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800a1f6:	687b      	ldr	r3, [r7, #4]
 800a1f8:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800a1fa:	683b      	ldr	r3, [r7, #0]
 800a1fc:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800a1fe:	683b      	ldr	r3, [r7, #0]
 800a200:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800a202:	683b      	ldr	r3, [r7, #0]
 800a204:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800a206:	f000 fca9 	bl	800ab5c <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800a20a:	687b      	ldr	r3, [r7, #4]
 800a20c:	681b      	ldr	r3, [r3, #0]
 800a20e:	689b      	ldr	r3, [r3, #8]
 800a210:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800a212:	68bb      	ldr	r3, [r7, #8]
 800a214:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 800a218:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800a21a:	687b      	ldr	r3, [r7, #4]
 800a21c:	681b      	ldr	r3, [r3, #0]
 800a21e:	68ba      	ldr	r2, [r7, #8]
 800a220:	609a      	str	r2, [r3, #8]
      break;
 800a222:	e04f      	b.n	800a2c4 <HAL_TIM_ConfigClockSource+0x1c8>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800a224:	687b      	ldr	r3, [r7, #4]
 800a226:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800a228:	683b      	ldr	r3, [r7, #0]
 800a22a:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800a22c:	683b      	ldr	r3, [r7, #0]
 800a22e:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800a230:	683b      	ldr	r3, [r7, #0]
 800a232:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800a234:	f000 fc92 	bl	800ab5c <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800a238:	687b      	ldr	r3, [r7, #4]
 800a23a:	681b      	ldr	r3, [r3, #0]
 800a23c:	689a      	ldr	r2, [r3, #8]
 800a23e:	687b      	ldr	r3, [r7, #4]
 800a240:	681b      	ldr	r3, [r3, #0]
 800a242:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800a246:	609a      	str	r2, [r3, #8]
      break;
 800a248:	e03c      	b.n	800a2c4 <HAL_TIM_ConfigClockSource+0x1c8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800a24a:	687b      	ldr	r3, [r7, #4]
 800a24c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800a24e:	683b      	ldr	r3, [r7, #0]
 800a250:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800a252:	683b      	ldr	r3, [r7, #0]
 800a254:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800a256:	461a      	mov	r2, r3
 800a258:	f000 fc04 	bl	800aa64 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800a25c:	687b      	ldr	r3, [r7, #4]
 800a25e:	681b      	ldr	r3, [r3, #0]
 800a260:	2150      	movs	r1, #80	@ 0x50
 800a262:	4618      	mov	r0, r3
 800a264:	f000 fc5d 	bl	800ab22 <TIM_ITRx_SetConfig>
      break;
 800a268:	e02c      	b.n	800a2c4 <HAL_TIM_ConfigClockSource+0x1c8>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800a26a:	687b      	ldr	r3, [r7, #4]
 800a26c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800a26e:	683b      	ldr	r3, [r7, #0]
 800a270:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800a272:	683b      	ldr	r3, [r7, #0]
 800a274:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800a276:	461a      	mov	r2, r3
 800a278:	f000 fc23 	bl	800aac2 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800a27c:	687b      	ldr	r3, [r7, #4]
 800a27e:	681b      	ldr	r3, [r3, #0]
 800a280:	2160      	movs	r1, #96	@ 0x60
 800a282:	4618      	mov	r0, r3
 800a284:	f000 fc4d 	bl	800ab22 <TIM_ITRx_SetConfig>
      break;
 800a288:	e01c      	b.n	800a2c4 <HAL_TIM_ConfigClockSource+0x1c8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800a28a:	687b      	ldr	r3, [r7, #4]
 800a28c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800a28e:	683b      	ldr	r3, [r7, #0]
 800a290:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800a292:	683b      	ldr	r3, [r7, #0]
 800a294:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800a296:	461a      	mov	r2, r3
 800a298:	f000 fbe4 	bl	800aa64 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800a29c:	687b      	ldr	r3, [r7, #4]
 800a29e:	681b      	ldr	r3, [r3, #0]
 800a2a0:	2140      	movs	r1, #64	@ 0x40
 800a2a2:	4618      	mov	r0, r3
 800a2a4:	f000 fc3d 	bl	800ab22 <TIM_ITRx_SetConfig>
      break;
 800a2a8:	e00c      	b.n	800a2c4 <HAL_TIM_ConfigClockSource+0x1c8>
    case TIM_CLOCKSOURCE_ITR11:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_INSTANCE((htim->Instance), sClockSourceConfig->ClockSource));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800a2aa:	687b      	ldr	r3, [r7, #4]
 800a2ac:	681a      	ldr	r2, [r3, #0]
 800a2ae:	683b      	ldr	r3, [r7, #0]
 800a2b0:	681b      	ldr	r3, [r3, #0]
 800a2b2:	4619      	mov	r1, r3
 800a2b4:	4610      	mov	r0, r2
 800a2b6:	f000 fc34 	bl	800ab22 <TIM_ITRx_SetConfig>
      break;
 800a2ba:	e003      	b.n	800a2c4 <HAL_TIM_ConfigClockSource+0x1c8>
    }

    default:
      status = HAL_ERROR;
 800a2bc:	2301      	movs	r3, #1
 800a2be:	73fb      	strb	r3, [r7, #15]
      break;
 800a2c0:	e000      	b.n	800a2c4 <HAL_TIM_ConfigClockSource+0x1c8>
      break;
 800a2c2:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800a2c4:	687b      	ldr	r3, [r7, #4]
 800a2c6:	2201      	movs	r2, #1
 800a2c8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800a2cc:	687b      	ldr	r3, [r7, #4]
 800a2ce:	2200      	movs	r2, #0
 800a2d0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800a2d4:	7bfb      	ldrb	r3, [r7, #15]
}
 800a2d6:	4618      	mov	r0, r3
 800a2d8:	3710      	adds	r7, #16
 800a2da:	46bd      	mov	sp, r7
 800a2dc:	bd80      	pop	{r7, pc}
 800a2de:	bf00      	nop
 800a2e0:	00100070 	.word	0x00100070
 800a2e4:	00100040 	.word	0x00100040
 800a2e8:	00100030 	.word	0x00100030
 800a2ec:	00100020 	.word	0x00100020

0800a2f0 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800a2f0:	b480      	push	{r7}
 800a2f2:	b083      	sub	sp, #12
 800a2f4:	af00      	add	r7, sp, #0
 800a2f6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800a2f8:	bf00      	nop
 800a2fa:	370c      	adds	r7, #12
 800a2fc:	46bd      	mov	sp, r7
 800a2fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a302:	4770      	bx	lr

0800a304 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800a304:	b480      	push	{r7}
 800a306:	b083      	sub	sp, #12
 800a308:	af00      	add	r7, sp, #0
 800a30a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800a30c:	bf00      	nop
 800a30e:	370c      	adds	r7, #12
 800a310:	46bd      	mov	sp, r7
 800a312:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a316:	4770      	bx	lr

0800a318 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800a318:	b480      	push	{r7}
 800a31a:	b083      	sub	sp, #12
 800a31c:	af00      	add	r7, sp, #0
 800a31e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800a320:	bf00      	nop
 800a322:	370c      	adds	r7, #12
 800a324:	46bd      	mov	sp, r7
 800a326:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a32a:	4770      	bx	lr

0800a32c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800a32c:	b480      	push	{r7}
 800a32e:	b083      	sub	sp, #12
 800a330:	af00      	add	r7, sp, #0
 800a332:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800a334:	bf00      	nop
 800a336:	370c      	adds	r7, #12
 800a338:	46bd      	mov	sp, r7
 800a33a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a33e:	4770      	bx	lr

0800a340 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800a340:	b480      	push	{r7}
 800a342:	b085      	sub	sp, #20
 800a344:	af00      	add	r7, sp, #0
 800a346:	6078      	str	r0, [r7, #4]
 800a348:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800a34a:	687b      	ldr	r3, [r7, #4]
 800a34c:	681b      	ldr	r3, [r3, #0]
 800a34e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800a350:	687b      	ldr	r3, [r7, #4]
 800a352:	4a42      	ldr	r2, [pc, #264]	@ (800a45c <TIM_Base_SetConfig+0x11c>)
 800a354:	4293      	cmp	r3, r2
 800a356:	d00f      	beq.n	800a378 <TIM_Base_SetConfig+0x38>
 800a358:	687b      	ldr	r3, [r7, #4]
 800a35a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800a35e:	d00b      	beq.n	800a378 <TIM_Base_SetConfig+0x38>
 800a360:	687b      	ldr	r3, [r7, #4]
 800a362:	4a3f      	ldr	r2, [pc, #252]	@ (800a460 <TIM_Base_SetConfig+0x120>)
 800a364:	4293      	cmp	r3, r2
 800a366:	d007      	beq.n	800a378 <TIM_Base_SetConfig+0x38>
 800a368:	687b      	ldr	r3, [r7, #4]
 800a36a:	4a3e      	ldr	r2, [pc, #248]	@ (800a464 <TIM_Base_SetConfig+0x124>)
 800a36c:	4293      	cmp	r3, r2
 800a36e:	d003      	beq.n	800a378 <TIM_Base_SetConfig+0x38>
 800a370:	687b      	ldr	r3, [r7, #4]
 800a372:	4a3d      	ldr	r2, [pc, #244]	@ (800a468 <TIM_Base_SetConfig+0x128>)
 800a374:	4293      	cmp	r3, r2
 800a376:	d108      	bne.n	800a38a <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800a378:	68fb      	ldr	r3, [r7, #12]
 800a37a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800a37e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800a380:	683b      	ldr	r3, [r7, #0]
 800a382:	685b      	ldr	r3, [r3, #4]
 800a384:	68fa      	ldr	r2, [r7, #12]
 800a386:	4313      	orrs	r3, r2
 800a388:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800a38a:	687b      	ldr	r3, [r7, #4]
 800a38c:	4a33      	ldr	r2, [pc, #204]	@ (800a45c <TIM_Base_SetConfig+0x11c>)
 800a38e:	4293      	cmp	r3, r2
 800a390:	d01b      	beq.n	800a3ca <TIM_Base_SetConfig+0x8a>
 800a392:	687b      	ldr	r3, [r7, #4]
 800a394:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800a398:	d017      	beq.n	800a3ca <TIM_Base_SetConfig+0x8a>
 800a39a:	687b      	ldr	r3, [r7, #4]
 800a39c:	4a30      	ldr	r2, [pc, #192]	@ (800a460 <TIM_Base_SetConfig+0x120>)
 800a39e:	4293      	cmp	r3, r2
 800a3a0:	d013      	beq.n	800a3ca <TIM_Base_SetConfig+0x8a>
 800a3a2:	687b      	ldr	r3, [r7, #4]
 800a3a4:	4a2f      	ldr	r2, [pc, #188]	@ (800a464 <TIM_Base_SetConfig+0x124>)
 800a3a6:	4293      	cmp	r3, r2
 800a3a8:	d00f      	beq.n	800a3ca <TIM_Base_SetConfig+0x8a>
 800a3aa:	687b      	ldr	r3, [r7, #4]
 800a3ac:	4a2e      	ldr	r2, [pc, #184]	@ (800a468 <TIM_Base_SetConfig+0x128>)
 800a3ae:	4293      	cmp	r3, r2
 800a3b0:	d00b      	beq.n	800a3ca <TIM_Base_SetConfig+0x8a>
 800a3b2:	687b      	ldr	r3, [r7, #4]
 800a3b4:	4a2d      	ldr	r2, [pc, #180]	@ (800a46c <TIM_Base_SetConfig+0x12c>)
 800a3b6:	4293      	cmp	r3, r2
 800a3b8:	d007      	beq.n	800a3ca <TIM_Base_SetConfig+0x8a>
 800a3ba:	687b      	ldr	r3, [r7, #4]
 800a3bc:	4a2c      	ldr	r2, [pc, #176]	@ (800a470 <TIM_Base_SetConfig+0x130>)
 800a3be:	4293      	cmp	r3, r2
 800a3c0:	d003      	beq.n	800a3ca <TIM_Base_SetConfig+0x8a>
 800a3c2:	687b      	ldr	r3, [r7, #4]
 800a3c4:	4a2b      	ldr	r2, [pc, #172]	@ (800a474 <TIM_Base_SetConfig+0x134>)
 800a3c6:	4293      	cmp	r3, r2
 800a3c8:	d108      	bne.n	800a3dc <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800a3ca:	68fb      	ldr	r3, [r7, #12]
 800a3cc:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800a3d0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800a3d2:	683b      	ldr	r3, [r7, #0]
 800a3d4:	68db      	ldr	r3, [r3, #12]
 800a3d6:	68fa      	ldr	r2, [r7, #12]
 800a3d8:	4313      	orrs	r3, r2
 800a3da:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800a3dc:	68fb      	ldr	r3, [r7, #12]
 800a3de:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800a3e2:	683b      	ldr	r3, [r7, #0]
 800a3e4:	695b      	ldr	r3, [r3, #20]
 800a3e6:	4313      	orrs	r3, r2
 800a3e8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800a3ea:	687b      	ldr	r3, [r7, #4]
 800a3ec:	68fa      	ldr	r2, [r7, #12]
 800a3ee:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800a3f0:	683b      	ldr	r3, [r7, #0]
 800a3f2:	689a      	ldr	r2, [r3, #8]
 800a3f4:	687b      	ldr	r3, [r7, #4]
 800a3f6:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800a3f8:	683b      	ldr	r3, [r7, #0]
 800a3fa:	681a      	ldr	r2, [r3, #0]
 800a3fc:	687b      	ldr	r3, [r7, #4]
 800a3fe:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800a400:	687b      	ldr	r3, [r7, #4]
 800a402:	4a16      	ldr	r2, [pc, #88]	@ (800a45c <TIM_Base_SetConfig+0x11c>)
 800a404:	4293      	cmp	r3, r2
 800a406:	d00f      	beq.n	800a428 <TIM_Base_SetConfig+0xe8>
 800a408:	687b      	ldr	r3, [r7, #4]
 800a40a:	4a17      	ldr	r2, [pc, #92]	@ (800a468 <TIM_Base_SetConfig+0x128>)
 800a40c:	4293      	cmp	r3, r2
 800a40e:	d00b      	beq.n	800a428 <TIM_Base_SetConfig+0xe8>
 800a410:	687b      	ldr	r3, [r7, #4]
 800a412:	4a16      	ldr	r2, [pc, #88]	@ (800a46c <TIM_Base_SetConfig+0x12c>)
 800a414:	4293      	cmp	r3, r2
 800a416:	d007      	beq.n	800a428 <TIM_Base_SetConfig+0xe8>
 800a418:	687b      	ldr	r3, [r7, #4]
 800a41a:	4a15      	ldr	r2, [pc, #84]	@ (800a470 <TIM_Base_SetConfig+0x130>)
 800a41c:	4293      	cmp	r3, r2
 800a41e:	d003      	beq.n	800a428 <TIM_Base_SetConfig+0xe8>
 800a420:	687b      	ldr	r3, [r7, #4]
 800a422:	4a14      	ldr	r2, [pc, #80]	@ (800a474 <TIM_Base_SetConfig+0x134>)
 800a424:	4293      	cmp	r3, r2
 800a426:	d103      	bne.n	800a430 <TIM_Base_SetConfig+0xf0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800a428:	683b      	ldr	r3, [r7, #0]
 800a42a:	691a      	ldr	r2, [r3, #16]
 800a42c:	687b      	ldr	r3, [r7, #4]
 800a42e:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800a430:	687b      	ldr	r3, [r7, #4]
 800a432:	2201      	movs	r2, #1
 800a434:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800a436:	687b      	ldr	r3, [r7, #4]
 800a438:	691b      	ldr	r3, [r3, #16]
 800a43a:	f003 0301 	and.w	r3, r3, #1
 800a43e:	2b01      	cmp	r3, #1
 800a440:	d105      	bne.n	800a44e <TIM_Base_SetConfig+0x10e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800a442:	687b      	ldr	r3, [r7, #4]
 800a444:	691b      	ldr	r3, [r3, #16]
 800a446:	f023 0201 	bic.w	r2, r3, #1
 800a44a:	687b      	ldr	r3, [r7, #4]
 800a44c:	611a      	str	r2, [r3, #16]
  }
}
 800a44e:	bf00      	nop
 800a450:	3714      	adds	r7, #20
 800a452:	46bd      	mov	sp, r7
 800a454:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a458:	4770      	bx	lr
 800a45a:	bf00      	nop
 800a45c:	40012c00 	.word	0x40012c00
 800a460:	40000400 	.word	0x40000400
 800a464:	40000800 	.word	0x40000800
 800a468:	40013400 	.word	0x40013400
 800a46c:	40014000 	.word	0x40014000
 800a470:	40014400 	.word	0x40014400
 800a474:	40014800 	.word	0x40014800

0800a478 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800a478:	b480      	push	{r7}
 800a47a:	b087      	sub	sp, #28
 800a47c:	af00      	add	r7, sp, #0
 800a47e:	6078      	str	r0, [r7, #4]
 800a480:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800a482:	687b      	ldr	r3, [r7, #4]
 800a484:	6a1b      	ldr	r3, [r3, #32]
 800a486:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800a488:	687b      	ldr	r3, [r7, #4]
 800a48a:	6a1b      	ldr	r3, [r3, #32]
 800a48c:	f023 0201 	bic.w	r2, r3, #1
 800a490:	687b      	ldr	r3, [r7, #4]
 800a492:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800a494:	687b      	ldr	r3, [r7, #4]
 800a496:	685b      	ldr	r3, [r3, #4]
 800a498:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800a49a:	687b      	ldr	r3, [r7, #4]
 800a49c:	699b      	ldr	r3, [r3, #24]
 800a49e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800a4a0:	68fb      	ldr	r3, [r7, #12]
 800a4a2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800a4a6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800a4aa:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800a4ac:	68fb      	ldr	r3, [r7, #12]
 800a4ae:	f023 0303 	bic.w	r3, r3, #3
 800a4b2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800a4b4:	683b      	ldr	r3, [r7, #0]
 800a4b6:	681b      	ldr	r3, [r3, #0]
 800a4b8:	68fa      	ldr	r2, [r7, #12]
 800a4ba:	4313      	orrs	r3, r2
 800a4bc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800a4be:	697b      	ldr	r3, [r7, #20]
 800a4c0:	f023 0302 	bic.w	r3, r3, #2
 800a4c4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800a4c6:	683b      	ldr	r3, [r7, #0]
 800a4c8:	689b      	ldr	r3, [r3, #8]
 800a4ca:	697a      	ldr	r2, [r7, #20]
 800a4cc:	4313      	orrs	r3, r2
 800a4ce:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800a4d0:	687b      	ldr	r3, [r7, #4]
 800a4d2:	4a2c      	ldr	r2, [pc, #176]	@ (800a584 <TIM_OC1_SetConfig+0x10c>)
 800a4d4:	4293      	cmp	r3, r2
 800a4d6:	d00f      	beq.n	800a4f8 <TIM_OC1_SetConfig+0x80>
 800a4d8:	687b      	ldr	r3, [r7, #4]
 800a4da:	4a2b      	ldr	r2, [pc, #172]	@ (800a588 <TIM_OC1_SetConfig+0x110>)
 800a4dc:	4293      	cmp	r3, r2
 800a4de:	d00b      	beq.n	800a4f8 <TIM_OC1_SetConfig+0x80>
 800a4e0:	687b      	ldr	r3, [r7, #4]
 800a4e2:	4a2a      	ldr	r2, [pc, #168]	@ (800a58c <TIM_OC1_SetConfig+0x114>)
 800a4e4:	4293      	cmp	r3, r2
 800a4e6:	d007      	beq.n	800a4f8 <TIM_OC1_SetConfig+0x80>
 800a4e8:	687b      	ldr	r3, [r7, #4]
 800a4ea:	4a29      	ldr	r2, [pc, #164]	@ (800a590 <TIM_OC1_SetConfig+0x118>)
 800a4ec:	4293      	cmp	r3, r2
 800a4ee:	d003      	beq.n	800a4f8 <TIM_OC1_SetConfig+0x80>
 800a4f0:	687b      	ldr	r3, [r7, #4]
 800a4f2:	4a28      	ldr	r2, [pc, #160]	@ (800a594 <TIM_OC1_SetConfig+0x11c>)
 800a4f4:	4293      	cmp	r3, r2
 800a4f6:	d10c      	bne.n	800a512 <TIM_OC1_SetConfig+0x9a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800a4f8:	697b      	ldr	r3, [r7, #20]
 800a4fa:	f023 0308 	bic.w	r3, r3, #8
 800a4fe:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800a500:	683b      	ldr	r3, [r7, #0]
 800a502:	68db      	ldr	r3, [r3, #12]
 800a504:	697a      	ldr	r2, [r7, #20]
 800a506:	4313      	orrs	r3, r2
 800a508:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800a50a:	697b      	ldr	r3, [r7, #20]
 800a50c:	f023 0304 	bic.w	r3, r3, #4
 800a510:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a512:	687b      	ldr	r3, [r7, #4]
 800a514:	4a1b      	ldr	r2, [pc, #108]	@ (800a584 <TIM_OC1_SetConfig+0x10c>)
 800a516:	4293      	cmp	r3, r2
 800a518:	d00f      	beq.n	800a53a <TIM_OC1_SetConfig+0xc2>
 800a51a:	687b      	ldr	r3, [r7, #4]
 800a51c:	4a1a      	ldr	r2, [pc, #104]	@ (800a588 <TIM_OC1_SetConfig+0x110>)
 800a51e:	4293      	cmp	r3, r2
 800a520:	d00b      	beq.n	800a53a <TIM_OC1_SetConfig+0xc2>
 800a522:	687b      	ldr	r3, [r7, #4]
 800a524:	4a19      	ldr	r2, [pc, #100]	@ (800a58c <TIM_OC1_SetConfig+0x114>)
 800a526:	4293      	cmp	r3, r2
 800a528:	d007      	beq.n	800a53a <TIM_OC1_SetConfig+0xc2>
 800a52a:	687b      	ldr	r3, [r7, #4]
 800a52c:	4a18      	ldr	r2, [pc, #96]	@ (800a590 <TIM_OC1_SetConfig+0x118>)
 800a52e:	4293      	cmp	r3, r2
 800a530:	d003      	beq.n	800a53a <TIM_OC1_SetConfig+0xc2>
 800a532:	687b      	ldr	r3, [r7, #4]
 800a534:	4a17      	ldr	r2, [pc, #92]	@ (800a594 <TIM_OC1_SetConfig+0x11c>)
 800a536:	4293      	cmp	r3, r2
 800a538:	d111      	bne.n	800a55e <TIM_OC1_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800a53a:	693b      	ldr	r3, [r7, #16]
 800a53c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800a540:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800a542:	693b      	ldr	r3, [r7, #16]
 800a544:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800a548:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800a54a:	683b      	ldr	r3, [r7, #0]
 800a54c:	695b      	ldr	r3, [r3, #20]
 800a54e:	693a      	ldr	r2, [r7, #16]
 800a550:	4313      	orrs	r3, r2
 800a552:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800a554:	683b      	ldr	r3, [r7, #0]
 800a556:	699b      	ldr	r3, [r3, #24]
 800a558:	693a      	ldr	r2, [r7, #16]
 800a55a:	4313      	orrs	r3, r2
 800a55c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800a55e:	687b      	ldr	r3, [r7, #4]
 800a560:	693a      	ldr	r2, [r7, #16]
 800a562:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800a564:	687b      	ldr	r3, [r7, #4]
 800a566:	68fa      	ldr	r2, [r7, #12]
 800a568:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800a56a:	683b      	ldr	r3, [r7, #0]
 800a56c:	685a      	ldr	r2, [r3, #4]
 800a56e:	687b      	ldr	r3, [r7, #4]
 800a570:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800a572:	687b      	ldr	r3, [r7, #4]
 800a574:	697a      	ldr	r2, [r7, #20]
 800a576:	621a      	str	r2, [r3, #32]
}
 800a578:	bf00      	nop
 800a57a:	371c      	adds	r7, #28
 800a57c:	46bd      	mov	sp, r7
 800a57e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a582:	4770      	bx	lr
 800a584:	40012c00 	.word	0x40012c00
 800a588:	40013400 	.word	0x40013400
 800a58c:	40014000 	.word	0x40014000
 800a590:	40014400 	.word	0x40014400
 800a594:	40014800 	.word	0x40014800

0800a598 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800a598:	b480      	push	{r7}
 800a59a:	b087      	sub	sp, #28
 800a59c:	af00      	add	r7, sp, #0
 800a59e:	6078      	str	r0, [r7, #4]
 800a5a0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800a5a2:	687b      	ldr	r3, [r7, #4]
 800a5a4:	6a1b      	ldr	r3, [r3, #32]
 800a5a6:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800a5a8:	687b      	ldr	r3, [r7, #4]
 800a5aa:	6a1b      	ldr	r3, [r3, #32]
 800a5ac:	f023 0210 	bic.w	r2, r3, #16
 800a5b0:	687b      	ldr	r3, [r7, #4]
 800a5b2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800a5b4:	687b      	ldr	r3, [r7, #4]
 800a5b6:	685b      	ldr	r3, [r3, #4]
 800a5b8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800a5ba:	687b      	ldr	r3, [r7, #4]
 800a5bc:	699b      	ldr	r3, [r3, #24]
 800a5be:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800a5c0:	68fb      	ldr	r3, [r7, #12]
 800a5c2:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800a5c6:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800a5ca:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800a5cc:	68fb      	ldr	r3, [r7, #12]
 800a5ce:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800a5d2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800a5d4:	683b      	ldr	r3, [r7, #0]
 800a5d6:	681b      	ldr	r3, [r3, #0]
 800a5d8:	021b      	lsls	r3, r3, #8
 800a5da:	68fa      	ldr	r2, [r7, #12]
 800a5dc:	4313      	orrs	r3, r2
 800a5de:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800a5e0:	697b      	ldr	r3, [r7, #20]
 800a5e2:	f023 0320 	bic.w	r3, r3, #32
 800a5e6:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800a5e8:	683b      	ldr	r3, [r7, #0]
 800a5ea:	689b      	ldr	r3, [r3, #8]
 800a5ec:	011b      	lsls	r3, r3, #4
 800a5ee:	697a      	ldr	r2, [r7, #20]
 800a5f0:	4313      	orrs	r3, r2
 800a5f2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800a5f4:	687b      	ldr	r3, [r7, #4]
 800a5f6:	4a28      	ldr	r2, [pc, #160]	@ (800a698 <TIM_OC2_SetConfig+0x100>)
 800a5f8:	4293      	cmp	r3, r2
 800a5fa:	d003      	beq.n	800a604 <TIM_OC2_SetConfig+0x6c>
 800a5fc:	687b      	ldr	r3, [r7, #4]
 800a5fe:	4a27      	ldr	r2, [pc, #156]	@ (800a69c <TIM_OC2_SetConfig+0x104>)
 800a600:	4293      	cmp	r3, r2
 800a602:	d10d      	bne.n	800a620 <TIM_OC2_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800a604:	697b      	ldr	r3, [r7, #20]
 800a606:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800a60a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800a60c:	683b      	ldr	r3, [r7, #0]
 800a60e:	68db      	ldr	r3, [r3, #12]
 800a610:	011b      	lsls	r3, r3, #4
 800a612:	697a      	ldr	r2, [r7, #20]
 800a614:	4313      	orrs	r3, r2
 800a616:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800a618:	697b      	ldr	r3, [r7, #20]
 800a61a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800a61e:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a620:	687b      	ldr	r3, [r7, #4]
 800a622:	4a1d      	ldr	r2, [pc, #116]	@ (800a698 <TIM_OC2_SetConfig+0x100>)
 800a624:	4293      	cmp	r3, r2
 800a626:	d00f      	beq.n	800a648 <TIM_OC2_SetConfig+0xb0>
 800a628:	687b      	ldr	r3, [r7, #4]
 800a62a:	4a1c      	ldr	r2, [pc, #112]	@ (800a69c <TIM_OC2_SetConfig+0x104>)
 800a62c:	4293      	cmp	r3, r2
 800a62e:	d00b      	beq.n	800a648 <TIM_OC2_SetConfig+0xb0>
 800a630:	687b      	ldr	r3, [r7, #4]
 800a632:	4a1b      	ldr	r2, [pc, #108]	@ (800a6a0 <TIM_OC2_SetConfig+0x108>)
 800a634:	4293      	cmp	r3, r2
 800a636:	d007      	beq.n	800a648 <TIM_OC2_SetConfig+0xb0>
 800a638:	687b      	ldr	r3, [r7, #4]
 800a63a:	4a1a      	ldr	r2, [pc, #104]	@ (800a6a4 <TIM_OC2_SetConfig+0x10c>)
 800a63c:	4293      	cmp	r3, r2
 800a63e:	d003      	beq.n	800a648 <TIM_OC2_SetConfig+0xb0>
 800a640:	687b      	ldr	r3, [r7, #4]
 800a642:	4a19      	ldr	r2, [pc, #100]	@ (800a6a8 <TIM_OC2_SetConfig+0x110>)
 800a644:	4293      	cmp	r3, r2
 800a646:	d113      	bne.n	800a670 <TIM_OC2_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800a648:	693b      	ldr	r3, [r7, #16]
 800a64a:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800a64e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800a650:	693b      	ldr	r3, [r7, #16]
 800a652:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800a656:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800a658:	683b      	ldr	r3, [r7, #0]
 800a65a:	695b      	ldr	r3, [r3, #20]
 800a65c:	009b      	lsls	r3, r3, #2
 800a65e:	693a      	ldr	r2, [r7, #16]
 800a660:	4313      	orrs	r3, r2
 800a662:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800a664:	683b      	ldr	r3, [r7, #0]
 800a666:	699b      	ldr	r3, [r3, #24]
 800a668:	009b      	lsls	r3, r3, #2
 800a66a:	693a      	ldr	r2, [r7, #16]
 800a66c:	4313      	orrs	r3, r2
 800a66e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800a670:	687b      	ldr	r3, [r7, #4]
 800a672:	693a      	ldr	r2, [r7, #16]
 800a674:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800a676:	687b      	ldr	r3, [r7, #4]
 800a678:	68fa      	ldr	r2, [r7, #12]
 800a67a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800a67c:	683b      	ldr	r3, [r7, #0]
 800a67e:	685a      	ldr	r2, [r3, #4]
 800a680:	687b      	ldr	r3, [r7, #4]
 800a682:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800a684:	687b      	ldr	r3, [r7, #4]
 800a686:	697a      	ldr	r2, [r7, #20]
 800a688:	621a      	str	r2, [r3, #32]
}
 800a68a:	bf00      	nop
 800a68c:	371c      	adds	r7, #28
 800a68e:	46bd      	mov	sp, r7
 800a690:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a694:	4770      	bx	lr
 800a696:	bf00      	nop
 800a698:	40012c00 	.word	0x40012c00
 800a69c:	40013400 	.word	0x40013400
 800a6a0:	40014000 	.word	0x40014000
 800a6a4:	40014400 	.word	0x40014400
 800a6a8:	40014800 	.word	0x40014800

0800a6ac <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800a6ac:	b480      	push	{r7}
 800a6ae:	b087      	sub	sp, #28
 800a6b0:	af00      	add	r7, sp, #0
 800a6b2:	6078      	str	r0, [r7, #4]
 800a6b4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800a6b6:	687b      	ldr	r3, [r7, #4]
 800a6b8:	6a1b      	ldr	r3, [r3, #32]
 800a6ba:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800a6bc:	687b      	ldr	r3, [r7, #4]
 800a6be:	6a1b      	ldr	r3, [r3, #32]
 800a6c0:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800a6c4:	687b      	ldr	r3, [r7, #4]
 800a6c6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800a6c8:	687b      	ldr	r3, [r7, #4]
 800a6ca:	685b      	ldr	r3, [r3, #4]
 800a6cc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800a6ce:	687b      	ldr	r3, [r7, #4]
 800a6d0:	69db      	ldr	r3, [r3, #28]
 800a6d2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800a6d4:	68fb      	ldr	r3, [r7, #12]
 800a6d6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800a6da:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800a6de:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800a6e0:	68fb      	ldr	r3, [r7, #12]
 800a6e2:	f023 0303 	bic.w	r3, r3, #3
 800a6e6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800a6e8:	683b      	ldr	r3, [r7, #0]
 800a6ea:	681b      	ldr	r3, [r3, #0]
 800a6ec:	68fa      	ldr	r2, [r7, #12]
 800a6ee:	4313      	orrs	r3, r2
 800a6f0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800a6f2:	697b      	ldr	r3, [r7, #20]
 800a6f4:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800a6f8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800a6fa:	683b      	ldr	r3, [r7, #0]
 800a6fc:	689b      	ldr	r3, [r3, #8]
 800a6fe:	021b      	lsls	r3, r3, #8
 800a700:	697a      	ldr	r2, [r7, #20]
 800a702:	4313      	orrs	r3, r2
 800a704:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800a706:	687b      	ldr	r3, [r7, #4]
 800a708:	4a27      	ldr	r2, [pc, #156]	@ (800a7a8 <TIM_OC3_SetConfig+0xfc>)
 800a70a:	4293      	cmp	r3, r2
 800a70c:	d003      	beq.n	800a716 <TIM_OC3_SetConfig+0x6a>
 800a70e:	687b      	ldr	r3, [r7, #4]
 800a710:	4a26      	ldr	r2, [pc, #152]	@ (800a7ac <TIM_OC3_SetConfig+0x100>)
 800a712:	4293      	cmp	r3, r2
 800a714:	d10d      	bne.n	800a732 <TIM_OC3_SetConfig+0x86>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800a716:	697b      	ldr	r3, [r7, #20]
 800a718:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800a71c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800a71e:	683b      	ldr	r3, [r7, #0]
 800a720:	68db      	ldr	r3, [r3, #12]
 800a722:	021b      	lsls	r3, r3, #8
 800a724:	697a      	ldr	r2, [r7, #20]
 800a726:	4313      	orrs	r3, r2
 800a728:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800a72a:	697b      	ldr	r3, [r7, #20]
 800a72c:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800a730:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a732:	687b      	ldr	r3, [r7, #4]
 800a734:	4a1c      	ldr	r2, [pc, #112]	@ (800a7a8 <TIM_OC3_SetConfig+0xfc>)
 800a736:	4293      	cmp	r3, r2
 800a738:	d00f      	beq.n	800a75a <TIM_OC3_SetConfig+0xae>
 800a73a:	687b      	ldr	r3, [r7, #4]
 800a73c:	4a1b      	ldr	r2, [pc, #108]	@ (800a7ac <TIM_OC3_SetConfig+0x100>)
 800a73e:	4293      	cmp	r3, r2
 800a740:	d00b      	beq.n	800a75a <TIM_OC3_SetConfig+0xae>
 800a742:	687b      	ldr	r3, [r7, #4]
 800a744:	4a1a      	ldr	r2, [pc, #104]	@ (800a7b0 <TIM_OC3_SetConfig+0x104>)
 800a746:	4293      	cmp	r3, r2
 800a748:	d007      	beq.n	800a75a <TIM_OC3_SetConfig+0xae>
 800a74a:	687b      	ldr	r3, [r7, #4]
 800a74c:	4a19      	ldr	r2, [pc, #100]	@ (800a7b4 <TIM_OC3_SetConfig+0x108>)
 800a74e:	4293      	cmp	r3, r2
 800a750:	d003      	beq.n	800a75a <TIM_OC3_SetConfig+0xae>
 800a752:	687b      	ldr	r3, [r7, #4]
 800a754:	4a18      	ldr	r2, [pc, #96]	@ (800a7b8 <TIM_OC3_SetConfig+0x10c>)
 800a756:	4293      	cmp	r3, r2
 800a758:	d113      	bne.n	800a782 <TIM_OC3_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800a75a:	693b      	ldr	r3, [r7, #16]
 800a75c:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800a760:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800a762:	693b      	ldr	r3, [r7, #16]
 800a764:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800a768:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800a76a:	683b      	ldr	r3, [r7, #0]
 800a76c:	695b      	ldr	r3, [r3, #20]
 800a76e:	011b      	lsls	r3, r3, #4
 800a770:	693a      	ldr	r2, [r7, #16]
 800a772:	4313      	orrs	r3, r2
 800a774:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800a776:	683b      	ldr	r3, [r7, #0]
 800a778:	699b      	ldr	r3, [r3, #24]
 800a77a:	011b      	lsls	r3, r3, #4
 800a77c:	693a      	ldr	r2, [r7, #16]
 800a77e:	4313      	orrs	r3, r2
 800a780:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800a782:	687b      	ldr	r3, [r7, #4]
 800a784:	693a      	ldr	r2, [r7, #16]
 800a786:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800a788:	687b      	ldr	r3, [r7, #4]
 800a78a:	68fa      	ldr	r2, [r7, #12]
 800a78c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800a78e:	683b      	ldr	r3, [r7, #0]
 800a790:	685a      	ldr	r2, [r3, #4]
 800a792:	687b      	ldr	r3, [r7, #4]
 800a794:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800a796:	687b      	ldr	r3, [r7, #4]
 800a798:	697a      	ldr	r2, [r7, #20]
 800a79a:	621a      	str	r2, [r3, #32]
}
 800a79c:	bf00      	nop
 800a79e:	371c      	adds	r7, #28
 800a7a0:	46bd      	mov	sp, r7
 800a7a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7a6:	4770      	bx	lr
 800a7a8:	40012c00 	.word	0x40012c00
 800a7ac:	40013400 	.word	0x40013400
 800a7b0:	40014000 	.word	0x40014000
 800a7b4:	40014400 	.word	0x40014400
 800a7b8:	40014800 	.word	0x40014800

0800a7bc <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800a7bc:	b480      	push	{r7}
 800a7be:	b087      	sub	sp, #28
 800a7c0:	af00      	add	r7, sp, #0
 800a7c2:	6078      	str	r0, [r7, #4]
 800a7c4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800a7c6:	687b      	ldr	r3, [r7, #4]
 800a7c8:	6a1b      	ldr	r3, [r3, #32]
 800a7ca:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800a7cc:	687b      	ldr	r3, [r7, #4]
 800a7ce:	6a1b      	ldr	r3, [r3, #32]
 800a7d0:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800a7d4:	687b      	ldr	r3, [r7, #4]
 800a7d6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800a7d8:	687b      	ldr	r3, [r7, #4]
 800a7da:	685b      	ldr	r3, [r3, #4]
 800a7dc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800a7de:	687b      	ldr	r3, [r7, #4]
 800a7e0:	69db      	ldr	r3, [r3, #28]
 800a7e2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800a7e4:	68fb      	ldr	r3, [r7, #12]
 800a7e6:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800a7ea:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800a7ee:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800a7f0:	68fb      	ldr	r3, [r7, #12]
 800a7f2:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800a7f6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800a7f8:	683b      	ldr	r3, [r7, #0]
 800a7fa:	681b      	ldr	r3, [r3, #0]
 800a7fc:	021b      	lsls	r3, r3, #8
 800a7fe:	68fa      	ldr	r2, [r7, #12]
 800a800:	4313      	orrs	r3, r2
 800a802:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800a804:	697b      	ldr	r3, [r7, #20]
 800a806:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800a80a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800a80c:	683b      	ldr	r3, [r7, #0]
 800a80e:	689b      	ldr	r3, [r3, #8]
 800a810:	031b      	lsls	r3, r3, #12
 800a812:	697a      	ldr	r2, [r7, #20]
 800a814:	4313      	orrs	r3, r2
 800a816:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_4))
 800a818:	687b      	ldr	r3, [r7, #4]
 800a81a:	4a28      	ldr	r2, [pc, #160]	@ (800a8bc <TIM_OC4_SetConfig+0x100>)
 800a81c:	4293      	cmp	r3, r2
 800a81e:	d003      	beq.n	800a828 <TIM_OC4_SetConfig+0x6c>
 800a820:	687b      	ldr	r3, [r7, #4]
 800a822:	4a27      	ldr	r2, [pc, #156]	@ (800a8c0 <TIM_OC4_SetConfig+0x104>)
 800a824:	4293      	cmp	r3, r2
 800a826:	d10d      	bne.n	800a844 <TIM_OC4_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC4NP;
 800a828:	697b      	ldr	r3, [r7, #20]
 800a82a:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 800a82e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 12U);
 800a830:	683b      	ldr	r3, [r7, #0]
 800a832:	68db      	ldr	r3, [r3, #12]
 800a834:	031b      	lsls	r3, r3, #12
 800a836:	697a      	ldr	r2, [r7, #20]
 800a838:	4313      	orrs	r3, r2
 800a83a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC4NE;
 800a83c:	697b      	ldr	r3, [r7, #20]
 800a83e:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800a842:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a844:	687b      	ldr	r3, [r7, #4]
 800a846:	4a1d      	ldr	r2, [pc, #116]	@ (800a8bc <TIM_OC4_SetConfig+0x100>)
 800a848:	4293      	cmp	r3, r2
 800a84a:	d00f      	beq.n	800a86c <TIM_OC4_SetConfig+0xb0>
 800a84c:	687b      	ldr	r3, [r7, #4]
 800a84e:	4a1c      	ldr	r2, [pc, #112]	@ (800a8c0 <TIM_OC4_SetConfig+0x104>)
 800a850:	4293      	cmp	r3, r2
 800a852:	d00b      	beq.n	800a86c <TIM_OC4_SetConfig+0xb0>
 800a854:	687b      	ldr	r3, [r7, #4]
 800a856:	4a1b      	ldr	r2, [pc, #108]	@ (800a8c4 <TIM_OC4_SetConfig+0x108>)
 800a858:	4293      	cmp	r3, r2
 800a85a:	d007      	beq.n	800a86c <TIM_OC4_SetConfig+0xb0>
 800a85c:	687b      	ldr	r3, [r7, #4]
 800a85e:	4a1a      	ldr	r2, [pc, #104]	@ (800a8c8 <TIM_OC4_SetConfig+0x10c>)
 800a860:	4293      	cmp	r3, r2
 800a862:	d003      	beq.n	800a86c <TIM_OC4_SetConfig+0xb0>
 800a864:	687b      	ldr	r3, [r7, #4]
 800a866:	4a19      	ldr	r2, [pc, #100]	@ (800a8cc <TIM_OC4_SetConfig+0x110>)
 800a868:	4293      	cmp	r3, r2
 800a86a:	d113      	bne.n	800a894 <TIM_OC4_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800a86c:	693b      	ldr	r3, [r7, #16]
 800a86e:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800a872:	613b      	str	r3, [r7, #16]
    /* Reset the Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4N;
 800a874:	693b      	ldr	r3, [r7, #16]
 800a876:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 800a87a:	613b      	str	r3, [r7, #16]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800a87c:	683b      	ldr	r3, [r7, #0]
 800a87e:	695b      	ldr	r3, [r3, #20]
 800a880:	019b      	lsls	r3, r3, #6
 800a882:	693a      	ldr	r2, [r7, #16]
 800a884:	4313      	orrs	r3, r2
 800a886:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 6U);
 800a888:	683b      	ldr	r3, [r7, #0]
 800a88a:	699b      	ldr	r3, [r3, #24]
 800a88c:	019b      	lsls	r3, r3, #6
 800a88e:	693a      	ldr	r2, [r7, #16]
 800a890:	4313      	orrs	r3, r2
 800a892:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800a894:	687b      	ldr	r3, [r7, #4]
 800a896:	693a      	ldr	r2, [r7, #16]
 800a898:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800a89a:	687b      	ldr	r3, [r7, #4]
 800a89c:	68fa      	ldr	r2, [r7, #12]
 800a89e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800a8a0:	683b      	ldr	r3, [r7, #0]
 800a8a2:	685a      	ldr	r2, [r3, #4]
 800a8a4:	687b      	ldr	r3, [r7, #4]
 800a8a6:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800a8a8:	687b      	ldr	r3, [r7, #4]
 800a8aa:	697a      	ldr	r2, [r7, #20]
 800a8ac:	621a      	str	r2, [r3, #32]
}
 800a8ae:	bf00      	nop
 800a8b0:	371c      	adds	r7, #28
 800a8b2:	46bd      	mov	sp, r7
 800a8b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8b8:	4770      	bx	lr
 800a8ba:	bf00      	nop
 800a8bc:	40012c00 	.word	0x40012c00
 800a8c0:	40013400 	.word	0x40013400
 800a8c4:	40014000 	.word	0x40014000
 800a8c8:	40014400 	.word	0x40014400
 800a8cc:	40014800 	.word	0x40014800

0800a8d0 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800a8d0:	b480      	push	{r7}
 800a8d2:	b087      	sub	sp, #28
 800a8d4:	af00      	add	r7, sp, #0
 800a8d6:	6078      	str	r0, [r7, #4]
 800a8d8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800a8da:	687b      	ldr	r3, [r7, #4]
 800a8dc:	6a1b      	ldr	r3, [r3, #32]
 800a8de:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800a8e0:	687b      	ldr	r3, [r7, #4]
 800a8e2:	6a1b      	ldr	r3, [r3, #32]
 800a8e4:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 800a8e8:	687b      	ldr	r3, [r7, #4]
 800a8ea:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800a8ec:	687b      	ldr	r3, [r7, #4]
 800a8ee:	685b      	ldr	r3, [r3, #4]
 800a8f0:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800a8f2:	687b      	ldr	r3, [r7, #4]
 800a8f4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800a8f6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800a8f8:	68fb      	ldr	r3, [r7, #12]
 800a8fa:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800a8fe:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800a902:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800a904:	683b      	ldr	r3, [r7, #0]
 800a906:	681b      	ldr	r3, [r3, #0]
 800a908:	68fa      	ldr	r2, [r7, #12]
 800a90a:	4313      	orrs	r3, r2
 800a90c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800a90e:	693b      	ldr	r3, [r7, #16]
 800a910:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 800a914:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800a916:	683b      	ldr	r3, [r7, #0]
 800a918:	689b      	ldr	r3, [r3, #8]
 800a91a:	041b      	lsls	r3, r3, #16
 800a91c:	693a      	ldr	r2, [r7, #16]
 800a91e:	4313      	orrs	r3, r2
 800a920:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a922:	687b      	ldr	r3, [r7, #4]
 800a924:	4a17      	ldr	r2, [pc, #92]	@ (800a984 <TIM_OC5_SetConfig+0xb4>)
 800a926:	4293      	cmp	r3, r2
 800a928:	d00f      	beq.n	800a94a <TIM_OC5_SetConfig+0x7a>
 800a92a:	687b      	ldr	r3, [r7, #4]
 800a92c:	4a16      	ldr	r2, [pc, #88]	@ (800a988 <TIM_OC5_SetConfig+0xb8>)
 800a92e:	4293      	cmp	r3, r2
 800a930:	d00b      	beq.n	800a94a <TIM_OC5_SetConfig+0x7a>
 800a932:	687b      	ldr	r3, [r7, #4]
 800a934:	4a15      	ldr	r2, [pc, #84]	@ (800a98c <TIM_OC5_SetConfig+0xbc>)
 800a936:	4293      	cmp	r3, r2
 800a938:	d007      	beq.n	800a94a <TIM_OC5_SetConfig+0x7a>
 800a93a:	687b      	ldr	r3, [r7, #4]
 800a93c:	4a14      	ldr	r2, [pc, #80]	@ (800a990 <TIM_OC5_SetConfig+0xc0>)
 800a93e:	4293      	cmp	r3, r2
 800a940:	d003      	beq.n	800a94a <TIM_OC5_SetConfig+0x7a>
 800a942:	687b      	ldr	r3, [r7, #4]
 800a944:	4a13      	ldr	r2, [pc, #76]	@ (800a994 <TIM_OC5_SetConfig+0xc4>)
 800a946:	4293      	cmp	r3, r2
 800a948:	d109      	bne.n	800a95e <TIM_OC5_SetConfig+0x8e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800a94a:	697b      	ldr	r3, [r7, #20]
 800a94c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800a950:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800a952:	683b      	ldr	r3, [r7, #0]
 800a954:	695b      	ldr	r3, [r3, #20]
 800a956:	021b      	lsls	r3, r3, #8
 800a958:	697a      	ldr	r2, [r7, #20]
 800a95a:	4313      	orrs	r3, r2
 800a95c:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800a95e:	687b      	ldr	r3, [r7, #4]
 800a960:	697a      	ldr	r2, [r7, #20]
 800a962:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800a964:	687b      	ldr	r3, [r7, #4]
 800a966:	68fa      	ldr	r2, [r7, #12]
 800a968:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800a96a:	683b      	ldr	r3, [r7, #0]
 800a96c:	685a      	ldr	r2, [r3, #4]
 800a96e:	687b      	ldr	r3, [r7, #4]
 800a970:	649a      	str	r2, [r3, #72]	@ 0x48

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800a972:	687b      	ldr	r3, [r7, #4]
 800a974:	693a      	ldr	r2, [r7, #16]
 800a976:	621a      	str	r2, [r3, #32]
}
 800a978:	bf00      	nop
 800a97a:	371c      	adds	r7, #28
 800a97c:	46bd      	mov	sp, r7
 800a97e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a982:	4770      	bx	lr
 800a984:	40012c00 	.word	0x40012c00
 800a988:	40013400 	.word	0x40013400
 800a98c:	40014000 	.word	0x40014000
 800a990:	40014400 	.word	0x40014400
 800a994:	40014800 	.word	0x40014800

0800a998 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800a998:	b480      	push	{r7}
 800a99a:	b087      	sub	sp, #28
 800a99c:	af00      	add	r7, sp, #0
 800a99e:	6078      	str	r0, [r7, #4]
 800a9a0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800a9a2:	687b      	ldr	r3, [r7, #4]
 800a9a4:	6a1b      	ldr	r3, [r3, #32]
 800a9a6:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800a9a8:	687b      	ldr	r3, [r7, #4]
 800a9aa:	6a1b      	ldr	r3, [r3, #32]
 800a9ac:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 800a9b0:	687b      	ldr	r3, [r7, #4]
 800a9b2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800a9b4:	687b      	ldr	r3, [r7, #4]
 800a9b6:	685b      	ldr	r3, [r3, #4]
 800a9b8:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800a9ba:	687b      	ldr	r3, [r7, #4]
 800a9bc:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800a9be:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800a9c0:	68fb      	ldr	r3, [r7, #12]
 800a9c2:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800a9c6:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800a9ca:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800a9cc:	683b      	ldr	r3, [r7, #0]
 800a9ce:	681b      	ldr	r3, [r3, #0]
 800a9d0:	021b      	lsls	r3, r3, #8
 800a9d2:	68fa      	ldr	r2, [r7, #12]
 800a9d4:	4313      	orrs	r3, r2
 800a9d6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 800a9d8:	693b      	ldr	r3, [r7, #16]
 800a9da:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800a9de:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800a9e0:	683b      	ldr	r3, [r7, #0]
 800a9e2:	689b      	ldr	r3, [r3, #8]
 800a9e4:	051b      	lsls	r3, r3, #20
 800a9e6:	693a      	ldr	r2, [r7, #16]
 800a9e8:	4313      	orrs	r3, r2
 800a9ea:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a9ec:	687b      	ldr	r3, [r7, #4]
 800a9ee:	4a18      	ldr	r2, [pc, #96]	@ (800aa50 <TIM_OC6_SetConfig+0xb8>)
 800a9f0:	4293      	cmp	r3, r2
 800a9f2:	d00f      	beq.n	800aa14 <TIM_OC6_SetConfig+0x7c>
 800a9f4:	687b      	ldr	r3, [r7, #4]
 800a9f6:	4a17      	ldr	r2, [pc, #92]	@ (800aa54 <TIM_OC6_SetConfig+0xbc>)
 800a9f8:	4293      	cmp	r3, r2
 800a9fa:	d00b      	beq.n	800aa14 <TIM_OC6_SetConfig+0x7c>
 800a9fc:	687b      	ldr	r3, [r7, #4]
 800a9fe:	4a16      	ldr	r2, [pc, #88]	@ (800aa58 <TIM_OC6_SetConfig+0xc0>)
 800aa00:	4293      	cmp	r3, r2
 800aa02:	d007      	beq.n	800aa14 <TIM_OC6_SetConfig+0x7c>
 800aa04:	687b      	ldr	r3, [r7, #4]
 800aa06:	4a15      	ldr	r2, [pc, #84]	@ (800aa5c <TIM_OC6_SetConfig+0xc4>)
 800aa08:	4293      	cmp	r3, r2
 800aa0a:	d003      	beq.n	800aa14 <TIM_OC6_SetConfig+0x7c>
 800aa0c:	687b      	ldr	r3, [r7, #4]
 800aa0e:	4a14      	ldr	r2, [pc, #80]	@ (800aa60 <TIM_OC6_SetConfig+0xc8>)
 800aa10:	4293      	cmp	r3, r2
 800aa12:	d109      	bne.n	800aa28 <TIM_OC6_SetConfig+0x90>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 800aa14:	697b      	ldr	r3, [r7, #20]
 800aa16:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800aa1a:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800aa1c:	683b      	ldr	r3, [r7, #0]
 800aa1e:	695b      	ldr	r3, [r3, #20]
 800aa20:	029b      	lsls	r3, r3, #10
 800aa22:	697a      	ldr	r2, [r7, #20]
 800aa24:	4313      	orrs	r3, r2
 800aa26:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800aa28:	687b      	ldr	r3, [r7, #4]
 800aa2a:	697a      	ldr	r2, [r7, #20]
 800aa2c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800aa2e:	687b      	ldr	r3, [r7, #4]
 800aa30:	68fa      	ldr	r2, [r7, #12]
 800aa32:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 800aa34:	683b      	ldr	r3, [r7, #0]
 800aa36:	685a      	ldr	r2, [r3, #4]
 800aa38:	687b      	ldr	r3, [r7, #4]
 800aa3a:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800aa3c:	687b      	ldr	r3, [r7, #4]
 800aa3e:	693a      	ldr	r2, [r7, #16]
 800aa40:	621a      	str	r2, [r3, #32]
}
 800aa42:	bf00      	nop
 800aa44:	371c      	adds	r7, #28
 800aa46:	46bd      	mov	sp, r7
 800aa48:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa4c:	4770      	bx	lr
 800aa4e:	bf00      	nop
 800aa50:	40012c00 	.word	0x40012c00
 800aa54:	40013400 	.word	0x40013400
 800aa58:	40014000 	.word	0x40014000
 800aa5c:	40014400 	.word	0x40014400
 800aa60:	40014800 	.word	0x40014800

0800aa64 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800aa64:	b480      	push	{r7}
 800aa66:	b087      	sub	sp, #28
 800aa68:	af00      	add	r7, sp, #0
 800aa6a:	60f8      	str	r0, [r7, #12]
 800aa6c:	60b9      	str	r1, [r7, #8]
 800aa6e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800aa70:	68fb      	ldr	r3, [r7, #12]
 800aa72:	6a1b      	ldr	r3, [r3, #32]
 800aa74:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800aa76:	68fb      	ldr	r3, [r7, #12]
 800aa78:	6a1b      	ldr	r3, [r3, #32]
 800aa7a:	f023 0201 	bic.w	r2, r3, #1
 800aa7e:	68fb      	ldr	r3, [r7, #12]
 800aa80:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800aa82:	68fb      	ldr	r3, [r7, #12]
 800aa84:	699b      	ldr	r3, [r3, #24]
 800aa86:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800aa88:	693b      	ldr	r3, [r7, #16]
 800aa8a:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800aa8e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800aa90:	687b      	ldr	r3, [r7, #4]
 800aa92:	011b      	lsls	r3, r3, #4
 800aa94:	693a      	ldr	r2, [r7, #16]
 800aa96:	4313      	orrs	r3, r2
 800aa98:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800aa9a:	697b      	ldr	r3, [r7, #20]
 800aa9c:	f023 030a 	bic.w	r3, r3, #10
 800aaa0:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800aaa2:	697a      	ldr	r2, [r7, #20]
 800aaa4:	68bb      	ldr	r3, [r7, #8]
 800aaa6:	4313      	orrs	r3, r2
 800aaa8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800aaaa:	68fb      	ldr	r3, [r7, #12]
 800aaac:	693a      	ldr	r2, [r7, #16]
 800aaae:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800aab0:	68fb      	ldr	r3, [r7, #12]
 800aab2:	697a      	ldr	r2, [r7, #20]
 800aab4:	621a      	str	r2, [r3, #32]
}
 800aab6:	bf00      	nop
 800aab8:	371c      	adds	r7, #28
 800aaba:	46bd      	mov	sp, r7
 800aabc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aac0:	4770      	bx	lr

0800aac2 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800aac2:	b480      	push	{r7}
 800aac4:	b087      	sub	sp, #28
 800aac6:	af00      	add	r7, sp, #0
 800aac8:	60f8      	str	r0, [r7, #12]
 800aaca:	60b9      	str	r1, [r7, #8]
 800aacc:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800aace:	68fb      	ldr	r3, [r7, #12]
 800aad0:	6a1b      	ldr	r3, [r3, #32]
 800aad2:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800aad4:	68fb      	ldr	r3, [r7, #12]
 800aad6:	6a1b      	ldr	r3, [r3, #32]
 800aad8:	f023 0210 	bic.w	r2, r3, #16
 800aadc:	68fb      	ldr	r3, [r7, #12]
 800aade:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800aae0:	68fb      	ldr	r3, [r7, #12]
 800aae2:	699b      	ldr	r3, [r3, #24]
 800aae4:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800aae6:	693b      	ldr	r3, [r7, #16]
 800aae8:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800aaec:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800aaee:	687b      	ldr	r3, [r7, #4]
 800aaf0:	031b      	lsls	r3, r3, #12
 800aaf2:	693a      	ldr	r2, [r7, #16]
 800aaf4:	4313      	orrs	r3, r2
 800aaf6:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800aaf8:	697b      	ldr	r3, [r7, #20]
 800aafa:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 800aafe:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 800ab00:	68bb      	ldr	r3, [r7, #8]
 800ab02:	011b      	lsls	r3, r3, #4
 800ab04:	697a      	ldr	r2, [r7, #20]
 800ab06:	4313      	orrs	r3, r2
 800ab08:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800ab0a:	68fb      	ldr	r3, [r7, #12]
 800ab0c:	693a      	ldr	r2, [r7, #16]
 800ab0e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800ab10:	68fb      	ldr	r3, [r7, #12]
 800ab12:	697a      	ldr	r2, [r7, #20]
 800ab14:	621a      	str	r2, [r3, #32]
}
 800ab16:	bf00      	nop
 800ab18:	371c      	adds	r7, #28
 800ab1a:	46bd      	mov	sp, r7
 800ab1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab20:	4770      	bx	lr

0800ab22 <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800ab22:	b480      	push	{r7}
 800ab24:	b085      	sub	sp, #20
 800ab26:	af00      	add	r7, sp, #0
 800ab28:	6078      	str	r0, [r7, #4]
 800ab2a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800ab2c:	687b      	ldr	r3, [r7, #4]
 800ab2e:	689b      	ldr	r3, [r3, #8]
 800ab30:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800ab32:	68fb      	ldr	r3, [r7, #12]
 800ab34:	f423 1340 	bic.w	r3, r3, #3145728	@ 0x300000
 800ab38:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800ab3c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800ab3e:	683a      	ldr	r2, [r7, #0]
 800ab40:	68fb      	ldr	r3, [r7, #12]
 800ab42:	4313      	orrs	r3, r2
 800ab44:	f043 0307 	orr.w	r3, r3, #7
 800ab48:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800ab4a:	687b      	ldr	r3, [r7, #4]
 800ab4c:	68fa      	ldr	r2, [r7, #12]
 800ab4e:	609a      	str	r2, [r3, #8]
}
 800ab50:	bf00      	nop
 800ab52:	3714      	adds	r7, #20
 800ab54:	46bd      	mov	sp, r7
 800ab56:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab5a:	4770      	bx	lr

0800ab5c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800ab5c:	b480      	push	{r7}
 800ab5e:	b087      	sub	sp, #28
 800ab60:	af00      	add	r7, sp, #0
 800ab62:	60f8      	str	r0, [r7, #12]
 800ab64:	60b9      	str	r1, [r7, #8]
 800ab66:	607a      	str	r2, [r7, #4]
 800ab68:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800ab6a:	68fb      	ldr	r3, [r7, #12]
 800ab6c:	689b      	ldr	r3, [r3, #8]
 800ab6e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800ab70:	697b      	ldr	r3, [r7, #20]
 800ab72:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800ab76:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800ab78:	683b      	ldr	r3, [r7, #0]
 800ab7a:	021a      	lsls	r2, r3, #8
 800ab7c:	687b      	ldr	r3, [r7, #4]
 800ab7e:	431a      	orrs	r2, r3
 800ab80:	68bb      	ldr	r3, [r7, #8]
 800ab82:	4313      	orrs	r3, r2
 800ab84:	697a      	ldr	r2, [r7, #20]
 800ab86:	4313      	orrs	r3, r2
 800ab88:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800ab8a:	68fb      	ldr	r3, [r7, #12]
 800ab8c:	697a      	ldr	r2, [r7, #20]
 800ab8e:	609a      	str	r2, [r3, #8]
}
 800ab90:	bf00      	nop
 800ab92:	371c      	adds	r7, #28
 800ab94:	46bd      	mov	sp, r7
 800ab96:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab9a:	4770      	bx	lr

0800ab9c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800ab9c:	b480      	push	{r7}
 800ab9e:	b087      	sub	sp, #28
 800aba0:	af00      	add	r7, sp, #0
 800aba2:	60f8      	str	r0, [r7, #12]
 800aba4:	60b9      	str	r1, [r7, #8]
 800aba6:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800aba8:	68bb      	ldr	r3, [r7, #8]
 800abaa:	f003 031f 	and.w	r3, r3, #31
 800abae:	2201      	movs	r2, #1
 800abb0:	fa02 f303 	lsl.w	r3, r2, r3
 800abb4:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800abb6:	68fb      	ldr	r3, [r7, #12]
 800abb8:	6a1a      	ldr	r2, [r3, #32]
 800abba:	697b      	ldr	r3, [r7, #20]
 800abbc:	43db      	mvns	r3, r3
 800abbe:	401a      	ands	r2, r3
 800abc0:	68fb      	ldr	r3, [r7, #12]
 800abc2:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800abc4:	68fb      	ldr	r3, [r7, #12]
 800abc6:	6a1a      	ldr	r2, [r3, #32]
 800abc8:	68bb      	ldr	r3, [r7, #8]
 800abca:	f003 031f 	and.w	r3, r3, #31
 800abce:	6879      	ldr	r1, [r7, #4]
 800abd0:	fa01 f303 	lsl.w	r3, r1, r3
 800abd4:	431a      	orrs	r2, r3
 800abd6:	68fb      	ldr	r3, [r7, #12]
 800abd8:	621a      	str	r2, [r3, #32]
}
 800abda:	bf00      	nop
 800abdc:	371c      	adds	r7, #28
 800abde:	46bd      	mov	sp, r7
 800abe0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800abe4:	4770      	bx	lr
	...

0800abe8 <HAL_TIMEx_PWMN_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_PWMN_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800abe8:	b580      	push	{r7, lr}
 800abea:	b084      	sub	sp, #16
 800abec:	af00      	add	r7, sp, #0
 800abee:	6078      	str	r0, [r7, #4]
 800abf0:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCXN_INSTANCE(htim->Instance, Channel));

  /* Check the TIM complementary channel state */
  if (TIM_CHANNEL_N_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800abf2:	683b      	ldr	r3, [r7, #0]
 800abf4:	2b00      	cmp	r3, #0
 800abf6:	d109      	bne.n	800ac0c <HAL_TIMEx_PWMN_Start+0x24>
 800abf8:	687b      	ldr	r3, [r7, #4]
 800abfa:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800abfe:	b2db      	uxtb	r3, r3
 800ac00:	2b01      	cmp	r3, #1
 800ac02:	bf14      	ite	ne
 800ac04:	2301      	movne	r3, #1
 800ac06:	2300      	moveq	r3, #0
 800ac08:	b2db      	uxtb	r3, r3
 800ac0a:	e022      	b.n	800ac52 <HAL_TIMEx_PWMN_Start+0x6a>
 800ac0c:	683b      	ldr	r3, [r7, #0]
 800ac0e:	2b04      	cmp	r3, #4
 800ac10:	d109      	bne.n	800ac26 <HAL_TIMEx_PWMN_Start+0x3e>
 800ac12:	687b      	ldr	r3, [r7, #4]
 800ac14:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800ac18:	b2db      	uxtb	r3, r3
 800ac1a:	2b01      	cmp	r3, #1
 800ac1c:	bf14      	ite	ne
 800ac1e:	2301      	movne	r3, #1
 800ac20:	2300      	moveq	r3, #0
 800ac22:	b2db      	uxtb	r3, r3
 800ac24:	e015      	b.n	800ac52 <HAL_TIMEx_PWMN_Start+0x6a>
 800ac26:	683b      	ldr	r3, [r7, #0]
 800ac28:	2b08      	cmp	r3, #8
 800ac2a:	d109      	bne.n	800ac40 <HAL_TIMEx_PWMN_Start+0x58>
 800ac2c:	687b      	ldr	r3, [r7, #4]
 800ac2e:	f893 3046 	ldrb.w	r3, [r3, #70]	@ 0x46
 800ac32:	b2db      	uxtb	r3, r3
 800ac34:	2b01      	cmp	r3, #1
 800ac36:	bf14      	ite	ne
 800ac38:	2301      	movne	r3, #1
 800ac3a:	2300      	moveq	r3, #0
 800ac3c:	b2db      	uxtb	r3, r3
 800ac3e:	e008      	b.n	800ac52 <HAL_TIMEx_PWMN_Start+0x6a>
 800ac40:	687b      	ldr	r3, [r7, #4]
 800ac42:	f893 3047 	ldrb.w	r3, [r3, #71]	@ 0x47
 800ac46:	b2db      	uxtb	r3, r3
 800ac48:	2b01      	cmp	r3, #1
 800ac4a:	bf14      	ite	ne
 800ac4c:	2301      	movne	r3, #1
 800ac4e:	2300      	moveq	r3, #0
 800ac50:	b2db      	uxtb	r3, r3
 800ac52:	2b00      	cmp	r3, #0
 800ac54:	d001      	beq.n	800ac5a <HAL_TIMEx_PWMN_Start+0x72>
  {
    return HAL_ERROR;
 800ac56:	2301      	movs	r3, #1
 800ac58:	e069      	b.n	800ad2e <HAL_TIMEx_PWMN_Start+0x146>
  }

  /* Set the TIM complementary channel state */
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800ac5a:	683b      	ldr	r3, [r7, #0]
 800ac5c:	2b00      	cmp	r3, #0
 800ac5e:	d104      	bne.n	800ac6a <HAL_TIMEx_PWMN_Start+0x82>
 800ac60:	687b      	ldr	r3, [r7, #4]
 800ac62:	2202      	movs	r2, #2
 800ac64:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800ac68:	e013      	b.n	800ac92 <HAL_TIMEx_PWMN_Start+0xaa>
 800ac6a:	683b      	ldr	r3, [r7, #0]
 800ac6c:	2b04      	cmp	r3, #4
 800ac6e:	d104      	bne.n	800ac7a <HAL_TIMEx_PWMN_Start+0x92>
 800ac70:	687b      	ldr	r3, [r7, #4]
 800ac72:	2202      	movs	r2, #2
 800ac74:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800ac78:	e00b      	b.n	800ac92 <HAL_TIMEx_PWMN_Start+0xaa>
 800ac7a:	683b      	ldr	r3, [r7, #0]
 800ac7c:	2b08      	cmp	r3, #8
 800ac7e:	d104      	bne.n	800ac8a <HAL_TIMEx_PWMN_Start+0xa2>
 800ac80:	687b      	ldr	r3, [r7, #4]
 800ac82:	2202      	movs	r2, #2
 800ac84:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 800ac88:	e003      	b.n	800ac92 <HAL_TIMEx_PWMN_Start+0xaa>
 800ac8a:	687b      	ldr	r3, [r7, #4]
 800ac8c:	2202      	movs	r2, #2
 800ac8e:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Enable the complementary PWM output  */
  TIM_CCxNChannelCmd(htim->Instance, Channel, TIM_CCxN_ENABLE);
 800ac92:	687b      	ldr	r3, [r7, #4]
 800ac94:	681b      	ldr	r3, [r3, #0]
 800ac96:	2204      	movs	r2, #4
 800ac98:	6839      	ldr	r1, [r7, #0]
 800ac9a:	4618      	mov	r0, r3
 800ac9c:	f000 fa0a 	bl	800b0b4 <TIM_CCxNChannelCmd>

  /* Enable the Main Output */
  __HAL_TIM_MOE_ENABLE(htim);
 800aca0:	687b      	ldr	r3, [r7, #4]
 800aca2:	681b      	ldr	r3, [r3, #0]
 800aca4:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800aca6:	687b      	ldr	r3, [r7, #4]
 800aca8:	681b      	ldr	r3, [r3, #0]
 800acaa:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800acae:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800acb0:	687b      	ldr	r3, [r7, #4]
 800acb2:	681b      	ldr	r3, [r3, #0]
 800acb4:	4a20      	ldr	r2, [pc, #128]	@ (800ad38 <HAL_TIMEx_PWMN_Start+0x150>)
 800acb6:	4293      	cmp	r3, r2
 800acb8:	d018      	beq.n	800acec <HAL_TIMEx_PWMN_Start+0x104>
 800acba:	687b      	ldr	r3, [r7, #4]
 800acbc:	681b      	ldr	r3, [r3, #0]
 800acbe:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800acc2:	d013      	beq.n	800acec <HAL_TIMEx_PWMN_Start+0x104>
 800acc4:	687b      	ldr	r3, [r7, #4]
 800acc6:	681b      	ldr	r3, [r3, #0]
 800acc8:	4a1c      	ldr	r2, [pc, #112]	@ (800ad3c <HAL_TIMEx_PWMN_Start+0x154>)
 800acca:	4293      	cmp	r3, r2
 800accc:	d00e      	beq.n	800acec <HAL_TIMEx_PWMN_Start+0x104>
 800acce:	687b      	ldr	r3, [r7, #4]
 800acd0:	681b      	ldr	r3, [r3, #0]
 800acd2:	4a1b      	ldr	r2, [pc, #108]	@ (800ad40 <HAL_TIMEx_PWMN_Start+0x158>)
 800acd4:	4293      	cmp	r3, r2
 800acd6:	d009      	beq.n	800acec <HAL_TIMEx_PWMN_Start+0x104>
 800acd8:	687b      	ldr	r3, [r7, #4]
 800acda:	681b      	ldr	r3, [r3, #0]
 800acdc:	4a19      	ldr	r2, [pc, #100]	@ (800ad44 <HAL_TIMEx_PWMN_Start+0x15c>)
 800acde:	4293      	cmp	r3, r2
 800ace0:	d004      	beq.n	800acec <HAL_TIMEx_PWMN_Start+0x104>
 800ace2:	687b      	ldr	r3, [r7, #4]
 800ace4:	681b      	ldr	r3, [r3, #0]
 800ace6:	4a18      	ldr	r2, [pc, #96]	@ (800ad48 <HAL_TIMEx_PWMN_Start+0x160>)
 800ace8:	4293      	cmp	r3, r2
 800acea:	d115      	bne.n	800ad18 <HAL_TIMEx_PWMN_Start+0x130>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800acec:	687b      	ldr	r3, [r7, #4]
 800acee:	681b      	ldr	r3, [r3, #0]
 800acf0:	689a      	ldr	r2, [r3, #8]
 800acf2:	4b16      	ldr	r3, [pc, #88]	@ (800ad4c <HAL_TIMEx_PWMN_Start+0x164>)
 800acf4:	4013      	ands	r3, r2
 800acf6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800acf8:	68fb      	ldr	r3, [r7, #12]
 800acfa:	2b06      	cmp	r3, #6
 800acfc:	d015      	beq.n	800ad2a <HAL_TIMEx_PWMN_Start+0x142>
 800acfe:	68fb      	ldr	r3, [r7, #12]
 800ad00:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800ad04:	d011      	beq.n	800ad2a <HAL_TIMEx_PWMN_Start+0x142>
    {
      __HAL_TIM_ENABLE(htim);
 800ad06:	687b      	ldr	r3, [r7, #4]
 800ad08:	681b      	ldr	r3, [r3, #0]
 800ad0a:	681a      	ldr	r2, [r3, #0]
 800ad0c:	687b      	ldr	r3, [r7, #4]
 800ad0e:	681b      	ldr	r3, [r3, #0]
 800ad10:	f042 0201 	orr.w	r2, r2, #1
 800ad14:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800ad16:	e008      	b.n	800ad2a <HAL_TIMEx_PWMN_Start+0x142>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800ad18:	687b      	ldr	r3, [r7, #4]
 800ad1a:	681b      	ldr	r3, [r3, #0]
 800ad1c:	681a      	ldr	r2, [r3, #0]
 800ad1e:	687b      	ldr	r3, [r7, #4]
 800ad20:	681b      	ldr	r3, [r3, #0]
 800ad22:	f042 0201 	orr.w	r2, r2, #1
 800ad26:	601a      	str	r2, [r3, #0]
 800ad28:	e000      	b.n	800ad2c <HAL_TIMEx_PWMN_Start+0x144>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800ad2a:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800ad2c:	2300      	movs	r3, #0
}
 800ad2e:	4618      	mov	r0, r3
 800ad30:	3710      	adds	r7, #16
 800ad32:	46bd      	mov	sp, r7
 800ad34:	bd80      	pop	{r7, pc}
 800ad36:	bf00      	nop
 800ad38:	40012c00 	.word	0x40012c00
 800ad3c:	40000400 	.word	0x40000400
 800ad40:	40000800 	.word	0x40000800
 800ad44:	40013400 	.word	0x40013400
 800ad48:	40014000 	.word	0x40014000
 800ad4c:	00010007 	.word	0x00010007

0800ad50 <HAL_TIMEx_PWMN_Stop>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_PWMN_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800ad50:	b580      	push	{r7, lr}
 800ad52:	b082      	sub	sp, #8
 800ad54:	af00      	add	r7, sp, #0
 800ad56:	6078      	str	r0, [r7, #4]
 800ad58:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCXN_INSTANCE(htim->Instance, Channel));

  /* Disable the complementary PWM output  */
  TIM_CCxNChannelCmd(htim->Instance, Channel, TIM_CCxN_DISABLE);
 800ad5a:	687b      	ldr	r3, [r7, #4]
 800ad5c:	681b      	ldr	r3, [r3, #0]
 800ad5e:	2200      	movs	r2, #0
 800ad60:	6839      	ldr	r1, [r7, #0]
 800ad62:	4618      	mov	r0, r3
 800ad64:	f000 f9a6 	bl	800b0b4 <TIM_CCxNChannelCmd>

  /* Disable the Main Output */
  __HAL_TIM_MOE_DISABLE(htim);
 800ad68:	687b      	ldr	r3, [r7, #4]
 800ad6a:	681b      	ldr	r3, [r3, #0]
 800ad6c:	6a1a      	ldr	r2, [r3, #32]
 800ad6e:	f241 1311 	movw	r3, #4369	@ 0x1111
 800ad72:	4013      	ands	r3, r2
 800ad74:	2b00      	cmp	r3, #0
 800ad76:	d10f      	bne.n	800ad98 <HAL_TIMEx_PWMN_Stop+0x48>
 800ad78:	687b      	ldr	r3, [r7, #4]
 800ad7a:	681b      	ldr	r3, [r3, #0]
 800ad7c:	6a1a      	ldr	r2, [r3, #32]
 800ad7e:	f244 4344 	movw	r3, #17476	@ 0x4444
 800ad82:	4013      	ands	r3, r2
 800ad84:	2b00      	cmp	r3, #0
 800ad86:	d107      	bne.n	800ad98 <HAL_TIMEx_PWMN_Stop+0x48>
 800ad88:	687b      	ldr	r3, [r7, #4]
 800ad8a:	681b      	ldr	r3, [r3, #0]
 800ad8c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800ad8e:	687b      	ldr	r3, [r7, #4]
 800ad90:	681b      	ldr	r3, [r3, #0]
 800ad92:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800ad96:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 800ad98:	687b      	ldr	r3, [r7, #4]
 800ad9a:	681b      	ldr	r3, [r3, #0]
 800ad9c:	6a1a      	ldr	r2, [r3, #32]
 800ad9e:	f241 1311 	movw	r3, #4369	@ 0x1111
 800ada2:	4013      	ands	r3, r2
 800ada4:	2b00      	cmp	r3, #0
 800ada6:	d10f      	bne.n	800adc8 <HAL_TIMEx_PWMN_Stop+0x78>
 800ada8:	687b      	ldr	r3, [r7, #4]
 800adaa:	681b      	ldr	r3, [r3, #0]
 800adac:	6a1a      	ldr	r2, [r3, #32]
 800adae:	f244 4344 	movw	r3, #17476	@ 0x4444
 800adb2:	4013      	ands	r3, r2
 800adb4:	2b00      	cmp	r3, #0
 800adb6:	d107      	bne.n	800adc8 <HAL_TIMEx_PWMN_Stop+0x78>
 800adb8:	687b      	ldr	r3, [r7, #4]
 800adba:	681b      	ldr	r3, [r3, #0]
 800adbc:	681a      	ldr	r2, [r3, #0]
 800adbe:	687b      	ldr	r3, [r7, #4]
 800adc0:	681b      	ldr	r3, [r3, #0]
 800adc2:	f022 0201 	bic.w	r2, r2, #1
 800adc6:	601a      	str	r2, [r3, #0]

  /* Set the TIM complementary channel state */
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 800adc8:	683b      	ldr	r3, [r7, #0]
 800adca:	2b00      	cmp	r3, #0
 800adcc:	d104      	bne.n	800add8 <HAL_TIMEx_PWMN_Stop+0x88>
 800adce:	687b      	ldr	r3, [r7, #4]
 800add0:	2201      	movs	r2, #1
 800add2:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800add6:	e013      	b.n	800ae00 <HAL_TIMEx_PWMN_Stop+0xb0>
 800add8:	683b      	ldr	r3, [r7, #0]
 800adda:	2b04      	cmp	r3, #4
 800addc:	d104      	bne.n	800ade8 <HAL_TIMEx_PWMN_Stop+0x98>
 800adde:	687b      	ldr	r3, [r7, #4]
 800ade0:	2201      	movs	r2, #1
 800ade2:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800ade6:	e00b      	b.n	800ae00 <HAL_TIMEx_PWMN_Stop+0xb0>
 800ade8:	683b      	ldr	r3, [r7, #0]
 800adea:	2b08      	cmp	r3, #8
 800adec:	d104      	bne.n	800adf8 <HAL_TIMEx_PWMN_Stop+0xa8>
 800adee:	687b      	ldr	r3, [r7, #4]
 800adf0:	2201      	movs	r2, #1
 800adf2:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 800adf6:	e003      	b.n	800ae00 <HAL_TIMEx_PWMN_Stop+0xb0>
 800adf8:	687b      	ldr	r3, [r7, #4]
 800adfa:	2201      	movs	r2, #1
 800adfc:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Return function status */
  return HAL_OK;
 800ae00:	2300      	movs	r3, #0
}
 800ae02:	4618      	mov	r0, r3
 800ae04:	3708      	adds	r7, #8
 800ae06:	46bd      	mov	sp, r7
 800ae08:	bd80      	pop	{r7, pc}
	...

0800ae0c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800ae0c:	b480      	push	{r7}
 800ae0e:	b085      	sub	sp, #20
 800ae10:	af00      	add	r7, sp, #0
 800ae12:	6078      	str	r0, [r7, #4]
 800ae14:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800ae16:	687b      	ldr	r3, [r7, #4]
 800ae18:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800ae1c:	2b01      	cmp	r3, #1
 800ae1e:	d101      	bne.n	800ae24 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800ae20:	2302      	movs	r3, #2
 800ae22:	e065      	b.n	800aef0 <HAL_TIMEx_MasterConfigSynchronization+0xe4>
 800ae24:	687b      	ldr	r3, [r7, #4]
 800ae26:	2201      	movs	r2, #1
 800ae28:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800ae2c:	687b      	ldr	r3, [r7, #4]
 800ae2e:	2202      	movs	r2, #2
 800ae30:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800ae34:	687b      	ldr	r3, [r7, #4]
 800ae36:	681b      	ldr	r3, [r3, #0]
 800ae38:	685b      	ldr	r3, [r3, #4]
 800ae3a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800ae3c:	687b      	ldr	r3, [r7, #4]
 800ae3e:	681b      	ldr	r3, [r3, #0]
 800ae40:	689b      	ldr	r3, [r3, #8]
 800ae42:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800ae44:	687b      	ldr	r3, [r7, #4]
 800ae46:	681b      	ldr	r3, [r3, #0]
 800ae48:	4a2c      	ldr	r2, [pc, #176]	@ (800aefc <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 800ae4a:	4293      	cmp	r3, r2
 800ae4c:	d004      	beq.n	800ae58 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800ae4e:	687b      	ldr	r3, [r7, #4]
 800ae50:	681b      	ldr	r3, [r3, #0]
 800ae52:	4a2b      	ldr	r2, [pc, #172]	@ (800af00 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800ae54:	4293      	cmp	r3, r2
 800ae56:	d108      	bne.n	800ae6a <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800ae58:	68fb      	ldr	r3, [r7, #12]
 800ae5a:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 800ae5e:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800ae60:	683b      	ldr	r3, [r7, #0]
 800ae62:	685b      	ldr	r3, [r3, #4]
 800ae64:	68fa      	ldr	r2, [r7, #12]
 800ae66:	4313      	orrs	r3, r2
 800ae68:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800ae6a:	68fb      	ldr	r3, [r7, #12]
 800ae6c:	f023 7300 	bic.w	r3, r3, #33554432	@ 0x2000000
 800ae70:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800ae74:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800ae76:	683b      	ldr	r3, [r7, #0]
 800ae78:	681b      	ldr	r3, [r3, #0]
 800ae7a:	68fa      	ldr	r2, [r7, #12]
 800ae7c:	4313      	orrs	r3, r2
 800ae7e:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800ae80:	687b      	ldr	r3, [r7, #4]
 800ae82:	681b      	ldr	r3, [r3, #0]
 800ae84:	68fa      	ldr	r2, [r7, #12]
 800ae86:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800ae88:	687b      	ldr	r3, [r7, #4]
 800ae8a:	681b      	ldr	r3, [r3, #0]
 800ae8c:	4a1b      	ldr	r2, [pc, #108]	@ (800aefc <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 800ae8e:	4293      	cmp	r3, r2
 800ae90:	d018      	beq.n	800aec4 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 800ae92:	687b      	ldr	r3, [r7, #4]
 800ae94:	681b      	ldr	r3, [r3, #0]
 800ae96:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800ae9a:	d013      	beq.n	800aec4 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 800ae9c:	687b      	ldr	r3, [r7, #4]
 800ae9e:	681b      	ldr	r3, [r3, #0]
 800aea0:	4a18      	ldr	r2, [pc, #96]	@ (800af04 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 800aea2:	4293      	cmp	r3, r2
 800aea4:	d00e      	beq.n	800aec4 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 800aea6:	687b      	ldr	r3, [r7, #4]
 800aea8:	681b      	ldr	r3, [r3, #0]
 800aeaa:	4a17      	ldr	r2, [pc, #92]	@ (800af08 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 800aeac:	4293      	cmp	r3, r2
 800aeae:	d009      	beq.n	800aec4 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 800aeb0:	687b      	ldr	r3, [r7, #4]
 800aeb2:	681b      	ldr	r3, [r3, #0]
 800aeb4:	4a12      	ldr	r2, [pc, #72]	@ (800af00 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800aeb6:	4293      	cmp	r3, r2
 800aeb8:	d004      	beq.n	800aec4 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 800aeba:	687b      	ldr	r3, [r7, #4]
 800aebc:	681b      	ldr	r3, [r3, #0]
 800aebe:	4a13      	ldr	r2, [pc, #76]	@ (800af0c <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800aec0:	4293      	cmp	r3, r2
 800aec2:	d10c      	bne.n	800aede <HAL_TIMEx_MasterConfigSynchronization+0xd2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800aec4:	68bb      	ldr	r3, [r7, #8]
 800aec6:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800aeca:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800aecc:	683b      	ldr	r3, [r7, #0]
 800aece:	689b      	ldr	r3, [r3, #8]
 800aed0:	68ba      	ldr	r2, [r7, #8]
 800aed2:	4313      	orrs	r3, r2
 800aed4:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800aed6:	687b      	ldr	r3, [r7, #4]
 800aed8:	681b      	ldr	r3, [r3, #0]
 800aeda:	68ba      	ldr	r2, [r7, #8]
 800aedc:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800aede:	687b      	ldr	r3, [r7, #4]
 800aee0:	2201      	movs	r2, #1
 800aee2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800aee6:	687b      	ldr	r3, [r7, #4]
 800aee8:	2200      	movs	r2, #0
 800aeea:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800aeee:	2300      	movs	r3, #0
}
 800aef0:	4618      	mov	r0, r3
 800aef2:	3714      	adds	r7, #20
 800aef4:	46bd      	mov	sp, r7
 800aef6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aefa:	4770      	bx	lr
 800aefc:	40012c00 	.word	0x40012c00
 800af00:	40013400 	.word	0x40013400
 800af04:	40000400 	.word	0x40000400
 800af08:	40000800 	.word	0x40000800
 800af0c:	40014000 	.word	0x40014000

0800af10 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800af10:	b480      	push	{r7}
 800af12:	b085      	sub	sp, #20
 800af14:	af00      	add	r7, sp, #0
 800af16:	6078      	str	r0, [r7, #4]
 800af18:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800af1a:	2300      	movs	r3, #0
 800af1c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));
  assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800af1e:	687b      	ldr	r3, [r7, #4]
 800af20:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800af24:	2b01      	cmp	r3, #1
 800af26:	d101      	bne.n	800af2c <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800af28:	2302      	movs	r3, #2
 800af2a:	e073      	b.n	800b014 <HAL_TIMEx_ConfigBreakDeadTime+0x104>
 800af2c:	687b      	ldr	r3, [r7, #4]
 800af2e:	2201      	movs	r2, #1
 800af30:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800af34:	68fb      	ldr	r3, [r7, #12]
 800af36:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 800af3a:	683b      	ldr	r3, [r7, #0]
 800af3c:	68db      	ldr	r3, [r3, #12]
 800af3e:	4313      	orrs	r3, r2
 800af40:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800af42:	68fb      	ldr	r3, [r7, #12]
 800af44:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800af48:	683b      	ldr	r3, [r7, #0]
 800af4a:	689b      	ldr	r3, [r3, #8]
 800af4c:	4313      	orrs	r3, r2
 800af4e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800af50:	68fb      	ldr	r3, [r7, #12]
 800af52:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 800af56:	683b      	ldr	r3, [r7, #0]
 800af58:	685b      	ldr	r3, [r3, #4]
 800af5a:	4313      	orrs	r3, r2
 800af5c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800af5e:	68fb      	ldr	r3, [r7, #12]
 800af60:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 800af64:	683b      	ldr	r3, [r7, #0]
 800af66:	681b      	ldr	r3, [r3, #0]
 800af68:	4313      	orrs	r3, r2
 800af6a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800af6c:	68fb      	ldr	r3, [r7, #12]
 800af6e:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800af72:	683b      	ldr	r3, [r7, #0]
 800af74:	691b      	ldr	r3, [r3, #16]
 800af76:	4313      	orrs	r3, r2
 800af78:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800af7a:	68fb      	ldr	r3, [r7, #12]
 800af7c:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 800af80:	683b      	ldr	r3, [r7, #0]
 800af82:	695b      	ldr	r3, [r3, #20]
 800af84:	4313      	orrs	r3, r2
 800af86:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800af88:	68fb      	ldr	r3, [r7, #12]
 800af8a:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 800af8e:	683b      	ldr	r3, [r7, #0]
 800af90:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800af92:	4313      	orrs	r3, r2
 800af94:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 800af96:	68fb      	ldr	r3, [r7, #12]
 800af98:	f423 2270 	bic.w	r2, r3, #983040	@ 0xf0000
 800af9c:	683b      	ldr	r3, [r7, #0]
 800af9e:	699b      	ldr	r3, [r3, #24]
 800afa0:	041b      	lsls	r3, r3, #16
 800afa2:	4313      	orrs	r3, r2
 800afa4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 800afa6:	68fb      	ldr	r3, [r7, #12]
 800afa8:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 800afac:	683b      	ldr	r3, [r7, #0]
 800afae:	69db      	ldr	r3, [r3, #28]
 800afb0:	4313      	orrs	r3, r2
 800afb2:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 800afb4:	687b      	ldr	r3, [r7, #4]
 800afb6:	681b      	ldr	r3, [r3, #0]
 800afb8:	4a19      	ldr	r2, [pc, #100]	@ (800b020 <HAL_TIMEx_ConfigBreakDeadTime+0x110>)
 800afba:	4293      	cmp	r3, r2
 800afbc:	d004      	beq.n	800afc8 <HAL_TIMEx_ConfigBreakDeadTime+0xb8>
 800afbe:	687b      	ldr	r3, [r7, #4]
 800afc0:	681b      	ldr	r3, [r3, #0]
 800afc2:	4a18      	ldr	r2, [pc, #96]	@ (800b024 <HAL_TIMEx_ConfigBreakDeadTime+0x114>)
 800afc4:	4293      	cmp	r3, r2
 800afc6:	d11c      	bne.n	800b002 <HAL_TIMEx_ConfigBreakDeadTime+0xf2>
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));
    assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 800afc8:	68fb      	ldr	r3, [r7, #12]
 800afca:	f423 0270 	bic.w	r2, r3, #15728640	@ 0xf00000
 800afce:	683b      	ldr	r3, [r7, #0]
 800afd0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800afd2:	051b      	lsls	r3, r3, #20
 800afd4:	4313      	orrs	r3, r2
 800afd6:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 800afd8:	68fb      	ldr	r3, [r7, #12]
 800afda:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 800afde:	683b      	ldr	r3, [r7, #0]
 800afe0:	6a1b      	ldr	r3, [r3, #32]
 800afe2:	4313      	orrs	r3, r2
 800afe4:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 800afe6:	68fb      	ldr	r3, [r7, #12]
 800afe8:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 800afec:	683b      	ldr	r3, [r7, #0]
 800afee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800aff0:	4313      	orrs	r3, r2
 800aff2:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 800aff4:	68fb      	ldr	r3, [r7, #12]
 800aff6:	f023 5200 	bic.w	r2, r3, #536870912	@ 0x20000000
 800affa:	683b      	ldr	r3, [r7, #0]
 800affc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800affe:	4313      	orrs	r3, r2
 800b000:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800b002:	687b      	ldr	r3, [r7, #4]
 800b004:	681b      	ldr	r3, [r3, #0]
 800b006:	68fa      	ldr	r2, [r7, #12]
 800b008:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 800b00a:	687b      	ldr	r3, [r7, #4]
 800b00c:	2200      	movs	r2, #0
 800b00e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800b012:	2300      	movs	r3, #0
}
 800b014:	4618      	mov	r0, r3
 800b016:	3714      	adds	r7, #20
 800b018:	46bd      	mov	sp, r7
 800b01a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b01e:	4770      	bx	lr
 800b020:	40012c00 	.word	0x40012c00
 800b024:	40013400 	.word	0x40013400

0800b028 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800b028:	b480      	push	{r7}
 800b02a:	b083      	sub	sp, #12
 800b02c:	af00      	add	r7, sp, #0
 800b02e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800b030:	bf00      	nop
 800b032:	370c      	adds	r7, #12
 800b034:	46bd      	mov	sp, r7
 800b036:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b03a:	4770      	bx	lr

0800b03c <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800b03c:	b480      	push	{r7}
 800b03e:	b083      	sub	sp, #12
 800b040:	af00      	add	r7, sp, #0
 800b042:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800b044:	bf00      	nop
 800b046:	370c      	adds	r7, #12
 800b048:	46bd      	mov	sp, r7
 800b04a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b04e:	4770      	bx	lr

0800b050 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800b050:	b480      	push	{r7}
 800b052:	b083      	sub	sp, #12
 800b054:	af00      	add	r7, sp, #0
 800b056:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800b058:	bf00      	nop
 800b05a:	370c      	adds	r7, #12
 800b05c:	46bd      	mov	sp, r7
 800b05e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b062:	4770      	bx	lr

0800b064 <HAL_TIMEx_EncoderIndexCallback>:
  * @brief  Encoder index callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_EncoderIndexCallback(TIM_HandleTypeDef *htim)
{
 800b064:	b480      	push	{r7}
 800b066:	b083      	sub	sp, #12
 800b068:	af00      	add	r7, sp, #0
 800b06a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_EncoderIndexCallback could be implemented in the user file
   */
}
 800b06c:	bf00      	nop
 800b06e:	370c      	adds	r7, #12
 800b070:	46bd      	mov	sp, r7
 800b072:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b076:	4770      	bx	lr

0800b078 <HAL_TIMEx_DirectionChangeCallback>:
  * @brief  Direction change callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_DirectionChangeCallback(TIM_HandleTypeDef *htim)
{
 800b078:	b480      	push	{r7}
 800b07a:	b083      	sub	sp, #12
 800b07c:	af00      	add	r7, sp, #0
 800b07e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_DirectionChangeCallback could be implemented in the user file
   */
}
 800b080:	bf00      	nop
 800b082:	370c      	adds	r7, #12
 800b084:	46bd      	mov	sp, r7
 800b086:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b08a:	4770      	bx	lr

0800b08c <HAL_TIMEx_IndexErrorCallback>:
  * @brief  Index error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_IndexErrorCallback(TIM_HandleTypeDef *htim)
{
 800b08c:	b480      	push	{r7}
 800b08e:	b083      	sub	sp, #12
 800b090:	af00      	add	r7, sp, #0
 800b092:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_IndexErrorCallback could be implemented in the user file
   */
}
 800b094:	bf00      	nop
 800b096:	370c      	adds	r7, #12
 800b098:	46bd      	mov	sp, r7
 800b09a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b09e:	4770      	bx	lr

0800b0a0 <HAL_TIMEx_TransitionErrorCallback>:
  * @brief  Transition error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_TransitionErrorCallback(TIM_HandleTypeDef *htim)
{
 800b0a0:	b480      	push	{r7}
 800b0a2:	b083      	sub	sp, #12
 800b0a4:	af00      	add	r7, sp, #0
 800b0a6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_TransitionErrorCallback could be implemented in the user file
   */
}
 800b0a8:	bf00      	nop
 800b0aa:	370c      	adds	r7, #12
 800b0ac:	46bd      	mov	sp, r7
 800b0ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b0b2:	4770      	bx	lr

0800b0b4 <TIM_CCxNChannelCmd>:
  * @param  ChannelNState specifies the TIM Channel CCxNE bit new state.
  *          This parameter can be: TIM_CCxN_ENABLE or TIM_CCxN_Disable.
  * @retval None
  */
static void TIM_CCxNChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelNState)
{
 800b0b4:	b480      	push	{r7}
 800b0b6:	b087      	sub	sp, #28
 800b0b8:	af00      	add	r7, sp, #0
 800b0ba:	60f8      	str	r0, [r7, #12]
 800b0bc:	60b9      	str	r1, [r7, #8]
 800b0be:	607a      	str	r2, [r7, #4]
  uint32_t tmp;

  tmp = TIM_CCER_CC1NE << (Channel & 0xFU); /* 0xFU = 15 bits max shift */
 800b0c0:	68bb      	ldr	r3, [r7, #8]
 800b0c2:	f003 030f 	and.w	r3, r3, #15
 800b0c6:	2204      	movs	r2, #4
 800b0c8:	fa02 f303 	lsl.w	r3, r2, r3
 800b0cc:	617b      	str	r3, [r7, #20]

  /* Reset the CCxNE Bit */
  TIMx->CCER &=  ~tmp;
 800b0ce:	68fb      	ldr	r3, [r7, #12]
 800b0d0:	6a1a      	ldr	r2, [r3, #32]
 800b0d2:	697b      	ldr	r3, [r7, #20]
 800b0d4:	43db      	mvns	r3, r3
 800b0d6:	401a      	ands	r2, r3
 800b0d8:	68fb      	ldr	r3, [r7, #12]
 800b0da:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxNE Bit */
  TIMx->CCER |= (uint32_t)(ChannelNState << (Channel & 0xFU)); /* 0xFU = 15 bits max shift */
 800b0dc:	68fb      	ldr	r3, [r7, #12]
 800b0de:	6a1a      	ldr	r2, [r3, #32]
 800b0e0:	68bb      	ldr	r3, [r7, #8]
 800b0e2:	f003 030f 	and.w	r3, r3, #15
 800b0e6:	6879      	ldr	r1, [r7, #4]
 800b0e8:	fa01 f303 	lsl.w	r3, r1, r3
 800b0ec:	431a      	orrs	r2, r3
 800b0ee:	68fb      	ldr	r3, [r7, #12]
 800b0f0:	621a      	str	r2, [r3, #32]
}
 800b0f2:	bf00      	nop
 800b0f4:	371c      	adds	r7, #28
 800b0f6:	46bd      	mov	sp, r7
 800b0f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b0fc:	4770      	bx	lr

0800b0fe <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800b0fe:	b580      	push	{r7, lr}
 800b100:	b082      	sub	sp, #8
 800b102:	af00      	add	r7, sp, #0
 800b104:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800b106:	687b      	ldr	r3, [r7, #4]
 800b108:	2b00      	cmp	r3, #0
 800b10a:	d101      	bne.n	800b110 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800b10c:	2301      	movs	r3, #1
 800b10e:	e042      	b.n	800b196 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800b110:	687b      	ldr	r3, [r7, #4]
 800b112:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800b116:	2b00      	cmp	r3, #0
 800b118:	d106      	bne.n	800b128 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800b11a:	687b      	ldr	r3, [r7, #4]
 800b11c:	2200      	movs	r2, #0
 800b11e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800b122:	6878      	ldr	r0, [r7, #4]
 800b124:	f7f7 fc28 	bl	8002978 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800b128:	687b      	ldr	r3, [r7, #4]
 800b12a:	2224      	movs	r2, #36	@ 0x24
 800b12c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 800b130:	687b      	ldr	r3, [r7, #4]
 800b132:	681b      	ldr	r3, [r3, #0]
 800b134:	681a      	ldr	r2, [r3, #0]
 800b136:	687b      	ldr	r3, [r7, #4]
 800b138:	681b      	ldr	r3, [r3, #0]
 800b13a:	f022 0201 	bic.w	r2, r2, #1
 800b13e:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800b140:	687b      	ldr	r3, [r7, #4]
 800b142:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b144:	2b00      	cmp	r3, #0
 800b146:	d002      	beq.n	800b14e <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 800b148:	6878      	ldr	r0, [r7, #4]
 800b14a:	f000 fed7 	bl	800befc <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800b14e:	6878      	ldr	r0, [r7, #4]
 800b150:	f000 fc08 	bl	800b964 <UART_SetConfig>
 800b154:	4603      	mov	r3, r0
 800b156:	2b01      	cmp	r3, #1
 800b158:	d101      	bne.n	800b15e <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 800b15a:	2301      	movs	r3, #1
 800b15c:	e01b      	b.n	800b196 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800b15e:	687b      	ldr	r3, [r7, #4]
 800b160:	681b      	ldr	r3, [r3, #0]
 800b162:	685a      	ldr	r2, [r3, #4]
 800b164:	687b      	ldr	r3, [r7, #4]
 800b166:	681b      	ldr	r3, [r3, #0]
 800b168:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800b16c:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800b16e:	687b      	ldr	r3, [r7, #4]
 800b170:	681b      	ldr	r3, [r3, #0]
 800b172:	689a      	ldr	r2, [r3, #8]
 800b174:	687b      	ldr	r3, [r7, #4]
 800b176:	681b      	ldr	r3, [r3, #0]
 800b178:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800b17c:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800b17e:	687b      	ldr	r3, [r7, #4]
 800b180:	681b      	ldr	r3, [r3, #0]
 800b182:	681a      	ldr	r2, [r3, #0]
 800b184:	687b      	ldr	r3, [r7, #4]
 800b186:	681b      	ldr	r3, [r3, #0]
 800b188:	f042 0201 	orr.w	r2, r2, #1
 800b18c:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800b18e:	6878      	ldr	r0, [r7, #4]
 800b190:	f000 ff56 	bl	800c040 <UART_CheckIdleState>
 800b194:	4603      	mov	r3, r0
}
 800b196:	4618      	mov	r0, r3
 800b198:	3708      	adds	r7, #8
 800b19a:	46bd      	mov	sp, r7
 800b19c:	bd80      	pop	{r7, pc}
	...

0800b1a0 <HAL_UART_Transmit_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 800b1a0:	b580      	push	{r7, lr}
 800b1a2:	b08a      	sub	sp, #40	@ 0x28
 800b1a4:	af00      	add	r7, sp, #0
 800b1a6:	60f8      	str	r0, [r7, #12]
 800b1a8:	60b9      	str	r1, [r7, #8]
 800b1aa:	4613      	mov	r3, r2
 800b1ac:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800b1ae:	68fb      	ldr	r3, [r7, #12]
 800b1b0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800b1b4:	2b20      	cmp	r3, #32
 800b1b6:	d167      	bne.n	800b288 <HAL_UART_Transmit_DMA+0xe8>
  {
    if ((pData == NULL) || (Size == 0U))
 800b1b8:	68bb      	ldr	r3, [r7, #8]
 800b1ba:	2b00      	cmp	r3, #0
 800b1bc:	d002      	beq.n	800b1c4 <HAL_UART_Transmit_DMA+0x24>
 800b1be:	88fb      	ldrh	r3, [r7, #6]
 800b1c0:	2b00      	cmp	r3, #0
 800b1c2:	d101      	bne.n	800b1c8 <HAL_UART_Transmit_DMA+0x28>
    {
      return HAL_ERROR;
 800b1c4:	2301      	movs	r3, #1
 800b1c6:	e060      	b.n	800b28a <HAL_UART_Transmit_DMA+0xea>
    }

    huart->pTxBuffPtr  = pData;
 800b1c8:	68fb      	ldr	r3, [r7, #12]
 800b1ca:	68ba      	ldr	r2, [r7, #8]
 800b1cc:	651a      	str	r2, [r3, #80]	@ 0x50
    huart->TxXferSize  = Size;
 800b1ce:	68fb      	ldr	r3, [r7, #12]
 800b1d0:	88fa      	ldrh	r2, [r7, #6]
 800b1d2:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 800b1d6:	68fb      	ldr	r3, [r7, #12]
 800b1d8:	88fa      	ldrh	r2, [r7, #6]
 800b1da:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b1de:	68fb      	ldr	r3, [r7, #12]
 800b1e0:	2200      	movs	r2, #0
 800b1e2:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800b1e6:	68fb      	ldr	r3, [r7, #12]
 800b1e8:	2221      	movs	r2, #33	@ 0x21
 800b1ea:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    if (huart->hdmatx != NULL)
 800b1ee:	68fb      	ldr	r3, [r7, #12]
 800b1f0:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800b1f2:	2b00      	cmp	r3, #0
 800b1f4:	d028      	beq.n	800b248 <HAL_UART_Transmit_DMA+0xa8>
    {
      /* Set the UART DMA transfer complete callback */
      huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 800b1f6:	68fb      	ldr	r3, [r7, #12]
 800b1f8:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800b1fa:	4a26      	ldr	r2, [pc, #152]	@ (800b294 <HAL_UART_Transmit_DMA+0xf4>)
 800b1fc:	62da      	str	r2, [r3, #44]	@ 0x2c

      /* Set the UART DMA Half transfer complete callback */
      huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 800b1fe:	68fb      	ldr	r3, [r7, #12]
 800b200:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800b202:	4a25      	ldr	r2, [pc, #148]	@ (800b298 <HAL_UART_Transmit_DMA+0xf8>)
 800b204:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Set the DMA error callback */
      huart->hdmatx->XferErrorCallback = UART_DMAError;
 800b206:	68fb      	ldr	r3, [r7, #12]
 800b208:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800b20a:	4a24      	ldr	r2, [pc, #144]	@ (800b29c <HAL_UART_Transmit_DMA+0xfc>)
 800b20c:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Set the DMA abort callback */
      huart->hdmatx->XferAbortCallback = NULL;
 800b20e:	68fb      	ldr	r3, [r7, #12]
 800b210:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800b212:	2200      	movs	r2, #0
 800b214:	639a      	str	r2, [r3, #56]	@ 0x38

      /* Enable the UART transmit DMA channel */
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 800b216:	68fb      	ldr	r3, [r7, #12]
 800b218:	6fd8      	ldr	r0, [r3, #124]	@ 0x7c
 800b21a:	68fb      	ldr	r3, [r7, #12]
 800b21c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800b21e:	4619      	mov	r1, r3
 800b220:	68fb      	ldr	r3, [r7, #12]
 800b222:	681b      	ldr	r3, [r3, #0]
 800b224:	3328      	adds	r3, #40	@ 0x28
 800b226:	461a      	mov	r2, r3
 800b228:	88fb      	ldrh	r3, [r7, #6]
 800b22a:	f7fc f9eb 	bl	8007604 <HAL_DMA_Start_IT>
 800b22e:	4603      	mov	r3, r0
 800b230:	2b00      	cmp	r3, #0
 800b232:	d009      	beq.n	800b248 <HAL_UART_Transmit_DMA+0xa8>
      {
        /* Set error code to DMA */
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 800b234:	68fb      	ldr	r3, [r7, #12]
 800b236:	2210      	movs	r2, #16
 800b238:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

        /* Restore huart->gState to ready */
        huart->gState = HAL_UART_STATE_READY;
 800b23c:	68fb      	ldr	r3, [r7, #12]
 800b23e:	2220      	movs	r2, #32
 800b240:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_ERROR;
 800b244:	2301      	movs	r3, #1
 800b246:	e020      	b.n	800b28a <HAL_UART_Transmit_DMA+0xea>
      }
    }
    /* Clear the TC flag in the ICR register */
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 800b248:	68fb      	ldr	r3, [r7, #12]
 800b24a:	681b      	ldr	r3, [r3, #0]
 800b24c:	2240      	movs	r2, #64	@ 0x40
 800b24e:	621a      	str	r2, [r3, #32]

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
    in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800b250:	68fb      	ldr	r3, [r7, #12]
 800b252:	681b      	ldr	r3, [r3, #0]
 800b254:	3308      	adds	r3, #8
 800b256:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b258:	697b      	ldr	r3, [r7, #20]
 800b25a:	e853 3f00 	ldrex	r3, [r3]
 800b25e:	613b      	str	r3, [r7, #16]
   return(result);
 800b260:	693b      	ldr	r3, [r7, #16]
 800b262:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800b266:	627b      	str	r3, [r7, #36]	@ 0x24
 800b268:	68fb      	ldr	r3, [r7, #12]
 800b26a:	681b      	ldr	r3, [r3, #0]
 800b26c:	3308      	adds	r3, #8
 800b26e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800b270:	623a      	str	r2, [r7, #32]
 800b272:	61fb      	str	r3, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b274:	69f9      	ldr	r1, [r7, #28]
 800b276:	6a3a      	ldr	r2, [r7, #32]
 800b278:	e841 2300 	strex	r3, r2, [r1]
 800b27c:	61bb      	str	r3, [r7, #24]
   return(result);
 800b27e:	69bb      	ldr	r3, [r7, #24]
 800b280:	2b00      	cmp	r3, #0
 800b282:	d1e5      	bne.n	800b250 <HAL_UART_Transmit_DMA+0xb0>

    return HAL_OK;
 800b284:	2300      	movs	r3, #0
 800b286:	e000      	b.n	800b28a <HAL_UART_Transmit_DMA+0xea>
  }
  else
  {
    return HAL_BUSY;
 800b288:	2302      	movs	r3, #2
  }
}
 800b28a:	4618      	mov	r0, r3
 800b28c:	3728      	adds	r7, #40	@ 0x28
 800b28e:	46bd      	mov	sp, r7
 800b290:	bd80      	pop	{r7, pc}
 800b292:	bf00      	nop
 800b294:	0800c3bd 	.word	0x0800c3bd
 800b298:	0800c457 	.word	0x0800c457
 800b29c:	0800c473 	.word	0x0800c473

0800b2a0 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800b2a0:	b580      	push	{r7, lr}
 800b2a2:	b0ba      	sub	sp, #232	@ 0xe8
 800b2a4:	af00      	add	r7, sp, #0
 800b2a6:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800b2a8:	687b      	ldr	r3, [r7, #4]
 800b2aa:	681b      	ldr	r3, [r3, #0]
 800b2ac:	69db      	ldr	r3, [r3, #28]
 800b2ae:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800b2b2:	687b      	ldr	r3, [r7, #4]
 800b2b4:	681b      	ldr	r3, [r3, #0]
 800b2b6:	681b      	ldr	r3, [r3, #0]
 800b2b8:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800b2bc:	687b      	ldr	r3, [r7, #4]
 800b2be:	681b      	ldr	r3, [r3, #0]
 800b2c0:	689b      	ldr	r3, [r3, #8]
 800b2c2:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800b2c6:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 800b2ca:	f640 030f 	movw	r3, #2063	@ 0x80f
 800b2ce:	4013      	ands	r3, r2
 800b2d0:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 800b2d4:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800b2d8:	2b00      	cmp	r3, #0
 800b2da:	d11b      	bne.n	800b314 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800b2dc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800b2e0:	f003 0320 	and.w	r3, r3, #32
 800b2e4:	2b00      	cmp	r3, #0
 800b2e6:	d015      	beq.n	800b314 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800b2e8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800b2ec:	f003 0320 	and.w	r3, r3, #32
 800b2f0:	2b00      	cmp	r3, #0
 800b2f2:	d105      	bne.n	800b300 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800b2f4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800b2f8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800b2fc:	2b00      	cmp	r3, #0
 800b2fe:	d009      	beq.n	800b314 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 800b300:	687b      	ldr	r3, [r7, #4]
 800b302:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800b304:	2b00      	cmp	r3, #0
 800b306:	f000 8300 	beq.w	800b90a <HAL_UART_IRQHandler+0x66a>
      {
        huart->RxISR(huart);
 800b30a:	687b      	ldr	r3, [r7, #4]
 800b30c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800b30e:	6878      	ldr	r0, [r7, #4]
 800b310:	4798      	blx	r3
      }
      return;
 800b312:	e2fa      	b.n	800b90a <HAL_UART_IRQHandler+0x66a>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 800b314:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800b318:	2b00      	cmp	r3, #0
 800b31a:	f000 8123 	beq.w	800b564 <HAL_UART_IRQHandler+0x2c4>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 800b31e:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 800b322:	4b8d      	ldr	r3, [pc, #564]	@ (800b558 <HAL_UART_IRQHandler+0x2b8>)
 800b324:	4013      	ands	r3, r2
 800b326:	2b00      	cmp	r3, #0
 800b328:	d106      	bne.n	800b338 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 800b32a:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 800b32e:	4b8b      	ldr	r3, [pc, #556]	@ (800b55c <HAL_UART_IRQHandler+0x2bc>)
 800b330:	4013      	ands	r3, r2
 800b332:	2b00      	cmp	r3, #0
 800b334:	f000 8116 	beq.w	800b564 <HAL_UART_IRQHandler+0x2c4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800b338:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800b33c:	f003 0301 	and.w	r3, r3, #1
 800b340:	2b00      	cmp	r3, #0
 800b342:	d011      	beq.n	800b368 <HAL_UART_IRQHandler+0xc8>
 800b344:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800b348:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800b34c:	2b00      	cmp	r3, #0
 800b34e:	d00b      	beq.n	800b368 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800b350:	687b      	ldr	r3, [r7, #4]
 800b352:	681b      	ldr	r3, [r3, #0]
 800b354:	2201      	movs	r2, #1
 800b356:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800b358:	687b      	ldr	r3, [r7, #4]
 800b35a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800b35e:	f043 0201 	orr.w	r2, r3, #1
 800b362:	687b      	ldr	r3, [r7, #4]
 800b364:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800b368:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800b36c:	f003 0302 	and.w	r3, r3, #2
 800b370:	2b00      	cmp	r3, #0
 800b372:	d011      	beq.n	800b398 <HAL_UART_IRQHandler+0xf8>
 800b374:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800b378:	f003 0301 	and.w	r3, r3, #1
 800b37c:	2b00      	cmp	r3, #0
 800b37e:	d00b      	beq.n	800b398 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800b380:	687b      	ldr	r3, [r7, #4]
 800b382:	681b      	ldr	r3, [r3, #0]
 800b384:	2202      	movs	r2, #2
 800b386:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800b388:	687b      	ldr	r3, [r7, #4]
 800b38a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800b38e:	f043 0204 	orr.w	r2, r3, #4
 800b392:	687b      	ldr	r3, [r7, #4]
 800b394:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800b398:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800b39c:	f003 0304 	and.w	r3, r3, #4
 800b3a0:	2b00      	cmp	r3, #0
 800b3a2:	d011      	beq.n	800b3c8 <HAL_UART_IRQHandler+0x128>
 800b3a4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800b3a8:	f003 0301 	and.w	r3, r3, #1
 800b3ac:	2b00      	cmp	r3, #0
 800b3ae:	d00b      	beq.n	800b3c8 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800b3b0:	687b      	ldr	r3, [r7, #4]
 800b3b2:	681b      	ldr	r3, [r3, #0]
 800b3b4:	2204      	movs	r2, #4
 800b3b6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800b3b8:	687b      	ldr	r3, [r7, #4]
 800b3ba:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800b3be:	f043 0202 	orr.w	r2, r3, #2
 800b3c2:	687b      	ldr	r3, [r7, #4]
 800b3c4:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 800b3c8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800b3cc:	f003 0308 	and.w	r3, r3, #8
 800b3d0:	2b00      	cmp	r3, #0
 800b3d2:	d017      	beq.n	800b404 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800b3d4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800b3d8:	f003 0320 	and.w	r3, r3, #32
 800b3dc:	2b00      	cmp	r3, #0
 800b3de:	d105      	bne.n	800b3ec <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 800b3e0:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 800b3e4:	4b5c      	ldr	r3, [pc, #368]	@ (800b558 <HAL_UART_IRQHandler+0x2b8>)
 800b3e6:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800b3e8:	2b00      	cmp	r3, #0
 800b3ea:	d00b      	beq.n	800b404 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800b3ec:	687b      	ldr	r3, [r7, #4]
 800b3ee:	681b      	ldr	r3, [r3, #0]
 800b3f0:	2208      	movs	r2, #8
 800b3f2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800b3f4:	687b      	ldr	r3, [r7, #4]
 800b3f6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800b3fa:	f043 0208 	orr.w	r2, r3, #8
 800b3fe:	687b      	ldr	r3, [r7, #4]
 800b400:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800b404:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800b408:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800b40c:	2b00      	cmp	r3, #0
 800b40e:	d012      	beq.n	800b436 <HAL_UART_IRQHandler+0x196>
 800b410:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800b414:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 800b418:	2b00      	cmp	r3, #0
 800b41a:	d00c      	beq.n	800b436 <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800b41c:	687b      	ldr	r3, [r7, #4]
 800b41e:	681b      	ldr	r3, [r3, #0]
 800b420:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800b424:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800b426:	687b      	ldr	r3, [r7, #4]
 800b428:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800b42c:	f043 0220 	orr.w	r2, r3, #32
 800b430:	687b      	ldr	r3, [r7, #4]
 800b432:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800b436:	687b      	ldr	r3, [r7, #4]
 800b438:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800b43c:	2b00      	cmp	r3, #0
 800b43e:	f000 8266 	beq.w	800b90e <HAL_UART_IRQHandler+0x66e>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800b442:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800b446:	f003 0320 	and.w	r3, r3, #32
 800b44a:	2b00      	cmp	r3, #0
 800b44c:	d013      	beq.n	800b476 <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800b44e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800b452:	f003 0320 	and.w	r3, r3, #32
 800b456:	2b00      	cmp	r3, #0
 800b458:	d105      	bne.n	800b466 <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800b45a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800b45e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800b462:	2b00      	cmp	r3, #0
 800b464:	d007      	beq.n	800b476 <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 800b466:	687b      	ldr	r3, [r7, #4]
 800b468:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800b46a:	2b00      	cmp	r3, #0
 800b46c:	d003      	beq.n	800b476 <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 800b46e:	687b      	ldr	r3, [r7, #4]
 800b470:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800b472:	6878      	ldr	r0, [r7, #4]
 800b474:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800b476:	687b      	ldr	r3, [r7, #4]
 800b478:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800b47c:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800b480:	687b      	ldr	r3, [r7, #4]
 800b482:	681b      	ldr	r3, [r3, #0]
 800b484:	689b      	ldr	r3, [r3, #8]
 800b486:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800b48a:	2b40      	cmp	r3, #64	@ 0x40
 800b48c:	d005      	beq.n	800b49a <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800b48e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800b492:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800b496:	2b00      	cmp	r3, #0
 800b498:	d054      	beq.n	800b544 <HAL_UART_IRQHandler+0x2a4>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800b49a:	6878      	ldr	r0, [r7, #4]
 800b49c:	f000 ff28 	bl	800c2f0 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b4a0:	687b      	ldr	r3, [r7, #4]
 800b4a2:	681b      	ldr	r3, [r3, #0]
 800b4a4:	689b      	ldr	r3, [r3, #8]
 800b4a6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800b4aa:	2b40      	cmp	r3, #64	@ 0x40
 800b4ac:	d146      	bne.n	800b53c <HAL_UART_IRQHandler+0x29c>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800b4ae:	687b      	ldr	r3, [r7, #4]
 800b4b0:	681b      	ldr	r3, [r3, #0]
 800b4b2:	3308      	adds	r3, #8
 800b4b4:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b4b8:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800b4bc:	e853 3f00 	ldrex	r3, [r3]
 800b4c0:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 800b4c4:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800b4c8:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800b4cc:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800b4d0:	687b      	ldr	r3, [r7, #4]
 800b4d2:	681b      	ldr	r3, [r3, #0]
 800b4d4:	3308      	adds	r3, #8
 800b4d6:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 800b4da:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 800b4de:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b4e2:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 800b4e6:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 800b4ea:	e841 2300 	strex	r3, r2, [r1]
 800b4ee:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 800b4f2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800b4f6:	2b00      	cmp	r3, #0
 800b4f8:	d1d9      	bne.n	800b4ae <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800b4fa:	687b      	ldr	r3, [r7, #4]
 800b4fc:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800b500:	2b00      	cmp	r3, #0
 800b502:	d017      	beq.n	800b534 <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800b504:	687b      	ldr	r3, [r7, #4]
 800b506:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800b50a:	4a15      	ldr	r2, [pc, #84]	@ (800b560 <HAL_UART_IRQHandler+0x2c0>)
 800b50c:	639a      	str	r2, [r3, #56]	@ 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800b50e:	687b      	ldr	r3, [r7, #4]
 800b510:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800b514:	4618      	mov	r0, r3
 800b516:	f7fc f949 	bl	80077ac <HAL_DMA_Abort_IT>
 800b51a:	4603      	mov	r3, r0
 800b51c:	2b00      	cmp	r3, #0
 800b51e:	d019      	beq.n	800b554 <HAL_UART_IRQHandler+0x2b4>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800b520:	687b      	ldr	r3, [r7, #4]
 800b522:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800b526:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b528:	687a      	ldr	r2, [r7, #4]
 800b52a:	f8d2 2080 	ldr.w	r2, [r2, #128]	@ 0x80
 800b52e:	4610      	mov	r0, r2
 800b530:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b532:	e00f      	b.n	800b554 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800b534:	6878      	ldr	r0, [r7, #4]
 800b536:	f000 f9ff 	bl	800b938 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b53a:	e00b      	b.n	800b554 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800b53c:	6878      	ldr	r0, [r7, #4]
 800b53e:	f000 f9fb 	bl	800b938 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b542:	e007      	b.n	800b554 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800b544:	6878      	ldr	r0, [r7, #4]
 800b546:	f000 f9f7 	bl	800b938 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b54a:	687b      	ldr	r3, [r7, #4]
 800b54c:	2200      	movs	r2, #0
 800b54e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
      }
    }
    return;
 800b552:	e1dc      	b.n	800b90e <HAL_UART_IRQHandler+0x66e>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b554:	bf00      	nop
    return;
 800b556:	e1da      	b.n	800b90e <HAL_UART_IRQHandler+0x66e>
 800b558:	10000001 	.word	0x10000001
 800b55c:	04000120 	.word	0x04000120
 800b560:	0800c4f3 	.word	0x0800c4f3

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800b564:	687b      	ldr	r3, [r7, #4]
 800b566:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800b568:	2b01      	cmp	r3, #1
 800b56a:	f040 8170 	bne.w	800b84e <HAL_UART_IRQHandler+0x5ae>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800b56e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800b572:	f003 0310 	and.w	r3, r3, #16
 800b576:	2b00      	cmp	r3, #0
 800b578:	f000 8169 	beq.w	800b84e <HAL_UART_IRQHandler+0x5ae>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 800b57c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800b580:	f003 0310 	and.w	r3, r3, #16
 800b584:	2b00      	cmp	r3, #0
 800b586:	f000 8162 	beq.w	800b84e <HAL_UART_IRQHandler+0x5ae>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800b58a:	687b      	ldr	r3, [r7, #4]
 800b58c:	681b      	ldr	r3, [r3, #0]
 800b58e:	2210      	movs	r2, #16
 800b590:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b592:	687b      	ldr	r3, [r7, #4]
 800b594:	681b      	ldr	r3, [r3, #0]
 800b596:	689b      	ldr	r3, [r3, #8]
 800b598:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800b59c:	2b40      	cmp	r3, #64	@ 0x40
 800b59e:	f040 80d8 	bne.w	800b752 <HAL_UART_IRQHandler+0x4b2>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800b5a2:	687b      	ldr	r3, [r7, #4]
 800b5a4:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800b5a8:	681b      	ldr	r3, [r3, #0]
 800b5aa:	685b      	ldr	r3, [r3, #4]
 800b5ac:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 800b5b0:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 800b5b4:	2b00      	cmp	r3, #0
 800b5b6:	f000 80af 	beq.w	800b718 <HAL_UART_IRQHandler+0x478>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800b5ba:	687b      	ldr	r3, [r7, #4]
 800b5bc:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800b5c0:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800b5c4:	429a      	cmp	r2, r3
 800b5c6:	f080 80a7 	bcs.w	800b718 <HAL_UART_IRQHandler+0x478>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800b5ca:	687b      	ldr	r3, [r7, #4]
 800b5cc:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800b5d0:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 800b5d4:	687b      	ldr	r3, [r7, #4]
 800b5d6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800b5da:	681b      	ldr	r3, [r3, #0]
 800b5dc:	681b      	ldr	r3, [r3, #0]
 800b5de:	f003 0320 	and.w	r3, r3, #32
 800b5e2:	2b00      	cmp	r3, #0
 800b5e4:	f040 8087 	bne.w	800b6f6 <HAL_UART_IRQHandler+0x456>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800b5e8:	687b      	ldr	r3, [r7, #4]
 800b5ea:	681b      	ldr	r3, [r3, #0]
 800b5ec:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b5f0:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800b5f4:	e853 3f00 	ldrex	r3, [r3]
 800b5f8:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 800b5fc:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800b600:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800b604:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800b608:	687b      	ldr	r3, [r7, #4]
 800b60a:	681b      	ldr	r3, [r3, #0]
 800b60c:	461a      	mov	r2, r3
 800b60e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800b612:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800b616:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b61a:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 800b61e:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 800b622:	e841 2300 	strex	r3, r2, [r1]
 800b626:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 800b62a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800b62e:	2b00      	cmp	r3, #0
 800b630:	d1da      	bne.n	800b5e8 <HAL_UART_IRQHandler+0x348>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b632:	687b      	ldr	r3, [r7, #4]
 800b634:	681b      	ldr	r3, [r3, #0]
 800b636:	3308      	adds	r3, #8
 800b638:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b63a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800b63c:	e853 3f00 	ldrex	r3, [r3]
 800b640:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 800b642:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800b644:	f023 0301 	bic.w	r3, r3, #1
 800b648:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800b64c:	687b      	ldr	r3, [r7, #4]
 800b64e:	681b      	ldr	r3, [r3, #0]
 800b650:	3308      	adds	r3, #8
 800b652:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800b656:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 800b65a:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b65c:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 800b65e:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 800b662:	e841 2300 	strex	r3, r2, [r1]
 800b666:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 800b668:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800b66a:	2b00      	cmp	r3, #0
 800b66c:	d1e1      	bne.n	800b632 <HAL_UART_IRQHandler+0x392>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800b66e:	687b      	ldr	r3, [r7, #4]
 800b670:	681b      	ldr	r3, [r3, #0]
 800b672:	3308      	adds	r3, #8
 800b674:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b676:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800b678:	e853 3f00 	ldrex	r3, [r3]
 800b67c:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 800b67e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800b680:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800b684:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800b688:	687b      	ldr	r3, [r7, #4]
 800b68a:	681b      	ldr	r3, [r3, #0]
 800b68c:	3308      	adds	r3, #8
 800b68e:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 800b692:	66fa      	str	r2, [r7, #108]	@ 0x6c
 800b694:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b696:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 800b698:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800b69a:	e841 2300 	strex	r3, r2, [r1]
 800b69e:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 800b6a0:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800b6a2:	2b00      	cmp	r3, #0
 800b6a4:	d1e3      	bne.n	800b66e <HAL_UART_IRQHandler+0x3ce>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800b6a6:	687b      	ldr	r3, [r7, #4]
 800b6a8:	2220      	movs	r2, #32
 800b6aa:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b6ae:	687b      	ldr	r3, [r7, #4]
 800b6b0:	2200      	movs	r2, #0
 800b6b2:	66da      	str	r2, [r3, #108]	@ 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800b6b4:	687b      	ldr	r3, [r7, #4]
 800b6b6:	681b      	ldr	r3, [r3, #0]
 800b6b8:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b6ba:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800b6bc:	e853 3f00 	ldrex	r3, [r3]
 800b6c0:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800b6c2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800b6c4:	f023 0310 	bic.w	r3, r3, #16
 800b6c8:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800b6cc:	687b      	ldr	r3, [r7, #4]
 800b6ce:	681b      	ldr	r3, [r3, #0]
 800b6d0:	461a      	mov	r2, r3
 800b6d2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800b6d6:	65bb      	str	r3, [r7, #88]	@ 0x58
 800b6d8:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b6da:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800b6dc:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800b6de:	e841 2300 	strex	r3, r2, [r1]
 800b6e2:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800b6e4:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800b6e6:	2b00      	cmp	r3, #0
 800b6e8:	d1e4      	bne.n	800b6b4 <HAL_UART_IRQHandler+0x414>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800b6ea:	687b      	ldr	r3, [r7, #4]
 800b6ec:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800b6f0:	4618      	mov	r0, r3
 800b6f2:	f7fc f802 	bl	80076fa <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800b6f6:	687b      	ldr	r3, [r7, #4]
 800b6f8:	2202      	movs	r2, #2
 800b6fa:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800b6fc:	687b      	ldr	r3, [r7, #4]
 800b6fe:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 800b702:	687b      	ldr	r3, [r7, #4]
 800b704:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800b708:	b29b      	uxth	r3, r3
 800b70a:	1ad3      	subs	r3, r2, r3
 800b70c:	b29b      	uxth	r3, r3
 800b70e:	4619      	mov	r1, r3
 800b710:	6878      	ldr	r0, [r7, #4]
 800b712:	f000 f91b 	bl	800b94c <HAL_UARTEx_RxEventCallback>
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
          }
        }
      }
      return;
 800b716:	e0fc      	b.n	800b912 <HAL_UART_IRQHandler+0x672>
        if (nb_remaining_rx_data == huart->RxXferSize)
 800b718:	687b      	ldr	r3, [r7, #4]
 800b71a:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800b71e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800b722:	429a      	cmp	r2, r3
 800b724:	f040 80f5 	bne.w	800b912 <HAL_UART_IRQHandler+0x672>
          if (HAL_IS_BIT_SET(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 800b728:	687b      	ldr	r3, [r7, #4]
 800b72a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800b72e:	681b      	ldr	r3, [r3, #0]
 800b730:	681b      	ldr	r3, [r3, #0]
 800b732:	f003 0320 	and.w	r3, r3, #32
 800b736:	2b20      	cmp	r3, #32
 800b738:	f040 80eb 	bne.w	800b912 <HAL_UART_IRQHandler+0x672>
            huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800b73c:	687b      	ldr	r3, [r7, #4]
 800b73e:	2202      	movs	r2, #2
 800b740:	671a      	str	r2, [r3, #112]	@ 0x70
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800b742:	687b      	ldr	r3, [r7, #4]
 800b744:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800b748:	4619      	mov	r1, r3
 800b74a:	6878      	ldr	r0, [r7, #4]
 800b74c:	f000 f8fe 	bl	800b94c <HAL_UARTEx_RxEventCallback>
      return;
 800b750:	e0df      	b.n	800b912 <HAL_UART_IRQHandler+0x672>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800b752:	687b      	ldr	r3, [r7, #4]
 800b754:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 800b758:	687b      	ldr	r3, [r7, #4]
 800b75a:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800b75e:	b29b      	uxth	r3, r3
 800b760:	1ad3      	subs	r3, r2, r3
 800b762:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 800b766:	687b      	ldr	r3, [r7, #4]
 800b768:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800b76c:	b29b      	uxth	r3, r3
 800b76e:	2b00      	cmp	r3, #0
 800b770:	f000 80d1 	beq.w	800b916 <HAL_UART_IRQHandler+0x676>
          && (nb_rx_data > 0U))
 800b774:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800b778:	2b00      	cmp	r3, #0
 800b77a:	f000 80cc 	beq.w	800b916 <HAL_UART_IRQHandler+0x676>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800b77e:	687b      	ldr	r3, [r7, #4]
 800b780:	681b      	ldr	r3, [r3, #0]
 800b782:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b784:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b786:	e853 3f00 	ldrex	r3, [r3]
 800b78a:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800b78c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b78e:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800b792:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800b796:	687b      	ldr	r3, [r7, #4]
 800b798:	681b      	ldr	r3, [r3, #0]
 800b79a:	461a      	mov	r2, r3
 800b79c:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800b7a0:	647b      	str	r3, [r7, #68]	@ 0x44
 800b7a2:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b7a4:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800b7a6:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800b7a8:	e841 2300 	strex	r3, r2, [r1]
 800b7ac:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800b7ae:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b7b0:	2b00      	cmp	r3, #0
 800b7b2:	d1e4      	bne.n	800b77e <HAL_UART_IRQHandler+0x4de>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800b7b4:	687b      	ldr	r3, [r7, #4]
 800b7b6:	681b      	ldr	r3, [r3, #0]
 800b7b8:	3308      	adds	r3, #8
 800b7ba:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b7bc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b7be:	e853 3f00 	ldrex	r3, [r3]
 800b7c2:	623b      	str	r3, [r7, #32]
   return(result);
 800b7c4:	6a3b      	ldr	r3, [r7, #32]
 800b7c6:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800b7ca:	f023 0301 	bic.w	r3, r3, #1
 800b7ce:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800b7d2:	687b      	ldr	r3, [r7, #4]
 800b7d4:	681b      	ldr	r3, [r3, #0]
 800b7d6:	3308      	adds	r3, #8
 800b7d8:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 800b7dc:	633a      	str	r2, [r7, #48]	@ 0x30
 800b7de:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b7e0:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800b7e2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800b7e4:	e841 2300 	strex	r3, r2, [r1]
 800b7e8:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800b7ea:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b7ec:	2b00      	cmp	r3, #0
 800b7ee:	d1e1      	bne.n	800b7b4 <HAL_UART_IRQHandler+0x514>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800b7f0:	687b      	ldr	r3, [r7, #4]
 800b7f2:	2220      	movs	r2, #32
 800b7f4:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b7f8:	687b      	ldr	r3, [r7, #4]
 800b7fa:	2200      	movs	r2, #0
 800b7fc:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800b7fe:	687b      	ldr	r3, [r7, #4]
 800b800:	2200      	movs	r2, #0
 800b802:	675a      	str	r2, [r3, #116]	@ 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800b804:	687b      	ldr	r3, [r7, #4]
 800b806:	681b      	ldr	r3, [r3, #0]
 800b808:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b80a:	693b      	ldr	r3, [r7, #16]
 800b80c:	e853 3f00 	ldrex	r3, [r3]
 800b810:	60fb      	str	r3, [r7, #12]
   return(result);
 800b812:	68fb      	ldr	r3, [r7, #12]
 800b814:	f023 0310 	bic.w	r3, r3, #16
 800b818:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800b81c:	687b      	ldr	r3, [r7, #4]
 800b81e:	681b      	ldr	r3, [r3, #0]
 800b820:	461a      	mov	r2, r3
 800b822:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 800b826:	61fb      	str	r3, [r7, #28]
 800b828:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b82a:	69b9      	ldr	r1, [r7, #24]
 800b82c:	69fa      	ldr	r2, [r7, #28]
 800b82e:	e841 2300 	strex	r3, r2, [r1]
 800b832:	617b      	str	r3, [r7, #20]
   return(result);
 800b834:	697b      	ldr	r3, [r7, #20]
 800b836:	2b00      	cmp	r3, #0
 800b838:	d1e4      	bne.n	800b804 <HAL_UART_IRQHandler+0x564>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800b83a:	687b      	ldr	r3, [r7, #4]
 800b83c:	2202      	movs	r2, #2
 800b83e:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800b840:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800b844:	4619      	mov	r1, r3
 800b846:	6878      	ldr	r0, [r7, #4]
 800b848:	f000 f880 	bl	800b94c <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800b84c:	e063      	b.n	800b916 <HAL_UART_IRQHandler+0x676>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800b84e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800b852:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800b856:	2b00      	cmp	r3, #0
 800b858:	d00e      	beq.n	800b878 <HAL_UART_IRQHandler+0x5d8>
 800b85a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800b85e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800b862:	2b00      	cmp	r3, #0
 800b864:	d008      	beq.n	800b878 <HAL_UART_IRQHandler+0x5d8>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800b866:	687b      	ldr	r3, [r7, #4]
 800b868:	681b      	ldr	r3, [r3, #0]
 800b86a:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 800b86e:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 800b870:	6878      	ldr	r0, [r7, #4]
 800b872:	f000 fe7b 	bl	800c56c <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800b876:	e051      	b.n	800b91c <HAL_UART_IRQHandler+0x67c>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 800b878:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800b87c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800b880:	2b00      	cmp	r3, #0
 800b882:	d014      	beq.n	800b8ae <HAL_UART_IRQHandler+0x60e>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 800b884:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800b888:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800b88c:	2b00      	cmp	r3, #0
 800b88e:	d105      	bne.n	800b89c <HAL_UART_IRQHandler+0x5fc>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 800b890:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800b894:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800b898:	2b00      	cmp	r3, #0
 800b89a:	d008      	beq.n	800b8ae <HAL_UART_IRQHandler+0x60e>
  {
    if (huart->TxISR != NULL)
 800b89c:	687b      	ldr	r3, [r7, #4]
 800b89e:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800b8a0:	2b00      	cmp	r3, #0
 800b8a2:	d03a      	beq.n	800b91a <HAL_UART_IRQHandler+0x67a>
    {
      huart->TxISR(huart);
 800b8a4:	687b      	ldr	r3, [r7, #4]
 800b8a6:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800b8a8:	6878      	ldr	r0, [r7, #4]
 800b8aa:	4798      	blx	r3
    }
    return;
 800b8ac:	e035      	b.n	800b91a <HAL_UART_IRQHandler+0x67a>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800b8ae:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800b8b2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800b8b6:	2b00      	cmp	r3, #0
 800b8b8:	d009      	beq.n	800b8ce <HAL_UART_IRQHandler+0x62e>
 800b8ba:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800b8be:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800b8c2:	2b00      	cmp	r3, #0
 800b8c4:	d003      	beq.n	800b8ce <HAL_UART_IRQHandler+0x62e>
  {
    UART_EndTransmit_IT(huart);
 800b8c6:	6878      	ldr	r0, [r7, #4]
 800b8c8:	f000 fe25 	bl	800c516 <UART_EndTransmit_IT>
    return;
 800b8cc:	e026      	b.n	800b91c <HAL_UART_IRQHandler+0x67c>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 800b8ce:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800b8d2:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800b8d6:	2b00      	cmp	r3, #0
 800b8d8:	d009      	beq.n	800b8ee <HAL_UART_IRQHandler+0x64e>
 800b8da:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800b8de:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 800b8e2:	2b00      	cmp	r3, #0
 800b8e4:	d003      	beq.n	800b8ee <HAL_UART_IRQHandler+0x64e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 800b8e6:	6878      	ldr	r0, [r7, #4]
 800b8e8:	f000 fe54 	bl	800c594 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800b8ec:	e016      	b.n	800b91c <HAL_UART_IRQHandler+0x67c>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 800b8ee:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800b8f2:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800b8f6:	2b00      	cmp	r3, #0
 800b8f8:	d010      	beq.n	800b91c <HAL_UART_IRQHandler+0x67c>
 800b8fa:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800b8fe:	2b00      	cmp	r3, #0
 800b900:	da0c      	bge.n	800b91c <HAL_UART_IRQHandler+0x67c>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 800b902:	6878      	ldr	r0, [r7, #4]
 800b904:	f000 fe3c 	bl	800c580 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800b908:	e008      	b.n	800b91c <HAL_UART_IRQHandler+0x67c>
      return;
 800b90a:	bf00      	nop
 800b90c:	e006      	b.n	800b91c <HAL_UART_IRQHandler+0x67c>
    return;
 800b90e:	bf00      	nop
 800b910:	e004      	b.n	800b91c <HAL_UART_IRQHandler+0x67c>
      return;
 800b912:	bf00      	nop
 800b914:	e002      	b.n	800b91c <HAL_UART_IRQHandler+0x67c>
      return;
 800b916:	bf00      	nop
 800b918:	e000      	b.n	800b91c <HAL_UART_IRQHandler+0x67c>
    return;
 800b91a:	bf00      	nop
  }
}
 800b91c:	37e8      	adds	r7, #232	@ 0xe8
 800b91e:	46bd      	mov	sp, r7
 800b920:	bd80      	pop	{r7, pc}
 800b922:	bf00      	nop

0800b924 <HAL_UART_TxHalfCpltCallback>:
  * @brief  Tx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800b924:	b480      	push	{r7}
 800b926:	b083      	sub	sp, #12
 800b928:	af00      	add	r7, sp, #0
 800b92a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback can be implemented in the user file.
   */
}
 800b92c:	bf00      	nop
 800b92e:	370c      	adds	r7, #12
 800b930:	46bd      	mov	sp, r7
 800b932:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b936:	4770      	bx	lr

0800b938 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800b938:	b480      	push	{r7}
 800b93a:	b083      	sub	sp, #12
 800b93c:	af00      	add	r7, sp, #0
 800b93e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 800b940:	bf00      	nop
 800b942:	370c      	adds	r7, #12
 800b944:	46bd      	mov	sp, r7
 800b946:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b94a:	4770      	bx	lr

0800b94c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800b94c:	b480      	push	{r7}
 800b94e:	b083      	sub	sp, #12
 800b950:	af00      	add	r7, sp, #0
 800b952:	6078      	str	r0, [r7, #4]
 800b954:	460b      	mov	r3, r1
 800b956:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800b958:	bf00      	nop
 800b95a:	370c      	adds	r7, #12
 800b95c:	46bd      	mov	sp, r7
 800b95e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b962:	4770      	bx	lr

0800b964 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800b964:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800b968:	b08c      	sub	sp, #48	@ 0x30
 800b96a:	af00      	add	r7, sp, #0
 800b96c:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800b96e:	2300      	movs	r3, #0
 800b970:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800b974:	697b      	ldr	r3, [r7, #20]
 800b976:	689a      	ldr	r2, [r3, #8]
 800b978:	697b      	ldr	r3, [r7, #20]
 800b97a:	691b      	ldr	r3, [r3, #16]
 800b97c:	431a      	orrs	r2, r3
 800b97e:	697b      	ldr	r3, [r7, #20]
 800b980:	695b      	ldr	r3, [r3, #20]
 800b982:	431a      	orrs	r2, r3
 800b984:	697b      	ldr	r3, [r7, #20]
 800b986:	69db      	ldr	r3, [r3, #28]
 800b988:	4313      	orrs	r3, r2
 800b98a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800b98c:	697b      	ldr	r3, [r7, #20]
 800b98e:	681b      	ldr	r3, [r3, #0]
 800b990:	681a      	ldr	r2, [r3, #0]
 800b992:	4bab      	ldr	r3, [pc, #684]	@ (800bc40 <UART_SetConfig+0x2dc>)
 800b994:	4013      	ands	r3, r2
 800b996:	697a      	ldr	r2, [r7, #20]
 800b998:	6812      	ldr	r2, [r2, #0]
 800b99a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800b99c:	430b      	orrs	r3, r1
 800b99e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800b9a0:	697b      	ldr	r3, [r7, #20]
 800b9a2:	681b      	ldr	r3, [r3, #0]
 800b9a4:	685b      	ldr	r3, [r3, #4]
 800b9a6:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800b9aa:	697b      	ldr	r3, [r7, #20]
 800b9ac:	68da      	ldr	r2, [r3, #12]
 800b9ae:	697b      	ldr	r3, [r7, #20]
 800b9b0:	681b      	ldr	r3, [r3, #0]
 800b9b2:	430a      	orrs	r2, r1
 800b9b4:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800b9b6:	697b      	ldr	r3, [r7, #20]
 800b9b8:	699b      	ldr	r3, [r3, #24]
 800b9ba:	62fb      	str	r3, [r7, #44]	@ 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800b9bc:	697b      	ldr	r3, [r7, #20]
 800b9be:	681b      	ldr	r3, [r3, #0]
 800b9c0:	4aa0      	ldr	r2, [pc, #640]	@ (800bc44 <UART_SetConfig+0x2e0>)
 800b9c2:	4293      	cmp	r3, r2
 800b9c4:	d004      	beq.n	800b9d0 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800b9c6:	697b      	ldr	r3, [r7, #20]
 800b9c8:	6a1b      	ldr	r3, [r3, #32]
 800b9ca:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800b9cc:	4313      	orrs	r3, r2
 800b9ce:	62fb      	str	r3, [r7, #44]	@ 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800b9d0:	697b      	ldr	r3, [r7, #20]
 800b9d2:	681b      	ldr	r3, [r3, #0]
 800b9d4:	689b      	ldr	r3, [r3, #8]
 800b9d6:	f023 436e 	bic.w	r3, r3, #3992977408	@ 0xee000000
 800b9da:	f423 6330 	bic.w	r3, r3, #2816	@ 0xb00
 800b9de:	697a      	ldr	r2, [r7, #20]
 800b9e0:	6812      	ldr	r2, [r2, #0]
 800b9e2:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800b9e4:	430b      	orrs	r3, r1
 800b9e6:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800b9e8:	697b      	ldr	r3, [r7, #20]
 800b9ea:	681b      	ldr	r3, [r3, #0]
 800b9ec:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b9ee:	f023 010f 	bic.w	r1, r3, #15
 800b9f2:	697b      	ldr	r3, [r7, #20]
 800b9f4:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800b9f6:	697b      	ldr	r3, [r7, #20]
 800b9f8:	681b      	ldr	r3, [r3, #0]
 800b9fa:	430a      	orrs	r2, r1
 800b9fc:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800b9fe:	697b      	ldr	r3, [r7, #20]
 800ba00:	681b      	ldr	r3, [r3, #0]
 800ba02:	4a91      	ldr	r2, [pc, #580]	@ (800bc48 <UART_SetConfig+0x2e4>)
 800ba04:	4293      	cmp	r3, r2
 800ba06:	d125      	bne.n	800ba54 <UART_SetConfig+0xf0>
 800ba08:	4b90      	ldr	r3, [pc, #576]	@ (800bc4c <UART_SetConfig+0x2e8>)
 800ba0a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800ba0e:	f003 0303 	and.w	r3, r3, #3
 800ba12:	2b03      	cmp	r3, #3
 800ba14:	d81a      	bhi.n	800ba4c <UART_SetConfig+0xe8>
 800ba16:	a201      	add	r2, pc, #4	@ (adr r2, 800ba1c <UART_SetConfig+0xb8>)
 800ba18:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ba1c:	0800ba2d 	.word	0x0800ba2d
 800ba20:	0800ba3d 	.word	0x0800ba3d
 800ba24:	0800ba35 	.word	0x0800ba35
 800ba28:	0800ba45 	.word	0x0800ba45
 800ba2c:	2301      	movs	r3, #1
 800ba2e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800ba32:	e0d6      	b.n	800bbe2 <UART_SetConfig+0x27e>
 800ba34:	2302      	movs	r3, #2
 800ba36:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800ba3a:	e0d2      	b.n	800bbe2 <UART_SetConfig+0x27e>
 800ba3c:	2304      	movs	r3, #4
 800ba3e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800ba42:	e0ce      	b.n	800bbe2 <UART_SetConfig+0x27e>
 800ba44:	2308      	movs	r3, #8
 800ba46:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800ba4a:	e0ca      	b.n	800bbe2 <UART_SetConfig+0x27e>
 800ba4c:	2310      	movs	r3, #16
 800ba4e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800ba52:	e0c6      	b.n	800bbe2 <UART_SetConfig+0x27e>
 800ba54:	697b      	ldr	r3, [r7, #20]
 800ba56:	681b      	ldr	r3, [r3, #0]
 800ba58:	4a7d      	ldr	r2, [pc, #500]	@ (800bc50 <UART_SetConfig+0x2ec>)
 800ba5a:	4293      	cmp	r3, r2
 800ba5c:	d138      	bne.n	800bad0 <UART_SetConfig+0x16c>
 800ba5e:	4b7b      	ldr	r3, [pc, #492]	@ (800bc4c <UART_SetConfig+0x2e8>)
 800ba60:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800ba64:	f003 030c 	and.w	r3, r3, #12
 800ba68:	2b0c      	cmp	r3, #12
 800ba6a:	d82d      	bhi.n	800bac8 <UART_SetConfig+0x164>
 800ba6c:	a201      	add	r2, pc, #4	@ (adr r2, 800ba74 <UART_SetConfig+0x110>)
 800ba6e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ba72:	bf00      	nop
 800ba74:	0800baa9 	.word	0x0800baa9
 800ba78:	0800bac9 	.word	0x0800bac9
 800ba7c:	0800bac9 	.word	0x0800bac9
 800ba80:	0800bac9 	.word	0x0800bac9
 800ba84:	0800bab9 	.word	0x0800bab9
 800ba88:	0800bac9 	.word	0x0800bac9
 800ba8c:	0800bac9 	.word	0x0800bac9
 800ba90:	0800bac9 	.word	0x0800bac9
 800ba94:	0800bab1 	.word	0x0800bab1
 800ba98:	0800bac9 	.word	0x0800bac9
 800ba9c:	0800bac9 	.word	0x0800bac9
 800baa0:	0800bac9 	.word	0x0800bac9
 800baa4:	0800bac1 	.word	0x0800bac1
 800baa8:	2300      	movs	r3, #0
 800baaa:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800baae:	e098      	b.n	800bbe2 <UART_SetConfig+0x27e>
 800bab0:	2302      	movs	r3, #2
 800bab2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800bab6:	e094      	b.n	800bbe2 <UART_SetConfig+0x27e>
 800bab8:	2304      	movs	r3, #4
 800baba:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800babe:	e090      	b.n	800bbe2 <UART_SetConfig+0x27e>
 800bac0:	2308      	movs	r3, #8
 800bac2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800bac6:	e08c      	b.n	800bbe2 <UART_SetConfig+0x27e>
 800bac8:	2310      	movs	r3, #16
 800baca:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800bace:	e088      	b.n	800bbe2 <UART_SetConfig+0x27e>
 800bad0:	697b      	ldr	r3, [r7, #20]
 800bad2:	681b      	ldr	r3, [r3, #0]
 800bad4:	4a5f      	ldr	r2, [pc, #380]	@ (800bc54 <UART_SetConfig+0x2f0>)
 800bad6:	4293      	cmp	r3, r2
 800bad8:	d125      	bne.n	800bb26 <UART_SetConfig+0x1c2>
 800bada:	4b5c      	ldr	r3, [pc, #368]	@ (800bc4c <UART_SetConfig+0x2e8>)
 800badc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800bae0:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 800bae4:	2b30      	cmp	r3, #48	@ 0x30
 800bae6:	d016      	beq.n	800bb16 <UART_SetConfig+0x1b2>
 800bae8:	2b30      	cmp	r3, #48	@ 0x30
 800baea:	d818      	bhi.n	800bb1e <UART_SetConfig+0x1ba>
 800baec:	2b20      	cmp	r3, #32
 800baee:	d00a      	beq.n	800bb06 <UART_SetConfig+0x1a2>
 800baf0:	2b20      	cmp	r3, #32
 800baf2:	d814      	bhi.n	800bb1e <UART_SetConfig+0x1ba>
 800baf4:	2b00      	cmp	r3, #0
 800baf6:	d002      	beq.n	800bafe <UART_SetConfig+0x19a>
 800baf8:	2b10      	cmp	r3, #16
 800bafa:	d008      	beq.n	800bb0e <UART_SetConfig+0x1aa>
 800bafc:	e00f      	b.n	800bb1e <UART_SetConfig+0x1ba>
 800bafe:	2300      	movs	r3, #0
 800bb00:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800bb04:	e06d      	b.n	800bbe2 <UART_SetConfig+0x27e>
 800bb06:	2302      	movs	r3, #2
 800bb08:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800bb0c:	e069      	b.n	800bbe2 <UART_SetConfig+0x27e>
 800bb0e:	2304      	movs	r3, #4
 800bb10:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800bb14:	e065      	b.n	800bbe2 <UART_SetConfig+0x27e>
 800bb16:	2308      	movs	r3, #8
 800bb18:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800bb1c:	e061      	b.n	800bbe2 <UART_SetConfig+0x27e>
 800bb1e:	2310      	movs	r3, #16
 800bb20:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800bb24:	e05d      	b.n	800bbe2 <UART_SetConfig+0x27e>
 800bb26:	697b      	ldr	r3, [r7, #20]
 800bb28:	681b      	ldr	r3, [r3, #0]
 800bb2a:	4a4b      	ldr	r2, [pc, #300]	@ (800bc58 <UART_SetConfig+0x2f4>)
 800bb2c:	4293      	cmp	r3, r2
 800bb2e:	d125      	bne.n	800bb7c <UART_SetConfig+0x218>
 800bb30:	4b46      	ldr	r3, [pc, #280]	@ (800bc4c <UART_SetConfig+0x2e8>)
 800bb32:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800bb36:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 800bb3a:	2bc0      	cmp	r3, #192	@ 0xc0
 800bb3c:	d016      	beq.n	800bb6c <UART_SetConfig+0x208>
 800bb3e:	2bc0      	cmp	r3, #192	@ 0xc0
 800bb40:	d818      	bhi.n	800bb74 <UART_SetConfig+0x210>
 800bb42:	2b80      	cmp	r3, #128	@ 0x80
 800bb44:	d00a      	beq.n	800bb5c <UART_SetConfig+0x1f8>
 800bb46:	2b80      	cmp	r3, #128	@ 0x80
 800bb48:	d814      	bhi.n	800bb74 <UART_SetConfig+0x210>
 800bb4a:	2b00      	cmp	r3, #0
 800bb4c:	d002      	beq.n	800bb54 <UART_SetConfig+0x1f0>
 800bb4e:	2b40      	cmp	r3, #64	@ 0x40
 800bb50:	d008      	beq.n	800bb64 <UART_SetConfig+0x200>
 800bb52:	e00f      	b.n	800bb74 <UART_SetConfig+0x210>
 800bb54:	2300      	movs	r3, #0
 800bb56:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800bb5a:	e042      	b.n	800bbe2 <UART_SetConfig+0x27e>
 800bb5c:	2302      	movs	r3, #2
 800bb5e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800bb62:	e03e      	b.n	800bbe2 <UART_SetConfig+0x27e>
 800bb64:	2304      	movs	r3, #4
 800bb66:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800bb6a:	e03a      	b.n	800bbe2 <UART_SetConfig+0x27e>
 800bb6c:	2308      	movs	r3, #8
 800bb6e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800bb72:	e036      	b.n	800bbe2 <UART_SetConfig+0x27e>
 800bb74:	2310      	movs	r3, #16
 800bb76:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800bb7a:	e032      	b.n	800bbe2 <UART_SetConfig+0x27e>
 800bb7c:	697b      	ldr	r3, [r7, #20]
 800bb7e:	681b      	ldr	r3, [r3, #0]
 800bb80:	4a30      	ldr	r2, [pc, #192]	@ (800bc44 <UART_SetConfig+0x2e0>)
 800bb82:	4293      	cmp	r3, r2
 800bb84:	d12a      	bne.n	800bbdc <UART_SetConfig+0x278>
 800bb86:	4b31      	ldr	r3, [pc, #196]	@ (800bc4c <UART_SetConfig+0x2e8>)
 800bb88:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800bb8c:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 800bb90:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800bb94:	d01a      	beq.n	800bbcc <UART_SetConfig+0x268>
 800bb96:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800bb9a:	d81b      	bhi.n	800bbd4 <UART_SetConfig+0x270>
 800bb9c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800bba0:	d00c      	beq.n	800bbbc <UART_SetConfig+0x258>
 800bba2:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800bba6:	d815      	bhi.n	800bbd4 <UART_SetConfig+0x270>
 800bba8:	2b00      	cmp	r3, #0
 800bbaa:	d003      	beq.n	800bbb4 <UART_SetConfig+0x250>
 800bbac:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800bbb0:	d008      	beq.n	800bbc4 <UART_SetConfig+0x260>
 800bbb2:	e00f      	b.n	800bbd4 <UART_SetConfig+0x270>
 800bbb4:	2300      	movs	r3, #0
 800bbb6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800bbba:	e012      	b.n	800bbe2 <UART_SetConfig+0x27e>
 800bbbc:	2302      	movs	r3, #2
 800bbbe:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800bbc2:	e00e      	b.n	800bbe2 <UART_SetConfig+0x27e>
 800bbc4:	2304      	movs	r3, #4
 800bbc6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800bbca:	e00a      	b.n	800bbe2 <UART_SetConfig+0x27e>
 800bbcc:	2308      	movs	r3, #8
 800bbce:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800bbd2:	e006      	b.n	800bbe2 <UART_SetConfig+0x27e>
 800bbd4:	2310      	movs	r3, #16
 800bbd6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800bbda:	e002      	b.n	800bbe2 <UART_SetConfig+0x27e>
 800bbdc:	2310      	movs	r3, #16
 800bbde:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800bbe2:	697b      	ldr	r3, [r7, #20]
 800bbe4:	681b      	ldr	r3, [r3, #0]
 800bbe6:	4a17      	ldr	r2, [pc, #92]	@ (800bc44 <UART_SetConfig+0x2e0>)
 800bbe8:	4293      	cmp	r3, r2
 800bbea:	f040 80a8 	bne.w	800bd3e <UART_SetConfig+0x3da>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800bbee:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800bbf2:	2b08      	cmp	r3, #8
 800bbf4:	d834      	bhi.n	800bc60 <UART_SetConfig+0x2fc>
 800bbf6:	a201      	add	r2, pc, #4	@ (adr r2, 800bbfc <UART_SetConfig+0x298>)
 800bbf8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bbfc:	0800bc21 	.word	0x0800bc21
 800bc00:	0800bc61 	.word	0x0800bc61
 800bc04:	0800bc29 	.word	0x0800bc29
 800bc08:	0800bc61 	.word	0x0800bc61
 800bc0c:	0800bc2f 	.word	0x0800bc2f
 800bc10:	0800bc61 	.word	0x0800bc61
 800bc14:	0800bc61 	.word	0x0800bc61
 800bc18:	0800bc61 	.word	0x0800bc61
 800bc1c:	0800bc37 	.word	0x0800bc37
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800bc20:	f7fc fec0 	bl	80089a4 <HAL_RCC_GetPCLK1Freq>
 800bc24:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800bc26:	e021      	b.n	800bc6c <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800bc28:	4b0c      	ldr	r3, [pc, #48]	@ (800bc5c <UART_SetConfig+0x2f8>)
 800bc2a:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800bc2c:	e01e      	b.n	800bc6c <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800bc2e:	f7fc fe4d 	bl	80088cc <HAL_RCC_GetSysClockFreq>
 800bc32:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800bc34:	e01a      	b.n	800bc6c <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800bc36:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800bc3a:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800bc3c:	e016      	b.n	800bc6c <UART_SetConfig+0x308>
 800bc3e:	bf00      	nop
 800bc40:	cfff69f3 	.word	0xcfff69f3
 800bc44:	40008000 	.word	0x40008000
 800bc48:	40013800 	.word	0x40013800
 800bc4c:	40021000 	.word	0x40021000
 800bc50:	40004400 	.word	0x40004400
 800bc54:	40004800 	.word	0x40004800
 800bc58:	40004c00 	.word	0x40004c00
 800bc5c:	00f42400 	.word	0x00f42400
      default:
        pclk = 0U;
 800bc60:	2300      	movs	r3, #0
 800bc62:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 800bc64:	2301      	movs	r3, #1
 800bc66:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 800bc6a:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800bc6c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bc6e:	2b00      	cmp	r3, #0
 800bc70:	f000 812a 	beq.w	800bec8 <UART_SetConfig+0x564>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800bc74:	697b      	ldr	r3, [r7, #20]
 800bc76:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800bc78:	4a9e      	ldr	r2, [pc, #632]	@ (800bef4 <UART_SetConfig+0x590>)
 800bc7a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800bc7e:	461a      	mov	r2, r3
 800bc80:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bc82:	fbb3 f3f2 	udiv	r3, r3, r2
 800bc86:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800bc88:	697b      	ldr	r3, [r7, #20]
 800bc8a:	685a      	ldr	r2, [r3, #4]
 800bc8c:	4613      	mov	r3, r2
 800bc8e:	005b      	lsls	r3, r3, #1
 800bc90:	4413      	add	r3, r2
 800bc92:	69ba      	ldr	r2, [r7, #24]
 800bc94:	429a      	cmp	r2, r3
 800bc96:	d305      	bcc.n	800bca4 <UART_SetConfig+0x340>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800bc98:	697b      	ldr	r3, [r7, #20]
 800bc9a:	685b      	ldr	r3, [r3, #4]
 800bc9c:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800bc9e:	69ba      	ldr	r2, [r7, #24]
 800bca0:	429a      	cmp	r2, r3
 800bca2:	d903      	bls.n	800bcac <UART_SetConfig+0x348>
      {
        ret = HAL_ERROR;
 800bca4:	2301      	movs	r3, #1
 800bca6:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 800bcaa:	e10d      	b.n	800bec8 <UART_SetConfig+0x564>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800bcac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bcae:	2200      	movs	r2, #0
 800bcb0:	60bb      	str	r3, [r7, #8]
 800bcb2:	60fa      	str	r2, [r7, #12]
 800bcb4:	697b      	ldr	r3, [r7, #20]
 800bcb6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800bcb8:	4a8e      	ldr	r2, [pc, #568]	@ (800bef4 <UART_SetConfig+0x590>)
 800bcba:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800bcbe:	b29b      	uxth	r3, r3
 800bcc0:	2200      	movs	r2, #0
 800bcc2:	603b      	str	r3, [r7, #0]
 800bcc4:	607a      	str	r2, [r7, #4]
 800bcc6:	e9d7 2300 	ldrd	r2, r3, [r7]
 800bcca:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800bcce:	f7f4 ff93 	bl	8000bf8 <__aeabi_uldivmod>
 800bcd2:	4602      	mov	r2, r0
 800bcd4:	460b      	mov	r3, r1
 800bcd6:	4610      	mov	r0, r2
 800bcd8:	4619      	mov	r1, r3
 800bcda:	f04f 0200 	mov.w	r2, #0
 800bcde:	f04f 0300 	mov.w	r3, #0
 800bce2:	020b      	lsls	r3, r1, #8
 800bce4:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800bce8:	0202      	lsls	r2, r0, #8
 800bcea:	6979      	ldr	r1, [r7, #20]
 800bcec:	6849      	ldr	r1, [r1, #4]
 800bcee:	0849      	lsrs	r1, r1, #1
 800bcf0:	2000      	movs	r0, #0
 800bcf2:	460c      	mov	r4, r1
 800bcf4:	4605      	mov	r5, r0
 800bcf6:	eb12 0804 	adds.w	r8, r2, r4
 800bcfa:	eb43 0905 	adc.w	r9, r3, r5
 800bcfe:	697b      	ldr	r3, [r7, #20]
 800bd00:	685b      	ldr	r3, [r3, #4]
 800bd02:	2200      	movs	r2, #0
 800bd04:	469a      	mov	sl, r3
 800bd06:	4693      	mov	fp, r2
 800bd08:	4652      	mov	r2, sl
 800bd0a:	465b      	mov	r3, fp
 800bd0c:	4640      	mov	r0, r8
 800bd0e:	4649      	mov	r1, r9
 800bd10:	f7f4 ff72 	bl	8000bf8 <__aeabi_uldivmod>
 800bd14:	4602      	mov	r2, r0
 800bd16:	460b      	mov	r3, r1
 800bd18:	4613      	mov	r3, r2
 800bd1a:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800bd1c:	6a3b      	ldr	r3, [r7, #32]
 800bd1e:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800bd22:	d308      	bcc.n	800bd36 <UART_SetConfig+0x3d2>
 800bd24:	6a3b      	ldr	r3, [r7, #32]
 800bd26:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800bd2a:	d204      	bcs.n	800bd36 <UART_SetConfig+0x3d2>
        {
          huart->Instance->BRR = usartdiv;
 800bd2c:	697b      	ldr	r3, [r7, #20]
 800bd2e:	681b      	ldr	r3, [r3, #0]
 800bd30:	6a3a      	ldr	r2, [r7, #32]
 800bd32:	60da      	str	r2, [r3, #12]
 800bd34:	e0c8      	b.n	800bec8 <UART_SetConfig+0x564>
        }
        else
        {
          ret = HAL_ERROR;
 800bd36:	2301      	movs	r3, #1
 800bd38:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 800bd3c:	e0c4      	b.n	800bec8 <UART_SetConfig+0x564>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800bd3e:	697b      	ldr	r3, [r7, #20]
 800bd40:	69db      	ldr	r3, [r3, #28]
 800bd42:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800bd46:	d167      	bne.n	800be18 <UART_SetConfig+0x4b4>
  {
    switch (clocksource)
 800bd48:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800bd4c:	2b08      	cmp	r3, #8
 800bd4e:	d828      	bhi.n	800bda2 <UART_SetConfig+0x43e>
 800bd50:	a201      	add	r2, pc, #4	@ (adr r2, 800bd58 <UART_SetConfig+0x3f4>)
 800bd52:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bd56:	bf00      	nop
 800bd58:	0800bd7d 	.word	0x0800bd7d
 800bd5c:	0800bd85 	.word	0x0800bd85
 800bd60:	0800bd8d 	.word	0x0800bd8d
 800bd64:	0800bda3 	.word	0x0800bda3
 800bd68:	0800bd93 	.word	0x0800bd93
 800bd6c:	0800bda3 	.word	0x0800bda3
 800bd70:	0800bda3 	.word	0x0800bda3
 800bd74:	0800bda3 	.word	0x0800bda3
 800bd78:	0800bd9b 	.word	0x0800bd9b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800bd7c:	f7fc fe12 	bl	80089a4 <HAL_RCC_GetPCLK1Freq>
 800bd80:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800bd82:	e014      	b.n	800bdae <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800bd84:	f7fc fe24 	bl	80089d0 <HAL_RCC_GetPCLK2Freq>
 800bd88:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800bd8a:	e010      	b.n	800bdae <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800bd8c:	4b5a      	ldr	r3, [pc, #360]	@ (800bef8 <UART_SetConfig+0x594>)
 800bd8e:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800bd90:	e00d      	b.n	800bdae <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800bd92:	f7fc fd9b 	bl	80088cc <HAL_RCC_GetSysClockFreq>
 800bd96:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800bd98:	e009      	b.n	800bdae <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800bd9a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800bd9e:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800bda0:	e005      	b.n	800bdae <UART_SetConfig+0x44a>
      default:
        pclk = 0U;
 800bda2:	2300      	movs	r3, #0
 800bda4:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 800bda6:	2301      	movs	r3, #1
 800bda8:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 800bdac:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800bdae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bdb0:	2b00      	cmp	r3, #0
 800bdb2:	f000 8089 	beq.w	800bec8 <UART_SetConfig+0x564>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800bdb6:	697b      	ldr	r3, [r7, #20]
 800bdb8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800bdba:	4a4e      	ldr	r2, [pc, #312]	@ (800bef4 <UART_SetConfig+0x590>)
 800bdbc:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800bdc0:	461a      	mov	r2, r3
 800bdc2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bdc4:	fbb3 f3f2 	udiv	r3, r3, r2
 800bdc8:	005a      	lsls	r2, r3, #1
 800bdca:	697b      	ldr	r3, [r7, #20]
 800bdcc:	685b      	ldr	r3, [r3, #4]
 800bdce:	085b      	lsrs	r3, r3, #1
 800bdd0:	441a      	add	r2, r3
 800bdd2:	697b      	ldr	r3, [r7, #20]
 800bdd4:	685b      	ldr	r3, [r3, #4]
 800bdd6:	fbb2 f3f3 	udiv	r3, r2, r3
 800bdda:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800bddc:	6a3b      	ldr	r3, [r7, #32]
 800bdde:	2b0f      	cmp	r3, #15
 800bde0:	d916      	bls.n	800be10 <UART_SetConfig+0x4ac>
 800bde2:	6a3b      	ldr	r3, [r7, #32]
 800bde4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800bde8:	d212      	bcs.n	800be10 <UART_SetConfig+0x4ac>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800bdea:	6a3b      	ldr	r3, [r7, #32]
 800bdec:	b29b      	uxth	r3, r3
 800bdee:	f023 030f 	bic.w	r3, r3, #15
 800bdf2:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800bdf4:	6a3b      	ldr	r3, [r7, #32]
 800bdf6:	085b      	lsrs	r3, r3, #1
 800bdf8:	b29b      	uxth	r3, r3
 800bdfa:	f003 0307 	and.w	r3, r3, #7
 800bdfe:	b29a      	uxth	r2, r3
 800be00:	8bfb      	ldrh	r3, [r7, #30]
 800be02:	4313      	orrs	r3, r2
 800be04:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 800be06:	697b      	ldr	r3, [r7, #20]
 800be08:	681b      	ldr	r3, [r3, #0]
 800be0a:	8bfa      	ldrh	r2, [r7, #30]
 800be0c:	60da      	str	r2, [r3, #12]
 800be0e:	e05b      	b.n	800bec8 <UART_SetConfig+0x564>
      }
      else
      {
        ret = HAL_ERROR;
 800be10:	2301      	movs	r3, #1
 800be12:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 800be16:	e057      	b.n	800bec8 <UART_SetConfig+0x564>
      }
    }
  }
  else
  {
    switch (clocksource)
 800be18:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800be1c:	2b08      	cmp	r3, #8
 800be1e:	d828      	bhi.n	800be72 <UART_SetConfig+0x50e>
 800be20:	a201      	add	r2, pc, #4	@ (adr r2, 800be28 <UART_SetConfig+0x4c4>)
 800be22:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800be26:	bf00      	nop
 800be28:	0800be4d 	.word	0x0800be4d
 800be2c:	0800be55 	.word	0x0800be55
 800be30:	0800be5d 	.word	0x0800be5d
 800be34:	0800be73 	.word	0x0800be73
 800be38:	0800be63 	.word	0x0800be63
 800be3c:	0800be73 	.word	0x0800be73
 800be40:	0800be73 	.word	0x0800be73
 800be44:	0800be73 	.word	0x0800be73
 800be48:	0800be6b 	.word	0x0800be6b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800be4c:	f7fc fdaa 	bl	80089a4 <HAL_RCC_GetPCLK1Freq>
 800be50:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800be52:	e014      	b.n	800be7e <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800be54:	f7fc fdbc 	bl	80089d0 <HAL_RCC_GetPCLK2Freq>
 800be58:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800be5a:	e010      	b.n	800be7e <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800be5c:	4b26      	ldr	r3, [pc, #152]	@ (800bef8 <UART_SetConfig+0x594>)
 800be5e:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800be60:	e00d      	b.n	800be7e <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800be62:	f7fc fd33 	bl	80088cc <HAL_RCC_GetSysClockFreq>
 800be66:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800be68:	e009      	b.n	800be7e <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800be6a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800be6e:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800be70:	e005      	b.n	800be7e <UART_SetConfig+0x51a>
      default:
        pclk = 0U;
 800be72:	2300      	movs	r3, #0
 800be74:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 800be76:	2301      	movs	r3, #1
 800be78:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 800be7c:	bf00      	nop
    }

    if (pclk != 0U)
 800be7e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800be80:	2b00      	cmp	r3, #0
 800be82:	d021      	beq.n	800bec8 <UART_SetConfig+0x564>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800be84:	697b      	ldr	r3, [r7, #20]
 800be86:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800be88:	4a1a      	ldr	r2, [pc, #104]	@ (800bef4 <UART_SetConfig+0x590>)
 800be8a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800be8e:	461a      	mov	r2, r3
 800be90:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800be92:	fbb3 f2f2 	udiv	r2, r3, r2
 800be96:	697b      	ldr	r3, [r7, #20]
 800be98:	685b      	ldr	r3, [r3, #4]
 800be9a:	085b      	lsrs	r3, r3, #1
 800be9c:	441a      	add	r2, r3
 800be9e:	697b      	ldr	r3, [r7, #20]
 800bea0:	685b      	ldr	r3, [r3, #4]
 800bea2:	fbb2 f3f3 	udiv	r3, r2, r3
 800bea6:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800bea8:	6a3b      	ldr	r3, [r7, #32]
 800beaa:	2b0f      	cmp	r3, #15
 800beac:	d909      	bls.n	800bec2 <UART_SetConfig+0x55e>
 800beae:	6a3b      	ldr	r3, [r7, #32]
 800beb0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800beb4:	d205      	bcs.n	800bec2 <UART_SetConfig+0x55e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800beb6:	6a3b      	ldr	r3, [r7, #32]
 800beb8:	b29a      	uxth	r2, r3
 800beba:	697b      	ldr	r3, [r7, #20]
 800bebc:	681b      	ldr	r3, [r3, #0]
 800bebe:	60da      	str	r2, [r3, #12]
 800bec0:	e002      	b.n	800bec8 <UART_SetConfig+0x564>
      }
      else
      {
        ret = HAL_ERROR;
 800bec2:	2301      	movs	r3, #1
 800bec4:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800bec8:	697b      	ldr	r3, [r7, #20]
 800beca:	2201      	movs	r2, #1
 800becc:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 800bed0:	697b      	ldr	r3, [r7, #20]
 800bed2:	2201      	movs	r2, #1
 800bed4:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800bed8:	697b      	ldr	r3, [r7, #20]
 800beda:	2200      	movs	r2, #0
 800bedc:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 800bede:	697b      	ldr	r3, [r7, #20]
 800bee0:	2200      	movs	r2, #0
 800bee2:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 800bee4:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
}
 800bee8:	4618      	mov	r0, r3
 800beea:	3730      	adds	r7, #48	@ 0x30
 800beec:	46bd      	mov	sp, r7
 800beee:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800bef2:	bf00      	nop
 800bef4:	0800f0f8 	.word	0x0800f0f8
 800bef8:	00f42400 	.word	0x00f42400

0800befc <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800befc:	b480      	push	{r7}
 800befe:	b083      	sub	sp, #12
 800bf00:	af00      	add	r7, sp, #0
 800bf02:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800bf04:	687b      	ldr	r3, [r7, #4]
 800bf06:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800bf08:	f003 0308 	and.w	r3, r3, #8
 800bf0c:	2b00      	cmp	r3, #0
 800bf0e:	d00a      	beq.n	800bf26 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800bf10:	687b      	ldr	r3, [r7, #4]
 800bf12:	681b      	ldr	r3, [r3, #0]
 800bf14:	685b      	ldr	r3, [r3, #4]
 800bf16:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 800bf1a:	687b      	ldr	r3, [r7, #4]
 800bf1c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800bf1e:	687b      	ldr	r3, [r7, #4]
 800bf20:	681b      	ldr	r3, [r3, #0]
 800bf22:	430a      	orrs	r2, r1
 800bf24:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800bf26:	687b      	ldr	r3, [r7, #4]
 800bf28:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800bf2a:	f003 0301 	and.w	r3, r3, #1
 800bf2e:	2b00      	cmp	r3, #0
 800bf30:	d00a      	beq.n	800bf48 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800bf32:	687b      	ldr	r3, [r7, #4]
 800bf34:	681b      	ldr	r3, [r3, #0]
 800bf36:	685b      	ldr	r3, [r3, #4]
 800bf38:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 800bf3c:	687b      	ldr	r3, [r7, #4]
 800bf3e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800bf40:	687b      	ldr	r3, [r7, #4]
 800bf42:	681b      	ldr	r3, [r3, #0]
 800bf44:	430a      	orrs	r2, r1
 800bf46:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800bf48:	687b      	ldr	r3, [r7, #4]
 800bf4a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800bf4c:	f003 0302 	and.w	r3, r3, #2
 800bf50:	2b00      	cmp	r3, #0
 800bf52:	d00a      	beq.n	800bf6a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800bf54:	687b      	ldr	r3, [r7, #4]
 800bf56:	681b      	ldr	r3, [r3, #0]
 800bf58:	685b      	ldr	r3, [r3, #4]
 800bf5a:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800bf5e:	687b      	ldr	r3, [r7, #4]
 800bf60:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800bf62:	687b      	ldr	r3, [r7, #4]
 800bf64:	681b      	ldr	r3, [r3, #0]
 800bf66:	430a      	orrs	r2, r1
 800bf68:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800bf6a:	687b      	ldr	r3, [r7, #4]
 800bf6c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800bf6e:	f003 0304 	and.w	r3, r3, #4
 800bf72:	2b00      	cmp	r3, #0
 800bf74:	d00a      	beq.n	800bf8c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800bf76:	687b      	ldr	r3, [r7, #4]
 800bf78:	681b      	ldr	r3, [r3, #0]
 800bf7a:	685b      	ldr	r3, [r3, #4]
 800bf7c:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 800bf80:	687b      	ldr	r3, [r7, #4]
 800bf82:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800bf84:	687b      	ldr	r3, [r7, #4]
 800bf86:	681b      	ldr	r3, [r3, #0]
 800bf88:	430a      	orrs	r2, r1
 800bf8a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800bf8c:	687b      	ldr	r3, [r7, #4]
 800bf8e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800bf90:	f003 0310 	and.w	r3, r3, #16
 800bf94:	2b00      	cmp	r3, #0
 800bf96:	d00a      	beq.n	800bfae <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800bf98:	687b      	ldr	r3, [r7, #4]
 800bf9a:	681b      	ldr	r3, [r3, #0]
 800bf9c:	689b      	ldr	r3, [r3, #8]
 800bf9e:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 800bfa2:	687b      	ldr	r3, [r7, #4]
 800bfa4:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800bfa6:	687b      	ldr	r3, [r7, #4]
 800bfa8:	681b      	ldr	r3, [r3, #0]
 800bfaa:	430a      	orrs	r2, r1
 800bfac:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800bfae:	687b      	ldr	r3, [r7, #4]
 800bfb0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800bfb2:	f003 0320 	and.w	r3, r3, #32
 800bfb6:	2b00      	cmp	r3, #0
 800bfb8:	d00a      	beq.n	800bfd0 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800bfba:	687b      	ldr	r3, [r7, #4]
 800bfbc:	681b      	ldr	r3, [r3, #0]
 800bfbe:	689b      	ldr	r3, [r3, #8]
 800bfc0:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 800bfc4:	687b      	ldr	r3, [r7, #4]
 800bfc6:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800bfc8:	687b      	ldr	r3, [r7, #4]
 800bfca:	681b      	ldr	r3, [r3, #0]
 800bfcc:	430a      	orrs	r2, r1
 800bfce:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800bfd0:	687b      	ldr	r3, [r7, #4]
 800bfd2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800bfd4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800bfd8:	2b00      	cmp	r3, #0
 800bfda:	d01a      	beq.n	800c012 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800bfdc:	687b      	ldr	r3, [r7, #4]
 800bfde:	681b      	ldr	r3, [r3, #0]
 800bfe0:	685b      	ldr	r3, [r3, #4]
 800bfe2:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 800bfe6:	687b      	ldr	r3, [r7, #4]
 800bfe8:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800bfea:	687b      	ldr	r3, [r7, #4]
 800bfec:	681b      	ldr	r3, [r3, #0]
 800bfee:	430a      	orrs	r2, r1
 800bff0:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800bff2:	687b      	ldr	r3, [r7, #4]
 800bff4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800bff6:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800bffa:	d10a      	bne.n	800c012 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800bffc:	687b      	ldr	r3, [r7, #4]
 800bffe:	681b      	ldr	r3, [r3, #0]
 800c000:	685b      	ldr	r3, [r3, #4]
 800c002:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 800c006:	687b      	ldr	r3, [r7, #4]
 800c008:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800c00a:	687b      	ldr	r3, [r7, #4]
 800c00c:	681b      	ldr	r3, [r3, #0]
 800c00e:	430a      	orrs	r2, r1
 800c010:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800c012:	687b      	ldr	r3, [r7, #4]
 800c014:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c016:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800c01a:	2b00      	cmp	r3, #0
 800c01c:	d00a      	beq.n	800c034 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800c01e:	687b      	ldr	r3, [r7, #4]
 800c020:	681b      	ldr	r3, [r3, #0]
 800c022:	685b      	ldr	r3, [r3, #4]
 800c024:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 800c028:	687b      	ldr	r3, [r7, #4]
 800c02a:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800c02c:	687b      	ldr	r3, [r7, #4]
 800c02e:	681b      	ldr	r3, [r3, #0]
 800c030:	430a      	orrs	r2, r1
 800c032:	605a      	str	r2, [r3, #4]
  }
}
 800c034:	bf00      	nop
 800c036:	370c      	adds	r7, #12
 800c038:	46bd      	mov	sp, r7
 800c03a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c03e:	4770      	bx	lr

0800c040 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800c040:	b580      	push	{r7, lr}
 800c042:	b098      	sub	sp, #96	@ 0x60
 800c044:	af02      	add	r7, sp, #8
 800c046:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800c048:	687b      	ldr	r3, [r7, #4]
 800c04a:	2200      	movs	r2, #0
 800c04c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800c050:	f7f9 fb84 	bl	800575c <HAL_GetTick>
 800c054:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800c056:	687b      	ldr	r3, [r7, #4]
 800c058:	681b      	ldr	r3, [r3, #0]
 800c05a:	681b      	ldr	r3, [r3, #0]
 800c05c:	f003 0308 	and.w	r3, r3, #8
 800c060:	2b08      	cmp	r3, #8
 800c062:	d12f      	bne.n	800c0c4 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800c064:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800c068:	9300      	str	r3, [sp, #0]
 800c06a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800c06c:	2200      	movs	r2, #0
 800c06e:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 800c072:	6878      	ldr	r0, [r7, #4]
 800c074:	f000 f88e 	bl	800c194 <UART_WaitOnFlagUntilTimeout>
 800c078:	4603      	mov	r3, r0
 800c07a:	2b00      	cmp	r3, #0
 800c07c:	d022      	beq.n	800c0c4 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 800c07e:	687b      	ldr	r3, [r7, #4]
 800c080:	681b      	ldr	r3, [r3, #0]
 800c082:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c084:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c086:	e853 3f00 	ldrex	r3, [r3]
 800c08a:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800c08c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c08e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800c092:	653b      	str	r3, [r7, #80]	@ 0x50
 800c094:	687b      	ldr	r3, [r7, #4]
 800c096:	681b      	ldr	r3, [r3, #0]
 800c098:	461a      	mov	r2, r3
 800c09a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800c09c:	647b      	str	r3, [r7, #68]	@ 0x44
 800c09e:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c0a0:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800c0a2:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800c0a4:	e841 2300 	strex	r3, r2, [r1]
 800c0a8:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800c0aa:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c0ac:	2b00      	cmp	r3, #0
 800c0ae:	d1e6      	bne.n	800c07e <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 800c0b0:	687b      	ldr	r3, [r7, #4]
 800c0b2:	2220      	movs	r2, #32
 800c0b4:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 800c0b8:	687b      	ldr	r3, [r7, #4]
 800c0ba:	2200      	movs	r2, #0
 800c0bc:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800c0c0:	2303      	movs	r3, #3
 800c0c2:	e063      	b.n	800c18c <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800c0c4:	687b      	ldr	r3, [r7, #4]
 800c0c6:	681b      	ldr	r3, [r3, #0]
 800c0c8:	681b      	ldr	r3, [r3, #0]
 800c0ca:	f003 0304 	and.w	r3, r3, #4
 800c0ce:	2b04      	cmp	r3, #4
 800c0d0:	d149      	bne.n	800c166 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800c0d2:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800c0d6:	9300      	str	r3, [sp, #0]
 800c0d8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800c0da:	2200      	movs	r2, #0
 800c0dc:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 800c0e0:	6878      	ldr	r0, [r7, #4]
 800c0e2:	f000 f857 	bl	800c194 <UART_WaitOnFlagUntilTimeout>
 800c0e6:	4603      	mov	r3, r0
 800c0e8:	2b00      	cmp	r3, #0
 800c0ea:	d03c      	beq.n	800c166 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800c0ec:	687b      	ldr	r3, [r7, #4]
 800c0ee:	681b      	ldr	r3, [r3, #0]
 800c0f0:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c0f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c0f4:	e853 3f00 	ldrex	r3, [r3]
 800c0f8:	623b      	str	r3, [r7, #32]
   return(result);
 800c0fa:	6a3b      	ldr	r3, [r7, #32]
 800c0fc:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800c100:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800c102:	687b      	ldr	r3, [r7, #4]
 800c104:	681b      	ldr	r3, [r3, #0]
 800c106:	461a      	mov	r2, r3
 800c108:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800c10a:	633b      	str	r3, [r7, #48]	@ 0x30
 800c10c:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c10e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800c110:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800c112:	e841 2300 	strex	r3, r2, [r1]
 800c116:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800c118:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c11a:	2b00      	cmp	r3, #0
 800c11c:	d1e6      	bne.n	800c0ec <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800c11e:	687b      	ldr	r3, [r7, #4]
 800c120:	681b      	ldr	r3, [r3, #0]
 800c122:	3308      	adds	r3, #8
 800c124:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c126:	693b      	ldr	r3, [r7, #16]
 800c128:	e853 3f00 	ldrex	r3, [r3]
 800c12c:	60fb      	str	r3, [r7, #12]
   return(result);
 800c12e:	68fb      	ldr	r3, [r7, #12]
 800c130:	f023 0301 	bic.w	r3, r3, #1
 800c134:	64bb      	str	r3, [r7, #72]	@ 0x48
 800c136:	687b      	ldr	r3, [r7, #4]
 800c138:	681b      	ldr	r3, [r3, #0]
 800c13a:	3308      	adds	r3, #8
 800c13c:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800c13e:	61fa      	str	r2, [r7, #28]
 800c140:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c142:	69b9      	ldr	r1, [r7, #24]
 800c144:	69fa      	ldr	r2, [r7, #28]
 800c146:	e841 2300 	strex	r3, r2, [r1]
 800c14a:	617b      	str	r3, [r7, #20]
   return(result);
 800c14c:	697b      	ldr	r3, [r7, #20]
 800c14e:	2b00      	cmp	r3, #0
 800c150:	d1e5      	bne.n	800c11e <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 800c152:	687b      	ldr	r3, [r7, #4]
 800c154:	2220      	movs	r2, #32
 800c156:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 800c15a:	687b      	ldr	r3, [r7, #4]
 800c15c:	2200      	movs	r2, #0
 800c15e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800c162:	2303      	movs	r3, #3
 800c164:	e012      	b.n	800c18c <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800c166:	687b      	ldr	r3, [r7, #4]
 800c168:	2220      	movs	r2, #32
 800c16a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 800c16e:	687b      	ldr	r3, [r7, #4]
 800c170:	2220      	movs	r2, #32
 800c172:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800c176:	687b      	ldr	r3, [r7, #4]
 800c178:	2200      	movs	r2, #0
 800c17a:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800c17c:	687b      	ldr	r3, [r7, #4]
 800c17e:	2200      	movs	r2, #0
 800c180:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 800c182:	687b      	ldr	r3, [r7, #4]
 800c184:	2200      	movs	r2, #0
 800c186:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800c18a:	2300      	movs	r3, #0
}
 800c18c:	4618      	mov	r0, r3
 800c18e:	3758      	adds	r7, #88	@ 0x58
 800c190:	46bd      	mov	sp, r7
 800c192:	bd80      	pop	{r7, pc}

0800c194 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800c194:	b580      	push	{r7, lr}
 800c196:	b084      	sub	sp, #16
 800c198:	af00      	add	r7, sp, #0
 800c19a:	60f8      	str	r0, [r7, #12]
 800c19c:	60b9      	str	r1, [r7, #8]
 800c19e:	603b      	str	r3, [r7, #0]
 800c1a0:	4613      	mov	r3, r2
 800c1a2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800c1a4:	e04f      	b.n	800c246 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800c1a6:	69bb      	ldr	r3, [r7, #24]
 800c1a8:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800c1ac:	d04b      	beq.n	800c246 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800c1ae:	f7f9 fad5 	bl	800575c <HAL_GetTick>
 800c1b2:	4602      	mov	r2, r0
 800c1b4:	683b      	ldr	r3, [r7, #0]
 800c1b6:	1ad3      	subs	r3, r2, r3
 800c1b8:	69ba      	ldr	r2, [r7, #24]
 800c1ba:	429a      	cmp	r2, r3
 800c1bc:	d302      	bcc.n	800c1c4 <UART_WaitOnFlagUntilTimeout+0x30>
 800c1be:	69bb      	ldr	r3, [r7, #24]
 800c1c0:	2b00      	cmp	r3, #0
 800c1c2:	d101      	bne.n	800c1c8 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800c1c4:	2303      	movs	r3, #3
 800c1c6:	e04e      	b.n	800c266 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800c1c8:	68fb      	ldr	r3, [r7, #12]
 800c1ca:	681b      	ldr	r3, [r3, #0]
 800c1cc:	681b      	ldr	r3, [r3, #0]
 800c1ce:	f003 0304 	and.w	r3, r3, #4
 800c1d2:	2b00      	cmp	r3, #0
 800c1d4:	d037      	beq.n	800c246 <UART_WaitOnFlagUntilTimeout+0xb2>
 800c1d6:	68bb      	ldr	r3, [r7, #8]
 800c1d8:	2b80      	cmp	r3, #128	@ 0x80
 800c1da:	d034      	beq.n	800c246 <UART_WaitOnFlagUntilTimeout+0xb2>
 800c1dc:	68bb      	ldr	r3, [r7, #8]
 800c1de:	2b40      	cmp	r3, #64	@ 0x40
 800c1e0:	d031      	beq.n	800c246 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800c1e2:	68fb      	ldr	r3, [r7, #12]
 800c1e4:	681b      	ldr	r3, [r3, #0]
 800c1e6:	69db      	ldr	r3, [r3, #28]
 800c1e8:	f003 0308 	and.w	r3, r3, #8
 800c1ec:	2b08      	cmp	r3, #8
 800c1ee:	d110      	bne.n	800c212 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800c1f0:	68fb      	ldr	r3, [r7, #12]
 800c1f2:	681b      	ldr	r3, [r3, #0]
 800c1f4:	2208      	movs	r2, #8
 800c1f6:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800c1f8:	68f8      	ldr	r0, [r7, #12]
 800c1fa:	f000 f879 	bl	800c2f0 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800c1fe:	68fb      	ldr	r3, [r7, #12]
 800c200:	2208      	movs	r2, #8
 800c202:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800c206:	68fb      	ldr	r3, [r7, #12]
 800c208:	2200      	movs	r2, #0
 800c20a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 800c20e:	2301      	movs	r3, #1
 800c210:	e029      	b.n	800c266 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800c212:	68fb      	ldr	r3, [r7, #12]
 800c214:	681b      	ldr	r3, [r3, #0]
 800c216:	69db      	ldr	r3, [r3, #28]
 800c218:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800c21c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800c220:	d111      	bne.n	800c246 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800c222:	68fb      	ldr	r3, [r7, #12]
 800c224:	681b      	ldr	r3, [r3, #0]
 800c226:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800c22a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800c22c:	68f8      	ldr	r0, [r7, #12]
 800c22e:	f000 f85f 	bl	800c2f0 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800c232:	68fb      	ldr	r3, [r7, #12]
 800c234:	2220      	movs	r2, #32
 800c236:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800c23a:	68fb      	ldr	r3, [r7, #12]
 800c23c:	2200      	movs	r2, #0
 800c23e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 800c242:	2303      	movs	r3, #3
 800c244:	e00f      	b.n	800c266 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800c246:	68fb      	ldr	r3, [r7, #12]
 800c248:	681b      	ldr	r3, [r3, #0]
 800c24a:	69da      	ldr	r2, [r3, #28]
 800c24c:	68bb      	ldr	r3, [r7, #8]
 800c24e:	4013      	ands	r3, r2
 800c250:	68ba      	ldr	r2, [r7, #8]
 800c252:	429a      	cmp	r2, r3
 800c254:	bf0c      	ite	eq
 800c256:	2301      	moveq	r3, #1
 800c258:	2300      	movne	r3, #0
 800c25a:	b2db      	uxtb	r3, r3
 800c25c:	461a      	mov	r2, r3
 800c25e:	79fb      	ldrb	r3, [r7, #7]
 800c260:	429a      	cmp	r2, r3
 800c262:	d0a0      	beq.n	800c1a6 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800c264:	2300      	movs	r3, #0
}
 800c266:	4618      	mov	r0, r3
 800c268:	3710      	adds	r7, #16
 800c26a:	46bd      	mov	sp, r7
 800c26c:	bd80      	pop	{r7, pc}

0800c26e <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 800c26e:	b480      	push	{r7}
 800c270:	b08f      	sub	sp, #60	@ 0x3c
 800c272:	af00      	add	r7, sp, #0
 800c274:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
 800c276:	687b      	ldr	r3, [r7, #4]
 800c278:	681b      	ldr	r3, [r3, #0]
 800c27a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c27c:	6a3b      	ldr	r3, [r7, #32]
 800c27e:	e853 3f00 	ldrex	r3, [r3]
 800c282:	61fb      	str	r3, [r7, #28]
   return(result);
 800c284:	69fb      	ldr	r3, [r7, #28]
 800c286:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 800c28a:	637b      	str	r3, [r7, #52]	@ 0x34
 800c28c:	687b      	ldr	r3, [r7, #4]
 800c28e:	681b      	ldr	r3, [r3, #0]
 800c290:	461a      	mov	r2, r3
 800c292:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c294:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800c296:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c298:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800c29a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800c29c:	e841 2300 	strex	r3, r2, [r1]
 800c2a0:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800c2a2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c2a4:	2b00      	cmp	r3, #0
 800c2a6:	d1e6      	bne.n	800c276 <UART_EndTxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
 800c2a8:	687b      	ldr	r3, [r7, #4]
 800c2aa:	681b      	ldr	r3, [r3, #0]
 800c2ac:	3308      	adds	r3, #8
 800c2ae:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c2b0:	68fb      	ldr	r3, [r7, #12]
 800c2b2:	e853 3f00 	ldrex	r3, [r3]
 800c2b6:	60bb      	str	r3, [r7, #8]
   return(result);
 800c2b8:	68bb      	ldr	r3, [r7, #8]
 800c2ba:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 800c2be:	633b      	str	r3, [r7, #48]	@ 0x30
 800c2c0:	687b      	ldr	r3, [r7, #4]
 800c2c2:	681b      	ldr	r3, [r3, #0]
 800c2c4:	3308      	adds	r3, #8
 800c2c6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800c2c8:	61ba      	str	r2, [r7, #24]
 800c2ca:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c2cc:	6979      	ldr	r1, [r7, #20]
 800c2ce:	69ba      	ldr	r2, [r7, #24]
 800c2d0:	e841 2300 	strex	r3, r2, [r1]
 800c2d4:	613b      	str	r3, [r7, #16]
   return(result);
 800c2d6:	693b      	ldr	r3, [r7, #16]
 800c2d8:	2b00      	cmp	r3, #0
 800c2da:	d1e5      	bne.n	800c2a8 <UART_EndTxTransfer+0x3a>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800c2dc:	687b      	ldr	r3, [r7, #4]
 800c2de:	2220      	movs	r2, #32
 800c2e0:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
}
 800c2e4:	bf00      	nop
 800c2e6:	373c      	adds	r7, #60	@ 0x3c
 800c2e8:	46bd      	mov	sp, r7
 800c2ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c2ee:	4770      	bx	lr

0800c2f0 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800c2f0:	b480      	push	{r7}
 800c2f2:	b095      	sub	sp, #84	@ 0x54
 800c2f4:	af00      	add	r7, sp, #0
 800c2f6:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800c2f8:	687b      	ldr	r3, [r7, #4]
 800c2fa:	681b      	ldr	r3, [r3, #0]
 800c2fc:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c2fe:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c300:	e853 3f00 	ldrex	r3, [r3]
 800c304:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800c306:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c308:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800c30c:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800c30e:	687b      	ldr	r3, [r7, #4]
 800c310:	681b      	ldr	r3, [r3, #0]
 800c312:	461a      	mov	r2, r3
 800c314:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800c316:	643b      	str	r3, [r7, #64]	@ 0x40
 800c318:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c31a:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800c31c:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800c31e:	e841 2300 	strex	r3, r2, [r1]
 800c322:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800c324:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c326:	2b00      	cmp	r3, #0
 800c328:	d1e6      	bne.n	800c2f8 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800c32a:	687b      	ldr	r3, [r7, #4]
 800c32c:	681b      	ldr	r3, [r3, #0]
 800c32e:	3308      	adds	r3, #8
 800c330:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c332:	6a3b      	ldr	r3, [r7, #32]
 800c334:	e853 3f00 	ldrex	r3, [r3]
 800c338:	61fb      	str	r3, [r7, #28]
   return(result);
 800c33a:	69fb      	ldr	r3, [r7, #28]
 800c33c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800c340:	f023 0301 	bic.w	r3, r3, #1
 800c344:	64bb      	str	r3, [r7, #72]	@ 0x48
 800c346:	687b      	ldr	r3, [r7, #4]
 800c348:	681b      	ldr	r3, [r3, #0]
 800c34a:	3308      	adds	r3, #8
 800c34c:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800c34e:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800c350:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c352:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800c354:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800c356:	e841 2300 	strex	r3, r2, [r1]
 800c35a:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800c35c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c35e:	2b00      	cmp	r3, #0
 800c360:	d1e3      	bne.n	800c32a <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800c362:	687b      	ldr	r3, [r7, #4]
 800c364:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800c366:	2b01      	cmp	r3, #1
 800c368:	d118      	bne.n	800c39c <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800c36a:	687b      	ldr	r3, [r7, #4]
 800c36c:	681b      	ldr	r3, [r3, #0]
 800c36e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c370:	68fb      	ldr	r3, [r7, #12]
 800c372:	e853 3f00 	ldrex	r3, [r3]
 800c376:	60bb      	str	r3, [r7, #8]
   return(result);
 800c378:	68bb      	ldr	r3, [r7, #8]
 800c37a:	f023 0310 	bic.w	r3, r3, #16
 800c37e:	647b      	str	r3, [r7, #68]	@ 0x44
 800c380:	687b      	ldr	r3, [r7, #4]
 800c382:	681b      	ldr	r3, [r3, #0]
 800c384:	461a      	mov	r2, r3
 800c386:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800c388:	61bb      	str	r3, [r7, #24]
 800c38a:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c38c:	6979      	ldr	r1, [r7, #20]
 800c38e:	69ba      	ldr	r2, [r7, #24]
 800c390:	e841 2300 	strex	r3, r2, [r1]
 800c394:	613b      	str	r3, [r7, #16]
   return(result);
 800c396:	693b      	ldr	r3, [r7, #16]
 800c398:	2b00      	cmp	r3, #0
 800c39a:	d1e6      	bne.n	800c36a <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800c39c:	687b      	ldr	r3, [r7, #4]
 800c39e:	2220      	movs	r2, #32
 800c3a0:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800c3a4:	687b      	ldr	r3, [r7, #4]
 800c3a6:	2200      	movs	r2, #0
 800c3a8:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800c3aa:	687b      	ldr	r3, [r7, #4]
 800c3ac:	2200      	movs	r2, #0
 800c3ae:	675a      	str	r2, [r3, #116]	@ 0x74
}
 800c3b0:	bf00      	nop
 800c3b2:	3754      	adds	r7, #84	@ 0x54
 800c3b4:	46bd      	mov	sp, r7
 800c3b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c3ba:	4770      	bx	lr

0800c3bc <UART_DMATransmitCplt>:
  * @brief DMA UART transmit process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 800c3bc:	b580      	push	{r7, lr}
 800c3be:	b090      	sub	sp, #64	@ 0x40
 800c3c0:	af00      	add	r7, sp, #0
 800c3c2:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800c3c4:	687b      	ldr	r3, [r7, #4]
 800c3c6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c3c8:	63fb      	str	r3, [r7, #60]	@ 0x3c

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 800c3ca:	687b      	ldr	r3, [r7, #4]
 800c3cc:	681b      	ldr	r3, [r3, #0]
 800c3ce:	681b      	ldr	r3, [r3, #0]
 800c3d0:	f003 0320 	and.w	r3, r3, #32
 800c3d4:	2b00      	cmp	r3, #0
 800c3d6:	d137      	bne.n	800c448 <UART_DMATransmitCplt+0x8c>
  {
    huart->TxXferCount = 0U;
 800c3d8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c3da:	2200      	movs	r2, #0
 800c3dc:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* Disable the DMA transfer for transmit request by resetting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800c3e0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c3e2:	681b      	ldr	r3, [r3, #0]
 800c3e4:	3308      	adds	r3, #8
 800c3e6:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c3e8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c3ea:	e853 3f00 	ldrex	r3, [r3]
 800c3ee:	623b      	str	r3, [r7, #32]
   return(result);
 800c3f0:	6a3b      	ldr	r3, [r7, #32]
 800c3f2:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800c3f6:	63bb      	str	r3, [r7, #56]	@ 0x38
 800c3f8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c3fa:	681b      	ldr	r3, [r3, #0]
 800c3fc:	3308      	adds	r3, #8
 800c3fe:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800c400:	633a      	str	r2, [r7, #48]	@ 0x30
 800c402:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c404:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800c406:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800c408:	e841 2300 	strex	r3, r2, [r1]
 800c40c:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800c40e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c410:	2b00      	cmp	r3, #0
 800c412:	d1e5      	bne.n	800c3e0 <UART_DMATransmitCplt+0x24>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800c414:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c416:	681b      	ldr	r3, [r3, #0]
 800c418:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c41a:	693b      	ldr	r3, [r7, #16]
 800c41c:	e853 3f00 	ldrex	r3, [r3]
 800c420:	60fb      	str	r3, [r7, #12]
   return(result);
 800c422:	68fb      	ldr	r3, [r7, #12]
 800c424:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800c428:	637b      	str	r3, [r7, #52]	@ 0x34
 800c42a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c42c:	681b      	ldr	r3, [r3, #0]
 800c42e:	461a      	mov	r2, r3
 800c430:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c432:	61fb      	str	r3, [r7, #28]
 800c434:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c436:	69b9      	ldr	r1, [r7, #24]
 800c438:	69fa      	ldr	r2, [r7, #28]
 800c43a:	e841 2300 	strex	r3, r2, [r1]
 800c43e:	617b      	str	r3, [r7, #20]
   return(result);
 800c440:	697b      	ldr	r3, [r7, #20]
 800c442:	2b00      	cmp	r3, #0
 800c444:	d1e6      	bne.n	800c414 <UART_DMATransmitCplt+0x58>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800c446:	e002      	b.n	800c44e <UART_DMATransmitCplt+0x92>
    HAL_UART_TxCpltCallback(huart);
 800c448:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 800c44a:	f7f4 fd4d 	bl	8000ee8 <HAL_UART_TxCpltCallback>
}
 800c44e:	bf00      	nop
 800c450:	3740      	adds	r7, #64	@ 0x40
 800c452:	46bd      	mov	sp, r7
 800c454:	bd80      	pop	{r7, pc}

0800c456 <UART_DMATxHalfCplt>:
  * @brief DMA UART transmit process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800c456:	b580      	push	{r7, lr}
 800c458:	b084      	sub	sp, #16
 800c45a:	af00      	add	r7, sp, #0
 800c45c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800c45e:	687b      	ldr	r3, [r7, #4]
 800c460:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c462:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx Half complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx Half complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 800c464:	68f8      	ldr	r0, [r7, #12]
 800c466:	f7ff fa5d 	bl	800b924 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800c46a:	bf00      	nop
 800c46c:	3710      	adds	r7, #16
 800c46e:	46bd      	mov	sp, r7
 800c470:	bd80      	pop	{r7, pc}

0800c472 <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800c472:	b580      	push	{r7, lr}
 800c474:	b086      	sub	sp, #24
 800c476:	af00      	add	r7, sp, #0
 800c478:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800c47a:	687b      	ldr	r3, [r7, #4]
 800c47c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c47e:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 800c480:	697b      	ldr	r3, [r7, #20]
 800c482:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800c486:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 800c488:	697b      	ldr	r3, [r7, #20]
 800c48a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800c48e:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 800c490:	697b      	ldr	r3, [r7, #20]
 800c492:	681b      	ldr	r3, [r3, #0]
 800c494:	689b      	ldr	r3, [r3, #8]
 800c496:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800c49a:	2b80      	cmp	r3, #128	@ 0x80
 800c49c:	d109      	bne.n	800c4b2 <UART_DMAError+0x40>
 800c49e:	693b      	ldr	r3, [r7, #16]
 800c4a0:	2b21      	cmp	r3, #33	@ 0x21
 800c4a2:	d106      	bne.n	800c4b2 <UART_DMAError+0x40>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 800c4a4:	697b      	ldr	r3, [r7, #20]
 800c4a6:	2200      	movs	r2, #0
 800c4a8:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    UART_EndTxTransfer(huart);
 800c4ac:	6978      	ldr	r0, [r7, #20]
 800c4ae:	f7ff fede 	bl	800c26e <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 800c4b2:	697b      	ldr	r3, [r7, #20]
 800c4b4:	681b      	ldr	r3, [r3, #0]
 800c4b6:	689b      	ldr	r3, [r3, #8]
 800c4b8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800c4bc:	2b40      	cmp	r3, #64	@ 0x40
 800c4be:	d109      	bne.n	800c4d4 <UART_DMAError+0x62>
 800c4c0:	68fb      	ldr	r3, [r7, #12]
 800c4c2:	2b22      	cmp	r3, #34	@ 0x22
 800c4c4:	d106      	bne.n	800c4d4 <UART_DMAError+0x62>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 800c4c6:	697b      	ldr	r3, [r7, #20]
 800c4c8:	2200      	movs	r2, #0
 800c4ca:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
    UART_EndRxTransfer(huart);
 800c4ce:	6978      	ldr	r0, [r7, #20]
 800c4d0:	f7ff ff0e 	bl	800c2f0 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800c4d4:	697b      	ldr	r3, [r7, #20]
 800c4d6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800c4da:	f043 0210 	orr.w	r2, r3, #16
 800c4de:	697b      	ldr	r3, [r7, #20]
 800c4e0:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800c4e4:	6978      	ldr	r0, [r7, #20]
 800c4e6:	f7ff fa27 	bl	800b938 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800c4ea:	bf00      	nop
 800c4ec:	3718      	adds	r7, #24
 800c4ee:	46bd      	mov	sp, r7
 800c4f0:	bd80      	pop	{r7, pc}

0800c4f2 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800c4f2:	b580      	push	{r7, lr}
 800c4f4:	b084      	sub	sp, #16
 800c4f6:	af00      	add	r7, sp, #0
 800c4f8:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800c4fa:	687b      	ldr	r3, [r7, #4]
 800c4fc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c4fe:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800c500:	68fb      	ldr	r3, [r7, #12]
 800c502:	2200      	movs	r2, #0
 800c504:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800c508:	68f8      	ldr	r0, [r7, #12]
 800c50a:	f7ff fa15 	bl	800b938 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800c50e:	bf00      	nop
 800c510:	3710      	adds	r7, #16
 800c512:	46bd      	mov	sp, r7
 800c514:	bd80      	pop	{r7, pc}

0800c516 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800c516:	b580      	push	{r7, lr}
 800c518:	b088      	sub	sp, #32
 800c51a:	af00      	add	r7, sp, #0
 800c51c:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800c51e:	687b      	ldr	r3, [r7, #4]
 800c520:	681b      	ldr	r3, [r3, #0]
 800c522:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c524:	68fb      	ldr	r3, [r7, #12]
 800c526:	e853 3f00 	ldrex	r3, [r3]
 800c52a:	60bb      	str	r3, [r7, #8]
   return(result);
 800c52c:	68bb      	ldr	r3, [r7, #8]
 800c52e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800c532:	61fb      	str	r3, [r7, #28]
 800c534:	687b      	ldr	r3, [r7, #4]
 800c536:	681b      	ldr	r3, [r3, #0]
 800c538:	461a      	mov	r2, r3
 800c53a:	69fb      	ldr	r3, [r7, #28]
 800c53c:	61bb      	str	r3, [r7, #24]
 800c53e:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c540:	6979      	ldr	r1, [r7, #20]
 800c542:	69ba      	ldr	r2, [r7, #24]
 800c544:	e841 2300 	strex	r3, r2, [r1]
 800c548:	613b      	str	r3, [r7, #16]
   return(result);
 800c54a:	693b      	ldr	r3, [r7, #16]
 800c54c:	2b00      	cmp	r3, #0
 800c54e:	d1e6      	bne.n	800c51e <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800c550:	687b      	ldr	r3, [r7, #4]
 800c552:	2220      	movs	r2, #32
 800c554:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800c558:	687b      	ldr	r3, [r7, #4]
 800c55a:	2200      	movs	r2, #0
 800c55c:	679a      	str	r2, [r3, #120]	@ 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800c55e:	6878      	ldr	r0, [r7, #4]
 800c560:	f7f4 fcc2 	bl	8000ee8 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800c564:	bf00      	nop
 800c566:	3720      	adds	r7, #32
 800c568:	46bd      	mov	sp, r7
 800c56a:	bd80      	pop	{r7, pc}

0800c56c <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800c56c:	b480      	push	{r7}
 800c56e:	b083      	sub	sp, #12
 800c570:	af00      	add	r7, sp, #0
 800c572:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800c574:	bf00      	nop
 800c576:	370c      	adds	r7, #12
 800c578:	46bd      	mov	sp, r7
 800c57a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c57e:	4770      	bx	lr

0800c580 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 800c580:	b480      	push	{r7}
 800c582:	b083      	sub	sp, #12
 800c584:	af00      	add	r7, sp, #0
 800c586:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 800c588:	bf00      	nop
 800c58a:	370c      	adds	r7, #12
 800c58c:	46bd      	mov	sp, r7
 800c58e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c592:	4770      	bx	lr

0800c594 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 800c594:	b480      	push	{r7}
 800c596:	b083      	sub	sp, #12
 800c598:	af00      	add	r7, sp, #0
 800c59a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 800c59c:	bf00      	nop
 800c59e:	370c      	adds	r7, #12
 800c5a0:	46bd      	mov	sp, r7
 800c5a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c5a6:	4770      	bx	lr

0800c5a8 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800c5a8:	b480      	push	{r7}
 800c5aa:	b085      	sub	sp, #20
 800c5ac:	af00      	add	r7, sp, #0
 800c5ae:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800c5b0:	687b      	ldr	r3, [r7, #4]
 800c5b2:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800c5b6:	2b01      	cmp	r3, #1
 800c5b8:	d101      	bne.n	800c5be <HAL_UARTEx_DisableFifoMode+0x16>
 800c5ba:	2302      	movs	r3, #2
 800c5bc:	e027      	b.n	800c60e <HAL_UARTEx_DisableFifoMode+0x66>
 800c5be:	687b      	ldr	r3, [r7, #4]
 800c5c0:	2201      	movs	r2, #1
 800c5c2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800c5c6:	687b      	ldr	r3, [r7, #4]
 800c5c8:	2224      	movs	r2, #36	@ 0x24
 800c5ca:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800c5ce:	687b      	ldr	r3, [r7, #4]
 800c5d0:	681b      	ldr	r3, [r3, #0]
 800c5d2:	681b      	ldr	r3, [r3, #0]
 800c5d4:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800c5d6:	687b      	ldr	r3, [r7, #4]
 800c5d8:	681b      	ldr	r3, [r3, #0]
 800c5da:	681a      	ldr	r2, [r3, #0]
 800c5dc:	687b      	ldr	r3, [r7, #4]
 800c5de:	681b      	ldr	r3, [r3, #0]
 800c5e0:	f022 0201 	bic.w	r2, r2, #1
 800c5e4:	601a      	str	r2, [r3, #0]

  /* Disable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800c5e6:	68fb      	ldr	r3, [r7, #12]
 800c5e8:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 800c5ec:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800c5ee:	687b      	ldr	r3, [r7, #4]
 800c5f0:	2200      	movs	r2, #0
 800c5f2:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800c5f4:	687b      	ldr	r3, [r7, #4]
 800c5f6:	681b      	ldr	r3, [r3, #0]
 800c5f8:	68fa      	ldr	r2, [r7, #12]
 800c5fa:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800c5fc:	687b      	ldr	r3, [r7, #4]
 800c5fe:	2220      	movs	r2, #32
 800c600:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800c604:	687b      	ldr	r3, [r7, #4]
 800c606:	2200      	movs	r2, #0
 800c608:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800c60c:	2300      	movs	r3, #0
}
 800c60e:	4618      	mov	r0, r3
 800c610:	3714      	adds	r7, #20
 800c612:	46bd      	mov	sp, r7
 800c614:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c618:	4770      	bx	lr

0800c61a <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800c61a:	b580      	push	{r7, lr}
 800c61c:	b084      	sub	sp, #16
 800c61e:	af00      	add	r7, sp, #0
 800c620:	6078      	str	r0, [r7, #4]
 800c622:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800c624:	687b      	ldr	r3, [r7, #4]
 800c626:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800c62a:	2b01      	cmp	r3, #1
 800c62c:	d101      	bne.n	800c632 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800c62e:	2302      	movs	r3, #2
 800c630:	e02d      	b.n	800c68e <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800c632:	687b      	ldr	r3, [r7, #4]
 800c634:	2201      	movs	r2, #1
 800c636:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800c63a:	687b      	ldr	r3, [r7, #4]
 800c63c:	2224      	movs	r2, #36	@ 0x24
 800c63e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800c642:	687b      	ldr	r3, [r7, #4]
 800c644:	681b      	ldr	r3, [r3, #0]
 800c646:	681b      	ldr	r3, [r3, #0]
 800c648:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800c64a:	687b      	ldr	r3, [r7, #4]
 800c64c:	681b      	ldr	r3, [r3, #0]
 800c64e:	681a      	ldr	r2, [r3, #0]
 800c650:	687b      	ldr	r3, [r7, #4]
 800c652:	681b      	ldr	r3, [r3, #0]
 800c654:	f022 0201 	bic.w	r2, r2, #1
 800c658:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800c65a:	687b      	ldr	r3, [r7, #4]
 800c65c:	681b      	ldr	r3, [r3, #0]
 800c65e:	689b      	ldr	r3, [r3, #8]
 800c660:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 800c664:	687b      	ldr	r3, [r7, #4]
 800c666:	681b      	ldr	r3, [r3, #0]
 800c668:	683a      	ldr	r2, [r7, #0]
 800c66a:	430a      	orrs	r2, r1
 800c66c:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800c66e:	6878      	ldr	r0, [r7, #4]
 800c670:	f000 f850 	bl	800c714 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800c674:	687b      	ldr	r3, [r7, #4]
 800c676:	681b      	ldr	r3, [r3, #0]
 800c678:	68fa      	ldr	r2, [r7, #12]
 800c67a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800c67c:	687b      	ldr	r3, [r7, #4]
 800c67e:	2220      	movs	r2, #32
 800c680:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800c684:	687b      	ldr	r3, [r7, #4]
 800c686:	2200      	movs	r2, #0
 800c688:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800c68c:	2300      	movs	r3, #0
}
 800c68e:	4618      	mov	r0, r3
 800c690:	3710      	adds	r7, #16
 800c692:	46bd      	mov	sp, r7
 800c694:	bd80      	pop	{r7, pc}

0800c696 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800c696:	b580      	push	{r7, lr}
 800c698:	b084      	sub	sp, #16
 800c69a:	af00      	add	r7, sp, #0
 800c69c:	6078      	str	r0, [r7, #4]
 800c69e:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800c6a0:	687b      	ldr	r3, [r7, #4]
 800c6a2:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800c6a6:	2b01      	cmp	r3, #1
 800c6a8:	d101      	bne.n	800c6ae <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800c6aa:	2302      	movs	r3, #2
 800c6ac:	e02d      	b.n	800c70a <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800c6ae:	687b      	ldr	r3, [r7, #4]
 800c6b0:	2201      	movs	r2, #1
 800c6b2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800c6b6:	687b      	ldr	r3, [r7, #4]
 800c6b8:	2224      	movs	r2, #36	@ 0x24
 800c6ba:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800c6be:	687b      	ldr	r3, [r7, #4]
 800c6c0:	681b      	ldr	r3, [r3, #0]
 800c6c2:	681b      	ldr	r3, [r3, #0]
 800c6c4:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800c6c6:	687b      	ldr	r3, [r7, #4]
 800c6c8:	681b      	ldr	r3, [r3, #0]
 800c6ca:	681a      	ldr	r2, [r3, #0]
 800c6cc:	687b      	ldr	r3, [r7, #4]
 800c6ce:	681b      	ldr	r3, [r3, #0]
 800c6d0:	f022 0201 	bic.w	r2, r2, #1
 800c6d4:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800c6d6:	687b      	ldr	r3, [r7, #4]
 800c6d8:	681b      	ldr	r3, [r3, #0]
 800c6da:	689b      	ldr	r3, [r3, #8]
 800c6dc:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 800c6e0:	687b      	ldr	r3, [r7, #4]
 800c6e2:	681b      	ldr	r3, [r3, #0]
 800c6e4:	683a      	ldr	r2, [r7, #0]
 800c6e6:	430a      	orrs	r2, r1
 800c6e8:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800c6ea:	6878      	ldr	r0, [r7, #4]
 800c6ec:	f000 f812 	bl	800c714 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800c6f0:	687b      	ldr	r3, [r7, #4]
 800c6f2:	681b      	ldr	r3, [r3, #0]
 800c6f4:	68fa      	ldr	r2, [r7, #12]
 800c6f6:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800c6f8:	687b      	ldr	r3, [r7, #4]
 800c6fa:	2220      	movs	r2, #32
 800c6fc:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800c700:	687b      	ldr	r3, [r7, #4]
 800c702:	2200      	movs	r2, #0
 800c704:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800c708:	2300      	movs	r3, #0
}
 800c70a:	4618      	mov	r0, r3
 800c70c:	3710      	adds	r7, #16
 800c70e:	46bd      	mov	sp, r7
 800c710:	bd80      	pop	{r7, pc}
	...

0800c714 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800c714:	b480      	push	{r7}
 800c716:	b085      	sub	sp, #20
 800c718:	af00      	add	r7, sp, #0
 800c71a:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800c71c:	687b      	ldr	r3, [r7, #4]
 800c71e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800c720:	2b00      	cmp	r3, #0
 800c722:	d108      	bne.n	800c736 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800c724:	687b      	ldr	r3, [r7, #4]
 800c726:	2201      	movs	r2, #1
 800c728:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 800c72c:	687b      	ldr	r3, [r7, #4]
 800c72e:	2201      	movs	r2, #1
 800c730:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800c734:	e031      	b.n	800c79a <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800c736:	2308      	movs	r3, #8
 800c738:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800c73a:	2308      	movs	r3, #8
 800c73c:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800c73e:	687b      	ldr	r3, [r7, #4]
 800c740:	681b      	ldr	r3, [r3, #0]
 800c742:	689b      	ldr	r3, [r3, #8]
 800c744:	0e5b      	lsrs	r3, r3, #25
 800c746:	b2db      	uxtb	r3, r3
 800c748:	f003 0307 	and.w	r3, r3, #7
 800c74c:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800c74e:	687b      	ldr	r3, [r7, #4]
 800c750:	681b      	ldr	r3, [r3, #0]
 800c752:	689b      	ldr	r3, [r3, #8]
 800c754:	0f5b      	lsrs	r3, r3, #29
 800c756:	b2db      	uxtb	r3, r3
 800c758:	f003 0307 	and.w	r3, r3, #7
 800c75c:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800c75e:	7bbb      	ldrb	r3, [r7, #14]
 800c760:	7b3a      	ldrb	r2, [r7, #12]
 800c762:	4911      	ldr	r1, [pc, #68]	@ (800c7a8 <UARTEx_SetNbDataToProcess+0x94>)
 800c764:	5c8a      	ldrb	r2, [r1, r2]
 800c766:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800c76a:	7b3a      	ldrb	r2, [r7, #12]
 800c76c:	490f      	ldr	r1, [pc, #60]	@ (800c7ac <UARTEx_SetNbDataToProcess+0x98>)
 800c76e:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800c770:	fb93 f3f2 	sdiv	r3, r3, r2
 800c774:	b29a      	uxth	r2, r3
 800c776:	687b      	ldr	r3, [r7, #4]
 800c778:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800c77c:	7bfb      	ldrb	r3, [r7, #15]
 800c77e:	7b7a      	ldrb	r2, [r7, #13]
 800c780:	4909      	ldr	r1, [pc, #36]	@ (800c7a8 <UARTEx_SetNbDataToProcess+0x94>)
 800c782:	5c8a      	ldrb	r2, [r1, r2]
 800c784:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800c788:	7b7a      	ldrb	r2, [r7, #13]
 800c78a:	4908      	ldr	r1, [pc, #32]	@ (800c7ac <UARTEx_SetNbDataToProcess+0x98>)
 800c78c:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800c78e:	fb93 f3f2 	sdiv	r3, r3, r2
 800c792:	b29a      	uxth	r2, r3
 800c794:	687b      	ldr	r3, [r7, #4]
 800c796:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 800c79a:	bf00      	nop
 800c79c:	3714      	adds	r7, #20
 800c79e:	46bd      	mov	sp, r7
 800c7a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c7a4:	4770      	bx	lr
 800c7a6:	bf00      	nop
 800c7a8:	0800f110 	.word	0x0800f110
 800c7ac:	0800f118 	.word	0x0800f118

0800c7b0 <__cvt>:
 800c7b0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800c7b4:	ec57 6b10 	vmov	r6, r7, d0
 800c7b8:	2f00      	cmp	r7, #0
 800c7ba:	460c      	mov	r4, r1
 800c7bc:	4619      	mov	r1, r3
 800c7be:	463b      	mov	r3, r7
 800c7c0:	bfbb      	ittet	lt
 800c7c2:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 800c7c6:	461f      	movlt	r7, r3
 800c7c8:	2300      	movge	r3, #0
 800c7ca:	232d      	movlt	r3, #45	@ 0x2d
 800c7cc:	700b      	strb	r3, [r1, #0]
 800c7ce:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800c7d0:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 800c7d4:	4691      	mov	r9, r2
 800c7d6:	f023 0820 	bic.w	r8, r3, #32
 800c7da:	bfbc      	itt	lt
 800c7dc:	4632      	movlt	r2, r6
 800c7de:	4616      	movlt	r6, r2
 800c7e0:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800c7e4:	d005      	beq.n	800c7f2 <__cvt+0x42>
 800c7e6:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 800c7ea:	d100      	bne.n	800c7ee <__cvt+0x3e>
 800c7ec:	3401      	adds	r4, #1
 800c7ee:	2102      	movs	r1, #2
 800c7f0:	e000      	b.n	800c7f4 <__cvt+0x44>
 800c7f2:	2103      	movs	r1, #3
 800c7f4:	ab03      	add	r3, sp, #12
 800c7f6:	9301      	str	r3, [sp, #4]
 800c7f8:	ab02      	add	r3, sp, #8
 800c7fa:	9300      	str	r3, [sp, #0]
 800c7fc:	ec47 6b10 	vmov	d0, r6, r7
 800c800:	4653      	mov	r3, sl
 800c802:	4622      	mov	r2, r4
 800c804:	f000 fe3c 	bl	800d480 <_dtoa_r>
 800c808:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 800c80c:	4605      	mov	r5, r0
 800c80e:	d119      	bne.n	800c844 <__cvt+0x94>
 800c810:	f019 0f01 	tst.w	r9, #1
 800c814:	d00e      	beq.n	800c834 <__cvt+0x84>
 800c816:	eb00 0904 	add.w	r9, r0, r4
 800c81a:	2200      	movs	r2, #0
 800c81c:	2300      	movs	r3, #0
 800c81e:	4630      	mov	r0, r6
 800c820:	4639      	mov	r1, r7
 800c822:	f7f4 f979 	bl	8000b18 <__aeabi_dcmpeq>
 800c826:	b108      	cbz	r0, 800c82c <__cvt+0x7c>
 800c828:	f8cd 900c 	str.w	r9, [sp, #12]
 800c82c:	2230      	movs	r2, #48	@ 0x30
 800c82e:	9b03      	ldr	r3, [sp, #12]
 800c830:	454b      	cmp	r3, r9
 800c832:	d31e      	bcc.n	800c872 <__cvt+0xc2>
 800c834:	9b03      	ldr	r3, [sp, #12]
 800c836:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800c838:	1b5b      	subs	r3, r3, r5
 800c83a:	4628      	mov	r0, r5
 800c83c:	6013      	str	r3, [r2, #0]
 800c83e:	b004      	add	sp, #16
 800c840:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c844:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800c848:	eb00 0904 	add.w	r9, r0, r4
 800c84c:	d1e5      	bne.n	800c81a <__cvt+0x6a>
 800c84e:	7803      	ldrb	r3, [r0, #0]
 800c850:	2b30      	cmp	r3, #48	@ 0x30
 800c852:	d10a      	bne.n	800c86a <__cvt+0xba>
 800c854:	2200      	movs	r2, #0
 800c856:	2300      	movs	r3, #0
 800c858:	4630      	mov	r0, r6
 800c85a:	4639      	mov	r1, r7
 800c85c:	f7f4 f95c 	bl	8000b18 <__aeabi_dcmpeq>
 800c860:	b918      	cbnz	r0, 800c86a <__cvt+0xba>
 800c862:	f1c4 0401 	rsb	r4, r4, #1
 800c866:	f8ca 4000 	str.w	r4, [sl]
 800c86a:	f8da 3000 	ldr.w	r3, [sl]
 800c86e:	4499      	add	r9, r3
 800c870:	e7d3      	b.n	800c81a <__cvt+0x6a>
 800c872:	1c59      	adds	r1, r3, #1
 800c874:	9103      	str	r1, [sp, #12]
 800c876:	701a      	strb	r2, [r3, #0]
 800c878:	e7d9      	b.n	800c82e <__cvt+0x7e>

0800c87a <__exponent>:
 800c87a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800c87c:	2900      	cmp	r1, #0
 800c87e:	bfba      	itte	lt
 800c880:	4249      	neglt	r1, r1
 800c882:	232d      	movlt	r3, #45	@ 0x2d
 800c884:	232b      	movge	r3, #43	@ 0x2b
 800c886:	2909      	cmp	r1, #9
 800c888:	7002      	strb	r2, [r0, #0]
 800c88a:	7043      	strb	r3, [r0, #1]
 800c88c:	dd29      	ble.n	800c8e2 <__exponent+0x68>
 800c88e:	f10d 0307 	add.w	r3, sp, #7
 800c892:	461d      	mov	r5, r3
 800c894:	270a      	movs	r7, #10
 800c896:	461a      	mov	r2, r3
 800c898:	fbb1 f6f7 	udiv	r6, r1, r7
 800c89c:	fb07 1416 	mls	r4, r7, r6, r1
 800c8a0:	3430      	adds	r4, #48	@ 0x30
 800c8a2:	f802 4c01 	strb.w	r4, [r2, #-1]
 800c8a6:	460c      	mov	r4, r1
 800c8a8:	2c63      	cmp	r4, #99	@ 0x63
 800c8aa:	f103 33ff 	add.w	r3, r3, #4294967295	@ 0xffffffff
 800c8ae:	4631      	mov	r1, r6
 800c8b0:	dcf1      	bgt.n	800c896 <__exponent+0x1c>
 800c8b2:	3130      	adds	r1, #48	@ 0x30
 800c8b4:	1e94      	subs	r4, r2, #2
 800c8b6:	f803 1c01 	strb.w	r1, [r3, #-1]
 800c8ba:	1c41      	adds	r1, r0, #1
 800c8bc:	4623      	mov	r3, r4
 800c8be:	42ab      	cmp	r3, r5
 800c8c0:	d30a      	bcc.n	800c8d8 <__exponent+0x5e>
 800c8c2:	f10d 0309 	add.w	r3, sp, #9
 800c8c6:	1a9b      	subs	r3, r3, r2
 800c8c8:	42ac      	cmp	r4, r5
 800c8ca:	bf88      	it	hi
 800c8cc:	2300      	movhi	r3, #0
 800c8ce:	3302      	adds	r3, #2
 800c8d0:	4403      	add	r3, r0
 800c8d2:	1a18      	subs	r0, r3, r0
 800c8d4:	b003      	add	sp, #12
 800c8d6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c8d8:	f813 6b01 	ldrb.w	r6, [r3], #1
 800c8dc:	f801 6f01 	strb.w	r6, [r1, #1]!
 800c8e0:	e7ed      	b.n	800c8be <__exponent+0x44>
 800c8e2:	2330      	movs	r3, #48	@ 0x30
 800c8e4:	3130      	adds	r1, #48	@ 0x30
 800c8e6:	7083      	strb	r3, [r0, #2]
 800c8e8:	70c1      	strb	r1, [r0, #3]
 800c8ea:	1d03      	adds	r3, r0, #4
 800c8ec:	e7f1      	b.n	800c8d2 <__exponent+0x58>
	...

0800c8f0 <_printf_float>:
 800c8f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c8f4:	b08d      	sub	sp, #52	@ 0x34
 800c8f6:	460c      	mov	r4, r1
 800c8f8:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 800c8fc:	4616      	mov	r6, r2
 800c8fe:	461f      	mov	r7, r3
 800c900:	4605      	mov	r5, r0
 800c902:	f000 fcbb 	bl	800d27c <_localeconv_r>
 800c906:	6803      	ldr	r3, [r0, #0]
 800c908:	9304      	str	r3, [sp, #16]
 800c90a:	4618      	mov	r0, r3
 800c90c:	f7f3 fcd8 	bl	80002c0 <strlen>
 800c910:	2300      	movs	r3, #0
 800c912:	930a      	str	r3, [sp, #40]	@ 0x28
 800c914:	f8d8 3000 	ldr.w	r3, [r8]
 800c918:	9005      	str	r0, [sp, #20]
 800c91a:	3307      	adds	r3, #7
 800c91c:	f023 0307 	bic.w	r3, r3, #7
 800c920:	f103 0208 	add.w	r2, r3, #8
 800c924:	f894 a018 	ldrb.w	sl, [r4, #24]
 800c928:	f8d4 b000 	ldr.w	fp, [r4]
 800c92c:	f8c8 2000 	str.w	r2, [r8]
 800c930:	e9d3 8900 	ldrd	r8, r9, [r3]
 800c934:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 800c938:	9307      	str	r3, [sp, #28]
 800c93a:	f8cd 8018 	str.w	r8, [sp, #24]
 800c93e:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 800c942:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800c946:	4b9c      	ldr	r3, [pc, #624]	@ (800cbb8 <_printf_float+0x2c8>)
 800c948:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800c94c:	f7f4 f916 	bl	8000b7c <__aeabi_dcmpun>
 800c950:	bb70      	cbnz	r0, 800c9b0 <_printf_float+0xc0>
 800c952:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800c956:	4b98      	ldr	r3, [pc, #608]	@ (800cbb8 <_printf_float+0x2c8>)
 800c958:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800c95c:	f7f4 f8f0 	bl	8000b40 <__aeabi_dcmple>
 800c960:	bb30      	cbnz	r0, 800c9b0 <_printf_float+0xc0>
 800c962:	2200      	movs	r2, #0
 800c964:	2300      	movs	r3, #0
 800c966:	4640      	mov	r0, r8
 800c968:	4649      	mov	r1, r9
 800c96a:	f7f4 f8df 	bl	8000b2c <__aeabi_dcmplt>
 800c96e:	b110      	cbz	r0, 800c976 <_printf_float+0x86>
 800c970:	232d      	movs	r3, #45	@ 0x2d
 800c972:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800c976:	4a91      	ldr	r2, [pc, #580]	@ (800cbbc <_printf_float+0x2cc>)
 800c978:	4b91      	ldr	r3, [pc, #580]	@ (800cbc0 <_printf_float+0x2d0>)
 800c97a:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 800c97e:	bf94      	ite	ls
 800c980:	4690      	movls	r8, r2
 800c982:	4698      	movhi	r8, r3
 800c984:	2303      	movs	r3, #3
 800c986:	6123      	str	r3, [r4, #16]
 800c988:	f02b 0304 	bic.w	r3, fp, #4
 800c98c:	6023      	str	r3, [r4, #0]
 800c98e:	f04f 0900 	mov.w	r9, #0
 800c992:	9700      	str	r7, [sp, #0]
 800c994:	4633      	mov	r3, r6
 800c996:	aa0b      	add	r2, sp, #44	@ 0x2c
 800c998:	4621      	mov	r1, r4
 800c99a:	4628      	mov	r0, r5
 800c99c:	f000 f9d2 	bl	800cd44 <_printf_common>
 800c9a0:	3001      	adds	r0, #1
 800c9a2:	f040 808d 	bne.w	800cac0 <_printf_float+0x1d0>
 800c9a6:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800c9aa:	b00d      	add	sp, #52	@ 0x34
 800c9ac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c9b0:	4642      	mov	r2, r8
 800c9b2:	464b      	mov	r3, r9
 800c9b4:	4640      	mov	r0, r8
 800c9b6:	4649      	mov	r1, r9
 800c9b8:	f7f4 f8e0 	bl	8000b7c <__aeabi_dcmpun>
 800c9bc:	b140      	cbz	r0, 800c9d0 <_printf_float+0xe0>
 800c9be:	464b      	mov	r3, r9
 800c9c0:	2b00      	cmp	r3, #0
 800c9c2:	bfbc      	itt	lt
 800c9c4:	232d      	movlt	r3, #45	@ 0x2d
 800c9c6:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 800c9ca:	4a7e      	ldr	r2, [pc, #504]	@ (800cbc4 <_printf_float+0x2d4>)
 800c9cc:	4b7e      	ldr	r3, [pc, #504]	@ (800cbc8 <_printf_float+0x2d8>)
 800c9ce:	e7d4      	b.n	800c97a <_printf_float+0x8a>
 800c9d0:	6863      	ldr	r3, [r4, #4]
 800c9d2:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 800c9d6:	9206      	str	r2, [sp, #24]
 800c9d8:	1c5a      	adds	r2, r3, #1
 800c9da:	d13b      	bne.n	800ca54 <_printf_float+0x164>
 800c9dc:	2306      	movs	r3, #6
 800c9de:	6063      	str	r3, [r4, #4]
 800c9e0:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 800c9e4:	2300      	movs	r3, #0
 800c9e6:	6022      	str	r2, [r4, #0]
 800c9e8:	9303      	str	r3, [sp, #12]
 800c9ea:	ab0a      	add	r3, sp, #40	@ 0x28
 800c9ec:	e9cd a301 	strd	sl, r3, [sp, #4]
 800c9f0:	ab09      	add	r3, sp, #36	@ 0x24
 800c9f2:	9300      	str	r3, [sp, #0]
 800c9f4:	6861      	ldr	r1, [r4, #4]
 800c9f6:	ec49 8b10 	vmov	d0, r8, r9
 800c9fa:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 800c9fe:	4628      	mov	r0, r5
 800ca00:	f7ff fed6 	bl	800c7b0 <__cvt>
 800ca04:	9b06      	ldr	r3, [sp, #24]
 800ca06:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800ca08:	2b47      	cmp	r3, #71	@ 0x47
 800ca0a:	4680      	mov	r8, r0
 800ca0c:	d129      	bne.n	800ca62 <_printf_float+0x172>
 800ca0e:	1cc8      	adds	r0, r1, #3
 800ca10:	db02      	blt.n	800ca18 <_printf_float+0x128>
 800ca12:	6863      	ldr	r3, [r4, #4]
 800ca14:	4299      	cmp	r1, r3
 800ca16:	dd41      	ble.n	800ca9c <_printf_float+0x1ac>
 800ca18:	f1aa 0a02 	sub.w	sl, sl, #2
 800ca1c:	fa5f fa8a 	uxtb.w	sl, sl
 800ca20:	3901      	subs	r1, #1
 800ca22:	4652      	mov	r2, sl
 800ca24:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 800ca28:	9109      	str	r1, [sp, #36]	@ 0x24
 800ca2a:	f7ff ff26 	bl	800c87a <__exponent>
 800ca2e:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800ca30:	1813      	adds	r3, r2, r0
 800ca32:	2a01      	cmp	r2, #1
 800ca34:	4681      	mov	r9, r0
 800ca36:	6123      	str	r3, [r4, #16]
 800ca38:	dc02      	bgt.n	800ca40 <_printf_float+0x150>
 800ca3a:	6822      	ldr	r2, [r4, #0]
 800ca3c:	07d2      	lsls	r2, r2, #31
 800ca3e:	d501      	bpl.n	800ca44 <_printf_float+0x154>
 800ca40:	3301      	adds	r3, #1
 800ca42:	6123      	str	r3, [r4, #16]
 800ca44:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 800ca48:	2b00      	cmp	r3, #0
 800ca4a:	d0a2      	beq.n	800c992 <_printf_float+0xa2>
 800ca4c:	232d      	movs	r3, #45	@ 0x2d
 800ca4e:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800ca52:	e79e      	b.n	800c992 <_printf_float+0xa2>
 800ca54:	9a06      	ldr	r2, [sp, #24]
 800ca56:	2a47      	cmp	r2, #71	@ 0x47
 800ca58:	d1c2      	bne.n	800c9e0 <_printf_float+0xf0>
 800ca5a:	2b00      	cmp	r3, #0
 800ca5c:	d1c0      	bne.n	800c9e0 <_printf_float+0xf0>
 800ca5e:	2301      	movs	r3, #1
 800ca60:	e7bd      	b.n	800c9de <_printf_float+0xee>
 800ca62:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800ca66:	d9db      	bls.n	800ca20 <_printf_float+0x130>
 800ca68:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 800ca6c:	d118      	bne.n	800caa0 <_printf_float+0x1b0>
 800ca6e:	2900      	cmp	r1, #0
 800ca70:	6863      	ldr	r3, [r4, #4]
 800ca72:	dd0b      	ble.n	800ca8c <_printf_float+0x19c>
 800ca74:	6121      	str	r1, [r4, #16]
 800ca76:	b913      	cbnz	r3, 800ca7e <_printf_float+0x18e>
 800ca78:	6822      	ldr	r2, [r4, #0]
 800ca7a:	07d0      	lsls	r0, r2, #31
 800ca7c:	d502      	bpl.n	800ca84 <_printf_float+0x194>
 800ca7e:	3301      	adds	r3, #1
 800ca80:	440b      	add	r3, r1
 800ca82:	6123      	str	r3, [r4, #16]
 800ca84:	65a1      	str	r1, [r4, #88]	@ 0x58
 800ca86:	f04f 0900 	mov.w	r9, #0
 800ca8a:	e7db      	b.n	800ca44 <_printf_float+0x154>
 800ca8c:	b913      	cbnz	r3, 800ca94 <_printf_float+0x1a4>
 800ca8e:	6822      	ldr	r2, [r4, #0]
 800ca90:	07d2      	lsls	r2, r2, #31
 800ca92:	d501      	bpl.n	800ca98 <_printf_float+0x1a8>
 800ca94:	3302      	adds	r3, #2
 800ca96:	e7f4      	b.n	800ca82 <_printf_float+0x192>
 800ca98:	2301      	movs	r3, #1
 800ca9a:	e7f2      	b.n	800ca82 <_printf_float+0x192>
 800ca9c:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 800caa0:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800caa2:	4299      	cmp	r1, r3
 800caa4:	db05      	blt.n	800cab2 <_printf_float+0x1c2>
 800caa6:	6823      	ldr	r3, [r4, #0]
 800caa8:	6121      	str	r1, [r4, #16]
 800caaa:	07d8      	lsls	r0, r3, #31
 800caac:	d5ea      	bpl.n	800ca84 <_printf_float+0x194>
 800caae:	1c4b      	adds	r3, r1, #1
 800cab0:	e7e7      	b.n	800ca82 <_printf_float+0x192>
 800cab2:	2900      	cmp	r1, #0
 800cab4:	bfd4      	ite	le
 800cab6:	f1c1 0202 	rsble	r2, r1, #2
 800caba:	2201      	movgt	r2, #1
 800cabc:	4413      	add	r3, r2
 800cabe:	e7e0      	b.n	800ca82 <_printf_float+0x192>
 800cac0:	6823      	ldr	r3, [r4, #0]
 800cac2:	055a      	lsls	r2, r3, #21
 800cac4:	d407      	bmi.n	800cad6 <_printf_float+0x1e6>
 800cac6:	6923      	ldr	r3, [r4, #16]
 800cac8:	4642      	mov	r2, r8
 800caca:	4631      	mov	r1, r6
 800cacc:	4628      	mov	r0, r5
 800cace:	47b8      	blx	r7
 800cad0:	3001      	adds	r0, #1
 800cad2:	d12b      	bne.n	800cb2c <_printf_float+0x23c>
 800cad4:	e767      	b.n	800c9a6 <_printf_float+0xb6>
 800cad6:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800cada:	f240 80dd 	bls.w	800cc98 <_printf_float+0x3a8>
 800cade:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800cae2:	2200      	movs	r2, #0
 800cae4:	2300      	movs	r3, #0
 800cae6:	f7f4 f817 	bl	8000b18 <__aeabi_dcmpeq>
 800caea:	2800      	cmp	r0, #0
 800caec:	d033      	beq.n	800cb56 <_printf_float+0x266>
 800caee:	4a37      	ldr	r2, [pc, #220]	@ (800cbcc <_printf_float+0x2dc>)
 800caf0:	2301      	movs	r3, #1
 800caf2:	4631      	mov	r1, r6
 800caf4:	4628      	mov	r0, r5
 800caf6:	47b8      	blx	r7
 800caf8:	3001      	adds	r0, #1
 800cafa:	f43f af54 	beq.w	800c9a6 <_printf_float+0xb6>
 800cafe:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 800cb02:	4543      	cmp	r3, r8
 800cb04:	db02      	blt.n	800cb0c <_printf_float+0x21c>
 800cb06:	6823      	ldr	r3, [r4, #0]
 800cb08:	07d8      	lsls	r0, r3, #31
 800cb0a:	d50f      	bpl.n	800cb2c <_printf_float+0x23c>
 800cb0c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800cb10:	4631      	mov	r1, r6
 800cb12:	4628      	mov	r0, r5
 800cb14:	47b8      	blx	r7
 800cb16:	3001      	adds	r0, #1
 800cb18:	f43f af45 	beq.w	800c9a6 <_printf_float+0xb6>
 800cb1c:	f04f 0900 	mov.w	r9, #0
 800cb20:	f108 38ff 	add.w	r8, r8, #4294967295	@ 0xffffffff
 800cb24:	f104 0a1a 	add.w	sl, r4, #26
 800cb28:	45c8      	cmp	r8, r9
 800cb2a:	dc09      	bgt.n	800cb40 <_printf_float+0x250>
 800cb2c:	6823      	ldr	r3, [r4, #0]
 800cb2e:	079b      	lsls	r3, r3, #30
 800cb30:	f100 8103 	bmi.w	800cd3a <_printf_float+0x44a>
 800cb34:	68e0      	ldr	r0, [r4, #12]
 800cb36:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800cb38:	4298      	cmp	r0, r3
 800cb3a:	bfb8      	it	lt
 800cb3c:	4618      	movlt	r0, r3
 800cb3e:	e734      	b.n	800c9aa <_printf_float+0xba>
 800cb40:	2301      	movs	r3, #1
 800cb42:	4652      	mov	r2, sl
 800cb44:	4631      	mov	r1, r6
 800cb46:	4628      	mov	r0, r5
 800cb48:	47b8      	blx	r7
 800cb4a:	3001      	adds	r0, #1
 800cb4c:	f43f af2b 	beq.w	800c9a6 <_printf_float+0xb6>
 800cb50:	f109 0901 	add.w	r9, r9, #1
 800cb54:	e7e8      	b.n	800cb28 <_printf_float+0x238>
 800cb56:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800cb58:	2b00      	cmp	r3, #0
 800cb5a:	dc39      	bgt.n	800cbd0 <_printf_float+0x2e0>
 800cb5c:	4a1b      	ldr	r2, [pc, #108]	@ (800cbcc <_printf_float+0x2dc>)
 800cb5e:	2301      	movs	r3, #1
 800cb60:	4631      	mov	r1, r6
 800cb62:	4628      	mov	r0, r5
 800cb64:	47b8      	blx	r7
 800cb66:	3001      	adds	r0, #1
 800cb68:	f43f af1d 	beq.w	800c9a6 <_printf_float+0xb6>
 800cb6c:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 800cb70:	ea59 0303 	orrs.w	r3, r9, r3
 800cb74:	d102      	bne.n	800cb7c <_printf_float+0x28c>
 800cb76:	6823      	ldr	r3, [r4, #0]
 800cb78:	07d9      	lsls	r1, r3, #31
 800cb7a:	d5d7      	bpl.n	800cb2c <_printf_float+0x23c>
 800cb7c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800cb80:	4631      	mov	r1, r6
 800cb82:	4628      	mov	r0, r5
 800cb84:	47b8      	blx	r7
 800cb86:	3001      	adds	r0, #1
 800cb88:	f43f af0d 	beq.w	800c9a6 <_printf_float+0xb6>
 800cb8c:	f04f 0a00 	mov.w	sl, #0
 800cb90:	f104 0b1a 	add.w	fp, r4, #26
 800cb94:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800cb96:	425b      	negs	r3, r3
 800cb98:	4553      	cmp	r3, sl
 800cb9a:	dc01      	bgt.n	800cba0 <_printf_float+0x2b0>
 800cb9c:	464b      	mov	r3, r9
 800cb9e:	e793      	b.n	800cac8 <_printf_float+0x1d8>
 800cba0:	2301      	movs	r3, #1
 800cba2:	465a      	mov	r2, fp
 800cba4:	4631      	mov	r1, r6
 800cba6:	4628      	mov	r0, r5
 800cba8:	47b8      	blx	r7
 800cbaa:	3001      	adds	r0, #1
 800cbac:	f43f aefb 	beq.w	800c9a6 <_printf_float+0xb6>
 800cbb0:	f10a 0a01 	add.w	sl, sl, #1
 800cbb4:	e7ee      	b.n	800cb94 <_printf_float+0x2a4>
 800cbb6:	bf00      	nop
 800cbb8:	7fefffff 	.word	0x7fefffff
 800cbbc:	0800f120 	.word	0x0800f120
 800cbc0:	0800f124 	.word	0x0800f124
 800cbc4:	0800f128 	.word	0x0800f128
 800cbc8:	0800f12c 	.word	0x0800f12c
 800cbcc:	0800f130 	.word	0x0800f130
 800cbd0:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800cbd2:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800cbd6:	4553      	cmp	r3, sl
 800cbd8:	bfa8      	it	ge
 800cbda:	4653      	movge	r3, sl
 800cbdc:	2b00      	cmp	r3, #0
 800cbde:	4699      	mov	r9, r3
 800cbe0:	dc36      	bgt.n	800cc50 <_printf_float+0x360>
 800cbe2:	f04f 0b00 	mov.w	fp, #0
 800cbe6:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800cbea:	f104 021a 	add.w	r2, r4, #26
 800cbee:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800cbf0:	9306      	str	r3, [sp, #24]
 800cbf2:	eba3 0309 	sub.w	r3, r3, r9
 800cbf6:	455b      	cmp	r3, fp
 800cbf8:	dc31      	bgt.n	800cc5e <_printf_float+0x36e>
 800cbfa:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800cbfc:	459a      	cmp	sl, r3
 800cbfe:	dc3a      	bgt.n	800cc76 <_printf_float+0x386>
 800cc00:	6823      	ldr	r3, [r4, #0]
 800cc02:	07da      	lsls	r2, r3, #31
 800cc04:	d437      	bmi.n	800cc76 <_printf_float+0x386>
 800cc06:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800cc08:	ebaa 0903 	sub.w	r9, sl, r3
 800cc0c:	9b06      	ldr	r3, [sp, #24]
 800cc0e:	ebaa 0303 	sub.w	r3, sl, r3
 800cc12:	4599      	cmp	r9, r3
 800cc14:	bfa8      	it	ge
 800cc16:	4699      	movge	r9, r3
 800cc18:	f1b9 0f00 	cmp.w	r9, #0
 800cc1c:	dc33      	bgt.n	800cc86 <_printf_float+0x396>
 800cc1e:	f04f 0800 	mov.w	r8, #0
 800cc22:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800cc26:	f104 0b1a 	add.w	fp, r4, #26
 800cc2a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800cc2c:	ebaa 0303 	sub.w	r3, sl, r3
 800cc30:	eba3 0309 	sub.w	r3, r3, r9
 800cc34:	4543      	cmp	r3, r8
 800cc36:	f77f af79 	ble.w	800cb2c <_printf_float+0x23c>
 800cc3a:	2301      	movs	r3, #1
 800cc3c:	465a      	mov	r2, fp
 800cc3e:	4631      	mov	r1, r6
 800cc40:	4628      	mov	r0, r5
 800cc42:	47b8      	blx	r7
 800cc44:	3001      	adds	r0, #1
 800cc46:	f43f aeae 	beq.w	800c9a6 <_printf_float+0xb6>
 800cc4a:	f108 0801 	add.w	r8, r8, #1
 800cc4e:	e7ec      	b.n	800cc2a <_printf_float+0x33a>
 800cc50:	4642      	mov	r2, r8
 800cc52:	4631      	mov	r1, r6
 800cc54:	4628      	mov	r0, r5
 800cc56:	47b8      	blx	r7
 800cc58:	3001      	adds	r0, #1
 800cc5a:	d1c2      	bne.n	800cbe2 <_printf_float+0x2f2>
 800cc5c:	e6a3      	b.n	800c9a6 <_printf_float+0xb6>
 800cc5e:	2301      	movs	r3, #1
 800cc60:	4631      	mov	r1, r6
 800cc62:	4628      	mov	r0, r5
 800cc64:	9206      	str	r2, [sp, #24]
 800cc66:	47b8      	blx	r7
 800cc68:	3001      	adds	r0, #1
 800cc6a:	f43f ae9c 	beq.w	800c9a6 <_printf_float+0xb6>
 800cc6e:	9a06      	ldr	r2, [sp, #24]
 800cc70:	f10b 0b01 	add.w	fp, fp, #1
 800cc74:	e7bb      	b.n	800cbee <_printf_float+0x2fe>
 800cc76:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800cc7a:	4631      	mov	r1, r6
 800cc7c:	4628      	mov	r0, r5
 800cc7e:	47b8      	blx	r7
 800cc80:	3001      	adds	r0, #1
 800cc82:	d1c0      	bne.n	800cc06 <_printf_float+0x316>
 800cc84:	e68f      	b.n	800c9a6 <_printf_float+0xb6>
 800cc86:	9a06      	ldr	r2, [sp, #24]
 800cc88:	464b      	mov	r3, r9
 800cc8a:	4442      	add	r2, r8
 800cc8c:	4631      	mov	r1, r6
 800cc8e:	4628      	mov	r0, r5
 800cc90:	47b8      	blx	r7
 800cc92:	3001      	adds	r0, #1
 800cc94:	d1c3      	bne.n	800cc1e <_printf_float+0x32e>
 800cc96:	e686      	b.n	800c9a6 <_printf_float+0xb6>
 800cc98:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800cc9c:	f1ba 0f01 	cmp.w	sl, #1
 800cca0:	dc01      	bgt.n	800cca6 <_printf_float+0x3b6>
 800cca2:	07db      	lsls	r3, r3, #31
 800cca4:	d536      	bpl.n	800cd14 <_printf_float+0x424>
 800cca6:	2301      	movs	r3, #1
 800cca8:	4642      	mov	r2, r8
 800ccaa:	4631      	mov	r1, r6
 800ccac:	4628      	mov	r0, r5
 800ccae:	47b8      	blx	r7
 800ccb0:	3001      	adds	r0, #1
 800ccb2:	f43f ae78 	beq.w	800c9a6 <_printf_float+0xb6>
 800ccb6:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800ccba:	4631      	mov	r1, r6
 800ccbc:	4628      	mov	r0, r5
 800ccbe:	47b8      	blx	r7
 800ccc0:	3001      	adds	r0, #1
 800ccc2:	f43f ae70 	beq.w	800c9a6 <_printf_float+0xb6>
 800ccc6:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800ccca:	2200      	movs	r2, #0
 800cccc:	2300      	movs	r3, #0
 800ccce:	f10a 3aff 	add.w	sl, sl, #4294967295	@ 0xffffffff
 800ccd2:	f7f3 ff21 	bl	8000b18 <__aeabi_dcmpeq>
 800ccd6:	b9c0      	cbnz	r0, 800cd0a <_printf_float+0x41a>
 800ccd8:	4653      	mov	r3, sl
 800ccda:	f108 0201 	add.w	r2, r8, #1
 800ccde:	4631      	mov	r1, r6
 800cce0:	4628      	mov	r0, r5
 800cce2:	47b8      	blx	r7
 800cce4:	3001      	adds	r0, #1
 800cce6:	d10c      	bne.n	800cd02 <_printf_float+0x412>
 800cce8:	e65d      	b.n	800c9a6 <_printf_float+0xb6>
 800ccea:	2301      	movs	r3, #1
 800ccec:	465a      	mov	r2, fp
 800ccee:	4631      	mov	r1, r6
 800ccf0:	4628      	mov	r0, r5
 800ccf2:	47b8      	blx	r7
 800ccf4:	3001      	adds	r0, #1
 800ccf6:	f43f ae56 	beq.w	800c9a6 <_printf_float+0xb6>
 800ccfa:	f108 0801 	add.w	r8, r8, #1
 800ccfe:	45d0      	cmp	r8, sl
 800cd00:	dbf3      	blt.n	800ccea <_printf_float+0x3fa>
 800cd02:	464b      	mov	r3, r9
 800cd04:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 800cd08:	e6df      	b.n	800caca <_printf_float+0x1da>
 800cd0a:	f04f 0800 	mov.w	r8, #0
 800cd0e:	f104 0b1a 	add.w	fp, r4, #26
 800cd12:	e7f4      	b.n	800ccfe <_printf_float+0x40e>
 800cd14:	2301      	movs	r3, #1
 800cd16:	4642      	mov	r2, r8
 800cd18:	e7e1      	b.n	800ccde <_printf_float+0x3ee>
 800cd1a:	2301      	movs	r3, #1
 800cd1c:	464a      	mov	r2, r9
 800cd1e:	4631      	mov	r1, r6
 800cd20:	4628      	mov	r0, r5
 800cd22:	47b8      	blx	r7
 800cd24:	3001      	adds	r0, #1
 800cd26:	f43f ae3e 	beq.w	800c9a6 <_printf_float+0xb6>
 800cd2a:	f108 0801 	add.w	r8, r8, #1
 800cd2e:	68e3      	ldr	r3, [r4, #12]
 800cd30:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800cd32:	1a5b      	subs	r3, r3, r1
 800cd34:	4543      	cmp	r3, r8
 800cd36:	dcf0      	bgt.n	800cd1a <_printf_float+0x42a>
 800cd38:	e6fc      	b.n	800cb34 <_printf_float+0x244>
 800cd3a:	f04f 0800 	mov.w	r8, #0
 800cd3e:	f104 0919 	add.w	r9, r4, #25
 800cd42:	e7f4      	b.n	800cd2e <_printf_float+0x43e>

0800cd44 <_printf_common>:
 800cd44:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800cd48:	4616      	mov	r6, r2
 800cd4a:	4698      	mov	r8, r3
 800cd4c:	688a      	ldr	r2, [r1, #8]
 800cd4e:	690b      	ldr	r3, [r1, #16]
 800cd50:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800cd54:	4293      	cmp	r3, r2
 800cd56:	bfb8      	it	lt
 800cd58:	4613      	movlt	r3, r2
 800cd5a:	6033      	str	r3, [r6, #0]
 800cd5c:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800cd60:	4607      	mov	r7, r0
 800cd62:	460c      	mov	r4, r1
 800cd64:	b10a      	cbz	r2, 800cd6a <_printf_common+0x26>
 800cd66:	3301      	adds	r3, #1
 800cd68:	6033      	str	r3, [r6, #0]
 800cd6a:	6823      	ldr	r3, [r4, #0]
 800cd6c:	0699      	lsls	r1, r3, #26
 800cd6e:	bf42      	ittt	mi
 800cd70:	6833      	ldrmi	r3, [r6, #0]
 800cd72:	3302      	addmi	r3, #2
 800cd74:	6033      	strmi	r3, [r6, #0]
 800cd76:	6825      	ldr	r5, [r4, #0]
 800cd78:	f015 0506 	ands.w	r5, r5, #6
 800cd7c:	d106      	bne.n	800cd8c <_printf_common+0x48>
 800cd7e:	f104 0a19 	add.w	sl, r4, #25
 800cd82:	68e3      	ldr	r3, [r4, #12]
 800cd84:	6832      	ldr	r2, [r6, #0]
 800cd86:	1a9b      	subs	r3, r3, r2
 800cd88:	42ab      	cmp	r3, r5
 800cd8a:	dc26      	bgt.n	800cdda <_printf_common+0x96>
 800cd8c:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800cd90:	6822      	ldr	r2, [r4, #0]
 800cd92:	3b00      	subs	r3, #0
 800cd94:	bf18      	it	ne
 800cd96:	2301      	movne	r3, #1
 800cd98:	0692      	lsls	r2, r2, #26
 800cd9a:	d42b      	bmi.n	800cdf4 <_printf_common+0xb0>
 800cd9c:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800cda0:	4641      	mov	r1, r8
 800cda2:	4638      	mov	r0, r7
 800cda4:	47c8      	blx	r9
 800cda6:	3001      	adds	r0, #1
 800cda8:	d01e      	beq.n	800cde8 <_printf_common+0xa4>
 800cdaa:	6823      	ldr	r3, [r4, #0]
 800cdac:	6922      	ldr	r2, [r4, #16]
 800cdae:	f003 0306 	and.w	r3, r3, #6
 800cdb2:	2b04      	cmp	r3, #4
 800cdb4:	bf02      	ittt	eq
 800cdb6:	68e5      	ldreq	r5, [r4, #12]
 800cdb8:	6833      	ldreq	r3, [r6, #0]
 800cdba:	1aed      	subeq	r5, r5, r3
 800cdbc:	68a3      	ldr	r3, [r4, #8]
 800cdbe:	bf0c      	ite	eq
 800cdc0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800cdc4:	2500      	movne	r5, #0
 800cdc6:	4293      	cmp	r3, r2
 800cdc8:	bfc4      	itt	gt
 800cdca:	1a9b      	subgt	r3, r3, r2
 800cdcc:	18ed      	addgt	r5, r5, r3
 800cdce:	2600      	movs	r6, #0
 800cdd0:	341a      	adds	r4, #26
 800cdd2:	42b5      	cmp	r5, r6
 800cdd4:	d11a      	bne.n	800ce0c <_printf_common+0xc8>
 800cdd6:	2000      	movs	r0, #0
 800cdd8:	e008      	b.n	800cdec <_printf_common+0xa8>
 800cdda:	2301      	movs	r3, #1
 800cddc:	4652      	mov	r2, sl
 800cdde:	4641      	mov	r1, r8
 800cde0:	4638      	mov	r0, r7
 800cde2:	47c8      	blx	r9
 800cde4:	3001      	adds	r0, #1
 800cde6:	d103      	bne.n	800cdf0 <_printf_common+0xac>
 800cde8:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800cdec:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800cdf0:	3501      	adds	r5, #1
 800cdf2:	e7c6      	b.n	800cd82 <_printf_common+0x3e>
 800cdf4:	18e1      	adds	r1, r4, r3
 800cdf6:	1c5a      	adds	r2, r3, #1
 800cdf8:	2030      	movs	r0, #48	@ 0x30
 800cdfa:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800cdfe:	4422      	add	r2, r4
 800ce00:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800ce04:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800ce08:	3302      	adds	r3, #2
 800ce0a:	e7c7      	b.n	800cd9c <_printf_common+0x58>
 800ce0c:	2301      	movs	r3, #1
 800ce0e:	4622      	mov	r2, r4
 800ce10:	4641      	mov	r1, r8
 800ce12:	4638      	mov	r0, r7
 800ce14:	47c8      	blx	r9
 800ce16:	3001      	adds	r0, #1
 800ce18:	d0e6      	beq.n	800cde8 <_printf_common+0xa4>
 800ce1a:	3601      	adds	r6, #1
 800ce1c:	e7d9      	b.n	800cdd2 <_printf_common+0x8e>
	...

0800ce20 <_printf_i>:
 800ce20:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800ce24:	7e0f      	ldrb	r7, [r1, #24]
 800ce26:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800ce28:	2f78      	cmp	r7, #120	@ 0x78
 800ce2a:	4691      	mov	r9, r2
 800ce2c:	4680      	mov	r8, r0
 800ce2e:	460c      	mov	r4, r1
 800ce30:	469a      	mov	sl, r3
 800ce32:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800ce36:	d807      	bhi.n	800ce48 <_printf_i+0x28>
 800ce38:	2f62      	cmp	r7, #98	@ 0x62
 800ce3a:	d80a      	bhi.n	800ce52 <_printf_i+0x32>
 800ce3c:	2f00      	cmp	r7, #0
 800ce3e:	f000 80d2 	beq.w	800cfe6 <_printf_i+0x1c6>
 800ce42:	2f58      	cmp	r7, #88	@ 0x58
 800ce44:	f000 80b9 	beq.w	800cfba <_printf_i+0x19a>
 800ce48:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800ce4c:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800ce50:	e03a      	b.n	800cec8 <_printf_i+0xa8>
 800ce52:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800ce56:	2b15      	cmp	r3, #21
 800ce58:	d8f6      	bhi.n	800ce48 <_printf_i+0x28>
 800ce5a:	a101      	add	r1, pc, #4	@ (adr r1, 800ce60 <_printf_i+0x40>)
 800ce5c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800ce60:	0800ceb9 	.word	0x0800ceb9
 800ce64:	0800cecd 	.word	0x0800cecd
 800ce68:	0800ce49 	.word	0x0800ce49
 800ce6c:	0800ce49 	.word	0x0800ce49
 800ce70:	0800ce49 	.word	0x0800ce49
 800ce74:	0800ce49 	.word	0x0800ce49
 800ce78:	0800cecd 	.word	0x0800cecd
 800ce7c:	0800ce49 	.word	0x0800ce49
 800ce80:	0800ce49 	.word	0x0800ce49
 800ce84:	0800ce49 	.word	0x0800ce49
 800ce88:	0800ce49 	.word	0x0800ce49
 800ce8c:	0800cfcd 	.word	0x0800cfcd
 800ce90:	0800cef7 	.word	0x0800cef7
 800ce94:	0800cf87 	.word	0x0800cf87
 800ce98:	0800ce49 	.word	0x0800ce49
 800ce9c:	0800ce49 	.word	0x0800ce49
 800cea0:	0800cfef 	.word	0x0800cfef
 800cea4:	0800ce49 	.word	0x0800ce49
 800cea8:	0800cef7 	.word	0x0800cef7
 800ceac:	0800ce49 	.word	0x0800ce49
 800ceb0:	0800ce49 	.word	0x0800ce49
 800ceb4:	0800cf8f 	.word	0x0800cf8f
 800ceb8:	6833      	ldr	r3, [r6, #0]
 800ceba:	1d1a      	adds	r2, r3, #4
 800cebc:	681b      	ldr	r3, [r3, #0]
 800cebe:	6032      	str	r2, [r6, #0]
 800cec0:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800cec4:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800cec8:	2301      	movs	r3, #1
 800ceca:	e09d      	b.n	800d008 <_printf_i+0x1e8>
 800cecc:	6833      	ldr	r3, [r6, #0]
 800cece:	6820      	ldr	r0, [r4, #0]
 800ced0:	1d19      	adds	r1, r3, #4
 800ced2:	6031      	str	r1, [r6, #0]
 800ced4:	0606      	lsls	r6, r0, #24
 800ced6:	d501      	bpl.n	800cedc <_printf_i+0xbc>
 800ced8:	681d      	ldr	r5, [r3, #0]
 800ceda:	e003      	b.n	800cee4 <_printf_i+0xc4>
 800cedc:	0645      	lsls	r5, r0, #25
 800cede:	d5fb      	bpl.n	800ced8 <_printf_i+0xb8>
 800cee0:	f9b3 5000 	ldrsh.w	r5, [r3]
 800cee4:	2d00      	cmp	r5, #0
 800cee6:	da03      	bge.n	800cef0 <_printf_i+0xd0>
 800cee8:	232d      	movs	r3, #45	@ 0x2d
 800ceea:	426d      	negs	r5, r5
 800ceec:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800cef0:	4859      	ldr	r0, [pc, #356]	@ (800d058 <_printf_i+0x238>)
 800cef2:	230a      	movs	r3, #10
 800cef4:	e011      	b.n	800cf1a <_printf_i+0xfa>
 800cef6:	6821      	ldr	r1, [r4, #0]
 800cef8:	6833      	ldr	r3, [r6, #0]
 800cefa:	0608      	lsls	r0, r1, #24
 800cefc:	f853 5b04 	ldr.w	r5, [r3], #4
 800cf00:	d402      	bmi.n	800cf08 <_printf_i+0xe8>
 800cf02:	0649      	lsls	r1, r1, #25
 800cf04:	bf48      	it	mi
 800cf06:	b2ad      	uxthmi	r5, r5
 800cf08:	2f6f      	cmp	r7, #111	@ 0x6f
 800cf0a:	4853      	ldr	r0, [pc, #332]	@ (800d058 <_printf_i+0x238>)
 800cf0c:	6033      	str	r3, [r6, #0]
 800cf0e:	bf14      	ite	ne
 800cf10:	230a      	movne	r3, #10
 800cf12:	2308      	moveq	r3, #8
 800cf14:	2100      	movs	r1, #0
 800cf16:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800cf1a:	6866      	ldr	r6, [r4, #4]
 800cf1c:	60a6      	str	r6, [r4, #8]
 800cf1e:	2e00      	cmp	r6, #0
 800cf20:	bfa2      	ittt	ge
 800cf22:	6821      	ldrge	r1, [r4, #0]
 800cf24:	f021 0104 	bicge.w	r1, r1, #4
 800cf28:	6021      	strge	r1, [r4, #0]
 800cf2a:	b90d      	cbnz	r5, 800cf30 <_printf_i+0x110>
 800cf2c:	2e00      	cmp	r6, #0
 800cf2e:	d04b      	beq.n	800cfc8 <_printf_i+0x1a8>
 800cf30:	4616      	mov	r6, r2
 800cf32:	fbb5 f1f3 	udiv	r1, r5, r3
 800cf36:	fb03 5711 	mls	r7, r3, r1, r5
 800cf3a:	5dc7      	ldrb	r7, [r0, r7]
 800cf3c:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800cf40:	462f      	mov	r7, r5
 800cf42:	42bb      	cmp	r3, r7
 800cf44:	460d      	mov	r5, r1
 800cf46:	d9f4      	bls.n	800cf32 <_printf_i+0x112>
 800cf48:	2b08      	cmp	r3, #8
 800cf4a:	d10b      	bne.n	800cf64 <_printf_i+0x144>
 800cf4c:	6823      	ldr	r3, [r4, #0]
 800cf4e:	07df      	lsls	r7, r3, #31
 800cf50:	d508      	bpl.n	800cf64 <_printf_i+0x144>
 800cf52:	6923      	ldr	r3, [r4, #16]
 800cf54:	6861      	ldr	r1, [r4, #4]
 800cf56:	4299      	cmp	r1, r3
 800cf58:	bfde      	ittt	le
 800cf5a:	2330      	movle	r3, #48	@ 0x30
 800cf5c:	f806 3c01 	strble.w	r3, [r6, #-1]
 800cf60:	f106 36ff 	addle.w	r6, r6, #4294967295	@ 0xffffffff
 800cf64:	1b92      	subs	r2, r2, r6
 800cf66:	6122      	str	r2, [r4, #16]
 800cf68:	f8cd a000 	str.w	sl, [sp]
 800cf6c:	464b      	mov	r3, r9
 800cf6e:	aa03      	add	r2, sp, #12
 800cf70:	4621      	mov	r1, r4
 800cf72:	4640      	mov	r0, r8
 800cf74:	f7ff fee6 	bl	800cd44 <_printf_common>
 800cf78:	3001      	adds	r0, #1
 800cf7a:	d14a      	bne.n	800d012 <_printf_i+0x1f2>
 800cf7c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800cf80:	b004      	add	sp, #16
 800cf82:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800cf86:	6823      	ldr	r3, [r4, #0]
 800cf88:	f043 0320 	orr.w	r3, r3, #32
 800cf8c:	6023      	str	r3, [r4, #0]
 800cf8e:	4833      	ldr	r0, [pc, #204]	@ (800d05c <_printf_i+0x23c>)
 800cf90:	2778      	movs	r7, #120	@ 0x78
 800cf92:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800cf96:	6823      	ldr	r3, [r4, #0]
 800cf98:	6831      	ldr	r1, [r6, #0]
 800cf9a:	061f      	lsls	r7, r3, #24
 800cf9c:	f851 5b04 	ldr.w	r5, [r1], #4
 800cfa0:	d402      	bmi.n	800cfa8 <_printf_i+0x188>
 800cfa2:	065f      	lsls	r7, r3, #25
 800cfa4:	bf48      	it	mi
 800cfa6:	b2ad      	uxthmi	r5, r5
 800cfa8:	6031      	str	r1, [r6, #0]
 800cfaa:	07d9      	lsls	r1, r3, #31
 800cfac:	bf44      	itt	mi
 800cfae:	f043 0320 	orrmi.w	r3, r3, #32
 800cfb2:	6023      	strmi	r3, [r4, #0]
 800cfb4:	b11d      	cbz	r5, 800cfbe <_printf_i+0x19e>
 800cfb6:	2310      	movs	r3, #16
 800cfb8:	e7ac      	b.n	800cf14 <_printf_i+0xf4>
 800cfba:	4827      	ldr	r0, [pc, #156]	@ (800d058 <_printf_i+0x238>)
 800cfbc:	e7e9      	b.n	800cf92 <_printf_i+0x172>
 800cfbe:	6823      	ldr	r3, [r4, #0]
 800cfc0:	f023 0320 	bic.w	r3, r3, #32
 800cfc4:	6023      	str	r3, [r4, #0]
 800cfc6:	e7f6      	b.n	800cfb6 <_printf_i+0x196>
 800cfc8:	4616      	mov	r6, r2
 800cfca:	e7bd      	b.n	800cf48 <_printf_i+0x128>
 800cfcc:	6833      	ldr	r3, [r6, #0]
 800cfce:	6825      	ldr	r5, [r4, #0]
 800cfd0:	6961      	ldr	r1, [r4, #20]
 800cfd2:	1d18      	adds	r0, r3, #4
 800cfd4:	6030      	str	r0, [r6, #0]
 800cfd6:	062e      	lsls	r6, r5, #24
 800cfd8:	681b      	ldr	r3, [r3, #0]
 800cfda:	d501      	bpl.n	800cfe0 <_printf_i+0x1c0>
 800cfdc:	6019      	str	r1, [r3, #0]
 800cfde:	e002      	b.n	800cfe6 <_printf_i+0x1c6>
 800cfe0:	0668      	lsls	r0, r5, #25
 800cfe2:	d5fb      	bpl.n	800cfdc <_printf_i+0x1bc>
 800cfe4:	8019      	strh	r1, [r3, #0]
 800cfe6:	2300      	movs	r3, #0
 800cfe8:	6123      	str	r3, [r4, #16]
 800cfea:	4616      	mov	r6, r2
 800cfec:	e7bc      	b.n	800cf68 <_printf_i+0x148>
 800cfee:	6833      	ldr	r3, [r6, #0]
 800cff0:	1d1a      	adds	r2, r3, #4
 800cff2:	6032      	str	r2, [r6, #0]
 800cff4:	681e      	ldr	r6, [r3, #0]
 800cff6:	6862      	ldr	r2, [r4, #4]
 800cff8:	2100      	movs	r1, #0
 800cffa:	4630      	mov	r0, r6
 800cffc:	f7f3 f910 	bl	8000220 <memchr>
 800d000:	b108      	cbz	r0, 800d006 <_printf_i+0x1e6>
 800d002:	1b80      	subs	r0, r0, r6
 800d004:	6060      	str	r0, [r4, #4]
 800d006:	6863      	ldr	r3, [r4, #4]
 800d008:	6123      	str	r3, [r4, #16]
 800d00a:	2300      	movs	r3, #0
 800d00c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800d010:	e7aa      	b.n	800cf68 <_printf_i+0x148>
 800d012:	6923      	ldr	r3, [r4, #16]
 800d014:	4632      	mov	r2, r6
 800d016:	4649      	mov	r1, r9
 800d018:	4640      	mov	r0, r8
 800d01a:	47d0      	blx	sl
 800d01c:	3001      	adds	r0, #1
 800d01e:	d0ad      	beq.n	800cf7c <_printf_i+0x15c>
 800d020:	6823      	ldr	r3, [r4, #0]
 800d022:	079b      	lsls	r3, r3, #30
 800d024:	d413      	bmi.n	800d04e <_printf_i+0x22e>
 800d026:	68e0      	ldr	r0, [r4, #12]
 800d028:	9b03      	ldr	r3, [sp, #12]
 800d02a:	4298      	cmp	r0, r3
 800d02c:	bfb8      	it	lt
 800d02e:	4618      	movlt	r0, r3
 800d030:	e7a6      	b.n	800cf80 <_printf_i+0x160>
 800d032:	2301      	movs	r3, #1
 800d034:	4632      	mov	r2, r6
 800d036:	4649      	mov	r1, r9
 800d038:	4640      	mov	r0, r8
 800d03a:	47d0      	blx	sl
 800d03c:	3001      	adds	r0, #1
 800d03e:	d09d      	beq.n	800cf7c <_printf_i+0x15c>
 800d040:	3501      	adds	r5, #1
 800d042:	68e3      	ldr	r3, [r4, #12]
 800d044:	9903      	ldr	r1, [sp, #12]
 800d046:	1a5b      	subs	r3, r3, r1
 800d048:	42ab      	cmp	r3, r5
 800d04a:	dcf2      	bgt.n	800d032 <_printf_i+0x212>
 800d04c:	e7eb      	b.n	800d026 <_printf_i+0x206>
 800d04e:	2500      	movs	r5, #0
 800d050:	f104 0619 	add.w	r6, r4, #25
 800d054:	e7f5      	b.n	800d042 <_printf_i+0x222>
 800d056:	bf00      	nop
 800d058:	0800f132 	.word	0x0800f132
 800d05c:	0800f143 	.word	0x0800f143

0800d060 <std>:
 800d060:	2300      	movs	r3, #0
 800d062:	b510      	push	{r4, lr}
 800d064:	4604      	mov	r4, r0
 800d066:	e9c0 3300 	strd	r3, r3, [r0]
 800d06a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800d06e:	6083      	str	r3, [r0, #8]
 800d070:	8181      	strh	r1, [r0, #12]
 800d072:	6643      	str	r3, [r0, #100]	@ 0x64
 800d074:	81c2      	strh	r2, [r0, #14]
 800d076:	6183      	str	r3, [r0, #24]
 800d078:	4619      	mov	r1, r3
 800d07a:	2208      	movs	r2, #8
 800d07c:	305c      	adds	r0, #92	@ 0x5c
 800d07e:	f000 f8f4 	bl	800d26a <memset>
 800d082:	4b0d      	ldr	r3, [pc, #52]	@ (800d0b8 <std+0x58>)
 800d084:	6263      	str	r3, [r4, #36]	@ 0x24
 800d086:	4b0d      	ldr	r3, [pc, #52]	@ (800d0bc <std+0x5c>)
 800d088:	62a3      	str	r3, [r4, #40]	@ 0x28
 800d08a:	4b0d      	ldr	r3, [pc, #52]	@ (800d0c0 <std+0x60>)
 800d08c:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800d08e:	4b0d      	ldr	r3, [pc, #52]	@ (800d0c4 <std+0x64>)
 800d090:	6323      	str	r3, [r4, #48]	@ 0x30
 800d092:	4b0d      	ldr	r3, [pc, #52]	@ (800d0c8 <std+0x68>)
 800d094:	6224      	str	r4, [r4, #32]
 800d096:	429c      	cmp	r4, r3
 800d098:	d006      	beq.n	800d0a8 <std+0x48>
 800d09a:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800d09e:	4294      	cmp	r4, r2
 800d0a0:	d002      	beq.n	800d0a8 <std+0x48>
 800d0a2:	33d0      	adds	r3, #208	@ 0xd0
 800d0a4:	429c      	cmp	r4, r3
 800d0a6:	d105      	bne.n	800d0b4 <std+0x54>
 800d0a8:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800d0ac:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800d0b0:	f000 b958 	b.w	800d364 <__retarget_lock_init_recursive>
 800d0b4:	bd10      	pop	{r4, pc}
 800d0b6:	bf00      	nop
 800d0b8:	0800d1e5 	.word	0x0800d1e5
 800d0bc:	0800d207 	.word	0x0800d207
 800d0c0:	0800d23f 	.word	0x0800d23f
 800d0c4:	0800d263 	.word	0x0800d263
 800d0c8:	20001b68 	.word	0x20001b68

0800d0cc <stdio_exit_handler>:
 800d0cc:	4a02      	ldr	r2, [pc, #8]	@ (800d0d8 <stdio_exit_handler+0xc>)
 800d0ce:	4903      	ldr	r1, [pc, #12]	@ (800d0dc <stdio_exit_handler+0x10>)
 800d0d0:	4803      	ldr	r0, [pc, #12]	@ (800d0e0 <stdio_exit_handler+0x14>)
 800d0d2:	f000 b869 	b.w	800d1a8 <_fwalk_sglue>
 800d0d6:	bf00      	nop
 800d0d8:	200002e4 	.word	0x200002e4
 800d0dc:	0800ea15 	.word	0x0800ea15
 800d0e0:	200002f4 	.word	0x200002f4

0800d0e4 <cleanup_stdio>:
 800d0e4:	6841      	ldr	r1, [r0, #4]
 800d0e6:	4b0c      	ldr	r3, [pc, #48]	@ (800d118 <cleanup_stdio+0x34>)
 800d0e8:	4299      	cmp	r1, r3
 800d0ea:	b510      	push	{r4, lr}
 800d0ec:	4604      	mov	r4, r0
 800d0ee:	d001      	beq.n	800d0f4 <cleanup_stdio+0x10>
 800d0f0:	f001 fc90 	bl	800ea14 <_fflush_r>
 800d0f4:	68a1      	ldr	r1, [r4, #8]
 800d0f6:	4b09      	ldr	r3, [pc, #36]	@ (800d11c <cleanup_stdio+0x38>)
 800d0f8:	4299      	cmp	r1, r3
 800d0fa:	d002      	beq.n	800d102 <cleanup_stdio+0x1e>
 800d0fc:	4620      	mov	r0, r4
 800d0fe:	f001 fc89 	bl	800ea14 <_fflush_r>
 800d102:	68e1      	ldr	r1, [r4, #12]
 800d104:	4b06      	ldr	r3, [pc, #24]	@ (800d120 <cleanup_stdio+0x3c>)
 800d106:	4299      	cmp	r1, r3
 800d108:	d004      	beq.n	800d114 <cleanup_stdio+0x30>
 800d10a:	4620      	mov	r0, r4
 800d10c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800d110:	f001 bc80 	b.w	800ea14 <_fflush_r>
 800d114:	bd10      	pop	{r4, pc}
 800d116:	bf00      	nop
 800d118:	20001b68 	.word	0x20001b68
 800d11c:	20001bd0 	.word	0x20001bd0
 800d120:	20001c38 	.word	0x20001c38

0800d124 <global_stdio_init.part.0>:
 800d124:	b510      	push	{r4, lr}
 800d126:	4b0b      	ldr	r3, [pc, #44]	@ (800d154 <global_stdio_init.part.0+0x30>)
 800d128:	4c0b      	ldr	r4, [pc, #44]	@ (800d158 <global_stdio_init.part.0+0x34>)
 800d12a:	4a0c      	ldr	r2, [pc, #48]	@ (800d15c <global_stdio_init.part.0+0x38>)
 800d12c:	601a      	str	r2, [r3, #0]
 800d12e:	4620      	mov	r0, r4
 800d130:	2200      	movs	r2, #0
 800d132:	2104      	movs	r1, #4
 800d134:	f7ff ff94 	bl	800d060 <std>
 800d138:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800d13c:	2201      	movs	r2, #1
 800d13e:	2109      	movs	r1, #9
 800d140:	f7ff ff8e 	bl	800d060 <std>
 800d144:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800d148:	2202      	movs	r2, #2
 800d14a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800d14e:	2112      	movs	r1, #18
 800d150:	f7ff bf86 	b.w	800d060 <std>
 800d154:	20001ca0 	.word	0x20001ca0
 800d158:	20001b68 	.word	0x20001b68
 800d15c:	0800d0cd 	.word	0x0800d0cd

0800d160 <__sfp_lock_acquire>:
 800d160:	4801      	ldr	r0, [pc, #4]	@ (800d168 <__sfp_lock_acquire+0x8>)
 800d162:	f000 b900 	b.w	800d366 <__retarget_lock_acquire_recursive>
 800d166:	bf00      	nop
 800d168:	20001ca9 	.word	0x20001ca9

0800d16c <__sfp_lock_release>:
 800d16c:	4801      	ldr	r0, [pc, #4]	@ (800d174 <__sfp_lock_release+0x8>)
 800d16e:	f000 b8fb 	b.w	800d368 <__retarget_lock_release_recursive>
 800d172:	bf00      	nop
 800d174:	20001ca9 	.word	0x20001ca9

0800d178 <__sinit>:
 800d178:	b510      	push	{r4, lr}
 800d17a:	4604      	mov	r4, r0
 800d17c:	f7ff fff0 	bl	800d160 <__sfp_lock_acquire>
 800d180:	6a23      	ldr	r3, [r4, #32]
 800d182:	b11b      	cbz	r3, 800d18c <__sinit+0x14>
 800d184:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800d188:	f7ff bff0 	b.w	800d16c <__sfp_lock_release>
 800d18c:	4b04      	ldr	r3, [pc, #16]	@ (800d1a0 <__sinit+0x28>)
 800d18e:	6223      	str	r3, [r4, #32]
 800d190:	4b04      	ldr	r3, [pc, #16]	@ (800d1a4 <__sinit+0x2c>)
 800d192:	681b      	ldr	r3, [r3, #0]
 800d194:	2b00      	cmp	r3, #0
 800d196:	d1f5      	bne.n	800d184 <__sinit+0xc>
 800d198:	f7ff ffc4 	bl	800d124 <global_stdio_init.part.0>
 800d19c:	e7f2      	b.n	800d184 <__sinit+0xc>
 800d19e:	bf00      	nop
 800d1a0:	0800d0e5 	.word	0x0800d0e5
 800d1a4:	20001ca0 	.word	0x20001ca0

0800d1a8 <_fwalk_sglue>:
 800d1a8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800d1ac:	4607      	mov	r7, r0
 800d1ae:	4688      	mov	r8, r1
 800d1b0:	4614      	mov	r4, r2
 800d1b2:	2600      	movs	r6, #0
 800d1b4:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800d1b8:	f1b9 0901 	subs.w	r9, r9, #1
 800d1bc:	d505      	bpl.n	800d1ca <_fwalk_sglue+0x22>
 800d1be:	6824      	ldr	r4, [r4, #0]
 800d1c0:	2c00      	cmp	r4, #0
 800d1c2:	d1f7      	bne.n	800d1b4 <_fwalk_sglue+0xc>
 800d1c4:	4630      	mov	r0, r6
 800d1c6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800d1ca:	89ab      	ldrh	r3, [r5, #12]
 800d1cc:	2b01      	cmp	r3, #1
 800d1ce:	d907      	bls.n	800d1e0 <_fwalk_sglue+0x38>
 800d1d0:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800d1d4:	3301      	adds	r3, #1
 800d1d6:	d003      	beq.n	800d1e0 <_fwalk_sglue+0x38>
 800d1d8:	4629      	mov	r1, r5
 800d1da:	4638      	mov	r0, r7
 800d1dc:	47c0      	blx	r8
 800d1de:	4306      	orrs	r6, r0
 800d1e0:	3568      	adds	r5, #104	@ 0x68
 800d1e2:	e7e9      	b.n	800d1b8 <_fwalk_sglue+0x10>

0800d1e4 <__sread>:
 800d1e4:	b510      	push	{r4, lr}
 800d1e6:	460c      	mov	r4, r1
 800d1e8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d1ec:	f000 f86c 	bl	800d2c8 <_read_r>
 800d1f0:	2800      	cmp	r0, #0
 800d1f2:	bfab      	itete	ge
 800d1f4:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800d1f6:	89a3      	ldrhlt	r3, [r4, #12]
 800d1f8:	181b      	addge	r3, r3, r0
 800d1fa:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800d1fe:	bfac      	ite	ge
 800d200:	6563      	strge	r3, [r4, #84]	@ 0x54
 800d202:	81a3      	strhlt	r3, [r4, #12]
 800d204:	bd10      	pop	{r4, pc}

0800d206 <__swrite>:
 800d206:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d20a:	461f      	mov	r7, r3
 800d20c:	898b      	ldrh	r3, [r1, #12]
 800d20e:	05db      	lsls	r3, r3, #23
 800d210:	4605      	mov	r5, r0
 800d212:	460c      	mov	r4, r1
 800d214:	4616      	mov	r6, r2
 800d216:	d505      	bpl.n	800d224 <__swrite+0x1e>
 800d218:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d21c:	2302      	movs	r3, #2
 800d21e:	2200      	movs	r2, #0
 800d220:	f000 f840 	bl	800d2a4 <_lseek_r>
 800d224:	89a3      	ldrh	r3, [r4, #12]
 800d226:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800d22a:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800d22e:	81a3      	strh	r3, [r4, #12]
 800d230:	4632      	mov	r2, r6
 800d232:	463b      	mov	r3, r7
 800d234:	4628      	mov	r0, r5
 800d236:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800d23a:	f000 b857 	b.w	800d2ec <_write_r>

0800d23e <__sseek>:
 800d23e:	b510      	push	{r4, lr}
 800d240:	460c      	mov	r4, r1
 800d242:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d246:	f000 f82d 	bl	800d2a4 <_lseek_r>
 800d24a:	1c43      	adds	r3, r0, #1
 800d24c:	89a3      	ldrh	r3, [r4, #12]
 800d24e:	bf15      	itete	ne
 800d250:	6560      	strne	r0, [r4, #84]	@ 0x54
 800d252:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800d256:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800d25a:	81a3      	strheq	r3, [r4, #12]
 800d25c:	bf18      	it	ne
 800d25e:	81a3      	strhne	r3, [r4, #12]
 800d260:	bd10      	pop	{r4, pc}

0800d262 <__sclose>:
 800d262:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d266:	f000 b80d 	b.w	800d284 <_close_r>

0800d26a <memset>:
 800d26a:	4402      	add	r2, r0
 800d26c:	4603      	mov	r3, r0
 800d26e:	4293      	cmp	r3, r2
 800d270:	d100      	bne.n	800d274 <memset+0xa>
 800d272:	4770      	bx	lr
 800d274:	f803 1b01 	strb.w	r1, [r3], #1
 800d278:	e7f9      	b.n	800d26e <memset+0x4>
	...

0800d27c <_localeconv_r>:
 800d27c:	4800      	ldr	r0, [pc, #0]	@ (800d280 <_localeconv_r+0x4>)
 800d27e:	4770      	bx	lr
 800d280:	20000430 	.word	0x20000430

0800d284 <_close_r>:
 800d284:	b538      	push	{r3, r4, r5, lr}
 800d286:	4d06      	ldr	r5, [pc, #24]	@ (800d2a0 <_close_r+0x1c>)
 800d288:	2300      	movs	r3, #0
 800d28a:	4604      	mov	r4, r0
 800d28c:	4608      	mov	r0, r1
 800d28e:	602b      	str	r3, [r5, #0]
 800d290:	f7f5 fcf2 	bl	8002c78 <_close>
 800d294:	1c43      	adds	r3, r0, #1
 800d296:	d102      	bne.n	800d29e <_close_r+0x1a>
 800d298:	682b      	ldr	r3, [r5, #0]
 800d29a:	b103      	cbz	r3, 800d29e <_close_r+0x1a>
 800d29c:	6023      	str	r3, [r4, #0]
 800d29e:	bd38      	pop	{r3, r4, r5, pc}
 800d2a0:	20001ca4 	.word	0x20001ca4

0800d2a4 <_lseek_r>:
 800d2a4:	b538      	push	{r3, r4, r5, lr}
 800d2a6:	4d07      	ldr	r5, [pc, #28]	@ (800d2c4 <_lseek_r+0x20>)
 800d2a8:	4604      	mov	r4, r0
 800d2aa:	4608      	mov	r0, r1
 800d2ac:	4611      	mov	r1, r2
 800d2ae:	2200      	movs	r2, #0
 800d2b0:	602a      	str	r2, [r5, #0]
 800d2b2:	461a      	mov	r2, r3
 800d2b4:	f7f5 fd07 	bl	8002cc6 <_lseek>
 800d2b8:	1c43      	adds	r3, r0, #1
 800d2ba:	d102      	bne.n	800d2c2 <_lseek_r+0x1e>
 800d2bc:	682b      	ldr	r3, [r5, #0]
 800d2be:	b103      	cbz	r3, 800d2c2 <_lseek_r+0x1e>
 800d2c0:	6023      	str	r3, [r4, #0]
 800d2c2:	bd38      	pop	{r3, r4, r5, pc}
 800d2c4:	20001ca4 	.word	0x20001ca4

0800d2c8 <_read_r>:
 800d2c8:	b538      	push	{r3, r4, r5, lr}
 800d2ca:	4d07      	ldr	r5, [pc, #28]	@ (800d2e8 <_read_r+0x20>)
 800d2cc:	4604      	mov	r4, r0
 800d2ce:	4608      	mov	r0, r1
 800d2d0:	4611      	mov	r1, r2
 800d2d2:	2200      	movs	r2, #0
 800d2d4:	602a      	str	r2, [r5, #0]
 800d2d6:	461a      	mov	r2, r3
 800d2d8:	f7f5 fc95 	bl	8002c06 <_read>
 800d2dc:	1c43      	adds	r3, r0, #1
 800d2de:	d102      	bne.n	800d2e6 <_read_r+0x1e>
 800d2e0:	682b      	ldr	r3, [r5, #0]
 800d2e2:	b103      	cbz	r3, 800d2e6 <_read_r+0x1e>
 800d2e4:	6023      	str	r3, [r4, #0]
 800d2e6:	bd38      	pop	{r3, r4, r5, pc}
 800d2e8:	20001ca4 	.word	0x20001ca4

0800d2ec <_write_r>:
 800d2ec:	b538      	push	{r3, r4, r5, lr}
 800d2ee:	4d07      	ldr	r5, [pc, #28]	@ (800d30c <_write_r+0x20>)
 800d2f0:	4604      	mov	r4, r0
 800d2f2:	4608      	mov	r0, r1
 800d2f4:	4611      	mov	r1, r2
 800d2f6:	2200      	movs	r2, #0
 800d2f8:	602a      	str	r2, [r5, #0]
 800d2fa:	461a      	mov	r2, r3
 800d2fc:	f7f5 fca0 	bl	8002c40 <_write>
 800d300:	1c43      	adds	r3, r0, #1
 800d302:	d102      	bne.n	800d30a <_write_r+0x1e>
 800d304:	682b      	ldr	r3, [r5, #0]
 800d306:	b103      	cbz	r3, 800d30a <_write_r+0x1e>
 800d308:	6023      	str	r3, [r4, #0]
 800d30a:	bd38      	pop	{r3, r4, r5, pc}
 800d30c:	20001ca4 	.word	0x20001ca4

0800d310 <__errno>:
 800d310:	4b01      	ldr	r3, [pc, #4]	@ (800d318 <__errno+0x8>)
 800d312:	6818      	ldr	r0, [r3, #0]
 800d314:	4770      	bx	lr
 800d316:	bf00      	nop
 800d318:	200002f0 	.word	0x200002f0

0800d31c <__libc_init_array>:
 800d31c:	b570      	push	{r4, r5, r6, lr}
 800d31e:	4d0d      	ldr	r5, [pc, #52]	@ (800d354 <__libc_init_array+0x38>)
 800d320:	4c0d      	ldr	r4, [pc, #52]	@ (800d358 <__libc_init_array+0x3c>)
 800d322:	1b64      	subs	r4, r4, r5
 800d324:	10a4      	asrs	r4, r4, #2
 800d326:	2600      	movs	r6, #0
 800d328:	42a6      	cmp	r6, r4
 800d32a:	d109      	bne.n	800d340 <__libc_init_array+0x24>
 800d32c:	4d0b      	ldr	r5, [pc, #44]	@ (800d35c <__libc_init_array+0x40>)
 800d32e:	4c0c      	ldr	r4, [pc, #48]	@ (800d360 <__libc_init_array+0x44>)
 800d330:	f001 febe 	bl	800f0b0 <_init>
 800d334:	1b64      	subs	r4, r4, r5
 800d336:	10a4      	asrs	r4, r4, #2
 800d338:	2600      	movs	r6, #0
 800d33a:	42a6      	cmp	r6, r4
 800d33c:	d105      	bne.n	800d34a <__libc_init_array+0x2e>
 800d33e:	bd70      	pop	{r4, r5, r6, pc}
 800d340:	f855 3b04 	ldr.w	r3, [r5], #4
 800d344:	4798      	blx	r3
 800d346:	3601      	adds	r6, #1
 800d348:	e7ee      	b.n	800d328 <__libc_init_array+0xc>
 800d34a:	f855 3b04 	ldr.w	r3, [r5], #4
 800d34e:	4798      	blx	r3
 800d350:	3601      	adds	r6, #1
 800d352:	e7f2      	b.n	800d33a <__libc_init_array+0x1e>
 800d354:	0800f498 	.word	0x0800f498
 800d358:	0800f498 	.word	0x0800f498
 800d35c:	0800f498 	.word	0x0800f498
 800d360:	0800f49c 	.word	0x0800f49c

0800d364 <__retarget_lock_init_recursive>:
 800d364:	4770      	bx	lr

0800d366 <__retarget_lock_acquire_recursive>:
 800d366:	4770      	bx	lr

0800d368 <__retarget_lock_release_recursive>:
 800d368:	4770      	bx	lr

0800d36a <quorem>:
 800d36a:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d36e:	6903      	ldr	r3, [r0, #16]
 800d370:	690c      	ldr	r4, [r1, #16]
 800d372:	42a3      	cmp	r3, r4
 800d374:	4607      	mov	r7, r0
 800d376:	db7e      	blt.n	800d476 <quorem+0x10c>
 800d378:	3c01      	subs	r4, #1
 800d37a:	f101 0814 	add.w	r8, r1, #20
 800d37e:	00a3      	lsls	r3, r4, #2
 800d380:	f100 0514 	add.w	r5, r0, #20
 800d384:	9300      	str	r3, [sp, #0]
 800d386:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800d38a:	9301      	str	r3, [sp, #4]
 800d38c:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800d390:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800d394:	3301      	adds	r3, #1
 800d396:	429a      	cmp	r2, r3
 800d398:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800d39c:	fbb2 f6f3 	udiv	r6, r2, r3
 800d3a0:	d32e      	bcc.n	800d400 <quorem+0x96>
 800d3a2:	f04f 0a00 	mov.w	sl, #0
 800d3a6:	46c4      	mov	ip, r8
 800d3a8:	46ae      	mov	lr, r5
 800d3aa:	46d3      	mov	fp, sl
 800d3ac:	f85c 3b04 	ldr.w	r3, [ip], #4
 800d3b0:	b298      	uxth	r0, r3
 800d3b2:	fb06 a000 	mla	r0, r6, r0, sl
 800d3b6:	0c02      	lsrs	r2, r0, #16
 800d3b8:	0c1b      	lsrs	r3, r3, #16
 800d3ba:	fb06 2303 	mla	r3, r6, r3, r2
 800d3be:	f8de 2000 	ldr.w	r2, [lr]
 800d3c2:	b280      	uxth	r0, r0
 800d3c4:	b292      	uxth	r2, r2
 800d3c6:	1a12      	subs	r2, r2, r0
 800d3c8:	445a      	add	r2, fp
 800d3ca:	f8de 0000 	ldr.w	r0, [lr]
 800d3ce:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800d3d2:	b29b      	uxth	r3, r3
 800d3d4:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 800d3d8:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 800d3dc:	b292      	uxth	r2, r2
 800d3de:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 800d3e2:	45e1      	cmp	r9, ip
 800d3e4:	f84e 2b04 	str.w	r2, [lr], #4
 800d3e8:	ea4f 4b23 	mov.w	fp, r3, asr #16
 800d3ec:	d2de      	bcs.n	800d3ac <quorem+0x42>
 800d3ee:	9b00      	ldr	r3, [sp, #0]
 800d3f0:	58eb      	ldr	r3, [r5, r3]
 800d3f2:	b92b      	cbnz	r3, 800d400 <quorem+0x96>
 800d3f4:	9b01      	ldr	r3, [sp, #4]
 800d3f6:	3b04      	subs	r3, #4
 800d3f8:	429d      	cmp	r5, r3
 800d3fa:	461a      	mov	r2, r3
 800d3fc:	d32f      	bcc.n	800d45e <quorem+0xf4>
 800d3fe:	613c      	str	r4, [r7, #16]
 800d400:	4638      	mov	r0, r7
 800d402:	f001 f97b 	bl	800e6fc <__mcmp>
 800d406:	2800      	cmp	r0, #0
 800d408:	db25      	blt.n	800d456 <quorem+0xec>
 800d40a:	4629      	mov	r1, r5
 800d40c:	2000      	movs	r0, #0
 800d40e:	f858 2b04 	ldr.w	r2, [r8], #4
 800d412:	f8d1 c000 	ldr.w	ip, [r1]
 800d416:	fa1f fe82 	uxth.w	lr, r2
 800d41a:	fa1f f38c 	uxth.w	r3, ip
 800d41e:	eba3 030e 	sub.w	r3, r3, lr
 800d422:	4403      	add	r3, r0
 800d424:	0c12      	lsrs	r2, r2, #16
 800d426:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 800d42a:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 800d42e:	b29b      	uxth	r3, r3
 800d430:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800d434:	45c1      	cmp	r9, r8
 800d436:	f841 3b04 	str.w	r3, [r1], #4
 800d43a:	ea4f 4022 	mov.w	r0, r2, asr #16
 800d43e:	d2e6      	bcs.n	800d40e <quorem+0xa4>
 800d440:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800d444:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800d448:	b922      	cbnz	r2, 800d454 <quorem+0xea>
 800d44a:	3b04      	subs	r3, #4
 800d44c:	429d      	cmp	r5, r3
 800d44e:	461a      	mov	r2, r3
 800d450:	d30b      	bcc.n	800d46a <quorem+0x100>
 800d452:	613c      	str	r4, [r7, #16]
 800d454:	3601      	adds	r6, #1
 800d456:	4630      	mov	r0, r6
 800d458:	b003      	add	sp, #12
 800d45a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d45e:	6812      	ldr	r2, [r2, #0]
 800d460:	3b04      	subs	r3, #4
 800d462:	2a00      	cmp	r2, #0
 800d464:	d1cb      	bne.n	800d3fe <quorem+0x94>
 800d466:	3c01      	subs	r4, #1
 800d468:	e7c6      	b.n	800d3f8 <quorem+0x8e>
 800d46a:	6812      	ldr	r2, [r2, #0]
 800d46c:	3b04      	subs	r3, #4
 800d46e:	2a00      	cmp	r2, #0
 800d470:	d1ef      	bne.n	800d452 <quorem+0xe8>
 800d472:	3c01      	subs	r4, #1
 800d474:	e7ea      	b.n	800d44c <quorem+0xe2>
 800d476:	2000      	movs	r0, #0
 800d478:	e7ee      	b.n	800d458 <quorem+0xee>
 800d47a:	0000      	movs	r0, r0
 800d47c:	0000      	movs	r0, r0
	...

0800d480 <_dtoa_r>:
 800d480:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d484:	69c7      	ldr	r7, [r0, #28]
 800d486:	b099      	sub	sp, #100	@ 0x64
 800d488:	ed8d 0b02 	vstr	d0, [sp, #8]
 800d48c:	ec55 4b10 	vmov	r4, r5, d0
 800d490:	9e22      	ldr	r6, [sp, #136]	@ 0x88
 800d492:	9109      	str	r1, [sp, #36]	@ 0x24
 800d494:	4683      	mov	fp, r0
 800d496:	920e      	str	r2, [sp, #56]	@ 0x38
 800d498:	9313      	str	r3, [sp, #76]	@ 0x4c
 800d49a:	b97f      	cbnz	r7, 800d4bc <_dtoa_r+0x3c>
 800d49c:	2010      	movs	r0, #16
 800d49e:	f000 fdfd 	bl	800e09c <malloc>
 800d4a2:	4602      	mov	r2, r0
 800d4a4:	f8cb 001c 	str.w	r0, [fp, #28]
 800d4a8:	b920      	cbnz	r0, 800d4b4 <_dtoa_r+0x34>
 800d4aa:	4ba7      	ldr	r3, [pc, #668]	@ (800d748 <_dtoa_r+0x2c8>)
 800d4ac:	21ef      	movs	r1, #239	@ 0xef
 800d4ae:	48a7      	ldr	r0, [pc, #668]	@ (800d74c <_dtoa_r+0x2cc>)
 800d4b0:	f001 faf6 	bl	800eaa0 <__assert_func>
 800d4b4:	e9c0 7701 	strd	r7, r7, [r0, #4]
 800d4b8:	6007      	str	r7, [r0, #0]
 800d4ba:	60c7      	str	r7, [r0, #12]
 800d4bc:	f8db 301c 	ldr.w	r3, [fp, #28]
 800d4c0:	6819      	ldr	r1, [r3, #0]
 800d4c2:	b159      	cbz	r1, 800d4dc <_dtoa_r+0x5c>
 800d4c4:	685a      	ldr	r2, [r3, #4]
 800d4c6:	604a      	str	r2, [r1, #4]
 800d4c8:	2301      	movs	r3, #1
 800d4ca:	4093      	lsls	r3, r2
 800d4cc:	608b      	str	r3, [r1, #8]
 800d4ce:	4658      	mov	r0, fp
 800d4d0:	f000 feda 	bl	800e288 <_Bfree>
 800d4d4:	f8db 301c 	ldr.w	r3, [fp, #28]
 800d4d8:	2200      	movs	r2, #0
 800d4da:	601a      	str	r2, [r3, #0]
 800d4dc:	1e2b      	subs	r3, r5, #0
 800d4de:	bfb9      	ittee	lt
 800d4e0:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 800d4e4:	9303      	strlt	r3, [sp, #12]
 800d4e6:	2300      	movge	r3, #0
 800d4e8:	6033      	strge	r3, [r6, #0]
 800d4ea:	9f03      	ldr	r7, [sp, #12]
 800d4ec:	4b98      	ldr	r3, [pc, #608]	@ (800d750 <_dtoa_r+0x2d0>)
 800d4ee:	bfbc      	itt	lt
 800d4f0:	2201      	movlt	r2, #1
 800d4f2:	6032      	strlt	r2, [r6, #0]
 800d4f4:	43bb      	bics	r3, r7
 800d4f6:	d112      	bne.n	800d51e <_dtoa_r+0x9e>
 800d4f8:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 800d4fa:	f242 730f 	movw	r3, #9999	@ 0x270f
 800d4fe:	6013      	str	r3, [r2, #0]
 800d500:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800d504:	4323      	orrs	r3, r4
 800d506:	f000 854d 	beq.w	800dfa4 <_dtoa_r+0xb24>
 800d50a:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800d50c:	f8df a254 	ldr.w	sl, [pc, #596]	@ 800d764 <_dtoa_r+0x2e4>
 800d510:	2b00      	cmp	r3, #0
 800d512:	f000 854f 	beq.w	800dfb4 <_dtoa_r+0xb34>
 800d516:	f10a 0303 	add.w	r3, sl, #3
 800d51a:	f000 bd49 	b.w	800dfb0 <_dtoa_r+0xb30>
 800d51e:	ed9d 7b02 	vldr	d7, [sp, #8]
 800d522:	2200      	movs	r2, #0
 800d524:	ec51 0b17 	vmov	r0, r1, d7
 800d528:	2300      	movs	r3, #0
 800d52a:	ed8d 7b0c 	vstr	d7, [sp, #48]	@ 0x30
 800d52e:	f7f3 faf3 	bl	8000b18 <__aeabi_dcmpeq>
 800d532:	4680      	mov	r8, r0
 800d534:	b158      	cbz	r0, 800d54e <_dtoa_r+0xce>
 800d536:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 800d538:	2301      	movs	r3, #1
 800d53a:	6013      	str	r3, [r2, #0]
 800d53c:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800d53e:	b113      	cbz	r3, 800d546 <_dtoa_r+0xc6>
 800d540:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 800d542:	4b84      	ldr	r3, [pc, #528]	@ (800d754 <_dtoa_r+0x2d4>)
 800d544:	6013      	str	r3, [r2, #0]
 800d546:	f8df a220 	ldr.w	sl, [pc, #544]	@ 800d768 <_dtoa_r+0x2e8>
 800d54a:	f000 bd33 	b.w	800dfb4 <_dtoa_r+0xb34>
 800d54e:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 800d552:	aa16      	add	r2, sp, #88	@ 0x58
 800d554:	a917      	add	r1, sp, #92	@ 0x5c
 800d556:	4658      	mov	r0, fp
 800d558:	f001 f980 	bl	800e85c <__d2b>
 800d55c:	f3c7 560a 	ubfx	r6, r7, #20, #11
 800d560:	4681      	mov	r9, r0
 800d562:	2e00      	cmp	r6, #0
 800d564:	d077      	beq.n	800d656 <_dtoa_r+0x1d6>
 800d566:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800d568:	f8cd 8050 	str.w	r8, [sp, #80]	@ 0x50
 800d56c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800d570:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800d574:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 800d578:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 800d57c:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 800d580:	4619      	mov	r1, r3
 800d582:	2200      	movs	r2, #0
 800d584:	4b74      	ldr	r3, [pc, #464]	@ (800d758 <_dtoa_r+0x2d8>)
 800d586:	f7f2 fea7 	bl	80002d8 <__aeabi_dsub>
 800d58a:	a369      	add	r3, pc, #420	@ (adr r3, 800d730 <_dtoa_r+0x2b0>)
 800d58c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d590:	f7f3 f85a 	bl	8000648 <__aeabi_dmul>
 800d594:	a368      	add	r3, pc, #416	@ (adr r3, 800d738 <_dtoa_r+0x2b8>)
 800d596:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d59a:	f7f2 fe9f 	bl	80002dc <__adddf3>
 800d59e:	4604      	mov	r4, r0
 800d5a0:	4630      	mov	r0, r6
 800d5a2:	460d      	mov	r5, r1
 800d5a4:	f7f2 ffe6 	bl	8000574 <__aeabi_i2d>
 800d5a8:	a365      	add	r3, pc, #404	@ (adr r3, 800d740 <_dtoa_r+0x2c0>)
 800d5aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d5ae:	f7f3 f84b 	bl	8000648 <__aeabi_dmul>
 800d5b2:	4602      	mov	r2, r0
 800d5b4:	460b      	mov	r3, r1
 800d5b6:	4620      	mov	r0, r4
 800d5b8:	4629      	mov	r1, r5
 800d5ba:	f7f2 fe8f 	bl	80002dc <__adddf3>
 800d5be:	4604      	mov	r4, r0
 800d5c0:	460d      	mov	r5, r1
 800d5c2:	f7f3 faf1 	bl	8000ba8 <__aeabi_d2iz>
 800d5c6:	2200      	movs	r2, #0
 800d5c8:	4607      	mov	r7, r0
 800d5ca:	2300      	movs	r3, #0
 800d5cc:	4620      	mov	r0, r4
 800d5ce:	4629      	mov	r1, r5
 800d5d0:	f7f3 faac 	bl	8000b2c <__aeabi_dcmplt>
 800d5d4:	b140      	cbz	r0, 800d5e8 <_dtoa_r+0x168>
 800d5d6:	4638      	mov	r0, r7
 800d5d8:	f7f2 ffcc 	bl	8000574 <__aeabi_i2d>
 800d5dc:	4622      	mov	r2, r4
 800d5de:	462b      	mov	r3, r5
 800d5e0:	f7f3 fa9a 	bl	8000b18 <__aeabi_dcmpeq>
 800d5e4:	b900      	cbnz	r0, 800d5e8 <_dtoa_r+0x168>
 800d5e6:	3f01      	subs	r7, #1
 800d5e8:	2f16      	cmp	r7, #22
 800d5ea:	d851      	bhi.n	800d690 <_dtoa_r+0x210>
 800d5ec:	4b5b      	ldr	r3, [pc, #364]	@ (800d75c <_dtoa_r+0x2dc>)
 800d5ee:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800d5f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d5f6:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800d5fa:	f7f3 fa97 	bl	8000b2c <__aeabi_dcmplt>
 800d5fe:	2800      	cmp	r0, #0
 800d600:	d048      	beq.n	800d694 <_dtoa_r+0x214>
 800d602:	3f01      	subs	r7, #1
 800d604:	2300      	movs	r3, #0
 800d606:	9312      	str	r3, [sp, #72]	@ 0x48
 800d608:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 800d60a:	1b9b      	subs	r3, r3, r6
 800d60c:	1e5a      	subs	r2, r3, #1
 800d60e:	bf44      	itt	mi
 800d610:	f1c3 0801 	rsbmi	r8, r3, #1
 800d614:	2300      	movmi	r3, #0
 800d616:	9208      	str	r2, [sp, #32]
 800d618:	bf54      	ite	pl
 800d61a:	f04f 0800 	movpl.w	r8, #0
 800d61e:	9308      	strmi	r3, [sp, #32]
 800d620:	2f00      	cmp	r7, #0
 800d622:	db39      	blt.n	800d698 <_dtoa_r+0x218>
 800d624:	9b08      	ldr	r3, [sp, #32]
 800d626:	970f      	str	r7, [sp, #60]	@ 0x3c
 800d628:	443b      	add	r3, r7
 800d62a:	9308      	str	r3, [sp, #32]
 800d62c:	2300      	movs	r3, #0
 800d62e:	930a      	str	r3, [sp, #40]	@ 0x28
 800d630:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d632:	2b09      	cmp	r3, #9
 800d634:	d864      	bhi.n	800d700 <_dtoa_r+0x280>
 800d636:	2b05      	cmp	r3, #5
 800d638:	bfc4      	itt	gt
 800d63a:	3b04      	subgt	r3, #4
 800d63c:	9309      	strgt	r3, [sp, #36]	@ 0x24
 800d63e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d640:	f1a3 0302 	sub.w	r3, r3, #2
 800d644:	bfcc      	ite	gt
 800d646:	2400      	movgt	r4, #0
 800d648:	2401      	movle	r4, #1
 800d64a:	2b03      	cmp	r3, #3
 800d64c:	d863      	bhi.n	800d716 <_dtoa_r+0x296>
 800d64e:	e8df f003 	tbb	[pc, r3]
 800d652:	372a      	.short	0x372a
 800d654:	5535      	.short	0x5535
 800d656:	e9dd 6316 	ldrd	r6, r3, [sp, #88]	@ 0x58
 800d65a:	441e      	add	r6, r3
 800d65c:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 800d660:	2b20      	cmp	r3, #32
 800d662:	bfc1      	itttt	gt
 800d664:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 800d668:	409f      	lslgt	r7, r3
 800d66a:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 800d66e:	fa24 f303 	lsrgt.w	r3, r4, r3
 800d672:	bfd6      	itet	le
 800d674:	f1c3 0320 	rsble	r3, r3, #32
 800d678:	ea47 0003 	orrgt.w	r0, r7, r3
 800d67c:	fa04 f003 	lslle.w	r0, r4, r3
 800d680:	f7f2 ff68 	bl	8000554 <__aeabi_ui2d>
 800d684:	2201      	movs	r2, #1
 800d686:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 800d68a:	3e01      	subs	r6, #1
 800d68c:	9214      	str	r2, [sp, #80]	@ 0x50
 800d68e:	e777      	b.n	800d580 <_dtoa_r+0x100>
 800d690:	2301      	movs	r3, #1
 800d692:	e7b8      	b.n	800d606 <_dtoa_r+0x186>
 800d694:	9012      	str	r0, [sp, #72]	@ 0x48
 800d696:	e7b7      	b.n	800d608 <_dtoa_r+0x188>
 800d698:	427b      	negs	r3, r7
 800d69a:	930a      	str	r3, [sp, #40]	@ 0x28
 800d69c:	2300      	movs	r3, #0
 800d69e:	eba8 0807 	sub.w	r8, r8, r7
 800d6a2:	930f      	str	r3, [sp, #60]	@ 0x3c
 800d6a4:	e7c4      	b.n	800d630 <_dtoa_r+0x1b0>
 800d6a6:	2300      	movs	r3, #0
 800d6a8:	930b      	str	r3, [sp, #44]	@ 0x2c
 800d6aa:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800d6ac:	2b00      	cmp	r3, #0
 800d6ae:	dc35      	bgt.n	800d71c <_dtoa_r+0x29c>
 800d6b0:	2301      	movs	r3, #1
 800d6b2:	9300      	str	r3, [sp, #0]
 800d6b4:	9307      	str	r3, [sp, #28]
 800d6b6:	461a      	mov	r2, r3
 800d6b8:	920e      	str	r2, [sp, #56]	@ 0x38
 800d6ba:	e00b      	b.n	800d6d4 <_dtoa_r+0x254>
 800d6bc:	2301      	movs	r3, #1
 800d6be:	e7f3      	b.n	800d6a8 <_dtoa_r+0x228>
 800d6c0:	2300      	movs	r3, #0
 800d6c2:	930b      	str	r3, [sp, #44]	@ 0x2c
 800d6c4:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800d6c6:	18fb      	adds	r3, r7, r3
 800d6c8:	9300      	str	r3, [sp, #0]
 800d6ca:	3301      	adds	r3, #1
 800d6cc:	2b01      	cmp	r3, #1
 800d6ce:	9307      	str	r3, [sp, #28]
 800d6d0:	bfb8      	it	lt
 800d6d2:	2301      	movlt	r3, #1
 800d6d4:	f8db 001c 	ldr.w	r0, [fp, #28]
 800d6d8:	2100      	movs	r1, #0
 800d6da:	2204      	movs	r2, #4
 800d6dc:	f102 0514 	add.w	r5, r2, #20
 800d6e0:	429d      	cmp	r5, r3
 800d6e2:	d91f      	bls.n	800d724 <_dtoa_r+0x2a4>
 800d6e4:	6041      	str	r1, [r0, #4]
 800d6e6:	4658      	mov	r0, fp
 800d6e8:	f000 fd8e 	bl	800e208 <_Balloc>
 800d6ec:	4682      	mov	sl, r0
 800d6ee:	2800      	cmp	r0, #0
 800d6f0:	d13c      	bne.n	800d76c <_dtoa_r+0x2ec>
 800d6f2:	4b1b      	ldr	r3, [pc, #108]	@ (800d760 <_dtoa_r+0x2e0>)
 800d6f4:	4602      	mov	r2, r0
 800d6f6:	f240 11af 	movw	r1, #431	@ 0x1af
 800d6fa:	e6d8      	b.n	800d4ae <_dtoa_r+0x2e>
 800d6fc:	2301      	movs	r3, #1
 800d6fe:	e7e0      	b.n	800d6c2 <_dtoa_r+0x242>
 800d700:	2401      	movs	r4, #1
 800d702:	2300      	movs	r3, #0
 800d704:	9309      	str	r3, [sp, #36]	@ 0x24
 800d706:	940b      	str	r4, [sp, #44]	@ 0x2c
 800d708:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800d70c:	9300      	str	r3, [sp, #0]
 800d70e:	9307      	str	r3, [sp, #28]
 800d710:	2200      	movs	r2, #0
 800d712:	2312      	movs	r3, #18
 800d714:	e7d0      	b.n	800d6b8 <_dtoa_r+0x238>
 800d716:	2301      	movs	r3, #1
 800d718:	930b      	str	r3, [sp, #44]	@ 0x2c
 800d71a:	e7f5      	b.n	800d708 <_dtoa_r+0x288>
 800d71c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800d71e:	9300      	str	r3, [sp, #0]
 800d720:	9307      	str	r3, [sp, #28]
 800d722:	e7d7      	b.n	800d6d4 <_dtoa_r+0x254>
 800d724:	3101      	adds	r1, #1
 800d726:	0052      	lsls	r2, r2, #1
 800d728:	e7d8      	b.n	800d6dc <_dtoa_r+0x25c>
 800d72a:	bf00      	nop
 800d72c:	f3af 8000 	nop.w
 800d730:	636f4361 	.word	0x636f4361
 800d734:	3fd287a7 	.word	0x3fd287a7
 800d738:	8b60c8b3 	.word	0x8b60c8b3
 800d73c:	3fc68a28 	.word	0x3fc68a28
 800d740:	509f79fb 	.word	0x509f79fb
 800d744:	3fd34413 	.word	0x3fd34413
 800d748:	0800f161 	.word	0x0800f161
 800d74c:	0800f178 	.word	0x0800f178
 800d750:	7ff00000 	.word	0x7ff00000
 800d754:	0800f131 	.word	0x0800f131
 800d758:	3ff80000 	.word	0x3ff80000
 800d75c:	0800f270 	.word	0x0800f270
 800d760:	0800f1d0 	.word	0x0800f1d0
 800d764:	0800f15d 	.word	0x0800f15d
 800d768:	0800f130 	.word	0x0800f130
 800d76c:	f8db 301c 	ldr.w	r3, [fp, #28]
 800d770:	6018      	str	r0, [r3, #0]
 800d772:	9b07      	ldr	r3, [sp, #28]
 800d774:	2b0e      	cmp	r3, #14
 800d776:	f200 80a4 	bhi.w	800d8c2 <_dtoa_r+0x442>
 800d77a:	2c00      	cmp	r4, #0
 800d77c:	f000 80a1 	beq.w	800d8c2 <_dtoa_r+0x442>
 800d780:	2f00      	cmp	r7, #0
 800d782:	dd33      	ble.n	800d7ec <_dtoa_r+0x36c>
 800d784:	4bad      	ldr	r3, [pc, #692]	@ (800da3c <_dtoa_r+0x5bc>)
 800d786:	f007 020f 	and.w	r2, r7, #15
 800d78a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800d78e:	ed93 7b00 	vldr	d7, [r3]
 800d792:	05f8      	lsls	r0, r7, #23
 800d794:	ed8d 7b04 	vstr	d7, [sp, #16]
 800d798:	ea4f 1427 	mov.w	r4, r7, asr #4
 800d79c:	d516      	bpl.n	800d7cc <_dtoa_r+0x34c>
 800d79e:	4ba8      	ldr	r3, [pc, #672]	@ (800da40 <_dtoa_r+0x5c0>)
 800d7a0:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800d7a4:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800d7a8:	f7f3 f878 	bl	800089c <__aeabi_ddiv>
 800d7ac:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800d7b0:	f004 040f 	and.w	r4, r4, #15
 800d7b4:	2603      	movs	r6, #3
 800d7b6:	4da2      	ldr	r5, [pc, #648]	@ (800da40 <_dtoa_r+0x5c0>)
 800d7b8:	b954      	cbnz	r4, 800d7d0 <_dtoa_r+0x350>
 800d7ba:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800d7be:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800d7c2:	f7f3 f86b 	bl	800089c <__aeabi_ddiv>
 800d7c6:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800d7ca:	e028      	b.n	800d81e <_dtoa_r+0x39e>
 800d7cc:	2602      	movs	r6, #2
 800d7ce:	e7f2      	b.n	800d7b6 <_dtoa_r+0x336>
 800d7d0:	07e1      	lsls	r1, r4, #31
 800d7d2:	d508      	bpl.n	800d7e6 <_dtoa_r+0x366>
 800d7d4:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800d7d8:	e9d5 2300 	ldrd	r2, r3, [r5]
 800d7dc:	f7f2 ff34 	bl	8000648 <__aeabi_dmul>
 800d7e0:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800d7e4:	3601      	adds	r6, #1
 800d7e6:	1064      	asrs	r4, r4, #1
 800d7e8:	3508      	adds	r5, #8
 800d7ea:	e7e5      	b.n	800d7b8 <_dtoa_r+0x338>
 800d7ec:	f000 80d2 	beq.w	800d994 <_dtoa_r+0x514>
 800d7f0:	427c      	negs	r4, r7
 800d7f2:	4b92      	ldr	r3, [pc, #584]	@ (800da3c <_dtoa_r+0x5bc>)
 800d7f4:	4d92      	ldr	r5, [pc, #584]	@ (800da40 <_dtoa_r+0x5c0>)
 800d7f6:	f004 020f 	and.w	r2, r4, #15
 800d7fa:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800d7fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d802:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800d806:	f7f2 ff1f 	bl	8000648 <__aeabi_dmul>
 800d80a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800d80e:	1124      	asrs	r4, r4, #4
 800d810:	2300      	movs	r3, #0
 800d812:	2602      	movs	r6, #2
 800d814:	2c00      	cmp	r4, #0
 800d816:	f040 80b2 	bne.w	800d97e <_dtoa_r+0x4fe>
 800d81a:	2b00      	cmp	r3, #0
 800d81c:	d1d3      	bne.n	800d7c6 <_dtoa_r+0x346>
 800d81e:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800d820:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 800d824:	2b00      	cmp	r3, #0
 800d826:	f000 80b7 	beq.w	800d998 <_dtoa_r+0x518>
 800d82a:	4b86      	ldr	r3, [pc, #536]	@ (800da44 <_dtoa_r+0x5c4>)
 800d82c:	2200      	movs	r2, #0
 800d82e:	4620      	mov	r0, r4
 800d830:	4629      	mov	r1, r5
 800d832:	f7f3 f97b 	bl	8000b2c <__aeabi_dcmplt>
 800d836:	2800      	cmp	r0, #0
 800d838:	f000 80ae 	beq.w	800d998 <_dtoa_r+0x518>
 800d83c:	9b07      	ldr	r3, [sp, #28]
 800d83e:	2b00      	cmp	r3, #0
 800d840:	f000 80aa 	beq.w	800d998 <_dtoa_r+0x518>
 800d844:	9b00      	ldr	r3, [sp, #0]
 800d846:	2b00      	cmp	r3, #0
 800d848:	dd37      	ble.n	800d8ba <_dtoa_r+0x43a>
 800d84a:	1e7b      	subs	r3, r7, #1
 800d84c:	9304      	str	r3, [sp, #16]
 800d84e:	4620      	mov	r0, r4
 800d850:	4b7d      	ldr	r3, [pc, #500]	@ (800da48 <_dtoa_r+0x5c8>)
 800d852:	2200      	movs	r2, #0
 800d854:	4629      	mov	r1, r5
 800d856:	f7f2 fef7 	bl	8000648 <__aeabi_dmul>
 800d85a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800d85e:	9c00      	ldr	r4, [sp, #0]
 800d860:	3601      	adds	r6, #1
 800d862:	4630      	mov	r0, r6
 800d864:	f7f2 fe86 	bl	8000574 <__aeabi_i2d>
 800d868:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800d86c:	f7f2 feec 	bl	8000648 <__aeabi_dmul>
 800d870:	4b76      	ldr	r3, [pc, #472]	@ (800da4c <_dtoa_r+0x5cc>)
 800d872:	2200      	movs	r2, #0
 800d874:	f7f2 fd32 	bl	80002dc <__adddf3>
 800d878:	4605      	mov	r5, r0
 800d87a:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 800d87e:	2c00      	cmp	r4, #0
 800d880:	f040 808d 	bne.w	800d99e <_dtoa_r+0x51e>
 800d884:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800d888:	4b71      	ldr	r3, [pc, #452]	@ (800da50 <_dtoa_r+0x5d0>)
 800d88a:	2200      	movs	r2, #0
 800d88c:	f7f2 fd24 	bl	80002d8 <__aeabi_dsub>
 800d890:	4602      	mov	r2, r0
 800d892:	460b      	mov	r3, r1
 800d894:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800d898:	462a      	mov	r2, r5
 800d89a:	4633      	mov	r3, r6
 800d89c:	f7f3 f964 	bl	8000b68 <__aeabi_dcmpgt>
 800d8a0:	2800      	cmp	r0, #0
 800d8a2:	f040 828b 	bne.w	800ddbc <_dtoa_r+0x93c>
 800d8a6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800d8aa:	462a      	mov	r2, r5
 800d8ac:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 800d8b0:	f7f3 f93c 	bl	8000b2c <__aeabi_dcmplt>
 800d8b4:	2800      	cmp	r0, #0
 800d8b6:	f040 8128 	bne.w	800db0a <_dtoa_r+0x68a>
 800d8ba:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 800d8be:	e9cd 3402 	strd	r3, r4, [sp, #8]
 800d8c2:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800d8c4:	2b00      	cmp	r3, #0
 800d8c6:	f2c0 815a 	blt.w	800db7e <_dtoa_r+0x6fe>
 800d8ca:	2f0e      	cmp	r7, #14
 800d8cc:	f300 8157 	bgt.w	800db7e <_dtoa_r+0x6fe>
 800d8d0:	4b5a      	ldr	r3, [pc, #360]	@ (800da3c <_dtoa_r+0x5bc>)
 800d8d2:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800d8d6:	ed93 7b00 	vldr	d7, [r3]
 800d8da:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800d8dc:	2b00      	cmp	r3, #0
 800d8de:	ed8d 7b00 	vstr	d7, [sp]
 800d8e2:	da03      	bge.n	800d8ec <_dtoa_r+0x46c>
 800d8e4:	9b07      	ldr	r3, [sp, #28]
 800d8e6:	2b00      	cmp	r3, #0
 800d8e8:	f340 8101 	ble.w	800daee <_dtoa_r+0x66e>
 800d8ec:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 800d8f0:	4656      	mov	r6, sl
 800d8f2:	e9dd 2300 	ldrd	r2, r3, [sp]
 800d8f6:	4620      	mov	r0, r4
 800d8f8:	4629      	mov	r1, r5
 800d8fa:	f7f2 ffcf 	bl	800089c <__aeabi_ddiv>
 800d8fe:	f7f3 f953 	bl	8000ba8 <__aeabi_d2iz>
 800d902:	4680      	mov	r8, r0
 800d904:	f7f2 fe36 	bl	8000574 <__aeabi_i2d>
 800d908:	e9dd 2300 	ldrd	r2, r3, [sp]
 800d90c:	f7f2 fe9c 	bl	8000648 <__aeabi_dmul>
 800d910:	4602      	mov	r2, r0
 800d912:	460b      	mov	r3, r1
 800d914:	4620      	mov	r0, r4
 800d916:	4629      	mov	r1, r5
 800d918:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 800d91c:	f7f2 fcdc 	bl	80002d8 <__aeabi_dsub>
 800d920:	f806 4b01 	strb.w	r4, [r6], #1
 800d924:	9d07      	ldr	r5, [sp, #28]
 800d926:	eba6 040a 	sub.w	r4, r6, sl
 800d92a:	42a5      	cmp	r5, r4
 800d92c:	4602      	mov	r2, r0
 800d92e:	460b      	mov	r3, r1
 800d930:	f040 8117 	bne.w	800db62 <_dtoa_r+0x6e2>
 800d934:	f7f2 fcd2 	bl	80002dc <__adddf3>
 800d938:	e9dd 2300 	ldrd	r2, r3, [sp]
 800d93c:	4604      	mov	r4, r0
 800d93e:	460d      	mov	r5, r1
 800d940:	f7f3 f912 	bl	8000b68 <__aeabi_dcmpgt>
 800d944:	2800      	cmp	r0, #0
 800d946:	f040 80f9 	bne.w	800db3c <_dtoa_r+0x6bc>
 800d94a:	e9dd 2300 	ldrd	r2, r3, [sp]
 800d94e:	4620      	mov	r0, r4
 800d950:	4629      	mov	r1, r5
 800d952:	f7f3 f8e1 	bl	8000b18 <__aeabi_dcmpeq>
 800d956:	b118      	cbz	r0, 800d960 <_dtoa_r+0x4e0>
 800d958:	f018 0f01 	tst.w	r8, #1
 800d95c:	f040 80ee 	bne.w	800db3c <_dtoa_r+0x6bc>
 800d960:	4649      	mov	r1, r9
 800d962:	4658      	mov	r0, fp
 800d964:	f000 fc90 	bl	800e288 <_Bfree>
 800d968:	2300      	movs	r3, #0
 800d96a:	7033      	strb	r3, [r6, #0]
 800d96c:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800d96e:	3701      	adds	r7, #1
 800d970:	601f      	str	r7, [r3, #0]
 800d972:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800d974:	2b00      	cmp	r3, #0
 800d976:	f000 831d 	beq.w	800dfb4 <_dtoa_r+0xb34>
 800d97a:	601e      	str	r6, [r3, #0]
 800d97c:	e31a      	b.n	800dfb4 <_dtoa_r+0xb34>
 800d97e:	07e2      	lsls	r2, r4, #31
 800d980:	d505      	bpl.n	800d98e <_dtoa_r+0x50e>
 800d982:	e9d5 2300 	ldrd	r2, r3, [r5]
 800d986:	f7f2 fe5f 	bl	8000648 <__aeabi_dmul>
 800d98a:	3601      	adds	r6, #1
 800d98c:	2301      	movs	r3, #1
 800d98e:	1064      	asrs	r4, r4, #1
 800d990:	3508      	adds	r5, #8
 800d992:	e73f      	b.n	800d814 <_dtoa_r+0x394>
 800d994:	2602      	movs	r6, #2
 800d996:	e742      	b.n	800d81e <_dtoa_r+0x39e>
 800d998:	9c07      	ldr	r4, [sp, #28]
 800d99a:	9704      	str	r7, [sp, #16]
 800d99c:	e761      	b.n	800d862 <_dtoa_r+0x3e2>
 800d99e:	4b27      	ldr	r3, [pc, #156]	@ (800da3c <_dtoa_r+0x5bc>)
 800d9a0:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800d9a2:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800d9a6:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800d9aa:	4454      	add	r4, sl
 800d9ac:	2900      	cmp	r1, #0
 800d9ae:	d053      	beq.n	800da58 <_dtoa_r+0x5d8>
 800d9b0:	4928      	ldr	r1, [pc, #160]	@ (800da54 <_dtoa_r+0x5d4>)
 800d9b2:	2000      	movs	r0, #0
 800d9b4:	f7f2 ff72 	bl	800089c <__aeabi_ddiv>
 800d9b8:	4633      	mov	r3, r6
 800d9ba:	462a      	mov	r2, r5
 800d9bc:	f7f2 fc8c 	bl	80002d8 <__aeabi_dsub>
 800d9c0:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800d9c4:	4656      	mov	r6, sl
 800d9c6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800d9ca:	f7f3 f8ed 	bl	8000ba8 <__aeabi_d2iz>
 800d9ce:	4605      	mov	r5, r0
 800d9d0:	f7f2 fdd0 	bl	8000574 <__aeabi_i2d>
 800d9d4:	4602      	mov	r2, r0
 800d9d6:	460b      	mov	r3, r1
 800d9d8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800d9dc:	f7f2 fc7c 	bl	80002d8 <__aeabi_dsub>
 800d9e0:	3530      	adds	r5, #48	@ 0x30
 800d9e2:	4602      	mov	r2, r0
 800d9e4:	460b      	mov	r3, r1
 800d9e6:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800d9ea:	f806 5b01 	strb.w	r5, [r6], #1
 800d9ee:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800d9f2:	f7f3 f89b 	bl	8000b2c <__aeabi_dcmplt>
 800d9f6:	2800      	cmp	r0, #0
 800d9f8:	d171      	bne.n	800dade <_dtoa_r+0x65e>
 800d9fa:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800d9fe:	4911      	ldr	r1, [pc, #68]	@ (800da44 <_dtoa_r+0x5c4>)
 800da00:	2000      	movs	r0, #0
 800da02:	f7f2 fc69 	bl	80002d8 <__aeabi_dsub>
 800da06:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800da0a:	f7f3 f88f 	bl	8000b2c <__aeabi_dcmplt>
 800da0e:	2800      	cmp	r0, #0
 800da10:	f040 8095 	bne.w	800db3e <_dtoa_r+0x6be>
 800da14:	42a6      	cmp	r6, r4
 800da16:	f43f af50 	beq.w	800d8ba <_dtoa_r+0x43a>
 800da1a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 800da1e:	4b0a      	ldr	r3, [pc, #40]	@ (800da48 <_dtoa_r+0x5c8>)
 800da20:	2200      	movs	r2, #0
 800da22:	f7f2 fe11 	bl	8000648 <__aeabi_dmul>
 800da26:	4b08      	ldr	r3, [pc, #32]	@ (800da48 <_dtoa_r+0x5c8>)
 800da28:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800da2c:	2200      	movs	r2, #0
 800da2e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800da32:	f7f2 fe09 	bl	8000648 <__aeabi_dmul>
 800da36:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800da3a:	e7c4      	b.n	800d9c6 <_dtoa_r+0x546>
 800da3c:	0800f270 	.word	0x0800f270
 800da40:	0800f248 	.word	0x0800f248
 800da44:	3ff00000 	.word	0x3ff00000
 800da48:	40240000 	.word	0x40240000
 800da4c:	401c0000 	.word	0x401c0000
 800da50:	40140000 	.word	0x40140000
 800da54:	3fe00000 	.word	0x3fe00000
 800da58:	4631      	mov	r1, r6
 800da5a:	4628      	mov	r0, r5
 800da5c:	f7f2 fdf4 	bl	8000648 <__aeabi_dmul>
 800da60:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800da64:	9415      	str	r4, [sp, #84]	@ 0x54
 800da66:	4656      	mov	r6, sl
 800da68:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800da6c:	f7f3 f89c 	bl	8000ba8 <__aeabi_d2iz>
 800da70:	4605      	mov	r5, r0
 800da72:	f7f2 fd7f 	bl	8000574 <__aeabi_i2d>
 800da76:	4602      	mov	r2, r0
 800da78:	460b      	mov	r3, r1
 800da7a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800da7e:	f7f2 fc2b 	bl	80002d8 <__aeabi_dsub>
 800da82:	3530      	adds	r5, #48	@ 0x30
 800da84:	f806 5b01 	strb.w	r5, [r6], #1
 800da88:	4602      	mov	r2, r0
 800da8a:	460b      	mov	r3, r1
 800da8c:	42a6      	cmp	r6, r4
 800da8e:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800da92:	f04f 0200 	mov.w	r2, #0
 800da96:	d124      	bne.n	800dae2 <_dtoa_r+0x662>
 800da98:	4bac      	ldr	r3, [pc, #688]	@ (800dd4c <_dtoa_r+0x8cc>)
 800da9a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 800da9e:	f7f2 fc1d 	bl	80002dc <__adddf3>
 800daa2:	4602      	mov	r2, r0
 800daa4:	460b      	mov	r3, r1
 800daa6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800daaa:	f7f3 f85d 	bl	8000b68 <__aeabi_dcmpgt>
 800daae:	2800      	cmp	r0, #0
 800dab0:	d145      	bne.n	800db3e <_dtoa_r+0x6be>
 800dab2:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800dab6:	49a5      	ldr	r1, [pc, #660]	@ (800dd4c <_dtoa_r+0x8cc>)
 800dab8:	2000      	movs	r0, #0
 800daba:	f7f2 fc0d 	bl	80002d8 <__aeabi_dsub>
 800dabe:	4602      	mov	r2, r0
 800dac0:	460b      	mov	r3, r1
 800dac2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800dac6:	f7f3 f831 	bl	8000b2c <__aeabi_dcmplt>
 800daca:	2800      	cmp	r0, #0
 800dacc:	f43f aef5 	beq.w	800d8ba <_dtoa_r+0x43a>
 800dad0:	9e15      	ldr	r6, [sp, #84]	@ 0x54
 800dad2:	1e73      	subs	r3, r6, #1
 800dad4:	9315      	str	r3, [sp, #84]	@ 0x54
 800dad6:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800dada:	2b30      	cmp	r3, #48	@ 0x30
 800dadc:	d0f8      	beq.n	800dad0 <_dtoa_r+0x650>
 800dade:	9f04      	ldr	r7, [sp, #16]
 800dae0:	e73e      	b.n	800d960 <_dtoa_r+0x4e0>
 800dae2:	4b9b      	ldr	r3, [pc, #620]	@ (800dd50 <_dtoa_r+0x8d0>)
 800dae4:	f7f2 fdb0 	bl	8000648 <__aeabi_dmul>
 800dae8:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800daec:	e7bc      	b.n	800da68 <_dtoa_r+0x5e8>
 800daee:	d10c      	bne.n	800db0a <_dtoa_r+0x68a>
 800daf0:	4b98      	ldr	r3, [pc, #608]	@ (800dd54 <_dtoa_r+0x8d4>)
 800daf2:	2200      	movs	r2, #0
 800daf4:	e9dd 0100 	ldrd	r0, r1, [sp]
 800daf8:	f7f2 fda6 	bl	8000648 <__aeabi_dmul>
 800dafc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800db00:	f7f3 f828 	bl	8000b54 <__aeabi_dcmpge>
 800db04:	2800      	cmp	r0, #0
 800db06:	f000 8157 	beq.w	800ddb8 <_dtoa_r+0x938>
 800db0a:	2400      	movs	r4, #0
 800db0c:	4625      	mov	r5, r4
 800db0e:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800db10:	43db      	mvns	r3, r3
 800db12:	9304      	str	r3, [sp, #16]
 800db14:	4656      	mov	r6, sl
 800db16:	2700      	movs	r7, #0
 800db18:	4621      	mov	r1, r4
 800db1a:	4658      	mov	r0, fp
 800db1c:	f000 fbb4 	bl	800e288 <_Bfree>
 800db20:	2d00      	cmp	r5, #0
 800db22:	d0dc      	beq.n	800dade <_dtoa_r+0x65e>
 800db24:	b12f      	cbz	r7, 800db32 <_dtoa_r+0x6b2>
 800db26:	42af      	cmp	r7, r5
 800db28:	d003      	beq.n	800db32 <_dtoa_r+0x6b2>
 800db2a:	4639      	mov	r1, r7
 800db2c:	4658      	mov	r0, fp
 800db2e:	f000 fbab 	bl	800e288 <_Bfree>
 800db32:	4629      	mov	r1, r5
 800db34:	4658      	mov	r0, fp
 800db36:	f000 fba7 	bl	800e288 <_Bfree>
 800db3a:	e7d0      	b.n	800dade <_dtoa_r+0x65e>
 800db3c:	9704      	str	r7, [sp, #16]
 800db3e:	4633      	mov	r3, r6
 800db40:	461e      	mov	r6, r3
 800db42:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800db46:	2a39      	cmp	r2, #57	@ 0x39
 800db48:	d107      	bne.n	800db5a <_dtoa_r+0x6da>
 800db4a:	459a      	cmp	sl, r3
 800db4c:	d1f8      	bne.n	800db40 <_dtoa_r+0x6c0>
 800db4e:	9a04      	ldr	r2, [sp, #16]
 800db50:	3201      	adds	r2, #1
 800db52:	9204      	str	r2, [sp, #16]
 800db54:	2230      	movs	r2, #48	@ 0x30
 800db56:	f88a 2000 	strb.w	r2, [sl]
 800db5a:	781a      	ldrb	r2, [r3, #0]
 800db5c:	3201      	adds	r2, #1
 800db5e:	701a      	strb	r2, [r3, #0]
 800db60:	e7bd      	b.n	800dade <_dtoa_r+0x65e>
 800db62:	4b7b      	ldr	r3, [pc, #492]	@ (800dd50 <_dtoa_r+0x8d0>)
 800db64:	2200      	movs	r2, #0
 800db66:	f7f2 fd6f 	bl	8000648 <__aeabi_dmul>
 800db6a:	2200      	movs	r2, #0
 800db6c:	2300      	movs	r3, #0
 800db6e:	4604      	mov	r4, r0
 800db70:	460d      	mov	r5, r1
 800db72:	f7f2 ffd1 	bl	8000b18 <__aeabi_dcmpeq>
 800db76:	2800      	cmp	r0, #0
 800db78:	f43f aebb 	beq.w	800d8f2 <_dtoa_r+0x472>
 800db7c:	e6f0      	b.n	800d960 <_dtoa_r+0x4e0>
 800db7e:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 800db80:	2a00      	cmp	r2, #0
 800db82:	f000 80db 	beq.w	800dd3c <_dtoa_r+0x8bc>
 800db86:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800db88:	2a01      	cmp	r2, #1
 800db8a:	f300 80bf 	bgt.w	800dd0c <_dtoa_r+0x88c>
 800db8e:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 800db90:	2a00      	cmp	r2, #0
 800db92:	f000 80b7 	beq.w	800dd04 <_dtoa_r+0x884>
 800db96:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 800db9a:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800db9c:	4646      	mov	r6, r8
 800db9e:	9a08      	ldr	r2, [sp, #32]
 800dba0:	2101      	movs	r1, #1
 800dba2:	441a      	add	r2, r3
 800dba4:	4658      	mov	r0, fp
 800dba6:	4498      	add	r8, r3
 800dba8:	9208      	str	r2, [sp, #32]
 800dbaa:	f000 fc21 	bl	800e3f0 <__i2b>
 800dbae:	4605      	mov	r5, r0
 800dbb0:	b15e      	cbz	r6, 800dbca <_dtoa_r+0x74a>
 800dbb2:	9b08      	ldr	r3, [sp, #32]
 800dbb4:	2b00      	cmp	r3, #0
 800dbb6:	dd08      	ble.n	800dbca <_dtoa_r+0x74a>
 800dbb8:	42b3      	cmp	r3, r6
 800dbba:	9a08      	ldr	r2, [sp, #32]
 800dbbc:	bfa8      	it	ge
 800dbbe:	4633      	movge	r3, r6
 800dbc0:	eba8 0803 	sub.w	r8, r8, r3
 800dbc4:	1af6      	subs	r6, r6, r3
 800dbc6:	1ad3      	subs	r3, r2, r3
 800dbc8:	9308      	str	r3, [sp, #32]
 800dbca:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800dbcc:	b1f3      	cbz	r3, 800dc0c <_dtoa_r+0x78c>
 800dbce:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800dbd0:	2b00      	cmp	r3, #0
 800dbd2:	f000 80b7 	beq.w	800dd44 <_dtoa_r+0x8c4>
 800dbd6:	b18c      	cbz	r4, 800dbfc <_dtoa_r+0x77c>
 800dbd8:	4629      	mov	r1, r5
 800dbda:	4622      	mov	r2, r4
 800dbdc:	4658      	mov	r0, fp
 800dbde:	f000 fcc7 	bl	800e570 <__pow5mult>
 800dbe2:	464a      	mov	r2, r9
 800dbe4:	4601      	mov	r1, r0
 800dbe6:	4605      	mov	r5, r0
 800dbe8:	4658      	mov	r0, fp
 800dbea:	f000 fc17 	bl	800e41c <__multiply>
 800dbee:	4649      	mov	r1, r9
 800dbf0:	9004      	str	r0, [sp, #16]
 800dbf2:	4658      	mov	r0, fp
 800dbf4:	f000 fb48 	bl	800e288 <_Bfree>
 800dbf8:	9b04      	ldr	r3, [sp, #16]
 800dbfa:	4699      	mov	r9, r3
 800dbfc:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800dbfe:	1b1a      	subs	r2, r3, r4
 800dc00:	d004      	beq.n	800dc0c <_dtoa_r+0x78c>
 800dc02:	4649      	mov	r1, r9
 800dc04:	4658      	mov	r0, fp
 800dc06:	f000 fcb3 	bl	800e570 <__pow5mult>
 800dc0a:	4681      	mov	r9, r0
 800dc0c:	2101      	movs	r1, #1
 800dc0e:	4658      	mov	r0, fp
 800dc10:	f000 fbee 	bl	800e3f0 <__i2b>
 800dc14:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800dc16:	4604      	mov	r4, r0
 800dc18:	2b00      	cmp	r3, #0
 800dc1a:	f000 81cf 	beq.w	800dfbc <_dtoa_r+0xb3c>
 800dc1e:	461a      	mov	r2, r3
 800dc20:	4601      	mov	r1, r0
 800dc22:	4658      	mov	r0, fp
 800dc24:	f000 fca4 	bl	800e570 <__pow5mult>
 800dc28:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800dc2a:	2b01      	cmp	r3, #1
 800dc2c:	4604      	mov	r4, r0
 800dc2e:	f300 8095 	bgt.w	800dd5c <_dtoa_r+0x8dc>
 800dc32:	9b02      	ldr	r3, [sp, #8]
 800dc34:	2b00      	cmp	r3, #0
 800dc36:	f040 8087 	bne.w	800dd48 <_dtoa_r+0x8c8>
 800dc3a:	9b03      	ldr	r3, [sp, #12]
 800dc3c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800dc40:	2b00      	cmp	r3, #0
 800dc42:	f040 8089 	bne.w	800dd58 <_dtoa_r+0x8d8>
 800dc46:	9b03      	ldr	r3, [sp, #12]
 800dc48:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800dc4c:	0d1b      	lsrs	r3, r3, #20
 800dc4e:	051b      	lsls	r3, r3, #20
 800dc50:	b12b      	cbz	r3, 800dc5e <_dtoa_r+0x7de>
 800dc52:	9b08      	ldr	r3, [sp, #32]
 800dc54:	3301      	adds	r3, #1
 800dc56:	9308      	str	r3, [sp, #32]
 800dc58:	f108 0801 	add.w	r8, r8, #1
 800dc5c:	2301      	movs	r3, #1
 800dc5e:	930a      	str	r3, [sp, #40]	@ 0x28
 800dc60:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800dc62:	2b00      	cmp	r3, #0
 800dc64:	f000 81b0 	beq.w	800dfc8 <_dtoa_r+0xb48>
 800dc68:	6923      	ldr	r3, [r4, #16]
 800dc6a:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800dc6e:	6918      	ldr	r0, [r3, #16]
 800dc70:	f000 fb72 	bl	800e358 <__hi0bits>
 800dc74:	f1c0 0020 	rsb	r0, r0, #32
 800dc78:	9b08      	ldr	r3, [sp, #32]
 800dc7a:	4418      	add	r0, r3
 800dc7c:	f010 001f 	ands.w	r0, r0, #31
 800dc80:	d077      	beq.n	800dd72 <_dtoa_r+0x8f2>
 800dc82:	f1c0 0320 	rsb	r3, r0, #32
 800dc86:	2b04      	cmp	r3, #4
 800dc88:	dd6b      	ble.n	800dd62 <_dtoa_r+0x8e2>
 800dc8a:	9b08      	ldr	r3, [sp, #32]
 800dc8c:	f1c0 001c 	rsb	r0, r0, #28
 800dc90:	4403      	add	r3, r0
 800dc92:	4480      	add	r8, r0
 800dc94:	4406      	add	r6, r0
 800dc96:	9308      	str	r3, [sp, #32]
 800dc98:	f1b8 0f00 	cmp.w	r8, #0
 800dc9c:	dd05      	ble.n	800dcaa <_dtoa_r+0x82a>
 800dc9e:	4649      	mov	r1, r9
 800dca0:	4642      	mov	r2, r8
 800dca2:	4658      	mov	r0, fp
 800dca4:	f000 fcbe 	bl	800e624 <__lshift>
 800dca8:	4681      	mov	r9, r0
 800dcaa:	9b08      	ldr	r3, [sp, #32]
 800dcac:	2b00      	cmp	r3, #0
 800dcae:	dd05      	ble.n	800dcbc <_dtoa_r+0x83c>
 800dcb0:	4621      	mov	r1, r4
 800dcb2:	461a      	mov	r2, r3
 800dcb4:	4658      	mov	r0, fp
 800dcb6:	f000 fcb5 	bl	800e624 <__lshift>
 800dcba:	4604      	mov	r4, r0
 800dcbc:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800dcbe:	2b00      	cmp	r3, #0
 800dcc0:	d059      	beq.n	800dd76 <_dtoa_r+0x8f6>
 800dcc2:	4621      	mov	r1, r4
 800dcc4:	4648      	mov	r0, r9
 800dcc6:	f000 fd19 	bl	800e6fc <__mcmp>
 800dcca:	2800      	cmp	r0, #0
 800dccc:	da53      	bge.n	800dd76 <_dtoa_r+0x8f6>
 800dcce:	1e7b      	subs	r3, r7, #1
 800dcd0:	9304      	str	r3, [sp, #16]
 800dcd2:	4649      	mov	r1, r9
 800dcd4:	2300      	movs	r3, #0
 800dcd6:	220a      	movs	r2, #10
 800dcd8:	4658      	mov	r0, fp
 800dcda:	f000 faf7 	bl	800e2cc <__multadd>
 800dcde:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800dce0:	4681      	mov	r9, r0
 800dce2:	2b00      	cmp	r3, #0
 800dce4:	f000 8172 	beq.w	800dfcc <_dtoa_r+0xb4c>
 800dce8:	2300      	movs	r3, #0
 800dcea:	4629      	mov	r1, r5
 800dcec:	220a      	movs	r2, #10
 800dcee:	4658      	mov	r0, fp
 800dcf0:	f000 faec 	bl	800e2cc <__multadd>
 800dcf4:	9b00      	ldr	r3, [sp, #0]
 800dcf6:	2b00      	cmp	r3, #0
 800dcf8:	4605      	mov	r5, r0
 800dcfa:	dc67      	bgt.n	800ddcc <_dtoa_r+0x94c>
 800dcfc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800dcfe:	2b02      	cmp	r3, #2
 800dd00:	dc41      	bgt.n	800dd86 <_dtoa_r+0x906>
 800dd02:	e063      	b.n	800ddcc <_dtoa_r+0x94c>
 800dd04:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 800dd06:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 800dd0a:	e746      	b.n	800db9a <_dtoa_r+0x71a>
 800dd0c:	9b07      	ldr	r3, [sp, #28]
 800dd0e:	1e5c      	subs	r4, r3, #1
 800dd10:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800dd12:	42a3      	cmp	r3, r4
 800dd14:	bfbf      	itttt	lt
 800dd16:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 800dd18:	9a0f      	ldrlt	r2, [sp, #60]	@ 0x3c
 800dd1a:	940a      	strlt	r4, [sp, #40]	@ 0x28
 800dd1c:	1ae3      	sublt	r3, r4, r3
 800dd1e:	bfb4      	ite	lt
 800dd20:	18d2      	addlt	r2, r2, r3
 800dd22:	1b1c      	subge	r4, r3, r4
 800dd24:	9b07      	ldr	r3, [sp, #28]
 800dd26:	bfbc      	itt	lt
 800dd28:	920f      	strlt	r2, [sp, #60]	@ 0x3c
 800dd2a:	2400      	movlt	r4, #0
 800dd2c:	2b00      	cmp	r3, #0
 800dd2e:	bfb5      	itete	lt
 800dd30:	eba8 0603 	sublt.w	r6, r8, r3
 800dd34:	9b07      	ldrge	r3, [sp, #28]
 800dd36:	2300      	movlt	r3, #0
 800dd38:	4646      	movge	r6, r8
 800dd3a:	e730      	b.n	800db9e <_dtoa_r+0x71e>
 800dd3c:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800dd3e:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 800dd40:	4646      	mov	r6, r8
 800dd42:	e735      	b.n	800dbb0 <_dtoa_r+0x730>
 800dd44:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800dd46:	e75c      	b.n	800dc02 <_dtoa_r+0x782>
 800dd48:	2300      	movs	r3, #0
 800dd4a:	e788      	b.n	800dc5e <_dtoa_r+0x7de>
 800dd4c:	3fe00000 	.word	0x3fe00000
 800dd50:	40240000 	.word	0x40240000
 800dd54:	40140000 	.word	0x40140000
 800dd58:	9b02      	ldr	r3, [sp, #8]
 800dd5a:	e780      	b.n	800dc5e <_dtoa_r+0x7de>
 800dd5c:	2300      	movs	r3, #0
 800dd5e:	930a      	str	r3, [sp, #40]	@ 0x28
 800dd60:	e782      	b.n	800dc68 <_dtoa_r+0x7e8>
 800dd62:	d099      	beq.n	800dc98 <_dtoa_r+0x818>
 800dd64:	9a08      	ldr	r2, [sp, #32]
 800dd66:	331c      	adds	r3, #28
 800dd68:	441a      	add	r2, r3
 800dd6a:	4498      	add	r8, r3
 800dd6c:	441e      	add	r6, r3
 800dd6e:	9208      	str	r2, [sp, #32]
 800dd70:	e792      	b.n	800dc98 <_dtoa_r+0x818>
 800dd72:	4603      	mov	r3, r0
 800dd74:	e7f6      	b.n	800dd64 <_dtoa_r+0x8e4>
 800dd76:	9b07      	ldr	r3, [sp, #28]
 800dd78:	9704      	str	r7, [sp, #16]
 800dd7a:	2b00      	cmp	r3, #0
 800dd7c:	dc20      	bgt.n	800ddc0 <_dtoa_r+0x940>
 800dd7e:	9300      	str	r3, [sp, #0]
 800dd80:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800dd82:	2b02      	cmp	r3, #2
 800dd84:	dd1e      	ble.n	800ddc4 <_dtoa_r+0x944>
 800dd86:	9b00      	ldr	r3, [sp, #0]
 800dd88:	2b00      	cmp	r3, #0
 800dd8a:	f47f aec0 	bne.w	800db0e <_dtoa_r+0x68e>
 800dd8e:	4621      	mov	r1, r4
 800dd90:	2205      	movs	r2, #5
 800dd92:	4658      	mov	r0, fp
 800dd94:	f000 fa9a 	bl	800e2cc <__multadd>
 800dd98:	4601      	mov	r1, r0
 800dd9a:	4604      	mov	r4, r0
 800dd9c:	4648      	mov	r0, r9
 800dd9e:	f000 fcad 	bl	800e6fc <__mcmp>
 800dda2:	2800      	cmp	r0, #0
 800dda4:	f77f aeb3 	ble.w	800db0e <_dtoa_r+0x68e>
 800dda8:	4656      	mov	r6, sl
 800ddaa:	2331      	movs	r3, #49	@ 0x31
 800ddac:	f806 3b01 	strb.w	r3, [r6], #1
 800ddb0:	9b04      	ldr	r3, [sp, #16]
 800ddb2:	3301      	adds	r3, #1
 800ddb4:	9304      	str	r3, [sp, #16]
 800ddb6:	e6ae      	b.n	800db16 <_dtoa_r+0x696>
 800ddb8:	9c07      	ldr	r4, [sp, #28]
 800ddba:	9704      	str	r7, [sp, #16]
 800ddbc:	4625      	mov	r5, r4
 800ddbe:	e7f3      	b.n	800dda8 <_dtoa_r+0x928>
 800ddc0:	9b07      	ldr	r3, [sp, #28]
 800ddc2:	9300      	str	r3, [sp, #0]
 800ddc4:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800ddc6:	2b00      	cmp	r3, #0
 800ddc8:	f000 8104 	beq.w	800dfd4 <_dtoa_r+0xb54>
 800ddcc:	2e00      	cmp	r6, #0
 800ddce:	dd05      	ble.n	800dddc <_dtoa_r+0x95c>
 800ddd0:	4629      	mov	r1, r5
 800ddd2:	4632      	mov	r2, r6
 800ddd4:	4658      	mov	r0, fp
 800ddd6:	f000 fc25 	bl	800e624 <__lshift>
 800ddda:	4605      	mov	r5, r0
 800dddc:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800ddde:	2b00      	cmp	r3, #0
 800dde0:	d05a      	beq.n	800de98 <_dtoa_r+0xa18>
 800dde2:	6869      	ldr	r1, [r5, #4]
 800dde4:	4658      	mov	r0, fp
 800dde6:	f000 fa0f 	bl	800e208 <_Balloc>
 800ddea:	4606      	mov	r6, r0
 800ddec:	b928      	cbnz	r0, 800ddfa <_dtoa_r+0x97a>
 800ddee:	4b84      	ldr	r3, [pc, #528]	@ (800e000 <_dtoa_r+0xb80>)
 800ddf0:	4602      	mov	r2, r0
 800ddf2:	f240 21ef 	movw	r1, #751	@ 0x2ef
 800ddf6:	f7ff bb5a 	b.w	800d4ae <_dtoa_r+0x2e>
 800ddfa:	692a      	ldr	r2, [r5, #16]
 800ddfc:	3202      	adds	r2, #2
 800ddfe:	0092      	lsls	r2, r2, #2
 800de00:	f105 010c 	add.w	r1, r5, #12
 800de04:	300c      	adds	r0, #12
 800de06:	f000 fe3d 	bl	800ea84 <memcpy>
 800de0a:	2201      	movs	r2, #1
 800de0c:	4631      	mov	r1, r6
 800de0e:	4658      	mov	r0, fp
 800de10:	f000 fc08 	bl	800e624 <__lshift>
 800de14:	f10a 0301 	add.w	r3, sl, #1
 800de18:	9307      	str	r3, [sp, #28]
 800de1a:	9b00      	ldr	r3, [sp, #0]
 800de1c:	4453      	add	r3, sl
 800de1e:	930b      	str	r3, [sp, #44]	@ 0x2c
 800de20:	9b02      	ldr	r3, [sp, #8]
 800de22:	f003 0301 	and.w	r3, r3, #1
 800de26:	462f      	mov	r7, r5
 800de28:	930a      	str	r3, [sp, #40]	@ 0x28
 800de2a:	4605      	mov	r5, r0
 800de2c:	9b07      	ldr	r3, [sp, #28]
 800de2e:	4621      	mov	r1, r4
 800de30:	3b01      	subs	r3, #1
 800de32:	4648      	mov	r0, r9
 800de34:	9300      	str	r3, [sp, #0]
 800de36:	f7ff fa98 	bl	800d36a <quorem>
 800de3a:	4639      	mov	r1, r7
 800de3c:	9002      	str	r0, [sp, #8]
 800de3e:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 800de42:	4648      	mov	r0, r9
 800de44:	f000 fc5a 	bl	800e6fc <__mcmp>
 800de48:	462a      	mov	r2, r5
 800de4a:	9008      	str	r0, [sp, #32]
 800de4c:	4621      	mov	r1, r4
 800de4e:	4658      	mov	r0, fp
 800de50:	f000 fc70 	bl	800e734 <__mdiff>
 800de54:	68c2      	ldr	r2, [r0, #12]
 800de56:	4606      	mov	r6, r0
 800de58:	bb02      	cbnz	r2, 800de9c <_dtoa_r+0xa1c>
 800de5a:	4601      	mov	r1, r0
 800de5c:	4648      	mov	r0, r9
 800de5e:	f000 fc4d 	bl	800e6fc <__mcmp>
 800de62:	4602      	mov	r2, r0
 800de64:	4631      	mov	r1, r6
 800de66:	4658      	mov	r0, fp
 800de68:	920e      	str	r2, [sp, #56]	@ 0x38
 800de6a:	f000 fa0d 	bl	800e288 <_Bfree>
 800de6e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800de70:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800de72:	9e07      	ldr	r6, [sp, #28]
 800de74:	ea43 0102 	orr.w	r1, r3, r2
 800de78:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800de7a:	4319      	orrs	r1, r3
 800de7c:	d110      	bne.n	800dea0 <_dtoa_r+0xa20>
 800de7e:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800de82:	d029      	beq.n	800ded8 <_dtoa_r+0xa58>
 800de84:	9b08      	ldr	r3, [sp, #32]
 800de86:	2b00      	cmp	r3, #0
 800de88:	dd02      	ble.n	800de90 <_dtoa_r+0xa10>
 800de8a:	9b02      	ldr	r3, [sp, #8]
 800de8c:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 800de90:	9b00      	ldr	r3, [sp, #0]
 800de92:	f883 8000 	strb.w	r8, [r3]
 800de96:	e63f      	b.n	800db18 <_dtoa_r+0x698>
 800de98:	4628      	mov	r0, r5
 800de9a:	e7bb      	b.n	800de14 <_dtoa_r+0x994>
 800de9c:	2201      	movs	r2, #1
 800de9e:	e7e1      	b.n	800de64 <_dtoa_r+0x9e4>
 800dea0:	9b08      	ldr	r3, [sp, #32]
 800dea2:	2b00      	cmp	r3, #0
 800dea4:	db04      	blt.n	800deb0 <_dtoa_r+0xa30>
 800dea6:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800dea8:	430b      	orrs	r3, r1
 800deaa:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800deac:	430b      	orrs	r3, r1
 800deae:	d120      	bne.n	800def2 <_dtoa_r+0xa72>
 800deb0:	2a00      	cmp	r2, #0
 800deb2:	dded      	ble.n	800de90 <_dtoa_r+0xa10>
 800deb4:	4649      	mov	r1, r9
 800deb6:	2201      	movs	r2, #1
 800deb8:	4658      	mov	r0, fp
 800deba:	f000 fbb3 	bl	800e624 <__lshift>
 800debe:	4621      	mov	r1, r4
 800dec0:	4681      	mov	r9, r0
 800dec2:	f000 fc1b 	bl	800e6fc <__mcmp>
 800dec6:	2800      	cmp	r0, #0
 800dec8:	dc03      	bgt.n	800ded2 <_dtoa_r+0xa52>
 800deca:	d1e1      	bne.n	800de90 <_dtoa_r+0xa10>
 800decc:	f018 0f01 	tst.w	r8, #1
 800ded0:	d0de      	beq.n	800de90 <_dtoa_r+0xa10>
 800ded2:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800ded6:	d1d8      	bne.n	800de8a <_dtoa_r+0xa0a>
 800ded8:	9a00      	ldr	r2, [sp, #0]
 800deda:	2339      	movs	r3, #57	@ 0x39
 800dedc:	7013      	strb	r3, [r2, #0]
 800dede:	4633      	mov	r3, r6
 800dee0:	461e      	mov	r6, r3
 800dee2:	3b01      	subs	r3, #1
 800dee4:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 800dee8:	2a39      	cmp	r2, #57	@ 0x39
 800deea:	d052      	beq.n	800df92 <_dtoa_r+0xb12>
 800deec:	3201      	adds	r2, #1
 800deee:	701a      	strb	r2, [r3, #0]
 800def0:	e612      	b.n	800db18 <_dtoa_r+0x698>
 800def2:	2a00      	cmp	r2, #0
 800def4:	dd07      	ble.n	800df06 <_dtoa_r+0xa86>
 800def6:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800defa:	d0ed      	beq.n	800ded8 <_dtoa_r+0xa58>
 800defc:	9a00      	ldr	r2, [sp, #0]
 800defe:	f108 0301 	add.w	r3, r8, #1
 800df02:	7013      	strb	r3, [r2, #0]
 800df04:	e608      	b.n	800db18 <_dtoa_r+0x698>
 800df06:	9b07      	ldr	r3, [sp, #28]
 800df08:	9a07      	ldr	r2, [sp, #28]
 800df0a:	f803 8c01 	strb.w	r8, [r3, #-1]
 800df0e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800df10:	4293      	cmp	r3, r2
 800df12:	d028      	beq.n	800df66 <_dtoa_r+0xae6>
 800df14:	4649      	mov	r1, r9
 800df16:	2300      	movs	r3, #0
 800df18:	220a      	movs	r2, #10
 800df1a:	4658      	mov	r0, fp
 800df1c:	f000 f9d6 	bl	800e2cc <__multadd>
 800df20:	42af      	cmp	r7, r5
 800df22:	4681      	mov	r9, r0
 800df24:	f04f 0300 	mov.w	r3, #0
 800df28:	f04f 020a 	mov.w	r2, #10
 800df2c:	4639      	mov	r1, r7
 800df2e:	4658      	mov	r0, fp
 800df30:	d107      	bne.n	800df42 <_dtoa_r+0xac2>
 800df32:	f000 f9cb 	bl	800e2cc <__multadd>
 800df36:	4607      	mov	r7, r0
 800df38:	4605      	mov	r5, r0
 800df3a:	9b07      	ldr	r3, [sp, #28]
 800df3c:	3301      	adds	r3, #1
 800df3e:	9307      	str	r3, [sp, #28]
 800df40:	e774      	b.n	800de2c <_dtoa_r+0x9ac>
 800df42:	f000 f9c3 	bl	800e2cc <__multadd>
 800df46:	4629      	mov	r1, r5
 800df48:	4607      	mov	r7, r0
 800df4a:	2300      	movs	r3, #0
 800df4c:	220a      	movs	r2, #10
 800df4e:	4658      	mov	r0, fp
 800df50:	f000 f9bc 	bl	800e2cc <__multadd>
 800df54:	4605      	mov	r5, r0
 800df56:	e7f0      	b.n	800df3a <_dtoa_r+0xaba>
 800df58:	9b00      	ldr	r3, [sp, #0]
 800df5a:	2b00      	cmp	r3, #0
 800df5c:	bfcc      	ite	gt
 800df5e:	461e      	movgt	r6, r3
 800df60:	2601      	movle	r6, #1
 800df62:	4456      	add	r6, sl
 800df64:	2700      	movs	r7, #0
 800df66:	4649      	mov	r1, r9
 800df68:	2201      	movs	r2, #1
 800df6a:	4658      	mov	r0, fp
 800df6c:	f000 fb5a 	bl	800e624 <__lshift>
 800df70:	4621      	mov	r1, r4
 800df72:	4681      	mov	r9, r0
 800df74:	f000 fbc2 	bl	800e6fc <__mcmp>
 800df78:	2800      	cmp	r0, #0
 800df7a:	dcb0      	bgt.n	800dede <_dtoa_r+0xa5e>
 800df7c:	d102      	bne.n	800df84 <_dtoa_r+0xb04>
 800df7e:	f018 0f01 	tst.w	r8, #1
 800df82:	d1ac      	bne.n	800dede <_dtoa_r+0xa5e>
 800df84:	4633      	mov	r3, r6
 800df86:	461e      	mov	r6, r3
 800df88:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800df8c:	2a30      	cmp	r2, #48	@ 0x30
 800df8e:	d0fa      	beq.n	800df86 <_dtoa_r+0xb06>
 800df90:	e5c2      	b.n	800db18 <_dtoa_r+0x698>
 800df92:	459a      	cmp	sl, r3
 800df94:	d1a4      	bne.n	800dee0 <_dtoa_r+0xa60>
 800df96:	9b04      	ldr	r3, [sp, #16]
 800df98:	3301      	adds	r3, #1
 800df9a:	9304      	str	r3, [sp, #16]
 800df9c:	2331      	movs	r3, #49	@ 0x31
 800df9e:	f88a 3000 	strb.w	r3, [sl]
 800dfa2:	e5b9      	b.n	800db18 <_dtoa_r+0x698>
 800dfa4:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800dfa6:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 800e004 <_dtoa_r+0xb84>
 800dfaa:	b11b      	cbz	r3, 800dfb4 <_dtoa_r+0xb34>
 800dfac:	f10a 0308 	add.w	r3, sl, #8
 800dfb0:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 800dfb2:	6013      	str	r3, [r2, #0]
 800dfb4:	4650      	mov	r0, sl
 800dfb6:	b019      	add	sp, #100	@ 0x64
 800dfb8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800dfbc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800dfbe:	2b01      	cmp	r3, #1
 800dfc0:	f77f ae37 	ble.w	800dc32 <_dtoa_r+0x7b2>
 800dfc4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800dfc6:	930a      	str	r3, [sp, #40]	@ 0x28
 800dfc8:	2001      	movs	r0, #1
 800dfca:	e655      	b.n	800dc78 <_dtoa_r+0x7f8>
 800dfcc:	9b00      	ldr	r3, [sp, #0]
 800dfce:	2b00      	cmp	r3, #0
 800dfd0:	f77f aed6 	ble.w	800dd80 <_dtoa_r+0x900>
 800dfd4:	4656      	mov	r6, sl
 800dfd6:	4621      	mov	r1, r4
 800dfd8:	4648      	mov	r0, r9
 800dfda:	f7ff f9c6 	bl	800d36a <quorem>
 800dfde:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 800dfe2:	f806 8b01 	strb.w	r8, [r6], #1
 800dfe6:	9b00      	ldr	r3, [sp, #0]
 800dfe8:	eba6 020a 	sub.w	r2, r6, sl
 800dfec:	4293      	cmp	r3, r2
 800dfee:	ddb3      	ble.n	800df58 <_dtoa_r+0xad8>
 800dff0:	4649      	mov	r1, r9
 800dff2:	2300      	movs	r3, #0
 800dff4:	220a      	movs	r2, #10
 800dff6:	4658      	mov	r0, fp
 800dff8:	f000 f968 	bl	800e2cc <__multadd>
 800dffc:	4681      	mov	r9, r0
 800dffe:	e7ea      	b.n	800dfd6 <_dtoa_r+0xb56>
 800e000:	0800f1d0 	.word	0x0800f1d0
 800e004:	0800f154 	.word	0x0800f154

0800e008 <_free_r>:
 800e008:	b538      	push	{r3, r4, r5, lr}
 800e00a:	4605      	mov	r5, r0
 800e00c:	2900      	cmp	r1, #0
 800e00e:	d041      	beq.n	800e094 <_free_r+0x8c>
 800e010:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800e014:	1f0c      	subs	r4, r1, #4
 800e016:	2b00      	cmp	r3, #0
 800e018:	bfb8      	it	lt
 800e01a:	18e4      	addlt	r4, r4, r3
 800e01c:	f000 f8e8 	bl	800e1f0 <__malloc_lock>
 800e020:	4a1d      	ldr	r2, [pc, #116]	@ (800e098 <_free_r+0x90>)
 800e022:	6813      	ldr	r3, [r2, #0]
 800e024:	b933      	cbnz	r3, 800e034 <_free_r+0x2c>
 800e026:	6063      	str	r3, [r4, #4]
 800e028:	6014      	str	r4, [r2, #0]
 800e02a:	4628      	mov	r0, r5
 800e02c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800e030:	f000 b8e4 	b.w	800e1fc <__malloc_unlock>
 800e034:	42a3      	cmp	r3, r4
 800e036:	d908      	bls.n	800e04a <_free_r+0x42>
 800e038:	6820      	ldr	r0, [r4, #0]
 800e03a:	1821      	adds	r1, r4, r0
 800e03c:	428b      	cmp	r3, r1
 800e03e:	bf01      	itttt	eq
 800e040:	6819      	ldreq	r1, [r3, #0]
 800e042:	685b      	ldreq	r3, [r3, #4]
 800e044:	1809      	addeq	r1, r1, r0
 800e046:	6021      	streq	r1, [r4, #0]
 800e048:	e7ed      	b.n	800e026 <_free_r+0x1e>
 800e04a:	461a      	mov	r2, r3
 800e04c:	685b      	ldr	r3, [r3, #4]
 800e04e:	b10b      	cbz	r3, 800e054 <_free_r+0x4c>
 800e050:	42a3      	cmp	r3, r4
 800e052:	d9fa      	bls.n	800e04a <_free_r+0x42>
 800e054:	6811      	ldr	r1, [r2, #0]
 800e056:	1850      	adds	r0, r2, r1
 800e058:	42a0      	cmp	r0, r4
 800e05a:	d10b      	bne.n	800e074 <_free_r+0x6c>
 800e05c:	6820      	ldr	r0, [r4, #0]
 800e05e:	4401      	add	r1, r0
 800e060:	1850      	adds	r0, r2, r1
 800e062:	4283      	cmp	r3, r0
 800e064:	6011      	str	r1, [r2, #0]
 800e066:	d1e0      	bne.n	800e02a <_free_r+0x22>
 800e068:	6818      	ldr	r0, [r3, #0]
 800e06a:	685b      	ldr	r3, [r3, #4]
 800e06c:	6053      	str	r3, [r2, #4]
 800e06e:	4408      	add	r0, r1
 800e070:	6010      	str	r0, [r2, #0]
 800e072:	e7da      	b.n	800e02a <_free_r+0x22>
 800e074:	d902      	bls.n	800e07c <_free_r+0x74>
 800e076:	230c      	movs	r3, #12
 800e078:	602b      	str	r3, [r5, #0]
 800e07a:	e7d6      	b.n	800e02a <_free_r+0x22>
 800e07c:	6820      	ldr	r0, [r4, #0]
 800e07e:	1821      	adds	r1, r4, r0
 800e080:	428b      	cmp	r3, r1
 800e082:	bf04      	itt	eq
 800e084:	6819      	ldreq	r1, [r3, #0]
 800e086:	685b      	ldreq	r3, [r3, #4]
 800e088:	6063      	str	r3, [r4, #4]
 800e08a:	bf04      	itt	eq
 800e08c:	1809      	addeq	r1, r1, r0
 800e08e:	6021      	streq	r1, [r4, #0]
 800e090:	6054      	str	r4, [r2, #4]
 800e092:	e7ca      	b.n	800e02a <_free_r+0x22>
 800e094:	bd38      	pop	{r3, r4, r5, pc}
 800e096:	bf00      	nop
 800e098:	20001cb0 	.word	0x20001cb0

0800e09c <malloc>:
 800e09c:	4b02      	ldr	r3, [pc, #8]	@ (800e0a8 <malloc+0xc>)
 800e09e:	4601      	mov	r1, r0
 800e0a0:	6818      	ldr	r0, [r3, #0]
 800e0a2:	f000 b825 	b.w	800e0f0 <_malloc_r>
 800e0a6:	bf00      	nop
 800e0a8:	200002f0 	.word	0x200002f0

0800e0ac <sbrk_aligned>:
 800e0ac:	b570      	push	{r4, r5, r6, lr}
 800e0ae:	4e0f      	ldr	r6, [pc, #60]	@ (800e0ec <sbrk_aligned+0x40>)
 800e0b0:	460c      	mov	r4, r1
 800e0b2:	6831      	ldr	r1, [r6, #0]
 800e0b4:	4605      	mov	r5, r0
 800e0b6:	b911      	cbnz	r1, 800e0be <sbrk_aligned+0x12>
 800e0b8:	f000 fcd4 	bl	800ea64 <_sbrk_r>
 800e0bc:	6030      	str	r0, [r6, #0]
 800e0be:	4621      	mov	r1, r4
 800e0c0:	4628      	mov	r0, r5
 800e0c2:	f000 fccf 	bl	800ea64 <_sbrk_r>
 800e0c6:	1c43      	adds	r3, r0, #1
 800e0c8:	d103      	bne.n	800e0d2 <sbrk_aligned+0x26>
 800e0ca:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 800e0ce:	4620      	mov	r0, r4
 800e0d0:	bd70      	pop	{r4, r5, r6, pc}
 800e0d2:	1cc4      	adds	r4, r0, #3
 800e0d4:	f024 0403 	bic.w	r4, r4, #3
 800e0d8:	42a0      	cmp	r0, r4
 800e0da:	d0f8      	beq.n	800e0ce <sbrk_aligned+0x22>
 800e0dc:	1a21      	subs	r1, r4, r0
 800e0de:	4628      	mov	r0, r5
 800e0e0:	f000 fcc0 	bl	800ea64 <_sbrk_r>
 800e0e4:	3001      	adds	r0, #1
 800e0e6:	d1f2      	bne.n	800e0ce <sbrk_aligned+0x22>
 800e0e8:	e7ef      	b.n	800e0ca <sbrk_aligned+0x1e>
 800e0ea:	bf00      	nop
 800e0ec:	20001cac 	.word	0x20001cac

0800e0f0 <_malloc_r>:
 800e0f0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800e0f4:	1ccd      	adds	r5, r1, #3
 800e0f6:	f025 0503 	bic.w	r5, r5, #3
 800e0fa:	3508      	adds	r5, #8
 800e0fc:	2d0c      	cmp	r5, #12
 800e0fe:	bf38      	it	cc
 800e100:	250c      	movcc	r5, #12
 800e102:	2d00      	cmp	r5, #0
 800e104:	4606      	mov	r6, r0
 800e106:	db01      	blt.n	800e10c <_malloc_r+0x1c>
 800e108:	42a9      	cmp	r1, r5
 800e10a:	d904      	bls.n	800e116 <_malloc_r+0x26>
 800e10c:	230c      	movs	r3, #12
 800e10e:	6033      	str	r3, [r6, #0]
 800e110:	2000      	movs	r0, #0
 800e112:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800e116:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800e1ec <_malloc_r+0xfc>
 800e11a:	f000 f869 	bl	800e1f0 <__malloc_lock>
 800e11e:	f8d8 3000 	ldr.w	r3, [r8]
 800e122:	461c      	mov	r4, r3
 800e124:	bb44      	cbnz	r4, 800e178 <_malloc_r+0x88>
 800e126:	4629      	mov	r1, r5
 800e128:	4630      	mov	r0, r6
 800e12a:	f7ff ffbf 	bl	800e0ac <sbrk_aligned>
 800e12e:	1c43      	adds	r3, r0, #1
 800e130:	4604      	mov	r4, r0
 800e132:	d158      	bne.n	800e1e6 <_malloc_r+0xf6>
 800e134:	f8d8 4000 	ldr.w	r4, [r8]
 800e138:	4627      	mov	r7, r4
 800e13a:	2f00      	cmp	r7, #0
 800e13c:	d143      	bne.n	800e1c6 <_malloc_r+0xd6>
 800e13e:	2c00      	cmp	r4, #0
 800e140:	d04b      	beq.n	800e1da <_malloc_r+0xea>
 800e142:	6823      	ldr	r3, [r4, #0]
 800e144:	4639      	mov	r1, r7
 800e146:	4630      	mov	r0, r6
 800e148:	eb04 0903 	add.w	r9, r4, r3
 800e14c:	f000 fc8a 	bl	800ea64 <_sbrk_r>
 800e150:	4581      	cmp	r9, r0
 800e152:	d142      	bne.n	800e1da <_malloc_r+0xea>
 800e154:	6821      	ldr	r1, [r4, #0]
 800e156:	1a6d      	subs	r5, r5, r1
 800e158:	4629      	mov	r1, r5
 800e15a:	4630      	mov	r0, r6
 800e15c:	f7ff ffa6 	bl	800e0ac <sbrk_aligned>
 800e160:	3001      	adds	r0, #1
 800e162:	d03a      	beq.n	800e1da <_malloc_r+0xea>
 800e164:	6823      	ldr	r3, [r4, #0]
 800e166:	442b      	add	r3, r5
 800e168:	6023      	str	r3, [r4, #0]
 800e16a:	f8d8 3000 	ldr.w	r3, [r8]
 800e16e:	685a      	ldr	r2, [r3, #4]
 800e170:	bb62      	cbnz	r2, 800e1cc <_malloc_r+0xdc>
 800e172:	f8c8 7000 	str.w	r7, [r8]
 800e176:	e00f      	b.n	800e198 <_malloc_r+0xa8>
 800e178:	6822      	ldr	r2, [r4, #0]
 800e17a:	1b52      	subs	r2, r2, r5
 800e17c:	d420      	bmi.n	800e1c0 <_malloc_r+0xd0>
 800e17e:	2a0b      	cmp	r2, #11
 800e180:	d917      	bls.n	800e1b2 <_malloc_r+0xc2>
 800e182:	1961      	adds	r1, r4, r5
 800e184:	42a3      	cmp	r3, r4
 800e186:	6025      	str	r5, [r4, #0]
 800e188:	bf18      	it	ne
 800e18a:	6059      	strne	r1, [r3, #4]
 800e18c:	6863      	ldr	r3, [r4, #4]
 800e18e:	bf08      	it	eq
 800e190:	f8c8 1000 	streq.w	r1, [r8]
 800e194:	5162      	str	r2, [r4, r5]
 800e196:	604b      	str	r3, [r1, #4]
 800e198:	4630      	mov	r0, r6
 800e19a:	f000 f82f 	bl	800e1fc <__malloc_unlock>
 800e19e:	f104 000b 	add.w	r0, r4, #11
 800e1a2:	1d23      	adds	r3, r4, #4
 800e1a4:	f020 0007 	bic.w	r0, r0, #7
 800e1a8:	1ac2      	subs	r2, r0, r3
 800e1aa:	bf1c      	itt	ne
 800e1ac:	1a1b      	subne	r3, r3, r0
 800e1ae:	50a3      	strne	r3, [r4, r2]
 800e1b0:	e7af      	b.n	800e112 <_malloc_r+0x22>
 800e1b2:	6862      	ldr	r2, [r4, #4]
 800e1b4:	42a3      	cmp	r3, r4
 800e1b6:	bf0c      	ite	eq
 800e1b8:	f8c8 2000 	streq.w	r2, [r8]
 800e1bc:	605a      	strne	r2, [r3, #4]
 800e1be:	e7eb      	b.n	800e198 <_malloc_r+0xa8>
 800e1c0:	4623      	mov	r3, r4
 800e1c2:	6864      	ldr	r4, [r4, #4]
 800e1c4:	e7ae      	b.n	800e124 <_malloc_r+0x34>
 800e1c6:	463c      	mov	r4, r7
 800e1c8:	687f      	ldr	r7, [r7, #4]
 800e1ca:	e7b6      	b.n	800e13a <_malloc_r+0x4a>
 800e1cc:	461a      	mov	r2, r3
 800e1ce:	685b      	ldr	r3, [r3, #4]
 800e1d0:	42a3      	cmp	r3, r4
 800e1d2:	d1fb      	bne.n	800e1cc <_malloc_r+0xdc>
 800e1d4:	2300      	movs	r3, #0
 800e1d6:	6053      	str	r3, [r2, #4]
 800e1d8:	e7de      	b.n	800e198 <_malloc_r+0xa8>
 800e1da:	230c      	movs	r3, #12
 800e1dc:	6033      	str	r3, [r6, #0]
 800e1de:	4630      	mov	r0, r6
 800e1e0:	f000 f80c 	bl	800e1fc <__malloc_unlock>
 800e1e4:	e794      	b.n	800e110 <_malloc_r+0x20>
 800e1e6:	6005      	str	r5, [r0, #0]
 800e1e8:	e7d6      	b.n	800e198 <_malloc_r+0xa8>
 800e1ea:	bf00      	nop
 800e1ec:	20001cb0 	.word	0x20001cb0

0800e1f0 <__malloc_lock>:
 800e1f0:	4801      	ldr	r0, [pc, #4]	@ (800e1f8 <__malloc_lock+0x8>)
 800e1f2:	f7ff b8b8 	b.w	800d366 <__retarget_lock_acquire_recursive>
 800e1f6:	bf00      	nop
 800e1f8:	20001ca8 	.word	0x20001ca8

0800e1fc <__malloc_unlock>:
 800e1fc:	4801      	ldr	r0, [pc, #4]	@ (800e204 <__malloc_unlock+0x8>)
 800e1fe:	f7ff b8b3 	b.w	800d368 <__retarget_lock_release_recursive>
 800e202:	bf00      	nop
 800e204:	20001ca8 	.word	0x20001ca8

0800e208 <_Balloc>:
 800e208:	b570      	push	{r4, r5, r6, lr}
 800e20a:	69c6      	ldr	r6, [r0, #28]
 800e20c:	4604      	mov	r4, r0
 800e20e:	460d      	mov	r5, r1
 800e210:	b976      	cbnz	r6, 800e230 <_Balloc+0x28>
 800e212:	2010      	movs	r0, #16
 800e214:	f7ff ff42 	bl	800e09c <malloc>
 800e218:	4602      	mov	r2, r0
 800e21a:	61e0      	str	r0, [r4, #28]
 800e21c:	b920      	cbnz	r0, 800e228 <_Balloc+0x20>
 800e21e:	4b18      	ldr	r3, [pc, #96]	@ (800e280 <_Balloc+0x78>)
 800e220:	4818      	ldr	r0, [pc, #96]	@ (800e284 <_Balloc+0x7c>)
 800e222:	216b      	movs	r1, #107	@ 0x6b
 800e224:	f000 fc3c 	bl	800eaa0 <__assert_func>
 800e228:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800e22c:	6006      	str	r6, [r0, #0]
 800e22e:	60c6      	str	r6, [r0, #12]
 800e230:	69e6      	ldr	r6, [r4, #28]
 800e232:	68f3      	ldr	r3, [r6, #12]
 800e234:	b183      	cbz	r3, 800e258 <_Balloc+0x50>
 800e236:	69e3      	ldr	r3, [r4, #28]
 800e238:	68db      	ldr	r3, [r3, #12]
 800e23a:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800e23e:	b9b8      	cbnz	r0, 800e270 <_Balloc+0x68>
 800e240:	2101      	movs	r1, #1
 800e242:	fa01 f605 	lsl.w	r6, r1, r5
 800e246:	1d72      	adds	r2, r6, #5
 800e248:	0092      	lsls	r2, r2, #2
 800e24a:	4620      	mov	r0, r4
 800e24c:	f000 fc46 	bl	800eadc <_calloc_r>
 800e250:	b160      	cbz	r0, 800e26c <_Balloc+0x64>
 800e252:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800e256:	e00e      	b.n	800e276 <_Balloc+0x6e>
 800e258:	2221      	movs	r2, #33	@ 0x21
 800e25a:	2104      	movs	r1, #4
 800e25c:	4620      	mov	r0, r4
 800e25e:	f000 fc3d 	bl	800eadc <_calloc_r>
 800e262:	69e3      	ldr	r3, [r4, #28]
 800e264:	60f0      	str	r0, [r6, #12]
 800e266:	68db      	ldr	r3, [r3, #12]
 800e268:	2b00      	cmp	r3, #0
 800e26a:	d1e4      	bne.n	800e236 <_Balloc+0x2e>
 800e26c:	2000      	movs	r0, #0
 800e26e:	bd70      	pop	{r4, r5, r6, pc}
 800e270:	6802      	ldr	r2, [r0, #0]
 800e272:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800e276:	2300      	movs	r3, #0
 800e278:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800e27c:	e7f7      	b.n	800e26e <_Balloc+0x66>
 800e27e:	bf00      	nop
 800e280:	0800f161 	.word	0x0800f161
 800e284:	0800f1e1 	.word	0x0800f1e1

0800e288 <_Bfree>:
 800e288:	b570      	push	{r4, r5, r6, lr}
 800e28a:	69c6      	ldr	r6, [r0, #28]
 800e28c:	4605      	mov	r5, r0
 800e28e:	460c      	mov	r4, r1
 800e290:	b976      	cbnz	r6, 800e2b0 <_Bfree+0x28>
 800e292:	2010      	movs	r0, #16
 800e294:	f7ff ff02 	bl	800e09c <malloc>
 800e298:	4602      	mov	r2, r0
 800e29a:	61e8      	str	r0, [r5, #28]
 800e29c:	b920      	cbnz	r0, 800e2a8 <_Bfree+0x20>
 800e29e:	4b09      	ldr	r3, [pc, #36]	@ (800e2c4 <_Bfree+0x3c>)
 800e2a0:	4809      	ldr	r0, [pc, #36]	@ (800e2c8 <_Bfree+0x40>)
 800e2a2:	218f      	movs	r1, #143	@ 0x8f
 800e2a4:	f000 fbfc 	bl	800eaa0 <__assert_func>
 800e2a8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800e2ac:	6006      	str	r6, [r0, #0]
 800e2ae:	60c6      	str	r6, [r0, #12]
 800e2b0:	b13c      	cbz	r4, 800e2c2 <_Bfree+0x3a>
 800e2b2:	69eb      	ldr	r3, [r5, #28]
 800e2b4:	6862      	ldr	r2, [r4, #4]
 800e2b6:	68db      	ldr	r3, [r3, #12]
 800e2b8:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800e2bc:	6021      	str	r1, [r4, #0]
 800e2be:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800e2c2:	bd70      	pop	{r4, r5, r6, pc}
 800e2c4:	0800f161 	.word	0x0800f161
 800e2c8:	0800f1e1 	.word	0x0800f1e1

0800e2cc <__multadd>:
 800e2cc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e2d0:	690d      	ldr	r5, [r1, #16]
 800e2d2:	4607      	mov	r7, r0
 800e2d4:	460c      	mov	r4, r1
 800e2d6:	461e      	mov	r6, r3
 800e2d8:	f101 0c14 	add.w	ip, r1, #20
 800e2dc:	2000      	movs	r0, #0
 800e2de:	f8dc 3000 	ldr.w	r3, [ip]
 800e2e2:	b299      	uxth	r1, r3
 800e2e4:	fb02 6101 	mla	r1, r2, r1, r6
 800e2e8:	0c1e      	lsrs	r6, r3, #16
 800e2ea:	0c0b      	lsrs	r3, r1, #16
 800e2ec:	fb02 3306 	mla	r3, r2, r6, r3
 800e2f0:	b289      	uxth	r1, r1
 800e2f2:	3001      	adds	r0, #1
 800e2f4:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800e2f8:	4285      	cmp	r5, r0
 800e2fa:	f84c 1b04 	str.w	r1, [ip], #4
 800e2fe:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800e302:	dcec      	bgt.n	800e2de <__multadd+0x12>
 800e304:	b30e      	cbz	r6, 800e34a <__multadd+0x7e>
 800e306:	68a3      	ldr	r3, [r4, #8]
 800e308:	42ab      	cmp	r3, r5
 800e30a:	dc19      	bgt.n	800e340 <__multadd+0x74>
 800e30c:	6861      	ldr	r1, [r4, #4]
 800e30e:	4638      	mov	r0, r7
 800e310:	3101      	adds	r1, #1
 800e312:	f7ff ff79 	bl	800e208 <_Balloc>
 800e316:	4680      	mov	r8, r0
 800e318:	b928      	cbnz	r0, 800e326 <__multadd+0x5a>
 800e31a:	4602      	mov	r2, r0
 800e31c:	4b0c      	ldr	r3, [pc, #48]	@ (800e350 <__multadd+0x84>)
 800e31e:	480d      	ldr	r0, [pc, #52]	@ (800e354 <__multadd+0x88>)
 800e320:	21ba      	movs	r1, #186	@ 0xba
 800e322:	f000 fbbd 	bl	800eaa0 <__assert_func>
 800e326:	6922      	ldr	r2, [r4, #16]
 800e328:	3202      	adds	r2, #2
 800e32a:	f104 010c 	add.w	r1, r4, #12
 800e32e:	0092      	lsls	r2, r2, #2
 800e330:	300c      	adds	r0, #12
 800e332:	f000 fba7 	bl	800ea84 <memcpy>
 800e336:	4621      	mov	r1, r4
 800e338:	4638      	mov	r0, r7
 800e33a:	f7ff ffa5 	bl	800e288 <_Bfree>
 800e33e:	4644      	mov	r4, r8
 800e340:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800e344:	3501      	adds	r5, #1
 800e346:	615e      	str	r6, [r3, #20]
 800e348:	6125      	str	r5, [r4, #16]
 800e34a:	4620      	mov	r0, r4
 800e34c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e350:	0800f1d0 	.word	0x0800f1d0
 800e354:	0800f1e1 	.word	0x0800f1e1

0800e358 <__hi0bits>:
 800e358:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 800e35c:	4603      	mov	r3, r0
 800e35e:	bf36      	itet	cc
 800e360:	0403      	lslcc	r3, r0, #16
 800e362:	2000      	movcs	r0, #0
 800e364:	2010      	movcc	r0, #16
 800e366:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800e36a:	bf3c      	itt	cc
 800e36c:	021b      	lslcc	r3, r3, #8
 800e36e:	3008      	addcc	r0, #8
 800e370:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800e374:	bf3c      	itt	cc
 800e376:	011b      	lslcc	r3, r3, #4
 800e378:	3004      	addcc	r0, #4
 800e37a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800e37e:	bf3c      	itt	cc
 800e380:	009b      	lslcc	r3, r3, #2
 800e382:	3002      	addcc	r0, #2
 800e384:	2b00      	cmp	r3, #0
 800e386:	db05      	blt.n	800e394 <__hi0bits+0x3c>
 800e388:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 800e38c:	f100 0001 	add.w	r0, r0, #1
 800e390:	bf08      	it	eq
 800e392:	2020      	moveq	r0, #32
 800e394:	4770      	bx	lr

0800e396 <__lo0bits>:
 800e396:	6803      	ldr	r3, [r0, #0]
 800e398:	4602      	mov	r2, r0
 800e39a:	f013 0007 	ands.w	r0, r3, #7
 800e39e:	d00b      	beq.n	800e3b8 <__lo0bits+0x22>
 800e3a0:	07d9      	lsls	r1, r3, #31
 800e3a2:	d421      	bmi.n	800e3e8 <__lo0bits+0x52>
 800e3a4:	0798      	lsls	r0, r3, #30
 800e3a6:	bf49      	itett	mi
 800e3a8:	085b      	lsrmi	r3, r3, #1
 800e3aa:	089b      	lsrpl	r3, r3, #2
 800e3ac:	2001      	movmi	r0, #1
 800e3ae:	6013      	strmi	r3, [r2, #0]
 800e3b0:	bf5c      	itt	pl
 800e3b2:	6013      	strpl	r3, [r2, #0]
 800e3b4:	2002      	movpl	r0, #2
 800e3b6:	4770      	bx	lr
 800e3b8:	b299      	uxth	r1, r3
 800e3ba:	b909      	cbnz	r1, 800e3c0 <__lo0bits+0x2a>
 800e3bc:	0c1b      	lsrs	r3, r3, #16
 800e3be:	2010      	movs	r0, #16
 800e3c0:	b2d9      	uxtb	r1, r3
 800e3c2:	b909      	cbnz	r1, 800e3c8 <__lo0bits+0x32>
 800e3c4:	3008      	adds	r0, #8
 800e3c6:	0a1b      	lsrs	r3, r3, #8
 800e3c8:	0719      	lsls	r1, r3, #28
 800e3ca:	bf04      	itt	eq
 800e3cc:	091b      	lsreq	r3, r3, #4
 800e3ce:	3004      	addeq	r0, #4
 800e3d0:	0799      	lsls	r1, r3, #30
 800e3d2:	bf04      	itt	eq
 800e3d4:	089b      	lsreq	r3, r3, #2
 800e3d6:	3002      	addeq	r0, #2
 800e3d8:	07d9      	lsls	r1, r3, #31
 800e3da:	d403      	bmi.n	800e3e4 <__lo0bits+0x4e>
 800e3dc:	085b      	lsrs	r3, r3, #1
 800e3de:	f100 0001 	add.w	r0, r0, #1
 800e3e2:	d003      	beq.n	800e3ec <__lo0bits+0x56>
 800e3e4:	6013      	str	r3, [r2, #0]
 800e3e6:	4770      	bx	lr
 800e3e8:	2000      	movs	r0, #0
 800e3ea:	4770      	bx	lr
 800e3ec:	2020      	movs	r0, #32
 800e3ee:	4770      	bx	lr

0800e3f0 <__i2b>:
 800e3f0:	b510      	push	{r4, lr}
 800e3f2:	460c      	mov	r4, r1
 800e3f4:	2101      	movs	r1, #1
 800e3f6:	f7ff ff07 	bl	800e208 <_Balloc>
 800e3fa:	4602      	mov	r2, r0
 800e3fc:	b928      	cbnz	r0, 800e40a <__i2b+0x1a>
 800e3fe:	4b05      	ldr	r3, [pc, #20]	@ (800e414 <__i2b+0x24>)
 800e400:	4805      	ldr	r0, [pc, #20]	@ (800e418 <__i2b+0x28>)
 800e402:	f240 1145 	movw	r1, #325	@ 0x145
 800e406:	f000 fb4b 	bl	800eaa0 <__assert_func>
 800e40a:	2301      	movs	r3, #1
 800e40c:	6144      	str	r4, [r0, #20]
 800e40e:	6103      	str	r3, [r0, #16]
 800e410:	bd10      	pop	{r4, pc}
 800e412:	bf00      	nop
 800e414:	0800f1d0 	.word	0x0800f1d0
 800e418:	0800f1e1 	.word	0x0800f1e1

0800e41c <__multiply>:
 800e41c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e420:	4614      	mov	r4, r2
 800e422:	690a      	ldr	r2, [r1, #16]
 800e424:	6923      	ldr	r3, [r4, #16]
 800e426:	429a      	cmp	r2, r3
 800e428:	bfa8      	it	ge
 800e42a:	4623      	movge	r3, r4
 800e42c:	460f      	mov	r7, r1
 800e42e:	bfa4      	itt	ge
 800e430:	460c      	movge	r4, r1
 800e432:	461f      	movge	r7, r3
 800e434:	f8d4 a010 	ldr.w	sl, [r4, #16]
 800e438:	f8d7 9010 	ldr.w	r9, [r7, #16]
 800e43c:	68a3      	ldr	r3, [r4, #8]
 800e43e:	6861      	ldr	r1, [r4, #4]
 800e440:	eb0a 0609 	add.w	r6, sl, r9
 800e444:	42b3      	cmp	r3, r6
 800e446:	b085      	sub	sp, #20
 800e448:	bfb8      	it	lt
 800e44a:	3101      	addlt	r1, #1
 800e44c:	f7ff fedc 	bl	800e208 <_Balloc>
 800e450:	b930      	cbnz	r0, 800e460 <__multiply+0x44>
 800e452:	4602      	mov	r2, r0
 800e454:	4b44      	ldr	r3, [pc, #272]	@ (800e568 <__multiply+0x14c>)
 800e456:	4845      	ldr	r0, [pc, #276]	@ (800e56c <__multiply+0x150>)
 800e458:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 800e45c:	f000 fb20 	bl	800eaa0 <__assert_func>
 800e460:	f100 0514 	add.w	r5, r0, #20
 800e464:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800e468:	462b      	mov	r3, r5
 800e46a:	2200      	movs	r2, #0
 800e46c:	4543      	cmp	r3, r8
 800e46e:	d321      	bcc.n	800e4b4 <__multiply+0x98>
 800e470:	f107 0114 	add.w	r1, r7, #20
 800e474:	f104 0214 	add.w	r2, r4, #20
 800e478:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 800e47c:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 800e480:	9302      	str	r3, [sp, #8]
 800e482:	1b13      	subs	r3, r2, r4
 800e484:	3b15      	subs	r3, #21
 800e486:	f023 0303 	bic.w	r3, r3, #3
 800e48a:	3304      	adds	r3, #4
 800e48c:	f104 0715 	add.w	r7, r4, #21
 800e490:	42ba      	cmp	r2, r7
 800e492:	bf38      	it	cc
 800e494:	2304      	movcc	r3, #4
 800e496:	9301      	str	r3, [sp, #4]
 800e498:	9b02      	ldr	r3, [sp, #8]
 800e49a:	9103      	str	r1, [sp, #12]
 800e49c:	428b      	cmp	r3, r1
 800e49e:	d80c      	bhi.n	800e4ba <__multiply+0x9e>
 800e4a0:	2e00      	cmp	r6, #0
 800e4a2:	dd03      	ble.n	800e4ac <__multiply+0x90>
 800e4a4:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800e4a8:	2b00      	cmp	r3, #0
 800e4aa:	d05b      	beq.n	800e564 <__multiply+0x148>
 800e4ac:	6106      	str	r6, [r0, #16]
 800e4ae:	b005      	add	sp, #20
 800e4b0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e4b4:	f843 2b04 	str.w	r2, [r3], #4
 800e4b8:	e7d8      	b.n	800e46c <__multiply+0x50>
 800e4ba:	f8b1 a000 	ldrh.w	sl, [r1]
 800e4be:	f1ba 0f00 	cmp.w	sl, #0
 800e4c2:	d024      	beq.n	800e50e <__multiply+0xf2>
 800e4c4:	f104 0e14 	add.w	lr, r4, #20
 800e4c8:	46a9      	mov	r9, r5
 800e4ca:	f04f 0c00 	mov.w	ip, #0
 800e4ce:	f85e 7b04 	ldr.w	r7, [lr], #4
 800e4d2:	f8d9 3000 	ldr.w	r3, [r9]
 800e4d6:	fa1f fb87 	uxth.w	fp, r7
 800e4da:	b29b      	uxth	r3, r3
 800e4dc:	fb0a 330b 	mla	r3, sl, fp, r3
 800e4e0:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 800e4e4:	f8d9 7000 	ldr.w	r7, [r9]
 800e4e8:	4463      	add	r3, ip
 800e4ea:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800e4ee:	fb0a c70b 	mla	r7, sl, fp, ip
 800e4f2:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 800e4f6:	b29b      	uxth	r3, r3
 800e4f8:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800e4fc:	4572      	cmp	r2, lr
 800e4fe:	f849 3b04 	str.w	r3, [r9], #4
 800e502:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800e506:	d8e2      	bhi.n	800e4ce <__multiply+0xb2>
 800e508:	9b01      	ldr	r3, [sp, #4]
 800e50a:	f845 c003 	str.w	ip, [r5, r3]
 800e50e:	9b03      	ldr	r3, [sp, #12]
 800e510:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 800e514:	3104      	adds	r1, #4
 800e516:	f1b9 0f00 	cmp.w	r9, #0
 800e51a:	d021      	beq.n	800e560 <__multiply+0x144>
 800e51c:	682b      	ldr	r3, [r5, #0]
 800e51e:	f104 0c14 	add.w	ip, r4, #20
 800e522:	46ae      	mov	lr, r5
 800e524:	f04f 0a00 	mov.w	sl, #0
 800e528:	f8bc b000 	ldrh.w	fp, [ip]
 800e52c:	f8be 7002 	ldrh.w	r7, [lr, #2]
 800e530:	fb09 770b 	mla	r7, r9, fp, r7
 800e534:	4457      	add	r7, sl
 800e536:	b29b      	uxth	r3, r3
 800e538:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800e53c:	f84e 3b04 	str.w	r3, [lr], #4
 800e540:	f85c 3b04 	ldr.w	r3, [ip], #4
 800e544:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800e548:	f8be 3000 	ldrh.w	r3, [lr]
 800e54c:	fb09 330a 	mla	r3, r9, sl, r3
 800e550:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 800e554:	4562      	cmp	r2, ip
 800e556:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800e55a:	d8e5      	bhi.n	800e528 <__multiply+0x10c>
 800e55c:	9f01      	ldr	r7, [sp, #4]
 800e55e:	51eb      	str	r3, [r5, r7]
 800e560:	3504      	adds	r5, #4
 800e562:	e799      	b.n	800e498 <__multiply+0x7c>
 800e564:	3e01      	subs	r6, #1
 800e566:	e79b      	b.n	800e4a0 <__multiply+0x84>
 800e568:	0800f1d0 	.word	0x0800f1d0
 800e56c:	0800f1e1 	.word	0x0800f1e1

0800e570 <__pow5mult>:
 800e570:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800e574:	4615      	mov	r5, r2
 800e576:	f012 0203 	ands.w	r2, r2, #3
 800e57a:	4607      	mov	r7, r0
 800e57c:	460e      	mov	r6, r1
 800e57e:	d007      	beq.n	800e590 <__pow5mult+0x20>
 800e580:	4c25      	ldr	r4, [pc, #148]	@ (800e618 <__pow5mult+0xa8>)
 800e582:	3a01      	subs	r2, #1
 800e584:	2300      	movs	r3, #0
 800e586:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800e58a:	f7ff fe9f 	bl	800e2cc <__multadd>
 800e58e:	4606      	mov	r6, r0
 800e590:	10ad      	asrs	r5, r5, #2
 800e592:	d03d      	beq.n	800e610 <__pow5mult+0xa0>
 800e594:	69fc      	ldr	r4, [r7, #28]
 800e596:	b97c      	cbnz	r4, 800e5b8 <__pow5mult+0x48>
 800e598:	2010      	movs	r0, #16
 800e59a:	f7ff fd7f 	bl	800e09c <malloc>
 800e59e:	4602      	mov	r2, r0
 800e5a0:	61f8      	str	r0, [r7, #28]
 800e5a2:	b928      	cbnz	r0, 800e5b0 <__pow5mult+0x40>
 800e5a4:	4b1d      	ldr	r3, [pc, #116]	@ (800e61c <__pow5mult+0xac>)
 800e5a6:	481e      	ldr	r0, [pc, #120]	@ (800e620 <__pow5mult+0xb0>)
 800e5a8:	f240 11b3 	movw	r1, #435	@ 0x1b3
 800e5ac:	f000 fa78 	bl	800eaa0 <__assert_func>
 800e5b0:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800e5b4:	6004      	str	r4, [r0, #0]
 800e5b6:	60c4      	str	r4, [r0, #12]
 800e5b8:	f8d7 801c 	ldr.w	r8, [r7, #28]
 800e5bc:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800e5c0:	b94c      	cbnz	r4, 800e5d6 <__pow5mult+0x66>
 800e5c2:	f240 2171 	movw	r1, #625	@ 0x271
 800e5c6:	4638      	mov	r0, r7
 800e5c8:	f7ff ff12 	bl	800e3f0 <__i2b>
 800e5cc:	2300      	movs	r3, #0
 800e5ce:	f8c8 0008 	str.w	r0, [r8, #8]
 800e5d2:	4604      	mov	r4, r0
 800e5d4:	6003      	str	r3, [r0, #0]
 800e5d6:	f04f 0900 	mov.w	r9, #0
 800e5da:	07eb      	lsls	r3, r5, #31
 800e5dc:	d50a      	bpl.n	800e5f4 <__pow5mult+0x84>
 800e5de:	4631      	mov	r1, r6
 800e5e0:	4622      	mov	r2, r4
 800e5e2:	4638      	mov	r0, r7
 800e5e4:	f7ff ff1a 	bl	800e41c <__multiply>
 800e5e8:	4631      	mov	r1, r6
 800e5ea:	4680      	mov	r8, r0
 800e5ec:	4638      	mov	r0, r7
 800e5ee:	f7ff fe4b 	bl	800e288 <_Bfree>
 800e5f2:	4646      	mov	r6, r8
 800e5f4:	106d      	asrs	r5, r5, #1
 800e5f6:	d00b      	beq.n	800e610 <__pow5mult+0xa0>
 800e5f8:	6820      	ldr	r0, [r4, #0]
 800e5fa:	b938      	cbnz	r0, 800e60c <__pow5mult+0x9c>
 800e5fc:	4622      	mov	r2, r4
 800e5fe:	4621      	mov	r1, r4
 800e600:	4638      	mov	r0, r7
 800e602:	f7ff ff0b 	bl	800e41c <__multiply>
 800e606:	6020      	str	r0, [r4, #0]
 800e608:	f8c0 9000 	str.w	r9, [r0]
 800e60c:	4604      	mov	r4, r0
 800e60e:	e7e4      	b.n	800e5da <__pow5mult+0x6a>
 800e610:	4630      	mov	r0, r6
 800e612:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800e616:	bf00      	nop
 800e618:	0800f23c 	.word	0x0800f23c
 800e61c:	0800f161 	.word	0x0800f161
 800e620:	0800f1e1 	.word	0x0800f1e1

0800e624 <__lshift>:
 800e624:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800e628:	460c      	mov	r4, r1
 800e62a:	6849      	ldr	r1, [r1, #4]
 800e62c:	6923      	ldr	r3, [r4, #16]
 800e62e:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800e632:	68a3      	ldr	r3, [r4, #8]
 800e634:	4607      	mov	r7, r0
 800e636:	4691      	mov	r9, r2
 800e638:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800e63c:	f108 0601 	add.w	r6, r8, #1
 800e640:	42b3      	cmp	r3, r6
 800e642:	db0b      	blt.n	800e65c <__lshift+0x38>
 800e644:	4638      	mov	r0, r7
 800e646:	f7ff fddf 	bl	800e208 <_Balloc>
 800e64a:	4605      	mov	r5, r0
 800e64c:	b948      	cbnz	r0, 800e662 <__lshift+0x3e>
 800e64e:	4602      	mov	r2, r0
 800e650:	4b28      	ldr	r3, [pc, #160]	@ (800e6f4 <__lshift+0xd0>)
 800e652:	4829      	ldr	r0, [pc, #164]	@ (800e6f8 <__lshift+0xd4>)
 800e654:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 800e658:	f000 fa22 	bl	800eaa0 <__assert_func>
 800e65c:	3101      	adds	r1, #1
 800e65e:	005b      	lsls	r3, r3, #1
 800e660:	e7ee      	b.n	800e640 <__lshift+0x1c>
 800e662:	2300      	movs	r3, #0
 800e664:	f100 0114 	add.w	r1, r0, #20
 800e668:	f100 0210 	add.w	r2, r0, #16
 800e66c:	4618      	mov	r0, r3
 800e66e:	4553      	cmp	r3, sl
 800e670:	db33      	blt.n	800e6da <__lshift+0xb6>
 800e672:	6920      	ldr	r0, [r4, #16]
 800e674:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800e678:	f104 0314 	add.w	r3, r4, #20
 800e67c:	f019 091f 	ands.w	r9, r9, #31
 800e680:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800e684:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800e688:	d02b      	beq.n	800e6e2 <__lshift+0xbe>
 800e68a:	f1c9 0e20 	rsb	lr, r9, #32
 800e68e:	468a      	mov	sl, r1
 800e690:	2200      	movs	r2, #0
 800e692:	6818      	ldr	r0, [r3, #0]
 800e694:	fa00 f009 	lsl.w	r0, r0, r9
 800e698:	4310      	orrs	r0, r2
 800e69a:	f84a 0b04 	str.w	r0, [sl], #4
 800e69e:	f853 2b04 	ldr.w	r2, [r3], #4
 800e6a2:	459c      	cmp	ip, r3
 800e6a4:	fa22 f20e 	lsr.w	r2, r2, lr
 800e6a8:	d8f3      	bhi.n	800e692 <__lshift+0x6e>
 800e6aa:	ebac 0304 	sub.w	r3, ip, r4
 800e6ae:	3b15      	subs	r3, #21
 800e6b0:	f023 0303 	bic.w	r3, r3, #3
 800e6b4:	3304      	adds	r3, #4
 800e6b6:	f104 0015 	add.w	r0, r4, #21
 800e6ba:	4584      	cmp	ip, r0
 800e6bc:	bf38      	it	cc
 800e6be:	2304      	movcc	r3, #4
 800e6c0:	50ca      	str	r2, [r1, r3]
 800e6c2:	b10a      	cbz	r2, 800e6c8 <__lshift+0xa4>
 800e6c4:	f108 0602 	add.w	r6, r8, #2
 800e6c8:	3e01      	subs	r6, #1
 800e6ca:	4638      	mov	r0, r7
 800e6cc:	612e      	str	r6, [r5, #16]
 800e6ce:	4621      	mov	r1, r4
 800e6d0:	f7ff fdda 	bl	800e288 <_Bfree>
 800e6d4:	4628      	mov	r0, r5
 800e6d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e6da:	f842 0f04 	str.w	r0, [r2, #4]!
 800e6de:	3301      	adds	r3, #1
 800e6e0:	e7c5      	b.n	800e66e <__lshift+0x4a>
 800e6e2:	3904      	subs	r1, #4
 800e6e4:	f853 2b04 	ldr.w	r2, [r3], #4
 800e6e8:	f841 2f04 	str.w	r2, [r1, #4]!
 800e6ec:	459c      	cmp	ip, r3
 800e6ee:	d8f9      	bhi.n	800e6e4 <__lshift+0xc0>
 800e6f0:	e7ea      	b.n	800e6c8 <__lshift+0xa4>
 800e6f2:	bf00      	nop
 800e6f4:	0800f1d0 	.word	0x0800f1d0
 800e6f8:	0800f1e1 	.word	0x0800f1e1

0800e6fc <__mcmp>:
 800e6fc:	690a      	ldr	r2, [r1, #16]
 800e6fe:	4603      	mov	r3, r0
 800e700:	6900      	ldr	r0, [r0, #16]
 800e702:	1a80      	subs	r0, r0, r2
 800e704:	b530      	push	{r4, r5, lr}
 800e706:	d10e      	bne.n	800e726 <__mcmp+0x2a>
 800e708:	3314      	adds	r3, #20
 800e70a:	3114      	adds	r1, #20
 800e70c:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 800e710:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800e714:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800e718:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800e71c:	4295      	cmp	r5, r2
 800e71e:	d003      	beq.n	800e728 <__mcmp+0x2c>
 800e720:	d205      	bcs.n	800e72e <__mcmp+0x32>
 800e722:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800e726:	bd30      	pop	{r4, r5, pc}
 800e728:	42a3      	cmp	r3, r4
 800e72a:	d3f3      	bcc.n	800e714 <__mcmp+0x18>
 800e72c:	e7fb      	b.n	800e726 <__mcmp+0x2a>
 800e72e:	2001      	movs	r0, #1
 800e730:	e7f9      	b.n	800e726 <__mcmp+0x2a>
	...

0800e734 <__mdiff>:
 800e734:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e738:	4689      	mov	r9, r1
 800e73a:	4606      	mov	r6, r0
 800e73c:	4611      	mov	r1, r2
 800e73e:	4648      	mov	r0, r9
 800e740:	4614      	mov	r4, r2
 800e742:	f7ff ffdb 	bl	800e6fc <__mcmp>
 800e746:	1e05      	subs	r5, r0, #0
 800e748:	d112      	bne.n	800e770 <__mdiff+0x3c>
 800e74a:	4629      	mov	r1, r5
 800e74c:	4630      	mov	r0, r6
 800e74e:	f7ff fd5b 	bl	800e208 <_Balloc>
 800e752:	4602      	mov	r2, r0
 800e754:	b928      	cbnz	r0, 800e762 <__mdiff+0x2e>
 800e756:	4b3f      	ldr	r3, [pc, #252]	@ (800e854 <__mdiff+0x120>)
 800e758:	f240 2137 	movw	r1, #567	@ 0x237
 800e75c:	483e      	ldr	r0, [pc, #248]	@ (800e858 <__mdiff+0x124>)
 800e75e:	f000 f99f 	bl	800eaa0 <__assert_func>
 800e762:	2301      	movs	r3, #1
 800e764:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800e768:	4610      	mov	r0, r2
 800e76a:	b003      	add	sp, #12
 800e76c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e770:	bfbc      	itt	lt
 800e772:	464b      	movlt	r3, r9
 800e774:	46a1      	movlt	r9, r4
 800e776:	4630      	mov	r0, r6
 800e778:	f8d9 1004 	ldr.w	r1, [r9, #4]
 800e77c:	bfba      	itte	lt
 800e77e:	461c      	movlt	r4, r3
 800e780:	2501      	movlt	r5, #1
 800e782:	2500      	movge	r5, #0
 800e784:	f7ff fd40 	bl	800e208 <_Balloc>
 800e788:	4602      	mov	r2, r0
 800e78a:	b918      	cbnz	r0, 800e794 <__mdiff+0x60>
 800e78c:	4b31      	ldr	r3, [pc, #196]	@ (800e854 <__mdiff+0x120>)
 800e78e:	f240 2145 	movw	r1, #581	@ 0x245
 800e792:	e7e3      	b.n	800e75c <__mdiff+0x28>
 800e794:	f8d9 7010 	ldr.w	r7, [r9, #16]
 800e798:	6926      	ldr	r6, [r4, #16]
 800e79a:	60c5      	str	r5, [r0, #12]
 800e79c:	f109 0310 	add.w	r3, r9, #16
 800e7a0:	f109 0514 	add.w	r5, r9, #20
 800e7a4:	f104 0e14 	add.w	lr, r4, #20
 800e7a8:	f100 0b14 	add.w	fp, r0, #20
 800e7ac:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 800e7b0:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 800e7b4:	9301      	str	r3, [sp, #4]
 800e7b6:	46d9      	mov	r9, fp
 800e7b8:	f04f 0c00 	mov.w	ip, #0
 800e7bc:	9b01      	ldr	r3, [sp, #4]
 800e7be:	f85e 0b04 	ldr.w	r0, [lr], #4
 800e7c2:	f853 af04 	ldr.w	sl, [r3, #4]!
 800e7c6:	9301      	str	r3, [sp, #4]
 800e7c8:	fa1f f38a 	uxth.w	r3, sl
 800e7cc:	4619      	mov	r1, r3
 800e7ce:	b283      	uxth	r3, r0
 800e7d0:	1acb      	subs	r3, r1, r3
 800e7d2:	0c00      	lsrs	r0, r0, #16
 800e7d4:	4463      	add	r3, ip
 800e7d6:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 800e7da:	eb00 4023 	add.w	r0, r0, r3, asr #16
 800e7de:	b29b      	uxth	r3, r3
 800e7e0:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 800e7e4:	4576      	cmp	r6, lr
 800e7e6:	f849 3b04 	str.w	r3, [r9], #4
 800e7ea:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800e7ee:	d8e5      	bhi.n	800e7bc <__mdiff+0x88>
 800e7f0:	1b33      	subs	r3, r6, r4
 800e7f2:	3b15      	subs	r3, #21
 800e7f4:	f023 0303 	bic.w	r3, r3, #3
 800e7f8:	3415      	adds	r4, #21
 800e7fa:	3304      	adds	r3, #4
 800e7fc:	42a6      	cmp	r6, r4
 800e7fe:	bf38      	it	cc
 800e800:	2304      	movcc	r3, #4
 800e802:	441d      	add	r5, r3
 800e804:	445b      	add	r3, fp
 800e806:	461e      	mov	r6, r3
 800e808:	462c      	mov	r4, r5
 800e80a:	4544      	cmp	r4, r8
 800e80c:	d30e      	bcc.n	800e82c <__mdiff+0xf8>
 800e80e:	f108 0103 	add.w	r1, r8, #3
 800e812:	1b49      	subs	r1, r1, r5
 800e814:	f021 0103 	bic.w	r1, r1, #3
 800e818:	3d03      	subs	r5, #3
 800e81a:	45a8      	cmp	r8, r5
 800e81c:	bf38      	it	cc
 800e81e:	2100      	movcc	r1, #0
 800e820:	440b      	add	r3, r1
 800e822:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800e826:	b191      	cbz	r1, 800e84e <__mdiff+0x11a>
 800e828:	6117      	str	r7, [r2, #16]
 800e82a:	e79d      	b.n	800e768 <__mdiff+0x34>
 800e82c:	f854 1b04 	ldr.w	r1, [r4], #4
 800e830:	46e6      	mov	lr, ip
 800e832:	0c08      	lsrs	r0, r1, #16
 800e834:	fa1c fc81 	uxtah	ip, ip, r1
 800e838:	4471      	add	r1, lr
 800e83a:	eb00 402c 	add.w	r0, r0, ip, asr #16
 800e83e:	b289      	uxth	r1, r1
 800e840:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800e844:	f846 1b04 	str.w	r1, [r6], #4
 800e848:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800e84c:	e7dd      	b.n	800e80a <__mdiff+0xd6>
 800e84e:	3f01      	subs	r7, #1
 800e850:	e7e7      	b.n	800e822 <__mdiff+0xee>
 800e852:	bf00      	nop
 800e854:	0800f1d0 	.word	0x0800f1d0
 800e858:	0800f1e1 	.word	0x0800f1e1

0800e85c <__d2b>:
 800e85c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800e860:	460f      	mov	r7, r1
 800e862:	2101      	movs	r1, #1
 800e864:	ec59 8b10 	vmov	r8, r9, d0
 800e868:	4616      	mov	r6, r2
 800e86a:	f7ff fccd 	bl	800e208 <_Balloc>
 800e86e:	4604      	mov	r4, r0
 800e870:	b930      	cbnz	r0, 800e880 <__d2b+0x24>
 800e872:	4602      	mov	r2, r0
 800e874:	4b23      	ldr	r3, [pc, #140]	@ (800e904 <__d2b+0xa8>)
 800e876:	4824      	ldr	r0, [pc, #144]	@ (800e908 <__d2b+0xac>)
 800e878:	f240 310f 	movw	r1, #783	@ 0x30f
 800e87c:	f000 f910 	bl	800eaa0 <__assert_func>
 800e880:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800e884:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800e888:	b10d      	cbz	r5, 800e88e <__d2b+0x32>
 800e88a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800e88e:	9301      	str	r3, [sp, #4]
 800e890:	f1b8 0300 	subs.w	r3, r8, #0
 800e894:	d023      	beq.n	800e8de <__d2b+0x82>
 800e896:	4668      	mov	r0, sp
 800e898:	9300      	str	r3, [sp, #0]
 800e89a:	f7ff fd7c 	bl	800e396 <__lo0bits>
 800e89e:	e9dd 1200 	ldrd	r1, r2, [sp]
 800e8a2:	b1d0      	cbz	r0, 800e8da <__d2b+0x7e>
 800e8a4:	f1c0 0320 	rsb	r3, r0, #32
 800e8a8:	fa02 f303 	lsl.w	r3, r2, r3
 800e8ac:	430b      	orrs	r3, r1
 800e8ae:	40c2      	lsrs	r2, r0
 800e8b0:	6163      	str	r3, [r4, #20]
 800e8b2:	9201      	str	r2, [sp, #4]
 800e8b4:	9b01      	ldr	r3, [sp, #4]
 800e8b6:	61a3      	str	r3, [r4, #24]
 800e8b8:	2b00      	cmp	r3, #0
 800e8ba:	bf0c      	ite	eq
 800e8bc:	2201      	moveq	r2, #1
 800e8be:	2202      	movne	r2, #2
 800e8c0:	6122      	str	r2, [r4, #16]
 800e8c2:	b1a5      	cbz	r5, 800e8ee <__d2b+0x92>
 800e8c4:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 800e8c8:	4405      	add	r5, r0
 800e8ca:	603d      	str	r5, [r7, #0]
 800e8cc:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 800e8d0:	6030      	str	r0, [r6, #0]
 800e8d2:	4620      	mov	r0, r4
 800e8d4:	b003      	add	sp, #12
 800e8d6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800e8da:	6161      	str	r1, [r4, #20]
 800e8dc:	e7ea      	b.n	800e8b4 <__d2b+0x58>
 800e8de:	a801      	add	r0, sp, #4
 800e8e0:	f7ff fd59 	bl	800e396 <__lo0bits>
 800e8e4:	9b01      	ldr	r3, [sp, #4]
 800e8e6:	6163      	str	r3, [r4, #20]
 800e8e8:	3020      	adds	r0, #32
 800e8ea:	2201      	movs	r2, #1
 800e8ec:	e7e8      	b.n	800e8c0 <__d2b+0x64>
 800e8ee:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800e8f2:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 800e8f6:	6038      	str	r0, [r7, #0]
 800e8f8:	6918      	ldr	r0, [r3, #16]
 800e8fa:	f7ff fd2d 	bl	800e358 <__hi0bits>
 800e8fe:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800e902:	e7e5      	b.n	800e8d0 <__d2b+0x74>
 800e904:	0800f1d0 	.word	0x0800f1d0
 800e908:	0800f1e1 	.word	0x0800f1e1

0800e90c <__sflush_r>:
 800e90c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800e910:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e914:	0716      	lsls	r6, r2, #28
 800e916:	4605      	mov	r5, r0
 800e918:	460c      	mov	r4, r1
 800e91a:	d454      	bmi.n	800e9c6 <__sflush_r+0xba>
 800e91c:	684b      	ldr	r3, [r1, #4]
 800e91e:	2b00      	cmp	r3, #0
 800e920:	dc02      	bgt.n	800e928 <__sflush_r+0x1c>
 800e922:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800e924:	2b00      	cmp	r3, #0
 800e926:	dd48      	ble.n	800e9ba <__sflush_r+0xae>
 800e928:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800e92a:	2e00      	cmp	r6, #0
 800e92c:	d045      	beq.n	800e9ba <__sflush_r+0xae>
 800e92e:	2300      	movs	r3, #0
 800e930:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800e934:	682f      	ldr	r7, [r5, #0]
 800e936:	6a21      	ldr	r1, [r4, #32]
 800e938:	602b      	str	r3, [r5, #0]
 800e93a:	d030      	beq.n	800e99e <__sflush_r+0x92>
 800e93c:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800e93e:	89a3      	ldrh	r3, [r4, #12]
 800e940:	0759      	lsls	r1, r3, #29
 800e942:	d505      	bpl.n	800e950 <__sflush_r+0x44>
 800e944:	6863      	ldr	r3, [r4, #4]
 800e946:	1ad2      	subs	r2, r2, r3
 800e948:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800e94a:	b10b      	cbz	r3, 800e950 <__sflush_r+0x44>
 800e94c:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800e94e:	1ad2      	subs	r2, r2, r3
 800e950:	2300      	movs	r3, #0
 800e952:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800e954:	6a21      	ldr	r1, [r4, #32]
 800e956:	4628      	mov	r0, r5
 800e958:	47b0      	blx	r6
 800e95a:	1c43      	adds	r3, r0, #1
 800e95c:	89a3      	ldrh	r3, [r4, #12]
 800e95e:	d106      	bne.n	800e96e <__sflush_r+0x62>
 800e960:	6829      	ldr	r1, [r5, #0]
 800e962:	291d      	cmp	r1, #29
 800e964:	d82b      	bhi.n	800e9be <__sflush_r+0xb2>
 800e966:	4a2a      	ldr	r2, [pc, #168]	@ (800ea10 <__sflush_r+0x104>)
 800e968:	410a      	asrs	r2, r1
 800e96a:	07d6      	lsls	r6, r2, #31
 800e96c:	d427      	bmi.n	800e9be <__sflush_r+0xb2>
 800e96e:	2200      	movs	r2, #0
 800e970:	6062      	str	r2, [r4, #4]
 800e972:	04d9      	lsls	r1, r3, #19
 800e974:	6922      	ldr	r2, [r4, #16]
 800e976:	6022      	str	r2, [r4, #0]
 800e978:	d504      	bpl.n	800e984 <__sflush_r+0x78>
 800e97a:	1c42      	adds	r2, r0, #1
 800e97c:	d101      	bne.n	800e982 <__sflush_r+0x76>
 800e97e:	682b      	ldr	r3, [r5, #0]
 800e980:	b903      	cbnz	r3, 800e984 <__sflush_r+0x78>
 800e982:	6560      	str	r0, [r4, #84]	@ 0x54
 800e984:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800e986:	602f      	str	r7, [r5, #0]
 800e988:	b1b9      	cbz	r1, 800e9ba <__sflush_r+0xae>
 800e98a:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800e98e:	4299      	cmp	r1, r3
 800e990:	d002      	beq.n	800e998 <__sflush_r+0x8c>
 800e992:	4628      	mov	r0, r5
 800e994:	f7ff fb38 	bl	800e008 <_free_r>
 800e998:	2300      	movs	r3, #0
 800e99a:	6363      	str	r3, [r4, #52]	@ 0x34
 800e99c:	e00d      	b.n	800e9ba <__sflush_r+0xae>
 800e99e:	2301      	movs	r3, #1
 800e9a0:	4628      	mov	r0, r5
 800e9a2:	47b0      	blx	r6
 800e9a4:	4602      	mov	r2, r0
 800e9a6:	1c50      	adds	r0, r2, #1
 800e9a8:	d1c9      	bne.n	800e93e <__sflush_r+0x32>
 800e9aa:	682b      	ldr	r3, [r5, #0]
 800e9ac:	2b00      	cmp	r3, #0
 800e9ae:	d0c6      	beq.n	800e93e <__sflush_r+0x32>
 800e9b0:	2b1d      	cmp	r3, #29
 800e9b2:	d001      	beq.n	800e9b8 <__sflush_r+0xac>
 800e9b4:	2b16      	cmp	r3, #22
 800e9b6:	d11e      	bne.n	800e9f6 <__sflush_r+0xea>
 800e9b8:	602f      	str	r7, [r5, #0]
 800e9ba:	2000      	movs	r0, #0
 800e9bc:	e022      	b.n	800ea04 <__sflush_r+0xf8>
 800e9be:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800e9c2:	b21b      	sxth	r3, r3
 800e9c4:	e01b      	b.n	800e9fe <__sflush_r+0xf2>
 800e9c6:	690f      	ldr	r7, [r1, #16]
 800e9c8:	2f00      	cmp	r7, #0
 800e9ca:	d0f6      	beq.n	800e9ba <__sflush_r+0xae>
 800e9cc:	0793      	lsls	r3, r2, #30
 800e9ce:	680e      	ldr	r6, [r1, #0]
 800e9d0:	bf08      	it	eq
 800e9d2:	694b      	ldreq	r3, [r1, #20]
 800e9d4:	600f      	str	r7, [r1, #0]
 800e9d6:	bf18      	it	ne
 800e9d8:	2300      	movne	r3, #0
 800e9da:	eba6 0807 	sub.w	r8, r6, r7
 800e9de:	608b      	str	r3, [r1, #8]
 800e9e0:	f1b8 0f00 	cmp.w	r8, #0
 800e9e4:	dde9      	ble.n	800e9ba <__sflush_r+0xae>
 800e9e6:	6a21      	ldr	r1, [r4, #32]
 800e9e8:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800e9ea:	4643      	mov	r3, r8
 800e9ec:	463a      	mov	r2, r7
 800e9ee:	4628      	mov	r0, r5
 800e9f0:	47b0      	blx	r6
 800e9f2:	2800      	cmp	r0, #0
 800e9f4:	dc08      	bgt.n	800ea08 <__sflush_r+0xfc>
 800e9f6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800e9fa:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800e9fe:	81a3      	strh	r3, [r4, #12]
 800ea00:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800ea04:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ea08:	4407      	add	r7, r0
 800ea0a:	eba8 0800 	sub.w	r8, r8, r0
 800ea0e:	e7e7      	b.n	800e9e0 <__sflush_r+0xd4>
 800ea10:	dfbffffe 	.word	0xdfbffffe

0800ea14 <_fflush_r>:
 800ea14:	b538      	push	{r3, r4, r5, lr}
 800ea16:	690b      	ldr	r3, [r1, #16]
 800ea18:	4605      	mov	r5, r0
 800ea1a:	460c      	mov	r4, r1
 800ea1c:	b913      	cbnz	r3, 800ea24 <_fflush_r+0x10>
 800ea1e:	2500      	movs	r5, #0
 800ea20:	4628      	mov	r0, r5
 800ea22:	bd38      	pop	{r3, r4, r5, pc}
 800ea24:	b118      	cbz	r0, 800ea2e <_fflush_r+0x1a>
 800ea26:	6a03      	ldr	r3, [r0, #32]
 800ea28:	b90b      	cbnz	r3, 800ea2e <_fflush_r+0x1a>
 800ea2a:	f7fe fba5 	bl	800d178 <__sinit>
 800ea2e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ea32:	2b00      	cmp	r3, #0
 800ea34:	d0f3      	beq.n	800ea1e <_fflush_r+0xa>
 800ea36:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800ea38:	07d0      	lsls	r0, r2, #31
 800ea3a:	d404      	bmi.n	800ea46 <_fflush_r+0x32>
 800ea3c:	0599      	lsls	r1, r3, #22
 800ea3e:	d402      	bmi.n	800ea46 <_fflush_r+0x32>
 800ea40:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800ea42:	f7fe fc90 	bl	800d366 <__retarget_lock_acquire_recursive>
 800ea46:	4628      	mov	r0, r5
 800ea48:	4621      	mov	r1, r4
 800ea4a:	f7ff ff5f 	bl	800e90c <__sflush_r>
 800ea4e:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800ea50:	07da      	lsls	r2, r3, #31
 800ea52:	4605      	mov	r5, r0
 800ea54:	d4e4      	bmi.n	800ea20 <_fflush_r+0xc>
 800ea56:	89a3      	ldrh	r3, [r4, #12]
 800ea58:	059b      	lsls	r3, r3, #22
 800ea5a:	d4e1      	bmi.n	800ea20 <_fflush_r+0xc>
 800ea5c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800ea5e:	f7fe fc83 	bl	800d368 <__retarget_lock_release_recursive>
 800ea62:	e7dd      	b.n	800ea20 <_fflush_r+0xc>

0800ea64 <_sbrk_r>:
 800ea64:	b538      	push	{r3, r4, r5, lr}
 800ea66:	4d06      	ldr	r5, [pc, #24]	@ (800ea80 <_sbrk_r+0x1c>)
 800ea68:	2300      	movs	r3, #0
 800ea6a:	4604      	mov	r4, r0
 800ea6c:	4608      	mov	r0, r1
 800ea6e:	602b      	str	r3, [r5, #0]
 800ea70:	f7f4 f936 	bl	8002ce0 <_sbrk>
 800ea74:	1c43      	adds	r3, r0, #1
 800ea76:	d102      	bne.n	800ea7e <_sbrk_r+0x1a>
 800ea78:	682b      	ldr	r3, [r5, #0]
 800ea7a:	b103      	cbz	r3, 800ea7e <_sbrk_r+0x1a>
 800ea7c:	6023      	str	r3, [r4, #0]
 800ea7e:	bd38      	pop	{r3, r4, r5, pc}
 800ea80:	20001ca4 	.word	0x20001ca4

0800ea84 <memcpy>:
 800ea84:	440a      	add	r2, r1
 800ea86:	4291      	cmp	r1, r2
 800ea88:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
 800ea8c:	d100      	bne.n	800ea90 <memcpy+0xc>
 800ea8e:	4770      	bx	lr
 800ea90:	b510      	push	{r4, lr}
 800ea92:	f811 4b01 	ldrb.w	r4, [r1], #1
 800ea96:	f803 4f01 	strb.w	r4, [r3, #1]!
 800ea9a:	4291      	cmp	r1, r2
 800ea9c:	d1f9      	bne.n	800ea92 <memcpy+0xe>
 800ea9e:	bd10      	pop	{r4, pc}

0800eaa0 <__assert_func>:
 800eaa0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800eaa2:	4614      	mov	r4, r2
 800eaa4:	461a      	mov	r2, r3
 800eaa6:	4b09      	ldr	r3, [pc, #36]	@ (800eacc <__assert_func+0x2c>)
 800eaa8:	681b      	ldr	r3, [r3, #0]
 800eaaa:	4605      	mov	r5, r0
 800eaac:	68d8      	ldr	r0, [r3, #12]
 800eaae:	b954      	cbnz	r4, 800eac6 <__assert_func+0x26>
 800eab0:	4b07      	ldr	r3, [pc, #28]	@ (800ead0 <__assert_func+0x30>)
 800eab2:	461c      	mov	r4, r3
 800eab4:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800eab8:	9100      	str	r1, [sp, #0]
 800eaba:	462b      	mov	r3, r5
 800eabc:	4905      	ldr	r1, [pc, #20]	@ (800ead4 <__assert_func+0x34>)
 800eabe:	f000 f841 	bl	800eb44 <fiprintf>
 800eac2:	f000 f851 	bl	800eb68 <abort>
 800eac6:	4b04      	ldr	r3, [pc, #16]	@ (800ead8 <__assert_func+0x38>)
 800eac8:	e7f4      	b.n	800eab4 <__assert_func+0x14>
 800eaca:	bf00      	nop
 800eacc:	200002f0 	.word	0x200002f0
 800ead0:	0800f37d 	.word	0x0800f37d
 800ead4:	0800f34f 	.word	0x0800f34f
 800ead8:	0800f342 	.word	0x0800f342

0800eadc <_calloc_r>:
 800eadc:	b570      	push	{r4, r5, r6, lr}
 800eade:	fba1 5402 	umull	r5, r4, r1, r2
 800eae2:	b93c      	cbnz	r4, 800eaf4 <_calloc_r+0x18>
 800eae4:	4629      	mov	r1, r5
 800eae6:	f7ff fb03 	bl	800e0f0 <_malloc_r>
 800eaea:	4606      	mov	r6, r0
 800eaec:	b928      	cbnz	r0, 800eafa <_calloc_r+0x1e>
 800eaee:	2600      	movs	r6, #0
 800eaf0:	4630      	mov	r0, r6
 800eaf2:	bd70      	pop	{r4, r5, r6, pc}
 800eaf4:	220c      	movs	r2, #12
 800eaf6:	6002      	str	r2, [r0, #0]
 800eaf8:	e7f9      	b.n	800eaee <_calloc_r+0x12>
 800eafa:	462a      	mov	r2, r5
 800eafc:	4621      	mov	r1, r4
 800eafe:	f7fe fbb4 	bl	800d26a <memset>
 800eb02:	e7f5      	b.n	800eaf0 <_calloc_r+0x14>

0800eb04 <__ascii_mbtowc>:
 800eb04:	b082      	sub	sp, #8
 800eb06:	b901      	cbnz	r1, 800eb0a <__ascii_mbtowc+0x6>
 800eb08:	a901      	add	r1, sp, #4
 800eb0a:	b142      	cbz	r2, 800eb1e <__ascii_mbtowc+0x1a>
 800eb0c:	b14b      	cbz	r3, 800eb22 <__ascii_mbtowc+0x1e>
 800eb0e:	7813      	ldrb	r3, [r2, #0]
 800eb10:	600b      	str	r3, [r1, #0]
 800eb12:	7812      	ldrb	r2, [r2, #0]
 800eb14:	1e10      	subs	r0, r2, #0
 800eb16:	bf18      	it	ne
 800eb18:	2001      	movne	r0, #1
 800eb1a:	b002      	add	sp, #8
 800eb1c:	4770      	bx	lr
 800eb1e:	4610      	mov	r0, r2
 800eb20:	e7fb      	b.n	800eb1a <__ascii_mbtowc+0x16>
 800eb22:	f06f 0001 	mvn.w	r0, #1
 800eb26:	e7f8      	b.n	800eb1a <__ascii_mbtowc+0x16>

0800eb28 <__ascii_wctomb>:
 800eb28:	4603      	mov	r3, r0
 800eb2a:	4608      	mov	r0, r1
 800eb2c:	b141      	cbz	r1, 800eb40 <__ascii_wctomb+0x18>
 800eb2e:	2aff      	cmp	r2, #255	@ 0xff
 800eb30:	d904      	bls.n	800eb3c <__ascii_wctomb+0x14>
 800eb32:	228a      	movs	r2, #138	@ 0x8a
 800eb34:	601a      	str	r2, [r3, #0]
 800eb36:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800eb3a:	4770      	bx	lr
 800eb3c:	700a      	strb	r2, [r1, #0]
 800eb3e:	2001      	movs	r0, #1
 800eb40:	4770      	bx	lr
	...

0800eb44 <fiprintf>:
 800eb44:	b40e      	push	{r1, r2, r3}
 800eb46:	b503      	push	{r0, r1, lr}
 800eb48:	4601      	mov	r1, r0
 800eb4a:	ab03      	add	r3, sp, #12
 800eb4c:	4805      	ldr	r0, [pc, #20]	@ (800eb64 <fiprintf+0x20>)
 800eb4e:	f853 2b04 	ldr.w	r2, [r3], #4
 800eb52:	6800      	ldr	r0, [r0, #0]
 800eb54:	9301      	str	r3, [sp, #4]
 800eb56:	f000 f837 	bl	800ebc8 <_vfiprintf_r>
 800eb5a:	b002      	add	sp, #8
 800eb5c:	f85d eb04 	ldr.w	lr, [sp], #4
 800eb60:	b003      	add	sp, #12
 800eb62:	4770      	bx	lr
 800eb64:	200002f0 	.word	0x200002f0

0800eb68 <abort>:
 800eb68:	b508      	push	{r3, lr}
 800eb6a:	2006      	movs	r0, #6
 800eb6c:	f000 fa00 	bl	800ef70 <raise>
 800eb70:	2001      	movs	r0, #1
 800eb72:	f7f4 f83d 	bl	8002bf0 <_exit>

0800eb76 <__sfputc_r>:
 800eb76:	6893      	ldr	r3, [r2, #8]
 800eb78:	3b01      	subs	r3, #1
 800eb7a:	2b00      	cmp	r3, #0
 800eb7c:	b410      	push	{r4}
 800eb7e:	6093      	str	r3, [r2, #8]
 800eb80:	da08      	bge.n	800eb94 <__sfputc_r+0x1e>
 800eb82:	6994      	ldr	r4, [r2, #24]
 800eb84:	42a3      	cmp	r3, r4
 800eb86:	db01      	blt.n	800eb8c <__sfputc_r+0x16>
 800eb88:	290a      	cmp	r1, #10
 800eb8a:	d103      	bne.n	800eb94 <__sfputc_r+0x1e>
 800eb8c:	f85d 4b04 	ldr.w	r4, [sp], #4
 800eb90:	f000 b932 	b.w	800edf8 <__swbuf_r>
 800eb94:	6813      	ldr	r3, [r2, #0]
 800eb96:	1c58      	adds	r0, r3, #1
 800eb98:	6010      	str	r0, [r2, #0]
 800eb9a:	7019      	strb	r1, [r3, #0]
 800eb9c:	4608      	mov	r0, r1
 800eb9e:	f85d 4b04 	ldr.w	r4, [sp], #4
 800eba2:	4770      	bx	lr

0800eba4 <__sfputs_r>:
 800eba4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800eba6:	4606      	mov	r6, r0
 800eba8:	460f      	mov	r7, r1
 800ebaa:	4614      	mov	r4, r2
 800ebac:	18d5      	adds	r5, r2, r3
 800ebae:	42ac      	cmp	r4, r5
 800ebb0:	d101      	bne.n	800ebb6 <__sfputs_r+0x12>
 800ebb2:	2000      	movs	r0, #0
 800ebb4:	e007      	b.n	800ebc6 <__sfputs_r+0x22>
 800ebb6:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ebba:	463a      	mov	r2, r7
 800ebbc:	4630      	mov	r0, r6
 800ebbe:	f7ff ffda 	bl	800eb76 <__sfputc_r>
 800ebc2:	1c43      	adds	r3, r0, #1
 800ebc4:	d1f3      	bne.n	800ebae <__sfputs_r+0xa>
 800ebc6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800ebc8 <_vfiprintf_r>:
 800ebc8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ebcc:	460d      	mov	r5, r1
 800ebce:	b09d      	sub	sp, #116	@ 0x74
 800ebd0:	4614      	mov	r4, r2
 800ebd2:	4698      	mov	r8, r3
 800ebd4:	4606      	mov	r6, r0
 800ebd6:	b118      	cbz	r0, 800ebe0 <_vfiprintf_r+0x18>
 800ebd8:	6a03      	ldr	r3, [r0, #32]
 800ebda:	b90b      	cbnz	r3, 800ebe0 <_vfiprintf_r+0x18>
 800ebdc:	f7fe facc 	bl	800d178 <__sinit>
 800ebe0:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800ebe2:	07d9      	lsls	r1, r3, #31
 800ebe4:	d405      	bmi.n	800ebf2 <_vfiprintf_r+0x2a>
 800ebe6:	89ab      	ldrh	r3, [r5, #12]
 800ebe8:	059a      	lsls	r2, r3, #22
 800ebea:	d402      	bmi.n	800ebf2 <_vfiprintf_r+0x2a>
 800ebec:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800ebee:	f7fe fbba 	bl	800d366 <__retarget_lock_acquire_recursive>
 800ebf2:	89ab      	ldrh	r3, [r5, #12]
 800ebf4:	071b      	lsls	r3, r3, #28
 800ebf6:	d501      	bpl.n	800ebfc <_vfiprintf_r+0x34>
 800ebf8:	692b      	ldr	r3, [r5, #16]
 800ebfa:	b99b      	cbnz	r3, 800ec24 <_vfiprintf_r+0x5c>
 800ebfc:	4629      	mov	r1, r5
 800ebfe:	4630      	mov	r0, r6
 800ec00:	f000 f938 	bl	800ee74 <__swsetup_r>
 800ec04:	b170      	cbz	r0, 800ec24 <_vfiprintf_r+0x5c>
 800ec06:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800ec08:	07dc      	lsls	r4, r3, #31
 800ec0a:	d504      	bpl.n	800ec16 <_vfiprintf_r+0x4e>
 800ec0c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800ec10:	b01d      	add	sp, #116	@ 0x74
 800ec12:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ec16:	89ab      	ldrh	r3, [r5, #12]
 800ec18:	0598      	lsls	r0, r3, #22
 800ec1a:	d4f7      	bmi.n	800ec0c <_vfiprintf_r+0x44>
 800ec1c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800ec1e:	f7fe fba3 	bl	800d368 <__retarget_lock_release_recursive>
 800ec22:	e7f3      	b.n	800ec0c <_vfiprintf_r+0x44>
 800ec24:	2300      	movs	r3, #0
 800ec26:	9309      	str	r3, [sp, #36]	@ 0x24
 800ec28:	2320      	movs	r3, #32
 800ec2a:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800ec2e:	f8cd 800c 	str.w	r8, [sp, #12]
 800ec32:	2330      	movs	r3, #48	@ 0x30
 800ec34:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800ede4 <_vfiprintf_r+0x21c>
 800ec38:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800ec3c:	f04f 0901 	mov.w	r9, #1
 800ec40:	4623      	mov	r3, r4
 800ec42:	469a      	mov	sl, r3
 800ec44:	f813 2b01 	ldrb.w	r2, [r3], #1
 800ec48:	b10a      	cbz	r2, 800ec4e <_vfiprintf_r+0x86>
 800ec4a:	2a25      	cmp	r2, #37	@ 0x25
 800ec4c:	d1f9      	bne.n	800ec42 <_vfiprintf_r+0x7a>
 800ec4e:	ebba 0b04 	subs.w	fp, sl, r4
 800ec52:	d00b      	beq.n	800ec6c <_vfiprintf_r+0xa4>
 800ec54:	465b      	mov	r3, fp
 800ec56:	4622      	mov	r2, r4
 800ec58:	4629      	mov	r1, r5
 800ec5a:	4630      	mov	r0, r6
 800ec5c:	f7ff ffa2 	bl	800eba4 <__sfputs_r>
 800ec60:	3001      	adds	r0, #1
 800ec62:	f000 80a7 	beq.w	800edb4 <_vfiprintf_r+0x1ec>
 800ec66:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800ec68:	445a      	add	r2, fp
 800ec6a:	9209      	str	r2, [sp, #36]	@ 0x24
 800ec6c:	f89a 3000 	ldrb.w	r3, [sl]
 800ec70:	2b00      	cmp	r3, #0
 800ec72:	f000 809f 	beq.w	800edb4 <_vfiprintf_r+0x1ec>
 800ec76:	2300      	movs	r3, #0
 800ec78:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800ec7c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800ec80:	f10a 0a01 	add.w	sl, sl, #1
 800ec84:	9304      	str	r3, [sp, #16]
 800ec86:	9307      	str	r3, [sp, #28]
 800ec88:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800ec8c:	931a      	str	r3, [sp, #104]	@ 0x68
 800ec8e:	4654      	mov	r4, sl
 800ec90:	2205      	movs	r2, #5
 800ec92:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ec96:	4853      	ldr	r0, [pc, #332]	@ (800ede4 <_vfiprintf_r+0x21c>)
 800ec98:	f7f1 fac2 	bl	8000220 <memchr>
 800ec9c:	9a04      	ldr	r2, [sp, #16]
 800ec9e:	b9d8      	cbnz	r0, 800ecd8 <_vfiprintf_r+0x110>
 800eca0:	06d1      	lsls	r1, r2, #27
 800eca2:	bf44      	itt	mi
 800eca4:	2320      	movmi	r3, #32
 800eca6:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800ecaa:	0713      	lsls	r3, r2, #28
 800ecac:	bf44      	itt	mi
 800ecae:	232b      	movmi	r3, #43	@ 0x2b
 800ecb0:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800ecb4:	f89a 3000 	ldrb.w	r3, [sl]
 800ecb8:	2b2a      	cmp	r3, #42	@ 0x2a
 800ecba:	d015      	beq.n	800ece8 <_vfiprintf_r+0x120>
 800ecbc:	9a07      	ldr	r2, [sp, #28]
 800ecbe:	4654      	mov	r4, sl
 800ecc0:	2000      	movs	r0, #0
 800ecc2:	f04f 0c0a 	mov.w	ip, #10
 800ecc6:	4621      	mov	r1, r4
 800ecc8:	f811 3b01 	ldrb.w	r3, [r1], #1
 800eccc:	3b30      	subs	r3, #48	@ 0x30
 800ecce:	2b09      	cmp	r3, #9
 800ecd0:	d94b      	bls.n	800ed6a <_vfiprintf_r+0x1a2>
 800ecd2:	b1b0      	cbz	r0, 800ed02 <_vfiprintf_r+0x13a>
 800ecd4:	9207      	str	r2, [sp, #28]
 800ecd6:	e014      	b.n	800ed02 <_vfiprintf_r+0x13a>
 800ecd8:	eba0 0308 	sub.w	r3, r0, r8
 800ecdc:	fa09 f303 	lsl.w	r3, r9, r3
 800ece0:	4313      	orrs	r3, r2
 800ece2:	9304      	str	r3, [sp, #16]
 800ece4:	46a2      	mov	sl, r4
 800ece6:	e7d2      	b.n	800ec8e <_vfiprintf_r+0xc6>
 800ece8:	9b03      	ldr	r3, [sp, #12]
 800ecea:	1d19      	adds	r1, r3, #4
 800ecec:	681b      	ldr	r3, [r3, #0]
 800ecee:	9103      	str	r1, [sp, #12]
 800ecf0:	2b00      	cmp	r3, #0
 800ecf2:	bfbb      	ittet	lt
 800ecf4:	425b      	neglt	r3, r3
 800ecf6:	f042 0202 	orrlt.w	r2, r2, #2
 800ecfa:	9307      	strge	r3, [sp, #28]
 800ecfc:	9307      	strlt	r3, [sp, #28]
 800ecfe:	bfb8      	it	lt
 800ed00:	9204      	strlt	r2, [sp, #16]
 800ed02:	7823      	ldrb	r3, [r4, #0]
 800ed04:	2b2e      	cmp	r3, #46	@ 0x2e
 800ed06:	d10a      	bne.n	800ed1e <_vfiprintf_r+0x156>
 800ed08:	7863      	ldrb	r3, [r4, #1]
 800ed0a:	2b2a      	cmp	r3, #42	@ 0x2a
 800ed0c:	d132      	bne.n	800ed74 <_vfiprintf_r+0x1ac>
 800ed0e:	9b03      	ldr	r3, [sp, #12]
 800ed10:	1d1a      	adds	r2, r3, #4
 800ed12:	681b      	ldr	r3, [r3, #0]
 800ed14:	9203      	str	r2, [sp, #12]
 800ed16:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800ed1a:	3402      	adds	r4, #2
 800ed1c:	9305      	str	r3, [sp, #20]
 800ed1e:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800edf4 <_vfiprintf_r+0x22c>
 800ed22:	7821      	ldrb	r1, [r4, #0]
 800ed24:	2203      	movs	r2, #3
 800ed26:	4650      	mov	r0, sl
 800ed28:	f7f1 fa7a 	bl	8000220 <memchr>
 800ed2c:	b138      	cbz	r0, 800ed3e <_vfiprintf_r+0x176>
 800ed2e:	9b04      	ldr	r3, [sp, #16]
 800ed30:	eba0 000a 	sub.w	r0, r0, sl
 800ed34:	2240      	movs	r2, #64	@ 0x40
 800ed36:	4082      	lsls	r2, r0
 800ed38:	4313      	orrs	r3, r2
 800ed3a:	3401      	adds	r4, #1
 800ed3c:	9304      	str	r3, [sp, #16]
 800ed3e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ed42:	4829      	ldr	r0, [pc, #164]	@ (800ede8 <_vfiprintf_r+0x220>)
 800ed44:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800ed48:	2206      	movs	r2, #6
 800ed4a:	f7f1 fa69 	bl	8000220 <memchr>
 800ed4e:	2800      	cmp	r0, #0
 800ed50:	d03f      	beq.n	800edd2 <_vfiprintf_r+0x20a>
 800ed52:	4b26      	ldr	r3, [pc, #152]	@ (800edec <_vfiprintf_r+0x224>)
 800ed54:	bb1b      	cbnz	r3, 800ed9e <_vfiprintf_r+0x1d6>
 800ed56:	9b03      	ldr	r3, [sp, #12]
 800ed58:	3307      	adds	r3, #7
 800ed5a:	f023 0307 	bic.w	r3, r3, #7
 800ed5e:	3308      	adds	r3, #8
 800ed60:	9303      	str	r3, [sp, #12]
 800ed62:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ed64:	443b      	add	r3, r7
 800ed66:	9309      	str	r3, [sp, #36]	@ 0x24
 800ed68:	e76a      	b.n	800ec40 <_vfiprintf_r+0x78>
 800ed6a:	fb0c 3202 	mla	r2, ip, r2, r3
 800ed6e:	460c      	mov	r4, r1
 800ed70:	2001      	movs	r0, #1
 800ed72:	e7a8      	b.n	800ecc6 <_vfiprintf_r+0xfe>
 800ed74:	2300      	movs	r3, #0
 800ed76:	3401      	adds	r4, #1
 800ed78:	9305      	str	r3, [sp, #20]
 800ed7a:	4619      	mov	r1, r3
 800ed7c:	f04f 0c0a 	mov.w	ip, #10
 800ed80:	4620      	mov	r0, r4
 800ed82:	f810 2b01 	ldrb.w	r2, [r0], #1
 800ed86:	3a30      	subs	r2, #48	@ 0x30
 800ed88:	2a09      	cmp	r2, #9
 800ed8a:	d903      	bls.n	800ed94 <_vfiprintf_r+0x1cc>
 800ed8c:	2b00      	cmp	r3, #0
 800ed8e:	d0c6      	beq.n	800ed1e <_vfiprintf_r+0x156>
 800ed90:	9105      	str	r1, [sp, #20]
 800ed92:	e7c4      	b.n	800ed1e <_vfiprintf_r+0x156>
 800ed94:	fb0c 2101 	mla	r1, ip, r1, r2
 800ed98:	4604      	mov	r4, r0
 800ed9a:	2301      	movs	r3, #1
 800ed9c:	e7f0      	b.n	800ed80 <_vfiprintf_r+0x1b8>
 800ed9e:	ab03      	add	r3, sp, #12
 800eda0:	9300      	str	r3, [sp, #0]
 800eda2:	462a      	mov	r2, r5
 800eda4:	4b12      	ldr	r3, [pc, #72]	@ (800edf0 <_vfiprintf_r+0x228>)
 800eda6:	a904      	add	r1, sp, #16
 800eda8:	4630      	mov	r0, r6
 800edaa:	f7fd fda1 	bl	800c8f0 <_printf_float>
 800edae:	4607      	mov	r7, r0
 800edb0:	1c78      	adds	r0, r7, #1
 800edb2:	d1d6      	bne.n	800ed62 <_vfiprintf_r+0x19a>
 800edb4:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800edb6:	07d9      	lsls	r1, r3, #31
 800edb8:	d405      	bmi.n	800edc6 <_vfiprintf_r+0x1fe>
 800edba:	89ab      	ldrh	r3, [r5, #12]
 800edbc:	059a      	lsls	r2, r3, #22
 800edbe:	d402      	bmi.n	800edc6 <_vfiprintf_r+0x1fe>
 800edc0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800edc2:	f7fe fad1 	bl	800d368 <__retarget_lock_release_recursive>
 800edc6:	89ab      	ldrh	r3, [r5, #12]
 800edc8:	065b      	lsls	r3, r3, #25
 800edca:	f53f af1f 	bmi.w	800ec0c <_vfiprintf_r+0x44>
 800edce:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800edd0:	e71e      	b.n	800ec10 <_vfiprintf_r+0x48>
 800edd2:	ab03      	add	r3, sp, #12
 800edd4:	9300      	str	r3, [sp, #0]
 800edd6:	462a      	mov	r2, r5
 800edd8:	4b05      	ldr	r3, [pc, #20]	@ (800edf0 <_vfiprintf_r+0x228>)
 800edda:	a904      	add	r1, sp, #16
 800eddc:	4630      	mov	r0, r6
 800edde:	f7fe f81f 	bl	800ce20 <_printf_i>
 800ede2:	e7e4      	b.n	800edae <_vfiprintf_r+0x1e6>
 800ede4:	0800f47f 	.word	0x0800f47f
 800ede8:	0800f489 	.word	0x0800f489
 800edec:	0800c8f1 	.word	0x0800c8f1
 800edf0:	0800eba5 	.word	0x0800eba5
 800edf4:	0800f485 	.word	0x0800f485

0800edf8 <__swbuf_r>:
 800edf8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800edfa:	460e      	mov	r6, r1
 800edfc:	4614      	mov	r4, r2
 800edfe:	4605      	mov	r5, r0
 800ee00:	b118      	cbz	r0, 800ee0a <__swbuf_r+0x12>
 800ee02:	6a03      	ldr	r3, [r0, #32]
 800ee04:	b90b      	cbnz	r3, 800ee0a <__swbuf_r+0x12>
 800ee06:	f7fe f9b7 	bl	800d178 <__sinit>
 800ee0a:	69a3      	ldr	r3, [r4, #24]
 800ee0c:	60a3      	str	r3, [r4, #8]
 800ee0e:	89a3      	ldrh	r3, [r4, #12]
 800ee10:	071a      	lsls	r2, r3, #28
 800ee12:	d501      	bpl.n	800ee18 <__swbuf_r+0x20>
 800ee14:	6923      	ldr	r3, [r4, #16]
 800ee16:	b943      	cbnz	r3, 800ee2a <__swbuf_r+0x32>
 800ee18:	4621      	mov	r1, r4
 800ee1a:	4628      	mov	r0, r5
 800ee1c:	f000 f82a 	bl	800ee74 <__swsetup_r>
 800ee20:	b118      	cbz	r0, 800ee2a <__swbuf_r+0x32>
 800ee22:	f04f 37ff 	mov.w	r7, #4294967295	@ 0xffffffff
 800ee26:	4638      	mov	r0, r7
 800ee28:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800ee2a:	6823      	ldr	r3, [r4, #0]
 800ee2c:	6922      	ldr	r2, [r4, #16]
 800ee2e:	1a98      	subs	r0, r3, r2
 800ee30:	6963      	ldr	r3, [r4, #20]
 800ee32:	b2f6      	uxtb	r6, r6
 800ee34:	4283      	cmp	r3, r0
 800ee36:	4637      	mov	r7, r6
 800ee38:	dc05      	bgt.n	800ee46 <__swbuf_r+0x4e>
 800ee3a:	4621      	mov	r1, r4
 800ee3c:	4628      	mov	r0, r5
 800ee3e:	f7ff fde9 	bl	800ea14 <_fflush_r>
 800ee42:	2800      	cmp	r0, #0
 800ee44:	d1ed      	bne.n	800ee22 <__swbuf_r+0x2a>
 800ee46:	68a3      	ldr	r3, [r4, #8]
 800ee48:	3b01      	subs	r3, #1
 800ee4a:	60a3      	str	r3, [r4, #8]
 800ee4c:	6823      	ldr	r3, [r4, #0]
 800ee4e:	1c5a      	adds	r2, r3, #1
 800ee50:	6022      	str	r2, [r4, #0]
 800ee52:	701e      	strb	r6, [r3, #0]
 800ee54:	6962      	ldr	r2, [r4, #20]
 800ee56:	1c43      	adds	r3, r0, #1
 800ee58:	429a      	cmp	r2, r3
 800ee5a:	d004      	beq.n	800ee66 <__swbuf_r+0x6e>
 800ee5c:	89a3      	ldrh	r3, [r4, #12]
 800ee5e:	07db      	lsls	r3, r3, #31
 800ee60:	d5e1      	bpl.n	800ee26 <__swbuf_r+0x2e>
 800ee62:	2e0a      	cmp	r6, #10
 800ee64:	d1df      	bne.n	800ee26 <__swbuf_r+0x2e>
 800ee66:	4621      	mov	r1, r4
 800ee68:	4628      	mov	r0, r5
 800ee6a:	f7ff fdd3 	bl	800ea14 <_fflush_r>
 800ee6e:	2800      	cmp	r0, #0
 800ee70:	d0d9      	beq.n	800ee26 <__swbuf_r+0x2e>
 800ee72:	e7d6      	b.n	800ee22 <__swbuf_r+0x2a>

0800ee74 <__swsetup_r>:
 800ee74:	b538      	push	{r3, r4, r5, lr}
 800ee76:	4b29      	ldr	r3, [pc, #164]	@ (800ef1c <__swsetup_r+0xa8>)
 800ee78:	4605      	mov	r5, r0
 800ee7a:	6818      	ldr	r0, [r3, #0]
 800ee7c:	460c      	mov	r4, r1
 800ee7e:	b118      	cbz	r0, 800ee88 <__swsetup_r+0x14>
 800ee80:	6a03      	ldr	r3, [r0, #32]
 800ee82:	b90b      	cbnz	r3, 800ee88 <__swsetup_r+0x14>
 800ee84:	f7fe f978 	bl	800d178 <__sinit>
 800ee88:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ee8c:	0719      	lsls	r1, r3, #28
 800ee8e:	d422      	bmi.n	800eed6 <__swsetup_r+0x62>
 800ee90:	06da      	lsls	r2, r3, #27
 800ee92:	d407      	bmi.n	800eea4 <__swsetup_r+0x30>
 800ee94:	2209      	movs	r2, #9
 800ee96:	602a      	str	r2, [r5, #0]
 800ee98:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800ee9c:	81a3      	strh	r3, [r4, #12]
 800ee9e:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800eea2:	e033      	b.n	800ef0c <__swsetup_r+0x98>
 800eea4:	0758      	lsls	r0, r3, #29
 800eea6:	d512      	bpl.n	800eece <__swsetup_r+0x5a>
 800eea8:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800eeaa:	b141      	cbz	r1, 800eebe <__swsetup_r+0x4a>
 800eeac:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800eeb0:	4299      	cmp	r1, r3
 800eeb2:	d002      	beq.n	800eeba <__swsetup_r+0x46>
 800eeb4:	4628      	mov	r0, r5
 800eeb6:	f7ff f8a7 	bl	800e008 <_free_r>
 800eeba:	2300      	movs	r3, #0
 800eebc:	6363      	str	r3, [r4, #52]	@ 0x34
 800eebe:	89a3      	ldrh	r3, [r4, #12]
 800eec0:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800eec4:	81a3      	strh	r3, [r4, #12]
 800eec6:	2300      	movs	r3, #0
 800eec8:	6063      	str	r3, [r4, #4]
 800eeca:	6923      	ldr	r3, [r4, #16]
 800eecc:	6023      	str	r3, [r4, #0]
 800eece:	89a3      	ldrh	r3, [r4, #12]
 800eed0:	f043 0308 	orr.w	r3, r3, #8
 800eed4:	81a3      	strh	r3, [r4, #12]
 800eed6:	6923      	ldr	r3, [r4, #16]
 800eed8:	b94b      	cbnz	r3, 800eeee <__swsetup_r+0x7a>
 800eeda:	89a3      	ldrh	r3, [r4, #12]
 800eedc:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800eee0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800eee4:	d003      	beq.n	800eeee <__swsetup_r+0x7a>
 800eee6:	4621      	mov	r1, r4
 800eee8:	4628      	mov	r0, r5
 800eeea:	f000 f883 	bl	800eff4 <__smakebuf_r>
 800eeee:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800eef2:	f013 0201 	ands.w	r2, r3, #1
 800eef6:	d00a      	beq.n	800ef0e <__swsetup_r+0x9a>
 800eef8:	2200      	movs	r2, #0
 800eefa:	60a2      	str	r2, [r4, #8]
 800eefc:	6962      	ldr	r2, [r4, #20]
 800eefe:	4252      	negs	r2, r2
 800ef00:	61a2      	str	r2, [r4, #24]
 800ef02:	6922      	ldr	r2, [r4, #16]
 800ef04:	b942      	cbnz	r2, 800ef18 <__swsetup_r+0xa4>
 800ef06:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800ef0a:	d1c5      	bne.n	800ee98 <__swsetup_r+0x24>
 800ef0c:	bd38      	pop	{r3, r4, r5, pc}
 800ef0e:	0799      	lsls	r1, r3, #30
 800ef10:	bf58      	it	pl
 800ef12:	6962      	ldrpl	r2, [r4, #20]
 800ef14:	60a2      	str	r2, [r4, #8]
 800ef16:	e7f4      	b.n	800ef02 <__swsetup_r+0x8e>
 800ef18:	2000      	movs	r0, #0
 800ef1a:	e7f7      	b.n	800ef0c <__swsetup_r+0x98>
 800ef1c:	200002f0 	.word	0x200002f0

0800ef20 <_raise_r>:
 800ef20:	291f      	cmp	r1, #31
 800ef22:	b538      	push	{r3, r4, r5, lr}
 800ef24:	4605      	mov	r5, r0
 800ef26:	460c      	mov	r4, r1
 800ef28:	d904      	bls.n	800ef34 <_raise_r+0x14>
 800ef2a:	2316      	movs	r3, #22
 800ef2c:	6003      	str	r3, [r0, #0]
 800ef2e:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800ef32:	bd38      	pop	{r3, r4, r5, pc}
 800ef34:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800ef36:	b112      	cbz	r2, 800ef3e <_raise_r+0x1e>
 800ef38:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800ef3c:	b94b      	cbnz	r3, 800ef52 <_raise_r+0x32>
 800ef3e:	4628      	mov	r0, r5
 800ef40:	f000 f830 	bl	800efa4 <_getpid_r>
 800ef44:	4622      	mov	r2, r4
 800ef46:	4601      	mov	r1, r0
 800ef48:	4628      	mov	r0, r5
 800ef4a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800ef4e:	f000 b817 	b.w	800ef80 <_kill_r>
 800ef52:	2b01      	cmp	r3, #1
 800ef54:	d00a      	beq.n	800ef6c <_raise_r+0x4c>
 800ef56:	1c59      	adds	r1, r3, #1
 800ef58:	d103      	bne.n	800ef62 <_raise_r+0x42>
 800ef5a:	2316      	movs	r3, #22
 800ef5c:	6003      	str	r3, [r0, #0]
 800ef5e:	2001      	movs	r0, #1
 800ef60:	e7e7      	b.n	800ef32 <_raise_r+0x12>
 800ef62:	2100      	movs	r1, #0
 800ef64:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800ef68:	4620      	mov	r0, r4
 800ef6a:	4798      	blx	r3
 800ef6c:	2000      	movs	r0, #0
 800ef6e:	e7e0      	b.n	800ef32 <_raise_r+0x12>

0800ef70 <raise>:
 800ef70:	4b02      	ldr	r3, [pc, #8]	@ (800ef7c <raise+0xc>)
 800ef72:	4601      	mov	r1, r0
 800ef74:	6818      	ldr	r0, [r3, #0]
 800ef76:	f7ff bfd3 	b.w	800ef20 <_raise_r>
 800ef7a:	bf00      	nop
 800ef7c:	200002f0 	.word	0x200002f0

0800ef80 <_kill_r>:
 800ef80:	b538      	push	{r3, r4, r5, lr}
 800ef82:	4d07      	ldr	r5, [pc, #28]	@ (800efa0 <_kill_r+0x20>)
 800ef84:	2300      	movs	r3, #0
 800ef86:	4604      	mov	r4, r0
 800ef88:	4608      	mov	r0, r1
 800ef8a:	4611      	mov	r1, r2
 800ef8c:	602b      	str	r3, [r5, #0]
 800ef8e:	f7f3 fe1f 	bl	8002bd0 <_kill>
 800ef92:	1c43      	adds	r3, r0, #1
 800ef94:	d102      	bne.n	800ef9c <_kill_r+0x1c>
 800ef96:	682b      	ldr	r3, [r5, #0]
 800ef98:	b103      	cbz	r3, 800ef9c <_kill_r+0x1c>
 800ef9a:	6023      	str	r3, [r4, #0]
 800ef9c:	bd38      	pop	{r3, r4, r5, pc}
 800ef9e:	bf00      	nop
 800efa0:	20001ca4 	.word	0x20001ca4

0800efa4 <_getpid_r>:
 800efa4:	f7f3 be0c 	b.w	8002bc0 <_getpid>

0800efa8 <__swhatbuf_r>:
 800efa8:	b570      	push	{r4, r5, r6, lr}
 800efaa:	460c      	mov	r4, r1
 800efac:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800efb0:	2900      	cmp	r1, #0
 800efb2:	b096      	sub	sp, #88	@ 0x58
 800efb4:	4615      	mov	r5, r2
 800efb6:	461e      	mov	r6, r3
 800efb8:	da0d      	bge.n	800efd6 <__swhatbuf_r+0x2e>
 800efba:	89a3      	ldrh	r3, [r4, #12]
 800efbc:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800efc0:	f04f 0100 	mov.w	r1, #0
 800efc4:	bf14      	ite	ne
 800efc6:	2340      	movne	r3, #64	@ 0x40
 800efc8:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800efcc:	2000      	movs	r0, #0
 800efce:	6031      	str	r1, [r6, #0]
 800efd0:	602b      	str	r3, [r5, #0]
 800efd2:	b016      	add	sp, #88	@ 0x58
 800efd4:	bd70      	pop	{r4, r5, r6, pc}
 800efd6:	466a      	mov	r2, sp
 800efd8:	f000 f848 	bl	800f06c <_fstat_r>
 800efdc:	2800      	cmp	r0, #0
 800efde:	dbec      	blt.n	800efba <__swhatbuf_r+0x12>
 800efe0:	9901      	ldr	r1, [sp, #4]
 800efe2:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800efe6:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800efea:	4259      	negs	r1, r3
 800efec:	4159      	adcs	r1, r3
 800efee:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800eff2:	e7eb      	b.n	800efcc <__swhatbuf_r+0x24>

0800eff4 <__smakebuf_r>:
 800eff4:	898b      	ldrh	r3, [r1, #12]
 800eff6:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800eff8:	079d      	lsls	r5, r3, #30
 800effa:	4606      	mov	r6, r0
 800effc:	460c      	mov	r4, r1
 800effe:	d507      	bpl.n	800f010 <__smakebuf_r+0x1c>
 800f000:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800f004:	6023      	str	r3, [r4, #0]
 800f006:	6123      	str	r3, [r4, #16]
 800f008:	2301      	movs	r3, #1
 800f00a:	6163      	str	r3, [r4, #20]
 800f00c:	b003      	add	sp, #12
 800f00e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800f010:	ab01      	add	r3, sp, #4
 800f012:	466a      	mov	r2, sp
 800f014:	f7ff ffc8 	bl	800efa8 <__swhatbuf_r>
 800f018:	9f00      	ldr	r7, [sp, #0]
 800f01a:	4605      	mov	r5, r0
 800f01c:	4639      	mov	r1, r7
 800f01e:	4630      	mov	r0, r6
 800f020:	f7ff f866 	bl	800e0f0 <_malloc_r>
 800f024:	b948      	cbnz	r0, 800f03a <__smakebuf_r+0x46>
 800f026:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800f02a:	059a      	lsls	r2, r3, #22
 800f02c:	d4ee      	bmi.n	800f00c <__smakebuf_r+0x18>
 800f02e:	f023 0303 	bic.w	r3, r3, #3
 800f032:	f043 0302 	orr.w	r3, r3, #2
 800f036:	81a3      	strh	r3, [r4, #12]
 800f038:	e7e2      	b.n	800f000 <__smakebuf_r+0xc>
 800f03a:	89a3      	ldrh	r3, [r4, #12]
 800f03c:	6020      	str	r0, [r4, #0]
 800f03e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800f042:	81a3      	strh	r3, [r4, #12]
 800f044:	9b01      	ldr	r3, [sp, #4]
 800f046:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800f04a:	b15b      	cbz	r3, 800f064 <__smakebuf_r+0x70>
 800f04c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800f050:	4630      	mov	r0, r6
 800f052:	f000 f81d 	bl	800f090 <_isatty_r>
 800f056:	b128      	cbz	r0, 800f064 <__smakebuf_r+0x70>
 800f058:	89a3      	ldrh	r3, [r4, #12]
 800f05a:	f023 0303 	bic.w	r3, r3, #3
 800f05e:	f043 0301 	orr.w	r3, r3, #1
 800f062:	81a3      	strh	r3, [r4, #12]
 800f064:	89a3      	ldrh	r3, [r4, #12]
 800f066:	431d      	orrs	r5, r3
 800f068:	81a5      	strh	r5, [r4, #12]
 800f06a:	e7cf      	b.n	800f00c <__smakebuf_r+0x18>

0800f06c <_fstat_r>:
 800f06c:	b538      	push	{r3, r4, r5, lr}
 800f06e:	4d07      	ldr	r5, [pc, #28]	@ (800f08c <_fstat_r+0x20>)
 800f070:	2300      	movs	r3, #0
 800f072:	4604      	mov	r4, r0
 800f074:	4608      	mov	r0, r1
 800f076:	4611      	mov	r1, r2
 800f078:	602b      	str	r3, [r5, #0]
 800f07a:	f7f3 fe09 	bl	8002c90 <_fstat>
 800f07e:	1c43      	adds	r3, r0, #1
 800f080:	d102      	bne.n	800f088 <_fstat_r+0x1c>
 800f082:	682b      	ldr	r3, [r5, #0]
 800f084:	b103      	cbz	r3, 800f088 <_fstat_r+0x1c>
 800f086:	6023      	str	r3, [r4, #0]
 800f088:	bd38      	pop	{r3, r4, r5, pc}
 800f08a:	bf00      	nop
 800f08c:	20001ca4 	.word	0x20001ca4

0800f090 <_isatty_r>:
 800f090:	b538      	push	{r3, r4, r5, lr}
 800f092:	4d06      	ldr	r5, [pc, #24]	@ (800f0ac <_isatty_r+0x1c>)
 800f094:	2300      	movs	r3, #0
 800f096:	4604      	mov	r4, r0
 800f098:	4608      	mov	r0, r1
 800f09a:	602b      	str	r3, [r5, #0]
 800f09c:	f7f3 fe08 	bl	8002cb0 <_isatty>
 800f0a0:	1c43      	adds	r3, r0, #1
 800f0a2:	d102      	bne.n	800f0aa <_isatty_r+0x1a>
 800f0a4:	682b      	ldr	r3, [r5, #0]
 800f0a6:	b103      	cbz	r3, 800f0aa <_isatty_r+0x1a>
 800f0a8:	6023      	str	r3, [r4, #0]
 800f0aa:	bd38      	pop	{r3, r4, r5, pc}
 800f0ac:	20001ca4 	.word	0x20001ca4

0800f0b0 <_init>:
 800f0b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f0b2:	bf00      	nop
 800f0b4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800f0b6:	bc08      	pop	{r3}
 800f0b8:	469e      	mov	lr, r3
 800f0ba:	4770      	bx	lr

0800f0bc <_fini>:
 800f0bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f0be:	bf00      	nop
 800f0c0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800f0c2:	bc08      	pop	{r3}
 800f0c4:	469e      	mov	lr, r3
 800f0c6:	4770      	bx	lr
