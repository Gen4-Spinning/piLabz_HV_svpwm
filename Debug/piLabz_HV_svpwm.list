
piLabz_HV_svpwm.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000cc00  080001e0  080001e0  000011e0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000003c8  0800cde0  0800cde0  0000dde0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800d1a8  0800d1a8  0000f35c  2**0
                  CONTENTS
  4 .ARM          00000008  0800d1a8  0800d1a8  0000e1a8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800d1b0  0800d1b0  0000f35c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800d1b0  0800d1b0  0000e1b0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800d1b4  0800d1b4  0000e1b4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000035c  20000000  0800d1b8  0000f000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000016a4  2000035c  0800d514  0000f35c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20001a00  0800d514  0000fa00  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000f35c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001b6f3  00000000  00000000  0000f38c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003ca1  00000000  00000000  0002aa7f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000017a0  00000000  00000000  0002e720  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 0000123d  00000000  00000000  0002fec0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00020ccd  00000000  00000000  000310fd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001c8a1  00000000  00000000  00051dca  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000cdfbf  00000000  00000000  0006e66b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0013c62a  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00007238  00000000  00000000  0013c670  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000069  00000000  00000000  001438a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e0 <__do_global_dtors_aux>:
 80001e0:	b510      	push	{r4, lr}
 80001e2:	4c05      	ldr	r4, [pc, #20]	@ (80001f8 <__do_global_dtors_aux+0x18>)
 80001e4:	7823      	ldrb	r3, [r4, #0]
 80001e6:	b933      	cbnz	r3, 80001f6 <__do_global_dtors_aux+0x16>
 80001e8:	4b04      	ldr	r3, [pc, #16]	@ (80001fc <__do_global_dtors_aux+0x1c>)
 80001ea:	b113      	cbz	r3, 80001f2 <__do_global_dtors_aux+0x12>
 80001ec:	4804      	ldr	r0, [pc, #16]	@ (8000200 <__do_global_dtors_aux+0x20>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	2301      	movs	r3, #1
 80001f4:	7023      	strb	r3, [r4, #0]
 80001f6:	bd10      	pop	{r4, pc}
 80001f8:	2000035c 	.word	0x2000035c
 80001fc:	00000000 	.word	0x00000000
 8000200:	0800cdc8 	.word	0x0800cdc8

08000204 <frame_dummy>:
 8000204:	b508      	push	{r3, lr}
 8000206:	4b03      	ldr	r3, [pc, #12]	@ (8000214 <frame_dummy+0x10>)
 8000208:	b11b      	cbz	r3, 8000212 <frame_dummy+0xe>
 800020a:	4903      	ldr	r1, [pc, #12]	@ (8000218 <frame_dummy+0x14>)
 800020c:	4803      	ldr	r0, [pc, #12]	@ (800021c <frame_dummy+0x18>)
 800020e:	f3af 8000 	nop.w
 8000212:	bd08      	pop	{r3, pc}
 8000214:	00000000 	.word	0x00000000
 8000218:	20000360 	.word	0x20000360
 800021c:	0800cdc8 	.word	0x0800cdc8

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	@ 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <strlen>:
 80002c0:	4603      	mov	r3, r0
 80002c2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002c6:	2a00      	cmp	r2, #0
 80002c8:	d1fb      	bne.n	80002c2 <strlen+0x2>
 80002ca:	1a18      	subs	r0, r3, r0
 80002cc:	3801      	subs	r0, #1
 80002ce:	4770      	bx	lr

080002d0 <__aeabi_drsub>:
 80002d0:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80002d4:	e002      	b.n	80002dc <__adddf3>
 80002d6:	bf00      	nop

080002d8 <__aeabi_dsub>:
 80002d8:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080002dc <__adddf3>:
 80002dc:	b530      	push	{r4, r5, lr}
 80002de:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002e2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002e6:	ea94 0f05 	teq	r4, r5
 80002ea:	bf08      	it	eq
 80002ec:	ea90 0f02 	teqeq	r0, r2
 80002f0:	bf1f      	itttt	ne
 80002f2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002f6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002fa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002fe:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000302:	f000 80e2 	beq.w	80004ca <__adddf3+0x1ee>
 8000306:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800030a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800030e:	bfb8      	it	lt
 8000310:	426d      	neglt	r5, r5
 8000312:	dd0c      	ble.n	800032e <__adddf3+0x52>
 8000314:	442c      	add	r4, r5
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	ea82 0000 	eor.w	r0, r2, r0
 8000322:	ea83 0101 	eor.w	r1, r3, r1
 8000326:	ea80 0202 	eor.w	r2, r0, r2
 800032a:	ea81 0303 	eor.w	r3, r1, r3
 800032e:	2d36      	cmp	r5, #54	@ 0x36
 8000330:	bf88      	it	hi
 8000332:	bd30      	pophi	{r4, r5, pc}
 8000334:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000338:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800033c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000340:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000344:	d002      	beq.n	800034c <__adddf3+0x70>
 8000346:	4240      	negs	r0, r0
 8000348:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800034c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000350:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000354:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000358:	d002      	beq.n	8000360 <__adddf3+0x84>
 800035a:	4252      	negs	r2, r2
 800035c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000360:	ea94 0f05 	teq	r4, r5
 8000364:	f000 80a7 	beq.w	80004b6 <__adddf3+0x1da>
 8000368:	f1a4 0401 	sub.w	r4, r4, #1
 800036c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000370:	db0d      	blt.n	800038e <__adddf3+0xb2>
 8000372:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000376:	fa22 f205 	lsr.w	r2, r2, r5
 800037a:	1880      	adds	r0, r0, r2
 800037c:	f141 0100 	adc.w	r1, r1, #0
 8000380:	fa03 f20e 	lsl.w	r2, r3, lr
 8000384:	1880      	adds	r0, r0, r2
 8000386:	fa43 f305 	asr.w	r3, r3, r5
 800038a:	4159      	adcs	r1, r3
 800038c:	e00e      	b.n	80003ac <__adddf3+0xd0>
 800038e:	f1a5 0520 	sub.w	r5, r5, #32
 8000392:	f10e 0e20 	add.w	lr, lr, #32
 8000396:	2a01      	cmp	r2, #1
 8000398:	fa03 fc0e 	lsl.w	ip, r3, lr
 800039c:	bf28      	it	cs
 800039e:	f04c 0c02 	orrcs.w	ip, ip, #2
 80003a2:	fa43 f305 	asr.w	r3, r3, r5
 80003a6:	18c0      	adds	r0, r0, r3
 80003a8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80003ac:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80003b0:	d507      	bpl.n	80003c2 <__adddf3+0xe6>
 80003b2:	f04f 0e00 	mov.w	lr, #0
 80003b6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003ba:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003be:	eb6e 0101 	sbc.w	r1, lr, r1
 80003c2:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80003c6:	d31b      	bcc.n	8000400 <__adddf3+0x124>
 80003c8:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80003cc:	d30c      	bcc.n	80003e8 <__adddf3+0x10c>
 80003ce:	0849      	lsrs	r1, r1, #1
 80003d0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003d4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003d8:	f104 0401 	add.w	r4, r4, #1
 80003dc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003e0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003e4:	f080 809a 	bcs.w	800051c <__adddf3+0x240>
 80003e8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003ec:	bf08      	it	eq
 80003ee:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003f2:	f150 0000 	adcs.w	r0, r0, #0
 80003f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003fa:	ea41 0105 	orr.w	r1, r1, r5
 80003fe:	bd30      	pop	{r4, r5, pc}
 8000400:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000404:	4140      	adcs	r0, r0
 8000406:	eb41 0101 	adc.w	r1, r1, r1
 800040a:	3c01      	subs	r4, #1
 800040c:	bf28      	it	cs
 800040e:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 8000412:	d2e9      	bcs.n	80003e8 <__adddf3+0x10c>
 8000414:	f091 0f00 	teq	r1, #0
 8000418:	bf04      	itt	eq
 800041a:	4601      	moveq	r1, r0
 800041c:	2000      	moveq	r0, #0
 800041e:	fab1 f381 	clz	r3, r1
 8000422:	bf08      	it	eq
 8000424:	3320      	addeq	r3, #32
 8000426:	f1a3 030b 	sub.w	r3, r3, #11
 800042a:	f1b3 0220 	subs.w	r2, r3, #32
 800042e:	da0c      	bge.n	800044a <__adddf3+0x16e>
 8000430:	320c      	adds	r2, #12
 8000432:	dd08      	ble.n	8000446 <__adddf3+0x16a>
 8000434:	f102 0c14 	add.w	ip, r2, #20
 8000438:	f1c2 020c 	rsb	r2, r2, #12
 800043c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000440:	fa21 f102 	lsr.w	r1, r1, r2
 8000444:	e00c      	b.n	8000460 <__adddf3+0x184>
 8000446:	f102 0214 	add.w	r2, r2, #20
 800044a:	bfd8      	it	le
 800044c:	f1c2 0c20 	rsble	ip, r2, #32
 8000450:	fa01 f102 	lsl.w	r1, r1, r2
 8000454:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000458:	bfdc      	itt	le
 800045a:	ea41 010c 	orrle.w	r1, r1, ip
 800045e:	4090      	lslle	r0, r2
 8000460:	1ae4      	subs	r4, r4, r3
 8000462:	bfa2      	ittt	ge
 8000464:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000468:	4329      	orrge	r1, r5
 800046a:	bd30      	popge	{r4, r5, pc}
 800046c:	ea6f 0404 	mvn.w	r4, r4
 8000470:	3c1f      	subs	r4, #31
 8000472:	da1c      	bge.n	80004ae <__adddf3+0x1d2>
 8000474:	340c      	adds	r4, #12
 8000476:	dc0e      	bgt.n	8000496 <__adddf3+0x1ba>
 8000478:	f104 0414 	add.w	r4, r4, #20
 800047c:	f1c4 0220 	rsb	r2, r4, #32
 8000480:	fa20 f004 	lsr.w	r0, r0, r4
 8000484:	fa01 f302 	lsl.w	r3, r1, r2
 8000488:	ea40 0003 	orr.w	r0, r0, r3
 800048c:	fa21 f304 	lsr.w	r3, r1, r4
 8000490:	ea45 0103 	orr.w	r1, r5, r3
 8000494:	bd30      	pop	{r4, r5, pc}
 8000496:	f1c4 040c 	rsb	r4, r4, #12
 800049a:	f1c4 0220 	rsb	r2, r4, #32
 800049e:	fa20 f002 	lsr.w	r0, r0, r2
 80004a2:	fa01 f304 	lsl.w	r3, r1, r4
 80004a6:	ea40 0003 	orr.w	r0, r0, r3
 80004aa:	4629      	mov	r1, r5
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	fa21 f004 	lsr.w	r0, r1, r4
 80004b2:	4629      	mov	r1, r5
 80004b4:	bd30      	pop	{r4, r5, pc}
 80004b6:	f094 0f00 	teq	r4, #0
 80004ba:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80004be:	bf06      	itte	eq
 80004c0:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80004c4:	3401      	addeq	r4, #1
 80004c6:	3d01      	subne	r5, #1
 80004c8:	e74e      	b.n	8000368 <__adddf3+0x8c>
 80004ca:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ce:	bf18      	it	ne
 80004d0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004d4:	d029      	beq.n	800052a <__adddf3+0x24e>
 80004d6:	ea94 0f05 	teq	r4, r5
 80004da:	bf08      	it	eq
 80004dc:	ea90 0f02 	teqeq	r0, r2
 80004e0:	d005      	beq.n	80004ee <__adddf3+0x212>
 80004e2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004e6:	bf04      	itt	eq
 80004e8:	4619      	moveq	r1, r3
 80004ea:	4610      	moveq	r0, r2
 80004ec:	bd30      	pop	{r4, r5, pc}
 80004ee:	ea91 0f03 	teq	r1, r3
 80004f2:	bf1e      	ittt	ne
 80004f4:	2100      	movne	r1, #0
 80004f6:	2000      	movne	r0, #0
 80004f8:	bd30      	popne	{r4, r5, pc}
 80004fa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004fe:	d105      	bne.n	800050c <__adddf3+0x230>
 8000500:	0040      	lsls	r0, r0, #1
 8000502:	4149      	adcs	r1, r1
 8000504:	bf28      	it	cs
 8000506:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 800050a:	bd30      	pop	{r4, r5, pc}
 800050c:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000510:	bf3c      	itt	cc
 8000512:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 8000516:	bd30      	popcc	{r4, r5, pc}
 8000518:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800051c:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000520:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000524:	f04f 0000 	mov.w	r0, #0
 8000528:	bd30      	pop	{r4, r5, pc}
 800052a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800052e:	bf1a      	itte	ne
 8000530:	4619      	movne	r1, r3
 8000532:	4610      	movne	r0, r2
 8000534:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000538:	bf1c      	itt	ne
 800053a:	460b      	movne	r3, r1
 800053c:	4602      	movne	r2, r0
 800053e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000542:	bf06      	itte	eq
 8000544:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000548:	ea91 0f03 	teqeq	r1, r3
 800054c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000550:	bd30      	pop	{r4, r5, pc}
 8000552:	bf00      	nop

08000554 <__aeabi_ui2d>:
 8000554:	f090 0f00 	teq	r0, #0
 8000558:	bf04      	itt	eq
 800055a:	2100      	moveq	r1, #0
 800055c:	4770      	bxeq	lr
 800055e:	b530      	push	{r4, r5, lr}
 8000560:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000564:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000568:	f04f 0500 	mov.w	r5, #0
 800056c:	f04f 0100 	mov.w	r1, #0
 8000570:	e750      	b.n	8000414 <__adddf3+0x138>
 8000572:	bf00      	nop

08000574 <__aeabi_i2d>:
 8000574:	f090 0f00 	teq	r0, #0
 8000578:	bf04      	itt	eq
 800057a:	2100      	moveq	r1, #0
 800057c:	4770      	bxeq	lr
 800057e:	b530      	push	{r4, r5, lr}
 8000580:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000584:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000588:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800058c:	bf48      	it	mi
 800058e:	4240      	negmi	r0, r0
 8000590:	f04f 0100 	mov.w	r1, #0
 8000594:	e73e      	b.n	8000414 <__adddf3+0x138>
 8000596:	bf00      	nop

08000598 <__aeabi_f2d>:
 8000598:	0042      	lsls	r2, r0, #1
 800059a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800059e:	ea4f 0131 	mov.w	r1, r1, rrx
 80005a2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80005a6:	bf1f      	itttt	ne
 80005a8:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 80005ac:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80005b0:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80005b4:	4770      	bxne	lr
 80005b6:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80005ba:	bf08      	it	eq
 80005bc:	4770      	bxeq	lr
 80005be:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80005c2:	bf04      	itt	eq
 80005c4:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80005c8:	4770      	bxeq	lr
 80005ca:	b530      	push	{r4, r5, lr}
 80005cc:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80005d0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005d4:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005d8:	e71c      	b.n	8000414 <__adddf3+0x138>
 80005da:	bf00      	nop

080005dc <__aeabi_ul2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f04f 0500 	mov.w	r5, #0
 80005ea:	e00a      	b.n	8000602 <__aeabi_l2d+0x16>

080005ec <__aeabi_l2d>:
 80005ec:	ea50 0201 	orrs.w	r2, r0, r1
 80005f0:	bf08      	it	eq
 80005f2:	4770      	bxeq	lr
 80005f4:	b530      	push	{r4, r5, lr}
 80005f6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005fa:	d502      	bpl.n	8000602 <__aeabi_l2d+0x16>
 80005fc:	4240      	negs	r0, r0
 80005fe:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000602:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000606:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800060a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800060e:	f43f aed8 	beq.w	80003c2 <__adddf3+0xe6>
 8000612:	f04f 0203 	mov.w	r2, #3
 8000616:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800061a:	bf18      	it	ne
 800061c:	3203      	addne	r2, #3
 800061e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000622:	bf18      	it	ne
 8000624:	3203      	addne	r2, #3
 8000626:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800062a:	f1c2 0320 	rsb	r3, r2, #32
 800062e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000632:	fa20 f002 	lsr.w	r0, r0, r2
 8000636:	fa01 fe03 	lsl.w	lr, r1, r3
 800063a:	ea40 000e 	orr.w	r0, r0, lr
 800063e:	fa21 f102 	lsr.w	r1, r1, r2
 8000642:	4414      	add	r4, r2
 8000644:	e6bd      	b.n	80003c2 <__adddf3+0xe6>
 8000646:	bf00      	nop

08000648 <__aeabi_dmul>:
 8000648:	b570      	push	{r4, r5, r6, lr}
 800064a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800064e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000652:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000656:	bf1d      	ittte	ne
 8000658:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800065c:	ea94 0f0c 	teqne	r4, ip
 8000660:	ea95 0f0c 	teqne	r5, ip
 8000664:	f000 f8de 	bleq	8000824 <__aeabi_dmul+0x1dc>
 8000668:	442c      	add	r4, r5
 800066a:	ea81 0603 	eor.w	r6, r1, r3
 800066e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000672:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000676:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800067a:	bf18      	it	ne
 800067c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000680:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000684:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000688:	d038      	beq.n	80006fc <__aeabi_dmul+0xb4>
 800068a:	fba0 ce02 	umull	ip, lr, r0, r2
 800068e:	f04f 0500 	mov.w	r5, #0
 8000692:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000696:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800069a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800069e:	f04f 0600 	mov.w	r6, #0
 80006a2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80006a6:	f09c 0f00 	teq	ip, #0
 80006aa:	bf18      	it	ne
 80006ac:	f04e 0e01 	orrne.w	lr, lr, #1
 80006b0:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80006b4:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 80006b8:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 80006bc:	d204      	bcs.n	80006c8 <__aeabi_dmul+0x80>
 80006be:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006c2:	416d      	adcs	r5, r5
 80006c4:	eb46 0606 	adc.w	r6, r6, r6
 80006c8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006cc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006d0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006d4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006d8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006dc:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006e0:	bf88      	it	hi
 80006e2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006e6:	d81e      	bhi.n	8000726 <__aeabi_dmul+0xde>
 80006e8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006ec:	bf08      	it	eq
 80006ee:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006f2:	f150 0000 	adcs.w	r0, r0, #0
 80006f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006fa:	bd70      	pop	{r4, r5, r6, pc}
 80006fc:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000700:	ea46 0101 	orr.w	r1, r6, r1
 8000704:	ea40 0002 	orr.w	r0, r0, r2
 8000708:	ea81 0103 	eor.w	r1, r1, r3
 800070c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000710:	bfc2      	ittt	gt
 8000712:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000716:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800071a:	bd70      	popgt	{r4, r5, r6, pc}
 800071c:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000720:	f04f 0e00 	mov.w	lr, #0
 8000724:	3c01      	subs	r4, #1
 8000726:	f300 80ab 	bgt.w	8000880 <__aeabi_dmul+0x238>
 800072a:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 800072e:	bfde      	ittt	le
 8000730:	2000      	movle	r0, #0
 8000732:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 8000736:	bd70      	pople	{r4, r5, r6, pc}
 8000738:	f1c4 0400 	rsb	r4, r4, #0
 800073c:	3c20      	subs	r4, #32
 800073e:	da35      	bge.n	80007ac <__aeabi_dmul+0x164>
 8000740:	340c      	adds	r4, #12
 8000742:	dc1b      	bgt.n	800077c <__aeabi_dmul+0x134>
 8000744:	f104 0414 	add.w	r4, r4, #20
 8000748:	f1c4 0520 	rsb	r5, r4, #32
 800074c:	fa00 f305 	lsl.w	r3, r0, r5
 8000750:	fa20 f004 	lsr.w	r0, r0, r4
 8000754:	fa01 f205 	lsl.w	r2, r1, r5
 8000758:	ea40 0002 	orr.w	r0, r0, r2
 800075c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000760:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000764:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000768:	fa21 f604 	lsr.w	r6, r1, r4
 800076c:	eb42 0106 	adc.w	r1, r2, r6
 8000770:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000774:	bf08      	it	eq
 8000776:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800077a:	bd70      	pop	{r4, r5, r6, pc}
 800077c:	f1c4 040c 	rsb	r4, r4, #12
 8000780:	f1c4 0520 	rsb	r5, r4, #32
 8000784:	fa00 f304 	lsl.w	r3, r0, r4
 8000788:	fa20 f005 	lsr.w	r0, r0, r5
 800078c:	fa01 f204 	lsl.w	r2, r1, r4
 8000790:	ea40 0002 	orr.w	r0, r0, r2
 8000794:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000798:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800079c:	f141 0100 	adc.w	r1, r1, #0
 80007a0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007a4:	bf08      	it	eq
 80007a6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007aa:	bd70      	pop	{r4, r5, r6, pc}
 80007ac:	f1c4 0520 	rsb	r5, r4, #32
 80007b0:	fa00 f205 	lsl.w	r2, r0, r5
 80007b4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007b8:	fa20 f304 	lsr.w	r3, r0, r4
 80007bc:	fa01 f205 	lsl.w	r2, r1, r5
 80007c0:	ea43 0302 	orr.w	r3, r3, r2
 80007c4:	fa21 f004 	lsr.w	r0, r1, r4
 80007c8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007cc:	fa21 f204 	lsr.w	r2, r1, r4
 80007d0:	ea20 0002 	bic.w	r0, r0, r2
 80007d4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007d8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007dc:	bf08      	it	eq
 80007de:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007e2:	bd70      	pop	{r4, r5, r6, pc}
 80007e4:	f094 0f00 	teq	r4, #0
 80007e8:	d10f      	bne.n	800080a <__aeabi_dmul+0x1c2>
 80007ea:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007ee:	0040      	lsls	r0, r0, #1
 80007f0:	eb41 0101 	adc.w	r1, r1, r1
 80007f4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007f8:	bf08      	it	eq
 80007fa:	3c01      	subeq	r4, #1
 80007fc:	d0f7      	beq.n	80007ee <__aeabi_dmul+0x1a6>
 80007fe:	ea41 0106 	orr.w	r1, r1, r6
 8000802:	f095 0f00 	teq	r5, #0
 8000806:	bf18      	it	ne
 8000808:	4770      	bxne	lr
 800080a:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 800080e:	0052      	lsls	r2, r2, #1
 8000810:	eb43 0303 	adc.w	r3, r3, r3
 8000814:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000818:	bf08      	it	eq
 800081a:	3d01      	subeq	r5, #1
 800081c:	d0f7      	beq.n	800080e <__aeabi_dmul+0x1c6>
 800081e:	ea43 0306 	orr.w	r3, r3, r6
 8000822:	4770      	bx	lr
 8000824:	ea94 0f0c 	teq	r4, ip
 8000828:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800082c:	bf18      	it	ne
 800082e:	ea95 0f0c 	teqne	r5, ip
 8000832:	d00c      	beq.n	800084e <__aeabi_dmul+0x206>
 8000834:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000838:	bf18      	it	ne
 800083a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800083e:	d1d1      	bne.n	80007e4 <__aeabi_dmul+0x19c>
 8000840:	ea81 0103 	eor.w	r1, r1, r3
 8000844:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000848:	f04f 0000 	mov.w	r0, #0
 800084c:	bd70      	pop	{r4, r5, r6, pc}
 800084e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000852:	bf06      	itte	eq
 8000854:	4610      	moveq	r0, r2
 8000856:	4619      	moveq	r1, r3
 8000858:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800085c:	d019      	beq.n	8000892 <__aeabi_dmul+0x24a>
 800085e:	ea94 0f0c 	teq	r4, ip
 8000862:	d102      	bne.n	800086a <__aeabi_dmul+0x222>
 8000864:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000868:	d113      	bne.n	8000892 <__aeabi_dmul+0x24a>
 800086a:	ea95 0f0c 	teq	r5, ip
 800086e:	d105      	bne.n	800087c <__aeabi_dmul+0x234>
 8000870:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000874:	bf1c      	itt	ne
 8000876:	4610      	movne	r0, r2
 8000878:	4619      	movne	r1, r3
 800087a:	d10a      	bne.n	8000892 <__aeabi_dmul+0x24a>
 800087c:	ea81 0103 	eor.w	r1, r1, r3
 8000880:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000884:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000888:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800088c:	f04f 0000 	mov.w	r0, #0
 8000890:	bd70      	pop	{r4, r5, r6, pc}
 8000892:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000896:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800089a:	bd70      	pop	{r4, r5, r6, pc}

0800089c <__aeabi_ddiv>:
 800089c:	b570      	push	{r4, r5, r6, lr}
 800089e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80008a2:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80008a6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80008aa:	bf1d      	ittte	ne
 80008ac:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008b0:	ea94 0f0c 	teqne	r4, ip
 80008b4:	ea95 0f0c 	teqne	r5, ip
 80008b8:	f000 f8a7 	bleq	8000a0a <__aeabi_ddiv+0x16e>
 80008bc:	eba4 0405 	sub.w	r4, r4, r5
 80008c0:	ea81 0e03 	eor.w	lr, r1, r3
 80008c4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008cc:	f000 8088 	beq.w	80009e0 <__aeabi_ddiv+0x144>
 80008d0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008d4:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80008d8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008dc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008e0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008e4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008e8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ec:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008f0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008f4:	429d      	cmp	r5, r3
 80008f6:	bf08      	it	eq
 80008f8:	4296      	cmpeq	r6, r2
 80008fa:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008fe:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 8000902:	d202      	bcs.n	800090a <__aeabi_ddiv+0x6e>
 8000904:	085b      	lsrs	r3, r3, #1
 8000906:	ea4f 0232 	mov.w	r2, r2, rrx
 800090a:	1ab6      	subs	r6, r6, r2
 800090c:	eb65 0503 	sbc.w	r5, r5, r3
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 800091a:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 800091e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000922:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000926:	bf22      	ittt	cs
 8000928:	1ab6      	subcs	r6, r6, r2
 800092a:	4675      	movcs	r5, lr
 800092c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	ebb6 0e02 	subs.w	lr, r6, r2
 800093a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800093e:	bf22      	ittt	cs
 8000940:	1ab6      	subcs	r6, r6, r2
 8000942:	4675      	movcs	r5, lr
 8000944:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000948:	085b      	lsrs	r3, r3, #1
 800094a:	ea4f 0232 	mov.w	r2, r2, rrx
 800094e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000952:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000956:	bf22      	ittt	cs
 8000958:	1ab6      	subcs	r6, r6, r2
 800095a:	4675      	movcs	r5, lr
 800095c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000960:	085b      	lsrs	r3, r3, #1
 8000962:	ea4f 0232 	mov.w	r2, r2, rrx
 8000966:	ebb6 0e02 	subs.w	lr, r6, r2
 800096a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800096e:	bf22      	ittt	cs
 8000970:	1ab6      	subcs	r6, r6, r2
 8000972:	4675      	movcs	r5, lr
 8000974:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000978:	ea55 0e06 	orrs.w	lr, r5, r6
 800097c:	d018      	beq.n	80009b0 <__aeabi_ddiv+0x114>
 800097e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000982:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000986:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800098a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800098e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000992:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000996:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800099a:	d1c0      	bne.n	800091e <__aeabi_ddiv+0x82>
 800099c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80009a0:	d10b      	bne.n	80009ba <__aeabi_ddiv+0x11e>
 80009a2:	ea41 0100 	orr.w	r1, r1, r0
 80009a6:	f04f 0000 	mov.w	r0, #0
 80009aa:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 80009ae:	e7b6      	b.n	800091e <__aeabi_ddiv+0x82>
 80009b0:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80009b4:	bf04      	itt	eq
 80009b6:	4301      	orreq	r1, r0
 80009b8:	2000      	moveq	r0, #0
 80009ba:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80009be:	bf88      	it	hi
 80009c0:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80009c4:	f63f aeaf 	bhi.w	8000726 <__aeabi_dmul+0xde>
 80009c8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009cc:	bf04      	itt	eq
 80009ce:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009d2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009d6:	f150 0000 	adcs.w	r0, r0, #0
 80009da:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009de:	bd70      	pop	{r4, r5, r6, pc}
 80009e0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009e4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009e8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ec:	bfc2      	ittt	gt
 80009ee:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009f2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009f6:	bd70      	popgt	{r4, r5, r6, pc}
 80009f8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009fc:	f04f 0e00 	mov.w	lr, #0
 8000a00:	3c01      	subs	r4, #1
 8000a02:	e690      	b.n	8000726 <__aeabi_dmul+0xde>
 8000a04:	ea45 0e06 	orr.w	lr, r5, r6
 8000a08:	e68d      	b.n	8000726 <__aeabi_dmul+0xde>
 8000a0a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000a0e:	ea94 0f0c 	teq	r4, ip
 8000a12:	bf08      	it	eq
 8000a14:	ea95 0f0c 	teqeq	r5, ip
 8000a18:	f43f af3b 	beq.w	8000892 <__aeabi_dmul+0x24a>
 8000a1c:	ea94 0f0c 	teq	r4, ip
 8000a20:	d10a      	bne.n	8000a38 <__aeabi_ddiv+0x19c>
 8000a22:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a26:	f47f af34 	bne.w	8000892 <__aeabi_dmul+0x24a>
 8000a2a:	ea95 0f0c 	teq	r5, ip
 8000a2e:	f47f af25 	bne.w	800087c <__aeabi_dmul+0x234>
 8000a32:	4610      	mov	r0, r2
 8000a34:	4619      	mov	r1, r3
 8000a36:	e72c      	b.n	8000892 <__aeabi_dmul+0x24a>
 8000a38:	ea95 0f0c 	teq	r5, ip
 8000a3c:	d106      	bne.n	8000a4c <__aeabi_ddiv+0x1b0>
 8000a3e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a42:	f43f aefd 	beq.w	8000840 <__aeabi_dmul+0x1f8>
 8000a46:	4610      	mov	r0, r2
 8000a48:	4619      	mov	r1, r3
 8000a4a:	e722      	b.n	8000892 <__aeabi_dmul+0x24a>
 8000a4c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a56:	f47f aec5 	bne.w	80007e4 <__aeabi_dmul+0x19c>
 8000a5a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a5e:	f47f af0d 	bne.w	800087c <__aeabi_dmul+0x234>
 8000a62:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a66:	f47f aeeb 	bne.w	8000840 <__aeabi_dmul+0x1f8>
 8000a6a:	e712      	b.n	8000892 <__aeabi_dmul+0x24a>

08000a6c <__gedf2>:
 8000a6c:	f04f 3cff 	mov.w	ip, #4294967295	@ 0xffffffff
 8000a70:	e006      	b.n	8000a80 <__cmpdf2+0x4>
 8000a72:	bf00      	nop

08000a74 <__ledf2>:
 8000a74:	f04f 0c01 	mov.w	ip, #1
 8000a78:	e002      	b.n	8000a80 <__cmpdf2+0x4>
 8000a7a:	bf00      	nop

08000a7c <__cmpdf2>:
 8000a7c:	f04f 0c01 	mov.w	ip, #1
 8000a80:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a84:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a88:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a8c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a90:	bf18      	it	ne
 8000a92:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a96:	d01b      	beq.n	8000ad0 <__cmpdf2+0x54>
 8000a98:	b001      	add	sp, #4
 8000a9a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a9e:	bf0c      	ite	eq
 8000aa0:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000aa4:	ea91 0f03 	teqne	r1, r3
 8000aa8:	bf02      	ittt	eq
 8000aaa:	ea90 0f02 	teqeq	r0, r2
 8000aae:	2000      	moveq	r0, #0
 8000ab0:	4770      	bxeq	lr
 8000ab2:	f110 0f00 	cmn.w	r0, #0
 8000ab6:	ea91 0f03 	teq	r1, r3
 8000aba:	bf58      	it	pl
 8000abc:	4299      	cmppl	r1, r3
 8000abe:	bf08      	it	eq
 8000ac0:	4290      	cmpeq	r0, r2
 8000ac2:	bf2c      	ite	cs
 8000ac4:	17d8      	asrcs	r0, r3, #31
 8000ac6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aca:	f040 0001 	orr.w	r0, r0, #1
 8000ace:	4770      	bx	lr
 8000ad0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad8:	d102      	bne.n	8000ae0 <__cmpdf2+0x64>
 8000ada:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ade:	d107      	bne.n	8000af0 <__cmpdf2+0x74>
 8000ae0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ae4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ae8:	d1d6      	bne.n	8000a98 <__cmpdf2+0x1c>
 8000aea:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aee:	d0d3      	beq.n	8000a98 <__cmpdf2+0x1c>
 8000af0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000af4:	4770      	bx	lr
 8000af6:	bf00      	nop

08000af8 <__aeabi_cdrcmple>:
 8000af8:	4684      	mov	ip, r0
 8000afa:	4610      	mov	r0, r2
 8000afc:	4662      	mov	r2, ip
 8000afe:	468c      	mov	ip, r1
 8000b00:	4619      	mov	r1, r3
 8000b02:	4663      	mov	r3, ip
 8000b04:	e000      	b.n	8000b08 <__aeabi_cdcmpeq>
 8000b06:	bf00      	nop

08000b08 <__aeabi_cdcmpeq>:
 8000b08:	b501      	push	{r0, lr}
 8000b0a:	f7ff ffb7 	bl	8000a7c <__cmpdf2>
 8000b0e:	2800      	cmp	r0, #0
 8000b10:	bf48      	it	mi
 8000b12:	f110 0f00 	cmnmi.w	r0, #0
 8000b16:	bd01      	pop	{r0, pc}

08000b18 <__aeabi_dcmpeq>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff fff4 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b20:	bf0c      	ite	eq
 8000b22:	2001      	moveq	r0, #1
 8000b24:	2000      	movne	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmplt>:
 8000b2c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b30:	f7ff ffea 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b34:	bf34      	ite	cc
 8000b36:	2001      	movcc	r0, #1
 8000b38:	2000      	movcs	r0, #0
 8000b3a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3e:	bf00      	nop

08000b40 <__aeabi_dcmple>:
 8000b40:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b44:	f7ff ffe0 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b48:	bf94      	ite	ls
 8000b4a:	2001      	movls	r0, #1
 8000b4c:	2000      	movhi	r0, #0
 8000b4e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b52:	bf00      	nop

08000b54 <__aeabi_dcmpge>:
 8000b54:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b58:	f7ff ffce 	bl	8000af8 <__aeabi_cdrcmple>
 8000b5c:	bf94      	ite	ls
 8000b5e:	2001      	movls	r0, #1
 8000b60:	2000      	movhi	r0, #0
 8000b62:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b66:	bf00      	nop

08000b68 <__aeabi_dcmpgt>:
 8000b68:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b6c:	f7ff ffc4 	bl	8000af8 <__aeabi_cdrcmple>
 8000b70:	bf34      	ite	cc
 8000b72:	2001      	movcc	r0, #1
 8000b74:	2000      	movcs	r0, #0
 8000b76:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b7a:	bf00      	nop

08000b7c <__aeabi_dcmpun>:
 8000b7c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b84:	d102      	bne.n	8000b8c <__aeabi_dcmpun+0x10>
 8000b86:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b8a:	d10a      	bne.n	8000ba2 <__aeabi_dcmpun+0x26>
 8000b8c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b90:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b94:	d102      	bne.n	8000b9c <__aeabi_dcmpun+0x20>
 8000b96:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b9a:	d102      	bne.n	8000ba2 <__aeabi_dcmpun+0x26>
 8000b9c:	f04f 0000 	mov.w	r0, #0
 8000ba0:	4770      	bx	lr
 8000ba2:	f04f 0001 	mov.w	r0, #1
 8000ba6:	4770      	bx	lr

08000ba8 <__aeabi_d2iz>:
 8000ba8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bac:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000bb0:	d215      	bcs.n	8000bde <__aeabi_d2iz+0x36>
 8000bb2:	d511      	bpl.n	8000bd8 <__aeabi_d2iz+0x30>
 8000bb4:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000bb8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bbc:	d912      	bls.n	8000be4 <__aeabi_d2iz+0x3c>
 8000bbe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000bc6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bca:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000bce:	fa23 f002 	lsr.w	r0, r3, r2
 8000bd2:	bf18      	it	ne
 8000bd4:	4240      	negne	r0, r0
 8000bd6:	4770      	bx	lr
 8000bd8:	f04f 0000 	mov.w	r0, #0
 8000bdc:	4770      	bx	lr
 8000bde:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000be2:	d105      	bne.n	8000bf0 <__aeabi_d2iz+0x48>
 8000be4:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000be8:	bf08      	it	eq
 8000bea:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000bee:	4770      	bx	lr
 8000bf0:	f04f 0000 	mov.w	r0, #0
 8000bf4:	4770      	bx	lr
 8000bf6:	bf00      	nop

08000bf8 <__aeabi_uldivmod>:
 8000bf8:	b953      	cbnz	r3, 8000c10 <__aeabi_uldivmod+0x18>
 8000bfa:	b94a      	cbnz	r2, 8000c10 <__aeabi_uldivmod+0x18>
 8000bfc:	2900      	cmp	r1, #0
 8000bfe:	bf08      	it	eq
 8000c00:	2800      	cmpeq	r0, #0
 8000c02:	bf1c      	itt	ne
 8000c04:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 8000c08:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 8000c0c:	f000 b96a 	b.w	8000ee4 <__aeabi_idiv0>
 8000c10:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c14:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c18:	f000 f806 	bl	8000c28 <__udivmoddi4>
 8000c1c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c20:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c24:	b004      	add	sp, #16
 8000c26:	4770      	bx	lr

08000c28 <__udivmoddi4>:
 8000c28:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c2c:	9d08      	ldr	r5, [sp, #32]
 8000c2e:	460c      	mov	r4, r1
 8000c30:	2b00      	cmp	r3, #0
 8000c32:	d14e      	bne.n	8000cd2 <__udivmoddi4+0xaa>
 8000c34:	4694      	mov	ip, r2
 8000c36:	458c      	cmp	ip, r1
 8000c38:	4686      	mov	lr, r0
 8000c3a:	fab2 f282 	clz	r2, r2
 8000c3e:	d962      	bls.n	8000d06 <__udivmoddi4+0xde>
 8000c40:	b14a      	cbz	r2, 8000c56 <__udivmoddi4+0x2e>
 8000c42:	f1c2 0320 	rsb	r3, r2, #32
 8000c46:	4091      	lsls	r1, r2
 8000c48:	fa20 f303 	lsr.w	r3, r0, r3
 8000c4c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000c50:	4319      	orrs	r1, r3
 8000c52:	fa00 fe02 	lsl.w	lr, r0, r2
 8000c56:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000c5a:	fa1f f68c 	uxth.w	r6, ip
 8000c5e:	fbb1 f4f7 	udiv	r4, r1, r7
 8000c62:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000c66:	fb07 1114 	mls	r1, r7, r4, r1
 8000c6a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c6e:	fb04 f106 	mul.w	r1, r4, r6
 8000c72:	4299      	cmp	r1, r3
 8000c74:	d90a      	bls.n	8000c8c <__udivmoddi4+0x64>
 8000c76:	eb1c 0303 	adds.w	r3, ip, r3
 8000c7a:	f104 30ff 	add.w	r0, r4, #4294967295	@ 0xffffffff
 8000c7e:	f080 8112 	bcs.w	8000ea6 <__udivmoddi4+0x27e>
 8000c82:	4299      	cmp	r1, r3
 8000c84:	f240 810f 	bls.w	8000ea6 <__udivmoddi4+0x27e>
 8000c88:	3c02      	subs	r4, #2
 8000c8a:	4463      	add	r3, ip
 8000c8c:	1a59      	subs	r1, r3, r1
 8000c8e:	fa1f f38e 	uxth.w	r3, lr
 8000c92:	fbb1 f0f7 	udiv	r0, r1, r7
 8000c96:	fb07 1110 	mls	r1, r7, r0, r1
 8000c9a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c9e:	fb00 f606 	mul.w	r6, r0, r6
 8000ca2:	429e      	cmp	r6, r3
 8000ca4:	d90a      	bls.n	8000cbc <__udivmoddi4+0x94>
 8000ca6:	eb1c 0303 	adds.w	r3, ip, r3
 8000caa:	f100 31ff 	add.w	r1, r0, #4294967295	@ 0xffffffff
 8000cae:	f080 80fc 	bcs.w	8000eaa <__udivmoddi4+0x282>
 8000cb2:	429e      	cmp	r6, r3
 8000cb4:	f240 80f9 	bls.w	8000eaa <__udivmoddi4+0x282>
 8000cb8:	4463      	add	r3, ip
 8000cba:	3802      	subs	r0, #2
 8000cbc:	1b9b      	subs	r3, r3, r6
 8000cbe:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000cc2:	2100      	movs	r1, #0
 8000cc4:	b11d      	cbz	r5, 8000cce <__udivmoddi4+0xa6>
 8000cc6:	40d3      	lsrs	r3, r2
 8000cc8:	2200      	movs	r2, #0
 8000cca:	e9c5 3200 	strd	r3, r2, [r5]
 8000cce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cd2:	428b      	cmp	r3, r1
 8000cd4:	d905      	bls.n	8000ce2 <__udivmoddi4+0xba>
 8000cd6:	b10d      	cbz	r5, 8000cdc <__udivmoddi4+0xb4>
 8000cd8:	e9c5 0100 	strd	r0, r1, [r5]
 8000cdc:	2100      	movs	r1, #0
 8000cde:	4608      	mov	r0, r1
 8000ce0:	e7f5      	b.n	8000cce <__udivmoddi4+0xa6>
 8000ce2:	fab3 f183 	clz	r1, r3
 8000ce6:	2900      	cmp	r1, #0
 8000ce8:	d146      	bne.n	8000d78 <__udivmoddi4+0x150>
 8000cea:	42a3      	cmp	r3, r4
 8000cec:	d302      	bcc.n	8000cf4 <__udivmoddi4+0xcc>
 8000cee:	4290      	cmp	r0, r2
 8000cf0:	f0c0 80f0 	bcc.w	8000ed4 <__udivmoddi4+0x2ac>
 8000cf4:	1a86      	subs	r6, r0, r2
 8000cf6:	eb64 0303 	sbc.w	r3, r4, r3
 8000cfa:	2001      	movs	r0, #1
 8000cfc:	2d00      	cmp	r5, #0
 8000cfe:	d0e6      	beq.n	8000cce <__udivmoddi4+0xa6>
 8000d00:	e9c5 6300 	strd	r6, r3, [r5]
 8000d04:	e7e3      	b.n	8000cce <__udivmoddi4+0xa6>
 8000d06:	2a00      	cmp	r2, #0
 8000d08:	f040 8090 	bne.w	8000e2c <__udivmoddi4+0x204>
 8000d0c:	eba1 040c 	sub.w	r4, r1, ip
 8000d10:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000d14:	fa1f f78c 	uxth.w	r7, ip
 8000d18:	2101      	movs	r1, #1
 8000d1a:	fbb4 f6f8 	udiv	r6, r4, r8
 8000d1e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000d22:	fb08 4416 	mls	r4, r8, r6, r4
 8000d26:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000d2a:	fb07 f006 	mul.w	r0, r7, r6
 8000d2e:	4298      	cmp	r0, r3
 8000d30:	d908      	bls.n	8000d44 <__udivmoddi4+0x11c>
 8000d32:	eb1c 0303 	adds.w	r3, ip, r3
 8000d36:	f106 34ff 	add.w	r4, r6, #4294967295	@ 0xffffffff
 8000d3a:	d202      	bcs.n	8000d42 <__udivmoddi4+0x11a>
 8000d3c:	4298      	cmp	r0, r3
 8000d3e:	f200 80cd 	bhi.w	8000edc <__udivmoddi4+0x2b4>
 8000d42:	4626      	mov	r6, r4
 8000d44:	1a1c      	subs	r4, r3, r0
 8000d46:	fa1f f38e 	uxth.w	r3, lr
 8000d4a:	fbb4 f0f8 	udiv	r0, r4, r8
 8000d4e:	fb08 4410 	mls	r4, r8, r0, r4
 8000d52:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000d56:	fb00 f707 	mul.w	r7, r0, r7
 8000d5a:	429f      	cmp	r7, r3
 8000d5c:	d908      	bls.n	8000d70 <__udivmoddi4+0x148>
 8000d5e:	eb1c 0303 	adds.w	r3, ip, r3
 8000d62:	f100 34ff 	add.w	r4, r0, #4294967295	@ 0xffffffff
 8000d66:	d202      	bcs.n	8000d6e <__udivmoddi4+0x146>
 8000d68:	429f      	cmp	r7, r3
 8000d6a:	f200 80b0 	bhi.w	8000ece <__udivmoddi4+0x2a6>
 8000d6e:	4620      	mov	r0, r4
 8000d70:	1bdb      	subs	r3, r3, r7
 8000d72:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000d76:	e7a5      	b.n	8000cc4 <__udivmoddi4+0x9c>
 8000d78:	f1c1 0620 	rsb	r6, r1, #32
 8000d7c:	408b      	lsls	r3, r1
 8000d7e:	fa22 f706 	lsr.w	r7, r2, r6
 8000d82:	431f      	orrs	r7, r3
 8000d84:	fa20 fc06 	lsr.w	ip, r0, r6
 8000d88:	fa04 f301 	lsl.w	r3, r4, r1
 8000d8c:	ea43 030c 	orr.w	r3, r3, ip
 8000d90:	40f4      	lsrs	r4, r6
 8000d92:	fa00 f801 	lsl.w	r8, r0, r1
 8000d96:	0c38      	lsrs	r0, r7, #16
 8000d98:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000d9c:	fbb4 fef0 	udiv	lr, r4, r0
 8000da0:	fa1f fc87 	uxth.w	ip, r7
 8000da4:	fb00 441e 	mls	r4, r0, lr, r4
 8000da8:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000dac:	fb0e f90c 	mul.w	r9, lr, ip
 8000db0:	45a1      	cmp	r9, r4
 8000db2:	fa02 f201 	lsl.w	r2, r2, r1
 8000db6:	d90a      	bls.n	8000dce <__udivmoddi4+0x1a6>
 8000db8:	193c      	adds	r4, r7, r4
 8000dba:	f10e 3aff 	add.w	sl, lr, #4294967295	@ 0xffffffff
 8000dbe:	f080 8084 	bcs.w	8000eca <__udivmoddi4+0x2a2>
 8000dc2:	45a1      	cmp	r9, r4
 8000dc4:	f240 8081 	bls.w	8000eca <__udivmoddi4+0x2a2>
 8000dc8:	f1ae 0e02 	sub.w	lr, lr, #2
 8000dcc:	443c      	add	r4, r7
 8000dce:	eba4 0409 	sub.w	r4, r4, r9
 8000dd2:	fa1f f983 	uxth.w	r9, r3
 8000dd6:	fbb4 f3f0 	udiv	r3, r4, r0
 8000dda:	fb00 4413 	mls	r4, r0, r3, r4
 8000dde:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000de2:	fb03 fc0c 	mul.w	ip, r3, ip
 8000de6:	45a4      	cmp	ip, r4
 8000de8:	d907      	bls.n	8000dfa <__udivmoddi4+0x1d2>
 8000dea:	193c      	adds	r4, r7, r4
 8000dec:	f103 30ff 	add.w	r0, r3, #4294967295	@ 0xffffffff
 8000df0:	d267      	bcs.n	8000ec2 <__udivmoddi4+0x29a>
 8000df2:	45a4      	cmp	ip, r4
 8000df4:	d965      	bls.n	8000ec2 <__udivmoddi4+0x29a>
 8000df6:	3b02      	subs	r3, #2
 8000df8:	443c      	add	r4, r7
 8000dfa:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000dfe:	fba0 9302 	umull	r9, r3, r0, r2
 8000e02:	eba4 040c 	sub.w	r4, r4, ip
 8000e06:	429c      	cmp	r4, r3
 8000e08:	46ce      	mov	lr, r9
 8000e0a:	469c      	mov	ip, r3
 8000e0c:	d351      	bcc.n	8000eb2 <__udivmoddi4+0x28a>
 8000e0e:	d04e      	beq.n	8000eae <__udivmoddi4+0x286>
 8000e10:	b155      	cbz	r5, 8000e28 <__udivmoddi4+0x200>
 8000e12:	ebb8 030e 	subs.w	r3, r8, lr
 8000e16:	eb64 040c 	sbc.w	r4, r4, ip
 8000e1a:	fa04 f606 	lsl.w	r6, r4, r6
 8000e1e:	40cb      	lsrs	r3, r1
 8000e20:	431e      	orrs	r6, r3
 8000e22:	40cc      	lsrs	r4, r1
 8000e24:	e9c5 6400 	strd	r6, r4, [r5]
 8000e28:	2100      	movs	r1, #0
 8000e2a:	e750      	b.n	8000cce <__udivmoddi4+0xa6>
 8000e2c:	f1c2 0320 	rsb	r3, r2, #32
 8000e30:	fa20 f103 	lsr.w	r1, r0, r3
 8000e34:	fa0c fc02 	lsl.w	ip, ip, r2
 8000e38:	fa24 f303 	lsr.w	r3, r4, r3
 8000e3c:	4094      	lsls	r4, r2
 8000e3e:	430c      	orrs	r4, r1
 8000e40:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000e44:	fa00 fe02 	lsl.w	lr, r0, r2
 8000e48:	fa1f f78c 	uxth.w	r7, ip
 8000e4c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000e50:	fb08 3110 	mls	r1, r8, r0, r3
 8000e54:	0c23      	lsrs	r3, r4, #16
 8000e56:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000e5a:	fb00 f107 	mul.w	r1, r0, r7
 8000e5e:	4299      	cmp	r1, r3
 8000e60:	d908      	bls.n	8000e74 <__udivmoddi4+0x24c>
 8000e62:	eb1c 0303 	adds.w	r3, ip, r3
 8000e66:	f100 36ff 	add.w	r6, r0, #4294967295	@ 0xffffffff
 8000e6a:	d22c      	bcs.n	8000ec6 <__udivmoddi4+0x29e>
 8000e6c:	4299      	cmp	r1, r3
 8000e6e:	d92a      	bls.n	8000ec6 <__udivmoddi4+0x29e>
 8000e70:	3802      	subs	r0, #2
 8000e72:	4463      	add	r3, ip
 8000e74:	1a5b      	subs	r3, r3, r1
 8000e76:	b2a4      	uxth	r4, r4
 8000e78:	fbb3 f1f8 	udiv	r1, r3, r8
 8000e7c:	fb08 3311 	mls	r3, r8, r1, r3
 8000e80:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000e84:	fb01 f307 	mul.w	r3, r1, r7
 8000e88:	42a3      	cmp	r3, r4
 8000e8a:	d908      	bls.n	8000e9e <__udivmoddi4+0x276>
 8000e8c:	eb1c 0404 	adds.w	r4, ip, r4
 8000e90:	f101 36ff 	add.w	r6, r1, #4294967295	@ 0xffffffff
 8000e94:	d213      	bcs.n	8000ebe <__udivmoddi4+0x296>
 8000e96:	42a3      	cmp	r3, r4
 8000e98:	d911      	bls.n	8000ebe <__udivmoddi4+0x296>
 8000e9a:	3902      	subs	r1, #2
 8000e9c:	4464      	add	r4, ip
 8000e9e:	1ae4      	subs	r4, r4, r3
 8000ea0:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000ea4:	e739      	b.n	8000d1a <__udivmoddi4+0xf2>
 8000ea6:	4604      	mov	r4, r0
 8000ea8:	e6f0      	b.n	8000c8c <__udivmoddi4+0x64>
 8000eaa:	4608      	mov	r0, r1
 8000eac:	e706      	b.n	8000cbc <__udivmoddi4+0x94>
 8000eae:	45c8      	cmp	r8, r9
 8000eb0:	d2ae      	bcs.n	8000e10 <__udivmoddi4+0x1e8>
 8000eb2:	ebb9 0e02 	subs.w	lr, r9, r2
 8000eb6:	eb63 0c07 	sbc.w	ip, r3, r7
 8000eba:	3801      	subs	r0, #1
 8000ebc:	e7a8      	b.n	8000e10 <__udivmoddi4+0x1e8>
 8000ebe:	4631      	mov	r1, r6
 8000ec0:	e7ed      	b.n	8000e9e <__udivmoddi4+0x276>
 8000ec2:	4603      	mov	r3, r0
 8000ec4:	e799      	b.n	8000dfa <__udivmoddi4+0x1d2>
 8000ec6:	4630      	mov	r0, r6
 8000ec8:	e7d4      	b.n	8000e74 <__udivmoddi4+0x24c>
 8000eca:	46d6      	mov	lr, sl
 8000ecc:	e77f      	b.n	8000dce <__udivmoddi4+0x1a6>
 8000ece:	4463      	add	r3, ip
 8000ed0:	3802      	subs	r0, #2
 8000ed2:	e74d      	b.n	8000d70 <__udivmoddi4+0x148>
 8000ed4:	4606      	mov	r6, r0
 8000ed6:	4623      	mov	r3, r4
 8000ed8:	4608      	mov	r0, r1
 8000eda:	e70f      	b.n	8000cfc <__udivmoddi4+0xd4>
 8000edc:	3e02      	subs	r6, #2
 8000ede:	4463      	add	r3, ip
 8000ee0:	e730      	b.n	8000d44 <__udivmoddi4+0x11c>
 8000ee2:	bf00      	nop

08000ee4 <__aeabi_idiv0>:
 8000ee4:	4770      	bx	lr
 8000ee6:	bf00      	nop

08000ee8 <HAL_UART_TxCpltCallback>:

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */


void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart){
 8000ee8:	b480      	push	{r7}
 8000eea:	b083      	sub	sp, #12
 8000eec:	af00      	add	r7, sp, #0
 8000eee:	6078      	str	r0, [r7, #4]
	hsLog.DMAdataSentOut += 1; // use this and keep a single buffer?
 8000ef0:	4b06      	ldr	r3, [pc, #24]	@ (8000f0c <HAL_UART_TxCpltCallback+0x24>)
 8000ef2:	f893 3fb4 	ldrb.w	r3, [r3, #4020]	@ 0xfb4
 8000ef6:	3301      	adds	r3, #1
 8000ef8:	b2da      	uxtb	r2, r3
 8000efa:	4b04      	ldr	r3, [pc, #16]	@ (8000f0c <HAL_UART_TxCpltCallback+0x24>)
 8000efc:	f883 2fb4 	strb.w	r2, [r3, #4020]	@ 0xfb4
}
 8000f00:	bf00      	nop
 8000f02:	370c      	adds	r7, #12
 8000f04:	46bd      	mov	sp, r7
 8000f06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f0a:	4770      	bx	lr
 8000f0c:	200007b8 	.word	0x200007b8

08000f10 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000f10:	b580      	push	{r7, lr}
 8000f12:	b084      	sub	sp, #16
 8000f14:	af02      	add	r7, sp, #8
 8000f16:	6078      	str	r0, [r7, #4]
	/* TIM1 is set to fire at half the pwm freq, so 10Khz as the pwm freq is 40Khz. Since RPR= 3
	 * is set before the timer is on, the timer fires at the underflow interrupt
	 */
	if (htim->Instance==TIM1){
 8000f18:	687b      	ldr	r3, [r7, #4]
 8000f1a:	681b      	ldr	r3, [r3, #0]
 8000f1c:	4a67      	ldr	r2, [pc, #412]	@ (80010bc <HAL_TIM_PeriodElapsedCallback+0x1ac>)
 8000f1e:	4293      	cmp	r3, r2
 8000f20:	f040 822a 	bne.w	8001378 <HAL_TIM_PeriodElapsedCallback+0x468>
		dt = SysTick->VAL - t0;
 8000f24:	4b66      	ldr	r3, [pc, #408]	@ (80010c0 <HAL_TIM_PeriodElapsedCallback+0x1b0>)
 8000f26:	689b      	ldr	r3, [r3, #8]
 8000f28:	4a66      	ldr	r2, [pc, #408]	@ (80010c4 <HAL_TIM_PeriodElapsedCallback+0x1b4>)
 8000f2a:	6812      	ldr	r2, [r2, #0]
 8000f2c:	1a9b      	subs	r3, r3, r2
 8000f2e:	461a      	mov	r2, r3
 8000f30:	4b65      	ldr	r3, [pc, #404]	@ (80010c8 <HAL_TIM_PeriodElapsedCallback+0x1b8>)
 8000f32:	601a      	str	r2, [r3, #0]
		t0 = SysTick->VAL;
 8000f34:	4b62      	ldr	r3, [pc, #392]	@ (80010c0 <HAL_TIM_PeriodElapsedCallback+0x1b0>)
 8000f36:	689b      	ldr	r3, [r3, #8]
 8000f38:	461a      	mov	r2, r3
 8000f3a:	4b62      	ldr	r3, [pc, #392]	@ (80010c4 <HAL_TIM_PeriodElapsedCallback+0x1b4>)
 8000f3c:	601a      	str	r2, [r3, #0]
		svpwm.loopCounter++;
 8000f3e:	4b63      	ldr	r3, [pc, #396]	@ (80010cc <HAL_TIM_PeriodElapsedCallback+0x1bc>)
 8000f40:	681b      	ldr	r3, [r3, #0]
 8000f42:	3301      	adds	r3, #1
 8000f44:	4a61      	ldr	r2, [pc, #388]	@ (80010cc <HAL_TIM_PeriodElapsedCallback+0x1bc>)
 8000f46:	6013      	str	r3, [r2, #0]

		if (readPosition){
 8000f48:	4b61      	ldr	r3, [pc, #388]	@ (80010d0 <HAL_TIM_PeriodElapsedCallback+0x1c0>)
 8000f4a:	f993 3000 	ldrsb.w	r3, [r3]
 8000f4e:	2b00      	cmp	r3, #0
 8000f50:	d00b      	beq.n	8000f6a <HAL_TIM_PeriodElapsedCallback+0x5a>
			PositionSensor_update(&ps,TIM1_DT);
 8000f52:	ed9f 0a60 	vldr	s0, [pc, #384]	@ 80010d4 <HAL_TIM_PeriodElapsedCallback+0x1c4>
 8000f56:	4860      	ldr	r0, [pc, #384]	@ (80010d8 <HAL_TIM_PeriodElapsedCallback+0x1c8>)
 8000f58:	f003 f83e 	bl	8003fd8 <PositionSensor_update>
			getAveragedVelocityRadSec(&ps);
 8000f5c:	485e      	ldr	r0, [pc, #376]	@ (80010d8 <HAL_TIM_PeriodElapsedCallback+0x1c8>)
 8000f5e:	f003 f909 	bl	8004174 <getAveragedVelocityRadSec>
			updateSpeedCalc(&s,&ps);
 8000f62:	495d      	ldr	r1, [pc, #372]	@ (80010d8 <HAL_TIM_PeriodElapsedCallback+0x1c8>)
 8000f64:	485d      	ldr	r0, [pc, #372]	@ (80010dc <HAL_TIM_PeriodElapsedCallback+0x1cc>)
 8000f66:	f003 fe71 	bl	8004c4c <updateSpeedCalc>
		}

		if (runOL){
 8000f6a:	4b5d      	ldr	r3, [pc, #372]	@ (80010e0 <HAL_TIM_PeriodElapsedCallback+0x1d0>)
 8000f6c:	781b      	ldrb	r3, [r3, #0]
 8000f6e:	2b00      	cmp	r3, #0
 8000f70:	d043      	beq.n	8000ffa <HAL_TIM_PeriodElapsedCallback+0xea>
			OL_elecRadians += d_elecRadians;
 8000f72:	4b5c      	ldr	r3, [pc, #368]	@ (80010e4 <HAL_TIM_PeriodElapsedCallback+0x1d4>)
 8000f74:	ed93 7a00 	vldr	s14, [r3]
 8000f78:	4b5b      	ldr	r3, [pc, #364]	@ (80010e8 <HAL_TIM_PeriodElapsedCallback+0x1d8>)
 8000f7a:	edd3 7a00 	vldr	s15, [r3]
 8000f7e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000f82:	4b58      	ldr	r3, [pc, #352]	@ (80010e4 <HAL_TIM_PeriodElapsedCallback+0x1d4>)
 8000f84:	edc3 7a00 	vstr	s15, [r3]
			if (OL_elecRadians >= 6.28f){
 8000f88:	4b56      	ldr	r3, [pc, #344]	@ (80010e4 <HAL_TIM_PeriodElapsedCallback+0x1d4>)
 8000f8a:	edd3 7a00 	vldr	s15, [r3]
 8000f8e:	ed9f 7a57 	vldr	s14, [pc, #348]	@ 80010ec <HAL_TIM_PeriodElapsedCallback+0x1dc>
 8000f92:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000f96:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000f9a:	db03      	blt.n	8000fa4 <HAL_TIM_PeriodElapsedCallback+0x94>
				OL_elecRadians = 0;
 8000f9c:	4b51      	ldr	r3, [pc, #324]	@ (80010e4 <HAL_TIM_PeriodElapsedCallback+0x1d4>)
 8000f9e:	f04f 0200 	mov.w	r2, #0
 8000fa2:	601a      	str	r2, [r3, #0]
			}
			if (OL_elecRadians < 0){
 8000fa4:	4b4f      	ldr	r3, [pc, #316]	@ (80010e4 <HAL_TIM_PeriodElapsedCallback+0x1d4>)
 8000fa6:	edd3 7a00 	vldr	s15, [r3]
 8000faa:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8000fae:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000fb2:	d502      	bpl.n	8000fba <HAL_TIM_PeriodElapsedCallback+0xaa>
				OL_elecRadians = 6.28f;
 8000fb4:	4b4b      	ldr	r3, [pc, #300]	@ (80010e4 <HAL_TIM_PeriodElapsedCallback+0x1d4>)
 8000fb6:	4a4e      	ldr	r2, [pc, #312]	@ (80010f0 <HAL_TIM_PeriodElapsedCallback+0x1e0>)
 8000fb8:	601a      	str	r2, [r3, #0]
			}
			svpwm.voltagePercent = r.currentDutyF/TIMER1_ARR;
 8000fba:	4b4e      	ldr	r3, [pc, #312]	@ (80010f4 <HAL_TIM_PeriodElapsedCallback+0x1e4>)
 8000fbc:	ed93 7a01 	vldr	s14, [r3, #4]
 8000fc0:	eddf 6a4d 	vldr	s13, [pc, #308]	@ 80010f8 <HAL_TIM_PeriodElapsedCallback+0x1e8>
 8000fc4:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000fc8:	4b40      	ldr	r3, [pc, #256]	@ (80010cc <HAL_TIM_PeriodElapsedCallback+0x1bc>)
 8000fca:	edc3 7a01 	vstr	s15, [r3, #4]
			FOC_calcSVPWM(&svpwm,svpwm.voltagePercent,OL_elecRadians,PI_BY_2F);
 8000fce:	4b3f      	ldr	r3, [pc, #252]	@ (80010cc <HAL_TIM_PeriodElapsedCallback+0x1bc>)
 8000fd0:	edd3 7a01 	vldr	s15, [r3, #4]
 8000fd4:	4b43      	ldr	r3, [pc, #268]	@ (80010e4 <HAL_TIM_PeriodElapsedCallback+0x1d4>)
 8000fd6:	ed93 7a00 	vldr	s14, [r3]
 8000fda:	ed9f 1a48 	vldr	s2, [pc, #288]	@ 80010fc <HAL_TIM_PeriodElapsedCallback+0x1ec>
 8000fde:	eef0 0a47 	vmov.f32	s1, s14
 8000fe2:	eeb0 0a67 	vmov.f32	s0, s15
 8000fe6:	4839      	ldr	r0, [pc, #228]	@ (80010cc <HAL_TIM_PeriodElapsedCallback+0x1bc>)
 8000fe8:	f001 ff92 	bl	8002f10 <FOC_calcSVPWM>
			FOC_applyPWM(&svpwm,0,ms.reversePhases);
 8000fec:	4b44      	ldr	r3, [pc, #272]	@ (8001100 <HAL_TIM_PeriodElapsedCallback+0x1f0>)
 8000fee:	7a9b      	ldrb	r3, [r3, #10]
 8000ff0:	461a      	mov	r2, r3
 8000ff2:	2100      	movs	r1, #0
 8000ff4:	4835      	ldr	r0, [pc, #212]	@ (80010cc <HAL_TIM_PeriodElapsedCallback+0x1bc>)
 8000ff6:	f002 f8f5 	bl	80031e4 <FOC_applyPWM>
		}

		//only changing the duty cycle and SVPWM
		if (r.rampPhase!=RAMP_WAIT){
 8000ffa:	4b3e      	ldr	r3, [pc, #248]	@ (80010f4 <HAL_TIM_PeriodElapsedCallback+0x1e4>)
 8000ffc:	7f1b      	ldrb	r3, [r3, #28]
 8000ffe:	2b04      	cmp	r3, #4
 8001000:	f000 80bd 	beq.w	800117e <HAL_TIM_PeriodElapsedCallback+0x26e>
			svpwm.voltagePercent = r.currentDutyF/TIMER1_ARR;
 8001004:	4b3b      	ldr	r3, [pc, #236]	@ (80010f4 <HAL_TIM_PeriodElapsedCallback+0x1e4>)
 8001006:	ed93 7a01 	vldr	s14, [r3, #4]
 800100a:	eddf 6a3b 	vldr	s13, [pc, #236]	@ 80010f8 <HAL_TIM_PeriodElapsedCallback+0x1e8>
 800100e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001012:	4b2e      	ldr	r3, [pc, #184]	@ (80010cc <HAL_TIM_PeriodElapsedCallback+0x1bc>)
 8001014:	edc3 7a01 	vstr	s15, [r3, #4]
			fr.inst_frictionAddition = 0;
 8001018:	4b3a      	ldr	r3, [pc, #232]	@ (8001104 <HAL_TIM_PeriodElapsedCallback+0x1f4>)
 800101a:	f04f 0200 	mov.w	r2, #0
 800101e:	611a      	str	r2, [r3, #16]
			cg.inst_coggingAddition = 0;
 8001020:	4b39      	ldr	r3, [pc, #228]	@ (8001108 <HAL_TIM_PeriodElapsedCallback+0x1f8>)
 8001022:	f04f 0200 	mov.w	r2, #0
 8001026:	615a      	str	r2, [r3, #20]
			if (fr.frictionCompensationOn){
 8001028:	4b36      	ldr	r3, [pc, #216]	@ (8001104 <HAL_TIM_PeriodElapsedCallback+0x1f4>)
 800102a:	781b      	ldrb	r3, [r3, #0]
 800102c:	2b00      	cmp	r3, #0
 800102e:	d006      	beq.n	800103e <HAL_TIM_PeriodElapsedCallback+0x12e>
				lookupFrictionAddition(&fr,ps.encoder_raw); // NOT sure why sign is changing for the two sides..
 8001030:	4b29      	ldr	r3, [pc, #164]	@ (80010d8 <HAL_TIM_PeriodElapsedCallback+0x1c8>)
 8001032:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8001036:	4619      	mov	r1, r3
 8001038:	4832      	ldr	r0, [pc, #200]	@ (8001104 <HAL_TIM_PeriodElapsedCallback+0x1f4>)
 800103a:	f001 fd41 	bl	8002ac0 <lookupFrictionAddition>
			}
			if (cg.coggingCompensationOn){
 800103e:	4b32      	ldr	r3, [pc, #200]	@ (8001108 <HAL_TIM_PeriodElapsedCallback+0x1f8>)
 8001040:	781b      	ldrb	r3, [r3, #0]
 8001042:	2b00      	cmp	r3, #0
 8001044:	d007      	beq.n	8001056 <HAL_TIM_PeriodElapsedCallback+0x146>
				lookupCoggingAddition(&cg,ps.elecRadians);
 8001046:	4b24      	ldr	r3, [pc, #144]	@ (80010d8 <HAL_TIM_PeriodElapsedCallback+0x1c8>)
 8001048:	edd3 7a15 	vldr	s15, [r3, #84]	@ 0x54
 800104c:	eeb0 0a67 	vmov.f32	s0, s15
 8001050:	482d      	ldr	r0, [pc, #180]	@ (8001108 <HAL_TIM_PeriodElapsedCallback+0x1f8>)
 8001052:	f001 fd7f 	bl	8002b54 <lookupCoggingAddition>
			}
			if (direction == CW){
 8001056:	4b2d      	ldr	r3, [pc, #180]	@ (800110c <HAL_TIM_PeriodElapsedCallback+0x1fc>)
 8001058:	f993 3000 	ldrsb.w	r3, [r3]
 800105c:	2b01      	cmp	r3, #1
 800105e:	d15b      	bne.n	8001118 <HAL_TIM_PeriodElapsedCallback+0x208>
				foc.m = svpwm.voltagePercent + fr.inst_frictionAddition + cg.inst_coggingAddition;//
 8001060:	4b1a      	ldr	r3, [pc, #104]	@ (80010cc <HAL_TIM_PeriodElapsedCallback+0x1bc>)
 8001062:	ed93 7a01 	vldr	s14, [r3, #4]
 8001066:	4b27      	ldr	r3, [pc, #156]	@ (8001104 <HAL_TIM_PeriodElapsedCallback+0x1f4>)
 8001068:	edd3 7a04 	vldr	s15, [r3, #16]
 800106c:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001070:	4b25      	ldr	r3, [pc, #148]	@ (8001108 <HAL_TIM_PeriodElapsedCallback+0x1f8>)
 8001072:	edd3 7a05 	vldr	s15, [r3, #20]
 8001076:	ee77 7a27 	vadd.f32	s15, s14, s15
 800107a:	4b25      	ldr	r3, [pc, #148]	@ (8001110 <HAL_TIM_PeriodElapsedCallback+0x200>)
 800107c:	edc3 7a0d 	vstr	s15, [r3, #52]	@ 0x34
				FOC_calcSVPWM(&svpwm,foc.m,ps.elecRadians,PI_BY_3F+ms.encCW_offset);
 8001080:	4b23      	ldr	r3, [pc, #140]	@ (8001110 <HAL_TIM_PeriodElapsedCallback+0x200>)
 8001082:	ed93 7a0d 	vldr	s14, [r3, #52]	@ 0x34
 8001086:	4b14      	ldr	r3, [pc, #80]	@ (80010d8 <HAL_TIM_PeriodElapsedCallback+0x1c8>)
 8001088:	edd3 6a15 	vldr	s13, [r3, #84]	@ 0x54
 800108c:	4b1c      	ldr	r3, [pc, #112]	@ (8001100 <HAL_TIM_PeriodElapsedCallback+0x1f0>)
 800108e:	edd3 7a00 	vldr	s15, [r3]
 8001092:	ed9f 6a20 	vldr	s12, [pc, #128]	@ 8001114 <HAL_TIM_PeriodElapsedCallback+0x204>
 8001096:	ee77 7a86 	vadd.f32	s15, s15, s12
 800109a:	eeb0 1a67 	vmov.f32	s2, s15
 800109e:	eef0 0a66 	vmov.f32	s1, s13
 80010a2:	eeb0 0a47 	vmov.f32	s0, s14
 80010a6:	4809      	ldr	r0, [pc, #36]	@ (80010cc <HAL_TIM_PeriodElapsedCallback+0x1bc>)
 80010a8:	f001 ff32 	bl	8002f10 <FOC_calcSVPWM>
				FOC_applyPWM(&svpwm,0,ms.reversePhases);
 80010ac:	4b14      	ldr	r3, [pc, #80]	@ (8001100 <HAL_TIM_PeriodElapsedCallback+0x1f0>)
 80010ae:	7a9b      	ldrb	r3, [r3, #10]
 80010b0:	461a      	mov	r2, r3
 80010b2:	2100      	movs	r1, #0
 80010b4:	4805      	ldr	r0, [pc, #20]	@ (80010cc <HAL_TIM_PeriodElapsedCallback+0x1bc>)
 80010b6:	f002 f895 	bl	80031e4 <FOC_applyPWM>
 80010ba:	e060      	b.n	800117e <HAL_TIM_PeriodElapsedCallback+0x26e>
 80010bc:	40012c00 	.word	0x40012c00
 80010c0:	e000e010 	.word	0xe000e010
 80010c4:	20001884 	.word	0x20001884
 80010c8:	20001880 	.word	0x20001880
 80010cc:	200006e4 	.word	0x200006e4
 80010d0:	20001865 	.word	0x20001865
 80010d4:	38d1b717 	.word	0x38d1b717
 80010d8:	200005f8 	.word	0x200005f8
 80010dc:	20000668 	.word	0x20000668
 80010e0:	20001870 	.word	0x20001870
 80010e4:	20001868 	.word	0x20001868
 80010e8:	2000186c 	.word	0x2000186c
 80010ec:	40c8f5c3 	.word	0x40c8f5c3
 80010f0:	40c8f5c3 	.word	0x40c8f5c3
 80010f4:	20000718 	.word	0x20000718
 80010f8:	449c2000 	.word	0x449c2000
 80010fc:	3fc90fdb 	.word	0x3fc90fdb
 8001100:	2000070c 	.word	0x2000070c
 8001104:	20001824 	.word	0x20001824
 8001108:	20001838 	.word	0x20001838
 800110c:	20000000 	.word	0x20000000
 8001110:	20000748 	.word	0x20000748
 8001114:	3f860a92 	.word	0x3f860a92
			}else if (direction == CCW){
 8001118:	4bae      	ldr	r3, [pc, #696]	@ (80013d4 <HAL_TIM_PeriodElapsedCallback+0x4c4>)
 800111a:	f993 3000 	ldrsb.w	r3, [r3]
 800111e:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8001122:	d12c      	bne.n	800117e <HAL_TIM_PeriodElapsedCallback+0x26e>
				foc.m = svpwm.voltagePercent - fr.inst_frictionAddition + cg.inst_coggingAddition;//
 8001124:	4bac      	ldr	r3, [pc, #688]	@ (80013d8 <HAL_TIM_PeriodElapsedCallback+0x4c8>)
 8001126:	ed93 7a01 	vldr	s14, [r3, #4]
 800112a:	4bac      	ldr	r3, [pc, #688]	@ (80013dc <HAL_TIM_PeriodElapsedCallback+0x4cc>)
 800112c:	edd3 7a04 	vldr	s15, [r3, #16]
 8001130:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001134:	4baa      	ldr	r3, [pc, #680]	@ (80013e0 <HAL_TIM_PeriodElapsedCallback+0x4d0>)
 8001136:	edd3 7a05 	vldr	s15, [r3, #20]
 800113a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800113e:	4ba9      	ldr	r3, [pc, #676]	@ (80013e4 <HAL_TIM_PeriodElapsedCallback+0x4d4>)
 8001140:	edc3 7a0d 	vstr	s15, [r3, #52]	@ 0x34
				FOC_calcSVPWM(&svpwm,foc.m,ps.elecRadians,-PI_BY_3F+ms.encCCW_offset);
 8001144:	4ba7      	ldr	r3, [pc, #668]	@ (80013e4 <HAL_TIM_PeriodElapsedCallback+0x4d4>)
 8001146:	ed93 7a0d 	vldr	s14, [r3, #52]	@ 0x34
 800114a:	4ba7      	ldr	r3, [pc, #668]	@ (80013e8 <HAL_TIM_PeriodElapsedCallback+0x4d8>)
 800114c:	edd3 6a15 	vldr	s13, [r3, #84]	@ 0x54
 8001150:	4ba6      	ldr	r3, [pc, #664]	@ (80013ec <HAL_TIM_PeriodElapsedCallback+0x4dc>)
 8001152:	edd3 7a01 	vldr	s15, [r3, #4]
 8001156:	ed9f 6aa6 	vldr	s12, [pc, #664]	@ 80013f0 <HAL_TIM_PeriodElapsedCallback+0x4e0>
 800115a:	ee77 7ac6 	vsub.f32	s15, s15, s12
 800115e:	eeb0 1a67 	vmov.f32	s2, s15
 8001162:	eef0 0a66 	vmov.f32	s1, s13
 8001166:	eeb0 0a47 	vmov.f32	s0, s14
 800116a:	489b      	ldr	r0, [pc, #620]	@ (80013d8 <HAL_TIM_PeriodElapsedCallback+0x4c8>)
 800116c:	f001 fed0 	bl	8002f10 <FOC_calcSVPWM>
				FOC_applyPWM(&svpwm,0,ms.reversePhases);
 8001170:	4b9e      	ldr	r3, [pc, #632]	@ (80013ec <HAL_TIM_PeriodElapsedCallback+0x4dc>)
 8001172:	7a9b      	ldrb	r3, [r3, #10]
 8001174:	461a      	mov	r2, r3
 8001176:	2100      	movs	r1, #0
 8001178:	4897      	ldr	r0, [pc, #604]	@ (80013d8 <HAL_TIM_PeriodElapsedCallback+0x4c8>)
 800117a:	f002 f833 	bl	80031e4 <FOC_applyPWM>
			}else{}
		} //closes RAMP wait

		if (rampRPM.rampPhase!=RAMP_WAIT){
 800117e:	4b9d      	ldr	r3, [pc, #628]	@ (80013f4 <HAL_TIM_PeriodElapsedCallback+0x4e4>)
 8001180:	7c1b      	ldrb	r3, [r3, #16]
 8001182:	2b04      	cmp	r3, #4
 8001184:	f000 80a7 	beq.w	80012d6 <HAL_TIM_PeriodElapsedCallback+0x3c6>
			//quick and dirty voltage pid has no anti windup and is limited to only positive nos
			speedPID.out = ExecVoltagePID(&speedPID,rampRPM.instTargetRPM_F,fabs(ps.velocityRPM),0,500); // voltage PID running inside the Hight Task Freq!
 8001188:	4b9a      	ldr	r3, [pc, #616]	@ (80013f4 <HAL_TIM_PeriodElapsedCallback+0x4e4>)
 800118a:	ed93 7a01 	vldr	s14, [r3, #4]
 800118e:	4b96      	ldr	r3, [pc, #600]	@ (80013e8 <HAL_TIM_PeriodElapsedCallback+0x4d8>)
 8001190:	edd3 7a19 	vldr	s15, [r3, #100]	@ 0x64
 8001194:	eef0 7ae7 	vabs.f32	s15, s15
 8001198:	eddf 1a97 	vldr	s3, [pc, #604]	@ 80013f8 <HAL_TIM_PeriodElapsedCallback+0x4e8>
 800119c:	ed9f 1a97 	vldr	s2, [pc, #604]	@ 80013fc <HAL_TIM_PeriodElapsedCallback+0x4ec>
 80011a0:	eef0 0a67 	vmov.f32	s1, s15
 80011a4:	eeb0 0a47 	vmov.f32	s0, s14
 80011a8:	4895      	ldr	r0, [pc, #596]	@ (8001400 <HAL_TIM_PeriodElapsedCallback+0x4f0>)
 80011aa:	f002 f977 	bl	800349c <ExecVoltagePID>
 80011ae:	eef0 7a40 	vmov.f32	s15, s0
 80011b2:	4b93      	ldr	r3, [pc, #588]	@ (8001400 <HAL_TIM_PeriodElapsedCallback+0x4f0>)
 80011b4:	edc3 7a09 	vstr	s15, [r3, #36]	@ 0x24
			svpwm.voltagePercent = speedPID.out/TIMER1_ARR;
 80011b8:	4b91      	ldr	r3, [pc, #580]	@ (8001400 <HAL_TIM_PeriodElapsedCallback+0x4f0>)
 80011ba:	ed93 7a09 	vldr	s14, [r3, #36]	@ 0x24
 80011be:	eddf 6a91 	vldr	s13, [pc, #580]	@ 8001404 <HAL_TIM_PeriodElapsedCallback+0x4f4>
 80011c2:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80011c6:	4b84      	ldr	r3, [pc, #528]	@ (80013d8 <HAL_TIM_PeriodElapsedCallback+0x4c8>)
 80011c8:	edc3 7a01 	vstr	s15, [r3, #4]

			fr.inst_frictionAddition = 0;
 80011cc:	4b83      	ldr	r3, [pc, #524]	@ (80013dc <HAL_TIM_PeriodElapsedCallback+0x4cc>)
 80011ce:	f04f 0200 	mov.w	r2, #0
 80011d2:	611a      	str	r2, [r3, #16]
			cg.inst_coggingAddition = 0;
 80011d4:	4b82      	ldr	r3, [pc, #520]	@ (80013e0 <HAL_TIM_PeriodElapsedCallback+0x4d0>)
 80011d6:	f04f 0200 	mov.w	r2, #0
 80011da:	615a      	str	r2, [r3, #20]
			if (fr.frictionCompensationOn){
 80011dc:	4b7f      	ldr	r3, [pc, #508]	@ (80013dc <HAL_TIM_PeriodElapsedCallback+0x4cc>)
 80011de:	781b      	ldrb	r3, [r3, #0]
 80011e0:	2b00      	cmp	r3, #0
 80011e2:	d006      	beq.n	80011f2 <HAL_TIM_PeriodElapsedCallback+0x2e2>
				lookupFrictionAddition(&fr,ps.encoder_raw); // NOT sure why sign is changing for the two sides..
 80011e4:	4b80      	ldr	r3, [pc, #512]	@ (80013e8 <HAL_TIM_PeriodElapsedCallback+0x4d8>)
 80011e6:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 80011ea:	4619      	mov	r1, r3
 80011ec:	487b      	ldr	r0, [pc, #492]	@ (80013dc <HAL_TIM_PeriodElapsedCallback+0x4cc>)
 80011ee:	f001 fc67 	bl	8002ac0 <lookupFrictionAddition>
			}
			if (cg.coggingCompensationOn){
 80011f2:	4b7b      	ldr	r3, [pc, #492]	@ (80013e0 <HAL_TIM_PeriodElapsedCallback+0x4d0>)
 80011f4:	781b      	ldrb	r3, [r3, #0]
 80011f6:	2b00      	cmp	r3, #0
 80011f8:	d007      	beq.n	800120a <HAL_TIM_PeriodElapsedCallback+0x2fa>
				lookupCoggingAddition(&cg,ps.elecRadians);
 80011fa:	4b7b      	ldr	r3, [pc, #492]	@ (80013e8 <HAL_TIM_PeriodElapsedCallback+0x4d8>)
 80011fc:	edd3 7a15 	vldr	s15, [r3, #84]	@ 0x54
 8001200:	eeb0 0a67 	vmov.f32	s0, s15
 8001204:	4876      	ldr	r0, [pc, #472]	@ (80013e0 <HAL_TIM_PeriodElapsedCallback+0x4d0>)
 8001206:	f001 fca5 	bl	8002b54 <lookupCoggingAddition>
			}

			if (direction == CW){
 800120a:	4b72      	ldr	r3, [pc, #456]	@ (80013d4 <HAL_TIM_PeriodElapsedCallback+0x4c4>)
 800120c:	f993 3000 	ldrsb.w	r3, [r3]
 8001210:	2b01      	cmp	r3, #1
 8001212:	d12d      	bne.n	8001270 <HAL_TIM_PeriodElapsedCallback+0x360>
				foc.m = svpwm.voltagePercent + fr.inst_frictionAddition + cg.inst_coggingAddition;//
 8001214:	4b70      	ldr	r3, [pc, #448]	@ (80013d8 <HAL_TIM_PeriodElapsedCallback+0x4c8>)
 8001216:	ed93 7a01 	vldr	s14, [r3, #4]
 800121a:	4b70      	ldr	r3, [pc, #448]	@ (80013dc <HAL_TIM_PeriodElapsedCallback+0x4cc>)
 800121c:	edd3 7a04 	vldr	s15, [r3, #16]
 8001220:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001224:	4b6e      	ldr	r3, [pc, #440]	@ (80013e0 <HAL_TIM_PeriodElapsedCallback+0x4d0>)
 8001226:	edd3 7a05 	vldr	s15, [r3, #20]
 800122a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800122e:	4b6d      	ldr	r3, [pc, #436]	@ (80013e4 <HAL_TIM_PeriodElapsedCallback+0x4d4>)
 8001230:	edc3 7a0d 	vstr	s15, [r3, #52]	@ 0x34
				FOC_calcSVPWM(&svpwm,foc.m,ps.elecRadians,PI_BY_3F+ms.encCW_offset);
 8001234:	4b6b      	ldr	r3, [pc, #428]	@ (80013e4 <HAL_TIM_PeriodElapsedCallback+0x4d4>)
 8001236:	ed93 7a0d 	vldr	s14, [r3, #52]	@ 0x34
 800123a:	4b6b      	ldr	r3, [pc, #428]	@ (80013e8 <HAL_TIM_PeriodElapsedCallback+0x4d8>)
 800123c:	edd3 6a15 	vldr	s13, [r3, #84]	@ 0x54
 8001240:	4b6a      	ldr	r3, [pc, #424]	@ (80013ec <HAL_TIM_PeriodElapsedCallback+0x4dc>)
 8001242:	edd3 7a00 	vldr	s15, [r3]
 8001246:	ed9f 6a6a 	vldr	s12, [pc, #424]	@ 80013f0 <HAL_TIM_PeriodElapsedCallback+0x4e0>
 800124a:	ee77 7a86 	vadd.f32	s15, s15, s12
 800124e:	eeb0 1a67 	vmov.f32	s2, s15
 8001252:	eef0 0a66 	vmov.f32	s1, s13
 8001256:	eeb0 0a47 	vmov.f32	s0, s14
 800125a:	485f      	ldr	r0, [pc, #380]	@ (80013d8 <HAL_TIM_PeriodElapsedCallback+0x4c8>)
 800125c:	f001 fe58 	bl	8002f10 <FOC_calcSVPWM>
				FOC_applyPWM(&svpwm,0,ms.reversePhases);
 8001260:	4b62      	ldr	r3, [pc, #392]	@ (80013ec <HAL_TIM_PeriodElapsedCallback+0x4dc>)
 8001262:	7a9b      	ldrb	r3, [r3, #10]
 8001264:	461a      	mov	r2, r3
 8001266:	2100      	movs	r1, #0
 8001268:	485b      	ldr	r0, [pc, #364]	@ (80013d8 <HAL_TIM_PeriodElapsedCallback+0x4c8>)
 800126a:	f001 ffbb 	bl	80031e4 <FOC_applyPWM>
 800126e:	e032      	b.n	80012d6 <HAL_TIM_PeriodElapsedCallback+0x3c6>
			}else if (direction == CCW){
 8001270:	4b58      	ldr	r3, [pc, #352]	@ (80013d4 <HAL_TIM_PeriodElapsedCallback+0x4c4>)
 8001272:	f993 3000 	ldrsb.w	r3, [r3]
 8001276:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800127a:	d12c      	bne.n	80012d6 <HAL_TIM_PeriodElapsedCallback+0x3c6>
				foc.m = svpwm.voltagePercent - fr.inst_frictionAddition + cg.inst_coggingAddition;//
 800127c:	4b56      	ldr	r3, [pc, #344]	@ (80013d8 <HAL_TIM_PeriodElapsedCallback+0x4c8>)
 800127e:	ed93 7a01 	vldr	s14, [r3, #4]
 8001282:	4b56      	ldr	r3, [pc, #344]	@ (80013dc <HAL_TIM_PeriodElapsedCallback+0x4cc>)
 8001284:	edd3 7a04 	vldr	s15, [r3, #16]
 8001288:	ee37 7a67 	vsub.f32	s14, s14, s15
 800128c:	4b54      	ldr	r3, [pc, #336]	@ (80013e0 <HAL_TIM_PeriodElapsedCallback+0x4d0>)
 800128e:	edd3 7a05 	vldr	s15, [r3, #20]
 8001292:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001296:	4b53      	ldr	r3, [pc, #332]	@ (80013e4 <HAL_TIM_PeriodElapsedCallback+0x4d4>)
 8001298:	edc3 7a0d 	vstr	s15, [r3, #52]	@ 0x34
				FOC_calcSVPWM(&svpwm,svpwm.voltagePercent,ps.elecRadians,-PI_BY_3F+ms.encCCW_offset);
 800129c:	4b4e      	ldr	r3, [pc, #312]	@ (80013d8 <HAL_TIM_PeriodElapsedCallback+0x4c8>)
 800129e:	ed93 7a01 	vldr	s14, [r3, #4]
 80012a2:	4b51      	ldr	r3, [pc, #324]	@ (80013e8 <HAL_TIM_PeriodElapsedCallback+0x4d8>)
 80012a4:	edd3 6a15 	vldr	s13, [r3, #84]	@ 0x54
 80012a8:	4b50      	ldr	r3, [pc, #320]	@ (80013ec <HAL_TIM_PeriodElapsedCallback+0x4dc>)
 80012aa:	edd3 7a01 	vldr	s15, [r3, #4]
 80012ae:	ed9f 6a50 	vldr	s12, [pc, #320]	@ 80013f0 <HAL_TIM_PeriodElapsedCallback+0x4e0>
 80012b2:	ee77 7ac6 	vsub.f32	s15, s15, s12
 80012b6:	eeb0 1a67 	vmov.f32	s2, s15
 80012ba:	eef0 0a66 	vmov.f32	s1, s13
 80012be:	eeb0 0a47 	vmov.f32	s0, s14
 80012c2:	4845      	ldr	r0, [pc, #276]	@ (80013d8 <HAL_TIM_PeriodElapsedCallback+0x4c8>)
 80012c4:	f001 fe24 	bl	8002f10 <FOC_calcSVPWM>
				FOC_applyPWM(&svpwm,0,ms.reversePhases);
 80012c8:	4b48      	ldr	r3, [pc, #288]	@ (80013ec <HAL_TIM_PeriodElapsedCallback+0x4dc>)
 80012ca:	7a9b      	ldrb	r3, [r3, #10]
 80012cc:	461a      	mov	r2, r3
 80012ce:	2100      	movs	r1, #0
 80012d0:	4841      	ldr	r0, [pc, #260]	@ (80013d8 <HAL_TIM_PeriodElapsedCallback+0x4c8>)
 80012d2:	f001 ff87 	bl	80031e4 <FOC_applyPWM>
			}else{}

		} //closes RAMP wait

		//Logging
		if (hsLog.enable){
 80012d6:	4b4c      	ldr	r3, [pc, #304]	@ (8001408 <HAL_TIM_PeriodElapsedCallback+0x4f8>)
 80012d8:	781b      	ldrb	r3, [r3, #0]
 80012da:	2b00      	cmp	r3, #0
 80012dc:	d044      	beq.n	8001368 <HAL_TIM_PeriodElapsedCallback+0x458>
			if(hsLog.addDatas == 0){
 80012de:	4b4a      	ldr	r3, [pc, #296]	@ (8001408 <HAL_TIM_PeriodElapsedCallback+0x4f8>)
 80012e0:	f8d3 3fc0 	ldr.w	r3, [r3, #4032]	@ 0xfc0
 80012e4:	2b00      	cmp	r3, #0
 80012e6:	d104      	bne.n	80012f2 <HAL_TIM_PeriodElapsedCallback+0x3e2>
				hsLog.startLoopIndex = svpwm.loopCounter;
 80012e8:	4b3b      	ldr	r3, [pc, #236]	@ (80013d8 <HAL_TIM_PeriodElapsedCallback+0x4c8>)
 80012ea:	681b      	ldr	r3, [r3, #0]
 80012ec:	4a46      	ldr	r2, [pc, #280]	@ (8001408 <HAL_TIM_PeriodElapsedCallback+0x4f8>)
 80012ee:	f8c2 3fb8 	str.w	r3, [r2, #4024]	@ 0xfb8
			}
			if (hsLog.bufferIndex < HSARRAYSIZE - HSLOGSIZE-1){
 80012f2:	4b45      	ldr	r3, [pc, #276]	@ (8001408 <HAL_TIM_PeriodElapsedCallback+0x4f8>)
 80012f4:	f8b3 3fae 	ldrh.w	r3, [r3, #4014]	@ 0xfae
 80012f8:	f240 72ac 	movw	r2, #1964	@ 0x7ac
 80012fc:	4293      	cmp	r3, r2
 80012fe:	d816      	bhi.n	800132e <HAL_TIM_PeriodElapsedCallback+0x41e>
				hsLog.bufferIndex = addData(&hsLog, &svpwm, &ps,&foc,&fr,&cg);
 8001300:	4b37      	ldr	r3, [pc, #220]	@ (80013e0 <HAL_TIM_PeriodElapsedCallback+0x4d0>)
 8001302:	9301      	str	r3, [sp, #4]
 8001304:	4b35      	ldr	r3, [pc, #212]	@ (80013dc <HAL_TIM_PeriodElapsedCallback+0x4cc>)
 8001306:	9300      	str	r3, [sp, #0]
 8001308:	4b36      	ldr	r3, [pc, #216]	@ (80013e4 <HAL_TIM_PeriodElapsedCallback+0x4d4>)
 800130a:	4a37      	ldr	r2, [pc, #220]	@ (80013e8 <HAL_TIM_PeriodElapsedCallback+0x4d8>)
 800130c:	4932      	ldr	r1, [pc, #200]	@ (80013d8 <HAL_TIM_PeriodElapsedCallback+0x4c8>)
 800130e:	483e      	ldr	r0, [pc, #248]	@ (8001408 <HAL_TIM_PeriodElapsedCallback+0x4f8>)
 8001310:	f002 fadb 	bl	80038ca <addData>
 8001314:	4603      	mov	r3, r0
 8001316:	461a      	mov	r2, r3
 8001318:	4b3b      	ldr	r3, [pc, #236]	@ (8001408 <HAL_TIM_PeriodElapsedCallback+0x4f8>)
 800131a:	f8a3 2fae 	strh.w	r2, [r3, #4014]	@ 0xfae
				hsLog.addDatas+=1;
 800131e:	4b3a      	ldr	r3, [pc, #232]	@ (8001408 <HAL_TIM_PeriodElapsedCallback+0x4f8>)
 8001320:	f8d3 3fc0 	ldr.w	r3, [r3, #4032]	@ 0xfc0
 8001324:	3301      	adds	r3, #1
 8001326:	4a38      	ldr	r2, [pc, #224]	@ (8001408 <HAL_TIM_PeriodElapsedCallback+0x4f8>)
 8001328:	f8c2 3fc0 	str.w	r3, [r2, #4032]	@ 0xfc0
 800132c:	e01c      	b.n	8001368 <HAL_TIM_PeriodElapsedCallback+0x458>
			}else{
				switchBuffers(&hsLog);
 800132e:	4836      	ldr	r0, [pc, #216]	@ (8001408 <HAL_TIM_PeriodElapsedCallback+0x4f8>)
 8001330:	f002 f980 	bl	8003634 <switchBuffers>
				hsLog.bufferIndex  = 0;
 8001334:	4b34      	ldr	r3, [pc, #208]	@ (8001408 <HAL_TIM_PeriodElapsedCallback+0x4f8>)
 8001336:	2200      	movs	r2, #0
 8001338:	f8a3 2fae 	strh.w	r2, [r3, #4014]	@ 0xfae
				hsLog.bufferIndex = addData(&hsLog, &svpwm, &ps,&foc,&fr,&cg);
 800133c:	4b28      	ldr	r3, [pc, #160]	@ (80013e0 <HAL_TIM_PeriodElapsedCallback+0x4d0>)
 800133e:	9301      	str	r3, [sp, #4]
 8001340:	4b26      	ldr	r3, [pc, #152]	@ (80013dc <HAL_TIM_PeriodElapsedCallback+0x4cc>)
 8001342:	9300      	str	r3, [sp, #0]
 8001344:	4b27      	ldr	r3, [pc, #156]	@ (80013e4 <HAL_TIM_PeriodElapsedCallback+0x4d4>)
 8001346:	4a28      	ldr	r2, [pc, #160]	@ (80013e8 <HAL_TIM_PeriodElapsedCallback+0x4d8>)
 8001348:	4923      	ldr	r1, [pc, #140]	@ (80013d8 <HAL_TIM_PeriodElapsedCallback+0x4c8>)
 800134a:	482f      	ldr	r0, [pc, #188]	@ (8001408 <HAL_TIM_PeriodElapsedCallback+0x4f8>)
 800134c:	f002 fabd 	bl	80038ca <addData>
 8001350:	4603      	mov	r3, r0
 8001352:	461a      	mov	r2, r3
 8001354:	4b2c      	ldr	r3, [pc, #176]	@ (8001408 <HAL_TIM_PeriodElapsedCallback+0x4f8>)
 8001356:	f8a3 2fae 	strh.w	r2, [r3, #4014]	@ 0xfae
				hsLog.addDatas+=1;
 800135a:	4b2b      	ldr	r3, [pc, #172]	@ (8001408 <HAL_TIM_PeriodElapsedCallback+0x4f8>)
 800135c:	f8d3 3fc0 	ldr.w	r3, [r3, #4032]	@ 0xfc0
 8001360:	3301      	adds	r3, #1
 8001362:	4a29      	ldr	r2, [pc, #164]	@ (8001408 <HAL_TIM_PeriodElapsedCallback+0x4f8>)
 8001364:	f8c2 3fc0 	str.w	r3, [r2, #4032]	@ 0xfc0
			}
		}

		dt2 = SysTick->VAL - t0;
 8001368:	4b28      	ldr	r3, [pc, #160]	@ (800140c <HAL_TIM_PeriodElapsedCallback+0x4fc>)
 800136a:	689b      	ldr	r3, [r3, #8]
 800136c:	4a28      	ldr	r2, [pc, #160]	@ (8001410 <HAL_TIM_PeriodElapsedCallback+0x500>)
 800136e:	6812      	ldr	r2, [r2, #0]
 8001370:	1a9b      	subs	r3, r3, r2
 8001372:	461a      	mov	r2, r3
 8001374:	4b27      	ldr	r3, [pc, #156]	@ (8001414 <HAL_TIM_PeriodElapsedCallback+0x504>)
 8001376:	601a      	str	r2, [r3, #0]

	}//closes tim1if

	if (htim->Instance ==TIM6){ // 20ms Loop
 8001378:	687b      	ldr	r3, [r7, #4]
 800137a:	681b      	ldr	r3, [r3, #0]
 800137c:	4a26      	ldr	r2, [pc, #152]	@ (8001418 <HAL_TIM_PeriodElapsedCallback+0x508>)
 800137e:	4293      	cmp	r3, r2
 8001380:	d11b      	bne.n	80013ba <HAL_TIM_PeriodElapsedCallback+0x4aa>

		if (r.rampPhase != RAMP_WAIT){
 8001382:	4b26      	ldr	r3, [pc, #152]	@ (800141c <HAL_TIM_PeriodElapsedCallback+0x50c>)
 8001384:	7f1b      	ldrb	r3, [r3, #28]
 8001386:	2b04      	cmp	r3, #4
 8001388:	d009      	beq.n	800139e <HAL_TIM_PeriodElapsedCallback+0x48e>
			ExecRampDuty(&r);
 800138a:	4824      	ldr	r0, [pc, #144]	@ (800141c <HAL_TIM_PeriodElapsedCallback+0x50c>)
 800138c:	f003 f824 	bl	80043d8 <ExecRampDuty>
			if (r.rampPhase == RAMP_WAIT){
 8001390:	4b22      	ldr	r3, [pc, #136]	@ (800141c <HAL_TIM_PeriodElapsedCallback+0x50c>)
 8001392:	7f1b      	ldrb	r3, [r3, #28]
 8001394:	2b04      	cmp	r3, #4
 8001396:	d102      	bne.n	800139e <HAL_TIM_PeriodElapsedCallback+0x48e>
				turnOffPWMS = 1;
 8001398:	4b21      	ldr	r3, [pc, #132]	@ (8001420 <HAL_TIM_PeriodElapsedCallback+0x510>)
 800139a:	2201      	movs	r2, #1
 800139c:	701a      	strb	r2, [r3, #0]
			}
		}

		if (rampRPM.rampPhase != RAMP_WAIT){
 800139e:	4b15      	ldr	r3, [pc, #84]	@ (80013f4 <HAL_TIM_PeriodElapsedCallback+0x4e4>)
 80013a0:	7c1b      	ldrb	r3, [r3, #16]
 80013a2:	2b04      	cmp	r3, #4
 80013a4:	d009      	beq.n	80013ba <HAL_TIM_PeriodElapsedCallback+0x4aa>
			ExecRampRPM(&rampRPM);
 80013a6:	4813      	ldr	r0, [pc, #76]	@ (80013f4 <HAL_TIM_PeriodElapsedCallback+0x4e4>)
 80013a8:	f003 fa63 	bl	8004872 <ExecRampRPM>
			if (rampRPM.rampPhase == RAMP_WAIT){
 80013ac:	4b11      	ldr	r3, [pc, #68]	@ (80013f4 <HAL_TIM_PeriodElapsedCallback+0x4e4>)
 80013ae:	7c1b      	ldrb	r3, [r3, #16]
 80013b0:	2b04      	cmp	r3, #4
 80013b2:	d102      	bne.n	80013ba <HAL_TIM_PeriodElapsedCallback+0x4aa>
				turnOffPWMS = 1;
 80013b4:	4b1a      	ldr	r3, [pc, #104]	@ (8001420 <HAL_TIM_PeriodElapsedCallback+0x510>)
 80013b6:	2201      	movs	r2, #1
 80013b8:	701a      	strb	r2, [r3, #0]
			//sprintf(UART_buffer,"F:%06.2f,%06.2f,%06.2f,%06.2f,%06.2f,%06.2f,%06.2f,%06.2f,%06.2f:E\r\n",rampRPM.instTargetRPM_F,s.RPM,speedPID.error,foc.IqRef,foc.IdRef,foc.Iq,foc.Id,speedPID.KpTerm,speedPID.KiTerm);
			//HAL_UART_Transmit_IT(&huart3,(uint8_t *)UART_buffer,70);
		}*/
	}

	if (htim->Instance ==TIM7){ // 1ms Loop
 80013ba:	687b      	ldr	r3, [r7, #4]
 80013bc:	681b      	ldr	r3, [r3, #0]
 80013be:	4a19      	ldr	r2, [pc, #100]	@ (8001424 <HAL_TIM_PeriodElapsedCallback+0x514>)
 80013c0:	4293      	cmp	r3, r2
 80013c2:	d102      	bne.n	80013ca <HAL_TIM_PeriodElapsedCallback+0x4ba>
		 ExecPosTrajectory(&p);
 80013c4:	4818      	ldr	r0, [pc, #96]	@ (8001428 <HAL_TIM_PeriodElapsedCallback+0x518>)
 80013c6:	f002 fcbb 	bl	8003d40 <ExecPosTrajectory>
	}


}
 80013ca:	bf00      	nop
 80013cc:	3708      	adds	r7, #8
 80013ce:	46bd      	mov	sp, r7
 80013d0:	bd80      	pop	{r7, pc}
 80013d2:	bf00      	nop
 80013d4:	20000000 	.word	0x20000000
 80013d8:	200006e4 	.word	0x200006e4
 80013dc:	20001824 	.word	0x20001824
 80013e0:	20001838 	.word	0x20001838
 80013e4:	20000748 	.word	0x20000748
 80013e8:	200005f8 	.word	0x200005f8
 80013ec:	2000070c 	.word	0x2000070c
 80013f0:	3f860a92 	.word	0x3f860a92
 80013f4:	20000788 	.word	0x20000788
 80013f8:	43fa0000 	.word	0x43fa0000
 80013fc:	00000000 	.word	0x00000000
 8001400:	2000177c 	.word	0x2000177c
 8001404:	449c2000 	.word	0x449c2000
 8001408:	200007b8 	.word	0x200007b8
 800140c:	e000e010 	.word	0xe000e010
 8001410:	20001884 	.word	0x20001884
 8001414:	20001888 	.word	0x20001888
 8001418:	40001000 	.word	0x40001000
 800141c:	20000718 	.word	0x20000718
 8001420:	20001864 	.word	0x20001864
 8001424:	40001400 	.word	0x40001400
 8001428:	200017cc 	.word	0x200017cc

0800142c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800142c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800142e:	b08f      	sub	sp, #60	@ 0x3c
 8001430:	af0e      	add	r7, sp, #56	@ 0x38
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001432:	f003 fcbd 	bl	8004db0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001436:	f000 fb29 	bl	8001a8c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800143a:	f000 fd73 	bl	8001f24 <MX_GPIO_Init>
  MX_DMA_Init();
 800143e:	f000 fd47 	bl	8001ed0 <MX_DMA_Init>
  MX_SPI1_Init();
 8001442:	f000 fb81 	bl	8001b48 <MX_SPI1_Init>
  MX_TIM1_Init();
 8001446:	f000 fbbd 	bl	8001bc4 <MX_TIM1_Init>
  MX_CORDIC_Init();
 800144a:	f000 fb69 	bl	8001b20 <MX_CORDIC_Init>
  MX_TIM6_Init();
 800144e:	f000 fc83 	bl	8001d58 <MX_TIM6_Init>
  MX_TIM7_Init();
 8001452:	f000 fcb9 	bl	8001dc8 <MX_TIM7_Init>
  MX_USART2_UART_Init();
 8001456:	f000 fced 	bl	8001e34 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */

  HW_statesInit(&hw);
 800145a:	48b0      	ldr	r0, [pc, #704]	@ (800171c <main+0x2f0>)
 800145c:	f001 ff61 	bl	8003322 <HW_statesInit>
  hsLogInit(&hsLog);
 8001460:	48af      	ldr	r0, [pc, #700]	@ (8001720 <main+0x2f4>)
 8001462:	f002 f88d 	bl	8003580 <hsLogInit>
  /*This board has no external Eeprom. Till we add the code to use the
  internal flash as an eeprom, we have to keep seperate codes for the 45mm stack
  and the 30 mm stack motor*/

  //---45 mm Values ----//
  ms.encAvg_offset = 2431;//d axis, 3485 is q axis, 45mmstack -> Daxis 2431,qAxis 3485
 8001466:	4baf      	ldr	r3, [pc, #700]	@ (8001724 <main+0x2f8>)
 8001468:	f640 127f 	movw	r2, #2431	@ 0x97f
 800146c:	811a      	strh	r2, [r3, #8]
  ms.reversePhases = 0;
 800146e:	4bad      	ldr	r3, [pc, #692]	@ (8001724 <main+0x2f8>)
 8001470:	2200      	movs	r2, #0
 8001472:	729a      	strb	r2, [r3, #10]
  ms.encCW_offset = 0; //find these nos by watching where the current is lowest for say 1000 rpm in closed loop
 8001474:	4bab      	ldr	r3, [pc, #684]	@ (8001724 <main+0x2f8>)
 8001476:	f04f 0200 	mov.w	r2, #0
 800147a:	601a      	str	r2, [r3, #0]
  ms.encCCW_offset = -1.3;
 800147c:	4ba9      	ldr	r3, [pc, #676]	@ (8001724 <main+0x2f8>)
 800147e:	4aaa      	ldr	r2, [pc, #680]	@ (8001728 <main+0x2fc>)
 8001480:	605a      	str	r2, [r3, #4]
//  ms.encAvg_offset = 3706;
//  ms.reversePhases = 1;
//  ms.encCW_offset = 0; //find these nos by watching where the current is lowest for say 1000 rpm in closed loop
//  ms.encCCW_offset = -1.3;

  setupOK = Encoder_setup(); //setup ABI mode without PWM
 8001482:	f001 fca9 	bl	8002dd8 <Encoder_setup>
 8001486:	4603      	mov	r3, r0
 8001488:	461a      	mov	r2, r3
 800148a:	4ba8      	ldr	r3, [pc, #672]	@ (800172c <main+0x300>)
 800148c:	701a      	strb	r2, [r3, #0]
  encZeroPosSetup = Encoder_updateZeroPosition(ms.encAvg_offset);
 800148e:	4ba5      	ldr	r3, [pc, #660]	@ (8001724 <main+0x2f8>)
 8001490:	891b      	ldrh	r3, [r3, #8]
 8001492:	4618      	mov	r0, r3
 8001494:	f001 fcbf 	bl	8002e16 <Encoder_updateZeroPosition>
 8001498:	4603      	mov	r3, r0
 800149a:	461a      	mov	r2, r3
 800149c:	4ba4      	ldr	r3, [pc, #656]	@ (8001730 <main+0x304>)
 800149e:	701a      	strb	r2, [r3, #0]
  errorSetupOK = Encoder_enableMagErrors();
 80014a0:	f001 fcdb 	bl	8002e5a <Encoder_enableMagErrors>
 80014a4:	4603      	mov	r3, r0
 80014a6:	461a      	mov	r2, r3
 80014a8:	4ba2      	ldr	r3, [pc, #648]	@ (8001734 <main+0x308>)
 80014aa:	701a      	strb	r2, [r3, #0]
  Cordic_setup(hcordic,sCordicConfig);
 80014ac:	4ea2      	ldr	r6, [pc, #648]	@ (8001738 <main+0x30c>)
 80014ae:	4ba3      	ldr	r3, [pc, #652]	@ (800173c <main+0x310>)
 80014b0:	ac06      	add	r4, sp, #24
 80014b2:	461d      	mov	r5, r3
 80014b4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80014b6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80014b8:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80014bc:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 80014c0:	466d      	mov	r5, sp
 80014c2:	f106 0410 	add.w	r4, r6, #16
 80014c6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80014c8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80014ca:	e894 0003 	ldmia.w	r4, {r0, r1}
 80014ce:	e885 0003 	stmia.w	r5, {r0, r1}
 80014d2:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 80014d6:	f001 fb79 	bl	8002bcc <Cordic_setup>

  //position trajectory setup
  Init_ConstJerk_PosControl(&p);
 80014da:	4899      	ldr	r0, [pc, #612]	@ (8001740 <main+0x314>)
 80014dc:	f002 fb08 	bl	8003af0 <Init_ConstJerk_PosControl>
  Reset_posControlJC(&p);
 80014e0:	4897      	ldr	r0, [pc, #604]	@ (8001740 <main+0x314>)
 80014e2:	f002 fb1f 	bl	8003b24 <Reset_posControlJC>

  r.rampPhase = RAMP_WAIT;
 80014e6:	4b97      	ldr	r3, [pc, #604]	@ (8001744 <main+0x318>)
 80014e8:	2204      	movs	r2, #4
 80014ea:	771a      	strb	r2, [r3, #28]
  rampRPM.rampPhase = RAMP_WAIT;
 80014ec:	4b96      	ldr	r3, [pc, #600]	@ (8001748 <main+0x31c>)
 80014ee:	2204      	movs	r2, #4
 80014f0:	741a      	strb	r2, [r3, #16]

  // plotted and found Kp ki constant values with dbgTorque..
  Init_PID_Terms(&speedPID,3.0f,0.4f,0.0f,0.05f);
 80014f2:	eddf 1a96 	vldr	s3, [pc, #600]	@ 800174c <main+0x320>
 80014f6:	ed9f 1a96 	vldr	s2, [pc, #600]	@ 8001750 <main+0x324>
 80014fa:	eddf 0a96 	vldr	s1, [pc, #600]	@ 8001754 <main+0x328>
 80014fe:	eeb0 0a08 	vmov.f32	s0, #8	@ 0x40400000  3.0
 8001502:	4895      	ldr	r0, [pc, #596]	@ (8001758 <main+0x32c>)
 8001504:	f001 ffa4 	bl	8003450 <Init_PID_Terms>
  Init_PID_Terms(&posPID,0.01f,0.00f,0.20f,0.0f);
 8001508:	eddf 1a91 	vldr	s3, [pc, #580]	@ 8001750 <main+0x324>
 800150c:	ed9f 1a93 	vldr	s2, [pc, #588]	@ 800175c <main+0x330>
 8001510:	eddf 0a8f 	vldr	s1, [pc, #572]	@ 8001750 <main+0x324>
 8001514:	ed9f 0a92 	vldr	s0, [pc, #584]	@ 8001760 <main+0x334>
 8001518:	4892      	ldr	r0, [pc, #584]	@ (8001764 <main+0x338>)
 800151a:	f001 ff99 	bl	8003450 <Init_PID_Terms>

  //only start the timer after youve done calibration properly, cos your reading the ADC in the timer also.
  HAL_TIM_Base_Start_IT(&htim1);
 800151e:	4892      	ldr	r0, [pc, #584]	@ (8001768 <main+0x33c>)
 8001520:	f005 ffb4 	bl	800748c <HAL_TIM_Base_Start_IT>
  htim1.Instance->RCR = 1; // If its after the counter has started, interrupt is on the OVF,
 8001524:	4b90      	ldr	r3, [pc, #576]	@ (8001768 <main+0x33c>)
 8001526:	681b      	ldr	r3, [r3, #0]
 8001528:	2201      	movs	r2, #1
 800152a:	631a      	str	r2, [r3, #48]	@ 0x30

  HAL_TIM_Base_Start_IT(&htim6); // 20 ms interrupt
 800152c:	488f      	ldr	r0, [pc, #572]	@ (800176c <main+0x340>)
 800152e:	f005 ffad 	bl	800748c <HAL_TIM_Base_Start_IT>
 // HAL_TIM_Base_Start_IT(&htim7); // 1 ms interrupt
  //first values of the position sensor are noisy. so start reading it here, wait
  //for a while and then turn it off
  readPosition = 1;
 8001532:	4b8f      	ldr	r3, [pc, #572]	@ (8001770 <main+0x344>)
 8001534:	2201      	movs	r2, #1
 8001536:	701a      	strb	r2, [r3, #0]
  HAL_Delay(10);
 8001538:	200a      	movs	r0, #10
 800153a:	f003 fca9 	bl	8004e90 <HAL_Delay>
  readPosition = 0;
 800153e:	4b8c      	ldr	r3, [pc, #560]	@ (8001770 <main+0x344>)
 8001540:	2200      	movs	r2, #0
 8001542:	701a      	strb	r2, [r3, #0]


  setMaxFrictionPWM(&fr,frictionMaxPWM);
 8001544:	4b8b      	ldr	r3, [pc, #556]	@ (8001774 <main+0x348>)
 8001546:	881b      	ldrh	r3, [r3, #0]
 8001548:	4619      	mov	r1, r3
 800154a:	488b      	ldr	r0, [pc, #556]	@ (8001778 <main+0x34c>)
 800154c:	f001 fa9a 	bl	8002a84 <setMaxFrictionPWM>
  setMaxCoggingPWM(&cg,coggingMaxPWM);
 8001550:	4b8a      	ldr	r3, [pc, #552]	@ (800177c <main+0x350>)
 8001552:	881b      	ldrh	r3, [r3, #0]
 8001554:	4619      	mov	r1, r3
 8001556:	488a      	ldr	r0, [pc, #552]	@ (8001780 <main+0x354>)
 8001558:	f001 fade 	bl	8002b18 <setMaxCoggingPWM>
  fr.frictionCompensationOn = 0;
 800155c:	4b86      	ldr	r3, [pc, #536]	@ (8001778 <main+0x34c>)
 800155e:	2200      	movs	r2, #0
 8001560:	701a      	strb	r2, [r3, #0]
  cg.coggingCompensationOn = 0;
 8001562:	4b87      	ldr	r3, [pc, #540]	@ (8001780 <main+0x354>)
 8001564:	2200      	movs	r2, #0
 8001566:	701a      	strb	r2, [r3, #0]
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {

	  if (turnOffPWMS){
 8001568:	4b86      	ldr	r3, [pc, #536]	@ (8001784 <main+0x358>)
 800156a:	f993 3000 	ldrsb.w	r3, [r3]
 800156e:	2b00      	cmp	r3, #0
 8001570:	d005      	beq.n	800157e <main+0x152>
		  StopAllPWM(&hw);
 8001572:	486a      	ldr	r0, [pc, #424]	@ (800171c <main+0x2f0>)
 8001574:	f001 ff18 	bl	80033a8 <StopAllPWM>
		  turnOffPWMS = 0;
 8001578:	4b82      	ldr	r3, [pc, #520]	@ (8001784 <main+0x358>)
 800157a:	2200      	movs	r2, #0
 800157c:	701a      	strb	r2, [r3, #0]
	  }

	  if (turnOff_sensors){
 800157e:	4b82      	ldr	r3, [pc, #520]	@ (8001788 <main+0x35c>)
 8001580:	f993 3000 	ldrsb.w	r3, [r3]
 8001584:	2b00      	cmp	r3, #0
 8001586:	d008      	beq.n	800159a <main+0x16e>
		  readPosition = 0;
 8001588:	4b79      	ldr	r3, [pc, #484]	@ (8001770 <main+0x344>)
 800158a:	2200      	movs	r2, #0
 800158c:	701a      	strb	r2, [r3, #0]
		  turnOff_sensors = 0;
 800158e:	4b7e      	ldr	r3, [pc, #504]	@ (8001788 <main+0x35c>)
 8001590:	2200      	movs	r2, #0
 8001592:	701a      	strb	r2, [r3, #0]
		  turnOffPWMS = 1;
 8001594:	4b7b      	ldr	r3, [pc, #492]	@ (8001784 <main+0x358>)
 8001596:	2201      	movs	r2, #1
 8001598:	701a      	strb	r2, [r3, #0]
	  }

	  if (setupPosJC){
 800159a:	4b7c      	ldr	r3, [pc, #496]	@ (800178c <main+0x360>)
 800159c:	781b      	ldrb	r3, [r3, #0]
 800159e:	2b00      	cmp	r3, #0
 80015a0:	d012      	beq.n	80015c8 <main+0x19c>
		  Reset_posControlJC(&p);
 80015a2:	4867      	ldr	r0, [pc, #412]	@ (8001740 <main+0x314>)
 80015a4:	f002 fabe 	bl	8003b24 <Reset_posControlJC>
		  Setup_posControlJC(&p,pos_targetThetaDeg,pos_targetTime_ms);
 80015a8:	4b79      	ldr	r3, [pc, #484]	@ (8001790 <main+0x364>)
 80015aa:	edd3 7a00 	vldr	s15, [r3]
 80015ae:	4b79      	ldr	r3, [pc, #484]	@ (8001794 <main+0x368>)
 80015b0:	ed93 7a00 	vldr	s14, [r3]
 80015b4:	eef0 0a47 	vmov.f32	s1, s14
 80015b8:	eeb0 0a67 	vmov.f32	s0, s15
 80015bc:	4860      	ldr	r0, [pc, #384]	@ (8001740 <main+0x314>)
 80015be:	f002 fb07 	bl	8003bd0 <Setup_posControlJC>
		  setupPosJC = 0;
 80015c2:	4b72      	ldr	r3, [pc, #456]	@ (800178c <main+0x360>)
 80015c4:	2200      	movs	r2, #0
 80015c6:	701a      	strb	r2, [r3, #0]
	  }

	  if (startPosC){
 80015c8:	4b73      	ldr	r3, [pc, #460]	@ (8001798 <main+0x36c>)
 80015ca:	781b      	ldrb	r3, [r3, #0]
 80015cc:	2b00      	cmp	r3, #0
 80015ce:	d006      	beq.n	80015de <main+0x1b2>
		  p.state = POS_RUNNING;
 80015d0:	4b5b      	ldr	r3, [pc, #364]	@ (8001740 <main+0x314>)
 80015d2:	2201      	movs	r2, #1
 80015d4:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
		  startPosC = 0;
 80015d8:	4b6f      	ldr	r3, [pc, #444]	@ (8001798 <main+0x36c>)
 80015da:	2200      	movs	r2, #0
 80015dc:	701a      	strb	r2, [r3, #0]
	  }
	  if (stopPosC){
 80015de:	4b6f      	ldr	r3, [pc, #444]	@ (800179c <main+0x370>)
 80015e0:	781b      	ldrb	r3, [r3, #0]
 80015e2:	2b00      	cmp	r3, #0
 80015e4:	d006      	beq.n	80015f4 <main+0x1c8>
		  p.state = POS_OVER;
 80015e6:	4b56      	ldr	r3, [pc, #344]	@ (8001740 <main+0x314>)
 80015e8:	2202      	movs	r2, #2
 80015ea:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
		  //Reset_posControlJC(&p);
		  stopPosC = 0;
 80015ee:	4b6b      	ldr	r3, [pc, #428]	@ (800179c <main+0x370>)
 80015f0:	2200      	movs	r2, #0
 80015f2:	701a      	strb	r2, [r3, #0]
	  }

	  if (setupFrictionAddition){
 80015f4:	4b6a      	ldr	r3, [pc, #424]	@ (80017a0 <main+0x374>)
 80015f6:	781b      	ldrb	r3, [r3, #0]
 80015f8:	2b00      	cmp	r3, #0
 80015fa:	d008      	beq.n	800160e <main+0x1e2>
		  setMaxFrictionPWM(&fr,frictionMaxPWM);
 80015fc:	4b5d      	ldr	r3, [pc, #372]	@ (8001774 <main+0x348>)
 80015fe:	881b      	ldrh	r3, [r3, #0]
 8001600:	4619      	mov	r1, r3
 8001602:	485d      	ldr	r0, [pc, #372]	@ (8001778 <main+0x34c>)
 8001604:	f001 fa3e 	bl	8002a84 <setMaxFrictionPWM>
		  setupFrictionAddition = 0;
 8001608:	4b65      	ldr	r3, [pc, #404]	@ (80017a0 <main+0x374>)
 800160a:	2200      	movs	r2, #0
 800160c:	701a      	strb	r2, [r3, #0]
	  }

	  if (setupCoggingAddition){
 800160e:	4b65      	ldr	r3, [pc, #404]	@ (80017a4 <main+0x378>)
 8001610:	781b      	ldrb	r3, [r3, #0]
 8001612:	2b00      	cmp	r3, #0
 8001614:	d008      	beq.n	8001628 <main+0x1fc>
		  setMaxCoggingPWM(&cg,coggingMaxPWM);
 8001616:	4b59      	ldr	r3, [pc, #356]	@ (800177c <main+0x350>)
 8001618:	881b      	ldrh	r3, [r3, #0]
 800161a:	4619      	mov	r1, r3
 800161c:	4858      	ldr	r0, [pc, #352]	@ (8001780 <main+0x354>)
 800161e:	f001 fa7b 	bl	8002b18 <setMaxCoggingPWM>
		  setupCoggingAddition = 0;
 8001622:	4b60      	ldr	r3, [pc, #384]	@ (80017a4 <main+0x378>)
 8001624:	2200      	movs	r2, #0
 8001626:	701a      	strb	r2, [r3, #0]
	  }
	  /*RMF control!
	  change d_elec Radians. MAke negative to change direction.
	  start with a value of 0.005 and slowly increase or decrease.
	  V.IMP -> motor has to rotate clockwise if d_elec is positive*/
	  if (OL_init){ // do with a position Loop
 8001628:	4b5f      	ldr	r3, [pc, #380]	@ (80017a8 <main+0x37c>)
 800162a:	781b      	ldrb	r3, [r3, #0]
 800162c:	2b00      	cmp	r3, #0
 800162e:	d014      	beq.n	800165a <main+0x22e>
		  //turn on the PWMS
		  readPosition = 1;
 8001630:	4b4f      	ldr	r3, [pc, #316]	@ (8001770 <main+0x344>)
 8001632:	2201      	movs	r2, #1
 8001634:	701a      	strb	r2, [r3, #0]
		  d_elecRadians = 0.005;
 8001636:	4b5d      	ldr	r3, [pc, #372]	@ (80017ac <main+0x380>)
 8001638:	4a5d      	ldr	r2, [pc, #372]	@ (80017b0 <main+0x384>)
 800163a:	601a      	str	r2, [r3, #0]
		  r.currentDutyF = 80;
 800163c:	4b41      	ldr	r3, [pc, #260]	@ (8001744 <main+0x318>)
 800163e:	4a5d      	ldr	r2, [pc, #372]	@ (80017b4 <main+0x388>)
 8001640:	605a      	str	r2, [r3, #4]
		  //turn on the PWMS
		  ZeroAllCCRs(&svpwm);
 8001642:	485d      	ldr	r0, [pc, #372]	@ (80017b8 <main+0x38c>)
 8001644:	f001 fe5a 	bl	80032fc <ZeroAllCCRs>
		  StartAllPWM(&hw);
 8001648:	4834      	ldr	r0, [pc, #208]	@ (800171c <main+0x2f0>)
 800164a:	f001 fe77 	bl	800333c <StartAllPWM>
		  runOL = 1;
 800164e:	4b5b      	ldr	r3, [pc, #364]	@ (80017bc <main+0x390>)
 8001650:	2201      	movs	r2, #1
 8001652:	701a      	strb	r2, [r3, #0]
		  OL_init = 0;
 8001654:	4b54      	ldr	r3, [pc, #336]	@ (80017a8 <main+0x37c>)
 8001656:	2200      	movs	r2, #0
 8001658:	701a      	strb	r2, [r3, #0]
	  }

	  if (OL_stop){
 800165a:	4b59      	ldr	r3, [pc, #356]	@ (80017c0 <main+0x394>)
 800165c:	781b      	ldrb	r3, [r3, #0]
 800165e:	2b00      	cmp	r3, #0
 8001660:	d00b      	beq.n	800167a <main+0x24e>
		  runOL = 0;
 8001662:	4b56      	ldr	r3, [pc, #344]	@ (80017bc <main+0x390>)
 8001664:	2200      	movs	r2, #0
 8001666:	701a      	strb	r2, [r3, #0]
		  StopAllPWM(&hw);
 8001668:	482c      	ldr	r0, [pc, #176]	@ (800171c <main+0x2f0>)
 800166a:	f001 fe9d 	bl	80033a8 <StopAllPWM>
		  turnOff_sensors =1;
 800166e:	4b46      	ldr	r3, [pc, #280]	@ (8001788 <main+0x35c>)
 8001670:	2201      	movs	r2, #1
 8001672:	701a      	strb	r2, [r3, #0]
		  OL_stop = 0;
 8001674:	4b52      	ldr	r3, [pc, #328]	@ (80017c0 <main+0x394>)
 8001676:	2200      	movs	r2, #0
 8001678:	701a      	strb	r2, [r3, #0]
	  }


	  /*---------------*/
	  //RUN with some DUTY CYCLE
	  if (dbg_rampDuty_RUStart){
 800167a:	4b52      	ldr	r3, [pc, #328]	@ (80017c4 <main+0x398>)
 800167c:	781b      	ldrb	r3, [r3, #0]
 800167e:	2b00      	cmp	r3, #0
 8001680:	d01a      	beq.n	80016b8 <main+0x28c>
		readPosition = 1;
 8001682:	4b3b      	ldr	r3, [pc, #236]	@ (8001770 <main+0x344>)
 8001684:	2201      	movs	r2, #1
 8001686:	701a      	strb	r2, [r3, #0]
		//direction = CW ; not set here so u can change direction in debug mode. 1 or -1 ONLY!!
		//fill up the Ramp Duty Struct- TargetRPRm,rampUp Time, rampDownTime, and steadY state runTime
		InitRampDutyStruct(&r,targetDuty,5000,5000,300);
 8001688:	4b4f      	ldr	r3, [pc, #316]	@ (80017c8 <main+0x39c>)
 800168a:	8819      	ldrh	r1, [r3, #0]
 800168c:	f44f 7396 	mov.w	r3, #300	@ 0x12c
 8001690:	9300      	str	r3, [sp, #0]
 8001692:	f241 3388 	movw	r3, #5000	@ 0x1388
 8001696:	f241 3288 	movw	r2, #5000	@ 0x1388
 800169a:	482a      	ldr	r0, [pc, #168]	@ (8001744 <main+0x318>)
 800169c:	f002 fdde 	bl	800425c <InitRampDutyStruct>
		StartRampDuty(&r);
 80016a0:	4828      	ldr	r0, [pc, #160]	@ (8001744 <main+0x318>)
 80016a2:	f002 fe63 	bl	800436c <StartRampDuty>
		//turn on the PWMS
		ZeroAllCCRs(&svpwm);
 80016a6:	4844      	ldr	r0, [pc, #272]	@ (80017b8 <main+0x38c>)
 80016a8:	f001 fe28 	bl	80032fc <ZeroAllCCRs>
		StartAllPWM(&hw);
 80016ac:	481b      	ldr	r0, [pc, #108]	@ (800171c <main+0x2f0>)
 80016ae:	f001 fe45 	bl	800333c <StartAllPWM>
		dbg_rampDuty_RUStart = 0;
 80016b2:	4b44      	ldr	r3, [pc, #272]	@ (80017c4 <main+0x398>)
 80016b4:	2200      	movs	r2, #0
 80016b6:	701a      	strb	r2, [r3, #0]
	  }

	  if (dbg_rampDuty_RDStart){
 80016b8:	4b44      	ldr	r3, [pc, #272]	@ (80017cc <main+0x3a0>)
 80016ba:	781b      	ldrb	r3, [r3, #0]
 80016bc:	2b00      	cmp	r3, #0
 80016be:	d005      	beq.n	80016cc <main+0x2a0>
		  StartRampDownDuty(&r);
 80016c0:	4820      	ldr	r0, [pc, #128]	@ (8001744 <main+0x318>)
 80016c2:	f002 fe60 	bl	8004386 <StartRampDownDuty>
		  dbg_rampDuty_RDStart= 0;
 80016c6:	4b41      	ldr	r3, [pc, #260]	@ (80017cc <main+0x3a0>)
 80016c8:	2200      	movs	r2, #0
 80016ca:	701a      	strb	r2, [r3, #0]
		  // change this later to keep track of where rpm becomes zero,
		  // and there make swithc of the PWMs
	  }

	  //Set transition Target and Transition Time in RM
	  if(dbg_rampDuty_ChangeDuty){
 80016cc:	4b40      	ldr	r3, [pc, #256]	@ (80017d0 <main+0x3a4>)
 80016ce:	781b      	ldrb	r3, [r3, #0]
 80016d0:	2b00      	cmp	r3, #0
 80016d2:	d00e      	beq.n	80016f2 <main+0x2c6>
		  ChangeDuty(&r);
 80016d4:	481b      	ldr	r0, [pc, #108]	@ (8001744 <main+0x318>)
 80016d6:	f002 ff73 	bl	80045c0 <ChangeDuty>
		  Recalculate_RampDuty_RampRates(&r,r.transitionTarget);
 80016da:	4b1a      	ldr	r3, [pc, #104]	@ (8001744 <main+0x318>)
 80016dc:	8bdb      	ldrh	r3, [r3, #30]
 80016de:	4619      	mov	r1, r3
 80016e0:	4818      	ldr	r0, [pc, #96]	@ (8001744 <main+0x318>)
 80016e2:	f002 ffbf 	bl	8004664 <Recalculate_RampDuty_RampRates>
		  r.rampPhase = RAMP_CHANGE;
 80016e6:	4b17      	ldr	r3, [pc, #92]	@ (8001744 <main+0x318>)
 80016e8:	2208      	movs	r2, #8
 80016ea:	771a      	strb	r2, [r3, #28]
		  dbg_rampDuty_ChangeDuty = 0;
 80016ec:	4b38      	ldr	r3, [pc, #224]	@ (80017d0 <main+0x3a4>)
 80016ee:	2200      	movs	r2, #0
 80016f0:	701a      	strb	r2, [r3, #0]
	  }

	  if (dbg_rampDuty_Stop){
 80016f2:	4b38      	ldr	r3, [pc, #224]	@ (80017d4 <main+0x3a8>)
 80016f4:	781b      	ldrb	r3, [r3, #0]
 80016f6:	2b00      	cmp	r3, #0
 80016f8:	d008      	beq.n	800170c <main+0x2e0>
		  // we need to stop the six sector Obj, and then stop the Ramp
		  StopAllPWM(&hw);
 80016fa:	4808      	ldr	r0, [pc, #32]	@ (800171c <main+0x2f0>)
 80016fc:	f001 fe54 	bl	80033a8 <StopAllPWM>
		  StopRampDuty(&r);
 8001700:	4810      	ldr	r0, [pc, #64]	@ (8001744 <main+0x318>)
 8001702:	f002 fe51 	bl	80043a8 <StopRampDuty>
		  dbg_rampDuty_Stop =0;
 8001706:	4b33      	ldr	r3, [pc, #204]	@ (80017d4 <main+0x3a8>)
 8001708:	2200      	movs	r2, #0
 800170a:	701a      	strb	r2, [r3, #0]
	  }

	  /*------------------------------------------*/
	  //run with RPM
	  if (dbg_rampRPM_RUStart){
 800170c:	4b32      	ldr	r3, [pc, #200]	@ (80017d8 <main+0x3ac>)
 800170e:	781b      	ldrb	r3, [r3, #0]
 8001710:	2b00      	cmp	r3, #0
 8001712:	f000 8083 	beq.w	800181c <main+0x3f0>
		//fill up the Ramp Duty Struct- TargetRPRm,rampUp Time, rampDownTime, and steadY state runTime
		InitRampRPMStruct(&rampRPM,targetRPM,10.0,12.0,300.0);
 8001716:	4b31      	ldr	r3, [pc, #196]	@ (80017dc <main+0x3b0>)
 8001718:	881b      	ldrh	r3, [r3, #0]
 800171a:	e063      	b.n	80017e4 <main+0x3b8>
 800171c:	20000708 	.word	0x20000708
 8001720:	200007b8 	.word	0x200007b8
 8001724:	2000070c 	.word	0x2000070c
 8001728:	bfa66666 	.word	0xbfa66666
 800172c:	20001850 	.word	0x20001850
 8001730:	20001852 	.word	0x20001852
 8001734:	20001851 	.word	0x20001851
 8001738:	20000378 	.word	0x20000378
 800173c:	200005dc 	.word	0x200005dc
 8001740:	200017cc 	.word	0x200017cc
 8001744:	20000718 	.word	0x20000718
 8001748:	20000788 	.word	0x20000788
 800174c:	3d4ccccd 	.word	0x3d4ccccd
 8001750:	00000000 	.word	0x00000000
 8001754:	3ecccccd 	.word	0x3ecccccd
 8001758:	2000177c 	.word	0x2000177c
 800175c:	3e4ccccd 	.word	0x3e4ccccd
 8001760:	3c23d70a 	.word	0x3c23d70a
 8001764:	200017a4 	.word	0x200017a4
 8001768:	20000404 	.word	0x20000404
 800176c:	20000450 	.word	0x20000450
 8001770:	20001865 	.word	0x20001865
 8001774:	20000002 	.word	0x20000002
 8001778:	20001824 	.word	0x20001824
 800177c:	20000004 	.word	0x20000004
 8001780:	20001838 	.word	0x20001838
 8001784:	20001864 	.word	0x20001864
 8001788:	20001866 	.word	0x20001866
 800178c:	20001873 	.word	0x20001873
 8001790:	20001878 	.word	0x20001878
 8001794:	2000187c 	.word	0x2000187c
 8001798:	20001874 	.word	0x20001874
 800179c:	20001875 	.word	0x20001875
 80017a0:	2000189c 	.word	0x2000189c
 80017a4:	2000189d 	.word	0x2000189d
 80017a8:	20001871 	.word	0x20001871
 80017ac:	2000186c 	.word	0x2000186c
 80017b0:	3ba3d70a 	.word	0x3ba3d70a
 80017b4:	42a00000 	.word	0x42a00000
 80017b8:	200006e4 	.word	0x200006e4
 80017bc:	20001870 	.word	0x20001870
 80017c0:	20001872 	.word	0x20001872
 80017c4:	20001853 	.word	0x20001853
 80017c8:	20001860 	.word	0x20001860
 80017cc:	20001854 	.word	0x20001854
 80017d0:	20001855 	.word	0x20001855
 80017d4:	20001856 	.word	0x20001856
 80017d8:	20001857 	.word	0x20001857
 80017dc:	20001862 	.word	0x20001862
 80017e0:	43960000 	.word	0x43960000
 80017e4:	ed1f 1a02 	vldr	s2, [pc, #-8]	@ 80017e0 <main+0x3b4>
 80017e8:	eef2 0a08 	vmov.f32	s1, #40	@ 0x41400000  12.0
 80017ec:	eeb2 0a04 	vmov.f32	s0, #36	@ 0x41200000  10.0
 80017f0:	4619      	mov	r1, r3
 80017f2:	488c      	ldr	r0, [pc, #560]	@ (8001a24 <main+0x5f8>)
 80017f4:	f002 ff96 	bl	8004724 <InitRampRPMStruct>
		readPosition = 1;
 80017f8:	4b8b      	ldr	r3, [pc, #556]	@ (8001a28 <main+0x5fc>)
 80017fa:	2201      	movs	r2, #1
 80017fc:	701a      	strb	r2, [r3, #0]
		Zero_PID_Terms(&speedPID);
 80017fe:	488b      	ldr	r0, [pc, #556]	@ (8001a2c <main+0x600>)
 8001800:	f001 fe0c 	bl	800341c <Zero_PID_Terms>
		StartRampRPM(&rampRPM); 		// we need to start the Ramp
 8001804:	4887      	ldr	r0, [pc, #540]	@ (8001a24 <main+0x5f8>)
 8001806:	f003 f80d 	bl	8004824 <StartRampRPM>
		ZeroAllCCRs(&svpwm);
 800180a:	4889      	ldr	r0, [pc, #548]	@ (8001a30 <main+0x604>)
 800180c:	f001 fd76 	bl	80032fc <ZeroAllCCRs>
		StartAllPWM(&hw); 		//turn on the PWMS
 8001810:	4888      	ldr	r0, [pc, #544]	@ (8001a34 <main+0x608>)
 8001812:	f001 fd93 	bl	800333c <StartAllPWM>
		//need to reset the timer to allow for calculation of Time to take place
		dbg_rampRPM_RUStart = 0;
 8001816:	4b88      	ldr	r3, [pc, #544]	@ (8001a38 <main+0x60c>)
 8001818:	2200      	movs	r2, #0
 800181a:	701a      	strb	r2, [r3, #0]
	  }

	  if (dbg_rampRPM_RDStart){
 800181c:	4b87      	ldr	r3, [pc, #540]	@ (8001a3c <main+0x610>)
 800181e:	781b      	ldrb	r3, [r3, #0]
 8001820:	2b00      	cmp	r3, #0
 8001822:	d005      	beq.n	8001830 <main+0x404>
		  StartRampDownRPM(&rampRPM);
 8001824:	487f      	ldr	r0, [pc, #508]	@ (8001a24 <main+0x5f8>)
 8001826:	f003 f80a 	bl	800483e <StartRampDownRPM>
		  dbg_rampRPM_RDStart= 0;
 800182a:	4b84      	ldr	r3, [pc, #528]	@ (8001a3c <main+0x610>)
 800182c:	2200      	movs	r2, #0
 800182e:	701a      	strb	r2, [r3, #0]
	  }

	  //Set transition Target and Transition Time in RM
	  if(dbg_rampRPM_ChangeRPM){
 8001830:	4b83      	ldr	r3, [pc, #524]	@ (8001a40 <main+0x614>)
 8001832:	781b      	ldrb	r3, [r3, #0]
 8001834:	2b00      	cmp	r3, #0
 8001836:	d019      	beq.n	800186c <main+0x440>
		  ChangeRPM(&rampRPM,RPM_transitionTarget,RPM_transitionTime);
 8001838:	4b82      	ldr	r3, [pc, #520]	@ (8001a44 <main+0x618>)
 800183a:	881b      	ldrh	r3, [r3, #0]
 800183c:	4a82      	ldr	r2, [pc, #520]	@ (8001a48 <main+0x61c>)
 800183e:	8812      	ldrh	r2, [r2, #0]
 8001840:	ee07 2a90 	vmov	s15, r2
 8001844:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001848:	eeb0 0a67 	vmov.f32	s0, s15
 800184c:	4619      	mov	r1, r3
 800184e:	4875      	ldr	r0, [pc, #468]	@ (8001a24 <main+0x5f8>)
 8001850:	f003 f92a 	bl	8004aa8 <ChangeRPM>
		  Recalculate_RampRPM_RampRates(&rampRPM,RPM_transitionTarget);
 8001854:	4b7b      	ldr	r3, [pc, #492]	@ (8001a44 <main+0x618>)
 8001856:	881b      	ldrh	r3, [r3, #0]
 8001858:	4619      	mov	r1, r3
 800185a:	4872      	ldr	r0, [pc, #456]	@ (8001a24 <main+0x5f8>)
 800185c:	f003 f9a1 	bl	8004ba2 <Recalculate_RampRPM_RampRates>
		  rampRPM.rampPhase = RAMP_CHANGE;
 8001860:	4b70      	ldr	r3, [pc, #448]	@ (8001a24 <main+0x5f8>)
 8001862:	2208      	movs	r2, #8
 8001864:	741a      	strb	r2, [r3, #16]
		  dbg_rampRPM_ChangeRPM = 0;
 8001866:	4b76      	ldr	r3, [pc, #472]	@ (8001a40 <main+0x614>)
 8001868:	2200      	movs	r2, #0
 800186a:	701a      	strb	r2, [r3, #0]
	  }

	  //STOP CLOSED LOOP
	  if (dbg_rampRPM_Stop){
 800186c:	4b77      	ldr	r3, [pc, #476]	@ (8001a4c <main+0x620>)
 800186e:	781b      	ldrb	r3, [r3, #0]
 8001870:	2b00      	cmp	r3, #0
 8001872:	d008      	beq.n	8001886 <main+0x45a>
		  StopAllPWM(&hw);
 8001874:	486f      	ldr	r0, [pc, #444]	@ (8001a34 <main+0x608>)
 8001876:	f001 fd97 	bl	80033a8 <StopAllPWM>
		  StopRampRPM(&rampRPM);
 800187a:	486a      	ldr	r0, [pc, #424]	@ (8001a24 <main+0x5f8>)
 800187c:	f002 ffec 	bl	8004858 <StopRampRPM>
		  dbg_rampRPM_Stop =0;
 8001880:	4b72      	ldr	r3, [pc, #456]	@ (8001a4c <main+0x620>)
 8001882:	2200      	movs	r2, #0
 8001884:	701a      	strb	r2, [r3, #0]
	  }

	  /*--------------------------------------------------*/

	  if(checkUartDmA){
 8001886:	4b72      	ldr	r3, [pc, #456]	@ (8001a50 <main+0x624>)
 8001888:	781b      	ldrb	r3, [r3, #0]
 800188a:	2b00      	cmp	r3, #0
 800188c:	d007      	beq.n	800189e <main+0x472>
		  HAL_UART_Transmit_DMA(&huart2,(uint8_t *)"is this Working????\r\n",22);
 800188e:	2216      	movs	r2, #22
 8001890:	4970      	ldr	r1, [pc, #448]	@ (8001a54 <main+0x628>)
 8001892:	4871      	ldr	r0, [pc, #452]	@ (8001a58 <main+0x62c>)
 8001894:	f007 fb12 	bl	8008ebc <HAL_UART_Transmit_DMA>
		  checkUartDmA = 0;
 8001898:	4b6d      	ldr	r3, [pc, #436]	@ (8001a50 <main+0x624>)
 800189a:	2200      	movs	r2, #0
 800189c:	701a      	strb	r2, [r3, #0]
	  }
	  /*------------------------------------------------*/

	  if (hsLogOn){
 800189e:	4b6f      	ldr	r3, [pc, #444]	@ (8001a5c <main+0x630>)
 80018a0:	781b      	ldrb	r3, [r3, #0]
 80018a2:	2b00      	cmp	r3, #0
 80018a4:	f000 80b9 	beq.w	8001a1a <main+0x5ee>
		  if (hsLog.firstTime == 0){
 80018a8:	4b6d      	ldr	r3, [pc, #436]	@ (8001a60 <main+0x634>)
 80018aa:	785b      	ldrb	r3, [r3, #1]
 80018ac:	2b00      	cmp	r3, #0
 80018ae:	d11f      	bne.n	80018f0 <main+0x4c4>
			  hsLogStart(&hsLog,&ps);
 80018b0:	496c      	ldr	r1, [pc, #432]	@ (8001a64 <main+0x638>)
 80018b2:	486b      	ldr	r0, [pc, #428]	@ (8001a60 <main+0x634>)
 80018b4:	f001 fe7c 	bl	80035b0 <hsLogStart>
			  hsLog.end_multiTurns = hsLog.start_multiTurns  + (direction * TWO_PI_F * LOG_TURNS);
 80018b8:	4b69      	ldr	r3, [pc, #420]	@ (8001a60 <main+0x634>)
 80018ba:	ed93 7a01 	vldr	s14, [r3, #4]
 80018be:	4b6a      	ldr	r3, [pc, #424]	@ (8001a68 <main+0x63c>)
 80018c0:	f993 3000 	ldrsb.w	r3, [r3]
 80018c4:	ee07 3a90 	vmov	s15, r3
 80018c8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80018cc:	eddf 6a67 	vldr	s13, [pc, #412]	@ 8001a6c <main+0x640>
 80018d0:	ee67 7aa6 	vmul.f32	s15, s15, s13
 80018d4:	ee77 7aa7 	vadd.f32	s15, s15, s15
 80018d8:	ee77 7a27 	vadd.f32	s15, s14, s15
 80018dc:	4b60      	ldr	r3, [pc, #384]	@ (8001a60 <main+0x634>)
 80018de:	edc3 7a02 	vstr	s15, [r3, #8]
			  hsLog.addDatas = 0;
 80018e2:	4b5f      	ldr	r3, [pc, #380]	@ (8001a60 <main+0x634>)
 80018e4:	2200      	movs	r2, #0
 80018e6:	f8c3 2fc0 	str.w	r2, [r3, #4032]	@ 0xfc0
			  totalBytes = 0;
 80018ea:	4b61      	ldr	r3, [pc, #388]	@ (8001a70 <main+0x644>)
 80018ec:	2200      	movs	r2, #0
 80018ee:	601a      	str	r2, [r3, #0]
		  }

		  if (hsLog.sendOut == BUFFER1){
 80018f0:	4b5b      	ldr	r3, [pc, #364]	@ (8001a60 <main+0x634>)
 80018f2:	f893 3fb0 	ldrb.w	r3, [r3, #4016]	@ 0xfb0
 80018f6:	2b01      	cmp	r3, #1
 80018f8:	d11f      	bne.n	800193a <main+0x50e>
			  HAL_UART_Transmit_DMA(&huart2,(uint8_t *)hsLog.HSbuffer1,hsLog.sendOutBufferSize);
 80018fa:	4b59      	ldr	r3, [pc, #356]	@ (8001a60 <main+0x634>)
 80018fc:	f8b3 3fb2 	ldrh.w	r3, [r3, #4018]	@ 0xfb2
 8001900:	461a      	mov	r2, r3
 8001902:	495c      	ldr	r1, [pc, #368]	@ (8001a74 <main+0x648>)
 8001904:	4854      	ldr	r0, [pc, #336]	@ (8001a58 <main+0x62c>)
 8001906:	f007 fad9 	bl	8008ebc <HAL_UART_Transmit_DMA>
			  //hsLog.DMAdataSentOut = 0;
			  hsLog.sendOut = NOBUFFER;
 800190a:	4b55      	ldr	r3, [pc, #340]	@ (8001a60 <main+0x634>)
 800190c:	2200      	movs	r2, #0
 800190e:	f883 2fb0 	strb.w	r2, [r3, #4016]	@ 0xfb0
			  totalBytes += hsLog.sendOutBufferSize;
 8001912:	4b53      	ldr	r3, [pc, #332]	@ (8001a60 <main+0x634>)
 8001914:	f8b3 3fb2 	ldrh.w	r3, [r3, #4018]	@ 0xfb2
 8001918:	461a      	mov	r2, r3
 800191a:	4b55      	ldr	r3, [pc, #340]	@ (8001a70 <main+0x644>)
 800191c:	681b      	ldr	r3, [r3, #0]
 800191e:	4413      	add	r3, r2
 8001920:	4a53      	ldr	r2, [pc, #332]	@ (8001a70 <main+0x644>)
 8001922:	6013      	str	r3, [r2, #0]
			  hsLog.sendOutBufferSize = 0;
 8001924:	4b4e      	ldr	r3, [pc, #312]	@ (8001a60 <main+0x634>)
 8001926:	2200      	movs	r2, #0
 8001928:	f8a3 2fb2 	strh.w	r2, [r3, #4018]	@ 0xfb2
			  buffer1Sent+=1;
 800192c:	4b52      	ldr	r3, [pc, #328]	@ (8001a78 <main+0x64c>)
 800192e:	881b      	ldrh	r3, [r3, #0]
 8001930:	3301      	adds	r3, #1
 8001932:	b29a      	uxth	r2, r3
 8001934:	4b50      	ldr	r3, [pc, #320]	@ (8001a78 <main+0x64c>)
 8001936:	801a      	strh	r2, [r3, #0]
 8001938:	e023      	b.n	8001982 <main+0x556>
		  }
		  else if (hsLog.sendOut == BUFFER2){
 800193a:	4b49      	ldr	r3, [pc, #292]	@ (8001a60 <main+0x634>)
 800193c:	f893 3fb0 	ldrb.w	r3, [r3, #4016]	@ 0xfb0
 8001940:	2b02      	cmp	r3, #2
 8001942:	d11e      	bne.n	8001982 <main+0x556>
			  HAL_UART_Transmit_DMA(&huart2,(uint8_t *)hsLog.HSbuffer2,hsLog.sendOutBufferSize);
 8001944:	4b46      	ldr	r3, [pc, #280]	@ (8001a60 <main+0x634>)
 8001946:	f8b3 3fb2 	ldrh.w	r3, [r3, #4018]	@ 0xfb2
 800194a:	461a      	mov	r2, r3
 800194c:	494b      	ldr	r1, [pc, #300]	@ (8001a7c <main+0x650>)
 800194e:	4842      	ldr	r0, [pc, #264]	@ (8001a58 <main+0x62c>)
 8001950:	f007 fab4 	bl	8008ebc <HAL_UART_Transmit_DMA>
			  //hsLog.DMAdataSentOut = 0;
			  hsLog.sendOut = NOBUFFER;
 8001954:	4b42      	ldr	r3, [pc, #264]	@ (8001a60 <main+0x634>)
 8001956:	2200      	movs	r2, #0
 8001958:	f883 2fb0 	strb.w	r2, [r3, #4016]	@ 0xfb0
			  totalBytes += hsLog.sendOutBufferSize;
 800195c:	4b40      	ldr	r3, [pc, #256]	@ (8001a60 <main+0x634>)
 800195e:	f8b3 3fb2 	ldrh.w	r3, [r3, #4018]	@ 0xfb2
 8001962:	461a      	mov	r2, r3
 8001964:	4b42      	ldr	r3, [pc, #264]	@ (8001a70 <main+0x644>)
 8001966:	681b      	ldr	r3, [r3, #0]
 8001968:	4413      	add	r3, r2
 800196a:	4a41      	ldr	r2, [pc, #260]	@ (8001a70 <main+0x644>)
 800196c:	6013      	str	r3, [r2, #0]
			  hsLog.sendOutBufferSize = 0;
 800196e:	4b3c      	ldr	r3, [pc, #240]	@ (8001a60 <main+0x634>)
 8001970:	2200      	movs	r2, #0
 8001972:	f8a3 2fb2 	strh.w	r2, [r3, #4018]	@ 0xfb2
			  buffer2Sent+=1;
 8001976:	4b42      	ldr	r3, [pc, #264]	@ (8001a80 <main+0x654>)
 8001978:	881b      	ldrh	r3, [r3, #0]
 800197a:	3301      	adds	r3, #1
 800197c:	b29a      	uxth	r2, r3
 800197e:	4b40      	ldr	r3, [pc, #256]	@ (8001a80 <main+0x654>)
 8001980:	801a      	strh	r2, [r3, #0]
		  }
		  else {}
		  hsLog_CheckStopConditionReached(&hsLog,&ps,direction);
 8001982:	4b39      	ldr	r3, [pc, #228]	@ (8001a68 <main+0x63c>)
 8001984:	f993 3000 	ldrsb.w	r3, [r3]
 8001988:	461a      	mov	r2, r3
 800198a:	4936      	ldr	r1, [pc, #216]	@ (8001a64 <main+0x638>)
 800198c:	4834      	ldr	r0, [pc, #208]	@ (8001a60 <main+0x634>)
 800198e:	f002 f83e 	bl	8003a0e <hsLog_CheckStopConditionReached>
		  if (hsLog.stopAndFlushBuffer){
 8001992:	4b33      	ldr	r3, [pc, #204]	@ (8001a60 <main+0x634>)
 8001994:	7b1b      	ldrb	r3, [r3, #12]
 8001996:	2b00      	cmp	r3, #0
 8001998:	f43f ade6 	beq.w	8001568 <main+0x13c>
			  //stop  the log, send out whatever data
			 hsLog.enable = 0;
 800199c:	4b30      	ldr	r3, [pc, #192]	@ (8001a60 <main+0x634>)
 800199e:	2200      	movs	r2, #0
 80019a0:	701a      	strb	r2, [r3, #0]
			 hsLog.endLoopIndex = svpwm.loopCounter;
 80019a2:	4b23      	ldr	r3, [pc, #140]	@ (8001a30 <main+0x604>)
 80019a4:	681b      	ldr	r3, [r3, #0]
 80019a6:	4a2e      	ldr	r2, [pc, #184]	@ (8001a60 <main+0x634>)
 80019a8:	f8c2 3fbc 	str.w	r3, [r2, #4028]	@ 0xfbc
			 if (hsLog.runningBuffer == BUFFER1){
 80019ac:	4b2c      	ldr	r3, [pc, #176]	@ (8001a60 <main+0x634>)
 80019ae:	7b5b      	ldrb	r3, [r3, #13]
 80019b0:	2b01      	cmp	r3, #1
 80019b2:	d117      	bne.n	80019e4 <main+0x5b8>
				HAL_UART_Transmit_DMA(&huart2,(uint8_t *)hsLog.HSbuffer1,hsLog.bufferIndex);
 80019b4:	4b2a      	ldr	r3, [pc, #168]	@ (8001a60 <main+0x634>)
 80019b6:	f8b3 3fae 	ldrh.w	r3, [r3, #4014]	@ 0xfae
 80019ba:	461a      	mov	r2, r3
 80019bc:	492d      	ldr	r1, [pc, #180]	@ (8001a74 <main+0x648>)
 80019be:	4826      	ldr	r0, [pc, #152]	@ (8001a58 <main+0x62c>)
 80019c0:	f007 fa7c 	bl	8008ebc <HAL_UART_Transmit_DMA>
				buffer1flush+=1;
 80019c4:	4b2f      	ldr	r3, [pc, #188]	@ (8001a84 <main+0x658>)
 80019c6:	881b      	ldrh	r3, [r3, #0]
 80019c8:	3301      	adds	r3, #1
 80019ca:	b29a      	uxth	r2, r3
 80019cc:	4b2d      	ldr	r3, [pc, #180]	@ (8001a84 <main+0x658>)
 80019ce:	801a      	strh	r2, [r3, #0]
				totalBytes += hsLog.sendOutBufferSize;
 80019d0:	4b23      	ldr	r3, [pc, #140]	@ (8001a60 <main+0x634>)
 80019d2:	f8b3 3fb2 	ldrh.w	r3, [r3, #4018]	@ 0xfb2
 80019d6:	461a      	mov	r2, r3
 80019d8:	4b25      	ldr	r3, [pc, #148]	@ (8001a70 <main+0x644>)
 80019da:	681b      	ldr	r3, [r3, #0]
 80019dc:	4413      	add	r3, r2
 80019de:	4a24      	ldr	r2, [pc, #144]	@ (8001a70 <main+0x644>)
 80019e0:	6013      	str	r3, [r2, #0]
 80019e2:	e016      	b.n	8001a12 <main+0x5e6>
			 }else{
				HAL_UART_Transmit_DMA(&huart2,(uint8_t *)hsLog.HSbuffer2,hsLog.bufferIndex);
 80019e4:	4b1e      	ldr	r3, [pc, #120]	@ (8001a60 <main+0x634>)
 80019e6:	f8b3 3fae 	ldrh.w	r3, [r3, #4014]	@ 0xfae
 80019ea:	461a      	mov	r2, r3
 80019ec:	4923      	ldr	r1, [pc, #140]	@ (8001a7c <main+0x650>)
 80019ee:	481a      	ldr	r0, [pc, #104]	@ (8001a58 <main+0x62c>)
 80019f0:	f007 fa64 	bl	8008ebc <HAL_UART_Transmit_DMA>
				buffer2flush+=1;
 80019f4:	4b24      	ldr	r3, [pc, #144]	@ (8001a88 <main+0x65c>)
 80019f6:	881b      	ldrh	r3, [r3, #0]
 80019f8:	3301      	adds	r3, #1
 80019fa:	b29a      	uxth	r2, r3
 80019fc:	4b22      	ldr	r3, [pc, #136]	@ (8001a88 <main+0x65c>)
 80019fe:	801a      	strh	r2, [r3, #0]
				totalBytes += hsLog.sendOutBufferSize;
 8001a00:	4b17      	ldr	r3, [pc, #92]	@ (8001a60 <main+0x634>)
 8001a02:	f8b3 3fb2 	ldrh.w	r3, [r3, #4018]	@ 0xfb2
 8001a06:	461a      	mov	r2, r3
 8001a08:	4b19      	ldr	r3, [pc, #100]	@ (8001a70 <main+0x644>)
 8001a0a:	681b      	ldr	r3, [r3, #0]
 8001a0c:	4413      	add	r3, r2
 8001a0e:	4a18      	ldr	r2, [pc, #96]	@ (8001a70 <main+0x644>)
 8001a10:	6013      	str	r3, [r2, #0]
			 }
			 hsLogOn = 0;
 8001a12:	4b12      	ldr	r3, [pc, #72]	@ (8001a5c <main+0x630>)
 8001a14:	2200      	movs	r2, #0
 8001a16:	701a      	strb	r2, [r3, #0]
 8001a18:	e5a6      	b.n	8001568 <main+0x13c>
		  }
	  }else{
		  hsLogReset(&hsLog);
 8001a1a:	4811      	ldr	r0, [pc, #68]	@ (8001a60 <main+0x634>)
 8001a1c:	f001 fdeb 	bl	80035f6 <hsLogReset>
	  if (turnOffPWMS){
 8001a20:	e5a2      	b.n	8001568 <main+0x13c>
 8001a22:	bf00      	nop
 8001a24:	20000788 	.word	0x20000788
 8001a28:	20001865 	.word	0x20001865
 8001a2c:	2000177c 	.word	0x2000177c
 8001a30:	200006e4 	.word	0x200006e4
 8001a34:	20000708 	.word	0x20000708
 8001a38:	20001857 	.word	0x20001857
 8001a3c:	20001858 	.word	0x20001858
 8001a40:	20001859 	.word	0x20001859
 8001a44:	2000185e 	.word	0x2000185e
 8001a48:	2000185c 	.word	0x2000185c
 8001a4c:	2000185a 	.word	0x2000185a
 8001a50:	2000188d 	.word	0x2000188d
 8001a54:	0800cde0 	.word	0x0800cde0
 8001a58:	200004e8 	.word	0x200004e8
 8001a5c:	2000188c 	.word	0x2000188c
 8001a60:	200007b8 	.word	0x200007b8
 8001a64:	200005f8 	.word	0x200005f8
 8001a68:	20000000 	.word	0x20000000
 8001a6c:	40c90fda 	.word	0x40c90fda
 8001a70:	20001898 	.word	0x20001898
 8001a74:	200007c6 	.word	0x200007c6
 8001a78:	2000188e 	.word	0x2000188e
 8001a7c:	20000f96 	.word	0x20000f96
 8001a80:	20001894 	.word	0x20001894
 8001a84:	20001890 	.word	0x20001890
 8001a88:	20001892 	.word	0x20001892

08001a8c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001a8c:	b580      	push	{r7, lr}
 8001a8e:	b094      	sub	sp, #80	@ 0x50
 8001a90:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001a92:	f107 0318 	add.w	r3, r7, #24
 8001a96:	2238      	movs	r2, #56	@ 0x38
 8001a98:	2100      	movs	r1, #0
 8001a9a:	4618      	mov	r0, r3
 8001a9c:	f009 fa73 	bl	800af86 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001aa0:	1d3b      	adds	r3, r7, #4
 8001aa2:	2200      	movs	r2, #0
 8001aa4:	601a      	str	r2, [r3, #0]
 8001aa6:	605a      	str	r2, [r3, #4]
 8001aa8:	609a      	str	r2, [r3, #8]
 8001aaa:	60da      	str	r2, [r3, #12]
 8001aac:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001aae:	f44f 7000 	mov.w	r0, #512	@ 0x200
 8001ab2:	f004 f897 	bl	8005be4 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001ab6:	2301      	movs	r3, #1
 8001ab8:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001aba:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8001abe:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001ac0:	2302      	movs	r3, #2
 8001ac2:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001ac4:	2303      	movs	r3, #3
 8001ac6:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV4;
 8001ac8:	2304      	movs	r3, #4
 8001aca:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 75;
 8001acc:	234b      	movs	r3, #75	@ 0x4b
 8001ace:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001ad0:	2302      	movs	r3, #2
 8001ad2:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8001ad4:	2302      	movs	r3, #2
 8001ad6:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8001ad8:	2302      	movs	r3, #2
 8001ada:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001adc:	f107 0318 	add.w	r3, r7, #24
 8001ae0:	4618      	mov	r0, r3
 8001ae2:	f004 f933 	bl	8005d4c <HAL_RCC_OscConfig>
 8001ae6:	4603      	mov	r3, r0
 8001ae8:	2b00      	cmp	r3, #0
 8001aea:	d001      	beq.n	8001af0 <SystemClock_Config+0x64>
  {
    Error_Handler();
 8001aec:	f000 fa8a 	bl	8002004 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001af0:	230f      	movs	r3, #15
 8001af2:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001af4:	2303      	movs	r3, #3
 8001af6:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001af8:	2300      	movs	r3, #0
 8001afa:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001afc:	2300      	movs	r3, #0
 8001afe:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001b00:	2300      	movs	r3, #0
 8001b02:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8001b04:	1d3b      	adds	r3, r7, #4
 8001b06:	2104      	movs	r1, #4
 8001b08:	4618      	mov	r0, r3
 8001b0a:	f004 fc31 	bl	8006370 <HAL_RCC_ClockConfig>
 8001b0e:	4603      	mov	r3, r0
 8001b10:	2b00      	cmp	r3, #0
 8001b12:	d001      	beq.n	8001b18 <SystemClock_Config+0x8c>
  {
    Error_Handler();
 8001b14:	f000 fa76 	bl	8002004 <Error_Handler>
  }
}
 8001b18:	bf00      	nop
 8001b1a:	3750      	adds	r7, #80	@ 0x50
 8001b1c:	46bd      	mov	sp, r7
 8001b1e:	bd80      	pop	{r7, pc}

08001b20 <MX_CORDIC_Init>:
  * @brief CORDIC Initialization Function
  * @param None
  * @retval None
  */
static void MX_CORDIC_Init(void)
{
 8001b20:	b580      	push	{r7, lr}
 8001b22:	af00      	add	r7, sp, #0
  /* USER CODE END CORDIC_Init 0 */

  /* USER CODE BEGIN CORDIC_Init 1 */

  /* USER CODE END CORDIC_Init 1 */
  hcordic.Instance = CORDIC;
 8001b24:	4b06      	ldr	r3, [pc, #24]	@ (8001b40 <MX_CORDIC_Init+0x20>)
 8001b26:	4a07      	ldr	r2, [pc, #28]	@ (8001b44 <MX_CORDIC_Init+0x24>)
 8001b28:	601a      	str	r2, [r3, #0]
  if (HAL_CORDIC_Init(&hcordic) != HAL_OK)
 8001b2a:	4805      	ldr	r0, [pc, #20]	@ (8001b40 <MX_CORDIC_Init+0x20>)
 8001b2c:	f003 f9d2 	bl	8004ed4 <HAL_CORDIC_Init>
 8001b30:	4603      	mov	r3, r0
 8001b32:	2b00      	cmp	r3, #0
 8001b34:	d001      	beq.n	8001b3a <MX_CORDIC_Init+0x1a>
  {
    Error_Handler();
 8001b36:	f000 fa65 	bl	8002004 <Error_Handler>
  }
  /* USER CODE BEGIN CORDIC_Init 2 */

  /* USER CODE END CORDIC_Init 2 */

}
 8001b3a:	bf00      	nop
 8001b3c:	bd80      	pop	{r7, pc}
 8001b3e:	bf00      	nop
 8001b40:	20000378 	.word	0x20000378
 8001b44:	40020c00 	.word	0x40020c00

08001b48 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8001b48:	b580      	push	{r7, lr}
 8001b4a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8001b4c:	4b1b      	ldr	r3, [pc, #108]	@ (8001bbc <MX_SPI1_Init+0x74>)
 8001b4e:	4a1c      	ldr	r2, [pc, #112]	@ (8001bc0 <MX_SPI1_Init+0x78>)
 8001b50:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8001b52:	4b1a      	ldr	r3, [pc, #104]	@ (8001bbc <MX_SPI1_Init+0x74>)
 8001b54:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8001b58:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8001b5a:	4b18      	ldr	r3, [pc, #96]	@ (8001bbc <MX_SPI1_Init+0x74>)
 8001b5c:	2200      	movs	r2, #0
 8001b5e:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8001b60:	4b16      	ldr	r3, [pc, #88]	@ (8001bbc <MX_SPI1_Init+0x74>)
 8001b62:	f44f 62e0 	mov.w	r2, #1792	@ 0x700
 8001b66:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001b68:	4b14      	ldr	r3, [pc, #80]	@ (8001bbc <MX_SPI1_Init+0x74>)
 8001b6a:	2200      	movs	r2, #0
 8001b6c:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_2EDGE;
 8001b6e:	4b13      	ldr	r3, [pc, #76]	@ (8001bbc <MX_SPI1_Init+0x74>)
 8001b70:	2201      	movs	r2, #1
 8001b72:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8001b74:	4b11      	ldr	r3, [pc, #68]	@ (8001bbc <MX_SPI1_Init+0x74>)
 8001b76:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001b7a:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 8001b7c:	4b0f      	ldr	r3, [pc, #60]	@ (8001bbc <MX_SPI1_Init+0x74>)
 8001b7e:	2218      	movs	r2, #24
 8001b80:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001b82:	4b0e      	ldr	r3, [pc, #56]	@ (8001bbc <MX_SPI1_Init+0x74>)
 8001b84:	2200      	movs	r2, #0
 8001b86:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001b88:	4b0c      	ldr	r3, [pc, #48]	@ (8001bbc <MX_SPI1_Init+0x74>)
 8001b8a:	2200      	movs	r2, #0
 8001b8c:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001b8e:	4b0b      	ldr	r3, [pc, #44]	@ (8001bbc <MX_SPI1_Init+0x74>)
 8001b90:	2200      	movs	r2, #0
 8001b92:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 7;
 8001b94:	4b09      	ldr	r3, [pc, #36]	@ (8001bbc <MX_SPI1_Init+0x74>)
 8001b96:	2207      	movs	r2, #7
 8001b98:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8001b9a:	4b08      	ldr	r3, [pc, #32]	@ (8001bbc <MX_SPI1_Init+0x74>)
 8001b9c:	2200      	movs	r2, #0
 8001b9e:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 8001ba0:	4b06      	ldr	r3, [pc, #24]	@ (8001bbc <MX_SPI1_Init+0x74>)
 8001ba2:	2200      	movs	r2, #0
 8001ba4:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001ba6:	4805      	ldr	r0, [pc, #20]	@ (8001bbc <MX_SPI1_Init+0x74>)
 8001ba8:	f004 ffea 	bl	8006b80 <HAL_SPI_Init>
 8001bac:	4603      	mov	r3, r0
 8001bae:	2b00      	cmp	r3, #0
 8001bb0:	d001      	beq.n	8001bb6 <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 8001bb2:	f000 fa27 	bl	8002004 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8001bb6:	bf00      	nop
 8001bb8:	bd80      	pop	{r7, pc}
 8001bba:	bf00      	nop
 8001bbc:	200003a0 	.word	0x200003a0
 8001bc0:	40013000 	.word	0x40013000

08001bc4 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8001bc4:	b580      	push	{r7, lr}
 8001bc6:	b09c      	sub	sp, #112	@ 0x70
 8001bc8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001bca:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 8001bce:	2200      	movs	r2, #0
 8001bd0:	601a      	str	r2, [r3, #0]
 8001bd2:	605a      	str	r2, [r3, #4]
 8001bd4:	609a      	str	r2, [r3, #8]
 8001bd6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001bd8:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8001bdc:	2200      	movs	r2, #0
 8001bde:	601a      	str	r2, [r3, #0]
 8001be0:	605a      	str	r2, [r3, #4]
 8001be2:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001be4:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8001be8:	2200      	movs	r2, #0
 8001bea:	601a      	str	r2, [r3, #0]
 8001bec:	605a      	str	r2, [r3, #4]
 8001bee:	609a      	str	r2, [r3, #8]
 8001bf0:	60da      	str	r2, [r3, #12]
 8001bf2:	611a      	str	r2, [r3, #16]
 8001bf4:	615a      	str	r2, [r3, #20]
 8001bf6:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001bf8:	1d3b      	adds	r3, r7, #4
 8001bfa:	2234      	movs	r2, #52	@ 0x34
 8001bfc:	2100      	movs	r1, #0
 8001bfe:	4618      	mov	r0, r3
 8001c00:	f009 f9c1 	bl	800af86 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001c04:	4b52      	ldr	r3, [pc, #328]	@ (8001d50 <MX_TIM1_Init+0x18c>)
 8001c06:	4a53      	ldr	r2, [pc, #332]	@ (8001d54 <MX_TIM1_Init+0x190>)
 8001c08:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 5;
 8001c0a:	4b51      	ldr	r3, [pc, #324]	@ (8001d50 <MX_TIM1_Init+0x18c>)
 8001c0c:	2205      	movs	r2, #5
 8001c0e:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_CENTERALIGNED1;
 8001c10:	4b4f      	ldr	r3, [pc, #316]	@ (8001d50 <MX_TIM1_Init+0x18c>)
 8001c12:	2220      	movs	r2, #32
 8001c14:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 1249;
 8001c16:	4b4e      	ldr	r3, [pc, #312]	@ (8001d50 <MX_TIM1_Init+0x18c>)
 8001c18:	f240 42e1 	movw	r2, #1249	@ 0x4e1
 8001c1c:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001c1e:	4b4c      	ldr	r3, [pc, #304]	@ (8001d50 <MX_TIM1_Init+0x18c>)
 8001c20:	2200      	movs	r2, #0
 8001c22:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001c24:	4b4a      	ldr	r3, [pc, #296]	@ (8001d50 <MX_TIM1_Init+0x18c>)
 8001c26:	2200      	movs	r2, #0
 8001c28:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001c2a:	4b49      	ldr	r3, [pc, #292]	@ (8001d50 <MX_TIM1_Init+0x18c>)
 8001c2c:	2200      	movs	r2, #0
 8001c2e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8001c30:	4847      	ldr	r0, [pc, #284]	@ (8001d50 <MX_TIM1_Init+0x18c>)
 8001c32:	f005 fbd3 	bl	80073dc <HAL_TIM_Base_Init>
 8001c36:	4603      	mov	r3, r0
 8001c38:	2b00      	cmp	r3, #0
 8001c3a:	d001      	beq.n	8001c40 <MX_TIM1_Init+0x7c>
  {
    Error_Handler();
 8001c3c:	f000 f9e2 	bl	8002004 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001c40:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001c44:	663b      	str	r3, [r7, #96]	@ 0x60
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8001c46:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 8001c4a:	4619      	mov	r1, r3
 8001c4c:	4840      	ldr	r0, [pc, #256]	@ (8001d50 <MX_TIM1_Init+0x18c>)
 8001c4e:	f006 f8e3 	bl	8007e18 <HAL_TIM_ConfigClockSource>
 8001c52:	4603      	mov	r3, r0
 8001c54:	2b00      	cmp	r3, #0
 8001c56:	d001      	beq.n	8001c5c <MX_TIM1_Init+0x98>
  {
    Error_Handler();
 8001c58:	f000 f9d4 	bl	8002004 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8001c5c:	483c      	ldr	r0, [pc, #240]	@ (8001d50 <MX_TIM1_Init+0x18c>)
 8001c5e:	f005 fc7f 	bl	8007560 <HAL_TIM_PWM_Init>
 8001c62:	4603      	mov	r3, r0
 8001c64:	2b00      	cmp	r3, #0
 8001c66:	d001      	beq.n	8001c6c <MX_TIM1_Init+0xa8>
  {
    Error_Handler();
 8001c68:	f000 f9cc 	bl	8002004 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001c6c:	2300      	movs	r3, #0
 8001c6e:	657b      	str	r3, [r7, #84]	@ 0x54
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8001c70:	2300      	movs	r3, #0
 8001c72:	65bb      	str	r3, [r7, #88]	@ 0x58
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001c74:	2300      	movs	r3, #0
 8001c76:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001c78:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8001c7c:	4619      	mov	r1, r3
 8001c7e:	4834      	ldr	r0, [pc, #208]	@ (8001d50 <MX_TIM1_Init+0x18c>)
 8001c80:	f006 ff52 	bl	8008b28 <HAL_TIMEx_MasterConfigSynchronization>
 8001c84:	4603      	mov	r3, r0
 8001c86:	2b00      	cmp	r3, #0
 8001c88:	d001      	beq.n	8001c8e <MX_TIM1_Init+0xca>
  {
    Error_Handler();
 8001c8a:	f000 f9bb 	bl	8002004 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001c8e:	2360      	movs	r3, #96	@ 0x60
 8001c90:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.Pulse = 0;
 8001c92:	2300      	movs	r3, #0
 8001c94:	63fb      	str	r3, [r7, #60]	@ 0x3c
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001c96:	2300      	movs	r3, #0
 8001c98:	643b      	str	r3, [r7, #64]	@ 0x40
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_LOW;
 8001c9a:	2308      	movs	r3, #8
 8001c9c:	647b      	str	r3, [r7, #68]	@ 0x44
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001c9e:	2300      	movs	r3, #0
 8001ca0:	64bb      	str	r3, [r7, #72]	@ 0x48
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001ca2:	2300      	movs	r3, #0
 8001ca4:	64fb      	str	r3, [r7, #76]	@ 0x4c
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_SET;
 8001ca6:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8001caa:	653b      	str	r3, [r7, #80]	@ 0x50
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001cac:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8001cb0:	2200      	movs	r2, #0
 8001cb2:	4619      	mov	r1, r3
 8001cb4:	4826      	ldr	r0, [pc, #152]	@ (8001d50 <MX_TIM1_Init+0x18c>)
 8001cb6:	f005 ff9b 	bl	8007bf0 <HAL_TIM_PWM_ConfigChannel>
 8001cba:	4603      	mov	r3, r0
 8001cbc:	2b00      	cmp	r3, #0
 8001cbe:	d001      	beq.n	8001cc4 <MX_TIM1_Init+0x100>
  {
    Error_Handler();
 8001cc0:	f000 f9a0 	bl	8002004 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001cc4:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8001cc8:	2204      	movs	r2, #4
 8001cca:	4619      	mov	r1, r3
 8001ccc:	4820      	ldr	r0, [pc, #128]	@ (8001d50 <MX_TIM1_Init+0x18c>)
 8001cce:	f005 ff8f 	bl	8007bf0 <HAL_TIM_PWM_ConfigChannel>
 8001cd2:	4603      	mov	r3, r0
 8001cd4:	2b00      	cmp	r3, #0
 8001cd6:	d001      	beq.n	8001cdc <MX_TIM1_Init+0x118>
  {
    Error_Handler();
 8001cd8:	f000 f994 	bl	8002004 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8001cdc:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8001ce0:	2208      	movs	r2, #8
 8001ce2:	4619      	mov	r1, r3
 8001ce4:	481a      	ldr	r0, [pc, #104]	@ (8001d50 <MX_TIM1_Init+0x18c>)
 8001ce6:	f005 ff83 	bl	8007bf0 <HAL_TIM_PWM_ConfigChannel>
 8001cea:	4603      	mov	r3, r0
 8001cec:	2b00      	cmp	r3, #0
 8001cee:	d001      	beq.n	8001cf4 <MX_TIM1_Init+0x130>
  {
    Error_Handler();
 8001cf0:	f000 f988 	bl	8002004 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001cf4:	2300      	movs	r3, #0
 8001cf6:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001cf8:	2300      	movs	r3, #0
 8001cfa:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001cfc:	2300      	movs	r3, #0
 8001cfe:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 90;
 8001d00:	235a      	movs	r3, #90	@ 0x5a
 8001d02:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001d04:	2300      	movs	r3, #0
 8001d06:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001d08:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001d0c:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8001d0e:	2300      	movs	r3, #0
 8001d10:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 8001d12:	2300      	movs	r3, #0
 8001d14:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8001d16:	2300      	movs	r3, #0
 8001d18:	627b      	str	r3, [r7, #36]	@ 0x24
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8001d1a:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8001d1e:	62bb      	str	r3, [r7, #40]	@ 0x28
  sBreakDeadTimeConfig.Break2Filter = 0;
 8001d20:	2300      	movs	r3, #0
 8001d22:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 8001d24:	2300      	movs	r3, #0
 8001d26:	633b      	str	r3, [r7, #48]	@ 0x30
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001d28:	2300      	movs	r3, #0
 8001d2a:	637b      	str	r3, [r7, #52]	@ 0x34
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8001d2c:	1d3b      	adds	r3, r7, #4
 8001d2e:	4619      	mov	r1, r3
 8001d30:	4807      	ldr	r0, [pc, #28]	@ (8001d50 <MX_TIM1_Init+0x18c>)
 8001d32:	f006 ff7b 	bl	8008c2c <HAL_TIMEx_ConfigBreakDeadTime>
 8001d36:	4603      	mov	r3, r0
 8001d38:	2b00      	cmp	r3, #0
 8001d3a:	d001      	beq.n	8001d40 <MX_TIM1_Init+0x17c>
  {
    Error_Handler();
 8001d3c:	f000 f962 	bl	8002004 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8001d40:	4803      	ldr	r0, [pc, #12]	@ (8001d50 <MX_TIM1_Init+0x18c>)
 8001d42:	f000 fa4b 	bl	80021dc <HAL_TIM_MspPostInit>

}
 8001d46:	bf00      	nop
 8001d48:	3770      	adds	r7, #112	@ 0x70
 8001d4a:	46bd      	mov	sp, r7
 8001d4c:	bd80      	pop	{r7, pc}
 8001d4e:	bf00      	nop
 8001d50:	20000404 	.word	0x20000404
 8001d54:	40012c00 	.word	0x40012c00

08001d58 <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 8001d58:	b580      	push	{r7, lr}
 8001d5a:	b084      	sub	sp, #16
 8001d5c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001d5e:	1d3b      	adds	r3, r7, #4
 8001d60:	2200      	movs	r2, #0
 8001d62:	601a      	str	r2, [r3, #0]
 8001d64:	605a      	str	r2, [r3, #4]
 8001d66:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8001d68:	4b15      	ldr	r3, [pc, #84]	@ (8001dc0 <MX_TIM6_Init+0x68>)
 8001d6a:	4a16      	ldr	r2, [pc, #88]	@ (8001dc4 <MX_TIM6_Init+0x6c>)
 8001d6c:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 1249;
 8001d6e:	4b14      	ldr	r3, [pc, #80]	@ (8001dc0 <MX_TIM6_Init+0x68>)
 8001d70:	f240 42e1 	movw	r2, #1249	@ 0x4e1
 8001d74:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001d76:	4b12      	ldr	r3, [pc, #72]	@ (8001dc0 <MX_TIM6_Init+0x68>)
 8001d78:	2200      	movs	r2, #0
 8001d7a:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 2399;
 8001d7c:	4b10      	ldr	r3, [pc, #64]	@ (8001dc0 <MX_TIM6_Init+0x68>)
 8001d7e:	f640 125f 	movw	r2, #2399	@ 0x95f
 8001d82:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001d84:	4b0e      	ldr	r3, [pc, #56]	@ (8001dc0 <MX_TIM6_Init+0x68>)
 8001d86:	2200      	movs	r2, #0
 8001d88:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8001d8a:	480d      	ldr	r0, [pc, #52]	@ (8001dc0 <MX_TIM6_Init+0x68>)
 8001d8c:	f005 fb26 	bl	80073dc <HAL_TIM_Base_Init>
 8001d90:	4603      	mov	r3, r0
 8001d92:	2b00      	cmp	r3, #0
 8001d94:	d001      	beq.n	8001d9a <MX_TIM6_Init+0x42>
  {
    Error_Handler();
 8001d96:	f000 f935 	bl	8002004 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001d9a:	2300      	movs	r3, #0
 8001d9c:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001d9e:	2300      	movs	r3, #0
 8001da0:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8001da2:	1d3b      	adds	r3, r7, #4
 8001da4:	4619      	mov	r1, r3
 8001da6:	4806      	ldr	r0, [pc, #24]	@ (8001dc0 <MX_TIM6_Init+0x68>)
 8001da8:	f006 febe 	bl	8008b28 <HAL_TIMEx_MasterConfigSynchronization>
 8001dac:	4603      	mov	r3, r0
 8001dae:	2b00      	cmp	r3, #0
 8001db0:	d001      	beq.n	8001db6 <MX_TIM6_Init+0x5e>
  {
    Error_Handler();
 8001db2:	f000 f927 	bl	8002004 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 8001db6:	bf00      	nop
 8001db8:	3710      	adds	r7, #16
 8001dba:	46bd      	mov	sp, r7
 8001dbc:	bd80      	pop	{r7, pc}
 8001dbe:	bf00      	nop
 8001dc0:	20000450 	.word	0x20000450
 8001dc4:	40001000 	.word	0x40001000

08001dc8 <MX_TIM7_Init>:
  * @brief TIM7 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM7_Init(void)
{
 8001dc8:	b580      	push	{r7, lr}
 8001dca:	b084      	sub	sp, #16
 8001dcc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM7_Init 0 */

  /* USER CODE END TIM7_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001dce:	1d3b      	adds	r3, r7, #4
 8001dd0:	2200      	movs	r2, #0
 8001dd2:	601a      	str	r2, [r3, #0]
 8001dd4:	605a      	str	r2, [r3, #4]
 8001dd6:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM7_Init 1 */

  /* USER CODE END TIM7_Init 1 */
  htim7.Instance = TIM7;
 8001dd8:	4b14      	ldr	r3, [pc, #80]	@ (8001e2c <MX_TIM7_Init+0x64>)
 8001dda:	4a15      	ldr	r2, [pc, #84]	@ (8001e30 <MX_TIM7_Init+0x68>)
 8001ddc:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 1499;
 8001dde:	4b13      	ldr	r3, [pc, #76]	@ (8001e2c <MX_TIM7_Init+0x64>)
 8001de0:	f240 52db 	movw	r2, #1499	@ 0x5db
 8001de4:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001de6:	4b11      	ldr	r3, [pc, #68]	@ (8001e2c <MX_TIM7_Init+0x64>)
 8001de8:	2200      	movs	r2, #0
 8001dea:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 99;
 8001dec:	4b0f      	ldr	r3, [pc, #60]	@ (8001e2c <MX_TIM7_Init+0x64>)
 8001dee:	2263      	movs	r2, #99	@ 0x63
 8001df0:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001df2:	4b0e      	ldr	r3, [pc, #56]	@ (8001e2c <MX_TIM7_Init+0x64>)
 8001df4:	2200      	movs	r2, #0
 8001df6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 8001df8:	480c      	ldr	r0, [pc, #48]	@ (8001e2c <MX_TIM7_Init+0x64>)
 8001dfa:	f005 faef 	bl	80073dc <HAL_TIM_Base_Init>
 8001dfe:	4603      	mov	r3, r0
 8001e00:	2b00      	cmp	r3, #0
 8001e02:	d001      	beq.n	8001e08 <MX_TIM7_Init+0x40>
  {
    Error_Handler();
 8001e04:	f000 f8fe 	bl	8002004 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001e08:	2300      	movs	r3, #0
 8001e0a:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001e0c:	2300      	movs	r3, #0
 8001e0e:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 8001e10:	1d3b      	adds	r3, r7, #4
 8001e12:	4619      	mov	r1, r3
 8001e14:	4805      	ldr	r0, [pc, #20]	@ (8001e2c <MX_TIM7_Init+0x64>)
 8001e16:	f006 fe87 	bl	8008b28 <HAL_TIMEx_MasterConfigSynchronization>
 8001e1a:	4603      	mov	r3, r0
 8001e1c:	2b00      	cmp	r3, #0
 8001e1e:	d001      	beq.n	8001e24 <MX_TIM7_Init+0x5c>
  {
    Error_Handler();
 8001e20:	f000 f8f0 	bl	8002004 <Error_Handler>
  }
  /* USER CODE BEGIN TIM7_Init 2 */

  /* USER CODE END TIM7_Init 2 */

}
 8001e24:	bf00      	nop
 8001e26:	3710      	adds	r7, #16
 8001e28:	46bd      	mov	sp, r7
 8001e2a:	bd80      	pop	{r7, pc}
 8001e2c:	2000049c 	.word	0x2000049c
 8001e30:	40001400 	.word	0x40001400

08001e34 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001e34:	b580      	push	{r7, lr}
 8001e36:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001e38:	4b22      	ldr	r3, [pc, #136]	@ (8001ec4 <MX_USART2_UART_Init+0x90>)
 8001e3a:	4a23      	ldr	r2, [pc, #140]	@ (8001ec8 <MX_USART2_UART_Init+0x94>)
 8001e3c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 4800000;
 8001e3e:	4b21      	ldr	r3, [pc, #132]	@ (8001ec4 <MX_USART2_UART_Init+0x90>)
 8001e40:	4a22      	ldr	r2, [pc, #136]	@ (8001ecc <MX_USART2_UART_Init+0x98>)
 8001e42:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001e44:	4b1f      	ldr	r3, [pc, #124]	@ (8001ec4 <MX_USART2_UART_Init+0x90>)
 8001e46:	2200      	movs	r2, #0
 8001e48:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001e4a:	4b1e      	ldr	r3, [pc, #120]	@ (8001ec4 <MX_USART2_UART_Init+0x90>)
 8001e4c:	2200      	movs	r2, #0
 8001e4e:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001e50:	4b1c      	ldr	r3, [pc, #112]	@ (8001ec4 <MX_USART2_UART_Init+0x90>)
 8001e52:	2200      	movs	r2, #0
 8001e54:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX;
 8001e56:	4b1b      	ldr	r3, [pc, #108]	@ (8001ec4 <MX_USART2_UART_Init+0x90>)
 8001e58:	2208      	movs	r2, #8
 8001e5a:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001e5c:	4b19      	ldr	r3, [pc, #100]	@ (8001ec4 <MX_USART2_UART_Init+0x90>)
 8001e5e:	2200      	movs	r2, #0
 8001e60:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001e62:	4b18      	ldr	r3, [pc, #96]	@ (8001ec4 <MX_USART2_UART_Init+0x90>)
 8001e64:	2200      	movs	r2, #0
 8001e66:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001e68:	4b16      	ldr	r3, [pc, #88]	@ (8001ec4 <MX_USART2_UART_Init+0x90>)
 8001e6a:	2200      	movs	r2, #0
 8001e6c:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001e6e:	4b15      	ldr	r3, [pc, #84]	@ (8001ec4 <MX_USART2_UART_Init+0x90>)
 8001e70:	2200      	movs	r2, #0
 8001e72:	625a      	str	r2, [r3, #36]	@ 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001e74:	4b13      	ldr	r3, [pc, #76]	@ (8001ec4 <MX_USART2_UART_Init+0x90>)
 8001e76:	2200      	movs	r2, #0
 8001e78:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001e7a:	4812      	ldr	r0, [pc, #72]	@ (8001ec4 <MX_USART2_UART_Init+0x90>)
 8001e7c:	f006 ffcd 	bl	8008e1a <HAL_UART_Init>
 8001e80:	4603      	mov	r3, r0
 8001e82:	2b00      	cmp	r3, #0
 8001e84:	d001      	beq.n	8001e8a <MX_USART2_UART_Init+0x56>
  {
    Error_Handler();
 8001e86:	f000 f8bd 	bl	8002004 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001e8a:	2100      	movs	r1, #0
 8001e8c:	480d      	ldr	r0, [pc, #52]	@ (8001ec4 <MX_USART2_UART_Init+0x90>)
 8001e8e:	f008 fa52 	bl	800a336 <HAL_UARTEx_SetTxFifoThreshold>
 8001e92:	4603      	mov	r3, r0
 8001e94:	2b00      	cmp	r3, #0
 8001e96:	d001      	beq.n	8001e9c <MX_USART2_UART_Init+0x68>
  {
    Error_Handler();
 8001e98:	f000 f8b4 	bl	8002004 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001e9c:	2100      	movs	r1, #0
 8001e9e:	4809      	ldr	r0, [pc, #36]	@ (8001ec4 <MX_USART2_UART_Init+0x90>)
 8001ea0:	f008 fa87 	bl	800a3b2 <HAL_UARTEx_SetRxFifoThreshold>
 8001ea4:	4603      	mov	r3, r0
 8001ea6:	2b00      	cmp	r3, #0
 8001ea8:	d001      	beq.n	8001eae <MX_USART2_UART_Init+0x7a>
  {
    Error_Handler();
 8001eaa:	f000 f8ab 	bl	8002004 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 8001eae:	4805      	ldr	r0, [pc, #20]	@ (8001ec4 <MX_USART2_UART_Init+0x90>)
 8001eb0:	f008 fa08 	bl	800a2c4 <HAL_UARTEx_DisableFifoMode>
 8001eb4:	4603      	mov	r3, r0
 8001eb6:	2b00      	cmp	r3, #0
 8001eb8:	d001      	beq.n	8001ebe <MX_USART2_UART_Init+0x8a>
  {
    Error_Handler();
 8001eba:	f000 f8a3 	bl	8002004 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001ebe:	bf00      	nop
 8001ec0:	bd80      	pop	{r7, pc}
 8001ec2:	bf00      	nop
 8001ec4:	200004e8 	.word	0x200004e8
 8001ec8:	40004400 	.word	0x40004400
 8001ecc:	00493e00 	.word	0x00493e00

08001ed0 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001ed0:	b580      	push	{r7, lr}
 8001ed2:	b082      	sub	sp, #8
 8001ed4:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 8001ed6:	4b12      	ldr	r3, [pc, #72]	@ (8001f20 <MX_DMA_Init+0x50>)
 8001ed8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001eda:	4a11      	ldr	r2, [pc, #68]	@ (8001f20 <MX_DMA_Init+0x50>)
 8001edc:	f043 0304 	orr.w	r3, r3, #4
 8001ee0:	6493      	str	r3, [r2, #72]	@ 0x48
 8001ee2:	4b0f      	ldr	r3, [pc, #60]	@ (8001f20 <MX_DMA_Init+0x50>)
 8001ee4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001ee6:	f003 0304 	and.w	r3, r3, #4
 8001eea:	607b      	str	r3, [r7, #4]
 8001eec:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001eee:	4b0c      	ldr	r3, [pc, #48]	@ (8001f20 <MX_DMA_Init+0x50>)
 8001ef0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001ef2:	4a0b      	ldr	r2, [pc, #44]	@ (8001f20 <MX_DMA_Init+0x50>)
 8001ef4:	f043 0301 	orr.w	r3, r3, #1
 8001ef8:	6493      	str	r3, [r2, #72]	@ 0x48
 8001efa:	4b09      	ldr	r3, [pc, #36]	@ (8001f20 <MX_DMA_Init+0x50>)
 8001efc:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001efe:	f003 0301 	and.w	r3, r3, #1
 8001f02:	603b      	str	r3, [r7, #0]
 8001f04:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8001f06:	2200      	movs	r2, #0
 8001f08:	2100      	movs	r1, #0
 8001f0a:	200b      	movs	r0, #11
 8001f0c:	f003 f92b 	bl	8005166 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8001f10:	200b      	movs	r0, #11
 8001f12:	f003 f942 	bl	800519a <HAL_NVIC_EnableIRQ>

}
 8001f16:	bf00      	nop
 8001f18:	3708      	adds	r7, #8
 8001f1a:	46bd      	mov	sp, r7
 8001f1c:	bd80      	pop	{r7, pc}
 8001f1e:	bf00      	nop
 8001f20:	40021000 	.word	0x40021000

08001f24 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001f24:	b580      	push	{r7, lr}
 8001f26:	b088      	sub	sp, #32
 8001f28:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001f2a:	f107 030c 	add.w	r3, r7, #12
 8001f2e:	2200      	movs	r2, #0
 8001f30:	601a      	str	r2, [r3, #0]
 8001f32:	605a      	str	r2, [r3, #4]
 8001f34:	609a      	str	r2, [r3, #8]
 8001f36:	60da      	str	r2, [r3, #12]
 8001f38:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8001f3a:	4b30      	ldr	r3, [pc, #192]	@ (8001ffc <MX_GPIO_Init+0xd8>)
 8001f3c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001f3e:	4a2f      	ldr	r2, [pc, #188]	@ (8001ffc <MX_GPIO_Init+0xd8>)
 8001f40:	f043 0320 	orr.w	r3, r3, #32
 8001f44:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001f46:	4b2d      	ldr	r3, [pc, #180]	@ (8001ffc <MX_GPIO_Init+0xd8>)
 8001f48:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001f4a:	f003 0320 	and.w	r3, r3, #32
 8001f4e:	60bb      	str	r3, [r7, #8]
 8001f50:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001f52:	4b2a      	ldr	r3, [pc, #168]	@ (8001ffc <MX_GPIO_Init+0xd8>)
 8001f54:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001f56:	4a29      	ldr	r2, [pc, #164]	@ (8001ffc <MX_GPIO_Init+0xd8>)
 8001f58:	f043 0301 	orr.w	r3, r3, #1
 8001f5c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001f5e:	4b27      	ldr	r3, [pc, #156]	@ (8001ffc <MX_GPIO_Init+0xd8>)
 8001f60:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001f62:	f003 0301 	and.w	r3, r3, #1
 8001f66:	607b      	str	r3, [r7, #4]
 8001f68:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001f6a:	4b24      	ldr	r3, [pc, #144]	@ (8001ffc <MX_GPIO_Init+0xd8>)
 8001f6c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001f6e:	4a23      	ldr	r2, [pc, #140]	@ (8001ffc <MX_GPIO_Init+0xd8>)
 8001f70:	f043 0302 	orr.w	r3, r3, #2
 8001f74:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001f76:	4b21      	ldr	r3, [pc, #132]	@ (8001ffc <MX_GPIO_Init+0xd8>)
 8001f78:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001f7a:	f003 0302 	and.w	r3, r3, #2
 8001f7e:	603b      	str	r3, [r7, #0]
 8001f80:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, SPI1_CS_Pin|FAULT_LED_Pin, GPIO_PIN_RESET);
 8001f82:	2200      	movs	r2, #0
 8001f84:	21c0      	movs	r1, #192	@ 0xc0
 8001f86:	481e      	ldr	r0, [pc, #120]	@ (8002000 <MX_GPIO_Init+0xdc>)
 8001f88:	f003 fdd6 	bl	8005b38 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : ENC_B_Pin */
  GPIO_InitStruct.Pin = ENC_B_Pin;
 8001f8c:	2380      	movs	r3, #128	@ 0x80
 8001f8e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f90:	2302      	movs	r3, #2
 8001f92:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f94:	2300      	movs	r3, #0
 8001f96:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001f98:	2300      	movs	r3, #0
 8001f9a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8001f9c:	2302      	movs	r3, #2
 8001f9e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(ENC_B_GPIO_Port, &GPIO_InitStruct);
 8001fa0:	f107 030c 	add.w	r3, r7, #12
 8001fa4:	4619      	mov	r1, r3
 8001fa6:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001faa:	f003 fc43 	bl	8005834 <HAL_GPIO_Init>

  /*Configure GPIO pin : ENC_INDEX_Pin */
  GPIO_InitStruct.Pin = ENC_INDEX_Pin;
 8001fae:	2301      	movs	r3, #1
 8001fb0:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001fb2:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8001fb6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001fb8:	2300      	movs	r3, #0
 8001fba:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(ENC_INDEX_GPIO_Port, &GPIO_InitStruct);
 8001fbc:	f107 030c 	add.w	r3, r7, #12
 8001fc0:	4619      	mov	r1, r3
 8001fc2:	480f      	ldr	r0, [pc, #60]	@ (8002000 <MX_GPIO_Init+0xdc>)
 8001fc4:	f003 fc36 	bl	8005834 <HAL_GPIO_Init>

  /*Configure GPIO pins : SPI1_CS_Pin FAULT_LED_Pin */
  GPIO_InitStruct.Pin = SPI1_CS_Pin|FAULT_LED_Pin;
 8001fc8:	23c0      	movs	r3, #192	@ 0xc0
 8001fca:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001fcc:	2301      	movs	r3, #1
 8001fce:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001fd0:	2300      	movs	r3, #0
 8001fd2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001fd4:	2300      	movs	r3, #0
 8001fd6:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001fd8:	f107 030c 	add.w	r3, r7, #12
 8001fdc:	4619      	mov	r1, r3
 8001fde:	4808      	ldr	r0, [pc, #32]	@ (8002000 <MX_GPIO_Init+0xdc>)
 8001fe0:	f003 fc28 	bl	8005834 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 3, 0);
 8001fe4:	2200      	movs	r2, #0
 8001fe6:	2103      	movs	r1, #3
 8001fe8:	2006      	movs	r0, #6
 8001fea:	f003 f8bc 	bl	8005166 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8001fee:	2006      	movs	r0, #6
 8001ff0:	f003 f8d3 	bl	800519a <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001ff4:	bf00      	nop
 8001ff6:	3720      	adds	r7, #32
 8001ff8:	46bd      	mov	sp, r7
 8001ffa:	bd80      	pop	{r7, pc}
 8001ffc:	40021000 	.word	0x40021000
 8002000:	48000400 	.word	0x48000400

08002004 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002004:	b480      	push	{r7}
 8002006:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002008:	b672      	cpsid	i
}
 800200a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800200c:	bf00      	nop
 800200e:	e7fd      	b.n	800200c <Error_Handler+0x8>

08002010 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002010:	b580      	push	{r7, lr}
 8002012:	b082      	sub	sp, #8
 8002014:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002016:	4b0f      	ldr	r3, [pc, #60]	@ (8002054 <HAL_MspInit+0x44>)
 8002018:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800201a:	4a0e      	ldr	r2, [pc, #56]	@ (8002054 <HAL_MspInit+0x44>)
 800201c:	f043 0301 	orr.w	r3, r3, #1
 8002020:	6613      	str	r3, [r2, #96]	@ 0x60
 8002022:	4b0c      	ldr	r3, [pc, #48]	@ (8002054 <HAL_MspInit+0x44>)
 8002024:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002026:	f003 0301 	and.w	r3, r3, #1
 800202a:	607b      	str	r3, [r7, #4]
 800202c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800202e:	4b09      	ldr	r3, [pc, #36]	@ (8002054 <HAL_MspInit+0x44>)
 8002030:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002032:	4a08      	ldr	r2, [pc, #32]	@ (8002054 <HAL_MspInit+0x44>)
 8002034:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002038:	6593      	str	r3, [r2, #88]	@ 0x58
 800203a:	4b06      	ldr	r3, [pc, #24]	@ (8002054 <HAL_MspInit+0x44>)
 800203c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800203e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002042:	603b      	str	r3, [r7, #0]
 8002044:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 8002046:	f003 fe71 	bl	8005d2c <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800204a:	bf00      	nop
 800204c:	3708      	adds	r7, #8
 800204e:	46bd      	mov	sp, r7
 8002050:	bd80      	pop	{r7, pc}
 8002052:	bf00      	nop
 8002054:	40021000 	.word	0x40021000

08002058 <HAL_CORDIC_MspInit>:
* This function configures the hardware resources used in this example
* @param hcordic: CORDIC handle pointer
* @retval None
*/
void HAL_CORDIC_MspInit(CORDIC_HandleTypeDef* hcordic)
{
 8002058:	b480      	push	{r7}
 800205a:	b085      	sub	sp, #20
 800205c:	af00      	add	r7, sp, #0
 800205e:	6078      	str	r0, [r7, #4]
  if(hcordic->Instance==CORDIC)
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	681b      	ldr	r3, [r3, #0]
 8002064:	4a0a      	ldr	r2, [pc, #40]	@ (8002090 <HAL_CORDIC_MspInit+0x38>)
 8002066:	4293      	cmp	r3, r2
 8002068:	d10b      	bne.n	8002082 <HAL_CORDIC_MspInit+0x2a>
  {
  /* USER CODE BEGIN CORDIC_MspInit 0 */

  /* USER CODE END CORDIC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CORDIC_CLK_ENABLE();
 800206a:	4b0a      	ldr	r3, [pc, #40]	@ (8002094 <HAL_CORDIC_MspInit+0x3c>)
 800206c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800206e:	4a09      	ldr	r2, [pc, #36]	@ (8002094 <HAL_CORDIC_MspInit+0x3c>)
 8002070:	f043 0308 	orr.w	r3, r3, #8
 8002074:	6493      	str	r3, [r2, #72]	@ 0x48
 8002076:	4b07      	ldr	r3, [pc, #28]	@ (8002094 <HAL_CORDIC_MspInit+0x3c>)
 8002078:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800207a:	f003 0308 	and.w	r3, r3, #8
 800207e:	60fb      	str	r3, [r7, #12]
 8002080:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END CORDIC_MspInit 1 */

  }

}
 8002082:	bf00      	nop
 8002084:	3714      	adds	r7, #20
 8002086:	46bd      	mov	sp, r7
 8002088:	f85d 7b04 	ldr.w	r7, [sp], #4
 800208c:	4770      	bx	lr
 800208e:	bf00      	nop
 8002090:	40020c00 	.word	0x40020c00
 8002094:	40021000 	.word	0x40021000

08002098 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8002098:	b580      	push	{r7, lr}
 800209a:	b08a      	sub	sp, #40	@ 0x28
 800209c:	af00      	add	r7, sp, #0
 800209e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80020a0:	f107 0314 	add.w	r3, r7, #20
 80020a4:	2200      	movs	r2, #0
 80020a6:	601a      	str	r2, [r3, #0]
 80020a8:	605a      	str	r2, [r3, #4]
 80020aa:	609a      	str	r2, [r3, #8]
 80020ac:	60da      	str	r2, [r3, #12]
 80020ae:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	681b      	ldr	r3, [r3, #0]
 80020b4:	4a17      	ldr	r2, [pc, #92]	@ (8002114 <HAL_SPI_MspInit+0x7c>)
 80020b6:	4293      	cmp	r3, r2
 80020b8:	d127      	bne.n	800210a <HAL_SPI_MspInit+0x72>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80020ba:	4b17      	ldr	r3, [pc, #92]	@ (8002118 <HAL_SPI_MspInit+0x80>)
 80020bc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80020be:	4a16      	ldr	r2, [pc, #88]	@ (8002118 <HAL_SPI_MspInit+0x80>)
 80020c0:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80020c4:	6613      	str	r3, [r2, #96]	@ 0x60
 80020c6:	4b14      	ldr	r3, [pc, #80]	@ (8002118 <HAL_SPI_MspInit+0x80>)
 80020c8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80020ca:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80020ce:	613b      	str	r3, [r7, #16]
 80020d0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80020d2:	4b11      	ldr	r3, [pc, #68]	@ (8002118 <HAL_SPI_MspInit+0x80>)
 80020d4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80020d6:	4a10      	ldr	r2, [pc, #64]	@ (8002118 <HAL_SPI_MspInit+0x80>)
 80020d8:	f043 0302 	orr.w	r3, r3, #2
 80020dc:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80020de:	4b0e      	ldr	r3, [pc, #56]	@ (8002118 <HAL_SPI_MspInit+0x80>)
 80020e0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80020e2:	f003 0302 	and.w	r3, r3, #2
 80020e6:	60fb      	str	r3, [r7, #12]
 80020e8:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PB3     ------> SPI1_SCK
    PB4     ------> SPI1_MISO
    PB5     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5;
 80020ea:	2338      	movs	r3, #56	@ 0x38
 80020ec:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80020ee:	2302      	movs	r3, #2
 80020f0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020f2:	2300      	movs	r3, #0
 80020f4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80020f6:	2300      	movs	r3, #0
 80020f8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80020fa:	2305      	movs	r3, #5
 80020fc:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80020fe:	f107 0314 	add.w	r3, r7, #20
 8002102:	4619      	mov	r1, r3
 8002104:	4805      	ldr	r0, [pc, #20]	@ (800211c <HAL_SPI_MspInit+0x84>)
 8002106:	f003 fb95 	bl	8005834 <HAL_GPIO_Init>

  /* USER CODE END SPI1_MspInit 1 */

  }

}
 800210a:	bf00      	nop
 800210c:	3728      	adds	r7, #40	@ 0x28
 800210e:	46bd      	mov	sp, r7
 8002110:	bd80      	pop	{r7, pc}
 8002112:	bf00      	nop
 8002114:	40013000 	.word	0x40013000
 8002118:	40021000 	.word	0x40021000
 800211c:	48000400 	.word	0x48000400

08002120 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002120:	b580      	push	{r7, lr}
 8002122:	b086      	sub	sp, #24
 8002124:	af00      	add	r7, sp, #0
 8002126:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	681b      	ldr	r3, [r3, #0]
 800212c:	4a27      	ldr	r2, [pc, #156]	@ (80021cc <HAL_TIM_Base_MspInit+0xac>)
 800212e:	4293      	cmp	r3, r2
 8002130:	d114      	bne.n	800215c <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8002132:	4b27      	ldr	r3, [pc, #156]	@ (80021d0 <HAL_TIM_Base_MspInit+0xb0>)
 8002134:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002136:	4a26      	ldr	r2, [pc, #152]	@ (80021d0 <HAL_TIM_Base_MspInit+0xb0>)
 8002138:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 800213c:	6613      	str	r3, [r2, #96]	@ 0x60
 800213e:	4b24      	ldr	r3, [pc, #144]	@ (80021d0 <HAL_TIM_Base_MspInit+0xb0>)
 8002140:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002142:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002146:	617b      	str	r3, [r7, #20]
 8002148:	697b      	ldr	r3, [r7, #20]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, 1, 0);
 800214a:	2200      	movs	r2, #0
 800214c:	2101      	movs	r1, #1
 800214e:	2019      	movs	r0, #25
 8002150:	f003 f809 	bl	8005166 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 8002154:	2019      	movs	r0, #25
 8002156:	f003 f820 	bl	800519a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM7_MspInit 1 */

  /* USER CODE END TIM7_MspInit 1 */
  }

}
 800215a:	e032      	b.n	80021c2 <HAL_TIM_Base_MspInit+0xa2>
  else if(htim_base->Instance==TIM6)
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	681b      	ldr	r3, [r3, #0]
 8002160:	4a1c      	ldr	r2, [pc, #112]	@ (80021d4 <HAL_TIM_Base_MspInit+0xb4>)
 8002162:	4293      	cmp	r3, r2
 8002164:	d114      	bne.n	8002190 <HAL_TIM_Base_MspInit+0x70>
    __HAL_RCC_TIM6_CLK_ENABLE();
 8002166:	4b1a      	ldr	r3, [pc, #104]	@ (80021d0 <HAL_TIM_Base_MspInit+0xb0>)
 8002168:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800216a:	4a19      	ldr	r2, [pc, #100]	@ (80021d0 <HAL_TIM_Base_MspInit+0xb0>)
 800216c:	f043 0310 	orr.w	r3, r3, #16
 8002170:	6593      	str	r3, [r2, #88]	@ 0x58
 8002172:	4b17      	ldr	r3, [pc, #92]	@ (80021d0 <HAL_TIM_Base_MspInit+0xb0>)
 8002174:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002176:	f003 0310 	and.w	r3, r3, #16
 800217a:	613b      	str	r3, [r7, #16]
 800217c:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 2, 0);
 800217e:	2200      	movs	r2, #0
 8002180:	2102      	movs	r1, #2
 8002182:	2036      	movs	r0, #54	@ 0x36
 8002184:	f002 ffef 	bl	8005166 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8002188:	2036      	movs	r0, #54	@ 0x36
 800218a:	f003 f806 	bl	800519a <HAL_NVIC_EnableIRQ>
}
 800218e:	e018      	b.n	80021c2 <HAL_TIM_Base_MspInit+0xa2>
  else if(htim_base->Instance==TIM7)
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	681b      	ldr	r3, [r3, #0]
 8002194:	4a10      	ldr	r2, [pc, #64]	@ (80021d8 <HAL_TIM_Base_MspInit+0xb8>)
 8002196:	4293      	cmp	r3, r2
 8002198:	d113      	bne.n	80021c2 <HAL_TIM_Base_MspInit+0xa2>
    __HAL_RCC_TIM7_CLK_ENABLE();
 800219a:	4b0d      	ldr	r3, [pc, #52]	@ (80021d0 <HAL_TIM_Base_MspInit+0xb0>)
 800219c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800219e:	4a0c      	ldr	r2, [pc, #48]	@ (80021d0 <HAL_TIM_Base_MspInit+0xb0>)
 80021a0:	f043 0320 	orr.w	r3, r3, #32
 80021a4:	6593      	str	r3, [r2, #88]	@ 0x58
 80021a6:	4b0a      	ldr	r3, [pc, #40]	@ (80021d0 <HAL_TIM_Base_MspInit+0xb0>)
 80021a8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80021aa:	f003 0320 	and.w	r3, r3, #32
 80021ae:	60fb      	str	r3, [r7, #12]
 80021b0:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM7_IRQn, 2, 0);
 80021b2:	2200      	movs	r2, #0
 80021b4:	2102      	movs	r1, #2
 80021b6:	2037      	movs	r0, #55	@ 0x37
 80021b8:	f002 ffd5 	bl	8005166 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM7_IRQn);
 80021bc:	2037      	movs	r0, #55	@ 0x37
 80021be:	f002 ffec 	bl	800519a <HAL_NVIC_EnableIRQ>
}
 80021c2:	bf00      	nop
 80021c4:	3718      	adds	r7, #24
 80021c6:	46bd      	mov	sp, r7
 80021c8:	bd80      	pop	{r7, pc}
 80021ca:	bf00      	nop
 80021cc:	40012c00 	.word	0x40012c00
 80021d0:	40021000 	.word	0x40021000
 80021d4:	40001000 	.word	0x40001000
 80021d8:	40001400 	.word	0x40001400

080021dc <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80021dc:	b580      	push	{r7, lr}
 80021de:	b08a      	sub	sp, #40	@ 0x28
 80021e0:	af00      	add	r7, sp, #0
 80021e2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80021e4:	f107 0314 	add.w	r3, r7, #20
 80021e8:	2200      	movs	r2, #0
 80021ea:	601a      	str	r2, [r3, #0]
 80021ec:	605a      	str	r2, [r3, #4]
 80021ee:	609a      	str	r2, [r3, #8]
 80021f0:	60da      	str	r2, [r3, #12]
 80021f2:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	681b      	ldr	r3, [r3, #0]
 80021f8:	4a29      	ldr	r2, [pc, #164]	@ (80022a0 <HAL_TIM_MspPostInit+0xc4>)
 80021fa:	4293      	cmp	r3, r2
 80021fc:	d14b      	bne.n	8002296 <HAL_TIM_MspPostInit+0xba>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80021fe:	4b29      	ldr	r3, [pc, #164]	@ (80022a4 <HAL_TIM_MspPostInit+0xc8>)
 8002200:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002202:	4a28      	ldr	r2, [pc, #160]	@ (80022a4 <HAL_TIM_MspPostInit+0xc8>)
 8002204:	f043 0302 	orr.w	r3, r3, #2
 8002208:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800220a:	4b26      	ldr	r3, [pc, #152]	@ (80022a4 <HAL_TIM_MspPostInit+0xc8>)
 800220c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800220e:	f003 0302 	and.w	r3, r3, #2
 8002212:	613b      	str	r3, [r7, #16]
 8002214:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002216:	4b23      	ldr	r3, [pc, #140]	@ (80022a4 <HAL_TIM_MspPostInit+0xc8>)
 8002218:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800221a:	4a22      	ldr	r2, [pc, #136]	@ (80022a4 <HAL_TIM_MspPostInit+0xc8>)
 800221c:	f043 0301 	orr.w	r3, r3, #1
 8002220:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002222:	4b20      	ldr	r3, [pc, #128]	@ (80022a4 <HAL_TIM_MspPostInit+0xc8>)
 8002224:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002226:	f003 0301 	and.w	r3, r3, #1
 800222a:	60fb      	str	r3, [r7, #12]
 800222c:	68fb      	ldr	r3, [r7, #12]
    PB15     ------> TIM1_CH3N
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    PA10     ------> TIM1_CH3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14;
 800222e:	f44f 43c0 	mov.w	r3, #24576	@ 0x6000
 8002232:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002234:	2302      	movs	r3, #2
 8002236:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002238:	2300      	movs	r3, #0
 800223a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800223c:	2300      	movs	r3, #0
 800223e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_TIM1;
 8002240:	2306      	movs	r3, #6
 8002242:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002244:	f107 0314 	add.w	r3, r7, #20
 8002248:	4619      	mov	r1, r3
 800224a:	4817      	ldr	r0, [pc, #92]	@ (80022a8 <HAL_TIM_MspPostInit+0xcc>)
 800224c:	f003 faf2 	bl	8005834 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8002250:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8002254:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002256:	2302      	movs	r3, #2
 8002258:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800225a:	2300      	movs	r3, #0
 800225c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800225e:	2300      	movs	r3, #0
 8002260:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_TIM1;
 8002262:	2304      	movs	r3, #4
 8002264:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002266:	f107 0314 	add.w	r3, r7, #20
 800226a:	4619      	mov	r1, r3
 800226c:	480e      	ldr	r0, [pc, #56]	@ (80022a8 <HAL_TIM_MspPostInit+0xcc>)
 800226e:	f003 fae1 	bl	8005834 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10;
 8002272:	f44f 63e0 	mov.w	r3, #1792	@ 0x700
 8002276:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002278:	2302      	movs	r3, #2
 800227a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800227c:	2300      	movs	r3, #0
 800227e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002280:	2300      	movs	r3, #0
 8002282:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_TIM1;
 8002284:	2306      	movs	r3, #6
 8002286:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002288:	f107 0314 	add.w	r3, r7, #20
 800228c:	4619      	mov	r1, r3
 800228e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002292:	f003 facf 	bl	8005834 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8002296:	bf00      	nop
 8002298:	3728      	adds	r7, #40	@ 0x28
 800229a:	46bd      	mov	sp, r7
 800229c:	bd80      	pop	{r7, pc}
 800229e:	bf00      	nop
 80022a0:	40012c00 	.word	0x40012c00
 80022a4:	40021000 	.word	0x40021000
 80022a8:	48000400 	.word	0x48000400

080022ac <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80022ac:	b580      	push	{r7, lr}
 80022ae:	b09a      	sub	sp, #104	@ 0x68
 80022b0:	af00      	add	r7, sp, #0
 80022b2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80022b4:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 80022b8:	2200      	movs	r2, #0
 80022ba:	601a      	str	r2, [r3, #0]
 80022bc:	605a      	str	r2, [r3, #4]
 80022be:	609a      	str	r2, [r3, #8]
 80022c0:	60da      	str	r2, [r3, #12]
 80022c2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80022c4:	f107 0310 	add.w	r3, r7, #16
 80022c8:	2244      	movs	r2, #68	@ 0x44
 80022ca:	2100      	movs	r1, #0
 80022cc:	4618      	mov	r0, r3
 80022ce:	f008 fe5a 	bl	800af86 <memset>
  if(huart->Instance==USART2)
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	681b      	ldr	r3, [r3, #0]
 80022d6:	4a38      	ldr	r2, [pc, #224]	@ (80023b8 <HAL_UART_MspInit+0x10c>)
 80022d8:	4293      	cmp	r3, r2
 80022da:	d168      	bne.n	80023ae <HAL_UART_MspInit+0x102>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 80022dc:	2302      	movs	r3, #2
 80022de:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 80022e0:	2300      	movs	r3, #0
 80022e2:	61bb      	str	r3, [r7, #24]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80022e4:	f107 0310 	add.w	r3, r7, #16
 80022e8:	4618      	mov	r0, r3
 80022ea:	f004 fa59 	bl	80067a0 <HAL_RCCEx_PeriphCLKConfig>
 80022ee:	4603      	mov	r3, r0
 80022f0:	2b00      	cmp	r3, #0
 80022f2:	d001      	beq.n	80022f8 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 80022f4:	f7ff fe86 	bl	8002004 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80022f8:	4b30      	ldr	r3, [pc, #192]	@ (80023bc <HAL_UART_MspInit+0x110>)
 80022fa:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80022fc:	4a2f      	ldr	r2, [pc, #188]	@ (80023bc <HAL_UART_MspInit+0x110>)
 80022fe:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002302:	6593      	str	r3, [r2, #88]	@ 0x58
 8002304:	4b2d      	ldr	r3, [pc, #180]	@ (80023bc <HAL_UART_MspInit+0x110>)
 8002306:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002308:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800230c:	60fb      	str	r3, [r7, #12]
 800230e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002310:	4b2a      	ldr	r3, [pc, #168]	@ (80023bc <HAL_UART_MspInit+0x110>)
 8002312:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002314:	4a29      	ldr	r2, [pc, #164]	@ (80023bc <HAL_UART_MspInit+0x110>)
 8002316:	f043 0301 	orr.w	r3, r3, #1
 800231a:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800231c:	4b27      	ldr	r3, [pc, #156]	@ (80023bc <HAL_UART_MspInit+0x110>)
 800231e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002320:	f003 0301 	and.w	r3, r3, #1
 8002324:	60bb      	str	r3, [r7, #8]
 8002326:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8002328:	230c      	movs	r3, #12
 800232a:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800232c:	2302      	movs	r3, #2
 800232e:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002330:	2300      	movs	r3, #0
 8002332:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002334:	2300      	movs	r3, #0
 8002336:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8002338:	2307      	movs	r3, #7
 800233a:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800233c:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8002340:	4619      	mov	r1, r3
 8002342:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002346:	f003 fa75 	bl	8005834 <HAL_GPIO_Init>

    /* USART2 DMA Init */
    /* USART2_TX Init */
    hdma_usart2_tx.Instance = DMA1_Channel1;
 800234a:	4b1d      	ldr	r3, [pc, #116]	@ (80023c0 <HAL_UART_MspInit+0x114>)
 800234c:	4a1d      	ldr	r2, [pc, #116]	@ (80023c4 <HAL_UART_MspInit+0x118>)
 800234e:	601a      	str	r2, [r3, #0]
    hdma_usart2_tx.Init.Request = DMA_REQUEST_USART2_TX;
 8002350:	4b1b      	ldr	r3, [pc, #108]	@ (80023c0 <HAL_UART_MspInit+0x114>)
 8002352:	221b      	movs	r2, #27
 8002354:	605a      	str	r2, [r3, #4]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8002356:	4b1a      	ldr	r3, [pc, #104]	@ (80023c0 <HAL_UART_MspInit+0x114>)
 8002358:	2210      	movs	r2, #16
 800235a:	609a      	str	r2, [r3, #8]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 800235c:	4b18      	ldr	r3, [pc, #96]	@ (80023c0 <HAL_UART_MspInit+0x114>)
 800235e:	2200      	movs	r2, #0
 8002360:	60da      	str	r2, [r3, #12]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8002362:	4b17      	ldr	r3, [pc, #92]	@ (80023c0 <HAL_UART_MspInit+0x114>)
 8002364:	2280      	movs	r2, #128	@ 0x80
 8002366:	611a      	str	r2, [r3, #16]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002368:	4b15      	ldr	r3, [pc, #84]	@ (80023c0 <HAL_UART_MspInit+0x114>)
 800236a:	2200      	movs	r2, #0
 800236c:	615a      	str	r2, [r3, #20]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800236e:	4b14      	ldr	r3, [pc, #80]	@ (80023c0 <HAL_UART_MspInit+0x114>)
 8002370:	2200      	movs	r2, #0
 8002372:	619a      	str	r2, [r3, #24]
    hdma_usart2_tx.Init.Mode = DMA_NORMAL;
 8002374:	4b12      	ldr	r3, [pc, #72]	@ (80023c0 <HAL_UART_MspInit+0x114>)
 8002376:	2200      	movs	r2, #0
 8002378:	61da      	str	r2, [r3, #28]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_HIGH;
 800237a:	4b11      	ldr	r3, [pc, #68]	@ (80023c0 <HAL_UART_MspInit+0x114>)
 800237c:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8002380:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 8002382:	480f      	ldr	r0, [pc, #60]	@ (80023c0 <HAL_UART_MspInit+0x114>)
 8002384:	f002 ff24 	bl	80051d0 <HAL_DMA_Init>
 8002388:	4603      	mov	r3, r0
 800238a:	2b00      	cmp	r3, #0
 800238c:	d001      	beq.n	8002392 <HAL_UART_MspInit+0xe6>
    {
      Error_Handler();
 800238e:	f7ff fe39 	bl	8002004 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart2_tx);
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	4a0a      	ldr	r2, [pc, #40]	@ (80023c0 <HAL_UART_MspInit+0x114>)
 8002396:	67da      	str	r2, [r3, #124]	@ 0x7c
 8002398:	4a09      	ldr	r2, [pc, #36]	@ (80023c0 <HAL_UART_MspInit+0x114>)
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	6293      	str	r3, [r2, #40]	@ 0x28

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 800239e:	2200      	movs	r2, #0
 80023a0:	2100      	movs	r1, #0
 80023a2:	2026      	movs	r0, #38	@ 0x26
 80023a4:	f002 fedf 	bl	8005166 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 80023a8:	2026      	movs	r0, #38	@ 0x26
 80023aa:	f002 fef6 	bl	800519a <HAL_NVIC_EnableIRQ>

  /* USER CODE END USART2_MspInit 1 */

  }

}
 80023ae:	bf00      	nop
 80023b0:	3768      	adds	r7, #104	@ 0x68
 80023b2:	46bd      	mov	sp, r7
 80023b4:	bd80      	pop	{r7, pc}
 80023b6:	bf00      	nop
 80023b8:	40004400 	.word	0x40004400
 80023bc:	40021000 	.word	0x40021000
 80023c0:	2000057c 	.word	0x2000057c
 80023c4:	40020008 	.word	0x40020008

080023c8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80023c8:	b480      	push	{r7}
 80023ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80023cc:	bf00      	nop
 80023ce:	e7fd      	b.n	80023cc <NMI_Handler+0x4>

080023d0 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80023d0:	b480      	push	{r7}
 80023d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80023d4:	bf00      	nop
 80023d6:	e7fd      	b.n	80023d4 <HardFault_Handler+0x4>

080023d8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80023d8:	b480      	push	{r7}
 80023da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80023dc:	bf00      	nop
 80023de:	e7fd      	b.n	80023dc <MemManage_Handler+0x4>

080023e0 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80023e0:	b480      	push	{r7}
 80023e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80023e4:	bf00      	nop
 80023e6:	e7fd      	b.n	80023e4 <BusFault_Handler+0x4>

080023e8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80023e8:	b480      	push	{r7}
 80023ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80023ec:	bf00      	nop
 80023ee:	e7fd      	b.n	80023ec <UsageFault_Handler+0x4>

080023f0 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80023f0:	b480      	push	{r7}
 80023f2:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80023f4:	bf00      	nop
 80023f6:	46bd      	mov	sp, r7
 80023f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023fc:	4770      	bx	lr

080023fe <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80023fe:	b480      	push	{r7}
 8002400:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002402:	bf00      	nop
 8002404:	46bd      	mov	sp, r7
 8002406:	f85d 7b04 	ldr.w	r7, [sp], #4
 800240a:	4770      	bx	lr

0800240c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800240c:	b480      	push	{r7}
 800240e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002410:	bf00      	nop
 8002412:	46bd      	mov	sp, r7
 8002414:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002418:	4770      	bx	lr

0800241a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800241a:	b580      	push	{r7, lr}
 800241c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800241e:	f002 fd19 	bl	8004e54 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002422:	bf00      	nop
 8002424:	bd80      	pop	{r7, pc}
	...

08002428 <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 8002428:	b580      	push	{r7, lr}
 800242a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

if (__HAL_GPIO_EXTI_GET_FLAG(ENC_INDEX_Pin))
 800242c:	4b07      	ldr	r3, [pc, #28]	@ (800244c <EXTI0_IRQHandler+0x24>)
 800242e:	695b      	ldr	r3, [r3, #20]
 8002430:	f003 0301 	and.w	r3, r3, #1
 8002434:	2b00      	cmp	r3, #0
 8002436:	d003      	beq.n	8002440 <EXTI0_IRQHandler+0x18>
	{ HAL_GPIO_TogglePin(GPIOB,FAULT_LED_Pin);
 8002438:	2180      	movs	r1, #128	@ 0x80
 800243a:	4805      	ldr	r0, [pc, #20]	@ (8002450 <EXTI0_IRQHandler+0x28>)
 800243c:	f003 fb94 	bl	8005b68 <HAL_GPIO_TogglePin>
		}
  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(ENC_INDEX_Pin);
 8002440:	2001      	movs	r0, #1
 8002442:	f003 fbab 	bl	8005b9c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 8002446:	bf00      	nop
 8002448:	bd80      	pop	{r7, pc}
 800244a:	bf00      	nop
 800244c:	40010400 	.word	0x40010400
 8002450:	48000400 	.word	0x48000400

08002454 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8002454:	b580      	push	{r7, lr}
 8002456:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 8002458:	4802      	ldr	r0, [pc, #8]	@ (8002464 <DMA1_Channel1_IRQHandler+0x10>)
 800245a:	f003 f89c 	bl	8005596 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 800245e:	bf00      	nop
 8002460:	bd80      	pop	{r7, pc}
 8002462:	bf00      	nop
 8002464:	2000057c 	.word	0x2000057c

08002468 <TIM1_UP_TIM16_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM16 global interrupt.
  */
void TIM1_UP_TIM16_IRQHandler(void)
{
 8002468:	b580      	push	{r7, lr}
 800246a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 800246c:	4802      	ldr	r0, [pc, #8]	@ (8002478 <TIM1_UP_TIM16_IRQHandler+0x10>)
 800246e:	f005 fa6f 	bl	8007950 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 1 */
}
 8002472:	bf00      	nop
 8002474:	bd80      	pop	{r7, pc}
 8002476:	bf00      	nop
 8002478:	20000404 	.word	0x20000404

0800247c <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt / USART2 wake-up interrupt through EXTI line 26.
  */
void USART2_IRQHandler(void)
{
 800247c:	b580      	push	{r7, lr}
 800247e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8002480:	4802      	ldr	r0, [pc, #8]	@ (800248c <USART2_IRQHandler+0x10>)
 8002482:	f006 fd9b 	bl	8008fbc <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8002486:	bf00      	nop
 8002488:	bd80      	pop	{r7, pc}
 800248a:	bf00      	nop
 800248c:	200004e8 	.word	0x200004e8

08002490 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC3 channel underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8002490:	b580      	push	{r7, lr}
 8002492:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8002494:	4802      	ldr	r0, [pc, #8]	@ (80024a0 <TIM6_DAC_IRQHandler+0x10>)
 8002496:	f005 fa5b 	bl	8007950 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 800249a:	bf00      	nop
 800249c:	bd80      	pop	{r7, pc}
 800249e:	bf00      	nop
 80024a0:	20000450 	.word	0x20000450

080024a4 <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 80024a4:	b580      	push	{r7, lr}
 80024a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_IRQn 0 */

  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 80024a8:	4802      	ldr	r0, [pc, #8]	@ (80024b4 <TIM7_IRQHandler+0x10>)
 80024aa:	f005 fa51 	bl	8007950 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */

  /* USER CODE END TIM7_IRQn 1 */
}
 80024ae:	bf00      	nop
 80024b0:	bd80      	pop	{r7, pc}
 80024b2:	bf00      	nop
 80024b4:	2000049c 	.word	0x2000049c

080024b8 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80024b8:	b480      	push	{r7}
 80024ba:	af00      	add	r7, sp, #0
  return 1;
 80024bc:	2301      	movs	r3, #1
}
 80024be:	4618      	mov	r0, r3
 80024c0:	46bd      	mov	sp, r7
 80024c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024c6:	4770      	bx	lr

080024c8 <_kill>:

int _kill(int pid, int sig)
{
 80024c8:	b580      	push	{r7, lr}
 80024ca:	b082      	sub	sp, #8
 80024cc:	af00      	add	r7, sp, #0
 80024ce:	6078      	str	r0, [r7, #4]
 80024d0:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80024d2:	f008 fdab 	bl	800b02c <__errno>
 80024d6:	4603      	mov	r3, r0
 80024d8:	2216      	movs	r2, #22
 80024da:	601a      	str	r2, [r3, #0]
  return -1;
 80024dc:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 80024e0:	4618      	mov	r0, r3
 80024e2:	3708      	adds	r7, #8
 80024e4:	46bd      	mov	sp, r7
 80024e6:	bd80      	pop	{r7, pc}

080024e8 <_exit>:

void _exit (int status)
{
 80024e8:	b580      	push	{r7, lr}
 80024ea:	b082      	sub	sp, #8
 80024ec:	af00      	add	r7, sp, #0
 80024ee:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 80024f0:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 80024f4:	6878      	ldr	r0, [r7, #4]
 80024f6:	f7ff ffe7 	bl	80024c8 <_kill>
  while (1) {}    /* Make sure we hang here */
 80024fa:	bf00      	nop
 80024fc:	e7fd      	b.n	80024fa <_exit+0x12>

080024fe <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80024fe:	b580      	push	{r7, lr}
 8002500:	b086      	sub	sp, #24
 8002502:	af00      	add	r7, sp, #0
 8002504:	60f8      	str	r0, [r7, #12]
 8002506:	60b9      	str	r1, [r7, #8]
 8002508:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800250a:	2300      	movs	r3, #0
 800250c:	617b      	str	r3, [r7, #20]
 800250e:	e00a      	b.n	8002526 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8002510:	f3af 8000 	nop.w
 8002514:	4601      	mov	r1, r0
 8002516:	68bb      	ldr	r3, [r7, #8]
 8002518:	1c5a      	adds	r2, r3, #1
 800251a:	60ba      	str	r2, [r7, #8]
 800251c:	b2ca      	uxtb	r2, r1
 800251e:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002520:	697b      	ldr	r3, [r7, #20]
 8002522:	3301      	adds	r3, #1
 8002524:	617b      	str	r3, [r7, #20]
 8002526:	697a      	ldr	r2, [r7, #20]
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	429a      	cmp	r2, r3
 800252c:	dbf0      	blt.n	8002510 <_read+0x12>
  }

  return len;
 800252e:	687b      	ldr	r3, [r7, #4]
}
 8002530:	4618      	mov	r0, r3
 8002532:	3718      	adds	r7, #24
 8002534:	46bd      	mov	sp, r7
 8002536:	bd80      	pop	{r7, pc}

08002538 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002538:	b580      	push	{r7, lr}
 800253a:	b086      	sub	sp, #24
 800253c:	af00      	add	r7, sp, #0
 800253e:	60f8      	str	r0, [r7, #12]
 8002540:	60b9      	str	r1, [r7, #8]
 8002542:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002544:	2300      	movs	r3, #0
 8002546:	617b      	str	r3, [r7, #20]
 8002548:	e009      	b.n	800255e <_write+0x26>
  {
    __io_putchar(*ptr++);
 800254a:	68bb      	ldr	r3, [r7, #8]
 800254c:	1c5a      	adds	r2, r3, #1
 800254e:	60ba      	str	r2, [r7, #8]
 8002550:	781b      	ldrb	r3, [r3, #0]
 8002552:	4618      	mov	r0, r3
 8002554:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002558:	697b      	ldr	r3, [r7, #20]
 800255a:	3301      	adds	r3, #1
 800255c:	617b      	str	r3, [r7, #20]
 800255e:	697a      	ldr	r2, [r7, #20]
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	429a      	cmp	r2, r3
 8002564:	dbf1      	blt.n	800254a <_write+0x12>
  }
  return len;
 8002566:	687b      	ldr	r3, [r7, #4]
}
 8002568:	4618      	mov	r0, r3
 800256a:	3718      	adds	r7, #24
 800256c:	46bd      	mov	sp, r7
 800256e:	bd80      	pop	{r7, pc}

08002570 <_close>:

int _close(int file)
{
 8002570:	b480      	push	{r7}
 8002572:	b083      	sub	sp, #12
 8002574:	af00      	add	r7, sp, #0
 8002576:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8002578:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 800257c:	4618      	mov	r0, r3
 800257e:	370c      	adds	r7, #12
 8002580:	46bd      	mov	sp, r7
 8002582:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002586:	4770      	bx	lr

08002588 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002588:	b480      	push	{r7}
 800258a:	b083      	sub	sp, #12
 800258c:	af00      	add	r7, sp, #0
 800258e:	6078      	str	r0, [r7, #4]
 8002590:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8002592:	683b      	ldr	r3, [r7, #0]
 8002594:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8002598:	605a      	str	r2, [r3, #4]
  return 0;
 800259a:	2300      	movs	r3, #0
}
 800259c:	4618      	mov	r0, r3
 800259e:	370c      	adds	r7, #12
 80025a0:	46bd      	mov	sp, r7
 80025a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025a6:	4770      	bx	lr

080025a8 <_isatty>:

int _isatty(int file)
{
 80025a8:	b480      	push	{r7}
 80025aa:	b083      	sub	sp, #12
 80025ac:	af00      	add	r7, sp, #0
 80025ae:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80025b0:	2301      	movs	r3, #1
}
 80025b2:	4618      	mov	r0, r3
 80025b4:	370c      	adds	r7, #12
 80025b6:	46bd      	mov	sp, r7
 80025b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025bc:	4770      	bx	lr

080025be <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80025be:	b480      	push	{r7}
 80025c0:	b085      	sub	sp, #20
 80025c2:	af00      	add	r7, sp, #0
 80025c4:	60f8      	str	r0, [r7, #12]
 80025c6:	60b9      	str	r1, [r7, #8]
 80025c8:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80025ca:	2300      	movs	r3, #0
}
 80025cc:	4618      	mov	r0, r3
 80025ce:	3714      	adds	r7, #20
 80025d0:	46bd      	mov	sp, r7
 80025d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025d6:	4770      	bx	lr

080025d8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80025d8:	b580      	push	{r7, lr}
 80025da:	b086      	sub	sp, #24
 80025dc:	af00      	add	r7, sp, #0
 80025de:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80025e0:	4a14      	ldr	r2, [pc, #80]	@ (8002634 <_sbrk+0x5c>)
 80025e2:	4b15      	ldr	r3, [pc, #84]	@ (8002638 <_sbrk+0x60>)
 80025e4:	1ad3      	subs	r3, r2, r3
 80025e6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80025e8:	697b      	ldr	r3, [r7, #20]
 80025ea:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80025ec:	4b13      	ldr	r3, [pc, #76]	@ (800263c <_sbrk+0x64>)
 80025ee:	681b      	ldr	r3, [r3, #0]
 80025f0:	2b00      	cmp	r3, #0
 80025f2:	d102      	bne.n	80025fa <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80025f4:	4b11      	ldr	r3, [pc, #68]	@ (800263c <_sbrk+0x64>)
 80025f6:	4a12      	ldr	r2, [pc, #72]	@ (8002640 <_sbrk+0x68>)
 80025f8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80025fa:	4b10      	ldr	r3, [pc, #64]	@ (800263c <_sbrk+0x64>)
 80025fc:	681a      	ldr	r2, [r3, #0]
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	4413      	add	r3, r2
 8002602:	693a      	ldr	r2, [r7, #16]
 8002604:	429a      	cmp	r2, r3
 8002606:	d207      	bcs.n	8002618 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002608:	f008 fd10 	bl	800b02c <__errno>
 800260c:	4603      	mov	r3, r0
 800260e:	220c      	movs	r2, #12
 8002610:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002612:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8002616:	e009      	b.n	800262c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002618:	4b08      	ldr	r3, [pc, #32]	@ (800263c <_sbrk+0x64>)
 800261a:	681b      	ldr	r3, [r3, #0]
 800261c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800261e:	4b07      	ldr	r3, [pc, #28]	@ (800263c <_sbrk+0x64>)
 8002620:	681a      	ldr	r2, [r3, #0]
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	4413      	add	r3, r2
 8002626:	4a05      	ldr	r2, [pc, #20]	@ (800263c <_sbrk+0x64>)
 8002628:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800262a:	68fb      	ldr	r3, [r7, #12]
}
 800262c:	4618      	mov	r0, r3
 800262e:	3718      	adds	r7, #24
 8002630:	46bd      	mov	sp, r7
 8002632:	bd80      	pop	{r7, pc}
 8002634:	20008000 	.word	0x20008000
 8002638:	00000400 	.word	0x00000400
 800263c:	200018a0 	.word	0x200018a0
 8002640:	20001a00 	.word	0x20001a00

08002644 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8002644:	b480      	push	{r7}
 8002646:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8002648:	4b06      	ldr	r3, [pc, #24]	@ (8002664 <SystemInit+0x20>)
 800264a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800264e:	4a05      	ldr	r2, [pc, #20]	@ (8002664 <SystemInit+0x20>)
 8002650:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8002654:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002658:	bf00      	nop
 800265a:	46bd      	mov	sp, r7
 800265c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002660:	4770      	bx	lr
 8002662:	bf00      	nop
 8002664:	e000ed00 	.word	0xe000ed00

08002668 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8002668:	480d      	ldr	r0, [pc, #52]	@ (80026a0 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800266a:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800266c:	480d      	ldr	r0, [pc, #52]	@ (80026a4 <LoopForever+0x6>)
  ldr r1, =_edata
 800266e:	490e      	ldr	r1, [pc, #56]	@ (80026a8 <LoopForever+0xa>)
  ldr r2, =_sidata
 8002670:	4a0e      	ldr	r2, [pc, #56]	@ (80026ac <LoopForever+0xe>)
  movs r3, #0
 8002672:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8002674:	e002      	b.n	800267c <LoopCopyDataInit>

08002676 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002676:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002678:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800267a:	3304      	adds	r3, #4

0800267c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800267c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800267e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002680:	d3f9      	bcc.n	8002676 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002682:	4a0b      	ldr	r2, [pc, #44]	@ (80026b0 <LoopForever+0x12>)
  ldr r4, =_ebss
 8002684:	4c0b      	ldr	r4, [pc, #44]	@ (80026b4 <LoopForever+0x16>)
  movs r3, #0
 8002686:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002688:	e001      	b.n	800268e <LoopFillZerobss>

0800268a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800268a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800268c:	3204      	adds	r2, #4

0800268e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800268e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002690:	d3fb      	bcc.n	800268a <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8002692:	f7ff ffd7 	bl	8002644 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002696:	f008 fccf 	bl	800b038 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800269a:	f7fe fec7 	bl	800142c <main>

0800269e <LoopForever>:

LoopForever:
    b LoopForever
 800269e:	e7fe      	b.n	800269e <LoopForever>
  ldr   r0, =_estack
 80026a0:	20008000 	.word	0x20008000
  ldr r0, =_sdata
 80026a4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80026a8:	2000035c 	.word	0x2000035c
  ldr r2, =_sidata
 80026ac:	0800d1b8 	.word	0x0800d1b8
  ldr r2, =_sbss
 80026b0:	2000035c 	.word	0x2000035c
  ldr r4, =_ebss
 80026b4:	20001a00 	.word	0x20001a00

080026b8 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80026b8:	e7fe      	b.n	80026b8 <ADC1_2_IRQHandler>

080026ba <parityCheck>:
uint8_t checkReadForError(uint16_t data){
	return (data & 0x4000)>>15; // check if 15th bit is 1.
}

// Check Parity of a given data.
bool parityCheck(uint16_t data){
 80026ba:	b480      	push	{r7}
 80026bc:	b087      	sub	sp, #28
 80026be:	af00      	add	r7, sp, #0
 80026c0:	4603      	mov	r3, r0
 80026c2:	80fb      	strh	r3, [r7, #6]
  uint16_t count=0;
 80026c4:	2300      	movs	r3, #0
 80026c6:	82fb      	strh	r3, [r7, #22]
  uint16_t b = 1;
 80026c8:	2301      	movs	r3, #1
 80026ca:	81fb      	strh	r3, [r7, #14]
  for (int i=0; i<15; i++){
 80026cc:	2300      	movs	r3, #0
 80026ce:	613b      	str	r3, [r7, #16]
 80026d0:	e00d      	b.n	80026ee <parityCheck+0x34>
    if (data & (b << i)) {
 80026d2:	88fa      	ldrh	r2, [r7, #6]
 80026d4:	89f9      	ldrh	r1, [r7, #14]
 80026d6:	693b      	ldr	r3, [r7, #16]
 80026d8:	fa01 f303 	lsl.w	r3, r1, r3
 80026dc:	4013      	ands	r3, r2
 80026de:	2b00      	cmp	r3, #0
 80026e0:	d002      	beq.n	80026e8 <parityCheck+0x2e>
      count++;
 80026e2:	8afb      	ldrh	r3, [r7, #22]
 80026e4:	3301      	adds	r3, #1
 80026e6:	82fb      	strh	r3, [r7, #22]
  for (int i=0; i<15; i++){
 80026e8:	693b      	ldr	r3, [r7, #16]
 80026ea:	3301      	adds	r3, #1
 80026ec:	613b      	str	r3, [r7, #16]
 80026ee:	693b      	ldr	r3, [r7, #16]
 80026f0:	2b0e      	cmp	r3, #14
 80026f2:	ddee      	ble.n	80026d2 <parityCheck+0x18>
    }
  }

  if (count%2==0) {
 80026f4:	8afb      	ldrh	r3, [r7, #22]
 80026f6:	f003 0301 	and.w	r3, r3, #1
 80026fa:	b29b      	uxth	r3, r3
 80026fc:	2b00      	cmp	r3, #0
 80026fe:	d101      	bne.n	8002704 <parityCheck+0x4a>
    return 0;
 8002700:	2300      	movs	r3, #0
 8002702:	e000      	b.n	8002706 <parityCheck+0x4c>
  } else {
    return 1;
 8002704:	2301      	movs	r3, #1
  }
}
 8002706:	4618      	mov	r0, r3
 8002708:	371c      	adds	r7, #28
 800270a:	46bd      	mov	sp, r7
 800270c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002710:	4770      	bx	lr
	...

08002714 <AS5047_SPI_Write>:

//SPI_write and read are polling Fns;Timeout is set for 100ms
uint8_t AS5047_SPI_Write(uint16_t addressFrame, uint16_t valueFrame) {
 8002714:	b580      	push	{r7, lr}
 8002716:	b086      	sub	sp, #24
 8002718:	af02      	add	r7, sp, #8
 800271a:	4603      	mov	r3, r0
 800271c:	460a      	mov	r2, r1
 800271e:	80fb      	strh	r3, [r7, #6]
 8002720:	4613      	mov	r3, r2
 8002722:	80bb      	strh	r3, [r7, #4]

  //write which address needed to be updated.
  txbuf[0] = (addressFrame) >> 8;
 8002724:	88fb      	ldrh	r3, [r7, #6]
 8002726:	0a1b      	lsrs	r3, r3, #8
 8002728:	b29b      	uxth	r3, r3
 800272a:	b2da      	uxtb	r2, r3
 800272c:	4b48      	ldr	r3, [pc, #288]	@ (8002850 <AS5047_SPI_Write+0x13c>)
 800272e:	701a      	strb	r2, [r3, #0]
  txbuf[1] = addressFrame & 0xFF;
 8002730:	88fb      	ldrh	r3, [r7, #6]
 8002732:	b2da      	uxtb	r2, r3
 8002734:	4b46      	ldr	r3, [pc, #280]	@ (8002850 <AS5047_SPI_Write+0x13c>)
 8002736:	705a      	strb	r2, [r3, #1]
  HAL_GPIO_WritePin(SPI1_CS_GPIO_Port, SPI1_CS_Pin, GPIO_PIN_RESET);
 8002738:	2200      	movs	r2, #0
 800273a:	2140      	movs	r1, #64	@ 0x40
 800273c:	4845      	ldr	r0, [pc, #276]	@ (8002854 <AS5047_SPI_Write+0x140>)
 800273e:	f003 f9fb 	bl	8005b38 <HAL_GPIO_WritePin>
  HAL_SPI_TransmitReceive(&hspi1, (uint8_t*)&txbuf, (uint8_t*)&rxbuf, 2, 100);
 8002742:	2364      	movs	r3, #100	@ 0x64
 8002744:	9300      	str	r3, [sp, #0]
 8002746:	2302      	movs	r3, #2
 8002748:	4a43      	ldr	r2, [pc, #268]	@ (8002858 <AS5047_SPI_Write+0x144>)
 800274a:	4941      	ldr	r1, [pc, #260]	@ (8002850 <AS5047_SPI_Write+0x13c>)
 800274c:	4843      	ldr	r0, [pc, #268]	@ (800285c <AS5047_SPI_Write+0x148>)
 800274e:	f004 fac2 	bl	8006cd6 <HAL_SPI_TransmitReceive>
  while( hspi1.State == HAL_SPI_STATE_BUSY );
 8002752:	bf00      	nop
 8002754:	4b41      	ldr	r3, [pc, #260]	@ (800285c <AS5047_SPI_Write+0x148>)
 8002756:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 800275a:	b2db      	uxtb	r3, r3
 800275c:	2b02      	cmp	r3, #2
 800275e:	d0f9      	beq.n	8002754 <AS5047_SPI_Write+0x40>
  HAL_GPIO_WritePin(SPI1_CS_GPIO_Port, SPI1_CS_Pin, GPIO_PIN_SET);
 8002760:	2201      	movs	r2, #1
 8002762:	2140      	movs	r1, #64	@ 0x40
 8002764:	483b      	ldr	r0, [pc, #236]	@ (8002854 <AS5047_SPI_Write+0x140>)
 8002766:	f003 f9e7 	bl	8005b38 <HAL_GPIO_WritePin>

  uint16_t recievedFrame = ((uint16_t)rxbuf[0])<<8;
 800276a:	4b3b      	ldr	r3, [pc, #236]	@ (8002858 <AS5047_SPI_Write+0x144>)
 800276c:	781b      	ldrb	r3, [r3, #0]
 800276e:	021b      	lsls	r3, r3, #8
 8002770:	81fb      	strh	r3, [r7, #14]
  recievedFrame += rxbuf[1];
 8002772:	4b39      	ldr	r3, [pc, #228]	@ (8002858 <AS5047_SPI_Write+0x144>)
 8002774:	785b      	ldrb	r3, [r3, #1]
 8002776:	461a      	mov	r2, r3
 8002778:	89fb      	ldrh	r3, [r7, #14]
 800277a:	4413      	add	r3, r2
 800277c:	81fb      	strh	r3, [r7, #14]

  //this is value that will be stored inside the respective register
  txbuf[0] = (valueFrame) >> 8;
 800277e:	88bb      	ldrh	r3, [r7, #4]
 8002780:	0a1b      	lsrs	r3, r3, #8
 8002782:	b29b      	uxth	r3, r3
 8002784:	b2da      	uxtb	r2, r3
 8002786:	4b32      	ldr	r3, [pc, #200]	@ (8002850 <AS5047_SPI_Write+0x13c>)
 8002788:	701a      	strb	r2, [r3, #0]
  txbuf[1] = valueFrame & 0xFF;
 800278a:	88bb      	ldrh	r3, [r7, #4]
 800278c:	b2da      	uxtb	r2, r3
 800278e:	4b30      	ldr	r3, [pc, #192]	@ (8002850 <AS5047_SPI_Write+0x13c>)
 8002790:	705a      	strb	r2, [r3, #1]
  HAL_GPIO_WritePin(SPI1_CS_GPIO_Port, SPI1_CS_Pin, GPIO_PIN_RESET);
 8002792:	2200      	movs	r2, #0
 8002794:	2140      	movs	r1, #64	@ 0x40
 8002796:	482f      	ldr	r0, [pc, #188]	@ (8002854 <AS5047_SPI_Write+0x140>)
 8002798:	f003 f9ce 	bl	8005b38 <HAL_GPIO_WritePin>
  HAL_SPI_TransmitReceive(&hspi1, (uint8_t*)&txbuf, (uint8_t*)&rxbuf, 2, 100);
 800279c:	2364      	movs	r3, #100	@ 0x64
 800279e:	9300      	str	r3, [sp, #0]
 80027a0:	2302      	movs	r3, #2
 80027a2:	4a2d      	ldr	r2, [pc, #180]	@ (8002858 <AS5047_SPI_Write+0x144>)
 80027a4:	492a      	ldr	r1, [pc, #168]	@ (8002850 <AS5047_SPI_Write+0x13c>)
 80027a6:	482d      	ldr	r0, [pc, #180]	@ (800285c <AS5047_SPI_Write+0x148>)
 80027a8:	f004 fa95 	bl	8006cd6 <HAL_SPI_TransmitReceive>
  while( hspi1.State == HAL_SPI_STATE_BUSY );
 80027ac:	bf00      	nop
 80027ae:	4b2b      	ldr	r3, [pc, #172]	@ (800285c <AS5047_SPI_Write+0x148>)
 80027b0:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 80027b4:	b2db      	uxtb	r3, r3
 80027b6:	2b02      	cmp	r3, #2
 80027b8:	d0f9      	beq.n	80027ae <AS5047_SPI_Write+0x9a>
  HAL_GPIO_WritePin(SPI1_CS_GPIO_Port, SPI1_CS_Pin, GPIO_PIN_SET);
 80027ba:	2201      	movs	r2, #1
 80027bc:	2140      	movs	r1, #64	@ 0x40
 80027be:	4825      	ldr	r0, [pc, #148]	@ (8002854 <AS5047_SPI_Write+0x140>)
 80027c0:	f003 f9ba 	bl	8005b38 <HAL_GPIO_WritePin>

  recievedFrame = ((uint16_t)rxbuf[0])<<8;
 80027c4:	4b24      	ldr	r3, [pc, #144]	@ (8002858 <AS5047_SPI_Write+0x144>)
 80027c6:	781b      	ldrb	r3, [r3, #0]
 80027c8:	021b      	lsls	r3, r3, #8
 80027ca:	81fb      	strh	r3, [r7, #14]
  recievedFrame += rxbuf[1];
 80027cc:	4b22      	ldr	r3, [pc, #136]	@ (8002858 <AS5047_SPI_Write+0x144>)
 80027ce:	785b      	ldrb	r3, [r3, #1]
 80027d0:	461a      	mov	r2, r3
 80027d2:	89fb      	ldrh	r3, [r7, #14]
 80027d4:	4413      	add	r3, r2
 80027d6:	81fb      	strh	r3, [r7, #14]

  //check if data has been written properly, will receive the written value in the recieve buffer
  txbuf[0] = NOP_FRAME >> 8;
 80027d8:	4b1d      	ldr	r3, [pc, #116]	@ (8002850 <AS5047_SPI_Write+0x13c>)
 80027da:	22c0      	movs	r2, #192	@ 0xc0
 80027dc:	701a      	strb	r2, [r3, #0]
  txbuf[1] = NOP_FRAME & 0xFF;
 80027de:	4b1c      	ldr	r3, [pc, #112]	@ (8002850 <AS5047_SPI_Write+0x13c>)
 80027e0:	2200      	movs	r2, #0
 80027e2:	705a      	strb	r2, [r3, #1]
  HAL_GPIO_WritePin(SPI1_CS_GPIO_Port, SPI1_CS_Pin, GPIO_PIN_RESET);
 80027e4:	2200      	movs	r2, #0
 80027e6:	2140      	movs	r1, #64	@ 0x40
 80027e8:	481a      	ldr	r0, [pc, #104]	@ (8002854 <AS5047_SPI_Write+0x140>)
 80027ea:	f003 f9a5 	bl	8005b38 <HAL_GPIO_WritePin>
  HAL_SPI_TransmitReceive(&hspi1, (uint8_t*)&txbuf, (uint8_t*)&rxbuf, 2, 100);
 80027ee:	2364      	movs	r3, #100	@ 0x64
 80027f0:	9300      	str	r3, [sp, #0]
 80027f2:	2302      	movs	r3, #2
 80027f4:	4a18      	ldr	r2, [pc, #96]	@ (8002858 <AS5047_SPI_Write+0x144>)
 80027f6:	4916      	ldr	r1, [pc, #88]	@ (8002850 <AS5047_SPI_Write+0x13c>)
 80027f8:	4818      	ldr	r0, [pc, #96]	@ (800285c <AS5047_SPI_Write+0x148>)
 80027fa:	f004 fa6c 	bl	8006cd6 <HAL_SPI_TransmitReceive>
  while( hspi1.State == HAL_SPI_STATE_BUSY );
 80027fe:	bf00      	nop
 8002800:	4b16      	ldr	r3, [pc, #88]	@ (800285c <AS5047_SPI_Write+0x148>)
 8002802:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8002806:	b2db      	uxtb	r3, r3
 8002808:	2b02      	cmp	r3, #2
 800280a:	d0f9      	beq.n	8002800 <AS5047_SPI_Write+0xec>
  HAL_GPIO_WritePin(SPI1_CS_GPIO_Port, SPI1_CS_Pin, GPIO_PIN_SET);
 800280c:	2201      	movs	r2, #1
 800280e:	2140      	movs	r1, #64	@ 0x40
 8002810:	4810      	ldr	r0, [pc, #64]	@ (8002854 <AS5047_SPI_Write+0x140>)
 8002812:	f003 f991 	bl	8005b38 <HAL_GPIO_WritePin>

  //DEBUG WHY THIS IS NOT WORKING LATER.
  //check if recieved data is same as what we wanted to write
  recievedFrame = ((uint16_t)rxbuf[0])<<8;
 8002816:	4b10      	ldr	r3, [pc, #64]	@ (8002858 <AS5047_SPI_Write+0x144>)
 8002818:	781b      	ldrb	r3, [r3, #0]
 800281a:	021b      	lsls	r3, r3, #8
 800281c:	81fb      	strh	r3, [r7, #14]
  recievedFrame += rxbuf[1];
 800281e:	4b0e      	ldr	r3, [pc, #56]	@ (8002858 <AS5047_SPI_Write+0x144>)
 8002820:	785b      	ldrb	r3, [r3, #1]
 8002822:	461a      	mov	r2, r3
 8002824:	89fb      	ldrh	r3, [r7, #14]
 8002826:	4413      	add	r3, r2
 8002828:	81fb      	strh	r3, [r7, #14]

  uint16_t receivedData = recievedFrame & 0x3FFF;
 800282a:	89fb      	ldrh	r3, [r7, #14]
 800282c:	f3c3 030d 	ubfx	r3, r3, #0, #14
 8002830:	81bb      	strh	r3, [r7, #12]
  uint16_t writtenData = valueFrame & 0x3FFF;
 8002832:	88bb      	ldrh	r3, [r7, #4]
 8002834:	f3c3 030d 	ubfx	r3, r3, #0, #14
 8002838:	817b      	strh	r3, [r7, #10]

  if ((writtenData) == receivedData){
 800283a:	897a      	ldrh	r2, [r7, #10]
 800283c:	89bb      	ldrh	r3, [r7, #12]
 800283e:	429a      	cmp	r2, r3
 8002840:	d101      	bne.n	8002846 <AS5047_SPI_Write+0x132>
	  return 1;
 8002842:	2301      	movs	r3, #1
 8002844:	e000      	b.n	8002848 <AS5047_SPI_Write+0x134>
  }

  return 0;
 8002846:	2300      	movs	r3, #0
}
 8002848:	4618      	mov	r0, r3
 800284a:	3710      	adds	r7, #16
 800284c:	46bd      	mov	sp, r7
 800284e:	bd80      	pop	{r7, pc}
 8002850:	200018a4 	.word	0x200018a4
 8002854:	48000400 	.word	0x48000400
 8002858:	200018a8 	.word	0x200018a8
 800285c:	200003a0 	.word	0x200003a0

08002860 <AS5047_SPI_Read>:


uint16_t AS5047_SPI_Read(uint16_t command, uint8_t continuousRead) {
 8002860:	b580      	push	{r7, lr}
 8002862:	b086      	sub	sp, #24
 8002864:	af02      	add	r7, sp, #8
 8002866:	4603      	mov	r3, r0
 8002868:	460a      	mov	r2, r1
 800286a:	80fb      	strh	r3, [r7, #6]
 800286c:	4613      	mov	r3, r2
 800286e:	717b      	strb	r3, [r7, #5]
  //write command frame.
  uint16_t finalDataVal;
  txbuf[0] = command >> 8U;
 8002870:	88fb      	ldrh	r3, [r7, #6]
 8002872:	0a1b      	lsrs	r3, r3, #8
 8002874:	b29b      	uxth	r3, r3
 8002876:	b2da      	uxtb	r2, r3
 8002878:	4b27      	ldr	r3, [pc, #156]	@ (8002918 <AS5047_SPI_Read+0xb8>)
 800287a:	701a      	strb	r2, [r3, #0]
  txbuf[1] = command & 0xFF;
 800287c:	88fb      	ldrh	r3, [r7, #6]
 800287e:	b2da      	uxtb	r2, r3
 8002880:	4b25      	ldr	r3, [pc, #148]	@ (8002918 <AS5047_SPI_Read+0xb8>)
 8002882:	705a      	strb	r2, [r3, #1]
  HAL_GPIO_WritePin(SPI1_CS_GPIO_Port, SPI1_CS_Pin, GPIO_PIN_RESET);
 8002884:	2200      	movs	r2, #0
 8002886:	2140      	movs	r1, #64	@ 0x40
 8002888:	4824      	ldr	r0, [pc, #144]	@ (800291c <AS5047_SPI_Read+0xbc>)
 800288a:	f003 f955 	bl	8005b38 <HAL_GPIO_WritePin>
  HAL_SPI_TransmitReceive(&hspi1, (uint8_t*)&txbuf, (uint8_t*)&rxbuf,2,100);
 800288e:	2364      	movs	r3, #100	@ 0x64
 8002890:	9300      	str	r3, [sp, #0]
 8002892:	2302      	movs	r3, #2
 8002894:	4a22      	ldr	r2, [pc, #136]	@ (8002920 <AS5047_SPI_Read+0xc0>)
 8002896:	4920      	ldr	r1, [pc, #128]	@ (8002918 <AS5047_SPI_Read+0xb8>)
 8002898:	4822      	ldr	r0, [pc, #136]	@ (8002924 <AS5047_SPI_Read+0xc4>)
 800289a:	f004 fa1c 	bl	8006cd6 <HAL_SPI_TransmitReceive>
  while( hspi1.State == HAL_SPI_STATE_BUSY );
 800289e:	bf00      	nop
 80028a0:	4b20      	ldr	r3, [pc, #128]	@ (8002924 <AS5047_SPI_Read+0xc4>)
 80028a2:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 80028a6:	b2db      	uxtb	r3, r3
 80028a8:	2b02      	cmp	r3, #2
 80028aa:	d0f9      	beq.n	80028a0 <AS5047_SPI_Read+0x40>
  HAL_GPIO_WritePin(SPI1_CS_GPIO_Port, SPI1_CS_Pin, GPIO_PIN_SET);
 80028ac:	2201      	movs	r2, #1
 80028ae:	2140      	movs	r1, #64	@ 0x40
 80028b0:	481a      	ldr	r0, [pc, #104]	@ (800291c <AS5047_SPI_Read+0xbc>)
 80028b2:	f003 f941 	bl	8005b38 <HAL_GPIO_WritePin>

  if (continuousRead ==0){
 80028b6:	797b      	ldrb	r3, [r7, #5]
 80028b8:	2b00      	cmp	r3, #0
 80028ba:	d11e      	bne.n	80028fa <AS5047_SPI_Read+0x9a>
	  //this is the NOP command frame for receiving data if you want to read the register once.
	  txbuf[0] = NOP_FRAME >> 8;
 80028bc:	4b16      	ldr	r3, [pc, #88]	@ (8002918 <AS5047_SPI_Read+0xb8>)
 80028be:	22c0      	movs	r2, #192	@ 0xc0
 80028c0:	701a      	strb	r2, [r3, #0]
	  txbuf[1] = NOP_FRAME & 0xFF;
 80028c2:	4b15      	ldr	r3, [pc, #84]	@ (8002918 <AS5047_SPI_Read+0xb8>)
 80028c4:	2200      	movs	r2, #0
 80028c6:	705a      	strb	r2, [r3, #1]
	  HAL_GPIO_WritePin(SPI1_CS_GPIO_Port, SPI1_CS_Pin, GPIO_PIN_RESET);
 80028c8:	2200      	movs	r2, #0
 80028ca:	2140      	movs	r1, #64	@ 0x40
 80028cc:	4813      	ldr	r0, [pc, #76]	@ (800291c <AS5047_SPI_Read+0xbc>)
 80028ce:	f003 f933 	bl	8005b38 <HAL_GPIO_WritePin>
	  HAL_SPI_TransmitReceive(&hspi1, (uint8_t*)&txbuf, (uint8_t*)&rxbuf,2,100);
 80028d2:	2364      	movs	r3, #100	@ 0x64
 80028d4:	9300      	str	r3, [sp, #0]
 80028d6:	2302      	movs	r3, #2
 80028d8:	4a11      	ldr	r2, [pc, #68]	@ (8002920 <AS5047_SPI_Read+0xc0>)
 80028da:	490f      	ldr	r1, [pc, #60]	@ (8002918 <AS5047_SPI_Read+0xb8>)
 80028dc:	4811      	ldr	r0, [pc, #68]	@ (8002924 <AS5047_SPI_Read+0xc4>)
 80028de:	f004 f9fa 	bl	8006cd6 <HAL_SPI_TransmitReceive>
	  while( hspi1.State == HAL_SPI_STATE_BUSY );
 80028e2:	bf00      	nop
 80028e4:	4b0f      	ldr	r3, [pc, #60]	@ (8002924 <AS5047_SPI_Read+0xc4>)
 80028e6:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 80028ea:	b2db      	uxtb	r3, r3
 80028ec:	2b02      	cmp	r3, #2
 80028ee:	d0f9      	beq.n	80028e4 <AS5047_SPI_Read+0x84>
	  HAL_GPIO_WritePin(SPI1_CS_GPIO_Port, SPI1_CS_Pin, GPIO_PIN_SET);
 80028f0:	2201      	movs	r2, #1
 80028f2:	2140      	movs	r1, #64	@ 0x40
 80028f4:	4809      	ldr	r0, [pc, #36]	@ (800291c <AS5047_SPI_Read+0xbc>)
 80028f6:	f003 f91f 	bl	8005b38 <HAL_GPIO_WritePin>
  }
  finalDataVal = ((uint16_t)rxbuf[0])<<8;
 80028fa:	4b09      	ldr	r3, [pc, #36]	@ (8002920 <AS5047_SPI_Read+0xc0>)
 80028fc:	781b      	ldrb	r3, [r3, #0]
 80028fe:	021b      	lsls	r3, r3, #8
 8002900:	81fb      	strh	r3, [r7, #14]
  finalDataVal += rxbuf[1];
 8002902:	4b07      	ldr	r3, [pc, #28]	@ (8002920 <AS5047_SPI_Read+0xc0>)
 8002904:	785b      	ldrb	r3, [r3, #1]
 8002906:	461a      	mov	r2, r3
 8002908:	89fb      	ldrh	r3, [r7, #14]
 800290a:	4413      	add	r3, r2
 800290c:	81fb      	strh	r3, [r7, #14]

  return finalDataVal;
 800290e:	89fb      	ldrh	r3, [r7, #14]

}
 8002910:	4618      	mov	r0, r3
 8002912:	3710      	adds	r7, #16
 8002914:	46bd      	mov	sp, r7
 8002916:	bd80      	pop	{r7, pc}
 8002918:	200018a4 	.word	0x200018a4
 800291c:	48000400 	.word	0x48000400
 8002920:	200018a8 	.word	0x200018a8
 8002924:	200003a0 	.word	0x200003a0

08002928 <AS5047_readRegister>:

uint16_t AS5047_readRegister(uint16_t registerAddress,uint8_t continuousRead){
 8002928:	b580      	push	{r7, lr}
 800292a:	b084      	sub	sp, #16
 800292c:	af00      	add	r7, sp, #0
 800292e:	4603      	mov	r3, r0
 8002930:	460a      	mov	r2, r1
 8002932:	80fb      	strh	r3, [r7, #6]
 8002934:	4613      	mov	r3, r2
 8002936:	717b      	strb	r3, [r7, #5]
  CommandFrame command;
  command.raw = 0;
 8002938:	2300      	movs	r3, #0
 800293a:	81bb      	strh	r3, [r7, #12]
  command.values.rw = READ;
 800293c:	7b7b      	ldrb	r3, [r7, #13]
 800293e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8002942:	737b      	strb	r3, [r7, #13]
  command.values.commandFrame = registerAddress;
 8002944:	88fb      	ldrh	r3, [r7, #6]
 8002946:	f3c3 030d 	ubfx	r3, r3, #0, #14
 800294a:	b29a      	uxth	r2, r3
 800294c:	89bb      	ldrh	r3, [r7, #12]
 800294e:	f362 030d 	bfi	r3, r2, #0, #14
 8002952:	81bb      	strh	r3, [r7, #12]
  command.values.parc = parityCheck(command.raw);
 8002954:	89bb      	ldrh	r3, [r7, #12]
 8002956:	4618      	mov	r0, r3
 8002958:	f7ff feaf 	bl	80026ba <parityCheck>
 800295c:	4603      	mov	r3, r0
 800295e:	461a      	mov	r2, r3
 8002960:	7b7b      	ldrb	r3, [r7, #13]
 8002962:	f362 13c7 	bfi	r3, r2, #7, #1
 8002966:	737b      	strb	r3, [r7, #13]
  uint16_t out= AS5047_SPI_Read(command.raw, continuousRead);
 8002968:	89bb      	ldrh	r3, [r7, #12]
 800296a:	797a      	ldrb	r2, [r7, #5]
 800296c:	4611      	mov	r1, r2
 800296e:	4618      	mov	r0, r3
 8002970:	f7ff ff76 	bl	8002860 <AS5047_SPI_Read>
 8002974:	4603      	mov	r3, r0
 8002976:	81fb      	strh	r3, [r7, #14]
  return out;
 8002978:	89fb      	ldrh	r3, [r7, #14]
}
 800297a:	4618      	mov	r0, r3
 800297c:	3710      	adds	r7, #16
 800297e:	46bd      	mov	sp, r7
 8002980:	bd80      	pop	{r7, pc}

08002982 <AS5047_writeRegister>:


void AS5047_writeRegister(uint16_t registerAddress, uint16_t registerValue) {
 8002982:	b580      	push	{r7, lr}
 8002984:	b084      	sub	sp, #16
 8002986:	af00      	add	r7, sp, #0
 8002988:	4603      	mov	r3, r0
 800298a:	460a      	mov	r2, r1
 800298c:	80fb      	strh	r3, [r7, #6]
 800298e:	4613      	mov	r3, r2
 8002990:	80bb      	strh	r3, [r7, #4]
  CommandFrame command;
  command.raw=0;
 8002992:	2300      	movs	r3, #0
 8002994:	81bb      	strh	r3, [r7, #12]
  command.values.rw = WRITE;
 8002996:	7b7b      	ldrb	r3, [r7, #13]
 8002998:	f36f 1386 	bfc	r3, #6, #1
 800299c:	737b      	strb	r3, [r7, #13]
  command.values.commandFrame = registerAddress;
 800299e:	88fb      	ldrh	r3, [r7, #6]
 80029a0:	f3c3 030d 	ubfx	r3, r3, #0, #14
 80029a4:	b29a      	uxth	r2, r3
 80029a6:	89bb      	ldrh	r3, [r7, #12]
 80029a8:	f362 030d 	bfi	r3, r2, #0, #14
 80029ac:	81bb      	strh	r3, [r7, #12]
  command.values.parc = parityCheck(command.raw);
 80029ae:	89bb      	ldrh	r3, [r7, #12]
 80029b0:	4618      	mov	r0, r3
 80029b2:	f7ff fe82 	bl	80026ba <parityCheck>
 80029b6:	4603      	mov	r3, r0
 80029b8:	461a      	mov	r2, r3
 80029ba:	7b7b      	ldrb	r3, [r7, #13]
 80029bc:	f362 13c7 	bfi	r3, r2, #7, #1
 80029c0:	737b      	strb	r3, [r7, #13]

  WriteDataFrame contentFrame;
  contentFrame.raw = 0;
 80029c2:	2300      	movs	r3, #0
 80029c4:	813b      	strh	r3, [r7, #8]
  contentFrame.values.data = registerValue;
 80029c6:	88bb      	ldrh	r3, [r7, #4]
 80029c8:	f3c3 030d 	ubfx	r3, r3, #0, #14
 80029cc:	b29a      	uxth	r2, r3
 80029ce:	893b      	ldrh	r3, [r7, #8]
 80029d0:	f362 030d 	bfi	r3, r2, #0, #14
 80029d4:	813b      	strh	r3, [r7, #8]
  contentFrame.values.low = 0; //always low
 80029d6:	7a7b      	ldrb	r3, [r7, #9]
 80029d8:	f36f 1386 	bfc	r3, #6, #1
 80029dc:	727b      	strb	r3, [r7, #9]
  contentFrame.values.pard = parityCheck(contentFrame.raw);
 80029de:	893b      	ldrh	r3, [r7, #8]
 80029e0:	4618      	mov	r0, r3
 80029e2:	f7ff fe6a 	bl	80026ba <parityCheck>
 80029e6:	4603      	mov	r3, r0
 80029e8:	461a      	mov	r2, r3
 80029ea:	7a7b      	ldrb	r3, [r7, #9]
 80029ec:	f362 13c7 	bfi	r3, r2, #7, #1
 80029f0:	727b      	strb	r3, [r7, #9]
  //TODO Use the out in the below fn and handle errors
  //uint8_t out = AS5047_SPI_Write(command.raw, contentFrame.raw);
  AS5047_SPI_Write(command.raw, contentFrame.raw);
 80029f2:	89bb      	ldrh	r3, [r7, #12]
 80029f4:	893a      	ldrh	r2, [r7, #8]
 80029f6:	4611      	mov	r1, r2
 80029f8:	4618      	mov	r0, r3
 80029fa:	f7ff fe8b 	bl	8002714 <AS5047_SPI_Write>
}
 80029fe:	bf00      	nop
 8002a00:	3710      	adds	r7, #16
 8002a02:	46bd      	mov	sp, r7
 8002a04:	bd80      	pop	{r7, pc}

08002a06 <AS5047_ReadZeroValue>:

uint16_t AS5047_ReadZeroValue(void){
 8002a06:	b580      	push	{r7, lr}
 8002a08:	b082      	sub	sp, #8
 8002a0a:	af00      	add	r7, sp, #0
  ZPOSH_frame ZPOS_H;
  ZPOSL_frame ZPOS_L;

  ZPOS_H.raw = AS5047_readRegister(ZPOSM_REG,0);
 8002a0c:	2100      	movs	r1, #0
 8002a0e:	2016      	movs	r0, #22
 8002a10:	f7ff ff8a 	bl	8002928 <AS5047_readRegister>
 8002a14:	4603      	mov	r3, r0
 8002a16:	b2db      	uxtb	r3, r3
 8002a18:	713b      	strb	r3, [r7, #4]
  ZPOS_L.raw = AS5047_readRegister(ZPOSL_REG,0);
 8002a1a:	2100      	movs	r1, #0
 8002a1c:	2017      	movs	r0, #23
 8002a1e:	f7ff ff83 	bl	8002928 <AS5047_readRegister>
 8002a22:	4603      	mov	r3, r0
 8002a24:	b2db      	uxtb	r3, r3
 8002a26:	703b      	strb	r3, [r7, #0]

  uint16_t zpos = (ZPOS_H.raw << 6) + (ZPOS_L.raw & 0x3F);
 8002a28:	793b      	ldrb	r3, [r7, #4]
 8002a2a:	019b      	lsls	r3, r3, #6
 8002a2c:	b29a      	uxth	r2, r3
 8002a2e:	783b      	ldrb	r3, [r7, #0]
 8002a30:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8002a34:	b29b      	uxth	r3, r3
 8002a36:	4413      	add	r3, r2
 8002a38:	80fb      	strh	r3, [r7, #6]
  return zpos;
 8002a3a:	88fb      	ldrh	r3, [r7, #6]
}
 8002a3c:	4618      	mov	r0, r3
 8002a3e:	3708      	adds	r7, #8
 8002a40:	46bd      	mov	sp, r7
 8002a42:	bd80      	pop	{r7, pc}

08002a44 <AS5047_WriteZeroValue>:


void AS5047_WriteZeroValue(uint16_t zeroValue){
 8002a44:	b580      	push	{r7, lr}
 8002a46:	b084      	sub	sp, #16
 8002a48:	af00      	add	r7, sp, #0
 8002a4a:	4603      	mov	r3, r0
 8002a4c:	80fb      	strh	r3, [r7, #6]
  ZPOSH_frame ZPOS_H;
  ZPOSL_frame ZPOS_L;

  ZPOS_L.values.zposl = zeroValue & 0x003F;
 8002a4e:	88fb      	ldrh	r3, [r7, #6]
 8002a50:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8002a54:	b2da      	uxtb	r2, r3
 8002a56:	7a3b      	ldrb	r3, [r7, #8]
 8002a58:	f362 0305 	bfi	r3, r2, #0, #6
 8002a5c:	723b      	strb	r3, [r7, #8]
  ZPOS_H.values.zposh = (zeroValue >> 6) & 0x00ff;
 8002a5e:	88fb      	ldrh	r3, [r7, #6]
 8002a60:	099b      	lsrs	r3, r3, #6
 8002a62:	b29b      	uxth	r3, r3
 8002a64:	b2db      	uxtb	r3, r3
 8002a66:	733b      	strb	r3, [r7, #12]

  AS5047_writeRegister(ZPOSM_REG, ZPOS_H.raw);
 8002a68:	7b3b      	ldrb	r3, [r7, #12]
 8002a6a:	4619      	mov	r1, r3
 8002a6c:	2016      	movs	r0, #22
 8002a6e:	f7ff ff88 	bl	8002982 <AS5047_writeRegister>
  AS5047_writeRegister(ZPOSL_REG, ZPOS_L.raw);
 8002a72:	7a3b      	ldrb	r3, [r7, #8]
 8002a74:	4619      	mov	r1, r3
 8002a76:	2017      	movs	r0, #23
 8002a78:	f7ff ff83 	bl	8002982 <AS5047_writeRegister>

}
 8002a7c:	bf00      	nop
 8002a7e:	3710      	adds	r7, #16
 8002a80:	46bd      	mov	sp, r7
 8002a82:	bd80      	pop	{r7, pc}

08002a84 <setMaxFrictionPWM>:
		 0.591f, 0.555f, 0.493f, 0.327f, 0.1f, 0.0f, 0.059f, 0.175f, 0.441f,
		 0.561f
};


void setMaxFrictionPWM(friction *f,uint16_t pwm){
 8002a84:	b480      	push	{r7}
 8002a86:	b083      	sub	sp, #12
 8002a88:	af00      	add	r7, sp, #0
 8002a8a:	6078      	str	r0, [r7, #4]
 8002a8c:	460b      	mov	r3, r1
 8002a8e:	807b      	strh	r3, [r7, #2]
	f->maxFrictionPWM = pwm;
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	887a      	ldrh	r2, [r7, #2]
 8002a94:	805a      	strh	r2, [r3, #2]
	f->maxFrictionPercentage = f->maxFrictionPWM /TIMER1_ARR;
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	885b      	ldrh	r3, [r3, #2]
 8002a9a:	ee07 3a90 	vmov	s15, r3
 8002a9e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002aa2:	eddf 6a06 	vldr	s13, [pc, #24]	@ 8002abc <setMaxFrictionPWM+0x38>
 8002aa6:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	edc3 7a01 	vstr	s15, [r3, #4]
}
 8002ab0:	bf00      	nop
 8002ab2:	370c      	adds	r7, #12
 8002ab4:	46bd      	mov	sp, r7
 8002ab6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aba:	4770      	bx	lr
 8002abc:	449c2000 	.word	0x449c2000

08002ac0 <lookupFrictionAddition>:

void lookupFrictionAddition(friction *f,uint16_t encoder_raw){
 8002ac0:	b480      	push	{r7}
 8002ac2:	b083      	sub	sp, #12
 8002ac4:	af00      	add	r7, sp, #0
 8002ac6:	6078      	str	r0, [r7, #4]
 8002ac8:	460b      	mov	r3, r1
 8002aca:	807b      	strh	r3, [r7, #2]
	//divide encoder raw
	f->inst_encoderVal = encoder_raw;
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	887a      	ldrh	r2, [r7, #2]
 8002ad0:	811a      	strh	r2, [r3, #8]
	f->inst_idx =f->inst_encoderVal>>DIVISION_RIGHT_SHIFT;
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	891b      	ldrh	r3, [r3, #8]
 8002ad6:	0a5b      	lsrs	r3, r3, #9
 8002ad8:	b29b      	uxth	r3, r3
 8002ada:	b2da      	uxtb	r2, r3
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	729a      	strb	r2, [r3, #10]
	f->inst_frictionNorm = frictionNormalized[f->inst_idx];
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	7a9b      	ldrb	r3, [r3, #10]
 8002ae4:	4a0b      	ldr	r2, [pc, #44]	@ (8002b14 <lookupFrictionAddition+0x54>)
 8002ae6:	009b      	lsls	r3, r3, #2
 8002ae8:	4413      	add	r3, r2
 8002aea:	681a      	ldr	r2, [r3, #0]
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	60da      	str	r2, [r3, #12]
	f->inst_frictionAddition = f->inst_frictionNorm * f->maxFrictionPercentage;
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	ed93 7a03 	vldr	s14, [r3, #12]
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	edd3 7a01 	vldr	s15, [r3, #4]
 8002afc:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	edc3 7a04 	vstr	s15, [r3, #16]
}
 8002b06:	bf00      	nop
 8002b08:	370c      	adds	r7, #12
 8002b0a:	46bd      	mov	sp, r7
 8002b0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b10:	4770      	bx	lr
 8002b12:	bf00      	nop
 8002b14:	2000000c 	.word	0x2000000c

08002b18 <setMaxCoggingPWM>:

void setMaxCoggingPWM(cogging *c,uint16_t pwm){
 8002b18:	b480      	push	{r7}
 8002b1a:	b083      	sub	sp, #12
 8002b1c:	af00      	add	r7, sp, #0
 8002b1e:	6078      	str	r0, [r7, #4]
 8002b20:	460b      	mov	r3, r1
 8002b22:	807b      	strh	r3, [r7, #2]
	c->maxCoggingPWM = pwm;
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	887a      	ldrh	r2, [r7, #2]
 8002b28:	805a      	strh	r2, [r3, #2]
	c->maxCoggingPercentage = c->maxCoggingPWM /TIMER1_ARR;
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	885b      	ldrh	r3, [r3, #2]
 8002b2e:	ee07 3a90 	vmov	s15, r3
 8002b32:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002b36:	eddf 6a06 	vldr	s13, [pc, #24]	@ 8002b50 <setMaxCoggingPWM+0x38>
 8002b3a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	edc3 7a01 	vstr	s15, [r3, #4]
}
 8002b44:	bf00      	nop
 8002b46:	370c      	adds	r7, #12
 8002b48:	46bd      	mov	sp, r7
 8002b4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b4e:	4770      	bx	lr
 8002b50:	449c2000 	.word	0x449c2000

08002b54 <lookupCoggingAddition>:

void lookupCoggingAddition(cogging *c,float elecRadians){
 8002b54:	b480      	push	{r7}
 8002b56:	b085      	sub	sp, #20
 8002b58:	af00      	add	r7, sp, #0
 8002b5a:	60f8      	str	r0, [r7, #12]
 8002b5c:	ed87 0a02 	vstr	s0, [r7, #8]
	//divide encoder raw
	c->inst_elecRadians = elecRadians;
 8002b60:	68fb      	ldr	r3, [r7, #12]
 8002b62:	68ba      	ldr	r2, [r7, #8]
 8002b64:	609a      	str	r2, [r3, #8]
	c->inst_idx = c->inst_elecRadians/TWO_PI_F * COGGING_ARR_SIZE ;
 8002b66:	68fb      	ldr	r3, [r7, #12]
 8002b68:	ed93 7a02 	vldr	s14, [r3, #8]
 8002b6c:	eddf 6a14 	vldr	s13, [pc, #80]	@ 8002bc0 <lookupCoggingAddition+0x6c>
 8002b70:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002b74:	ed9f 7a13 	vldr	s14, [pc, #76]	@ 8002bc4 <lookupCoggingAddition+0x70>
 8002b78:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002b7c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002b80:	edc7 7a01 	vstr	s15, [r7, #4]
 8002b84:	793b      	ldrb	r3, [r7, #4]
 8002b86:	b2da      	uxtb	r2, r3
 8002b88:	68fb      	ldr	r3, [r7, #12]
 8002b8a:	731a      	strb	r2, [r3, #12]
	c->inst_coggingNorm = coggingNormalized[c->inst_idx];
 8002b8c:	68fb      	ldr	r3, [r7, #12]
 8002b8e:	7b1b      	ldrb	r3, [r3, #12]
 8002b90:	4a0d      	ldr	r2, [pc, #52]	@ (8002bc8 <lookupCoggingAddition+0x74>)
 8002b92:	009b      	lsls	r3, r3, #2
 8002b94:	4413      	add	r3, r2
 8002b96:	681a      	ldr	r2, [r3, #0]
 8002b98:	68fb      	ldr	r3, [r7, #12]
 8002b9a:	611a      	str	r2, [r3, #16]
	c->inst_coggingAddition = c->inst_coggingNorm * c->maxCoggingPercentage;
 8002b9c:	68fb      	ldr	r3, [r7, #12]
 8002b9e:	ed93 7a04 	vldr	s14, [r3, #16]
 8002ba2:	68fb      	ldr	r3, [r7, #12]
 8002ba4:	edd3 7a01 	vldr	s15, [r3, #4]
 8002ba8:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002bac:	68fb      	ldr	r3, [r7, #12]
 8002bae:	edc3 7a05 	vstr	s15, [r3, #20]
}
 8002bb2:	bf00      	nop
 8002bb4:	3714      	adds	r7, #20
 8002bb6:	46bd      	mov	sp, r7
 8002bb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bbc:	4770      	bx	lr
 8002bbe:	bf00      	nop
 8002bc0:	40c90fda 	.word	0x40c90fda
 8002bc4:	42800000 	.word	0x42800000
 8002bc8:	2000008c 	.word	0x2000008c

08002bcc <Cordic_setup>:
 */

#include "MathConstants.h"
#include "Cordic.h"

void Cordic_setup(CORDIC_HandleTypeDef hcordic,CORDIC_ConfigTypeDef sCordicConfig){
 8002bcc:	b084      	sub	sp, #16
 8002bce:	b580      	push	{r7, lr}
 8002bd0:	af00      	add	r7, sp, #0
 8002bd2:	f107 0c08 	add.w	ip, r7, #8
 8002bd6:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
	sCordicConfig.Function         = CORDIC_FUNCTION_SINE;     /* sine function */
 8002bda:	2301      	movs	r3, #1
 8002bdc:	633b      	str	r3, [r7, #48]	@ 0x30
	sCordicConfig.Precision        = CORDIC_PRECISION_6CYCLES; /* 1.15 -> 2^-7 residual error  */
 8002bde:	2360      	movs	r3, #96	@ 0x60
 8002be0:	64bb      	str	r3, [r7, #72]	@ 0x48
	sCordicConfig.Scale            = CORDIC_SCALE_0;           /* no scale */
 8002be2:	2300      	movs	r3, #0
 8002be4:	637b      	str	r3, [r7, #52]	@ 0x34
	sCordicConfig.NbWrite          = CORDIC_NBWRITE_1;         /* One input data: angle. Second input data (modulus) is 1 after cordic reset */
 8002be6:	2300      	movs	r3, #0
 8002be8:	643b      	str	r3, [r7, #64]	@ 0x40
	sCordicConfig.NbRead           = CORDIC_NBREAD_1;          /* One output data: sine */
 8002bea:	2300      	movs	r3, #0
 8002bec:	647b      	str	r3, [r7, #68]	@ 0x44
	sCordicConfig.InSize           = CORDIC_INSIZE_16BITS;     /* q1.15 format for input data */
 8002bee:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8002bf2:	63bb      	str	r3, [r7, #56]	@ 0x38
	sCordicConfig.OutSize          = CORDIC_OUTSIZE_16BITS;    /* q1.15 format for output data */
 8002bf4:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 8002bf8:	63fb      	str	r3, [r7, #60]	@ 0x3c
	HAL_CORDIC_Configure(&hcordic, &sCordicConfig);
 8002bfa:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8002bfe:	4619      	mov	r1, r3
 8002c00:	f107 0008 	add.w	r0, r7, #8
 8002c04:	f002 f998 	bl	8004f38 <HAL_CORDIC_Configure>
}
 8002c08:	bf00      	nop
 8002c0a:	46bd      	mov	sp, r7
 8002c0c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8002c10:	b004      	add	sp, #16
 8002c12:	4770      	bx	lr

08002c14 <RunCordic_TwoSines>:
	short out1 = out0&0xffff;
	*sin_out = (float)out1/32768.0f;
	*cos_out = (float)out2/32768.0f;
}

void RunCordic_TwoSines(CORDIC_HandleTypeDef hcordic,float theta1,float theta2,float *sin1 , float *sin2) {
 8002c14:	b084      	sub	sp, #16
 8002c16:	b480      	push	{r7}
 8002c18:	b087      	sub	sp, #28
 8002c1a:	af00      	add	r7, sp, #0
 8002c1c:	f107 0c20 	add.w	ip, r7, #32
 8002c20:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
 8002c24:	ed87 0a01 	vstr	s0, [r7, #4]
 8002c28:	edc7 0a00 	vstr	s1, [r7]
	MODIFY_REG(hcordic.Instance->CSR,CORDIC_CSR_FUNC,SINE_FUNCTION);
 8002c2c:	6a3b      	ldr	r3, [r7, #32]
 8002c2e:	681b      	ldr	r3, [r3, #0]
 8002c30:	f023 020f 	bic.w	r2, r3, #15
 8002c34:	6a3b      	ldr	r3, [r7, #32]
 8002c36:	f042 0201 	orr.w	r2, r2, #1
 8002c3a:	601a      	str	r2, [r3, #0]
	//meant to calculate theta and 60-theta,while doing SVPWM
	int32_t cordicin = 0x7fff0000;   //  mag = 1
 8002c3c:	4b2a      	ldr	r3, [pc, #168]	@ (8002ce8 <RunCordic_TwoSines+0xd4>)
 8002c3e:	617b      	str	r3, [r7, #20]
	short thetashort = theta1*10435;
 8002c40:	edd7 7a01 	vldr	s15, [r7, #4]
 8002c44:	ed9f 7a29 	vldr	s14, [pc, #164]	@ 8002cec <RunCordic_TwoSines+0xd8>
 8002c48:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002c4c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002c50:	ee17 3a90 	vmov	r3, s15
 8002c54:	827b      	strh	r3, [r7, #18]
	cordicin += thetashort;
 8002c56:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8002c5a:	697a      	ldr	r2, [r7, #20]
 8002c5c:	4413      	add	r3, r2
 8002c5e:	617b      	str	r3, [r7, #20]

	CORDIC->WDATA = cordicin;
 8002c60:	4a23      	ldr	r2, [pc, #140]	@ (8002cf0 <RunCordic_TwoSines+0xdc>)
 8002c62:	697b      	ldr	r3, [r7, #20]
 8002c64:	6053      	str	r3, [r2, #4]
	int32_t out0 = CORDIC->RDATA;
 8002c66:	4b22      	ldr	r3, [pc, #136]	@ (8002cf0 <RunCordic_TwoSines+0xdc>)
 8002c68:	689b      	ldr	r3, [r3, #8]
 8002c6a:	60fb      	str	r3, [r7, #12]

	short out1 = out0&0xffff;
 8002c6c:	68fb      	ldr	r3, [r7, #12]
 8002c6e:	817b      	strh	r3, [r7, #10]
	*sin1 = (float)out1/32768.0f;
 8002c70:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8002c74:	ee07 3a90 	vmov	s15, r3
 8002c78:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002c7c:	eddf 6a1d 	vldr	s13, [pc, #116]	@ 8002cf4 <RunCordic_TwoSines+0xe0>
 8002c80:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002c84:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8002c86:	edc3 7a00 	vstr	s15, [r3]

	//----------------------------------
	cordicin = 0x7fff0000;
 8002c8a:	4b17      	ldr	r3, [pc, #92]	@ (8002ce8 <RunCordic_TwoSines+0xd4>)
 8002c8c:	617b      	str	r3, [r7, #20]
	thetashort = theta2*10435;
 8002c8e:	edd7 7a00 	vldr	s15, [r7]
 8002c92:	ed9f 7a16 	vldr	s14, [pc, #88]	@ 8002cec <RunCordic_TwoSines+0xd8>
 8002c96:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002c9a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002c9e:	ee17 3a90 	vmov	r3, s15
 8002ca2:	827b      	strh	r3, [r7, #18]
	cordicin += thetashort;
 8002ca4:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8002ca8:	697a      	ldr	r2, [r7, #20]
 8002caa:	4413      	add	r3, r2
 8002cac:	617b      	str	r3, [r7, #20]

	CORDIC->WDATA = cordicin;
 8002cae:	4a10      	ldr	r2, [pc, #64]	@ (8002cf0 <RunCordic_TwoSines+0xdc>)
 8002cb0:	697b      	ldr	r3, [r7, #20]
 8002cb2:	6053      	str	r3, [r2, #4]
	out0 = CORDIC->RDATA;
 8002cb4:	4b0e      	ldr	r3, [pc, #56]	@ (8002cf0 <RunCordic_TwoSines+0xdc>)
 8002cb6:	689b      	ldr	r3, [r3, #8]
 8002cb8:	60fb      	str	r3, [r7, #12]

	out1 = out0&0xffff;
 8002cba:	68fb      	ldr	r3, [r7, #12]
 8002cbc:	817b      	strh	r3, [r7, #10]
	*sin2 = (float)out1/32768.0f;
 8002cbe:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8002cc2:	ee07 3a90 	vmov	s15, r3
 8002cc6:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002cca:	eddf 6a0a 	vldr	s13, [pc, #40]	@ 8002cf4 <RunCordic_TwoSines+0xe0>
 8002cce:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002cd2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8002cd4:	edc3 7a00 	vstr	s15, [r3]

}
 8002cd8:	bf00      	nop
 8002cda:	371c      	adds	r7, #28
 8002cdc:	46bd      	mov	sp, r7
 8002cde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ce2:	b004      	add	sp, #16
 8002ce4:	4770      	bx	lr
 8002ce6:	bf00      	nop
 8002ce8:	7fff0000 	.word	0x7fff0000
 8002cec:	46230c00 	.word	0x46230c00
 8002cf0:	40020c00 	.word	0x40020c00
 8002cf4:	47000000 	.word	0x47000000

08002cf8 <SetupABIwithoutPWM>:
		return 0;
	}
}


void SetupABIwithoutPWM(void){
 8002cf8:	b580      	push	{r7, lr}
 8002cfa:	b082      	sub	sp, #8
 8002cfc:	af00      	add	r7, sp, #0
  // we setup ABI with 2000 resolution but we dont use it, becuase we directly read
  // the angle through SPI. But we want to set this up so that we get the index pin
  // signal which we can probe.
  Settings1 settings1;
  settings1.raw = 0;
 8002cfe:	2300      	movs	r3, #0
 8002d00:	80bb      	strh	r3, [r7, #4]
  settings1.values.factorySetting = 1;
 8002d02:	793b      	ldrb	r3, [r7, #4]
 8002d04:	f043 0301 	orr.w	r3, r3, #1
 8002d08:	713b      	strb	r3, [r7, #4]
  settings1.values.not_used = 0;
 8002d0a:	793b      	ldrb	r3, [r7, #4]
 8002d0c:	f36f 0341 	bfc	r3, #1, #1
 8002d10:	713b      	strb	r3, [r7, #4]
  settings1.values.dir = 0;  // By definition A leads B for CW direction. for us seen from the front, rotating in a CW direction gives A leading B.
 8002d12:	793b      	ldrb	r3, [r7, #4]
 8002d14:	f36f 0382 	bfc	r3, #2, #1
 8002d18:	713b      	strb	r3, [r7, #4]
  settings1.values.uvw_abi = 0; // 0-ABI with W pin as PWM, 1-UVW with I pin as PWM
 8002d1a:	793b      	ldrb	r3, [r7, #4]
 8002d1c:	f36f 03c3 	bfc	r3, #3, #1
 8002d20:	713b      	strb	r3, [r7, #4]
  settings1.values.daecdis = 0;
 8002d22:	793b      	ldrb	r3, [r7, #4]
 8002d24:	f36f 1304 	bfc	r3, #4, #1
 8002d28:	713b      	strb	r3, [r7, #4]
  settings1.values.abibin = 0; // ABI-decimal or binary.
 8002d2a:	793b      	ldrb	r3, [r7, #4]
 8002d2c:	f36f 1345 	bfc	r3, #5, #1
 8002d30:	713b      	strb	r3, [r7, #4]
  settings1.values.dataselect = 0; //1 is cordic Angle, 0 is dynamic angle compensation. Remove for very slow speeds.
 8002d32:	793b      	ldrb	r3, [r7, #4]
 8002d34:	f36f 1386 	bfc	r3, #6, #1
 8002d38:	713b      	strb	r3, [r7, #4]
  settings1.values.pwmon = 0; //sets pwm on W pin if 1.
 8002d3a:	793b      	ldrb	r3, [r7, #4]
 8002d3c:	f36f 13c7 	bfc	r3, #7, #1
 8002d40:	713b      	strb	r3, [r7, #4]

  AS5047_writeRegister(SETTINGS1_REG, settings1.raw);
 8002d42:	88bb      	ldrh	r3, [r7, #4]
 8002d44:	4619      	mov	r1, r3
 8002d46:	2018      	movs	r0, #24
 8002d48:	f7ff fe1b 	bl	8002982 <AS5047_writeRegister>

  Settings2 settings2;
  settings2.raw = 0;
 8002d4c:	2300      	movs	r3, #0
 8002d4e:	703b      	strb	r3, [r7, #0]
  settings2.values.abires = 0; // with abibin sets the resolution
 8002d50:	783b      	ldrb	r3, [r7, #0]
 8002d52:	f36f 1347 	bfc	r3, #5, #3
 8002d56:	703b      	strb	r3, [r7, #0]
  settings2.values.uvwpp = 4; // 5 pole pairs - 0b100
 8002d58:	783b      	ldrb	r3, [r7, #0]
 8002d5a:	2204      	movs	r2, #4
 8002d5c:	f362 0302 	bfi	r3, r2, #0, #3
 8002d60:	703b      	strb	r3, [r7, #0]
  AS5047_writeRegister(SETTINGS2_REG,settings2.raw);
 8002d62:	783b      	ldrb	r3, [r7, #0]
 8002d64:	4619      	mov	r1, r3
 8002d66:	2019      	movs	r0, #25
 8002d68:	f7ff fe0b 	bl	8002982 <AS5047_writeRegister>
}
 8002d6c:	bf00      	nop
 8002d6e:	3708      	adds	r7, #8
 8002d70:	46bd      	mov	sp, r7
 8002d72:	bd80      	pop	{r7, pc}

08002d74 <Check_ABI_SetCorrectly>:

uint8_t Check_ABI_SetCorrectly(Settings1 settings1, Settings2 settings2){
 8002d74:	b480      	push	{r7}
 8002d76:	b083      	sub	sp, #12
 8002d78:	af00      	add	r7, sp, #0
 8002d7a:	80b8      	strh	r0, [r7, #4]
 8002d7c:	7039      	strb	r1, [r7, #0]
  if ((settings1.values.uvw_abi == 0) && (settings1.values.abibin == 0 ) && (settings1.values.pwmon == 0 ) && ( settings1.values.dir == 0)
 8002d7e:	793b      	ldrb	r3, [r7, #4]
 8002d80:	f003 0308 	and.w	r3, r3, #8
 8002d84:	b2db      	uxtb	r3, r3
 8002d86:	2b00      	cmp	r3, #0
 8002d88:	d11f      	bne.n	8002dca <Check_ABI_SetCorrectly+0x56>
 8002d8a:	793b      	ldrb	r3, [r7, #4]
 8002d8c:	f003 0320 	and.w	r3, r3, #32
 8002d90:	b2db      	uxtb	r3, r3
 8002d92:	2b00      	cmp	r3, #0
 8002d94:	d119      	bne.n	8002dca <Check_ABI_SetCorrectly+0x56>
 8002d96:	793b      	ldrb	r3, [r7, #4]
 8002d98:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 8002d9c:	b2db      	uxtb	r3, r3
 8002d9e:	2b00      	cmp	r3, #0
 8002da0:	d113      	bne.n	8002dca <Check_ABI_SetCorrectly+0x56>
 8002da2:	793b      	ldrb	r3, [r7, #4]
 8002da4:	f003 0304 	and.w	r3, r3, #4
 8002da8:	b2db      	uxtb	r3, r3
 8002daa:	2b00      	cmp	r3, #0
 8002dac:	d10d      	bne.n	8002dca <Check_ABI_SetCorrectly+0x56>
      && (settings2.values.abires == 0)  && ( settings2.values.uvwpp == 4)){
 8002dae:	783b      	ldrb	r3, [r7, #0]
 8002db0:	f023 031f 	bic.w	r3, r3, #31
 8002db4:	b2db      	uxtb	r3, r3
 8002db6:	2b00      	cmp	r3, #0
 8002db8:	d107      	bne.n	8002dca <Check_ABI_SetCorrectly+0x56>
 8002dba:	783b      	ldrb	r3, [r7, #0]
 8002dbc:	f003 0307 	and.w	r3, r3, #7
 8002dc0:	b2db      	uxtb	r3, r3
 8002dc2:	2b04      	cmp	r3, #4
 8002dc4:	d101      	bne.n	8002dca <Check_ABI_SetCorrectly+0x56>
        return 1;
 8002dc6:	2301      	movs	r3, #1
 8002dc8:	e000      	b.n	8002dcc <Check_ABI_SetCorrectly+0x58>
      }
  else{
    return 0;
 8002dca:	2300      	movs	r3, #0
  }
}
 8002dcc:	4618      	mov	r0, r3
 8002dce:	370c      	adds	r7, #12
 8002dd0:	46bd      	mov	sp, r7
 8002dd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dd6:	4770      	bx	lr

08002dd8 <Encoder_setup>:


uint8_t Encoder_setup(void){
 8002dd8:	b580      	push	{r7, lr}
 8002dda:	b082      	sub	sp, #8
 8002ddc:	af00      	add	r7, sp, #0

	Settings1 settings1Reg;
	Settings2 settings2Reg;
	uint8_t abiSettingsOK;

	SetupABIwithoutPWM();
 8002dde:	f7ff ff8b 	bl	8002cf8 <SetupABIwithoutPWM>
	settings1Reg.raw = AS5047_SPI_Read(SETTINGS1_READ_FRAME, 0);
 8002de2:	2100      	movs	r1, #0
 8002de4:	f24c 0018 	movw	r0, #49176	@ 0xc018
 8002de8:	f7ff fd3a 	bl	8002860 <AS5047_SPI_Read>
 8002dec:	4603      	mov	r3, r0
 8002dee:	80bb      	strh	r3, [r7, #4]
	settings2Reg.raw = AS5047_SPI_Read(SETTINGS2_READ_FRAME, 0);
 8002df0:	2100      	movs	r1, #0
 8002df2:	f244 0019 	movw	r0, #16409	@ 0x4019
 8002df6:	f7ff fd33 	bl	8002860 <AS5047_SPI_Read>
 8002dfa:	4603      	mov	r3, r0
 8002dfc:	b2db      	uxtb	r3, r3
 8002dfe:	703b      	strb	r3, [r7, #0]
	abiSettingsOK = Check_ABI_SetCorrectly(settings1Reg,settings2Reg);
 8002e00:	7839      	ldrb	r1, [r7, #0]
 8002e02:	88b8      	ldrh	r0, [r7, #4]
 8002e04:	f7ff ffb6 	bl	8002d74 <Check_ABI_SetCorrectly>
 8002e08:	4603      	mov	r3, r0
 8002e0a:	71fb      	strb	r3, [r7, #7]
	return abiSettingsOK;
 8002e0c:	79fb      	ldrb	r3, [r7, #7]
}
 8002e0e:	4618      	mov	r0, r3
 8002e10:	3708      	adds	r7, #8
 8002e12:	46bd      	mov	sp, r7
 8002e14:	bd80      	pop	{r7, pc}

08002e16 <Encoder_updateZeroPosition>:

uint8_t Encoder_updateZeroPosition(uint16_t zeroValue){
 8002e16:	b580      	push	{r7, lr}
 8002e18:	b084      	sub	sp, #16
 8002e1a:	af00      	add	r7, sp, #0
 8002e1c:	4603      	mov	r3, r0
 8002e1e:	80fb      	strh	r3, [r7, #6]
	uint16_t zeroPos;
	zeroPos = AS5047_ReadZeroValue();
 8002e20:	f7ff fdf1 	bl	8002a06 <AS5047_ReadZeroValue>
 8002e24:	4603      	mov	r3, r0
 8002e26:	81fb      	strh	r3, [r7, #14]
	if (zeroPos != zeroValue){
 8002e28:	89fa      	ldrh	r2, [r7, #14]
 8002e2a:	88fb      	ldrh	r3, [r7, #6]
 8002e2c:	429a      	cmp	r2, r3
 8002e2e:	d00f      	beq.n	8002e50 <Encoder_updateZeroPosition+0x3a>
		AS5047_WriteZeroValue(zeroValue); //function must check if it got back the same value it wrote.
 8002e30:	88fb      	ldrh	r3, [r7, #6]
 8002e32:	4618      	mov	r0, r3
 8002e34:	f7ff fe06 	bl	8002a44 <AS5047_WriteZeroValue>
		zeroPos = AS5047_ReadZeroValue(); //to check if this value is same as what we wrote
 8002e38:	f7ff fde5 	bl	8002a06 <AS5047_ReadZeroValue>
 8002e3c:	4603      	mov	r3, r0
 8002e3e:	81fb      	strh	r3, [r7, #14]
		if (zeroPos != zeroValue){
 8002e40:	89fa      	ldrh	r2, [r7, #14]
 8002e42:	88fb      	ldrh	r3, [r7, #6]
 8002e44:	429a      	cmp	r2, r3
 8002e46:	d001      	beq.n	8002e4c <Encoder_updateZeroPosition+0x36>
			return 0;
 8002e48:	2300      	movs	r3, #0
 8002e4a:	e002      	b.n	8002e52 <Encoder_updateZeroPosition+0x3c>
		}else{
			return 1;
 8002e4c:	2301      	movs	r3, #1
 8002e4e:	e000      	b.n	8002e52 <Encoder_updateZeroPosition+0x3c>
		}
	  }
	return 1;
 8002e50:	2301      	movs	r3, #1
}
 8002e52:	4618      	mov	r0, r3
 8002e54:	3710      	adds	r7, #16
 8002e56:	46bd      	mov	sp, r7
 8002e58:	bd80      	pop	{r7, pc}

08002e5a <Encoder_enableMagErrors>:


uint8_t Encoder_enableMagErrors(void){
 8002e5a:	b580      	push	{r7, lr}
 8002e5c:	b082      	sub	sp, #8
 8002e5e:	af00      	add	r7, sp, #0
	ZPOSL_frame ZPOS_L;
	ZPOS_L.raw = AS5047_readRegister(ZPOSL_REG,0);
 8002e60:	2100      	movs	r1, #0
 8002e62:	2017      	movs	r0, #23
 8002e64:	f7ff fd60 	bl	8002928 <AS5047_readRegister>
 8002e68:	4603      	mov	r3, r0
 8002e6a:	b2db      	uxtb	r3, r3
 8002e6c:	713b      	strb	r3, [r7, #4]
	if ((ZPOS_L.values.comp_h_error == 0 ) || (ZPOS_L.values.comp_l_error == 0)){
 8002e6e:	793b      	ldrb	r3, [r7, #4]
 8002e70:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 8002e74:	b2db      	uxtb	r3, r3
 8002e76:	2b00      	cmp	r3, #0
 8002e78:	d005      	beq.n	8002e86 <Encoder_enableMagErrors+0x2c>
 8002e7a:	793b      	ldrb	r3, [r7, #4]
 8002e7c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002e80:	b2db      	uxtb	r3, r3
 8002e82:	2b00      	cmp	r3, #0
 8002e84:	d125      	bne.n	8002ed2 <Encoder_enableMagErrors+0x78>
		ZPOS_L.values.comp_h_error = 1;
 8002e86:	793b      	ldrb	r3, [r7, #4]
 8002e88:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002e8c:	713b      	strb	r3, [r7, #4]
		ZPOS_L.values.comp_l_error = 1;
 8002e8e:	793b      	ldrb	r3, [r7, #4]
 8002e90:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8002e94:	713b      	strb	r3, [r7, #4]
		AS5047_writeRegister(ZPOSL_REG, ZPOS_L.raw);
 8002e96:	793b      	ldrb	r3, [r7, #4]
 8002e98:	4619      	mov	r1, r3
 8002e9a:	2017      	movs	r0, #23
 8002e9c:	f7ff fd71 	bl	8002982 <AS5047_writeRegister>

		//check if it was written properly
		ZPOS_L.raw = 0;
 8002ea0:	2300      	movs	r3, #0
 8002ea2:	713b      	strb	r3, [r7, #4]
		ZPOS_L.raw = AS5047_readRegister(ZPOSL_REG,0);
 8002ea4:	2100      	movs	r1, #0
 8002ea6:	2017      	movs	r0, #23
 8002ea8:	f7ff fd3e 	bl	8002928 <AS5047_readRegister>
 8002eac:	4603      	mov	r3, r0
 8002eae:	b2db      	uxtb	r3, r3
 8002eb0:	713b      	strb	r3, [r7, #4]
		if ((ZPOS_L.values.comp_h_error == 0 ) || (ZPOS_L.values.comp_l_error == 0)){
 8002eb2:	793b      	ldrb	r3, [r7, #4]
 8002eb4:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 8002eb8:	b2db      	uxtb	r3, r3
 8002eba:	2b00      	cmp	r3, #0
 8002ebc:	d005      	beq.n	8002eca <Encoder_enableMagErrors+0x70>
 8002ebe:	793b      	ldrb	r3, [r7, #4]
 8002ec0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002ec4:	b2db      	uxtb	r3, r3
 8002ec6:	2b00      	cmp	r3, #0
 8002ec8:	d101      	bne.n	8002ece <Encoder_enableMagErrors+0x74>
			return 0;
 8002eca:	2300      	movs	r3, #0
 8002ecc:	e002      	b.n	8002ed4 <Encoder_enableMagErrors+0x7a>
		}else{
			return 1;
 8002ece:	2301      	movs	r3, #1
 8002ed0:	e000      	b.n	8002ed4 <Encoder_enableMagErrors+0x7a>
		}
	}
	return 1;
 8002ed2:	2301      	movs	r3, #1
}
 8002ed4:	4618      	mov	r0, r3
 8002ed6:	3708      	adds	r7, #8
 8002ed8:	46bd      	mov	sp, r7
 8002eda:	bd80      	pop	{r7, pc}

08002edc <Encoder_get16BitMechAngle_Single>:
	angleData =  angle.values.cordicang;
	angleMech = angleData*SPI_RDNG_TO_MECH_ANGLE;
	return angleMech;
}

uint16_t Encoder_get16BitMechAngle_Single(uint8_t continuous){
 8002edc:	b580      	push	{r7, lr}
 8002ede:	b084      	sub	sp, #16
 8002ee0:	af00      	add	r7, sp, #0
 8002ee2:	4603      	mov	r3, r0
 8002ee4:	71fb      	strb	r3, [r7, #7]
	ReadDataFrame readdataframe;
	Angle angle;
	readdataframe.raw = AS5047_SPI_Read(ANGLE_READ_FRAME,continuous);
 8002ee6:	79fb      	ldrb	r3, [r7, #7]
 8002ee8:	4619      	mov	r1, r3
 8002eea:	f647 70fe 	movw	r0, #32766	@ 0x7ffe
 8002eee:	f7ff fcb7 	bl	8002860 <AS5047_SPI_Read>
 8002ef2:	4603      	mov	r3, r0
 8002ef4:	81bb      	strh	r3, [r7, #12]
	angle.raw = readdataframe.values.data;
 8002ef6:	89bb      	ldrh	r3, [r7, #12]
 8002ef8:	f3c3 030d 	ubfx	r3, r3, #0, #14
 8002efc:	b29b      	uxth	r3, r3
 8002efe:	813b      	strh	r3, [r7, #8]
	return angle.values.cordicang;
 8002f00:	893b      	ldrh	r3, [r7, #8]
 8002f02:	f3c3 030d 	ubfx	r3, r3, #0, #14
 8002f06:	b29b      	uxth	r3, r3
}
 8002f08:	4618      	mov	r0, r3
 8002f0a:	3710      	adds	r7, #16
 8002f0c:	46bd      	mov	sp, r7
 8002f0e:	bd80      	pop	{r7, pc}

08002f10 <FOC_calcSVPWM>:
 */

#include "FOC.h"


void FOC_calcSVPWM(SVPWM *svpwm,float m, float encoderAngle,float deltaTovoltageAngle){
 8002f10:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002f12:	b093      	sub	sp, #76	@ 0x4c
 8002f14:	af08      	add	r7, sp, #32
 8002f16:	6178      	str	r0, [r7, #20]
 8002f18:	ed87 0a04 	vstr	s0, [r7, #16]
 8002f1c:	edc7 0a03 	vstr	s1, [r7, #12]
 8002f20:	ed87 1a02 	vstr	s2, [r7, #8]
	// encoder angle should not go above 2Pi
	svpwm->encoderAngle = encoderAngle;
 8002f24:	697b      	ldr	r3, [r7, #20]
 8002f26:	68fa      	ldr	r2, [r7, #12]
 8002f28:	609a      	str	r2, [r3, #8]
	svpwm->voltageAngle = encoderAngle + deltaTovoltageAngle;
 8002f2a:	ed97 7a03 	vldr	s14, [r7, #12]
 8002f2e:	edd7 7a02 	vldr	s15, [r7, #8]
 8002f32:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002f36:	697b      	ldr	r3, [r7, #20]
 8002f38:	edc3 7a03 	vstr	s15, [r3, #12]
	if (svpwm->voltageAngle > TWO_PI_F){
 8002f3c:	697b      	ldr	r3, [r7, #20]
 8002f3e:	edd3 7a03 	vldr	s15, [r3, #12]
 8002f42:	ed9f 7a95 	vldr	s14, [pc, #596]	@ 8003198 <FOC_calcSVPWM+0x288>
 8002f46:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002f4a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002f4e:	dd0a      	ble.n	8002f66 <FOC_calcSVPWM+0x56>
		svpwm->voltageAngle = svpwm->voltageAngle - TWO_PI_F;
 8002f50:	697b      	ldr	r3, [r7, #20]
 8002f52:	edd3 7a03 	vldr	s15, [r3, #12]
 8002f56:	ed9f 7a90 	vldr	s14, [pc, #576]	@ 8003198 <FOC_calcSVPWM+0x288>
 8002f5a:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8002f5e:	697b      	ldr	r3, [r7, #20]
 8002f60:	edc3 7a03 	vstr	s15, [r3, #12]
 8002f64:	e011      	b.n	8002f8a <FOC_calcSVPWM+0x7a>
	}else if (svpwm->voltageAngle < 0){
 8002f66:	697b      	ldr	r3, [r7, #20]
 8002f68:	edd3 7a03 	vldr	s15, [r3, #12]
 8002f6c:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8002f70:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002f74:	d509      	bpl.n	8002f8a <FOC_calcSVPWM+0x7a>
		svpwm->voltageAngle = svpwm->voltageAngle + TWO_PI_F;
 8002f76:	697b      	ldr	r3, [r7, #20]
 8002f78:	edd3 7a03 	vldr	s15, [r3, #12]
 8002f7c:	ed9f 7a86 	vldr	s14, [pc, #536]	@ 8003198 <FOC_calcSVPWM+0x288>
 8002f80:	ee77 7a87 	vadd.f32	s15, s15, s14
 8002f84:	697b      	ldr	r3, [r7, #20]
 8002f86:	edc3 7a03 	vstr	s15, [r3, #12]
	}else{
		//do nothing
	}

	svpwm->sector = (uint8_t)(svpwm->voltageAngle/PI_BY_3F);
 8002f8a:	697b      	ldr	r3, [r7, #20]
 8002f8c:	ed93 7a03 	vldr	s14, [r3, #12]
 8002f90:	eddf 6a82 	vldr	s13, [pc, #520]	@ 800319c <FOC_calcSVPWM+0x28c>
 8002f94:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002f98:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002f9c:	edc7 7a01 	vstr	s15, [r7, #4]
 8002fa0:	793b      	ldrb	r3, [r7, #4]
 8002fa2:	b2da      	uxtb	r2, r3
 8002fa4:	697b      	ldr	r3, [r7, #20]
 8002fa6:	741a      	strb	r2, [r3, #16]
	svpwm->sectorAngle = svpwm->voltageAngle - (svpwm->sector * PI_BY_3F);
 8002fa8:	697b      	ldr	r3, [r7, #20]
 8002faa:	ed93 7a03 	vldr	s14, [r3, #12]
 8002fae:	697b      	ldr	r3, [r7, #20]
 8002fb0:	7c1b      	ldrb	r3, [r3, #16]
 8002fb2:	ee07 3a90 	vmov	s15, r3
 8002fb6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002fba:	eddf 6a78 	vldr	s13, [pc, #480]	@ 800319c <FOC_calcSVPWM+0x28c>
 8002fbe:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8002fc2:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002fc6:	697b      	ldr	r3, [r7, #20]
 8002fc8:	edc3 7a05 	vstr	s15, [r3, #20]
	float sixtyMinusTheta = PI_BY_3F - svpwm->sectorAngle ;
 8002fcc:	697b      	ldr	r3, [r7, #20]
 8002fce:	edd3 7a05 	vldr	s15, [r3, #20]
 8002fd2:	ed9f 7a72 	vldr	s14, [pc, #456]	@ 800319c <FOC_calcSVPWM+0x28c>
 8002fd6:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002fda:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24

	float sinTheta,sinSixyMinusTheta;

	RunCordic_TwoSines(hcordic,svpwm->sectorAngle,sixtyMinusTheta,&sinTheta,&sinSixyMinusTheta);
 8002fde:	697b      	ldr	r3, [r7, #20]
 8002fe0:	edd3 7a05 	vldr	s15, [r3, #20]
 8002fe4:	4e6e      	ldr	r6, [pc, #440]	@ (80031a0 <FOC_calcSVPWM+0x290>)
 8002fe6:	f107 031c 	add.w	r3, r7, #28
 8002fea:	9307      	str	r3, [sp, #28]
 8002fec:	f107 0320 	add.w	r3, r7, #32
 8002ff0:	9306      	str	r3, [sp, #24]
 8002ff2:	466d      	mov	r5, sp
 8002ff4:	f106 0410 	add.w	r4, r6, #16
 8002ff8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002ffa:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002ffc:	e894 0003 	ldmia.w	r4, {r0, r1}
 8003000:	e885 0003 	stmia.w	r5, {r0, r1}
 8003004:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 8003008:	edd7 0a09 	vldr	s1, [r7, #36]	@ 0x24
 800300c:	eeb0 0a67 	vmov.f32	s0, s15
 8003010:	f7ff fe00 	bl	8002c14 <RunCordic_TwoSines>
	svpwm->PV1 = (uint16_t)(m * TIMER1_ARR * sinSixyMinusTheta);
 8003014:	edd7 7a04 	vldr	s15, [r7, #16]
 8003018:	ed9f 7a62 	vldr	s14, [pc, #392]	@ 80031a4 <FOC_calcSVPWM+0x294>
 800301c:	ee27 7a87 	vmul.f32	s14, s15, s14
 8003020:	edd7 7a07 	vldr	s15, [r7, #28]
 8003024:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003028:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800302c:	ee17 3a90 	vmov	r3, s15
 8003030:	b29a      	uxth	r2, r3
 8003032:	697b      	ldr	r3, [r7, #20]
 8003034:	831a      	strh	r2, [r3, #24]
	svpwm->PV2 = (uint16_t)(m * TIMER1_ARR * sinTheta);
 8003036:	edd7 7a04 	vldr	s15, [r7, #16]
 800303a:	ed9f 7a5a 	vldr	s14, [pc, #360]	@ 80031a4 <FOC_calcSVPWM+0x294>
 800303e:	ee27 7a87 	vmul.f32	s14, s15, s14
 8003042:	edd7 7a08 	vldr	s15, [r7, #32]
 8003046:	ee67 7a27 	vmul.f32	s15, s14, s15
 800304a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800304e:	ee17 3a90 	vmov	r3, s15
 8003052:	b29a      	uxth	r2, r3
 8003054:	697b      	ldr	r3, [r7, #20]
 8003056:	835a      	strh	r2, [r3, #26]
	svpwm->null = TIMER1_ARR - svpwm->PV1 - svpwm->PV2;
 8003058:	697b      	ldr	r3, [r7, #20]
 800305a:	8b1b      	ldrh	r3, [r3, #24]
 800305c:	ee07 3a90 	vmov	s15, r3
 8003060:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003064:	ed9f 7a4f 	vldr	s14, [pc, #316]	@ 80031a4 <FOC_calcSVPWM+0x294>
 8003068:	ee37 7a67 	vsub.f32	s14, s14, s15
 800306c:	697b      	ldr	r3, [r7, #20]
 800306e:	8b5b      	ldrh	r3, [r3, #26]
 8003070:	ee07 3a90 	vmov	s15, r3
 8003074:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003078:	ee77 7a67 	vsub.f32	s15, s14, s15
 800307c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003080:	ee17 3a90 	vmov	r3, s15
 8003084:	b29a      	uxth	r2, r3
 8003086:	697b      	ldr	r3, [r7, #20]
 8003088:	839a      	strh	r2, [r3, #28]

	if (svpwm->sector == 0){
 800308a:	697b      	ldr	r3, [r7, #20]
 800308c:	7c1b      	ldrb	r3, [r3, #16]
 800308e:	2b00      	cmp	r3, #0
 8003090:	d116      	bne.n	80030c0 <FOC_calcSVPWM+0x1b0>
			// U4 is pv1, U6 is PV2
			//100, then 110
			svpwm->CCR1 = svpwm->null/2;
 8003092:	697b      	ldr	r3, [r7, #20]
 8003094:	8b9b      	ldrh	r3, [r3, #28]
 8003096:	085b      	lsrs	r3, r3, #1
 8003098:	b29a      	uxth	r2, r3
 800309a:	697b      	ldr	r3, [r7, #20]
 800309c:	83da      	strh	r2, [r3, #30]
			svpwm->CCR2 = svpwm->CCR1 + svpwm->PV1;
 800309e:	697b      	ldr	r3, [r7, #20]
 80030a0:	8bda      	ldrh	r2, [r3, #30]
 80030a2:	697b      	ldr	r3, [r7, #20]
 80030a4:	8b1b      	ldrh	r3, [r3, #24]
 80030a6:	4413      	add	r3, r2
 80030a8:	b29a      	uxth	r2, r3
 80030aa:	697b      	ldr	r3, [r7, #20]
 80030ac:	841a      	strh	r2, [r3, #32]
			svpwm->CCR3 = svpwm->CCR2 + svpwm->PV2;
 80030ae:	697b      	ldr	r3, [r7, #20]
 80030b0:	8c1a      	ldrh	r2, [r3, #32]
 80030b2:	697b      	ldr	r3, [r7, #20]
 80030b4:	8b5b      	ldrh	r3, [r3, #26]
 80030b6:	4413      	add	r3, r2
 80030b8:	b29a      	uxth	r2, r3
 80030ba:	697b      	ldr	r3, [r7, #20]
 80030bc:	845a      	strh	r2, [r3, #34]	@ 0x22
			//CCR2 = PV2,CCR3 = PV1
			svpwm->CCR1 = svpwm->null/2;
			svpwm->CCR3 = svpwm->CCR1 + svpwm->PV2;
			svpwm->CCR2 = svpwm->CCR3 + svpwm->PV1;
		}
}
 80030be:	e08d      	b.n	80031dc <FOC_calcSVPWM+0x2cc>
		}else if (svpwm->sector == 1){
 80030c0:	697b      	ldr	r3, [r7, #20]
 80030c2:	7c1b      	ldrb	r3, [r3, #16]
 80030c4:	2b01      	cmp	r3, #1
 80030c6:	d116      	bne.n	80030f6 <FOC_calcSVPWM+0x1e6>
			svpwm->CCR2 = svpwm->null/2;
 80030c8:	697b      	ldr	r3, [r7, #20]
 80030ca:	8b9b      	ldrh	r3, [r3, #28]
 80030cc:	085b      	lsrs	r3, r3, #1
 80030ce:	b29a      	uxth	r2, r3
 80030d0:	697b      	ldr	r3, [r7, #20]
 80030d2:	841a      	strh	r2, [r3, #32]
			svpwm->CCR1 = svpwm->CCR2 + svpwm->PV2;
 80030d4:	697b      	ldr	r3, [r7, #20]
 80030d6:	8c1a      	ldrh	r2, [r3, #32]
 80030d8:	697b      	ldr	r3, [r7, #20]
 80030da:	8b5b      	ldrh	r3, [r3, #26]
 80030dc:	4413      	add	r3, r2
 80030de:	b29a      	uxth	r2, r3
 80030e0:	697b      	ldr	r3, [r7, #20]
 80030e2:	83da      	strh	r2, [r3, #30]
			svpwm->CCR3 = svpwm->CCR1 + svpwm->PV1;
 80030e4:	697b      	ldr	r3, [r7, #20]
 80030e6:	8bda      	ldrh	r2, [r3, #30]
 80030e8:	697b      	ldr	r3, [r7, #20]
 80030ea:	8b1b      	ldrh	r3, [r3, #24]
 80030ec:	4413      	add	r3, r2
 80030ee:	b29a      	uxth	r2, r3
 80030f0:	697b      	ldr	r3, [r7, #20]
 80030f2:	845a      	strh	r2, [r3, #34]	@ 0x22
}
 80030f4:	e072      	b.n	80031dc <FOC_calcSVPWM+0x2cc>
		}else if (svpwm->sector == 2){
 80030f6:	697b      	ldr	r3, [r7, #20]
 80030f8:	7c1b      	ldrb	r3, [r3, #16]
 80030fa:	2b02      	cmp	r3, #2
 80030fc:	d116      	bne.n	800312c <FOC_calcSVPWM+0x21c>
			svpwm->CCR2 = svpwm->null/2;
 80030fe:	697b      	ldr	r3, [r7, #20]
 8003100:	8b9b      	ldrh	r3, [r3, #28]
 8003102:	085b      	lsrs	r3, r3, #1
 8003104:	b29a      	uxth	r2, r3
 8003106:	697b      	ldr	r3, [r7, #20]
 8003108:	841a      	strh	r2, [r3, #32]
			svpwm->CCR3 = svpwm->CCR2 + svpwm->PV1;
 800310a:	697b      	ldr	r3, [r7, #20]
 800310c:	8c1a      	ldrh	r2, [r3, #32]
 800310e:	697b      	ldr	r3, [r7, #20]
 8003110:	8b1b      	ldrh	r3, [r3, #24]
 8003112:	4413      	add	r3, r2
 8003114:	b29a      	uxth	r2, r3
 8003116:	697b      	ldr	r3, [r7, #20]
 8003118:	845a      	strh	r2, [r3, #34]	@ 0x22
			svpwm->CCR1 = svpwm->CCR3 + svpwm->PV2;
 800311a:	697b      	ldr	r3, [r7, #20]
 800311c:	8c5a      	ldrh	r2, [r3, #34]	@ 0x22
 800311e:	697b      	ldr	r3, [r7, #20]
 8003120:	8b5b      	ldrh	r3, [r3, #26]
 8003122:	4413      	add	r3, r2
 8003124:	b29a      	uxth	r2, r3
 8003126:	697b      	ldr	r3, [r7, #20]
 8003128:	83da      	strh	r2, [r3, #30]
}
 800312a:	e057      	b.n	80031dc <FOC_calcSVPWM+0x2cc>
		}else if (svpwm->sector == 3){
 800312c:	697b      	ldr	r3, [r7, #20]
 800312e:	7c1b      	ldrb	r3, [r3, #16]
 8003130:	2b03      	cmp	r3, #3
 8003132:	d116      	bne.n	8003162 <FOC_calcSVPWM+0x252>
			svpwm->CCR3 = svpwm->null/2;
 8003134:	697b      	ldr	r3, [r7, #20]
 8003136:	8b9b      	ldrh	r3, [r3, #28]
 8003138:	085b      	lsrs	r3, r3, #1
 800313a:	b29a      	uxth	r2, r3
 800313c:	697b      	ldr	r3, [r7, #20]
 800313e:	845a      	strh	r2, [r3, #34]	@ 0x22
			svpwm->CCR2 = svpwm->CCR3 + svpwm->PV2;
 8003140:	697b      	ldr	r3, [r7, #20]
 8003142:	8c5a      	ldrh	r2, [r3, #34]	@ 0x22
 8003144:	697b      	ldr	r3, [r7, #20]
 8003146:	8b5b      	ldrh	r3, [r3, #26]
 8003148:	4413      	add	r3, r2
 800314a:	b29a      	uxth	r2, r3
 800314c:	697b      	ldr	r3, [r7, #20]
 800314e:	841a      	strh	r2, [r3, #32]
			svpwm->CCR1 = svpwm->CCR2 + svpwm->PV1;
 8003150:	697b      	ldr	r3, [r7, #20]
 8003152:	8c1a      	ldrh	r2, [r3, #32]
 8003154:	697b      	ldr	r3, [r7, #20]
 8003156:	8b1b      	ldrh	r3, [r3, #24]
 8003158:	4413      	add	r3, r2
 800315a:	b29a      	uxth	r2, r3
 800315c:	697b      	ldr	r3, [r7, #20]
 800315e:	83da      	strh	r2, [r3, #30]
}
 8003160:	e03c      	b.n	80031dc <FOC_calcSVPWM+0x2cc>
		}else if (svpwm->sector == 4){
 8003162:	697b      	ldr	r3, [r7, #20]
 8003164:	7c1b      	ldrb	r3, [r3, #16]
 8003166:	2b04      	cmp	r3, #4
 8003168:	d11e      	bne.n	80031a8 <FOC_calcSVPWM+0x298>
			svpwm->CCR3 = svpwm->null/2;
 800316a:	697b      	ldr	r3, [r7, #20]
 800316c:	8b9b      	ldrh	r3, [r3, #28]
 800316e:	085b      	lsrs	r3, r3, #1
 8003170:	b29a      	uxth	r2, r3
 8003172:	697b      	ldr	r3, [r7, #20]
 8003174:	845a      	strh	r2, [r3, #34]	@ 0x22
			svpwm->CCR1 = svpwm->CCR3 + svpwm->PV1;
 8003176:	697b      	ldr	r3, [r7, #20]
 8003178:	8c5a      	ldrh	r2, [r3, #34]	@ 0x22
 800317a:	697b      	ldr	r3, [r7, #20]
 800317c:	8b1b      	ldrh	r3, [r3, #24]
 800317e:	4413      	add	r3, r2
 8003180:	b29a      	uxth	r2, r3
 8003182:	697b      	ldr	r3, [r7, #20]
 8003184:	83da      	strh	r2, [r3, #30]
			svpwm->CCR2 = svpwm->CCR1 + svpwm->PV2;
 8003186:	697b      	ldr	r3, [r7, #20]
 8003188:	8bda      	ldrh	r2, [r3, #30]
 800318a:	697b      	ldr	r3, [r7, #20]
 800318c:	8b5b      	ldrh	r3, [r3, #26]
 800318e:	4413      	add	r3, r2
 8003190:	b29a      	uxth	r2, r3
 8003192:	697b      	ldr	r3, [r7, #20]
 8003194:	841a      	strh	r2, [r3, #32]
}
 8003196:	e021      	b.n	80031dc <FOC_calcSVPWM+0x2cc>
 8003198:	40c90fda 	.word	0x40c90fda
 800319c:	3f860a92 	.word	0x3f860a92
 80031a0:	20000378 	.word	0x20000378
 80031a4:	449c2000 	.word	0x449c2000
		}else if (svpwm->sector == 5){
 80031a8:	697b      	ldr	r3, [r7, #20]
 80031aa:	7c1b      	ldrb	r3, [r3, #16]
 80031ac:	2b05      	cmp	r3, #5
 80031ae:	d115      	bne.n	80031dc <FOC_calcSVPWM+0x2cc>
			svpwm->CCR1 = svpwm->null/2;
 80031b0:	697b      	ldr	r3, [r7, #20]
 80031b2:	8b9b      	ldrh	r3, [r3, #28]
 80031b4:	085b      	lsrs	r3, r3, #1
 80031b6:	b29a      	uxth	r2, r3
 80031b8:	697b      	ldr	r3, [r7, #20]
 80031ba:	83da      	strh	r2, [r3, #30]
			svpwm->CCR3 = svpwm->CCR1 + svpwm->PV2;
 80031bc:	697b      	ldr	r3, [r7, #20]
 80031be:	8bda      	ldrh	r2, [r3, #30]
 80031c0:	697b      	ldr	r3, [r7, #20]
 80031c2:	8b5b      	ldrh	r3, [r3, #26]
 80031c4:	4413      	add	r3, r2
 80031c6:	b29a      	uxth	r2, r3
 80031c8:	697b      	ldr	r3, [r7, #20]
 80031ca:	845a      	strh	r2, [r3, #34]	@ 0x22
			svpwm->CCR2 = svpwm->CCR3 + svpwm->PV1;
 80031cc:	697b      	ldr	r3, [r7, #20]
 80031ce:	8c5a      	ldrh	r2, [r3, #34]	@ 0x22
 80031d0:	697b      	ldr	r3, [r7, #20]
 80031d2:	8b1b      	ldrh	r3, [r3, #24]
 80031d4:	4413      	add	r3, r2
 80031d6:	b29a      	uxth	r2, r3
 80031d8:	697b      	ldr	r3, [r7, #20]
 80031da:	841a      	strh	r2, [r3, #32]
}
 80031dc:	bf00      	nop
 80031de:	372c      	adds	r7, #44	@ 0x2c
 80031e0:	46bd      	mov	sp, r7
 80031e2:	bdf0      	pop	{r4, r5, r6, r7, pc}

080031e4 <FOC_applyPWM>:

void FOC_applyPWM(SVPWM *foc,uint8_t DT_compensation,uint8_t reversePhases){
 80031e4:	b580      	push	{r7, lr}
 80031e6:	b082      	sub	sp, #8
 80031e8:	af00      	add	r7, sp, #0
 80031ea:	6078      	str	r0, [r7, #4]
 80031ec:	460b      	mov	r3, r1
 80031ee:	70fb      	strb	r3, [r7, #3]
 80031f0:	4613      	mov	r3, r2
 80031f2:	70bb      	strb	r3, [r7, #2]
	htim1.Instance->CCR1 = fast_fminf(foc->CCR1 + DT_compensation,TIMER1_ARR);
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	8bdb      	ldrh	r3, [r3, #30]
 80031f8:	461a      	mov	r2, r3
 80031fa:	78fb      	ldrb	r3, [r7, #3]
 80031fc:	4413      	add	r3, r2
 80031fe:	ee07 3a90 	vmov	s15, r3
 8003202:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003206:	eddf 0a3b 	vldr	s1, [pc, #236]	@ 80032f4 <FOC_applyPWM+0x110>
 800320a:	eeb0 0a67 	vmov.f32	s0, s15
 800320e:	f000 fc52 	bl	8003ab6 <fast_fminf>
 8003212:	eef0 7a40 	vmov.f32	s15, s0
 8003216:	4b38      	ldr	r3, [pc, #224]	@ (80032f8 <FOC_applyPWM+0x114>)
 8003218:	681b      	ldr	r3, [r3, #0]
 800321a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800321e:	ee17 2a90 	vmov	r2, s15
 8003222:	635a      	str	r2, [r3, #52]	@ 0x34
	if (reversePhases==0){
 8003224:	78bb      	ldrb	r3, [r7, #2]
 8003226:	2b00      	cmp	r3, #0
 8003228:	d130      	bne.n	800328c <FOC_applyPWM+0xa8>
		htim1.Instance->CCR2 = fast_fminf(foc->CCR2 + DT_compensation,TIMER1_ARR);
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	8c1b      	ldrh	r3, [r3, #32]
 800322e:	461a      	mov	r2, r3
 8003230:	78fb      	ldrb	r3, [r7, #3]
 8003232:	4413      	add	r3, r2
 8003234:	ee07 3a90 	vmov	s15, r3
 8003238:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800323c:	eddf 0a2d 	vldr	s1, [pc, #180]	@ 80032f4 <FOC_applyPWM+0x110>
 8003240:	eeb0 0a67 	vmov.f32	s0, s15
 8003244:	f000 fc37 	bl	8003ab6 <fast_fminf>
 8003248:	eef0 7a40 	vmov.f32	s15, s0
 800324c:	4b2a      	ldr	r3, [pc, #168]	@ (80032f8 <FOC_applyPWM+0x114>)
 800324e:	681b      	ldr	r3, [r3, #0]
 8003250:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003254:	ee17 2a90 	vmov	r2, s15
 8003258:	639a      	str	r2, [r3, #56]	@ 0x38
		htim1.Instance->CCR3 = fast_fminf(foc->CCR3 + DT_compensation,TIMER1_ARR);
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	8c5b      	ldrh	r3, [r3, #34]	@ 0x22
 800325e:	461a      	mov	r2, r3
 8003260:	78fb      	ldrb	r3, [r7, #3]
 8003262:	4413      	add	r3, r2
 8003264:	ee07 3a90 	vmov	s15, r3
 8003268:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800326c:	eddf 0a21 	vldr	s1, [pc, #132]	@ 80032f4 <FOC_applyPWM+0x110>
 8003270:	eeb0 0a67 	vmov.f32	s0, s15
 8003274:	f000 fc1f 	bl	8003ab6 <fast_fminf>
 8003278:	eef0 7a40 	vmov.f32	s15, s0
 800327c:	4b1e      	ldr	r3, [pc, #120]	@ (80032f8 <FOC_applyPWM+0x114>)
 800327e:	681b      	ldr	r3, [r3, #0]
 8003280:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003284:	ee17 2a90 	vmov	r2, s15
 8003288:	63da      	str	r2, [r3, #60]	@ 0x3c
	}else{
		htim1.Instance->CCR2 = fast_fminf(foc->CCR3 + DT_compensation,TIMER1_ARR);
		htim1.Instance->CCR3 = fast_fminf(foc->CCR2 + DT_compensation,TIMER1_ARR);
	}
}
 800328a:	e02f      	b.n	80032ec <FOC_applyPWM+0x108>
		htim1.Instance->CCR2 = fast_fminf(foc->CCR3 + DT_compensation,TIMER1_ARR);
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	8c5b      	ldrh	r3, [r3, #34]	@ 0x22
 8003290:	461a      	mov	r2, r3
 8003292:	78fb      	ldrb	r3, [r7, #3]
 8003294:	4413      	add	r3, r2
 8003296:	ee07 3a90 	vmov	s15, r3
 800329a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800329e:	eddf 0a15 	vldr	s1, [pc, #84]	@ 80032f4 <FOC_applyPWM+0x110>
 80032a2:	eeb0 0a67 	vmov.f32	s0, s15
 80032a6:	f000 fc06 	bl	8003ab6 <fast_fminf>
 80032aa:	eef0 7a40 	vmov.f32	s15, s0
 80032ae:	4b12      	ldr	r3, [pc, #72]	@ (80032f8 <FOC_applyPWM+0x114>)
 80032b0:	681b      	ldr	r3, [r3, #0]
 80032b2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80032b6:	ee17 2a90 	vmov	r2, s15
 80032ba:	639a      	str	r2, [r3, #56]	@ 0x38
		htim1.Instance->CCR3 = fast_fminf(foc->CCR2 + DT_compensation,TIMER1_ARR);
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	8c1b      	ldrh	r3, [r3, #32]
 80032c0:	461a      	mov	r2, r3
 80032c2:	78fb      	ldrb	r3, [r7, #3]
 80032c4:	4413      	add	r3, r2
 80032c6:	ee07 3a90 	vmov	s15, r3
 80032ca:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80032ce:	eddf 0a09 	vldr	s1, [pc, #36]	@ 80032f4 <FOC_applyPWM+0x110>
 80032d2:	eeb0 0a67 	vmov.f32	s0, s15
 80032d6:	f000 fbee 	bl	8003ab6 <fast_fminf>
 80032da:	eef0 7a40 	vmov.f32	s15, s0
 80032de:	4b06      	ldr	r3, [pc, #24]	@ (80032f8 <FOC_applyPWM+0x114>)
 80032e0:	681b      	ldr	r3, [r3, #0]
 80032e2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80032e6:	ee17 2a90 	vmov	r2, s15
 80032ea:	63da      	str	r2, [r3, #60]	@ 0x3c
}
 80032ec:	bf00      	nop
 80032ee:	3708      	adds	r7, #8
 80032f0:	46bd      	mov	sp, r7
 80032f2:	bd80      	pop	{r7, pc}
 80032f4:	449c2000 	.word	0x449c2000
 80032f8:	20000404 	.word	0x20000404

080032fc <ZeroAllCCRs>:

void ZeroAllCCRs(SVPWM *svpwm){
 80032fc:	b480      	push	{r7}
 80032fe:	b083      	sub	sp, #12
 8003300:	af00      	add	r7, sp, #0
 8003302:	6078      	str	r0, [r7, #4]
	svpwm->CCR1 = 0;
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	2200      	movs	r2, #0
 8003308:	83da      	strh	r2, [r3, #30]
	svpwm->CCR2 = 0;
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	2200      	movs	r2, #0
 800330e:	841a      	strh	r2, [r3, #32]
	svpwm->CCR3 = 0;
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	2200      	movs	r2, #0
 8003314:	845a      	strh	r2, [r3, #34]	@ 0x22
}
 8003316:	bf00      	nop
 8003318:	370c      	adds	r7, #12
 800331a:	46bd      	mov	sp, r7
 800331c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003320:	4770      	bx	lr

08003322 <HW_statesInit>:



//------------------HW state struct functions-----------------

void HW_statesInit(HW *hw){
 8003322:	b480      	push	{r7}
 8003324:	b083      	sub	sp, #12
 8003326:	af00      	add	r7, sp, #0
 8003328:	6078      	str	r0, [r7, #4]
	hw->tim1PwmHWOn = 0;
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	2200      	movs	r2, #0
 800332e:	701a      	strb	r2, [r3, #0]
}
 8003330:	bf00      	nop
 8003332:	370c      	adds	r7, #12
 8003334:	46bd      	mov	sp, r7
 8003336:	f85d 7b04 	ldr.w	r7, [sp], #4
 800333a:	4770      	bx	lr

0800333c <StartAllPWM>:


void StartAllPWM(HW *hw){
 800333c:	b580      	push	{r7, lr}
 800333e:	b082      	sub	sp, #8
 8003340:	af00      	add	r7, sp, #0
 8003342:	6078      	str	r0, [r7, #4]
	if (hw->tim1PwmHWOn == 0){
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	781b      	ldrb	r3, [r3, #0]
 8003348:	2b00      	cmp	r3, #0
 800334a:	d126      	bne.n	800339a <StartAllPWM+0x5e>
	  htim1.Instance->CCR1 = 0;
 800334c:	4b15      	ldr	r3, [pc, #84]	@ (80033a4 <StartAllPWM+0x68>)
 800334e:	681b      	ldr	r3, [r3, #0]
 8003350:	2200      	movs	r2, #0
 8003352:	635a      	str	r2, [r3, #52]	@ 0x34
	  htim1.Instance->CCR2 = 0;
 8003354:	4b13      	ldr	r3, [pc, #76]	@ (80033a4 <StartAllPWM+0x68>)
 8003356:	681b      	ldr	r3, [r3, #0]
 8003358:	2200      	movs	r2, #0
 800335a:	639a      	str	r2, [r3, #56]	@ 0x38
	  htim1.Instance->CCR3 = 0;
 800335c:	4b11      	ldr	r3, [pc, #68]	@ (80033a4 <StartAllPWM+0x68>)
 800335e:	681b      	ldr	r3, [r3, #0]
 8003360:	2200      	movs	r2, #0
 8003362:	63da      	str	r2, [r3, #60]	@ 0x3c
	  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 8003364:	2100      	movs	r1, #0
 8003366:	480f      	ldr	r0, [pc, #60]	@ (80033a4 <StartAllPWM+0x68>)
 8003368:	f004 f95c 	bl	8007624 <HAL_TIM_PWM_Start>
	  HAL_TIMEx_PWMN_Start(&htim1, TIM_CHANNEL_1);
 800336c:	2100      	movs	r1, #0
 800336e:	480d      	ldr	r0, [pc, #52]	@ (80033a4 <StartAllPWM+0x68>)
 8003370:	f005 fac8 	bl	8008904 <HAL_TIMEx_PWMN_Start>
	  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2);
 8003374:	2104      	movs	r1, #4
 8003376:	480b      	ldr	r0, [pc, #44]	@ (80033a4 <StartAllPWM+0x68>)
 8003378:	f004 f954 	bl	8007624 <HAL_TIM_PWM_Start>
	  HAL_TIMEx_PWMN_Start(&htim1, TIM_CHANNEL_2);
 800337c:	2104      	movs	r1, #4
 800337e:	4809      	ldr	r0, [pc, #36]	@ (80033a4 <StartAllPWM+0x68>)
 8003380:	f005 fac0 	bl	8008904 <HAL_TIMEx_PWMN_Start>
	  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_3);
 8003384:	2108      	movs	r1, #8
 8003386:	4807      	ldr	r0, [pc, #28]	@ (80033a4 <StartAllPWM+0x68>)
 8003388:	f004 f94c 	bl	8007624 <HAL_TIM_PWM_Start>
	  HAL_TIMEx_PWMN_Start(&htim1, TIM_CHANNEL_3);
 800338c:	2108      	movs	r1, #8
 800338e:	4805      	ldr	r0, [pc, #20]	@ (80033a4 <StartAllPWM+0x68>)
 8003390:	f005 fab8 	bl	8008904 <HAL_TIMEx_PWMN_Start>
	  hw->tim1PwmHWOn = 1;
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	2201      	movs	r2, #1
 8003398:	701a      	strb	r2, [r3, #0]
	}
}
 800339a:	bf00      	nop
 800339c:	3708      	adds	r7, #8
 800339e:	46bd      	mov	sp, r7
 80033a0:	bd80      	pop	{r7, pc}
 80033a2:	bf00      	nop
 80033a4:	20000404 	.word	0x20000404

080033a8 <StopAllPWM>:

void StopAllPWM(HW *hw){
 80033a8:	b580      	push	{r7, lr}
 80033aa:	b082      	sub	sp, #8
 80033ac:	af00      	add	r7, sp, #0
 80033ae:	6078      	str	r0, [r7, #4]
	if(hw->tim1PwmHWOn == 1){
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	781b      	ldrb	r3, [r3, #0]
 80033b4:	2b01      	cmp	r3, #1
 80033b6:	d12a      	bne.n	800340e <StopAllPWM+0x66>
		htim1.Instance->CCR1 = 0;
 80033b8:	4b17      	ldr	r3, [pc, #92]	@ (8003418 <StopAllPWM+0x70>)
 80033ba:	681b      	ldr	r3, [r3, #0]
 80033bc:	2200      	movs	r2, #0
 80033be:	635a      	str	r2, [r3, #52]	@ 0x34
		htim1.Instance->CCR2 = 0;
 80033c0:	4b15      	ldr	r3, [pc, #84]	@ (8003418 <StopAllPWM+0x70>)
 80033c2:	681b      	ldr	r3, [r3, #0]
 80033c4:	2200      	movs	r2, #0
 80033c6:	639a      	str	r2, [r3, #56]	@ 0x38
		htim1.Instance->CCR3 = 0;
 80033c8:	4b13      	ldr	r3, [pc, #76]	@ (8003418 <StopAllPWM+0x70>)
 80033ca:	681b      	ldr	r3, [r3, #0]
 80033cc:	2200      	movs	r2, #0
 80033ce:	63da      	str	r2, [r3, #60]	@ 0x3c
		HAL_TIM_PWM_Stop(&htim1, TIM_CHANNEL_1);
 80033d0:	2100      	movs	r1, #0
 80033d2:	4811      	ldr	r0, [pc, #68]	@ (8003418 <StopAllPWM+0x70>)
 80033d4:	f004 fa26 	bl	8007824 <HAL_TIM_PWM_Stop>
		HAL_TIMEx_PWMN_Stop(&htim1, TIM_CHANNEL_1);
 80033d8:	2100      	movs	r1, #0
 80033da:	480f      	ldr	r0, [pc, #60]	@ (8003418 <StopAllPWM+0x70>)
 80033dc:	f005 fb46 	bl	8008a6c <HAL_TIMEx_PWMN_Stop>
		HAL_TIM_PWM_Stop(&htim1, TIM_CHANNEL_2);
 80033e0:	2104      	movs	r1, #4
 80033e2:	480d      	ldr	r0, [pc, #52]	@ (8003418 <StopAllPWM+0x70>)
 80033e4:	f004 fa1e 	bl	8007824 <HAL_TIM_PWM_Stop>
		HAL_TIMEx_PWMN_Stop(&htim1, TIM_CHANNEL_2);
 80033e8:	2104      	movs	r1, #4
 80033ea:	480b      	ldr	r0, [pc, #44]	@ (8003418 <StopAllPWM+0x70>)
 80033ec:	f005 fb3e 	bl	8008a6c <HAL_TIMEx_PWMN_Stop>
		HAL_TIM_PWM_Stop(&htim1, TIM_CHANNEL_3);
 80033f0:	2108      	movs	r1, #8
 80033f2:	4809      	ldr	r0, [pc, #36]	@ (8003418 <StopAllPWM+0x70>)
 80033f4:	f004 fa16 	bl	8007824 <HAL_TIM_PWM_Stop>
		HAL_TIMEx_PWMN_Stop(&htim1, TIM_CHANNEL_3);
 80033f8:	2108      	movs	r1, #8
 80033fa:	4807      	ldr	r0, [pc, #28]	@ (8003418 <StopAllPWM+0x70>)
 80033fc:	f005 fb36 	bl	8008a6c <HAL_TIMEx_PWMN_Stop>
		hw->tim1PwmHWOn = 0;
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	2200      	movs	r2, #0
 8003404:	701a      	strb	r2, [r3, #0]
		htim1.State = HAL_TIM_STATE_READY;
 8003406:	4b04      	ldr	r3, [pc, #16]	@ (8003418 <StopAllPWM+0x70>)
 8003408:	2201      	movs	r2, #1
 800340a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
	}
}
 800340e:	bf00      	nop
 8003410:	3708      	adds	r7, #8
 8003412:	46bd      	mov	sp, r7
 8003414:	bd80      	pop	{r7, pc}
 8003416:	bf00      	nop
 8003418:	20000404 	.word	0x20000404

0800341c <Zero_PID_Terms>:

void Zero_PID_Terms(PID *pid){
 800341c:	b480      	push	{r7}
 800341e:	b083      	sub	sp, #12
 8003420:	af00      	add	r7, sp, #0
 8003422:	6078      	str	r0, [r7, #4]
	pid->integralError = 0;
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	f04f 0200 	mov.w	r2, #0
 800342a:	615a      	str	r2, [r3, #20]
	pid->KiTerm = 0;
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	f04f 0200 	mov.w	r2, #0
 8003432:	619a      	str	r2, [r3, #24]
	pid->error = 0;
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	f04f 0200 	mov.w	r2, #0
 800343a:	611a      	str	r2, [r3, #16]
	pid->out = 0;
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	f04f 0200 	mov.w	r2, #0
 8003442:	625a      	str	r2, [r3, #36]	@ 0x24
}
 8003444:	bf00      	nop
 8003446:	370c      	adds	r7, #12
 8003448:	46bd      	mov	sp, r7
 800344a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800344e:	4770      	bx	lr

08003450 <Init_PID_Terms>:
void Init_PID_Terms(PID *pid,float Kp,float Ki,float SO,float FF){
 8003450:	b480      	push	{r7}
 8003452:	b087      	sub	sp, #28
 8003454:	af00      	add	r7, sp, #0
 8003456:	6178      	str	r0, [r7, #20]
 8003458:	ed87 0a04 	vstr	s0, [r7, #16]
 800345c:	edc7 0a03 	vstr	s1, [r7, #12]
 8003460:	ed87 1a02 	vstr	s2, [r7, #8]
 8003464:	edc7 1a01 	vstr	s3, [r7, #4]
	pid->Kp = Kp;
 8003468:	697b      	ldr	r3, [r7, #20]
 800346a:	693a      	ldr	r2, [r7, #16]
 800346c:	601a      	str	r2, [r3, #0]
	pid->Ki = Ki;
 800346e:	697b      	ldr	r3, [r7, #20]
 8003470:	68fa      	ldr	r2, [r7, #12]
 8003472:	605a      	str	r2, [r3, #4]
	pid->FF = FF;
 8003474:	697b      	ldr	r3, [r7, #20]
 8003476:	687a      	ldr	r2, [r7, #4]
 8003478:	60da      	str	r2, [r3, #12]
	pid->sO = SO;
 800347a:	697b      	ldr	r3, [r7, #20]
 800347c:	68ba      	ldr	r2, [r7, #8]
 800347e:	609a      	str	r2, [r3, #8]
	pid->KiTerm = 0;
 8003480:	697b      	ldr	r3, [r7, #20]
 8003482:	f04f 0200 	mov.w	r2, #0
 8003486:	619a      	str	r2, [r3, #24]
	pid->out = 0;
 8003488:	697b      	ldr	r3, [r7, #20]
 800348a:	f04f 0200 	mov.w	r2, #0
 800348e:	625a      	str	r2, [r3, #36]	@ 0x24
}
 8003490:	bf00      	nop
 8003492:	371c      	adds	r7, #28
 8003494:	46bd      	mov	sp, r7
 8003496:	f85d 7b04 	ldr.w	r7, [sp], #4
 800349a:	4770      	bx	lr

0800349c <ExecVoltagePID>:

float ExecVoltagePID(PID *pid,float target, float actual,float min,float max){
 800349c:	b580      	push	{r7, lr}
 800349e:	b088      	sub	sp, #32
 80034a0:	af00      	add	r7, sp, #0
 80034a2:	6178      	str	r0, [r7, #20]
 80034a4:	ed87 0a04 	vstr	s0, [r7, #16]
 80034a8:	edc7 0a03 	vstr	s1, [r7, #12]
 80034ac:	ed87 1a02 	vstr	s2, [r7, #8]
 80034b0:	edc7 1a01 	vstr	s3, [r7, #4]
	pid->error = target - actual;
 80034b4:	ed97 7a04 	vldr	s14, [r7, #16]
 80034b8:	edd7 7a03 	vldr	s15, [r7, #12]
 80034bc:	ee77 7a67 	vsub.f32	s15, s14, s15
 80034c0:	697b      	ldr	r3, [r7, #20]
 80034c2:	edc3 7a04 	vstr	s15, [r3, #16]
	pid->integralError = pid->integralError + (pid->error*TIM1_DT);
 80034c6:	697b      	ldr	r3, [r7, #20]
 80034c8:	ed93 7a05 	vldr	s14, [r3, #20]
 80034cc:	697b      	ldr	r3, [r7, #20]
 80034ce:	edd3 6a04 	vldr	s13, [r3, #16]
 80034d2:	ed9f 6a2a 	vldr	s12, [pc, #168]	@ 800357c <ExecVoltagePID+0xe0>
 80034d6:	eec6 7a86 	vdiv.f32	s15, s13, s12
 80034da:	ee77 7a27 	vadd.f32	s15, s14, s15
 80034de:	697b      	ldr	r3, [r7, #20]
 80034e0:	edc3 7a05 	vstr	s15, [r3, #20]
	pid->KpTerm = pid->Kp * pid->error;
 80034e4:	697b      	ldr	r3, [r7, #20]
 80034e6:	ed93 7a00 	vldr	s14, [r3]
 80034ea:	697b      	ldr	r3, [r7, #20]
 80034ec:	edd3 7a04 	vldr	s15, [r3, #16]
 80034f0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80034f4:	697b      	ldr	r3, [r7, #20]
 80034f6:	edc3 7a07 	vstr	s15, [r3, #28]
	pid->KiTerm = pid->Ki*pid->integralError;
 80034fa:	697b      	ldr	r3, [r7, #20]
 80034fc:	ed93 7a01 	vldr	s14, [r3, #4]
 8003500:	697b      	ldr	r3, [r7, #20]
 8003502:	edd3 7a05 	vldr	s15, [r3, #20]
 8003506:	ee67 7a27 	vmul.f32	s15, s14, s15
 800350a:	697b      	ldr	r3, [r7, #20]
 800350c:	edc3 7a06 	vstr	s15, [r3, #24]
	pid->FFTerm = pid->FF*target ;
 8003510:	697b      	ldr	r3, [r7, #20]
 8003512:	ed93 7a03 	vldr	s14, [r3, #12]
 8003516:	edd7 7a04 	vldr	s15, [r7, #16]
 800351a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800351e:	697b      	ldr	r3, [r7, #20]
 8003520:	edc3 7a08 	vstr	s15, [r3, #32]
	float out =  pid->KpTerm + pid->KiTerm + pid->FFTerm + pid->sO;
 8003524:	697b      	ldr	r3, [r7, #20]
 8003526:	ed93 7a07 	vldr	s14, [r3, #28]
 800352a:	697b      	ldr	r3, [r7, #20]
 800352c:	edd3 7a06 	vldr	s15, [r3, #24]
 8003530:	ee37 7a27 	vadd.f32	s14, s14, s15
 8003534:	697b      	ldr	r3, [r7, #20]
 8003536:	edd3 7a08 	vldr	s15, [r3, #32]
 800353a:	ee37 7a27 	vadd.f32	s14, s14, s15
 800353e:	697b      	ldr	r3, [r7, #20]
 8003540:	edd3 7a02 	vldr	s15, [r3, #8]
 8003544:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003548:	edc7 7a07 	vstr	s15, [r7, #28]
	out = fast_fmaxf(fast_fminf(out,max),min);
 800354c:	edd7 0a01 	vldr	s1, [r7, #4]
 8003550:	ed97 0a07 	vldr	s0, [r7, #28]
 8003554:	f000 faaf 	bl	8003ab6 <fast_fminf>
 8003558:	eef0 7a40 	vmov.f32	s15, s0
 800355c:	edd7 0a02 	vldr	s1, [r7, #8]
 8003560:	eeb0 0a67 	vmov.f32	s0, s15
 8003564:	f000 fa8b 	bl	8003a7e <fast_fmaxf>
 8003568:	ed87 0a07 	vstr	s0, [r7, #28]
	return out;
 800356c:	69fb      	ldr	r3, [r7, #28]
 800356e:	ee07 3a90 	vmov	s15, r3
}
 8003572:	eeb0 0a67 	vmov.f32	s0, s15
 8003576:	3720      	adds	r7, #32
 8003578:	46bd      	mov	sp, r7
 800357a:	bd80      	pop	{r7, pc}
 800357c:	461c4000 	.word	0x461c4000

08003580 <hsLogInit>:
union {
  float float_variable;
  uint8_t byte_array[4];
} uHs;

void hsLogInit(HSLogger *hsLog){
 8003580:	b480      	push	{r7}
 8003582:	b083      	sub	sp, #12
 8003584:	af00      	add	r7, sp, #0
 8003586:	6078      	str	r0, [r7, #4]
	hsLog->enable = 0;
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	2200      	movs	r2, #0
 800358c:	701a      	strb	r2, [r3, #0]
	hsLog->bufferIndex = 0;
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	2200      	movs	r2, #0
 8003592:	f8a3 2fae 	strh.w	r2, [r3, #4014]	@ 0xfae
	hsLog->runningBuffer = BUFFER1;
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	2201      	movs	r2, #1
 800359a:	735a      	strb	r2, [r3, #13]
	hsLog->sendOut = NOBUFFER;
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	2200      	movs	r2, #0
 80035a0:	f883 2fb0 	strb.w	r2, [r3, #4016]	@ 0xfb0
}
 80035a4:	bf00      	nop
 80035a6:	370c      	adds	r7, #12
 80035a8:	46bd      	mov	sp, r7
 80035aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035ae:	4770      	bx	lr

080035b0 <hsLogStart>:

void hsLogStart(HSLogger *hsLog,PositionSensor *ps){
 80035b0:	b480      	push	{r7}
 80035b2:	b083      	sub	sp, #12
 80035b4:	af00      	add	r7, sp, #0
 80035b6:	6078      	str	r0, [r7, #4]
 80035b8:	6039      	str	r1, [r7, #0]
	hsLog->enable = 1;
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	2201      	movs	r2, #1
 80035be:	701a      	strb	r2, [r3, #0]
	hsLog->firstTime = 1;
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	2201      	movs	r2, #1
 80035c4:	705a      	strb	r2, [r3, #1]
	hsLog->bufferIndex = 0;
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	2200      	movs	r2, #0
 80035ca:	f8a3 2fae 	strh.w	r2, [r3, #4014]	@ 0xfae
	hsLog->runningBuffer = BUFFER1;
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	2201      	movs	r2, #1
 80035d2:	735a      	strb	r2, [r3, #13]
	hsLog->sendOut = NOBUFFER;
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	2200      	movs	r2, #0
 80035d8:	f883 2fb0 	strb.w	r2, [r3, #4016]	@ 0xfb0
	hsLog->start_multiTurns = ps->multiturn_mech_radians;
 80035dc:	683b      	ldr	r3, [r7, #0]
 80035de:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	605a      	str	r2, [r3, #4]
	hsLog->stopAndFlushBuffer = 0;
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	2200      	movs	r2, #0
 80035e8:	731a      	strb	r2, [r3, #12]
}
 80035ea:	bf00      	nop
 80035ec:	370c      	adds	r7, #12
 80035ee:	46bd      	mov	sp, r7
 80035f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035f4:	4770      	bx	lr

080035f6 <hsLogReset>:

void hsLogReset(HSLogger *hsLog){
 80035f6:	b480      	push	{r7}
 80035f8:	b083      	sub	sp, #12
 80035fa:	af00      	add	r7, sp, #0
 80035fc:	6078      	str	r0, [r7, #4]
	hsLog->enable = 0;
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	2200      	movs	r2, #0
 8003602:	701a      	strb	r2, [r3, #0]
	hsLog->firstTime = 0;
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	2200      	movs	r2, #0
 8003608:	705a      	strb	r2, [r3, #1]
	hsLog->bufferIndex = 0;
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	2200      	movs	r2, #0
 800360e:	f8a3 2fae 	strh.w	r2, [r3, #4014]	@ 0xfae
	hsLog->runningBuffer = NOBUFFER;
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	2200      	movs	r2, #0
 8003616:	735a      	strb	r2, [r3, #13]
	hsLog->start_multiTurns  = 0;
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	f04f 0200 	mov.w	r2, #0
 800361e:	605a      	str	r2, [r3, #4]
	hsLog->end_multiTurns = 0;
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	f04f 0200 	mov.w	r2, #0
 8003626:	609a      	str	r2, [r3, #8]
}
 8003628:	bf00      	nop
 800362a:	370c      	adds	r7, #12
 800362c:	46bd      	mov	sp, r7
 800362e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003632:	4770      	bx	lr

08003634 <switchBuffers>:


void switchBuffers(HSLogger *hL){
 8003634:	b480      	push	{r7}
 8003636:	b083      	sub	sp, #12
 8003638:	af00      	add	r7, sp, #0
 800363a:	6078      	str	r0, [r7, #4]
	if (hL->runningBuffer == BUFFER1){
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	7b5b      	ldrb	r3, [r3, #13]
 8003640:	2b01      	cmp	r3, #1
 8003642:	d111      	bne.n	8003668 <switchBuffers+0x34>
		hL->sendOutBufferSize = hL->bufferIndex;
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	f8b3 2fae 	ldrh.w	r2, [r3, #4014]	@ 0xfae
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	f8a3 2fb2 	strh.w	r2, [r3, #4018]	@ 0xfb2
		hL->sendOut = BUFFER1;
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	2201      	movs	r2, #1
 8003654:	f883 2fb0 	strb.w	r2, [r3, #4016]	@ 0xfb0
		hL->bufferIndex  = 0;
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	2200      	movs	r2, #0
 800365c:	f8a3 2fae 	strh.w	r2, [r3, #4014]	@ 0xfae
		hL->runningBuffer = BUFFER2;
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	2202      	movs	r2, #2
 8003664:	735a      	strb	r2, [r3, #13]
		hL->sendOutBufferSize = hL->bufferIndex;
		hL->sendOut = BUFFER2;
		hL->bufferIndex  = 0;
		hL->runningBuffer = BUFFER1;
	}
}
 8003666:	e014      	b.n	8003692 <switchBuffers+0x5e>
	}else if (hL->runningBuffer == BUFFER2){
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	7b5b      	ldrb	r3, [r3, #13]
 800366c:	2b02      	cmp	r3, #2
 800366e:	d110      	bne.n	8003692 <switchBuffers+0x5e>
		hL->sendOutBufferSize = hL->bufferIndex;
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	f8b3 2fae 	ldrh.w	r2, [r3, #4014]	@ 0xfae
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	f8a3 2fb2 	strh.w	r2, [r3, #4018]	@ 0xfb2
		hL->sendOut = BUFFER2;
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	2202      	movs	r2, #2
 8003680:	f883 2fb0 	strb.w	r2, [r3, #4016]	@ 0xfb0
		hL->bufferIndex  = 0;
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	2200      	movs	r2, #0
 8003688:	f8a3 2fae 	strh.w	r2, [r3, #4014]	@ 0xfae
		hL->runningBuffer = BUFFER1;
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	2201      	movs	r2, #1
 8003690:	735a      	strb	r2, [r3, #13]
}
 8003692:	bf00      	nop
 8003694:	370c      	adds	r7, #12
 8003696:	46bd      	mov	sp, r7
 8003698:	f85d 7b04 	ldr.w	r7, [sp], #4
 800369c:	4770      	bx	lr

0800369e <add8Bit>:

uint16_t add8Bit(HSLogger *hL,uint8_t var,uint16_t index){
 800369e:	b480      	push	{r7}
 80036a0:	b083      	sub	sp, #12
 80036a2:	af00      	add	r7, sp, #0
 80036a4:	6078      	str	r0, [r7, #4]
 80036a6:	460b      	mov	r3, r1
 80036a8:	70fb      	strb	r3, [r7, #3]
 80036aa:	4613      	mov	r3, r2
 80036ac:	803b      	strh	r3, [r7, #0]
	if (hL->runningBuffer == BUFFER1){
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	7b5b      	ldrb	r3, [r3, #13]
 80036b2:	2b01      	cmp	r3, #1
 80036b4:	d105      	bne.n	80036c2 <add8Bit+0x24>
		hL->HSbuffer1[index] = var & 0xFF;
 80036b6:	883b      	ldrh	r3, [r7, #0]
 80036b8:	687a      	ldr	r2, [r7, #4]
 80036ba:	4413      	add	r3, r2
 80036bc:	78fa      	ldrb	r2, [r7, #3]
 80036be:	739a      	strb	r2, [r3, #14]
 80036c0:	e005      	b.n	80036ce <add8Bit+0x30>
	}else{
		hL->HSbuffer2[index] = var & 0xFF;
 80036c2:	883b      	ldrh	r3, [r7, #0]
 80036c4:	687a      	ldr	r2, [r7, #4]
 80036c6:	4413      	add	r3, r2
 80036c8:	78fa      	ldrb	r2, [r7, #3]
 80036ca:	f883 27de 	strb.w	r2, [r3, #2014]	@ 0x7de
	}
	return index+1;
 80036ce:	883b      	ldrh	r3, [r7, #0]
 80036d0:	3301      	adds	r3, #1
 80036d2:	b29b      	uxth	r3, r3
}
 80036d4:	4618      	mov	r0, r3
 80036d6:	370c      	adds	r7, #12
 80036d8:	46bd      	mov	sp, r7
 80036da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036de:	4770      	bx	lr

080036e0 <add16Bit>:

uint16_t add16Bit(HSLogger *hL,uint16_t var,uint16_t index){
 80036e0:	b480      	push	{r7}
 80036e2:	b083      	sub	sp, #12
 80036e4:	af00      	add	r7, sp, #0
 80036e6:	6078      	str	r0, [r7, #4]
 80036e8:	460b      	mov	r3, r1
 80036ea:	807b      	strh	r3, [r7, #2]
 80036ec:	4613      	mov	r3, r2
 80036ee:	803b      	strh	r3, [r7, #0]
	if (hL->runningBuffer == BUFFER1){
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	7b5b      	ldrb	r3, [r3, #13]
 80036f4:	2b01      	cmp	r3, #1
 80036f6:	d111      	bne.n	800371c <add16Bit+0x3c>
		hL->HSbuffer1[index] = var >> 8 & 0xFF;
 80036f8:	887b      	ldrh	r3, [r7, #2]
 80036fa:	0a1b      	lsrs	r3, r3, #8
 80036fc:	b29a      	uxth	r2, r3
 80036fe:	883b      	ldrh	r3, [r7, #0]
 8003700:	b2d1      	uxtb	r1, r2
 8003702:	687a      	ldr	r2, [r7, #4]
 8003704:	4413      	add	r3, r2
 8003706:	460a      	mov	r2, r1
 8003708:	739a      	strb	r2, [r3, #14]
		hL->HSbuffer1[index+1] = var & 0xFF;
 800370a:	883b      	ldrh	r3, [r7, #0]
 800370c:	3301      	adds	r3, #1
 800370e:	887a      	ldrh	r2, [r7, #2]
 8003710:	b2d1      	uxtb	r1, r2
 8003712:	687a      	ldr	r2, [r7, #4]
 8003714:	4413      	add	r3, r2
 8003716:	460a      	mov	r2, r1
 8003718:	739a      	strb	r2, [r3, #14]
 800371a:	e012      	b.n	8003742 <add16Bit+0x62>
	}else{
		hL->HSbuffer2[index] = var >> 8 & 0xFF;
 800371c:	887b      	ldrh	r3, [r7, #2]
 800371e:	0a1b      	lsrs	r3, r3, #8
 8003720:	b29a      	uxth	r2, r3
 8003722:	883b      	ldrh	r3, [r7, #0]
 8003724:	b2d1      	uxtb	r1, r2
 8003726:	687a      	ldr	r2, [r7, #4]
 8003728:	4413      	add	r3, r2
 800372a:	460a      	mov	r2, r1
 800372c:	f883 27de 	strb.w	r2, [r3, #2014]	@ 0x7de
		hL->HSbuffer2[index+1] = var & 0xFF;
 8003730:	883b      	ldrh	r3, [r7, #0]
 8003732:	3301      	adds	r3, #1
 8003734:	887a      	ldrh	r2, [r7, #2]
 8003736:	b2d1      	uxtb	r1, r2
 8003738:	687a      	ldr	r2, [r7, #4]
 800373a:	4413      	add	r3, r2
 800373c:	460a      	mov	r2, r1
 800373e:	f883 27de 	strb.w	r2, [r3, #2014]	@ 0x7de
	}
	return index+2;
 8003742:	883b      	ldrh	r3, [r7, #0]
 8003744:	3302      	adds	r3, #2
 8003746:	b29b      	uxth	r3, r3
}
 8003748:	4618      	mov	r0, r3
 800374a:	370c      	adds	r7, #12
 800374c:	46bd      	mov	sp, r7
 800374e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003752:	4770      	bx	lr

08003754 <addFloat>:

uint16_t addFloat(HSLogger *hL,float var,uint16_t index){
 8003754:	b480      	push	{r7}
 8003756:	b085      	sub	sp, #20
 8003758:	af00      	add	r7, sp, #0
 800375a:	60f8      	str	r0, [r7, #12]
 800375c:	ed87 0a02 	vstr	s0, [r7, #8]
 8003760:	460b      	mov	r3, r1
 8003762:	80fb      	strh	r3, [r7, #6]
	uHs.float_variable = var;
 8003764:	4a29      	ldr	r2, [pc, #164]	@ (800380c <addFloat+0xb8>)
 8003766:	68bb      	ldr	r3, [r7, #8]
 8003768:	6013      	str	r3, [r2, #0]
	if (hL->runningBuffer == BUFFER1){
 800376a:	68fb      	ldr	r3, [r7, #12]
 800376c:	7b5b      	ldrb	r3, [r3, #13]
 800376e:	2b01      	cmp	r3, #1
 8003770:	d11f      	bne.n	80037b2 <addFloat+0x5e>
		hL->HSbuffer1[index]= (uint8_t)(uHs.byte_array[3]);
 8003772:	88fb      	ldrh	r3, [r7, #6]
 8003774:	4a25      	ldr	r2, [pc, #148]	@ (800380c <addFloat+0xb8>)
 8003776:	78d1      	ldrb	r1, [r2, #3]
 8003778:	68fa      	ldr	r2, [r7, #12]
 800377a:	4413      	add	r3, r2
 800377c:	460a      	mov	r2, r1
 800377e:	739a      	strb	r2, [r3, #14]
		hL->HSbuffer1[index+1]= (uint8_t)(uHs.byte_array[2]);
 8003780:	88fb      	ldrh	r3, [r7, #6]
 8003782:	3301      	adds	r3, #1
 8003784:	4a21      	ldr	r2, [pc, #132]	@ (800380c <addFloat+0xb8>)
 8003786:	7891      	ldrb	r1, [r2, #2]
 8003788:	68fa      	ldr	r2, [r7, #12]
 800378a:	4413      	add	r3, r2
 800378c:	460a      	mov	r2, r1
 800378e:	739a      	strb	r2, [r3, #14]
		hL->HSbuffer1[index+2]= (uint8_t)(uHs.byte_array[1]);
 8003790:	88fb      	ldrh	r3, [r7, #6]
 8003792:	3302      	adds	r3, #2
 8003794:	4a1d      	ldr	r2, [pc, #116]	@ (800380c <addFloat+0xb8>)
 8003796:	7851      	ldrb	r1, [r2, #1]
 8003798:	68fa      	ldr	r2, [r7, #12]
 800379a:	4413      	add	r3, r2
 800379c:	460a      	mov	r2, r1
 800379e:	739a      	strb	r2, [r3, #14]
		hL->HSbuffer1[index+3]= (uint8_t)(uHs.byte_array[0]);
 80037a0:	88fb      	ldrh	r3, [r7, #6]
 80037a2:	3303      	adds	r3, #3
 80037a4:	4a19      	ldr	r2, [pc, #100]	@ (800380c <addFloat+0xb8>)
 80037a6:	7811      	ldrb	r1, [r2, #0]
 80037a8:	68fa      	ldr	r2, [r7, #12]
 80037aa:	4413      	add	r3, r2
 80037ac:	460a      	mov	r2, r1
 80037ae:	739a      	strb	r2, [r3, #14]
 80037b0:	e022      	b.n	80037f8 <addFloat+0xa4>
	}else{
		hL->HSbuffer2[index]= (uint8_t)(uHs.byte_array[3]);
 80037b2:	88fb      	ldrh	r3, [r7, #6]
 80037b4:	4a15      	ldr	r2, [pc, #84]	@ (800380c <addFloat+0xb8>)
 80037b6:	78d1      	ldrb	r1, [r2, #3]
 80037b8:	68fa      	ldr	r2, [r7, #12]
 80037ba:	4413      	add	r3, r2
 80037bc:	460a      	mov	r2, r1
 80037be:	f883 27de 	strb.w	r2, [r3, #2014]	@ 0x7de
		hL->HSbuffer2[index+1]= (uint8_t)(uHs.byte_array[2]);
 80037c2:	88fb      	ldrh	r3, [r7, #6]
 80037c4:	3301      	adds	r3, #1
 80037c6:	4a11      	ldr	r2, [pc, #68]	@ (800380c <addFloat+0xb8>)
 80037c8:	7891      	ldrb	r1, [r2, #2]
 80037ca:	68fa      	ldr	r2, [r7, #12]
 80037cc:	4413      	add	r3, r2
 80037ce:	460a      	mov	r2, r1
 80037d0:	f883 27de 	strb.w	r2, [r3, #2014]	@ 0x7de
		hL->HSbuffer2[index+2]= (uint8_t)(uHs.byte_array[1]);
 80037d4:	88fb      	ldrh	r3, [r7, #6]
 80037d6:	3302      	adds	r3, #2
 80037d8:	4a0c      	ldr	r2, [pc, #48]	@ (800380c <addFloat+0xb8>)
 80037da:	7851      	ldrb	r1, [r2, #1]
 80037dc:	68fa      	ldr	r2, [r7, #12]
 80037de:	4413      	add	r3, r2
 80037e0:	460a      	mov	r2, r1
 80037e2:	f883 27de 	strb.w	r2, [r3, #2014]	@ 0x7de
		hL->HSbuffer2[index+3]= (uint8_t)(uHs.byte_array[0]);
 80037e6:	88fb      	ldrh	r3, [r7, #6]
 80037e8:	3303      	adds	r3, #3
 80037ea:	4a08      	ldr	r2, [pc, #32]	@ (800380c <addFloat+0xb8>)
 80037ec:	7811      	ldrb	r1, [r2, #0]
 80037ee:	68fa      	ldr	r2, [r7, #12]
 80037f0:	4413      	add	r3, r2
 80037f2:	460a      	mov	r2, r1
 80037f4:	f883 27de 	strb.w	r2, [r3, #2014]	@ 0x7de
	}
	return index+4;
 80037f8:	88fb      	ldrh	r3, [r7, #6]
 80037fa:	3304      	adds	r3, #4
 80037fc:	b29b      	uxth	r3, r3
}
 80037fe:	4618      	mov	r0, r3
 8003800:	3714      	adds	r7, #20
 8003802:	46bd      	mov	sp, r7
 8003804:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003808:	4770      	bx	lr
 800380a:	bf00      	nop
 800380c:	200018ac 	.word	0x200018ac

08003810 <add32Bit>:

uint16_t add32Bit(HSLogger *hL,uint32_t var,uint16_t index){
 8003810:	b480      	push	{r7}
 8003812:	b085      	sub	sp, #20
 8003814:	af00      	add	r7, sp, #0
 8003816:	60f8      	str	r0, [r7, #12]
 8003818:	60b9      	str	r1, [r7, #8]
 800381a:	4613      	mov	r3, r2
 800381c:	80fb      	strh	r3, [r7, #6]
	if (hL->runningBuffer == BUFFER1){
 800381e:	68fb      	ldr	r3, [r7, #12]
 8003820:	7b5b      	ldrb	r3, [r3, #13]
 8003822:	2b01      	cmp	r3, #1
 8003824:	d122      	bne.n	800386c <add32Bit+0x5c>
		hL->HSbuffer1[index]= (uint8_t)(var >> 24 & 0xFF);
 8003826:	68bb      	ldr	r3, [r7, #8]
 8003828:	0e1a      	lsrs	r2, r3, #24
 800382a:	88fb      	ldrh	r3, [r7, #6]
 800382c:	b2d1      	uxtb	r1, r2
 800382e:	68fa      	ldr	r2, [r7, #12]
 8003830:	4413      	add	r3, r2
 8003832:	460a      	mov	r2, r1
 8003834:	739a      	strb	r2, [r3, #14]
		hL->HSbuffer1[index+1]= (uint8_t)(var >> 16 & 0xFF);
 8003836:	68bb      	ldr	r3, [r7, #8]
 8003838:	0c1a      	lsrs	r2, r3, #16
 800383a:	88fb      	ldrh	r3, [r7, #6]
 800383c:	3301      	adds	r3, #1
 800383e:	b2d1      	uxtb	r1, r2
 8003840:	68fa      	ldr	r2, [r7, #12]
 8003842:	4413      	add	r3, r2
 8003844:	460a      	mov	r2, r1
 8003846:	739a      	strb	r2, [r3, #14]
		hL->HSbuffer1[index+2]= (uint8_t)(var >> 8 & 0xFF);
 8003848:	68bb      	ldr	r3, [r7, #8]
 800384a:	0a1a      	lsrs	r2, r3, #8
 800384c:	88fb      	ldrh	r3, [r7, #6]
 800384e:	3302      	adds	r3, #2
 8003850:	b2d1      	uxtb	r1, r2
 8003852:	68fa      	ldr	r2, [r7, #12]
 8003854:	4413      	add	r3, r2
 8003856:	460a      	mov	r2, r1
 8003858:	739a      	strb	r2, [r3, #14]
		hL->HSbuffer1[index+3]= (uint8_t)(var & 0xFF);
 800385a:	88fb      	ldrh	r3, [r7, #6]
 800385c:	3303      	adds	r3, #3
 800385e:	68ba      	ldr	r2, [r7, #8]
 8003860:	b2d1      	uxtb	r1, r2
 8003862:	68fa      	ldr	r2, [r7, #12]
 8003864:	4413      	add	r3, r2
 8003866:	460a      	mov	r2, r1
 8003868:	739a      	strb	r2, [r3, #14]
 800386a:	e025      	b.n	80038b8 <add32Bit+0xa8>
	}else{
		hL->HSbuffer2[index]= (uint8_t)(var >> 24 & 0xFF);
 800386c:	68bb      	ldr	r3, [r7, #8]
 800386e:	0e1a      	lsrs	r2, r3, #24
 8003870:	88fb      	ldrh	r3, [r7, #6]
 8003872:	b2d1      	uxtb	r1, r2
 8003874:	68fa      	ldr	r2, [r7, #12]
 8003876:	4413      	add	r3, r2
 8003878:	460a      	mov	r2, r1
 800387a:	f883 27de 	strb.w	r2, [r3, #2014]	@ 0x7de
		hL->HSbuffer2[index+1]= (uint8_t)(var >> 16 & 0xFF);
 800387e:	68bb      	ldr	r3, [r7, #8]
 8003880:	0c1a      	lsrs	r2, r3, #16
 8003882:	88fb      	ldrh	r3, [r7, #6]
 8003884:	3301      	adds	r3, #1
 8003886:	b2d1      	uxtb	r1, r2
 8003888:	68fa      	ldr	r2, [r7, #12]
 800388a:	4413      	add	r3, r2
 800388c:	460a      	mov	r2, r1
 800388e:	f883 27de 	strb.w	r2, [r3, #2014]	@ 0x7de
		hL->HSbuffer2[index+2]= (uint8_t)(var >> 8 & 0xFF);
 8003892:	68bb      	ldr	r3, [r7, #8]
 8003894:	0a1a      	lsrs	r2, r3, #8
 8003896:	88fb      	ldrh	r3, [r7, #6]
 8003898:	3302      	adds	r3, #2
 800389a:	b2d1      	uxtb	r1, r2
 800389c:	68fa      	ldr	r2, [r7, #12]
 800389e:	4413      	add	r3, r2
 80038a0:	460a      	mov	r2, r1
 80038a2:	f883 27de 	strb.w	r2, [r3, #2014]	@ 0x7de
		hL->HSbuffer2[index+3]= (uint8_t)(var & 0xFF);
 80038a6:	88fb      	ldrh	r3, [r7, #6]
 80038a8:	3303      	adds	r3, #3
 80038aa:	68ba      	ldr	r2, [r7, #8]
 80038ac:	b2d1      	uxtb	r1, r2
 80038ae:	68fa      	ldr	r2, [r7, #12]
 80038b0:	4413      	add	r3, r2
 80038b2:	460a      	mov	r2, r1
 80038b4:	f883 27de 	strb.w	r2, [r3, #2014]	@ 0x7de
	}
	return index+4;
 80038b8:	88fb      	ldrh	r3, [r7, #6]
 80038ba:	3304      	adds	r3, #4
 80038bc:	b29b      	uxth	r3, r3
}
 80038be:	4618      	mov	r0, r3
 80038c0:	3714      	adds	r7, #20
 80038c2:	46bd      	mov	sp, r7
 80038c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038c8:	4770      	bx	lr

080038ca <addData>:


uint16_t addData(HSLogger *hL, SVPWM *svpwm, PositionSensor *ps, FOC *foc,friction *fr , cogging *cg){
 80038ca:	b580      	push	{r7, lr}
 80038cc:	b086      	sub	sp, #24
 80038ce:	af00      	add	r7, sp, #0
 80038d0:	60f8      	str	r0, [r7, #12]
 80038d2:	60b9      	str	r1, [r7, #8]
 80038d4:	607a      	str	r2, [r7, #4]
 80038d6:	603b      	str	r3, [r7, #0]
	uint16_t idx = hL->bufferIndex;
 80038d8:	68fb      	ldr	r3, [r7, #12]
 80038da:	f8b3 3fae 	ldrh.w	r3, [r3, #4014]	@ 0xfae
 80038de:	82fb      	strh	r3, [r7, #22]
	idx = add8Bit(hL,0x68,idx); // D
 80038e0:	8afb      	ldrh	r3, [r7, #22]
 80038e2:	461a      	mov	r2, r3
 80038e4:	2168      	movs	r1, #104	@ 0x68
 80038e6:	68f8      	ldr	r0, [r7, #12]
 80038e8:	f7ff fed9 	bl	800369e <add8Bit>
 80038ec:	4603      	mov	r3, r0
 80038ee:	82fb      	strh	r3, [r7, #22]
	idx = add8Bit(hL,0x58,idx); // :
 80038f0:	8afb      	ldrh	r3, [r7, #22]
 80038f2:	461a      	mov	r2, r3
 80038f4:	2158      	movs	r1, #88	@ 0x58
 80038f6:	68f8      	ldr	r0, [r7, #12]
 80038f8:	f7ff fed1 	bl	800369e <add8Bit>
 80038fc:	4603      	mov	r3, r0
 80038fe:	82fb      	strh	r3, [r7, #22]

	idx = add32Bit(hL,svpwm->loopCounter,idx);
 8003900:	68bb      	ldr	r3, [r7, #8]
 8003902:	681b      	ldr	r3, [r3, #0]
 8003904:	4619      	mov	r1, r3
 8003906:	8afb      	ldrh	r3, [r7, #22]
 8003908:	461a      	mov	r2, r3
 800390a:	68f8      	ldr	r0, [r7, #12]
 800390c:	f7ff ff80 	bl	8003810 <add32Bit>
 8003910:	4603      	mov	r3, r0
 8003912:	82fb      	strh	r3, [r7, #22]
	idx = add16Bit(hL,ps->encoder_raw,idx);
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 800391a:	8afa      	ldrh	r2, [r7, #22]
 800391c:	4619      	mov	r1, r3
 800391e:	68f8      	ldr	r0, [r7, #12]
 8003920:	f7ff fede 	bl	80036e0 <add16Bit>
 8003924:	4603      	mov	r3, r0
 8003926:	82fb      	strh	r3, [r7, #22]
	idx = addFloat(hL,ps->velocity_radsec,idx);
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	edd3 7a16 	vldr	s15, [r3, #88]	@ 0x58
 800392e:	8afb      	ldrh	r3, [r7, #22]
 8003930:	4619      	mov	r1, r3
 8003932:	eeb0 0a67 	vmov.f32	s0, s15
 8003936:	68f8      	ldr	r0, [r7, #12]
 8003938:	f7ff ff0c 	bl	8003754 <addFloat>
 800393c:	4603      	mov	r3, r0
 800393e:	82fb      	strh	r3, [r7, #22]

	idx = add8Bit(hL,fr->frictionCompensationOn,idx);
 8003940:	6a3b      	ldr	r3, [r7, #32]
 8003942:	781b      	ldrb	r3, [r3, #0]
 8003944:	8afa      	ldrh	r2, [r7, #22]
 8003946:	4619      	mov	r1, r3
 8003948:	68f8      	ldr	r0, [r7, #12]
 800394a:	f7ff fea8 	bl	800369e <add8Bit>
 800394e:	4603      	mov	r3, r0
 8003950:	82fb      	strh	r3, [r7, #22]
	idx = addFloat(hL,fr->inst_frictionAddition,idx);
 8003952:	6a3b      	ldr	r3, [r7, #32]
 8003954:	edd3 7a04 	vldr	s15, [r3, #16]
 8003958:	8afb      	ldrh	r3, [r7, #22]
 800395a:	4619      	mov	r1, r3
 800395c:	eeb0 0a67 	vmov.f32	s0, s15
 8003960:	68f8      	ldr	r0, [r7, #12]
 8003962:	f7ff fef7 	bl	8003754 <addFloat>
 8003966:	4603      	mov	r3, r0
 8003968:	82fb      	strh	r3, [r7, #22]

	idx = add8Bit(hL,cg->coggingCompensationOn,idx);
 800396a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800396c:	781b      	ldrb	r3, [r3, #0]
 800396e:	8afa      	ldrh	r2, [r7, #22]
 8003970:	4619      	mov	r1, r3
 8003972:	68f8      	ldr	r0, [r7, #12]
 8003974:	f7ff fe93 	bl	800369e <add8Bit>
 8003978:	4603      	mov	r3, r0
 800397a:	82fb      	strh	r3, [r7, #22]
	idx = addFloat(hL,cg->inst_coggingAddition,idx);
 800397c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800397e:	edd3 7a05 	vldr	s15, [r3, #20]
 8003982:	8afb      	ldrh	r3, [r7, #22]
 8003984:	4619      	mov	r1, r3
 8003986:	eeb0 0a67 	vmov.f32	s0, s15
 800398a:	68f8      	ldr	r0, [r7, #12]
 800398c:	f7ff fee2 	bl	8003754 <addFloat>
 8003990:	4603      	mov	r3, r0
 8003992:	82fb      	strh	r3, [r7, #22]

	idx = addFloat(hL,svpwm->voltagePercent,idx);
 8003994:	68bb      	ldr	r3, [r7, #8]
 8003996:	edd3 7a01 	vldr	s15, [r3, #4]
 800399a:	8afb      	ldrh	r3, [r7, #22]
 800399c:	4619      	mov	r1, r3
 800399e:	eeb0 0a67 	vmov.f32	s0, s15
 80039a2:	68f8      	ldr	r0, [r7, #12]
 80039a4:	f7ff fed6 	bl	8003754 <addFloat>
 80039a8:	4603      	mov	r3, r0
 80039aa:	82fb      	strh	r3, [r7, #22]
	idx = addFloat(hL,foc->m,idx);
 80039ac:	683b      	ldr	r3, [r7, #0]
 80039ae:	edd3 7a0d 	vldr	s15, [r3, #52]	@ 0x34
 80039b2:	8afb      	ldrh	r3, [r7, #22]
 80039b4:	4619      	mov	r1, r3
 80039b6:	eeb0 0a67 	vmov.f32	s0, s15
 80039ba:	68f8      	ldr	r0, [r7, #12]
 80039bc:	f7ff feca 	bl	8003754 <addFloat>
 80039c0:	4603      	mov	r3, r0
 80039c2:	82fb      	strh	r3, [r7, #22]

	idx = add8Bit(hL,0x58,idx); // :
 80039c4:	8afb      	ldrh	r3, [r7, #22]
 80039c6:	461a      	mov	r2, r3
 80039c8:	2158      	movs	r1, #88	@ 0x58
 80039ca:	68f8      	ldr	r0, [r7, #12]
 80039cc:	f7ff fe67 	bl	800369e <add8Bit>
 80039d0:	4603      	mov	r3, r0
 80039d2:	82fb      	strh	r3, [r7, #22]
	idx = add8Bit(hL,0x69,idx); // E
 80039d4:	8afb      	ldrh	r3, [r7, #22]
 80039d6:	461a      	mov	r2, r3
 80039d8:	2169      	movs	r1, #105	@ 0x69
 80039da:	68f8      	ldr	r0, [r7, #12]
 80039dc:	f7ff fe5f 	bl	800369e <add8Bit>
 80039e0:	4603      	mov	r3, r0
 80039e2:	82fb      	strh	r3, [r7, #22]

	idx = add8Bit(hL,0x0A,idx); // 0A
 80039e4:	8afb      	ldrh	r3, [r7, #22]
 80039e6:	461a      	mov	r2, r3
 80039e8:	210a      	movs	r1, #10
 80039ea:	68f8      	ldr	r0, [r7, #12]
 80039ec:	f7ff fe57 	bl	800369e <add8Bit>
 80039f0:	4603      	mov	r3, r0
 80039f2:	82fb      	strh	r3, [r7, #22]
	idx = add8Bit(hL,0x0D,idx); // 0D
 80039f4:	8afb      	ldrh	r3, [r7, #22]
 80039f6:	461a      	mov	r2, r3
 80039f8:	210d      	movs	r1, #13
 80039fa:	68f8      	ldr	r0, [r7, #12]
 80039fc:	f7ff fe4f 	bl	800369e <add8Bit>
 8003a00:	4603      	mov	r3, r0
 8003a02:	82fb      	strh	r3, [r7, #22]
	return idx;
 8003a04:	8afb      	ldrh	r3, [r7, #22]
}
 8003a06:	4618      	mov	r0, r3
 8003a08:	3718      	adds	r7, #24
 8003a0a:	46bd      	mov	sp, r7
 8003a0c:	bd80      	pop	{r7, pc}

08003a0e <hsLog_CheckStopConditionReached>:


void hsLog_CheckStopConditionReached(HSLogger *hL,PositionSensor *ps,int8_t direction){
 8003a0e:	b480      	push	{r7}
 8003a10:	b085      	sub	sp, #20
 8003a12:	af00      	add	r7, sp, #0
 8003a14:	60f8      	str	r0, [r7, #12]
 8003a16:	60b9      	str	r1, [r7, #8]
 8003a18:	4613      	mov	r3, r2
 8003a1a:	71fb      	strb	r3, [r7, #7]
	 hL->stopAndFlushBuffer = 0;
 8003a1c:	68fb      	ldr	r3, [r7, #12]
 8003a1e:	2200      	movs	r2, #0
 8003a20:	731a      	strb	r2, [r3, #12]
	if (direction == CW){
 8003a22:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003a26:	2b01      	cmp	r3, #1
 8003a28:	d10f      	bne.n	8003a4a <hsLog_CheckStopConditionReached+0x3c>
	  if (ps->multiturn_mech_radians > hL->end_multiTurns){
 8003a2a:	68bb      	ldr	r3, [r7, #8]
 8003a2c:	ed93 7a14 	vldr	s14, [r3, #80]	@ 0x50
 8003a30:	68fb      	ldr	r3, [r7, #12]
 8003a32:	edd3 7a02 	vldr	s15, [r3, #8]
 8003a36:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003a3a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003a3e:	dc00      	bgt.n	8003a42 <hsLog_CheckStopConditionReached+0x34>
	  if (ps->multiturn_mech_radians < hL->end_multiTurns){
		  hL->stopAndFlushBuffer = 1;
	  }
	}
	else{}
}
 8003a40:	e017      	b.n	8003a72 <hsLog_CheckStopConditionReached+0x64>
		  hL->stopAndFlushBuffer = 1;
 8003a42:	68fb      	ldr	r3, [r7, #12]
 8003a44:	2201      	movs	r2, #1
 8003a46:	731a      	strb	r2, [r3, #12]
}
 8003a48:	e013      	b.n	8003a72 <hsLog_CheckStopConditionReached+0x64>
	else if (direction == CCW){
 8003a4a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003a4e:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8003a52:	d10e      	bne.n	8003a72 <hsLog_CheckStopConditionReached+0x64>
	  if (ps->multiturn_mech_radians < hL->end_multiTurns){
 8003a54:	68bb      	ldr	r3, [r7, #8]
 8003a56:	ed93 7a14 	vldr	s14, [r3, #80]	@ 0x50
 8003a5a:	68fb      	ldr	r3, [r7, #12]
 8003a5c:	edd3 7a02 	vldr	s15, [r3, #8]
 8003a60:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003a64:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003a68:	d400      	bmi.n	8003a6c <hsLog_CheckStopConditionReached+0x5e>
}
 8003a6a:	e002      	b.n	8003a72 <hsLog_CheckStopConditionReached+0x64>
		  hL->stopAndFlushBuffer = 1;
 8003a6c:	68fb      	ldr	r3, [r7, #12]
 8003a6e:	2201      	movs	r2, #1
 8003a70:	731a      	strb	r2, [r3, #12]
}
 8003a72:	bf00      	nop
 8003a74:	3714      	adds	r7, #20
 8003a76:	46bd      	mov	sp, r7
 8003a78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a7c:	4770      	bx	lr

08003a7e <fast_fmaxf>:
 */

#include "MathOps.h"


float fast_fmaxf(float x, float y){
 8003a7e:	b480      	push	{r7}
 8003a80:	b083      	sub	sp, #12
 8003a82:	af00      	add	r7, sp, #0
 8003a84:	ed87 0a01 	vstr	s0, [r7, #4]
 8003a88:	edc7 0a00 	vstr	s1, [r7]
    /// Returns maximum of x, y ///
    return (((x)>(y))?(x):(y));
 8003a8c:	ed97 7a01 	vldr	s14, [r7, #4]
 8003a90:	edd7 7a00 	vldr	s15, [r7]
 8003a94:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003a98:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003a9c:	dd01      	ble.n	8003aa2 <fast_fmaxf+0x24>
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	e000      	b.n	8003aa4 <fast_fmaxf+0x26>
 8003aa2:	683b      	ldr	r3, [r7, #0]
 8003aa4:	ee07 3a90 	vmov	s15, r3
    }
 8003aa8:	eeb0 0a67 	vmov.f32	s0, s15
 8003aac:	370c      	adds	r7, #12
 8003aae:	46bd      	mov	sp, r7
 8003ab0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ab4:	4770      	bx	lr

08003ab6 <fast_fminf>:

float fast_fminf(float x, float y){
 8003ab6:	b480      	push	{r7}
 8003ab8:	b083      	sub	sp, #12
 8003aba:	af00      	add	r7, sp, #0
 8003abc:	ed87 0a01 	vstr	s0, [r7, #4]
 8003ac0:	edc7 0a00 	vstr	s1, [r7]
    /// Returns minimum of x, y ///
    return (((x)<(y))?(x):(y));
 8003ac4:	ed97 7a01 	vldr	s14, [r7, #4]
 8003ac8:	edd7 7a00 	vldr	s15, [r7]
 8003acc:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003ad0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003ad4:	d501      	bpl.n	8003ada <fast_fminf+0x24>
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	e000      	b.n	8003adc <fast_fminf+0x26>
 8003ada:	683b      	ldr	r3, [r7, #0]
 8003adc:	ee07 3a90 	vmov	s15, r3
    }
 8003ae0:	eeb0 0a67 	vmov.f32	s0, s15
 8003ae4:	370c      	adds	r7, #12
 8003ae6:	46bd      	mov	sp, r7
 8003ae8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003aec:	4770      	bx	lr
	...

08003af0 <Init_ConstJerk_PosControl>:
 */


#include "PosControl-JC.h"

void Init_ConstJerk_PosControl(posControlJC *p){
 8003af0:	b480      	push	{r7}
 8003af2:	b083      	sub	sp, #12
 8003af4:	af00      	add	r7, sp, #0
 8003af6:	6078      	str	r0, [r7, #4]
	p->execCallingTime_ms = CALLING_TIME_MS;
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 8003afe:	60da      	str	r2, [r3, #12]
	p->execCallingTime_s = p->execCallingTime_ms/1000.0f;
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	ed93 7a03 	vldr	s14, [r3, #12]
 8003b06:	eddf 6a06 	vldr	s13, [pc, #24]	@ 8003b20 <Init_ConstJerk_PosControl+0x30>
 8003b0a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	edc3 7a04 	vstr	s15, [r3, #16]
}
 8003b14:	bf00      	nop
 8003b16:	370c      	adds	r7, #12
 8003b18:	46bd      	mov	sp, r7
 8003b1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b1e:	4770      	bx	lr
 8003b20:	447a0000 	.word	0x447a0000

08003b24 <Reset_posControlJC>:


void Reset_posControlJC(posControlJC *p){
 8003b24:	b480      	push	{r7}
 8003b26:	b085      	sub	sp, #20
 8003b28:	af00      	add	r7, sp, #0
 8003b2a:	6078      	str	r0, [r7, #4]
	p->targetDistanceDeg = 0;
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	f04f 0200 	mov.w	r2, #0
 8003b32:	601a      	str	r2, [r3, #0]
	p->targetTime_ms = 0;
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	f04f 0200 	mov.w	r2, #0
 8003b3a:	605a      	str	r2, [r3, #4]

	p->instTime_ms = 0;
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	f04f 0200 	mov.w	r2, #0
 8003b42:	63da      	str	r2, [r3, #60]	@ 0x3c
	p->instAccel = 0;
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	f04f 0200 	mov.w	r2, #0
 8003b4a:	649a      	str	r2, [r3, #72]	@ 0x48
	p->instSubInterval=0;
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	f04f 0200 	mov.w	r2, #0
 8003b52:	641a      	str	r2, [r3, #64]	@ 0x40
	p->instJerk=0;
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	f04f 0200 	mov.w	r2, #0
 8003b5a:	645a      	str	r2, [r3, #68]	@ 0x44
	p->instAccel=0;
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	f04f 0200 	mov.w	r2, #0
 8003b62:	649a      	str	r2, [r3, #72]	@ 0x48
	p->instVel=0;
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	f04f 0200 	mov.w	r2, #0
 8003b6a:	64da      	str	r2, [r3, #76]	@ 0x4c
	p->instVelRPM=0;
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	f04f 0200 	mov.w	r2, #0
 8003b72:	651a      	str	r2, [r3, #80]	@ 0x50
	p->instTheta=0;
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	f04f 0200 	mov.w	r2, #0
 8003b7a:	655a      	str	r2, [r3, #84]	@ 0x54

	p->subIntervalTime_ms=0;
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	2200      	movs	r2, #0
 8003b80:	829a      	strh	r2, [r3, #20]
	for (int i=0;i<9;i++){
 8003b82:	2300      	movs	r3, #0
 8003b84:	60fb      	str	r3, [r7, #12]
 8003b86:	e009      	b.n	8003b9c <Reset_posControlJC+0x78>
		p->subIntervalTime_msArray[i] = 0;
 8003b88:	687a      	ldr	r2, [r7, #4]
 8003b8a:	68fb      	ldr	r3, [r7, #12]
 8003b8c:	330c      	adds	r3, #12
 8003b8e:	005b      	lsls	r3, r3, #1
 8003b90:	4413      	add	r3, r2
 8003b92:	2200      	movs	r2, #0
 8003b94:	809a      	strh	r2, [r3, #4]
	for (int i=0;i<9;i++){
 8003b96:	68fb      	ldr	r3, [r7, #12]
 8003b98:	3301      	adds	r3, #1
 8003b9a:	60fb      	str	r3, [r7, #12]
 8003b9c:	68fb      	ldr	r3, [r7, #12]
 8003b9e:	2b08      	cmp	r3, #8
 8003ba0:	ddf2      	ble.n	8003b88 <Reset_posControlJC+0x64>
	}
	p->jerkVal=0;
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	f04f 0200 	mov.w	r2, #0
 8003ba8:	619a      	str	r2, [r3, #24]
	p->maxVelRad_sec=0;
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	f04f 0200 	mov.w	r2, #0
 8003bb0:	631a      	str	r2, [r3, #48]	@ 0x30
	p->maxVel_RPM=0;
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	f04f 0200 	mov.w	r2, #0
 8003bb8:	635a      	str	r2, [r3, #52]	@ 0x34

	p->state = POS_IDLE;
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	2203      	movs	r2, #3
 8003bbe:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
}
 8003bc2:	bf00      	nop
 8003bc4:	3714      	adds	r7, #20
 8003bc6:	46bd      	mov	sp, r7
 8003bc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bcc:	4770      	bx	lr
	...

08003bd0 <Setup_posControlJC>:

void Setup_posControlJC(posControlJC *p,float targetThetaDeg,float targetTime_ms){
 8003bd0:	b480      	push	{r7}
 8003bd2:	b087      	sub	sp, #28
 8003bd4:	af00      	add	r7, sp, #0
 8003bd6:	60f8      	str	r0, [r7, #12]
 8003bd8:	ed87 0a02 	vstr	s0, [r7, #8]
 8003bdc:	edc7 0a01 	vstr	s1, [r7, #4]
	p->targetDistanceDeg = targetThetaDeg;
 8003be0:	68fb      	ldr	r3, [r7, #12]
 8003be2:	68ba      	ldr	r2, [r7, #8]
 8003be4:	601a      	str	r2, [r3, #0]
	p->targetTime_ms = targetTime_ms;
 8003be6:	68fb      	ldr	r3, [r7, #12]
 8003be8:	687a      	ldr	r2, [r7, #4]
 8003bea:	605a      	str	r2, [r3, #4]

	p->subIntervalTime_ms = targetTime_ms/9.0f;
 8003bec:	ed97 7a01 	vldr	s14, [r7, #4]
 8003bf0:	eef2 6a02 	vmov.f32	s13, #34	@ 0x41100000  9.0
 8003bf4:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8003bf8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003bfc:	ee17 3a90 	vmov	r3, s15
 8003c00:	b29a      	uxth	r2, r3
 8003c02:	68fb      	ldr	r3, [r7, #12]
 8003c04:	829a      	strh	r2, [r3, #20]
	p->targetDistanceRad = p->targetDistanceDeg*DEG_TO_RAD;
 8003c06:	68fb      	ldr	r3, [r7, #12]
 8003c08:	edd3 7a00 	vldr	s15, [r3]
 8003c0c:	ed9f 7a47 	vldr	s14, [pc, #284]	@ 8003d2c <Setup_posControlJC+0x15c>
 8003c10:	ee27 7a87 	vmul.f32	s14, s15, s14
 8003c14:	eddf 6a46 	vldr	s13, [pc, #280]	@ 8003d30 <Setup_posControlJC+0x160>
 8003c18:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8003c1c:	68fb      	ldr	r3, [r7, #12]
 8003c1e:	edc3 7a02 	vstr	s15, [r3, #8]
	float subInterval_s = (float)p->subIntervalTime_ms/1000.0f;
 8003c22:	68fb      	ldr	r3, [r7, #12]
 8003c24:	8a9b      	ldrh	r3, [r3, #20]
 8003c26:	ee07 3a90 	vmov	s15, r3
 8003c2a:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8003c2e:	eddf 6a41 	vldr	s13, [pc, #260]	@ 8003d34 <Setup_posControlJC+0x164>
 8003c32:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8003c36:	edc7 7a05 	vstr	s15, [r7, #20]
	p->jerkVal = p->targetDistanceRad/(12.0f*subInterval_s*subInterval_s*subInterval_s);
 8003c3a:	68fb      	ldr	r3, [r7, #12]
 8003c3c:	edd3 6a02 	vldr	s13, [r3, #8]
 8003c40:	edd7 7a05 	vldr	s15, [r7, #20]
 8003c44:	eeb2 7a08 	vmov.f32	s14, #40	@ 0x41400000  12.0
 8003c48:	ee27 7a87 	vmul.f32	s14, s15, s14
 8003c4c:	edd7 7a05 	vldr	s15, [r7, #20]
 8003c50:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003c54:	edd7 7a05 	vldr	s15, [r7, #20]
 8003c58:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003c5c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003c60:	68fb      	ldr	r3, [r7, #12]
 8003c62:	edc3 7a06 	vstr	s15, [r3, #24]

	p->maxVelRad_sec = p->jerkVal * 2.0f * subInterval_s * subInterval_s;
 8003c66:	68fb      	ldr	r3, [r7, #12]
 8003c68:	edd3 7a06 	vldr	s15, [r3, #24]
 8003c6c:	ee37 7aa7 	vadd.f32	s14, s15, s15
 8003c70:	edd7 7a05 	vldr	s15, [r7, #20]
 8003c74:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003c78:	edd7 7a05 	vldr	s15, [r7, #20]
 8003c7c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003c80:	68fb      	ldr	r3, [r7, #12]
 8003c82:	edc3 7a0c 	vstr	s15, [r3, #48]	@ 0x30
	p->maxVel_RPM = p->maxVelRad_sec * 60.0f / TWO_PI_F;
 8003c86:	68fb      	ldr	r3, [r7, #12]
 8003c88:	edd3 7a0c 	vldr	s15, [r3, #48]	@ 0x30
 8003c8c:	ed9f 7a2a 	vldr	s14, [pc, #168]	@ 8003d38 <Setup_posControlJC+0x168>
 8003c90:	ee27 7a87 	vmul.f32	s14, s15, s14
 8003c94:	eddf 6a29 	vldr	s13, [pc, #164]	@ 8003d3c <Setup_posControlJC+0x16c>
 8003c98:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8003c9c:	68fb      	ldr	r3, [r7, #12]
 8003c9e:	edc3 7a0d 	vstr	s15, [r3, #52]	@ 0x34

	//PUT CHECKS HERE

	p->subIntervalTime_msArray[0] = p->subIntervalTime_ms * 1;
 8003ca2:	68fb      	ldr	r3, [r7, #12]
 8003ca4:	8a9a      	ldrh	r2, [r3, #20]
 8003ca6:	68fb      	ldr	r3, [r7, #12]
 8003ca8:	839a      	strh	r2, [r3, #28]
	p->subIntervalTime_msArray[1] = p->subIntervalTime_ms * 2;
 8003caa:	68fb      	ldr	r3, [r7, #12]
 8003cac:	8a9b      	ldrh	r3, [r3, #20]
 8003cae:	005b      	lsls	r3, r3, #1
 8003cb0:	b29a      	uxth	r2, r3
 8003cb2:	68fb      	ldr	r3, [r7, #12]
 8003cb4:	83da      	strh	r2, [r3, #30]
	p->subIntervalTime_msArray[2] = p->subIntervalTime_ms * 3;
 8003cb6:	68fb      	ldr	r3, [r7, #12]
 8003cb8:	8a9b      	ldrh	r3, [r3, #20]
 8003cba:	461a      	mov	r2, r3
 8003cbc:	0052      	lsls	r2, r2, #1
 8003cbe:	4413      	add	r3, r2
 8003cc0:	b29a      	uxth	r2, r3
 8003cc2:	68fb      	ldr	r3, [r7, #12]
 8003cc4:	841a      	strh	r2, [r3, #32]
	p->subIntervalTime_msArray[3] = p->subIntervalTime_ms * 4;
 8003cc6:	68fb      	ldr	r3, [r7, #12]
 8003cc8:	8a9b      	ldrh	r3, [r3, #20]
 8003cca:	009b      	lsls	r3, r3, #2
 8003ccc:	b29a      	uxth	r2, r3
 8003cce:	68fb      	ldr	r3, [r7, #12]
 8003cd0:	845a      	strh	r2, [r3, #34]	@ 0x22
	p->subIntervalTime_msArray[4] = p->subIntervalTime_ms * 5;
 8003cd2:	68fb      	ldr	r3, [r7, #12]
 8003cd4:	8a9b      	ldrh	r3, [r3, #20]
 8003cd6:	461a      	mov	r2, r3
 8003cd8:	0092      	lsls	r2, r2, #2
 8003cda:	4413      	add	r3, r2
 8003cdc:	b29a      	uxth	r2, r3
 8003cde:	68fb      	ldr	r3, [r7, #12]
 8003ce0:	849a      	strh	r2, [r3, #36]	@ 0x24
	p->subIntervalTime_msArray[5] = p->subIntervalTime_ms * 6;
 8003ce2:	68fb      	ldr	r3, [r7, #12]
 8003ce4:	8a9b      	ldrh	r3, [r3, #20]
 8003ce6:	461a      	mov	r2, r3
 8003ce8:	0052      	lsls	r2, r2, #1
 8003cea:	4413      	add	r3, r2
 8003cec:	005b      	lsls	r3, r3, #1
 8003cee:	b29a      	uxth	r2, r3
 8003cf0:	68fb      	ldr	r3, [r7, #12]
 8003cf2:	84da      	strh	r2, [r3, #38]	@ 0x26
	p->subIntervalTime_msArray[6] = p->subIntervalTime_ms * 7;
 8003cf4:	68fb      	ldr	r3, [r7, #12]
 8003cf6:	8a9b      	ldrh	r3, [r3, #20]
 8003cf8:	461a      	mov	r2, r3
 8003cfa:	00d2      	lsls	r2, r2, #3
 8003cfc:	1ad3      	subs	r3, r2, r3
 8003cfe:	b29a      	uxth	r2, r3
 8003d00:	68fb      	ldr	r3, [r7, #12]
 8003d02:	851a      	strh	r2, [r3, #40]	@ 0x28
	p->subIntervalTime_msArray[7] = p->subIntervalTime_ms * 8;
 8003d04:	68fb      	ldr	r3, [r7, #12]
 8003d06:	8a9b      	ldrh	r3, [r3, #20]
 8003d08:	00db      	lsls	r3, r3, #3
 8003d0a:	b29a      	uxth	r2, r3
 8003d0c:	68fb      	ldr	r3, [r7, #12]
 8003d0e:	855a      	strh	r2, [r3, #42]	@ 0x2a
	p->subIntervalTime_msArray[8] = p->subIntervalTime_ms * 9;
 8003d10:	68fb      	ldr	r3, [r7, #12]
 8003d12:	8a9b      	ldrh	r3, [r3, #20]
 8003d14:	461a      	mov	r2, r3
 8003d16:	00d2      	lsls	r2, r2, #3
 8003d18:	4413      	add	r3, r2
 8003d1a:	b29a      	uxth	r2, r3
 8003d1c:	68fb      	ldr	r3, [r7, #12]
 8003d1e:	859a      	strh	r2, [r3, #44]	@ 0x2c

}
 8003d20:	bf00      	nop
 8003d22:	371c      	adds	r7, #28
 8003d24:	46bd      	mov	sp, r7
 8003d26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d2a:	4770      	bx	lr
 8003d2c:	40490fd0 	.word	0x40490fd0
 8003d30:	43340000 	.word	0x43340000
 8003d34:	447a0000 	.word	0x447a0000
 8003d38:	42700000 	.word	0x42700000
 8003d3c:	40c90fda 	.word	0x40c90fda

08003d40 <ExecPosTrajectory>:


void ExecPosTrajectory(posControlJC *p){
 8003d40:	b480      	push	{r7}
 8003d42:	b083      	sub	sp, #12
 8003d44:	af00      	add	r7, sp, #0
 8003d46:	6078      	str	r0, [r7, #4]

	if (p->instTime_ms >= p->targetTime_ms){
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	ed93 7a0f 	vldr	s14, [r3, #60]	@ 0x3c
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	edd3 7a01 	vldr	s15, [r3, #4]
 8003d54:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003d58:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003d5c:	db03      	blt.n	8003d66 <ExecPosTrajectory+0x26>
		p->state = POS_OVER;
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	2202      	movs	r2, #2
 8003d62:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
	}

	if (p->state == POS_RUNNING){
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8003d6c:	2b01      	cmp	r3, #1
 8003d6e:	f040 811f 	bne.w	8003fb0 <ExecPosTrajectory+0x270>
		p->instTime_ms += p->execCallingTime_ms;
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	ed93 7a0f 	vldr	s14, [r3, #60]	@ 0x3c
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	edd3 7a03 	vldr	s15, [r3, #12]
 8003d7e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	edc3 7a0f 	vstr	s15, [r3, #60]	@ 0x3c

		if (p->instTime_ms < p->subIntervalTime_msArray[0]){
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	ed93 7a0f 	vldr	s14, [r3, #60]	@ 0x3c
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	8b9b      	ldrh	r3, [r3, #28]
 8003d92:	ee07 3a90 	vmov	s15, r3
 8003d96:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003d9a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003d9e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003da2:	d508      	bpl.n	8003db6 <ExecPosTrajectory+0x76>
			p->instJerk = p->jerkVal;
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	699a      	ldr	r2, [r3, #24]
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	645a      	str	r2, [r3, #68]	@ 0x44
			p->instSubInterval = 1;
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 8003db2:	641a      	str	r2, [r3, #64]	@ 0x40
 8003db4:	e0be      	b.n	8003f34 <ExecPosTrajectory+0x1f4>
		}
		else if (p->instTime_ms < p->subIntervalTime_msArray[1]){
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	ed93 7a0f 	vldr	s14, [r3, #60]	@ 0x3c
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	8bdb      	ldrh	r3, [r3, #30]
 8003dc0:	ee07 3a90 	vmov	s15, r3
 8003dc4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003dc8:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003dcc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003dd0:	d508      	bpl.n	8003de4 <ExecPosTrajectory+0xa4>
			p->instJerk = 0;
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	f04f 0200 	mov.w	r2, #0
 8003dd8:	645a      	str	r2, [r3, #68]	@ 0x44
			p->instSubInterval = 2;
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8003de0:	641a      	str	r2, [r3, #64]	@ 0x40
 8003de2:	e0a7      	b.n	8003f34 <ExecPosTrajectory+0x1f4>
		}
		else if (p->instTime_ms < p->subIntervalTime_msArray[2]){
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	ed93 7a0f 	vldr	s14, [r3, #60]	@ 0x3c
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	8c1b      	ldrh	r3, [r3, #32]
 8003dee:	ee07 3a90 	vmov	s15, r3
 8003df2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003df6:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003dfa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003dfe:	d50b      	bpl.n	8003e18 <ExecPosTrajectory+0xd8>
			p->instJerk = -p->jerkVal;
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	edd3 7a06 	vldr	s15, [r3, #24]
 8003e06:	eef1 7a67 	vneg.f32	s15, s15
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	edc3 7a11 	vstr	s15, [r3, #68]	@ 0x44
			p->instSubInterval = 3;
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	4a6a      	ldr	r2, [pc, #424]	@ (8003fbc <ExecPosTrajectory+0x27c>)
 8003e14:	641a      	str	r2, [r3, #64]	@ 0x40
 8003e16:	e08d      	b.n	8003f34 <ExecPosTrajectory+0x1f4>
		}
		else if (p->instTime_ms < p->subIntervalTime_msArray[3]){
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	ed93 7a0f 	vldr	s14, [r3, #60]	@ 0x3c
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	8c5b      	ldrh	r3, [r3, #34]	@ 0x22
 8003e22:	ee07 3a90 	vmov	s15, r3
 8003e26:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003e2a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003e2e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003e32:	d508      	bpl.n	8003e46 <ExecPosTrajectory+0x106>
			p->instJerk = 0;
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	f04f 0200 	mov.w	r2, #0
 8003e3a:	645a      	str	r2, [r3, #68]	@ 0x44
			p->instSubInterval = 4;
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	f04f 4281 	mov.w	r2, #1082130432	@ 0x40800000
 8003e42:	641a      	str	r2, [r3, #64]	@ 0x40
 8003e44:	e076      	b.n	8003f34 <ExecPosTrajectory+0x1f4>
		}
		else if (p->instTime_ms < p->subIntervalTime_msArray[4]){
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	ed93 7a0f 	vldr	s14, [r3, #60]	@ 0x3c
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 8003e50:	ee07 3a90 	vmov	s15, r3
 8003e54:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003e58:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003e5c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003e60:	d507      	bpl.n	8003e72 <ExecPosTrajectory+0x132>
			p->instJerk = 0;
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	f04f 0200 	mov.w	r2, #0
 8003e68:	645a      	str	r2, [r3, #68]	@ 0x44
			p->instSubInterval = 5;
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	4a54      	ldr	r2, [pc, #336]	@ (8003fc0 <ExecPosTrajectory+0x280>)
 8003e6e:	641a      	str	r2, [r3, #64]	@ 0x40
 8003e70:	e060      	b.n	8003f34 <ExecPosTrajectory+0x1f4>
		}
		else if (p->instTime_ms < p->subIntervalTime_msArray[5]){
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	ed93 7a0f 	vldr	s14, [r3, #60]	@ 0x3c
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8003e7c:	ee07 3a90 	vmov	s15, r3
 8003e80:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003e84:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003e88:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003e8c:	d507      	bpl.n	8003e9e <ExecPosTrajectory+0x15e>
			p->instJerk = 0;
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	f04f 0200 	mov.w	r2, #0
 8003e94:	645a      	str	r2, [r3, #68]	@ 0x44
			p->instSubInterval = 6;
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	4a4a      	ldr	r2, [pc, #296]	@ (8003fc4 <ExecPosTrajectory+0x284>)
 8003e9a:	641a      	str	r2, [r3, #64]	@ 0x40
 8003e9c:	e04a      	b.n	8003f34 <ExecPosTrajectory+0x1f4>
		}
		else if (p->instTime_ms < p->subIntervalTime_msArray[6]){
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	ed93 7a0f 	vldr	s14, [r3, #60]	@ 0x3c
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003ea8:	ee07 3a90 	vmov	s15, r3
 8003eac:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003eb0:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003eb4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003eb8:	d50b      	bpl.n	8003ed2 <ExecPosTrajectory+0x192>
			p->instJerk = -p->jerkVal;
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	edd3 7a06 	vldr	s15, [r3, #24]
 8003ec0:	eef1 7a67 	vneg.f32	s15, s15
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	edc3 7a11 	vstr	s15, [r3, #68]	@ 0x44
			p->instSubInterval = 7;
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	4a3e      	ldr	r2, [pc, #248]	@ (8003fc8 <ExecPosTrajectory+0x288>)
 8003ece:	641a      	str	r2, [r3, #64]	@ 0x40
 8003ed0:	e030      	b.n	8003f34 <ExecPosTrajectory+0x1f4>
		}
		else if (p->instTime_ms < p->subIntervalTime_msArray[7]){
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	ed93 7a0f 	vldr	s14, [r3, #60]	@ 0x3c
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003edc:	ee07 3a90 	vmov	s15, r3
 8003ee0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003ee4:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003ee8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003eec:	d508      	bpl.n	8003f00 <ExecPosTrajectory+0x1c0>
			p->instJerk = 0;
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	f04f 0200 	mov.w	r2, #0
 8003ef4:	645a      	str	r2, [r3, #68]	@ 0x44
			p->instSubInterval = 8;
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	f04f 4282 	mov.w	r2, #1090519040	@ 0x41000000
 8003efc:	641a      	str	r2, [r3, #64]	@ 0x40
 8003efe:	e019      	b.n	8003f34 <ExecPosTrajectory+0x1f4>
		}
		else if (p->instTime_ms < p->subIntervalTime_msArray[8]){
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	ed93 7a0f 	vldr	s14, [r3, #60]	@ 0x3c
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8003f0a:	ee07 3a90 	vmov	s15, r3
 8003f0e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003f12:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003f16:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003f1a:	d507      	bpl.n	8003f2c <ExecPosTrajectory+0x1ec>
			p->instJerk = p->jerkVal;
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	699a      	ldr	r2, [r3, #24]
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	645a      	str	r2, [r3, #68]	@ 0x44
			p->instSubInterval = 9;
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	4a29      	ldr	r2, [pc, #164]	@ (8003fcc <ExecPosTrajectory+0x28c>)
 8003f28:	641a      	str	r2, [r3, #64]	@ 0x40
 8003f2a:	e003      	b.n	8003f34 <ExecPosTrajectory+0x1f4>
		}else{
			p->instJerk = 0;
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	f04f 0200 	mov.w	r2, #0
 8003f32:	645a      	str	r2, [r3, #68]	@ 0x44
		}
	    p->instAccel = p->instAccel  + p->instJerk*p->execCallingTime_s;
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	ed93 7a12 	vldr	s14, [r3, #72]	@ 0x48
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	edd3 6a11 	vldr	s13, [r3, #68]	@ 0x44
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	edd3 7a04 	vldr	s15, [r3, #16]
 8003f46:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003f4a:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	edc3 7a12 	vstr	s15, [r3, #72]	@ 0x48
	    p->instVel = p->instVel + p->instAccel*p->execCallingTime_s;
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	ed93 7a13 	vldr	s14, [r3, #76]	@ 0x4c
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	edd3 6a12 	vldr	s13, [r3, #72]	@ 0x48
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	edd3 7a04 	vldr	s15, [r3, #16]
 8003f66:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003f6a:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	edc3 7a13 	vstr	s15, [r3, #76]	@ 0x4c
	    p->instTheta = p->instTheta + p->instVel * p->execCallingTime_s;
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	ed93 7a15 	vldr	s14, [r3, #84]	@ 0x54
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	edd3 6a13 	vldr	s13, [r3, #76]	@ 0x4c
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	edd3 7a04 	vldr	s15, [r3, #16]
 8003f86:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003f8a:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	edc3 7a15 	vstr	s15, [r3, #84]	@ 0x54
	    p->instVelRPM = p->instVel * 60.0f/TWO_PI_F;
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	edd3 7a13 	vldr	s15, [r3, #76]	@ 0x4c
 8003f9a:	ed9f 7a0d 	vldr	s14, [pc, #52]	@ 8003fd0 <ExecPosTrajectory+0x290>
 8003f9e:	ee27 7a87 	vmul.f32	s14, s15, s14
 8003fa2:	eddf 6a0c 	vldr	s13, [pc, #48]	@ 8003fd4 <ExecPosTrajectory+0x294>
 8003fa6:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	edc3 7a14 	vstr	s15, [r3, #80]	@ 0x50

	}
}
 8003fb0:	bf00      	nop
 8003fb2:	370c      	adds	r7, #12
 8003fb4:	46bd      	mov	sp, r7
 8003fb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fba:	4770      	bx	lr
 8003fbc:	40400000 	.word	0x40400000
 8003fc0:	40a00000 	.word	0x40a00000
 8003fc4:	40c00000 	.word	0x40c00000
 8003fc8:	40e00000 	.word	0x40e00000
 8003fcc:	41100000 	.word	0x41100000
 8003fd0:	42700000 	.word	0x42700000
 8003fd4:	40c90fda 	.word	0x40c90fda

08003fd8 <PositionSensor_update>:
	ps->avgingStarted = 0;
	ps->avg_velocity_radsec = 0;
}


void PositionSensor_update(PositionSensor* ps,float dt){
 8003fd8:	b580      	push	{r7, lr}
 8003fda:	b084      	sub	sp, #16
 8003fdc:	af00      	add	r7, sp, #0
 8003fde:	6078      	str	r0, [r7, #4]
 8003fe0:	ed87 0a00 	vstr	s0, [r7]
	//relatively slow, 500 cycles
	for (int i=15;i>=1;i--){
 8003fe4:	230f      	movs	r3, #15
 8003fe6:	60fb      	str	r3, [r7, #12]
 8003fe8:	e00d      	b.n	8004006 <PositionSensor_update+0x2e>
		ps->multiTurn_position[i]=ps->multiTurn_position[i-1];
 8003fea:	68fb      	ldr	r3, [r7, #12]
 8003fec:	3b01      	subs	r3, #1
 8003fee:	687a      	ldr	r2, [r7, #4]
 8003ff0:	009b      	lsls	r3, r3, #2
 8003ff2:	4413      	add	r3, r2
 8003ff4:	681a      	ldr	r2, [r3, #0]
 8003ff6:	6879      	ldr	r1, [r7, #4]
 8003ff8:	68fb      	ldr	r3, [r7, #12]
 8003ffa:	009b      	lsls	r3, r3, #2
 8003ffc:	440b      	add	r3, r1
 8003ffe:	601a      	str	r2, [r3, #0]
	for (int i=15;i>=1;i--){
 8004000:	68fb      	ldr	r3, [r7, #12]
 8004002:	3b01      	subs	r3, #1
 8004004:	60fb      	str	r3, [r7, #12]
 8004006:	68fb      	ldr	r3, [r7, #12]
 8004008:	2b00      	cmp	r3, #0
 800400a:	dcee      	bgt.n	8003fea <PositionSensor_update+0x12>

	// this takes the most time -> 1800 cycles with continuous read, twice that for
	//discontinuous. speed this up with your own SPI code. If we want to check health
	//of the chip we need to restart the continuous read. for that this fn needs to
	//be modified.
	ps->encoder_raw = Encoder_get16BitMechAngle_Single(1);
 800400c:	2001      	movs	r0, #1
 800400e:	f7fe ff65 	bl	8002edc <Encoder_get16BitMechAngle_Single>
 8004012:	4603      	mov	r3, r0
 8004014:	461a      	mov	r2, r3
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40
	ps->encoder_raw = ps->encoder_raw ;//>> 3;
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	f8b3 2040 	ldrh.w	r2, [r3, #64]	@ 0x40
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40
	//linearize, calibrate if you need to
	//calculations are very fast, less than 500cycles.
	ps->mechRadians_singleTurn = ps->encoder_raw*TWO_PI_F/CPR_ENCODER;
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 800402e:	ee07 3a90 	vmov	s15, r3
 8004032:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004036:	ed9f 7a4a 	vldr	s14, [pc, #296]	@ 8004160 <PositionSensor_update+0x188>
 800403a:	ee27 7a87 	vmul.f32	s14, s15, s14
 800403e:	eddf 6a49 	vldr	s13, [pc, #292]	@ 8004164 <PositionSensor_update+0x18c>
 8004042:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	edc3 7a11 	vstr	s15, [r3, #68]	@ 0x44
	ps->elecRadians  = getElecAngleFromMechAngle(ps->mechRadians_singleTurn); 	//get electrical rads from mech rads
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	edd3 7a11 	vldr	s15, [r3, #68]	@ 0x44
 8004052:	eeb0 0a67 	vmov.f32	s0, s15
 8004056:	f000 f8c7 	bl	80041e8 <getElecAngleFromMechAngle>
 800405a:	eef0 7a40 	vmov.f32	s15, s0
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	edc3 7a15 	vstr	s15, [r3, #84]	@ 0x54

	ps->delta_mechRadians_dt = ps->mechRadians_singleTurn - ps->prev_mechRadians_singleTurn;
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	ed93 7a11 	vldr	s14, [r3, #68]	@ 0x44
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	edd3 7a12 	vldr	s15, [r3, #72]	@ 0x48
 8004070:	ee77 7a67 	vsub.f32	s15, s14, s15
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	edc3 7a13 	vstr	s15, [r3, #76]	@ 0x4c
	int8_t rollover = 0;
 800407a:	2300      	movs	r3, #0
 800407c:	72fb      	strb	r3, [r7, #11]
	if(ps->delta_mechRadians_dt > PI_F){rollover = -1;}
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	edd3 7a13 	vldr	s15, [r3, #76]	@ 0x4c
 8004084:	ed9f 7a38 	vldr	s14, [pc, #224]	@ 8004168 <PositionSensor_update+0x190>
 8004088:	eef4 7ac7 	vcmpe.f32	s15, s14
 800408c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004090:	dd02      	ble.n	8004098 <PositionSensor_update+0xc0>
 8004092:	23ff      	movs	r3, #255	@ 0xff
 8004094:	72fb      	strb	r3, [r7, #11]
 8004096:	e00b      	b.n	80040b0 <PositionSensor_update+0xd8>
	else if(ps->delta_mechRadians_dt < -PI_F){rollover = 1;}
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	edd3 7a13 	vldr	s15, [r3, #76]	@ 0x4c
 800409e:	ed9f 7a33 	vldr	s14, [pc, #204]	@ 800416c <PositionSensor_update+0x194>
 80040a2:	eef4 7ac7 	vcmpe.f32	s15, s14
 80040a6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80040aa:	d501      	bpl.n	80040b0 <PositionSensor_update+0xd8>
 80040ac:	2301      	movs	r3, #1
 80040ae:	72fb      	strb	r3, [r7, #11]
	ps->turns += rollover;
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	f9b3 306c 	ldrsh.w	r3, [r3, #108]	@ 0x6c
 80040b6:	b29a      	uxth	r2, r3
 80040b8:	f997 300b 	ldrsb.w	r3, [r7, #11]
 80040bc:	b29b      	uxth	r3, r3
 80040be:	4413      	add	r3, r2
 80040c0:	b29b      	uxth	r3, r3
 80040c2:	b21a      	sxth	r2, r3
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	f8a3 206c 	strh.w	r2, [r3, #108]	@ 0x6c

	ps->multiturn_mech_radians = ps->turns * TWO_PI_F + ps->mechRadians_singleTurn;
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	f9b3 306c 	ldrsh.w	r3, [r3, #108]	@ 0x6c
 80040d0:	ee07 3a90 	vmov	s15, r3
 80040d4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80040d8:	ed9f 7a21 	vldr	s14, [pc, #132]	@ 8004160 <PositionSensor_update+0x188>
 80040dc:	ee27 7a87 	vmul.f32	s14, s15, s14
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	edd3 7a11 	vldr	s15, [r3, #68]	@ 0x44
 80040e6:	ee77 7a27 	vadd.f32	s15, s14, s15
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	edc3 7a14 	vstr	s15, [r3, #80]	@ 0x50
	ps->prev_mechRadians_singleTurn = ps->mechRadians_singleTurn;
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	649a      	str	r2, [r3, #72]	@ 0x48

	ps->multiTurn_position[0] = ps->multiturn_mech_radians;
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	601a      	str	r2, [r3, #0]

	ps->velocity_radsec = (ps->multiTurn_position[0] - ps->multiTurn_position[POS_SAMPLES-1])/(dt*(float)(POS_SAMPLES-1));
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	ed93 7a00 	vldr	s14, [r3]
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	edd3 7a0f 	vldr	s15, [r3, #60]	@ 0x3c
 800410c:	ee77 6a67 	vsub.f32	s13, s14, s15
 8004110:	edd7 7a00 	vldr	s15, [r7]
 8004114:	eeb2 7a0e 	vmov.f32	s14, #46	@ 0x41700000  15.0
 8004118:	ee27 7a87 	vmul.f32	s14, s15, s14
 800411c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	edc3 7a16 	vstr	s15, [r3, #88]	@ 0x58


	ps->velocityRPM = ps->velocity_radsec * 60.0f/TWO_PI_F;
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	edd3 7a16 	vldr	s15, [r3, #88]	@ 0x58
 800412c:	ed9f 7a10 	vldr	s14, [pc, #64]	@ 8004170 <PositionSensor_update+0x198>
 8004130:	ee27 7a87 	vmul.f32	s14, s15, s14
 8004134:	eddf 6a0a 	vldr	s13, [pc, #40]	@ 8004160 <PositionSensor_update+0x188>
 8004138:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	edc3 7a19 	vstr	s15, [r3, #100]	@ 0x64
	ps->elec_velocity_radsec = POLE_PAIRS*ps->velocity_radsec;
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	edd3 7a16 	vldr	s15, [r3, #88]	@ 0x58
 8004148:	eeb0 7a08 	vmov.f32	s14, #8	@ 0x40400000  3.0
 800414c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	edc3 7a1a 	vstr	s15, [r3, #104]	@ 0x68

}
 8004156:	bf00      	nop
 8004158:	3710      	adds	r7, #16
 800415a:	46bd      	mov	sp, r7
 800415c:	bd80      	pop	{r7, pc}
 800415e:	bf00      	nop
 8004160:	40c90fda 	.word	0x40c90fda
 8004164:	46800000 	.word	0x46800000
 8004168:	40490fd0 	.word	0x40490fd0
 800416c:	c0490fd0 	.word	0xc0490fd0
 8004170:	42700000 	.word	0x42700000

08004174 <getAveragedVelocityRadSec>:


void getAveragedVelocityRadSec(PositionSensor *ps){
 8004174:	b480      	push	{r7}
 8004176:	b083      	sub	sp, #12
 8004178:	af00      	add	r7, sp, #0
 800417a:	6078      	str	r0, [r7, #4]
	//averaging
	if (ps->avgingStarted==0){
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8004182:	2b00      	cmp	r3, #0
 8004184:	d115      	bne.n	80041b2 <getAveragedVelocityRadSec+0x3e>
		ps->avgIdx ++;
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 800418c:	3301      	adds	r3, #1
 800418e:	b2da      	uxtb	r2, r3
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
		ps->avg_velocity_radsec = 0 ;
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	f04f 0200 	mov.w	r2, #0
 800419c:	661a      	str	r2, [r3, #96]	@ 0x60
		if (ps->avgIdx >= 30){
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 80041a4:	2b1d      	cmp	r3, #29
 80041a6:	d918      	bls.n	80041da <getAveragedVelocityRadSec+0x66>
			ps->avgingStarted = 1;
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	2201      	movs	r2, #1
 80041ac:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
		}
	}
	else{
		ps->avg_velocity_radsec = ps->avg_velocity_radsec + (ps->velocity_radsec - ps->avg_velocity_radsec)/EXP_FILTER_FACTOR;
	}
}
 80041b0:	e013      	b.n	80041da <getAveragedVelocityRadSec+0x66>
		ps->avg_velocity_radsec = ps->avg_velocity_radsec + (ps->velocity_radsec - ps->avg_velocity_radsec)/EXP_FILTER_FACTOR;
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	ed93 7a18 	vldr	s14, [r3, #96]	@ 0x60
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	edd3 6a16 	vldr	s13, [r3, #88]	@ 0x58
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	edd3 7a18 	vldr	s15, [r3, #96]	@ 0x60
 80041c4:	ee76 6ae7 	vsub.f32	s13, s13, s15
 80041c8:	eeb1 6a04 	vmov.f32	s12, #20	@ 0x40a00000  5.0
 80041cc:	eec6 7a86 	vdiv.f32	s15, s13, s12
 80041d0:	ee77 7a27 	vadd.f32	s15, s14, s15
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	edc3 7a18 	vstr	s15, [r3, #96]	@ 0x60
}
 80041da:	bf00      	nop
 80041dc:	370c      	adds	r7, #12
 80041de:	46bd      	mov	sp, r7
 80041e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041e4:	4770      	bx	lr
	...

080041e8 <getElecAngleFromMechAngle>:

float getElecAngleFromMechAngle(float mechRadians){
 80041e8:	b480      	push	{r7}
 80041ea:	b087      	sub	sp, #28
 80041ec:	af00      	add	r7, sp, #0
 80041ee:	ed87 0a01 	vstr	s0, [r7, #4]
	int multiplier = (int)(mechRadians/MECH_RADS_PER_ELECTRICAL_REV);
 80041f2:	ed97 7a01 	vldr	s14, [r7, #4]
 80041f6:	eddf 6a17 	vldr	s13, [pc, #92]	@ 8004254 <getElecAngleFromMechAngle+0x6c>
 80041fa:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80041fe:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8004202:	ee17 3a90 	vmov	r3, s15
 8004206:	617b      	str	r3, [r7, #20]
	float delta_mechRadians = mechRadians - (multiplier * MECH_RADS_PER_ELECTRICAL_REV);
 8004208:	697b      	ldr	r3, [r7, #20]
 800420a:	ee07 3a90 	vmov	s15, r3
 800420e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004212:	ed9f 7a10 	vldr	s14, [pc, #64]	@ 8004254 <getElecAngleFromMechAngle+0x6c>
 8004216:	ee67 7a87 	vmul.f32	s15, s15, s14
 800421a:	ed97 7a01 	vldr	s14, [r7, #4]
 800421e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8004222:	edc7 7a04 	vstr	s15, [r7, #16]
	float elecRadians = (delta_mechRadians * TWO_PI_F)/MECH_RADS_PER_ELECTRICAL_REV;
 8004226:	edd7 7a04 	vldr	s15, [r7, #16]
 800422a:	ed9f 7a0b 	vldr	s14, [pc, #44]	@ 8004258 <getElecAngleFromMechAngle+0x70>
 800422e:	ee27 7a87 	vmul.f32	s14, s15, s14
 8004232:	eddf 6a08 	vldr	s13, [pc, #32]	@ 8004254 <getElecAngleFromMechAngle+0x6c>
 8004236:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800423a:	edc7 7a03 	vstr	s15, [r7, #12]
	return elecRadians;
 800423e:	68fb      	ldr	r3, [r7, #12]
 8004240:	ee07 3a90 	vmov	s15, r3
}
 8004244:	eeb0 0a67 	vmov.f32	s0, s15
 8004248:	371c      	adds	r7, #28
 800424a:	46bd      	mov	sp, r7
 800424c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004250:	4770      	bx	lr
 8004252:	bf00      	nop
 8004254:	40060aa6 	.word	0x40060aa6
 8004258:	40c90fda 	.word	0x40c90fda

0800425c <InitRampDutyStruct>:
 */

#include "Ramp.h"


void InitRampDutyStruct(RampDuty *ramp,uint16_t targetDuty,long rampUpTime,long rampDownTime,int16_t rampSteadyTime){
 800425c:	b480      	push	{r7}
 800425e:	b087      	sub	sp, #28
 8004260:	af00      	add	r7, sp, #0
 8004262:	60f8      	str	r0, [r7, #12]
 8004264:	607a      	str	r2, [r7, #4]
 8004266:	603b      	str	r3, [r7, #0]
 8004268:	460b      	mov	r3, r1
 800426a:	817b      	strh	r3, [r7, #10]
	uint16_t totalSteps  = 0;
 800426c:	2300      	movs	r3, #0
 800426e:	82fb      	strh	r3, [r7, #22]
	ramp->ramp_callingTime_s = 0.020f;
 8004270:	68fb      	ldr	r3, [r7, #12]
 8004272:	4a3c      	ldr	r2, [pc, #240]	@ (8004364 <InitRampDutyStruct+0x108>)
 8004274:	629a      	str	r2, [r3, #40]	@ 0x28
	ramp->rampUpTime_ms = rampUpTime;
 8004276:	68fb      	ldr	r3, [r7, #12]
 8004278:	687a      	ldr	r2, [r7, #4]
 800427a:	615a      	str	r2, [r3, #20]
	ramp->rampDownTime_ms = rampDownTime;
 800427c:	68fb      	ldr	r3, [r7, #12]
 800427e:	683a      	ldr	r2, [r7, #0]
 8004280:	619a      	str	r2, [r3, #24]
	ramp->steadyRunTime_s = rampSteadyTime; // in Seconds!
 8004282:	68fb      	ldr	r3, [r7, #12]
 8004284:	8c3a      	ldrh	r2, [r7, #32]
 8004286:	821a      	strh	r2, [r3, #16]
	ramp->finalTargetDuty = targetDuty;
 8004288:	68fb      	ldr	r3, [r7, #12]
 800428a:	897a      	ldrh	r2, [r7, #10]
 800428c:	801a      	strh	r2, [r3, #0]
	ramp->currentDutyF = 0;
 800428e:	68fb      	ldr	r3, [r7, #12]
 8004290:	f04f 0200 	mov.w	r2, #0
 8004294:	605a      	str	r2, [r3, #4]
	ramp->currentDuty = 0;
 8004296:	68fb      	ldr	r3, [r7, #12]
 8004298:	2200      	movs	r2, #0
 800429a:	805a      	strh	r2, [r3, #2]
	//For RampUp
	totalSteps = ramp->rampUpTime_ms/((uint16_t)(ramp->ramp_callingTime_s*1000));
 800429c:	68fb      	ldr	r3, [r7, #12]
 800429e:	695b      	ldr	r3, [r3, #20]
 80042a0:	68fa      	ldr	r2, [r7, #12]
 80042a2:	edd2 7a0a 	vldr	s15, [r2, #40]	@ 0x28
 80042a6:	ed9f 7a30 	vldr	s14, [pc, #192]	@ 8004368 <InitRampDutyStruct+0x10c>
 80042aa:	ee67 7a87 	vmul.f32	s15, s15, s14
 80042ae:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80042b2:	ee17 2a90 	vmov	r2, s15
 80042b6:	b292      	uxth	r2, r2
 80042b8:	fb93 f3f2 	sdiv	r3, r3, r2
 80042bc:	82fb      	strh	r3, [r7, #22]
	if (totalSteps == 0){
 80042be:	8afb      	ldrh	r3, [r7, #22]
 80042c0:	2b00      	cmp	r3, #0
 80042c2:	d101      	bne.n	80042c8 <InitRampDutyStruct+0x6c>
		totalSteps = 1;
 80042c4:	2301      	movs	r3, #1
 80042c6:	82fb      	strh	r3, [r7, #22]
	}
	ramp->dDuty_F_RU = ((float)ramp->finalTargetDuty)/totalSteps;
 80042c8:	68fb      	ldr	r3, [r7, #12]
 80042ca:	881b      	ldrh	r3, [r3, #0]
 80042cc:	ee07 3a90 	vmov	s15, r3
 80042d0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80042d4:	8afb      	ldrh	r3, [r7, #22]
 80042d6:	ee07 3a90 	vmov	s15, r3
 80042da:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80042de:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80042e2:	68fb      	ldr	r3, [r7, #12]
 80042e4:	edc3 7a02 	vstr	s15, [r3, #8]

	//For RampDown
	totalSteps = ramp->rampDownTime_ms/((uint16_t)(ramp->ramp_callingTime_s*1000));
 80042e8:	68fb      	ldr	r3, [r7, #12]
 80042ea:	699b      	ldr	r3, [r3, #24]
 80042ec:	68fa      	ldr	r2, [r7, #12]
 80042ee:	edd2 7a0a 	vldr	s15, [r2, #40]	@ 0x28
 80042f2:	ed9f 7a1d 	vldr	s14, [pc, #116]	@ 8004368 <InitRampDutyStruct+0x10c>
 80042f6:	ee67 7a87 	vmul.f32	s15, s15, s14
 80042fa:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80042fe:	ee17 2a90 	vmov	r2, s15
 8004302:	b292      	uxth	r2, r2
 8004304:	fb93 f3f2 	sdiv	r3, r3, r2
 8004308:	82fb      	strh	r3, [r7, #22]
	if (totalSteps == 0){
 800430a:	8afb      	ldrh	r3, [r7, #22]
 800430c:	2b00      	cmp	r3, #0
 800430e:	d101      	bne.n	8004314 <InitRampDutyStruct+0xb8>
		totalSteps = 1;
 8004310:	2301      	movs	r3, #1
 8004312:	82fb      	strh	r3, [r7, #22]
	}
	ramp->dDuty_F_RD = ((float)ramp->finalTargetDuty)/totalSteps;
 8004314:	68fb      	ldr	r3, [r7, #12]
 8004316:	881b      	ldrh	r3, [r3, #0]
 8004318:	ee07 3a90 	vmov	s15, r3
 800431c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004320:	8afb      	ldrh	r3, [r7, #22]
 8004322:	ee07 3a90 	vmov	s15, r3
 8004326:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800432a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800432e:	68fb      	ldr	r3, [r7, #12]
 8004330:	edc3 7a03 	vstr	s15, [r3, #12]

	ramp->rampPhase = RAMP_WAIT;
 8004334:	68fb      	ldr	r3, [r7, #12]
 8004336:	2204      	movs	r2, #4
 8004338:	771a      	strb	r2, [r3, #28]

	ramp-> transitionTarget = 0;
 800433a:	68fb      	ldr	r3, [r7, #12]
 800433c:	2200      	movs	r2, #0
 800433e:	83da      	strh	r2, [r3, #30]
	ramp-> transitionTime_ms = 0;
 8004340:	68fb      	ldr	r3, [r7, #12]
 8004342:	2200      	movs	r2, #0
 8004344:	841a      	strh	r2, [r3, #32]
	ramp-> dDuty_F_transition = 0;
 8004346:	68fb      	ldr	r3, [r7, #12]
 8004348:	f04f 0200 	mov.w	r2, #0
 800434c:	625a      	str	r2, [r3, #36]	@ 0x24

	ramp->rampTimer = 0;
 800434e:	68fb      	ldr	r3, [r7, #12]
 8004350:	f04f 0200 	mov.w	r2, #0
 8004354:	62da      	str	r2, [r3, #44]	@ 0x2c
}
 8004356:	bf00      	nop
 8004358:	371c      	adds	r7, #28
 800435a:	46bd      	mov	sp, r7
 800435c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004360:	4770      	bx	lr
 8004362:	bf00      	nop
 8004364:	3ca3d70a 	.word	0x3ca3d70a
 8004368:	447a0000 	.word	0x447a0000

0800436c <StartRampDuty>:


void StartRampDuty(RampDuty *ramp){
 800436c:	b480      	push	{r7}
 800436e:	b083      	sub	sp, #12
 8004370:	af00      	add	r7, sp, #0
 8004372:	6078      	str	r0, [r7, #4]
	ramp->rampPhase = RAMP_UP;
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	2200      	movs	r2, #0
 8004378:	771a      	strb	r2, [r3, #28]
}
 800437a:	bf00      	nop
 800437c:	370c      	adds	r7, #12
 800437e:	46bd      	mov	sp, r7
 8004380:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004384:	4770      	bx	lr

08004386 <StartRampDownDuty>:

void StartRampDownDuty(RampDuty *ramp){
 8004386:	b480      	push	{r7}
 8004388:	b083      	sub	sp, #12
 800438a:	af00      	add	r7, sp, #0
 800438c:	6078      	str	r0, [r7, #4]
	ramp->rampPhase = RAMP_DOWN;
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	2201      	movs	r2, #1
 8004392:	771a      	strb	r2, [r3, #28]
	ramp->rampTimer = 0;
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	f04f 0200 	mov.w	r2, #0
 800439a:	62da      	str	r2, [r3, #44]	@ 0x2c
}
 800439c:	bf00      	nop
 800439e:	370c      	adds	r7, #12
 80043a0:	46bd      	mov	sp, r7
 80043a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043a6:	4770      	bx	lr

080043a8 <StopRampDuty>:

void StopRampDuty(RampDuty *ramp){
 80043a8:	b480      	push	{r7}
 80043aa:	b083      	sub	sp, #12
 80043ac:	af00      	add	r7, sp, #0
 80043ae:	6078      	str	r0, [r7, #4]
	ramp->rampPhase = RAMP_WAIT;
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	2204      	movs	r2, #4
 80043b4:	771a      	strb	r2, [r3, #28]
	ramp->currentDutyF = 0;
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	f04f 0200 	mov.w	r2, #0
 80043bc:	605a      	str	r2, [r3, #4]
	ramp->currentDuty = 0;
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	2200      	movs	r2, #0
 80043c2:	805a      	strh	r2, [r3, #2]
	ramp->rampTimer = 0;
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	f04f 0200 	mov.w	r2, #0
 80043ca:	62da      	str	r2, [r3, #44]	@ 0x2c
}
 80043cc:	bf00      	nop
 80043ce:	370c      	adds	r7, #12
 80043d0:	46bd      	mov	sp, r7
 80043d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043d6:	4770      	bx	lr

080043d8 <ExecRampDuty>:

	ramp->rampTimer = 0;
}


void ExecRampDuty(RampDuty *ramp){
 80043d8:	b480      	push	{r7}
 80043da:	b083      	sub	sp, #12
 80043dc:	af00      	add	r7, sp, #0
 80043de:	6078      	str	r0, [r7, #4]

	if(ramp->rampPhase != RAMP_WAIT){
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	7f1b      	ldrb	r3, [r3, #28]
 80043e4:	2b04      	cmp	r3, #4
 80043e6:	d00a      	beq.n	80043fe <ExecRampDuty+0x26>
		ramp->rampTimer += 	ramp->ramp_callingTime_s;
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	ed93 7a0b 	vldr	s14, [r3, #44]	@ 0x2c
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	edd3 7a0a 	vldr	s15, [r3, #40]	@ 0x28
 80043f4:	ee77 7a27 	vadd.f32	s15, s14, s15
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	edc3 7a0b 	vstr	s15, [r3, #44]	@ 0x2c
	}

	if (ramp->rampPhase == RAMP_UP){
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	7f1b      	ldrb	r3, [r3, #28]
 8004402:	2b00      	cmp	r3, #0
 8004404:	d12e      	bne.n	8004464 <ExecRampDuty+0x8c>
		if(ramp->currentDuty <= ramp->finalTargetDuty){
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	885a      	ldrh	r2, [r3, #2]
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	881b      	ldrh	r3, [r3, #0]
 800440e:	429a      	cmp	r2, r3
 8004410:	f200 80cf 	bhi.w	80045b2 <ExecRampDuty+0x1da>
			ramp->currentDutyF += ramp->dDuty_F_RU;
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	ed93 7a01 	vldr	s14, [r3, #4]
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	edd3 7a02 	vldr	s15, [r3, #8]
 8004420:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	edc3 7a01 	vstr	s15, [r3, #4]
			ramp->currentDuty = (uint16_t)(ramp->currentDutyF);
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	edd3 7a01 	vldr	s15, [r3, #4]
 8004430:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004434:	ee17 3a90 	vmov	r3, s15
 8004438:	b29a      	uxth	r2, r3
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	805a      	strh	r2, [r3, #2]
			if(ramp->currentDuty >= ramp->finalTargetDuty){
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	885a      	ldrh	r2, [r3, #2]
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	881b      	ldrh	r3, [r3, #0]
 8004446:	429a      	cmp	r2, r3
 8004448:	f0c0 80b3 	bcc.w	80045b2 <ExecRampDuty+0x1da>
				ramp->currentDuty  = ramp->finalTargetDuty;
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	881a      	ldrh	r2, [r3, #0]
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	805a      	strh	r2, [r3, #2]
				ramp->rampPhase = RAMP_STEADY;
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	2202      	movs	r2, #2
 8004458:	771a      	strb	r2, [r3, #28]
				ramp->rampTimer = 0;
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	f04f 0200 	mov.w	r2, #0
 8004460:	62da      	str	r2, [r3, #44]	@ 0x2c
	}
	else{
		//Do Nothing
	}

}
 8004462:	e0a6      	b.n	80045b2 <ExecRampDuty+0x1da>
	else if (ramp->rampPhase == RAMP_STEADY){
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	7f1b      	ldrb	r3, [r3, #28]
 8004468:	2b02      	cmp	r3, #2
 800446a:	d11e      	bne.n	80044aa <ExecRampDuty+0xd2>
		if (ramp->steadyRunTime_s != RUN_FOREVER){
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	f9b3 3010 	ldrsh.w	r3, [r3, #16]
 8004472:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8004476:	f000 809c 	beq.w	80045b2 <ExecRampDuty+0x1da>
			if (ramp->rampTimer >= ramp->steadyRunTime_s){
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	ed93 7a0b 	vldr	s14, [r3, #44]	@ 0x2c
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	f9b3 3010 	ldrsh.w	r3, [r3, #16]
 8004486:	ee07 3a90 	vmov	s15, r3
 800448a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800448e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8004492:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004496:	da00      	bge.n	800449a <ExecRampDuty+0xc2>
}
 8004498:	e08b      	b.n	80045b2 <ExecRampDuty+0x1da>
				ramp->rampPhase = RAMP_DOWN;
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	2201      	movs	r2, #1
 800449e:	771a      	strb	r2, [r3, #28]
				ramp->rampTimer = 0;
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	f04f 0200 	mov.w	r2, #0
 80044a6:	62da      	str	r2, [r3, #44]	@ 0x2c
}
 80044a8:	e083      	b.n	80045b2 <ExecRampDuty+0x1da>
	else if (ramp->rampPhase == RAMP_CHANGE){
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	7f1b      	ldrb	r3, [r3, #28]
 80044ae:	2b08      	cmp	r3, #8
 80044b0:	d158      	bne.n	8004564 <ExecRampDuty+0x18c>
		if(ramp->currentDuty < ramp->transitionTarget){
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	885a      	ldrh	r2, [r3, #2]
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	8bdb      	ldrh	r3, [r3, #30]
 80044ba:	429a      	cmp	r2, r3
 80044bc:	d225      	bcs.n	800450a <ExecRampDuty+0x132>
			ramp->currentDutyF += ramp->dDuty_F_transition;
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	ed93 7a01 	vldr	s14, [r3, #4]
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	edd3 7a09 	vldr	s15, [r3, #36]	@ 0x24
 80044ca:	ee77 7a27 	vadd.f32	s15, s14, s15
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	edc3 7a01 	vstr	s15, [r3, #4]
			ramp->currentDuty = (uint16_t)(ramp->currentDutyF);
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	edd3 7a01 	vldr	s15, [r3, #4]
 80044da:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80044de:	ee17 3a90 	vmov	r3, s15
 80044e2:	b29a      	uxth	r2, r3
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	805a      	strh	r2, [r3, #2]
			if(ramp->currentDuty >= ramp->transitionTarget){
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	885a      	ldrh	r2, [r3, #2]
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	8bdb      	ldrh	r3, [r3, #30]
 80044f0:	429a      	cmp	r2, r3
 80044f2:	d30a      	bcc.n	800450a <ExecRampDuty+0x132>
				ramp->currentDuty  = ramp->transitionTarget;
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	8bda      	ldrh	r2, [r3, #30]
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	805a      	strh	r2, [r3, #2]
				ramp->rampPhase = RAMP_STEADY;
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	2202      	movs	r2, #2
 8004500:	771a      	strb	r2, [r3, #28]
				ramp->rampTimer = 0;
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	f04f 0200 	mov.w	r2, #0
 8004508:	62da      	str	r2, [r3, #44]	@ 0x2c
		if(ramp->currentDuty > ramp->transitionTarget){
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	885a      	ldrh	r2, [r3, #2]
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	8bdb      	ldrh	r3, [r3, #30]
 8004512:	429a      	cmp	r2, r3
 8004514:	d94d      	bls.n	80045b2 <ExecRampDuty+0x1da>
			ramp->currentDutyF -= ramp->dDuty_F_transition;
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	ed93 7a01 	vldr	s14, [r3, #4]
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	edd3 7a09 	vldr	s15, [r3, #36]	@ 0x24
 8004522:	ee77 7a67 	vsub.f32	s15, s14, s15
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	edc3 7a01 	vstr	s15, [r3, #4]
			ramp->currentDuty = (uint16_t)(ramp->currentDutyF);
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	edd3 7a01 	vldr	s15, [r3, #4]
 8004532:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004536:	ee17 3a90 	vmov	r3, s15
 800453a:	b29a      	uxth	r2, r3
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	805a      	strh	r2, [r3, #2]
			if(ramp->currentDuty <= ramp->transitionTarget){
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	885a      	ldrh	r2, [r3, #2]
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	8bdb      	ldrh	r3, [r3, #30]
 8004548:	429a      	cmp	r2, r3
 800454a:	d832      	bhi.n	80045b2 <ExecRampDuty+0x1da>
				ramp->currentDuty  = ramp->transitionTarget;
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	8bda      	ldrh	r2, [r3, #30]
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	805a      	strh	r2, [r3, #2]
				ramp->rampPhase = RAMP_STEADY;
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	2202      	movs	r2, #2
 8004558:	771a      	strb	r2, [r3, #28]
				ramp->rampTimer = 0;
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	f04f 0200 	mov.w	r2, #0
 8004560:	62da      	str	r2, [r3, #44]	@ 0x2c
}
 8004562:	e026      	b.n	80045b2 <ExecRampDuty+0x1da>
	else if (ramp->rampPhase == RAMP_DOWN){
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	7f1b      	ldrb	r3, [r3, #28]
 8004568:	2b01      	cmp	r3, #1
 800456a:	d122      	bne.n	80045b2 <ExecRampDuty+0x1da>
			ramp->currentDutyF -= ramp->dDuty_F_RD;
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	ed93 7a01 	vldr	s14, [r3, #4]
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	edd3 7a03 	vldr	s15, [r3, #12]
 8004578:	ee77 7a67 	vsub.f32	s15, s14, s15
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	edc3 7a01 	vstr	s15, [r3, #4]
			ramp->currentDuty = (uint16_t)(ramp->currentDutyF);
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	edd3 7a01 	vldr	s15, [r3, #4]
 8004588:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800458c:	ee17 3a90 	vmov	r3, s15
 8004590:	b29a      	uxth	r2, r3
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	805a      	strh	r2, [r3, #2]
			if(ramp->currentDuty <= 0){
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	885b      	ldrh	r3, [r3, #2]
 800459a:	2b00      	cmp	r3, #0
 800459c:	d109      	bne.n	80045b2 <ExecRampDuty+0x1da>
				ramp->currentDuty  = 0;
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	2200      	movs	r2, #0
 80045a2:	805a      	strh	r2, [r3, #2]
				ramp->rampPhase = RAMP_WAIT;
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	2204      	movs	r2, #4
 80045a8:	771a      	strb	r2, [r3, #28]
				ramp->rampTimer = 0;
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	f04f 0200 	mov.w	r2, #0
 80045b0:	62da      	str	r2, [r3, #44]	@ 0x2c
}
 80045b2:	bf00      	nop
 80045b4:	370c      	adds	r7, #12
 80045b6:	46bd      	mov	sp, r7
 80045b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045bc:	4770      	bx	lr
	...

080045c0 <ChangeDuty>:


void  ChangeDuty(RampDuty *r){
 80045c0:	b480      	push	{r7}
 80045c2:	b085      	sub	sp, #20
 80045c4:	af00      	add	r7, sp, #0
 80045c6:	6078      	str	r0, [r7, #4]
	uint16_t deltaDuty = 0;
 80045c8:	2300      	movs	r3, #0
 80045ca:	81fb      	strh	r3, [r7, #14]
	uint16_t totalSteps = 0;
 80045cc:	2300      	movs	r3, #0
 80045ce:	81bb      	strh	r3, [r7, #12]
	if (r->transitionTarget > r->currentDuty){
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	8bda      	ldrh	r2, [r3, #30]
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	885b      	ldrh	r3, [r3, #2]
 80045d8:	429a      	cmp	r2, r3
 80045da:	d906      	bls.n	80045ea <ChangeDuty+0x2a>
		deltaDuty = r->transitionTarget - r->currentDuty;
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	8bda      	ldrh	r2, [r3, #30]
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	885b      	ldrh	r3, [r3, #2]
 80045e4:	1ad3      	subs	r3, r2, r3
 80045e6:	81fb      	strh	r3, [r7, #14]
 80045e8:	e00e      	b.n	8004608 <ChangeDuty+0x48>
	}else if (r->transitionTarget < r->currentDuty){
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	8bda      	ldrh	r2, [r3, #30]
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	885b      	ldrh	r3, [r3, #2]
 80045f2:	429a      	cmp	r2, r3
 80045f4:	d206      	bcs.n	8004604 <ChangeDuty+0x44>
		deltaDuty = r->currentDuty - r->transitionTarget;
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	885a      	ldrh	r2, [r3, #2]
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	8bdb      	ldrh	r3, [r3, #30]
 80045fe:	1ad3      	subs	r3, r2, r3
 8004600:	81fb      	strh	r3, [r7, #14]
 8004602:	e001      	b.n	8004608 <ChangeDuty+0x48>
	}else{
		deltaDuty = 0;
 8004604:	2300      	movs	r3, #0
 8004606:	81fb      	strh	r3, [r7, #14]
	}
	totalSteps = r->transitionTime_ms/((uint16_t)(r->ramp_callingTime_s*1000));
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	8c1a      	ldrh	r2, [r3, #32]
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	edd3 7a0a 	vldr	s15, [r3, #40]	@ 0x28
 8004612:	ed9f 7a13 	vldr	s14, [pc, #76]	@ 8004660 <ChangeDuty+0xa0>
 8004616:	ee67 7a87 	vmul.f32	s15, s15, s14
 800461a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800461e:	ee17 3a90 	vmov	r3, s15
 8004622:	b29b      	uxth	r3, r3
 8004624:	fbb2 f3f3 	udiv	r3, r2, r3
 8004628:	81bb      	strh	r3, [r7, #12]
	if (totalSteps == 0){
 800462a:	89bb      	ldrh	r3, [r7, #12]
 800462c:	2b00      	cmp	r3, #0
 800462e:	d101      	bne.n	8004634 <ChangeDuty+0x74>
		totalSteps = 1;
 8004630:	2301      	movs	r3, #1
 8004632:	81bb      	strh	r3, [r7, #12]
	}
	r->dDuty_F_transition = (float)deltaDuty/totalSteps;
 8004634:	89fb      	ldrh	r3, [r7, #14]
 8004636:	ee07 3a90 	vmov	s15, r3
 800463a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800463e:	89bb      	ldrh	r3, [r7, #12]
 8004640:	ee07 3a90 	vmov	s15, r3
 8004644:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8004648:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	edc3 7a09 	vstr	s15, [r3, #36]	@ 0x24
}
 8004652:	bf00      	nop
 8004654:	3714      	adds	r7, #20
 8004656:	46bd      	mov	sp, r7
 8004658:	f85d 7b04 	ldr.w	r7, [sp], #4
 800465c:	4770      	bx	lr
 800465e:	bf00      	nop
 8004660:	447a0000 	.word	0x447a0000

08004664 <Recalculate_RampDuty_RampRates>:

// when we get a change Duty, we want to do ramp UP/ramp Down times with that
// new target.
void Recalculate_RampDuty_RampRates(RampDuty *ramp,uint16_t newTarget){
 8004664:	b480      	push	{r7}
 8004666:	b085      	sub	sp, #20
 8004668:	af00      	add	r7, sp, #0
 800466a:	6078      	str	r0, [r7, #4]
 800466c:	460b      	mov	r3, r1
 800466e:	807b      	strh	r3, [r7, #2]
	uint16_t totalSteps = 0;
 8004670:	2300      	movs	r3, #0
 8004672:	81fb      	strh	r3, [r7, #14]
	//For RampUp
	ramp->finalTargetDuty = newTarget;
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	887a      	ldrh	r2, [r7, #2]
 8004678:	801a      	strh	r2, [r3, #0]
	totalSteps = ramp->rampUpTime_ms/((uint16_t)(ramp->ramp_callingTime_s*1000));
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	695b      	ldr	r3, [r3, #20]
 800467e:	687a      	ldr	r2, [r7, #4]
 8004680:	edd2 7a0a 	vldr	s15, [r2, #40]	@ 0x28
 8004684:	ed9f 7a26 	vldr	s14, [pc, #152]	@ 8004720 <Recalculate_RampDuty_RampRates+0xbc>
 8004688:	ee67 7a87 	vmul.f32	s15, s15, s14
 800468c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004690:	ee17 2a90 	vmov	r2, s15
 8004694:	b292      	uxth	r2, r2
 8004696:	fb93 f3f2 	sdiv	r3, r3, r2
 800469a:	81fb      	strh	r3, [r7, #14]
	if (totalSteps == 0){
 800469c:	89fb      	ldrh	r3, [r7, #14]
 800469e:	2b00      	cmp	r3, #0
 80046a0:	d101      	bne.n	80046a6 <Recalculate_RampDuty_RampRates+0x42>
		totalSteps = 1;
 80046a2:	2301      	movs	r3, #1
 80046a4:	81fb      	strh	r3, [r7, #14]
	}
	ramp->dDuty_F_RU = ((float)ramp->finalTargetDuty)/totalSteps;
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	881b      	ldrh	r3, [r3, #0]
 80046aa:	ee07 3a90 	vmov	s15, r3
 80046ae:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80046b2:	89fb      	ldrh	r3, [r7, #14]
 80046b4:	ee07 3a90 	vmov	s15, r3
 80046b8:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80046bc:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	edc3 7a02 	vstr	s15, [r3, #8]

	//For RampDown
	totalSteps = ramp->rampDownTime_ms/((uint16_t)(ramp->ramp_callingTime_s*1000));
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	699b      	ldr	r3, [r3, #24]
 80046ca:	687a      	ldr	r2, [r7, #4]
 80046cc:	edd2 7a0a 	vldr	s15, [r2, #40]	@ 0x28
 80046d0:	ed9f 7a13 	vldr	s14, [pc, #76]	@ 8004720 <Recalculate_RampDuty_RampRates+0xbc>
 80046d4:	ee67 7a87 	vmul.f32	s15, s15, s14
 80046d8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80046dc:	ee17 2a90 	vmov	r2, s15
 80046e0:	b292      	uxth	r2, r2
 80046e2:	fb93 f3f2 	sdiv	r3, r3, r2
 80046e6:	81fb      	strh	r3, [r7, #14]
	if (totalSteps == 0){
 80046e8:	89fb      	ldrh	r3, [r7, #14]
 80046ea:	2b00      	cmp	r3, #0
 80046ec:	d101      	bne.n	80046f2 <Recalculate_RampDuty_RampRates+0x8e>
		totalSteps = 1;
 80046ee:	2301      	movs	r3, #1
 80046f0:	81fb      	strh	r3, [r7, #14]
	}
	ramp->dDuty_F_RD = ((float)ramp->finalTargetDuty)/totalSteps;
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	881b      	ldrh	r3, [r3, #0]
 80046f6:	ee07 3a90 	vmov	s15, r3
 80046fa:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80046fe:	89fb      	ldrh	r3, [r7, #14]
 8004700:	ee07 3a90 	vmov	s15, r3
 8004704:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8004708:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	edc3 7a03 	vstr	s15, [r3, #12]
}
 8004712:	bf00      	nop
 8004714:	3714      	adds	r7, #20
 8004716:	46bd      	mov	sp, r7
 8004718:	f85d 7b04 	ldr.w	r7, [sp], #4
 800471c:	4770      	bx	lr
 800471e:	bf00      	nop
 8004720:	447a0000 	.word	0x447a0000

08004724 <InitRampRPMStruct>:
 *      Author: harsha
 */

#include "Ramp.h"

void InitRampRPMStruct(RampRPM *ramp,uint16_t targetRPM,float rampUpTime,float rampDownTime,float rampSteadyTime){
 8004724:	b480      	push	{r7}
 8004726:	b089      	sub	sp, #36	@ 0x24
 8004728:	af00      	add	r7, sp, #0
 800472a:	6178      	str	r0, [r7, #20]
 800472c:	460b      	mov	r3, r1
 800472e:	ed87 0a03 	vstr	s0, [r7, #12]
 8004732:	edc7 0a02 	vstr	s1, [r7, #8]
 8004736:	ed87 1a01 	vstr	s2, [r7, #4]
 800473a:	827b      	strh	r3, [r7, #18]
	uint16_t totalSteps  = 0;
 800473c:	2300      	movs	r3, #0
 800473e:	83fb      	strh	r3, [r7, #30]
	ramp->ramp_callingTime_s = 0.020f;
 8004740:	697b      	ldr	r3, [r7, #20]
 8004742:	4a37      	ldr	r2, [pc, #220]	@ (8004820 <InitRampRPMStruct+0xfc>)
 8004744:	629a      	str	r2, [r3, #40]	@ 0x28
	ramp->rampUpTime_s = rampUpTime;
 8004746:	697b      	ldr	r3, [r7, #20]
 8004748:	68fa      	ldr	r2, [r7, #12]
 800474a:	621a      	str	r2, [r3, #32]
	ramp->rampDownTime_s = rampDownTime;
 800474c:	697b      	ldr	r3, [r7, #20]
 800474e:	68ba      	ldr	r2, [r7, #8]
 8004750:	625a      	str	r2, [r3, #36]	@ 0x24
	ramp->steadyRunTime_s = rampSteadyTime;
 8004752:	697b      	ldr	r3, [r7, #20]
 8004754:	687a      	ldr	r2, [r7, #4]
 8004756:	61da      	str	r2, [r3, #28]

	ramp->finalTargetRPM = targetRPM;
 8004758:	697b      	ldr	r3, [r7, #20]
 800475a:	8a7a      	ldrh	r2, [r7, #18]
 800475c:	801a      	strh	r2, [r3, #0]
	ramp->instTargetRPM_F = 0;
 800475e:	697b      	ldr	r3, [r7, #20]
 8004760:	f04f 0200 	mov.w	r2, #0
 8004764:	605a      	str	r2, [r3, #4]
	//For RampUp
	totalSteps = (uint16_t)(ramp->rampUpTime_s/ramp->ramp_callingTime_s);
 8004766:	697b      	ldr	r3, [r7, #20]
 8004768:	edd3 6a08 	vldr	s13, [r3, #32]
 800476c:	697b      	ldr	r3, [r7, #20]
 800476e:	ed93 7a0a 	vldr	s14, [r3, #40]	@ 0x28
 8004772:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004776:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800477a:	ee17 3a90 	vmov	r3, s15
 800477e:	83fb      	strh	r3, [r7, #30]
	if (totalSteps == 0){
 8004780:	8bfb      	ldrh	r3, [r7, #30]
 8004782:	2b00      	cmp	r3, #0
 8004784:	d101      	bne.n	800478a <InitRampRPMStruct+0x66>
		totalSteps = 1;
 8004786:	2301      	movs	r3, #1
 8004788:	83fb      	strh	r3, [r7, #30]
	}
	ramp->dRPM_F_RU = ((float)ramp->finalTargetRPM)/totalSteps;
 800478a:	697b      	ldr	r3, [r7, #20]
 800478c:	881b      	ldrh	r3, [r3, #0]
 800478e:	ee07 3a90 	vmov	s15, r3
 8004792:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004796:	8bfb      	ldrh	r3, [r7, #30]
 8004798:	ee07 3a90 	vmov	s15, r3
 800479c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80047a0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80047a4:	697b      	ldr	r3, [r7, #20]
 80047a6:	edc3 7a02 	vstr	s15, [r3, #8]

	//For RampDown
	totalSteps = (uint16_t)(ramp->rampDownTime_s/ramp->ramp_callingTime_s);
 80047aa:	697b      	ldr	r3, [r7, #20]
 80047ac:	edd3 6a09 	vldr	s13, [r3, #36]	@ 0x24
 80047b0:	697b      	ldr	r3, [r7, #20]
 80047b2:	ed93 7a0a 	vldr	s14, [r3, #40]	@ 0x28
 80047b6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80047ba:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80047be:	ee17 3a90 	vmov	r3, s15
 80047c2:	83fb      	strh	r3, [r7, #30]
	if (totalSteps == 0){
 80047c4:	8bfb      	ldrh	r3, [r7, #30]
 80047c6:	2b00      	cmp	r3, #0
 80047c8:	d101      	bne.n	80047ce <InitRampRPMStruct+0xaa>
		totalSteps = 1;
 80047ca:	2301      	movs	r3, #1
 80047cc:	83fb      	strh	r3, [r7, #30]
	}
	ramp->dRPM_F_RD = ((float)ramp->finalTargetRPM)/totalSteps;
 80047ce:	697b      	ldr	r3, [r7, #20]
 80047d0:	881b      	ldrh	r3, [r3, #0]
 80047d2:	ee07 3a90 	vmov	s15, r3
 80047d6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80047da:	8bfb      	ldrh	r3, [r7, #30]
 80047dc:	ee07 3a90 	vmov	s15, r3
 80047e0:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80047e4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80047e8:	697b      	ldr	r3, [r7, #20]
 80047ea:	edc3 7a03 	vstr	s15, [r3, #12]

	ramp->rampPhase = RAMP_WAIT;
 80047ee:	697b      	ldr	r3, [r7, #20]
 80047f0:	2204      	movs	r2, #4
 80047f2:	741a      	strb	r2, [r3, #16]
	ramp->rampTimer = 0;
 80047f4:	697b      	ldr	r3, [r7, #20]
 80047f6:	f04f 0200 	mov.w	r2, #0
 80047fa:	62da      	str	r2, [r3, #44]	@ 0x2c

	ramp-> transitionTarget = 0;
 80047fc:	697b      	ldr	r3, [r7, #20]
 80047fe:	2200      	movs	r2, #0
 8004800:	825a      	strh	r2, [r3, #18]
	ramp-> transitionTime_s = 0;
 8004802:	697b      	ldr	r3, [r7, #20]
 8004804:	f04f 0200 	mov.w	r2, #0
 8004808:	615a      	str	r2, [r3, #20]
	ramp-> dRPM_F_transition = 0;
 800480a:	697b      	ldr	r3, [r7, #20]
 800480c:	f04f 0200 	mov.w	r2, #0
 8004810:	619a      	str	r2, [r3, #24]

}
 8004812:	bf00      	nop
 8004814:	3724      	adds	r7, #36	@ 0x24
 8004816:	46bd      	mov	sp, r7
 8004818:	f85d 7b04 	ldr.w	r7, [sp], #4
 800481c:	4770      	bx	lr
 800481e:	bf00      	nop
 8004820:	3ca3d70a 	.word	0x3ca3d70a

08004824 <StartRampRPM>:
void StartRampRPM(RampRPM *ramp){
 8004824:	b480      	push	{r7}
 8004826:	b083      	sub	sp, #12
 8004828:	af00      	add	r7, sp, #0
 800482a:	6078      	str	r0, [r7, #4]
	ramp->rampPhase = RAMP_UP;
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	2200      	movs	r2, #0
 8004830:	741a      	strb	r2, [r3, #16]
}
 8004832:	bf00      	nop
 8004834:	370c      	adds	r7, #12
 8004836:	46bd      	mov	sp, r7
 8004838:	f85d 7b04 	ldr.w	r7, [sp], #4
 800483c:	4770      	bx	lr

0800483e <StartRampDownRPM>:

void StartRampDownRPM(RampRPM *ramp){
 800483e:	b480      	push	{r7}
 8004840:	b083      	sub	sp, #12
 8004842:	af00      	add	r7, sp, #0
 8004844:	6078      	str	r0, [r7, #4]
	ramp->rampPhase = RAMP_DOWN;
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	2201      	movs	r2, #1
 800484a:	741a      	strb	r2, [r3, #16]
}
 800484c:	bf00      	nop
 800484e:	370c      	adds	r7, #12
 8004850:	46bd      	mov	sp, r7
 8004852:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004856:	4770      	bx	lr

08004858 <StopRampRPM>:

void StopRampRPM(RampRPM *ramp){
 8004858:	b480      	push	{r7}
 800485a:	b083      	sub	sp, #12
 800485c:	af00      	add	r7, sp, #0
 800485e:	6078      	str	r0, [r7, #4]
	ramp->rampPhase = RAMP_WAIT;
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	2204      	movs	r2, #4
 8004864:	741a      	strb	r2, [r3, #16]
}
 8004866:	bf00      	nop
 8004868:	370c      	adds	r7, #12
 800486a:	46bd      	mov	sp, r7
 800486c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004870:	4770      	bx	lr

08004872 <ExecRampRPM>:
	ramp->rampPhase = RAMP_WAIT;
	ramp->rampTimer = 0;
}


void ExecRampRPM(RampRPM *ramp){
 8004872:	b480      	push	{r7}
 8004874:	b083      	sub	sp, #12
 8004876:	af00      	add	r7, sp, #0
 8004878:	6078      	str	r0, [r7, #4]
	if(ramp->rampPhase != RAMP_WAIT){
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	7c1b      	ldrb	r3, [r3, #16]
 800487e:	2b04      	cmp	r3, #4
 8004880:	d00a      	beq.n	8004898 <ExecRampRPM+0x26>
		ramp->rampTimer += 	ramp->ramp_callingTime_s;
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	ed93 7a0b 	vldr	s14, [r3, #44]	@ 0x2c
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	edd3 7a0a 	vldr	s15, [r3, #40]	@ 0x28
 800488e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	edc3 7a0b 	vstr	s15, [r3, #44]	@ 0x2c
	}

	if (ramp->rampPhase == RAMP_UP){
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	7c1b      	ldrb	r3, [r3, #16]
 800489c:	2b00      	cmp	r3, #0
 800489e:	d139      	bne.n	8004914 <ExecRampRPM+0xa2>
		if(ramp->instTargetRPM_F <= ramp->finalTargetRPM){
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	ed93 7a01 	vldr	s14, [r3, #4]
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	881b      	ldrh	r3, [r3, #0]
 80048aa:	ee07 3a90 	vmov	s15, r3
 80048ae:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80048b2:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80048b6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80048ba:	d900      	bls.n	80048be <ExecRampRPM+0x4c>
				ramp->rampTimer = 0;
			}
		}
	}

}
 80048bc:	e0ee      	b.n	8004a9c <ExecRampRPM+0x22a>
			ramp->instTargetRPM_F += ramp->dRPM_F_RU;
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	ed93 7a01 	vldr	s14, [r3, #4]
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	edd3 7a02 	vldr	s15, [r3, #8]
 80048ca:	ee77 7a27 	vadd.f32	s15, s14, s15
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	edc3 7a01 	vstr	s15, [r3, #4]
			if(ramp->instTargetRPM_F >= ramp->finalTargetRPM){
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	ed93 7a01 	vldr	s14, [r3, #4]
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	881b      	ldrh	r3, [r3, #0]
 80048de:	ee07 3a90 	vmov	s15, r3
 80048e2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80048e6:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80048ea:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80048ee:	da00      	bge.n	80048f2 <ExecRampRPM+0x80>
}
 80048f0:	e0d4      	b.n	8004a9c <ExecRampRPM+0x22a>
				ramp->instTargetRPM_F  = ramp->finalTargetRPM;
 80048f2:	687b      	ldr	r3, [r7, #4]
 80048f4:	881b      	ldrh	r3, [r3, #0]
 80048f6:	ee07 3a90 	vmov	s15, r3
 80048fa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	edc3 7a01 	vstr	s15, [r3, #4]
				ramp->rampPhase = RAMP_STEADY;
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	2202      	movs	r2, #2
 8004908:	741a      	strb	r2, [r3, #16]
				ramp->rampTimer = 0;
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	f04f 0200 	mov.w	r2, #0
 8004910:	62da      	str	r2, [r3, #44]	@ 0x2c
}
 8004912:	e0c3      	b.n	8004a9c <ExecRampRPM+0x22a>
	else if (ramp->rampPhase == RAMP_STEADY){
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	7c1b      	ldrb	r3, [r3, #16]
 8004918:	2b02      	cmp	r3, #2
 800491a:	d11e      	bne.n	800495a <ExecRampRPM+0xe8>
		if (ramp->steadyRunTime_s != RUN_FOREVER){
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	edd3 7a07 	vldr	s15, [r3, #28]
 8004922:	eebf 7a00 	vmov.f32	s14, #240	@ 0xbf800000 -1.0
 8004926:	eef4 7a47 	vcmp.f32	s15, s14
 800492a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800492e:	f000 80b5 	beq.w	8004a9c <ExecRampRPM+0x22a>
			if (ramp->rampTimer >= ramp->steadyRunTime_s){
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	ed93 7a0b 	vldr	s14, [r3, #44]	@ 0x2c
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	edd3 7a07 	vldr	s15, [r3, #28]
 800493e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8004942:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004946:	da00      	bge.n	800494a <ExecRampRPM+0xd8>
}
 8004948:	e0a8      	b.n	8004a9c <ExecRampRPM+0x22a>
				ramp->rampPhase = RAMP_DOWN;
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	2201      	movs	r2, #1
 800494e:	741a      	strb	r2, [r3, #16]
				ramp->rampTimer = 0;
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	f04f 0200 	mov.w	r2, #0
 8004956:	62da      	str	r2, [r3, #44]	@ 0x2c
}
 8004958:	e0a0      	b.n	8004a9c <ExecRampRPM+0x22a>
	else if (ramp->rampPhase == RAMP_CHANGE){
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	7c1b      	ldrb	r3, [r3, #16]
 800495e:	2b08      	cmp	r3, #8
 8004960:	d170      	bne.n	8004a44 <ExecRampRPM+0x1d2>
			if(ramp->instTargetRPM_F < ramp->transitionTarget){
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	ed93 7a01 	vldr	s14, [r3, #4]
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	8a5b      	ldrh	r3, [r3, #18]
 800496c:	ee07 3a90 	vmov	s15, r3
 8004970:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004974:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8004978:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800497c:	d528      	bpl.n	80049d0 <ExecRampRPM+0x15e>
				ramp->instTargetRPM_F += ramp->dRPM_F_transition;
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	ed93 7a01 	vldr	s14, [r3, #4]
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	edd3 7a06 	vldr	s15, [r3, #24]
 800498a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	edc3 7a01 	vstr	s15, [r3, #4]
				if(ramp->instTargetRPM_F >= ramp->transitionTarget){
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	ed93 7a01 	vldr	s14, [r3, #4]
 800499a:	687b      	ldr	r3, [r7, #4]
 800499c:	8a5b      	ldrh	r3, [r3, #18]
 800499e:	ee07 3a90 	vmov	s15, r3
 80049a2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80049a6:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80049aa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80049ae:	db0f      	blt.n	80049d0 <ExecRampRPM+0x15e>
					ramp->instTargetRPM_F  = ramp->transitionTarget;
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	8a5b      	ldrh	r3, [r3, #18]
 80049b4:	ee07 3a90 	vmov	s15, r3
 80049b8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	edc3 7a01 	vstr	s15, [r3, #4]
					ramp->rampPhase = RAMP_STEADY;
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	2202      	movs	r2, #2
 80049c6:	741a      	strb	r2, [r3, #16]
					ramp->rampTimer = 0;
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	f04f 0200 	mov.w	r2, #0
 80049ce:	62da      	str	r2, [r3, #44]	@ 0x2c
			if(ramp->instTargetRPM_F > ramp->transitionTarget){
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	ed93 7a01 	vldr	s14, [r3, #4]
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	8a5b      	ldrh	r3, [r3, #18]
 80049da:	ee07 3a90 	vmov	s15, r3
 80049de:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80049e2:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80049e6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80049ea:	dc00      	bgt.n	80049ee <ExecRampRPM+0x17c>
}
 80049ec:	e056      	b.n	8004a9c <ExecRampRPM+0x22a>
				ramp->instTargetRPM_F -= ramp->dRPM_F_transition;
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	ed93 7a01 	vldr	s14, [r3, #4]
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	edd3 7a06 	vldr	s15, [r3, #24]
 80049fa:	ee77 7a67 	vsub.f32	s15, s14, s15
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	edc3 7a01 	vstr	s15, [r3, #4]
				if(ramp->instTargetRPM_F <= ramp->transitionTarget){
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	ed93 7a01 	vldr	s14, [r3, #4]
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	8a5b      	ldrh	r3, [r3, #18]
 8004a0e:	ee07 3a90 	vmov	s15, r3
 8004a12:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004a16:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8004a1a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004a1e:	d900      	bls.n	8004a22 <ExecRampRPM+0x1b0>
}
 8004a20:	e03c      	b.n	8004a9c <ExecRampRPM+0x22a>
					ramp->instTargetRPM_F  = ramp->transitionTarget;
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	8a5b      	ldrh	r3, [r3, #18]
 8004a26:	ee07 3a90 	vmov	s15, r3
 8004a2a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004a2e:	687b      	ldr	r3, [r7, #4]
 8004a30:	edc3 7a01 	vstr	s15, [r3, #4]
					ramp->rampPhase = RAMP_STEADY;
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	2202      	movs	r2, #2
 8004a38:	741a      	strb	r2, [r3, #16]
					ramp->rampTimer = 0;
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	f04f 0200 	mov.w	r2, #0
 8004a40:	62da      	str	r2, [r3, #44]	@ 0x2c
}
 8004a42:	e02b      	b.n	8004a9c <ExecRampRPM+0x22a>
	else if (ramp->rampPhase == RAMP_DOWN){
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	7c1b      	ldrb	r3, [r3, #16]
 8004a48:	2b01      	cmp	r3, #1
 8004a4a:	d127      	bne.n	8004a9c <ExecRampRPM+0x22a>
		if(ramp->instTargetRPM_F >= 0){
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	edd3 7a01 	vldr	s15, [r3, #4]
 8004a52:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8004a56:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004a5a:	da00      	bge.n	8004a5e <ExecRampRPM+0x1ec>
}
 8004a5c:	e01e      	b.n	8004a9c <ExecRampRPM+0x22a>
			ramp->instTargetRPM_F -= ramp->dRPM_F_RD;
 8004a5e:	687b      	ldr	r3, [r7, #4]
 8004a60:	ed93 7a01 	vldr	s14, [r3, #4]
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	edd3 7a03 	vldr	s15, [r3, #12]
 8004a6a:	ee77 7a67 	vsub.f32	s15, s14, s15
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	edc3 7a01 	vstr	s15, [r3, #4]
			if(ramp->instTargetRPM_F <= 0){
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	edd3 7a01 	vldr	s15, [r3, #4]
 8004a7a:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8004a7e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004a82:	d900      	bls.n	8004a86 <ExecRampRPM+0x214>
}
 8004a84:	e00a      	b.n	8004a9c <ExecRampRPM+0x22a>
				ramp->instTargetRPM_F  = 0;
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	f04f 0200 	mov.w	r2, #0
 8004a8c:	605a      	str	r2, [r3, #4]
				ramp->rampPhase = RAMP_WAIT;
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	2204      	movs	r2, #4
 8004a92:	741a      	strb	r2, [r3, #16]
				ramp->rampTimer = 0;
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	f04f 0200 	mov.w	r2, #0
 8004a9a:	62da      	str	r2, [r3, #44]	@ 0x2c
}
 8004a9c:	bf00      	nop
 8004a9e:	370c      	adds	r7, #12
 8004aa0:	46bd      	mov	sp, r7
 8004aa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004aa6:	4770      	bx	lr

08004aa8 <ChangeRPM>:

void  ChangeRPM(RampRPM *r,uint16_t transitionTarget,float transitionTime_s){
 8004aa8:	b480      	push	{r7}
 8004aaa:	b087      	sub	sp, #28
 8004aac:	af00      	add	r7, sp, #0
 8004aae:	60f8      	str	r0, [r7, #12]
 8004ab0:	460b      	mov	r3, r1
 8004ab2:	ed87 0a01 	vstr	s0, [r7, #4]
 8004ab6:	817b      	strh	r3, [r7, #10]
	uint16_t deltaRPM = 0;
 8004ab8:	2300      	movs	r3, #0
 8004aba:	82fb      	strh	r3, [r7, #22]
	uint16_t totalSteps = 0;
 8004abc:	2300      	movs	r3, #0
 8004abe:	82bb      	strh	r3, [r7, #20]
	r->transitionTarget = transitionTarget;
 8004ac0:	68fb      	ldr	r3, [r7, #12]
 8004ac2:	897a      	ldrh	r2, [r7, #10]
 8004ac4:	825a      	strh	r2, [r3, #18]
	r->transitionTime_s = transitionTime_s;
 8004ac6:	68fb      	ldr	r3, [r7, #12]
 8004ac8:	687a      	ldr	r2, [r7, #4]
 8004aca:	615a      	str	r2, [r3, #20]
	r->finalTargetRPM = r->transitionTarget;
 8004acc:	68fb      	ldr	r3, [r7, #12]
 8004ace:	8a5a      	ldrh	r2, [r3, #18]
 8004ad0:	68fb      	ldr	r3, [r7, #12]
 8004ad2:	801a      	strh	r2, [r3, #0]
	if (r->transitionTarget > r->instTargetRPM_F){
 8004ad4:	68fb      	ldr	r3, [r7, #12]
 8004ad6:	8a5b      	ldrh	r3, [r3, #18]
 8004ad8:	ee07 3a90 	vmov	s15, r3
 8004adc:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8004ae0:	68fb      	ldr	r3, [r7, #12]
 8004ae2:	edd3 7a01 	vldr	s15, [r3, #4]
 8004ae6:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8004aea:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004aee:	dd10      	ble.n	8004b12 <ChangeRPM+0x6a>
		deltaRPM = r->transitionTarget - r->instTargetRPM_F;
 8004af0:	68fb      	ldr	r3, [r7, #12]
 8004af2:	8a5b      	ldrh	r3, [r3, #18]
 8004af4:	ee07 3a90 	vmov	s15, r3
 8004af8:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8004afc:	68fb      	ldr	r3, [r7, #12]
 8004afe:	edd3 7a01 	vldr	s15, [r3, #4]
 8004b02:	ee77 7a67 	vsub.f32	s15, s14, s15
 8004b06:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004b0a:	ee17 3a90 	vmov	r3, s15
 8004b0e:	82fb      	strh	r3, [r7, #22]
 8004b10:	e020      	b.n	8004b54 <ChangeRPM+0xac>
	}else if (r->transitionTarget < r->instTargetRPM_F){
 8004b12:	68fb      	ldr	r3, [r7, #12]
 8004b14:	8a5b      	ldrh	r3, [r3, #18]
 8004b16:	ee07 3a90 	vmov	s15, r3
 8004b1a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8004b1e:	68fb      	ldr	r3, [r7, #12]
 8004b20:	edd3 7a01 	vldr	s15, [r3, #4]
 8004b24:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8004b28:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004b2c:	d510      	bpl.n	8004b50 <ChangeRPM+0xa8>
		deltaRPM = r->instTargetRPM_F - r->transitionTarget;
 8004b2e:	68fb      	ldr	r3, [r7, #12]
 8004b30:	ed93 7a01 	vldr	s14, [r3, #4]
 8004b34:	68fb      	ldr	r3, [r7, #12]
 8004b36:	8a5b      	ldrh	r3, [r3, #18]
 8004b38:	ee07 3a90 	vmov	s15, r3
 8004b3c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004b40:	ee77 7a67 	vsub.f32	s15, s14, s15
 8004b44:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004b48:	ee17 3a90 	vmov	r3, s15
 8004b4c:	82fb      	strh	r3, [r7, #22]
 8004b4e:	e001      	b.n	8004b54 <ChangeRPM+0xac>
	}else{
		deltaRPM = 0;
 8004b50:	2300      	movs	r3, #0
 8004b52:	82fb      	strh	r3, [r7, #22]
	}
	totalSteps = r->transitionTime_s/r->ramp_callingTime_s;
 8004b54:	68fb      	ldr	r3, [r7, #12]
 8004b56:	edd3 6a05 	vldr	s13, [r3, #20]
 8004b5a:	68fb      	ldr	r3, [r7, #12]
 8004b5c:	ed93 7a0a 	vldr	s14, [r3, #40]	@ 0x28
 8004b60:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004b64:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004b68:	ee17 3a90 	vmov	r3, s15
 8004b6c:	82bb      	strh	r3, [r7, #20]
	if (totalSteps == 0){
 8004b6e:	8abb      	ldrh	r3, [r7, #20]
 8004b70:	2b00      	cmp	r3, #0
 8004b72:	d101      	bne.n	8004b78 <ChangeRPM+0xd0>
		totalSteps = 1;
 8004b74:	2301      	movs	r3, #1
 8004b76:	82bb      	strh	r3, [r7, #20]
	}
	r->dRPM_F_transition = ((float)deltaRPM)/totalSteps;
 8004b78:	8afb      	ldrh	r3, [r7, #22]
 8004b7a:	ee07 3a90 	vmov	s15, r3
 8004b7e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004b82:	8abb      	ldrh	r3, [r7, #20]
 8004b84:	ee07 3a90 	vmov	s15, r3
 8004b88:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8004b8c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004b90:	68fb      	ldr	r3, [r7, #12]
 8004b92:	edc3 7a06 	vstr	s15, [r3, #24]
}
 8004b96:	bf00      	nop
 8004b98:	371c      	adds	r7, #28
 8004b9a:	46bd      	mov	sp, r7
 8004b9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ba0:	4770      	bx	lr

08004ba2 <Recalculate_RampRPM_RampRates>:

// when we get a change RPM for the bobbin, we want to do ramp UP/ramp Down times with that
// new target.(this is used to ramo down to zero, and ramp up from zero)
void Recalculate_RampRPM_RampRates(RampRPM *ramp,uint16_t newTarget){
 8004ba2:	b480      	push	{r7}
 8004ba4:	b085      	sub	sp, #20
 8004ba6:	af00      	add	r7, sp, #0
 8004ba8:	6078      	str	r0, [r7, #4]
 8004baa:	460b      	mov	r3, r1
 8004bac:	807b      	strh	r3, [r7, #2]
	uint16_t totalSteps = 0;
 8004bae:	2300      	movs	r3, #0
 8004bb0:	81fb      	strh	r3, [r7, #14]
	//For RampUp
	ramp->finalTargetRPM = newTarget;
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	887a      	ldrh	r2, [r7, #2]
 8004bb6:	801a      	strh	r2, [r3, #0]
	totalSteps = ramp->rampUpTime_s/ramp->ramp_callingTime_s;
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	edd3 6a08 	vldr	s13, [r3, #32]
 8004bbe:	687b      	ldr	r3, [r7, #4]
 8004bc0:	ed93 7a0a 	vldr	s14, [r3, #40]	@ 0x28
 8004bc4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004bc8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004bcc:	ee17 3a90 	vmov	r3, s15
 8004bd0:	81fb      	strh	r3, [r7, #14]
	if (totalSteps == 0){
 8004bd2:	89fb      	ldrh	r3, [r7, #14]
 8004bd4:	2b00      	cmp	r3, #0
 8004bd6:	d101      	bne.n	8004bdc <Recalculate_RampRPM_RampRates+0x3a>
		totalSteps = 1;
 8004bd8:	2301      	movs	r3, #1
 8004bda:	81fb      	strh	r3, [r7, #14]
	}
	ramp->dRPM_F_RU = ((float)ramp->finalTargetRPM)/totalSteps;
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	881b      	ldrh	r3, [r3, #0]
 8004be0:	ee07 3a90 	vmov	s15, r3
 8004be4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004be8:	89fb      	ldrh	r3, [r7, #14]
 8004bea:	ee07 3a90 	vmov	s15, r3
 8004bee:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8004bf2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004bf6:	687b      	ldr	r3, [r7, #4]
 8004bf8:	edc3 7a02 	vstr	s15, [r3, #8]

	//For RampDown
	totalSteps = ramp->rampDownTime_s/ramp->ramp_callingTime_s;
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	edd3 6a09 	vldr	s13, [r3, #36]	@ 0x24
 8004c02:	687b      	ldr	r3, [r7, #4]
 8004c04:	ed93 7a0a 	vldr	s14, [r3, #40]	@ 0x28
 8004c08:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004c0c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004c10:	ee17 3a90 	vmov	r3, s15
 8004c14:	81fb      	strh	r3, [r7, #14]
	if (totalSteps == 0){
 8004c16:	89fb      	ldrh	r3, [r7, #14]
 8004c18:	2b00      	cmp	r3, #0
 8004c1a:	d101      	bne.n	8004c20 <Recalculate_RampRPM_RampRates+0x7e>
		totalSteps = 1;
 8004c1c:	2301      	movs	r3, #1
 8004c1e:	81fb      	strh	r3, [r7, #14]
	}
	ramp->dRPM_F_RD = ((float)ramp->finalTargetRPM)/totalSteps;
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	881b      	ldrh	r3, [r3, #0]
 8004c24:	ee07 3a90 	vmov	s15, r3
 8004c28:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004c2c:	89fb      	ldrh	r3, [r7, #14]
 8004c2e:	ee07 3a90 	vmov	s15, r3
 8004c32:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8004c36:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	edc3 7a03 	vstr	s15, [r3, #12]
}
 8004c40:	bf00      	nop
 8004c42:	3714      	adds	r7, #20
 8004c44:	46bd      	mov	sp, r7
 8004c46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c4a:	4770      	bx	lr

08004c4c <updateSpeedCalc>:
 *  Created on: 25-Apr-2024
 *      Author: harsha
 */
#include "SpeedSensor.h"

void updateSpeedCalc(Speed *s, PositionSensor *ps){
 8004c4c:	b480      	push	{r7}
 8004c4e:	b085      	sub	sp, #20
 8004c50:	af00      	add	r7, sp, #0
 8004c52:	6078      	str	r0, [r7, #4]
 8004c54:	6039      	str	r1, [r7, #0]
	//get one ms position change
	s->loopCounter ++;
 8004c56:	687b      	ldr	r3, [r7, #4]
 8004c58:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004c5a:	1c5a      	adds	r2, r3, #1
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	651a      	str	r2, [r3, #80]	@ 0x50

	if (s->loopCounter == 9){
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004c64:	2b09      	cmp	r3, #9
 8004c66:	f040 8096 	bne.w	8004d96 <updateSpeedCalc+0x14a>
		s->totalDeltaRads = ps->multiturn_mech_radians - s->prevMechRads;
 8004c6a:	683b      	ldr	r3, [r7, #0]
 8004c6c:	ed93 7a14 	vldr	s14, [r3, #80]	@ 0x50
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	edd3 7a15 	vldr	s15, [r3, #84]	@ 0x54
 8004c76:	ee77 7a67 	vsub.f32	s15, s14, s15
 8004c7a:	687b      	ldr	r3, [r7, #4]
 8004c7c:	edc3 7a17 	vstr	s15, [r3, #92]	@ 0x5c
		s->prevMechRads = ps->multiturn_mech_radians;
 8004c80:	683b      	ldr	r3, [r7, #0]
 8004c82:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	655a      	str	r2, [r3, #84]	@ 0x54
		s->loopCounter = 0;
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	2200      	movs	r2, #0
 8004c8c:	651a      	str	r2, [r3, #80]	@ 0x50

		// move the samples one step down
		for (int i=SPEEDSAMPLES-1;i>=1;i--){//i goes from 19 to 1
 8004c8e:	2313      	movs	r3, #19
 8004c90:	60fb      	str	r3, [r7, #12]
 8004c92:	e00d      	b.n	8004cb0 <updateSpeedCalc+0x64>
			s->deltaRadsArr[i]=s->deltaRadsArr[i-1];
 8004c94:	68fb      	ldr	r3, [r7, #12]
 8004c96:	3b01      	subs	r3, #1
 8004c98:	687a      	ldr	r2, [r7, #4]
 8004c9a:	009b      	lsls	r3, r3, #2
 8004c9c:	4413      	add	r3, r2
 8004c9e:	681a      	ldr	r2, [r3, #0]
 8004ca0:	6879      	ldr	r1, [r7, #4]
 8004ca2:	68fb      	ldr	r3, [r7, #12]
 8004ca4:	009b      	lsls	r3, r3, #2
 8004ca6:	440b      	add	r3, r1
 8004ca8:	601a      	str	r2, [r3, #0]
		for (int i=SPEEDSAMPLES-1;i>=1;i--){//i goes from 19 to 1
 8004caa:	68fb      	ldr	r3, [r7, #12]
 8004cac:	3b01      	subs	r3, #1
 8004cae:	60fb      	str	r3, [r7, #12]
 8004cb0:	68fb      	ldr	r3, [r7, #12]
 8004cb2:	2b00      	cmp	r3, #0
 8004cb4:	dcee      	bgt.n	8004c94 <updateSpeedCalc+0x48>
			}
		// put in the new samples
		s->deltaRadsArr[0] = s->totalDeltaRads;
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	601a      	str	r2, [r3, #0]

		//now calculate the RPM with the new data
		s->tenSampleSpeed = 0;
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	f04f 0200 	mov.w	r2, #0
 8004cc4:	661a      	str	r2, [r3, #96]	@ 0x60
		s->twentySampleSpeed = 0;
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	f04f 0200 	mov.w	r2, #0
 8004ccc:	665a      	str	r2, [r3, #100]	@ 0x64
		for (int i=0;i<SPEEDSAMPLES;i++){
 8004cce:	2300      	movs	r3, #0
 8004cd0:	60bb      	str	r3, [r7, #8]
 8004cd2:	e021      	b.n	8004d18 <updateSpeedCalc+0xcc>
			if (i<10){
 8004cd4:	68bb      	ldr	r3, [r7, #8]
 8004cd6:	2b09      	cmp	r3, #9
 8004cd8:	dc0d      	bgt.n	8004cf6 <updateSpeedCalc+0xaa>
				s->tenSampleSpeed += s->deltaRadsArr[i];
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	ed93 7a18 	vldr	s14, [r3, #96]	@ 0x60
 8004ce0:	687a      	ldr	r2, [r7, #4]
 8004ce2:	68bb      	ldr	r3, [r7, #8]
 8004ce4:	009b      	lsls	r3, r3, #2
 8004ce6:	4413      	add	r3, r2
 8004ce8:	edd3 7a00 	vldr	s15, [r3]
 8004cec:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	edc3 7a18 	vstr	s15, [r3, #96]	@ 0x60
			}
			s->twentySampleSpeed += s->deltaRadsArr[i];
 8004cf6:	687b      	ldr	r3, [r7, #4]
 8004cf8:	ed93 7a19 	vldr	s14, [r3, #100]	@ 0x64
 8004cfc:	687a      	ldr	r2, [r7, #4]
 8004cfe:	68bb      	ldr	r3, [r7, #8]
 8004d00:	009b      	lsls	r3, r3, #2
 8004d02:	4413      	add	r3, r2
 8004d04:	edd3 7a00 	vldr	s15, [r3]
 8004d08:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	edc3 7a19 	vstr	s15, [r3, #100]	@ 0x64
		for (int i=0;i<SPEEDSAMPLES;i++){
 8004d12:	68bb      	ldr	r3, [r7, #8]
 8004d14:	3301      	adds	r3, #1
 8004d16:	60bb      	str	r3, [r7, #8]
 8004d18:	68bb      	ldr	r3, [r7, #8]
 8004d1a:	2b13      	cmp	r3, #19
 8004d1c:	ddda      	ble.n	8004cd4 <updateSpeedCalc+0x88>
		}

		s->avgTenSamples = s->tenSampleSpeed/10.0f;
 8004d1e:	687b      	ldr	r3, [r7, #4]
 8004d20:	ed93 7a18 	vldr	s14, [r3, #96]	@ 0x60
 8004d24:	eef2 6a04 	vmov.f32	s13, #36	@ 0x41200000  10.0
 8004d28:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	edc3 7a1a 	vstr	s15, [r3, #104]	@ 0x68
		s->tenSampleRPM = s->avgTenSamples * 1000.0f * 60.0f/TWO_PI_F;
 8004d32:	687b      	ldr	r3, [r7, #4]
 8004d34:	edd3 7a1a 	vldr	s15, [r3, #104]	@ 0x68
 8004d38:	ed9f 7a1a 	vldr	s14, [pc, #104]	@ 8004da4 <updateSpeedCalc+0x158>
 8004d3c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8004d40:	ed9f 7a19 	vldr	s14, [pc, #100]	@ 8004da8 <updateSpeedCalc+0x15c>
 8004d44:	ee27 7a87 	vmul.f32	s14, s15, s14
 8004d48:	eddf 6a18 	vldr	s13, [pc, #96]	@ 8004dac <updateSpeedCalc+0x160>
 8004d4c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	edc3 7a1c 	vstr	s15, [r3, #112]	@ 0x70
		s->avgTwentySamples = s->twentySampleSpeed/20.0f;
 8004d56:	687b      	ldr	r3, [r7, #4]
 8004d58:	ed93 7a19 	vldr	s14, [r3, #100]	@ 0x64
 8004d5c:	eef3 6a04 	vmov.f32	s13, #52	@ 0x41a00000  20.0
 8004d60:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8004d64:	687b      	ldr	r3, [r7, #4]
 8004d66:	edc3 7a1b 	vstr	s15, [r3, #108]	@ 0x6c
		s->twentySampleRPM = s->avgTwentySamples * 1000.0f * 60.0f /TWO_PI_F;
 8004d6a:	687b      	ldr	r3, [r7, #4]
 8004d6c:	edd3 7a1b 	vldr	s15, [r3, #108]	@ 0x6c
 8004d70:	ed9f 7a0c 	vldr	s14, [pc, #48]	@ 8004da4 <updateSpeedCalc+0x158>
 8004d74:	ee67 7a87 	vmul.f32	s15, s15, s14
 8004d78:	ed9f 7a0b 	vldr	s14, [pc, #44]	@ 8004da8 <updateSpeedCalc+0x15c>
 8004d7c:	ee27 7a87 	vmul.f32	s14, s15, s14
 8004d80:	eddf 6a0a 	vldr	s13, [pc, #40]	@ 8004dac <updateSpeedCalc+0x160>
 8004d84:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	edc3 7a1d 	vstr	s15, [r3, #116]	@ 0x74
		s->RPM = s->tenSampleRPM;
 8004d8e:	687b      	ldr	r3, [r7, #4]
 8004d90:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8004d92:	687b      	ldr	r3, [r7, #4]
 8004d94:	679a      	str	r2, [r3, #120]	@ 0x78
	}
}
 8004d96:	bf00      	nop
 8004d98:	3714      	adds	r7, #20
 8004d9a:	46bd      	mov	sp, r7
 8004d9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004da0:	4770      	bx	lr
 8004da2:	bf00      	nop
 8004da4:	447a0000 	.word	0x447a0000
 8004da8:	42700000 	.word	0x42700000
 8004dac:	40c90fda 	.word	0x40c90fda

08004db0 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8004db0:	b580      	push	{r7, lr}
 8004db2:	b082      	sub	sp, #8
 8004db4:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8004db6:	2300      	movs	r3, #0
 8004db8:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8004dba:	2003      	movs	r0, #3
 8004dbc:	f000 f9c8 	bl	8005150 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8004dc0:	200f      	movs	r0, #15
 8004dc2:	f000 f80d 	bl	8004de0 <HAL_InitTick>
 8004dc6:	4603      	mov	r3, r0
 8004dc8:	2b00      	cmp	r3, #0
 8004dca:	d002      	beq.n	8004dd2 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8004dcc:	2301      	movs	r3, #1
 8004dce:	71fb      	strb	r3, [r7, #7]
 8004dd0:	e001      	b.n	8004dd6 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8004dd2:	f7fd f91d 	bl	8002010 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8004dd6:	79fb      	ldrb	r3, [r7, #7]

}
 8004dd8:	4618      	mov	r0, r3
 8004dda:	3708      	adds	r7, #8
 8004ddc:	46bd      	mov	sp, r7
 8004dde:	bd80      	pop	{r7, pc}

08004de0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8004de0:	b580      	push	{r7, lr}
 8004de2:	b084      	sub	sp, #16
 8004de4:	af00      	add	r7, sp, #0
 8004de6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8004de8:	2300      	movs	r3, #0
 8004dea:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8004dec:	4b16      	ldr	r3, [pc, #88]	@ (8004e48 <HAL_InitTick+0x68>)
 8004dee:	681b      	ldr	r3, [r3, #0]
 8004df0:	2b00      	cmp	r3, #0
 8004df2:	d022      	beq.n	8004e3a <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8004df4:	4b15      	ldr	r3, [pc, #84]	@ (8004e4c <HAL_InitTick+0x6c>)
 8004df6:	681a      	ldr	r2, [r3, #0]
 8004df8:	4b13      	ldr	r3, [pc, #76]	@ (8004e48 <HAL_InitTick+0x68>)
 8004dfa:	681b      	ldr	r3, [r3, #0]
 8004dfc:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8004e00:	fbb1 f3f3 	udiv	r3, r1, r3
 8004e04:	fbb2 f3f3 	udiv	r3, r2, r3
 8004e08:	4618      	mov	r0, r3
 8004e0a:	f000 f9d4 	bl	80051b6 <HAL_SYSTICK_Config>
 8004e0e:	4603      	mov	r3, r0
 8004e10:	2b00      	cmp	r3, #0
 8004e12:	d10f      	bne.n	8004e34 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	2b0f      	cmp	r3, #15
 8004e18:	d809      	bhi.n	8004e2e <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8004e1a:	2200      	movs	r2, #0
 8004e1c:	6879      	ldr	r1, [r7, #4]
 8004e1e:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8004e22:	f000 f9a0 	bl	8005166 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8004e26:	4a0a      	ldr	r2, [pc, #40]	@ (8004e50 <HAL_InitTick+0x70>)
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	6013      	str	r3, [r2, #0]
 8004e2c:	e007      	b.n	8004e3e <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 8004e2e:	2301      	movs	r3, #1
 8004e30:	73fb      	strb	r3, [r7, #15]
 8004e32:	e004      	b.n	8004e3e <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8004e34:	2301      	movs	r3, #1
 8004e36:	73fb      	strb	r3, [r7, #15]
 8004e38:	e001      	b.n	8004e3e <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 8004e3a:	2301      	movs	r3, #1
 8004e3c:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8004e3e:	7bfb      	ldrb	r3, [r7, #15]
}
 8004e40:	4618      	mov	r0, r3
 8004e42:	3710      	adds	r7, #16
 8004e44:	46bd      	mov	sp, r7
 8004e46:	bd80      	pop	{r7, pc}
 8004e48:	20000190 	.word	0x20000190
 8004e4c:	20000008 	.word	0x20000008
 8004e50:	2000018c 	.word	0x2000018c

08004e54 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8004e54:	b480      	push	{r7}
 8004e56:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8004e58:	4b05      	ldr	r3, [pc, #20]	@ (8004e70 <HAL_IncTick+0x1c>)
 8004e5a:	681a      	ldr	r2, [r3, #0]
 8004e5c:	4b05      	ldr	r3, [pc, #20]	@ (8004e74 <HAL_IncTick+0x20>)
 8004e5e:	681b      	ldr	r3, [r3, #0]
 8004e60:	4413      	add	r3, r2
 8004e62:	4a03      	ldr	r2, [pc, #12]	@ (8004e70 <HAL_IncTick+0x1c>)
 8004e64:	6013      	str	r3, [r2, #0]
}
 8004e66:	bf00      	nop
 8004e68:	46bd      	mov	sp, r7
 8004e6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e6e:	4770      	bx	lr
 8004e70:	200018b0 	.word	0x200018b0
 8004e74:	20000190 	.word	0x20000190

08004e78 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8004e78:	b480      	push	{r7}
 8004e7a:	af00      	add	r7, sp, #0
  return uwTick;
 8004e7c:	4b03      	ldr	r3, [pc, #12]	@ (8004e8c <HAL_GetTick+0x14>)
 8004e7e:	681b      	ldr	r3, [r3, #0]
}
 8004e80:	4618      	mov	r0, r3
 8004e82:	46bd      	mov	sp, r7
 8004e84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e88:	4770      	bx	lr
 8004e8a:	bf00      	nop
 8004e8c:	200018b0 	.word	0x200018b0

08004e90 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8004e90:	b580      	push	{r7, lr}
 8004e92:	b084      	sub	sp, #16
 8004e94:	af00      	add	r7, sp, #0
 8004e96:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8004e98:	f7ff ffee 	bl	8004e78 <HAL_GetTick>
 8004e9c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8004e9e:	687b      	ldr	r3, [r7, #4]
 8004ea0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8004ea2:	68fb      	ldr	r3, [r7, #12]
 8004ea4:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8004ea8:	d004      	beq.n	8004eb4 <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 8004eaa:	4b09      	ldr	r3, [pc, #36]	@ (8004ed0 <HAL_Delay+0x40>)
 8004eac:	681b      	ldr	r3, [r3, #0]
 8004eae:	68fa      	ldr	r2, [r7, #12]
 8004eb0:	4413      	add	r3, r2
 8004eb2:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8004eb4:	bf00      	nop
 8004eb6:	f7ff ffdf 	bl	8004e78 <HAL_GetTick>
 8004eba:	4602      	mov	r2, r0
 8004ebc:	68bb      	ldr	r3, [r7, #8]
 8004ebe:	1ad3      	subs	r3, r2, r3
 8004ec0:	68fa      	ldr	r2, [r7, #12]
 8004ec2:	429a      	cmp	r2, r3
 8004ec4:	d8f7      	bhi.n	8004eb6 <HAL_Delay+0x26>
  {
  }
}
 8004ec6:	bf00      	nop
 8004ec8:	bf00      	nop
 8004eca:	3710      	adds	r7, #16
 8004ecc:	46bd      	mov	sp, r7
 8004ece:	bd80      	pop	{r7, pc}
 8004ed0:	20000190 	.word	0x20000190

08004ed4 <HAL_CORDIC_Init>:
  * @brief  Initialize the CORDIC peripheral and the associated handle.
  * @param  hcordic pointer to a CORDIC_HandleTypeDef structure.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CORDIC_Init(CORDIC_HandleTypeDef *hcordic)
{
 8004ed4:	b580      	push	{r7, lr}
 8004ed6:	b082      	sub	sp, #8
 8004ed8:	af00      	add	r7, sp, #0
 8004eda:	6078      	str	r0, [r7, #4]
  /* Check the CORDIC handle allocation */
  if (hcordic == NULL)
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	2b00      	cmp	r3, #0
 8004ee0:	d101      	bne.n	8004ee6 <HAL_CORDIC_Init+0x12>
  {
    /* Return error status */
    return HAL_ERROR;
 8004ee2:	2301      	movs	r3, #1
 8004ee4:	e023      	b.n	8004f2e <HAL_CORDIC_Init+0x5a>

    /* Initialize the low level hardware */
    hcordic->MspInitCallback(hcordic);
  }
#else
  if (hcordic->State == HAL_CORDIC_STATE_RESET)
 8004ee6:	687b      	ldr	r3, [r7, #4]
 8004ee8:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8004eec:	b2db      	uxtb	r3, r3
 8004eee:	2b00      	cmp	r3, #0
 8004ef0:	d106      	bne.n	8004f00 <HAL_CORDIC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hcordic->Lock = HAL_UNLOCKED;
 8004ef2:	687b      	ldr	r3, [r7, #4]
 8004ef4:	2200      	movs	r2, #0
 8004ef6:	f883 2020 	strb.w	r2, [r3, #32]

    /* Initialize the low level hardware */
    HAL_CORDIC_MspInit(hcordic);
 8004efa:	6878      	ldr	r0, [r7, #4]
 8004efc:	f7fd f8ac 	bl	8002058 <HAL_CORDIC_MspInit>
  }
#endif /* (USE_HAL_CORDIC_REGISTER_CALLBACKS) */

  /* Set CORDIC error code to none */
  hcordic->ErrorCode = HAL_CORDIC_ERROR_NONE;
 8004f00:	687b      	ldr	r3, [r7, #4]
 8004f02:	2200      	movs	r2, #0
 8004f04:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Reset pInBuff and pOutBuff */
  hcordic->pInBuff = NULL;
 8004f06:	687b      	ldr	r3, [r7, #4]
 8004f08:	2200      	movs	r2, #0
 8004f0a:	605a      	str	r2, [r3, #4]
  hcordic->pOutBuff = NULL;
 8004f0c:	687b      	ldr	r3, [r7, #4]
 8004f0e:	2200      	movs	r2, #0
 8004f10:	609a      	str	r2, [r3, #8]

  /* Reset NbCalcToOrder and NbCalcToGet */
  hcordic->NbCalcToOrder = 0U;
 8004f12:	687b      	ldr	r3, [r7, #4]
 8004f14:	2200      	movs	r2, #0
 8004f16:	60da      	str	r2, [r3, #12]
  hcordic->NbCalcToGet = 0U;
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	2200      	movs	r2, #0
 8004f1c:	611a      	str	r2, [r3, #16]

  /* Reset DMADirection */
  hcordic->DMADirection = CORDIC_DMA_DIR_NONE;
 8004f1e:	687b      	ldr	r3, [r7, #4]
 8004f20:	2200      	movs	r2, #0
 8004f22:	615a      	str	r2, [r3, #20]

  /* Change CORDIC peripheral state */
  hcordic->State = HAL_CORDIC_STATE_READY;
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	2201      	movs	r2, #1
 8004f28:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Return function status */
  return HAL_OK;
 8004f2c:	2300      	movs	r3, #0
}
 8004f2e:	4618      	mov	r0, r3
 8004f30:	3708      	adds	r7, #8
 8004f32:	46bd      	mov	sp, r7
 8004f34:	bd80      	pop	{r7, pc}
	...

08004f38 <HAL_CORDIC_Configure>:
  * @param  sConfig pointer to a CORDIC_ConfigTypeDef structure that
  *         contains the CORDIC configuration information.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CORDIC_Configure(CORDIC_HandleTypeDef *hcordic, const CORDIC_ConfigTypeDef *sConfig)
{
 8004f38:	b480      	push	{r7}
 8004f3a:	b085      	sub	sp, #20
 8004f3c:	af00      	add	r7, sp, #0
 8004f3e:	6078      	str	r0, [r7, #4]
 8004f40:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004f42:	2300      	movs	r3, #0
 8004f44:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_CORDIC_NBREAD(sConfig->NbRead));
  assert_param(IS_CORDIC_INSIZE(sConfig->InSize));
  assert_param(IS_CORDIC_OUTSIZE(sConfig->OutSize));

  /* Check handle state is ready */
  if (hcordic->State == HAL_CORDIC_STATE_READY)
 8004f46:	687b      	ldr	r3, [r7, #4]
 8004f48:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8004f4c:	b2db      	uxtb	r3, r3
 8004f4e:	2b01      	cmp	r3, #1
 8004f50:	d11d      	bne.n	8004f8e <HAL_CORDIC_Configure+0x56>
  {
    /* Apply all configuration parameters in CORDIC control register */
    MODIFY_REG(hcordic->Instance->CSR,                                                         \
 8004f52:	687b      	ldr	r3, [r7, #4]
 8004f54:	681b      	ldr	r3, [r3, #0]
 8004f56:	681a      	ldr	r2, [r3, #0]
 8004f58:	4b14      	ldr	r3, [pc, #80]	@ (8004fac <HAL_CORDIC_Configure+0x74>)
 8004f5a:	4013      	ands	r3, r2
 8004f5c:	683a      	ldr	r2, [r7, #0]
 8004f5e:	6811      	ldr	r1, [r2, #0]
 8004f60:	683a      	ldr	r2, [r7, #0]
 8004f62:	6992      	ldr	r2, [r2, #24]
 8004f64:	4311      	orrs	r1, r2
 8004f66:	683a      	ldr	r2, [r7, #0]
 8004f68:	6852      	ldr	r2, [r2, #4]
 8004f6a:	4311      	orrs	r1, r2
 8004f6c:	683a      	ldr	r2, [r7, #0]
 8004f6e:	6912      	ldr	r2, [r2, #16]
 8004f70:	4311      	orrs	r1, r2
 8004f72:	683a      	ldr	r2, [r7, #0]
 8004f74:	6952      	ldr	r2, [r2, #20]
 8004f76:	4311      	orrs	r1, r2
 8004f78:	683a      	ldr	r2, [r7, #0]
 8004f7a:	6892      	ldr	r2, [r2, #8]
 8004f7c:	4311      	orrs	r1, r2
 8004f7e:	683a      	ldr	r2, [r7, #0]
 8004f80:	68d2      	ldr	r2, [r2, #12]
 8004f82:	4311      	orrs	r1, r2
 8004f84:	687a      	ldr	r2, [r7, #4]
 8004f86:	6812      	ldr	r2, [r2, #0]
 8004f88:	430b      	orrs	r3, r1
 8004f8a:	6013      	str	r3, [r2, #0]
 8004f8c:	e007      	b.n	8004f9e <HAL_CORDIC_Configure+0x66>
                sConfig->NbWrite | sConfig->NbRead | sConfig->InSize | sConfig->OutSize));
  }
  else
  {
    /* Set CORDIC error code */
    hcordic->ErrorCode |= HAL_CORDIC_ERROR_NOT_READY;
 8004f8e:	687b      	ldr	r3, [r7, #4]
 8004f90:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004f92:	f043 0202 	orr.w	r2, r3, #2
 8004f96:	687b      	ldr	r3, [r7, #4]
 8004f98:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Return error status */
    status = HAL_ERROR;
 8004f9a:	2301      	movs	r3, #1
 8004f9c:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8004f9e:	7bfb      	ldrb	r3, [r7, #15]
}
 8004fa0:	4618      	mov	r0, r3
 8004fa2:	3714      	adds	r7, #20
 8004fa4:	46bd      	mov	sp, r7
 8004fa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004faa:	4770      	bx	lr
 8004fac:	ff87f800 	.word	0xff87f800

08004fb0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004fb0:	b480      	push	{r7}
 8004fb2:	b085      	sub	sp, #20
 8004fb4:	af00      	add	r7, sp, #0
 8004fb6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8004fb8:	687b      	ldr	r3, [r7, #4]
 8004fba:	f003 0307 	and.w	r3, r3, #7
 8004fbe:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004fc0:	4b0c      	ldr	r3, [pc, #48]	@ (8004ff4 <__NVIC_SetPriorityGrouping+0x44>)
 8004fc2:	68db      	ldr	r3, [r3, #12]
 8004fc4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8004fc6:	68ba      	ldr	r2, [r7, #8]
 8004fc8:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8004fcc:	4013      	ands	r3, r2
 8004fce:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8004fd0:	68fb      	ldr	r3, [r7, #12]
 8004fd2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004fd4:	68bb      	ldr	r3, [r7, #8]
 8004fd6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8004fd8:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8004fdc:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004fe0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8004fe2:	4a04      	ldr	r2, [pc, #16]	@ (8004ff4 <__NVIC_SetPriorityGrouping+0x44>)
 8004fe4:	68bb      	ldr	r3, [r7, #8]
 8004fe6:	60d3      	str	r3, [r2, #12]
}
 8004fe8:	bf00      	nop
 8004fea:	3714      	adds	r7, #20
 8004fec:	46bd      	mov	sp, r7
 8004fee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ff2:	4770      	bx	lr
 8004ff4:	e000ed00 	.word	0xe000ed00

08004ff8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8004ff8:	b480      	push	{r7}
 8004ffa:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004ffc:	4b04      	ldr	r3, [pc, #16]	@ (8005010 <__NVIC_GetPriorityGrouping+0x18>)
 8004ffe:	68db      	ldr	r3, [r3, #12]
 8005000:	0a1b      	lsrs	r3, r3, #8
 8005002:	f003 0307 	and.w	r3, r3, #7
}
 8005006:	4618      	mov	r0, r3
 8005008:	46bd      	mov	sp, r7
 800500a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800500e:	4770      	bx	lr
 8005010:	e000ed00 	.word	0xe000ed00

08005014 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005014:	b480      	push	{r7}
 8005016:	b083      	sub	sp, #12
 8005018:	af00      	add	r7, sp, #0
 800501a:	4603      	mov	r3, r0
 800501c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800501e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005022:	2b00      	cmp	r3, #0
 8005024:	db0b      	blt.n	800503e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8005026:	79fb      	ldrb	r3, [r7, #7]
 8005028:	f003 021f 	and.w	r2, r3, #31
 800502c:	4907      	ldr	r1, [pc, #28]	@ (800504c <__NVIC_EnableIRQ+0x38>)
 800502e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005032:	095b      	lsrs	r3, r3, #5
 8005034:	2001      	movs	r0, #1
 8005036:	fa00 f202 	lsl.w	r2, r0, r2
 800503a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800503e:	bf00      	nop
 8005040:	370c      	adds	r7, #12
 8005042:	46bd      	mov	sp, r7
 8005044:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005048:	4770      	bx	lr
 800504a:	bf00      	nop
 800504c:	e000e100 	.word	0xe000e100

08005050 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8005050:	b480      	push	{r7}
 8005052:	b083      	sub	sp, #12
 8005054:	af00      	add	r7, sp, #0
 8005056:	4603      	mov	r3, r0
 8005058:	6039      	str	r1, [r7, #0]
 800505a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800505c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005060:	2b00      	cmp	r3, #0
 8005062:	db0a      	blt.n	800507a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005064:	683b      	ldr	r3, [r7, #0]
 8005066:	b2da      	uxtb	r2, r3
 8005068:	490c      	ldr	r1, [pc, #48]	@ (800509c <__NVIC_SetPriority+0x4c>)
 800506a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800506e:	0112      	lsls	r2, r2, #4
 8005070:	b2d2      	uxtb	r2, r2
 8005072:	440b      	add	r3, r1
 8005074:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8005078:	e00a      	b.n	8005090 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800507a:	683b      	ldr	r3, [r7, #0]
 800507c:	b2da      	uxtb	r2, r3
 800507e:	4908      	ldr	r1, [pc, #32]	@ (80050a0 <__NVIC_SetPriority+0x50>)
 8005080:	79fb      	ldrb	r3, [r7, #7]
 8005082:	f003 030f 	and.w	r3, r3, #15
 8005086:	3b04      	subs	r3, #4
 8005088:	0112      	lsls	r2, r2, #4
 800508a:	b2d2      	uxtb	r2, r2
 800508c:	440b      	add	r3, r1
 800508e:	761a      	strb	r2, [r3, #24]
}
 8005090:	bf00      	nop
 8005092:	370c      	adds	r7, #12
 8005094:	46bd      	mov	sp, r7
 8005096:	f85d 7b04 	ldr.w	r7, [sp], #4
 800509a:	4770      	bx	lr
 800509c:	e000e100 	.word	0xe000e100
 80050a0:	e000ed00 	.word	0xe000ed00

080050a4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80050a4:	b480      	push	{r7}
 80050a6:	b089      	sub	sp, #36	@ 0x24
 80050a8:	af00      	add	r7, sp, #0
 80050aa:	60f8      	str	r0, [r7, #12]
 80050ac:	60b9      	str	r1, [r7, #8]
 80050ae:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80050b0:	68fb      	ldr	r3, [r7, #12]
 80050b2:	f003 0307 	and.w	r3, r3, #7
 80050b6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80050b8:	69fb      	ldr	r3, [r7, #28]
 80050ba:	f1c3 0307 	rsb	r3, r3, #7
 80050be:	2b04      	cmp	r3, #4
 80050c0:	bf28      	it	cs
 80050c2:	2304      	movcs	r3, #4
 80050c4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80050c6:	69fb      	ldr	r3, [r7, #28]
 80050c8:	3304      	adds	r3, #4
 80050ca:	2b06      	cmp	r3, #6
 80050cc:	d902      	bls.n	80050d4 <NVIC_EncodePriority+0x30>
 80050ce:	69fb      	ldr	r3, [r7, #28]
 80050d0:	3b03      	subs	r3, #3
 80050d2:	e000      	b.n	80050d6 <NVIC_EncodePriority+0x32>
 80050d4:	2300      	movs	r3, #0
 80050d6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80050d8:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80050dc:	69bb      	ldr	r3, [r7, #24]
 80050de:	fa02 f303 	lsl.w	r3, r2, r3
 80050e2:	43da      	mvns	r2, r3
 80050e4:	68bb      	ldr	r3, [r7, #8]
 80050e6:	401a      	ands	r2, r3
 80050e8:	697b      	ldr	r3, [r7, #20]
 80050ea:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80050ec:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 80050f0:	697b      	ldr	r3, [r7, #20]
 80050f2:	fa01 f303 	lsl.w	r3, r1, r3
 80050f6:	43d9      	mvns	r1, r3
 80050f8:	687b      	ldr	r3, [r7, #4]
 80050fa:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80050fc:	4313      	orrs	r3, r2
         );
}
 80050fe:	4618      	mov	r0, r3
 8005100:	3724      	adds	r7, #36	@ 0x24
 8005102:	46bd      	mov	sp, r7
 8005104:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005108:	4770      	bx	lr
	...

0800510c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800510c:	b580      	push	{r7, lr}
 800510e:	b082      	sub	sp, #8
 8005110:	af00      	add	r7, sp, #0
 8005112:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8005114:	687b      	ldr	r3, [r7, #4]
 8005116:	3b01      	subs	r3, #1
 8005118:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800511c:	d301      	bcc.n	8005122 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800511e:	2301      	movs	r3, #1
 8005120:	e00f      	b.n	8005142 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8005122:	4a0a      	ldr	r2, [pc, #40]	@ (800514c <SysTick_Config+0x40>)
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	3b01      	subs	r3, #1
 8005128:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800512a:	210f      	movs	r1, #15
 800512c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8005130:	f7ff ff8e 	bl	8005050 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8005134:	4b05      	ldr	r3, [pc, #20]	@ (800514c <SysTick_Config+0x40>)
 8005136:	2200      	movs	r2, #0
 8005138:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800513a:	4b04      	ldr	r3, [pc, #16]	@ (800514c <SysTick_Config+0x40>)
 800513c:	2207      	movs	r2, #7
 800513e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8005140:	2300      	movs	r3, #0
}
 8005142:	4618      	mov	r0, r3
 8005144:	3708      	adds	r7, #8
 8005146:	46bd      	mov	sp, r7
 8005148:	bd80      	pop	{r7, pc}
 800514a:	bf00      	nop
 800514c:	e000e010 	.word	0xe000e010

08005150 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8005150:	b580      	push	{r7, lr}
 8005152:	b082      	sub	sp, #8
 8005154:	af00      	add	r7, sp, #0
 8005156:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8005158:	6878      	ldr	r0, [r7, #4]
 800515a:	f7ff ff29 	bl	8004fb0 <__NVIC_SetPriorityGrouping>
}
 800515e:	bf00      	nop
 8005160:	3708      	adds	r7, #8
 8005162:	46bd      	mov	sp, r7
 8005164:	bd80      	pop	{r7, pc}

08005166 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8005166:	b580      	push	{r7, lr}
 8005168:	b086      	sub	sp, #24
 800516a:	af00      	add	r7, sp, #0
 800516c:	4603      	mov	r3, r0
 800516e:	60b9      	str	r1, [r7, #8]
 8005170:	607a      	str	r2, [r7, #4]
 8005172:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8005174:	f7ff ff40 	bl	8004ff8 <__NVIC_GetPriorityGrouping>
 8005178:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800517a:	687a      	ldr	r2, [r7, #4]
 800517c:	68b9      	ldr	r1, [r7, #8]
 800517e:	6978      	ldr	r0, [r7, #20]
 8005180:	f7ff ff90 	bl	80050a4 <NVIC_EncodePriority>
 8005184:	4602      	mov	r2, r0
 8005186:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800518a:	4611      	mov	r1, r2
 800518c:	4618      	mov	r0, r3
 800518e:	f7ff ff5f 	bl	8005050 <__NVIC_SetPriority>
}
 8005192:	bf00      	nop
 8005194:	3718      	adds	r7, #24
 8005196:	46bd      	mov	sp, r7
 8005198:	bd80      	pop	{r7, pc}

0800519a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800519a:	b580      	push	{r7, lr}
 800519c:	b082      	sub	sp, #8
 800519e:	af00      	add	r7, sp, #0
 80051a0:	4603      	mov	r3, r0
 80051a2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80051a4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80051a8:	4618      	mov	r0, r3
 80051aa:	f7ff ff33 	bl	8005014 <__NVIC_EnableIRQ>
}
 80051ae:	bf00      	nop
 80051b0:	3708      	adds	r7, #8
 80051b2:	46bd      	mov	sp, r7
 80051b4:	bd80      	pop	{r7, pc}

080051b6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80051b6:	b580      	push	{r7, lr}
 80051b8:	b082      	sub	sp, #8
 80051ba:	af00      	add	r7, sp, #0
 80051bc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80051be:	6878      	ldr	r0, [r7, #4]
 80051c0:	f7ff ffa4 	bl	800510c <SysTick_Config>
 80051c4:	4603      	mov	r3, r0
}
 80051c6:	4618      	mov	r0, r3
 80051c8:	3708      	adds	r7, #8
 80051ca:	46bd      	mov	sp, r7
 80051cc:	bd80      	pop	{r7, pc}
	...

080051d0 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80051d0:	b580      	push	{r7, lr}
 80051d2:	b084      	sub	sp, #16
 80051d4:	af00      	add	r7, sp, #0
 80051d6:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	2b00      	cmp	r3, #0
 80051dc:	d101      	bne.n	80051e2 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 80051de:	2301      	movs	r3, #1
 80051e0:	e08d      	b.n	80052fe <HAL_DMA_Init+0x12e>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 80051e2:	687b      	ldr	r3, [r7, #4]
 80051e4:	681b      	ldr	r3, [r3, #0]
 80051e6:	461a      	mov	r2, r3
 80051e8:	4b47      	ldr	r3, [pc, #284]	@ (8005308 <HAL_DMA_Init+0x138>)
 80051ea:	429a      	cmp	r2, r3
 80051ec:	d80f      	bhi.n	800520e <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 80051ee:	687b      	ldr	r3, [r7, #4]
 80051f0:	681b      	ldr	r3, [r3, #0]
 80051f2:	461a      	mov	r2, r3
 80051f4:	4b45      	ldr	r3, [pc, #276]	@ (800530c <HAL_DMA_Init+0x13c>)
 80051f6:	4413      	add	r3, r2
 80051f8:	4a45      	ldr	r2, [pc, #276]	@ (8005310 <HAL_DMA_Init+0x140>)
 80051fa:	fba2 2303 	umull	r2, r3, r2, r3
 80051fe:	091b      	lsrs	r3, r3, #4
 8005200:	009a      	lsls	r2, r3, #2
 8005202:	687b      	ldr	r3, [r7, #4]
 8005204:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA1;
 8005206:	687b      	ldr	r3, [r7, #4]
 8005208:	4a42      	ldr	r2, [pc, #264]	@ (8005314 <HAL_DMA_Init+0x144>)
 800520a:	641a      	str	r2, [r3, #64]	@ 0x40
 800520c:	e00e      	b.n	800522c <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 800520e:	687b      	ldr	r3, [r7, #4]
 8005210:	681b      	ldr	r3, [r3, #0]
 8005212:	461a      	mov	r2, r3
 8005214:	4b40      	ldr	r3, [pc, #256]	@ (8005318 <HAL_DMA_Init+0x148>)
 8005216:	4413      	add	r3, r2
 8005218:	4a3d      	ldr	r2, [pc, #244]	@ (8005310 <HAL_DMA_Init+0x140>)
 800521a:	fba2 2303 	umull	r2, r3, r2, r3
 800521e:	091b      	lsrs	r3, r3, #4
 8005220:	009a      	lsls	r2, r3, #2
 8005222:	687b      	ldr	r3, [r7, #4]
 8005224:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA2;
 8005226:	687b      	ldr	r3, [r7, #4]
 8005228:	4a3c      	ldr	r2, [pc, #240]	@ (800531c <HAL_DMA_Init+0x14c>)
 800522a:	641a      	str	r2, [r3, #64]	@ 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	2202      	movs	r2, #2
 8005230:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8005234:	687b      	ldr	r3, [r7, #4]
 8005236:	681b      	ldr	r3, [r3, #0]
 8005238:	681b      	ldr	r3, [r3, #0]
 800523a:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 800523c:	68fb      	ldr	r3, [r7, #12]
 800523e:	f423 43ff 	bic.w	r3, r3, #32640	@ 0x7f80
 8005242:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005246:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8005248:	687b      	ldr	r3, [r7, #4]
 800524a:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800524c:	687b      	ldr	r3, [r7, #4]
 800524e:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8005250:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005252:	687b      	ldr	r3, [r7, #4]
 8005254:	691b      	ldr	r3, [r3, #16]
 8005256:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005258:	687b      	ldr	r3, [r7, #4]
 800525a:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800525c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800525e:	687b      	ldr	r3, [r7, #4]
 8005260:	699b      	ldr	r3, [r3, #24]
 8005262:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8005264:	687b      	ldr	r3, [r7, #4]
 8005266:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005268:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800526a:	687b      	ldr	r3, [r7, #4]
 800526c:	6a1b      	ldr	r3, [r3, #32]
 800526e:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8005270:	68fa      	ldr	r2, [r7, #12]
 8005272:	4313      	orrs	r3, r2
 8005274:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8005276:	687b      	ldr	r3, [r7, #4]
 8005278:	681b      	ldr	r3, [r3, #0]
 800527a:	68fa      	ldr	r2, [r7, #12]
 800527c:	601a      	str	r2, [r3, #0]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 800527e:	6878      	ldr	r0, [r7, #4]
 8005280:	f000 fa76 	bl	8005770 <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8005284:	687b      	ldr	r3, [r7, #4]
 8005286:	689b      	ldr	r3, [r3, #8]
 8005288:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800528c:	d102      	bne.n	8005294 <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 800528e:	687b      	ldr	r3, [r7, #4]
 8005290:	2200      	movs	r2, #0
 8005292:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8005294:	687b      	ldr	r3, [r7, #4]
 8005296:	685a      	ldr	r2, [r3, #4]
 8005298:	687b      	ldr	r3, [r7, #4]
 800529a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800529c:	b2d2      	uxtb	r2, r2
 800529e:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80052a0:	687b      	ldr	r3, [r7, #4]
 80052a2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80052a4:	687a      	ldr	r2, [r7, #4]
 80052a6:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 80052a8:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 80052aa:	687b      	ldr	r3, [r7, #4]
 80052ac:	685b      	ldr	r3, [r3, #4]
 80052ae:	2b00      	cmp	r3, #0
 80052b0:	d010      	beq.n	80052d4 <HAL_DMA_Init+0x104>
 80052b2:	687b      	ldr	r3, [r7, #4]
 80052b4:	685b      	ldr	r3, [r3, #4]
 80052b6:	2b04      	cmp	r3, #4
 80052b8:	d80c      	bhi.n	80052d4 <HAL_DMA_Init+0x104>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 80052ba:	6878      	ldr	r0, [r7, #4]
 80052bc:	f000 fa96 	bl	80057ec <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 80052c0:	687b      	ldr	r3, [r7, #4]
 80052c2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80052c4:	2200      	movs	r2, #0
 80052c6:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80052c8:	687b      	ldr	r3, [r7, #4]
 80052ca:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80052cc:	687a      	ldr	r2, [r7, #4]
 80052ce:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 80052d0:	605a      	str	r2, [r3, #4]
 80052d2:	e008      	b.n	80052e6 <HAL_DMA_Init+0x116>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 80052d4:	687b      	ldr	r3, [r7, #4]
 80052d6:	2200      	movs	r2, #0
 80052d8:	655a      	str	r2, [r3, #84]	@ 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 80052da:	687b      	ldr	r3, [r7, #4]
 80052dc:	2200      	movs	r2, #0
 80052de:	659a      	str	r2, [r3, #88]	@ 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 80052e0:	687b      	ldr	r3, [r7, #4]
 80052e2:	2200      	movs	r2, #0
 80052e4:	65da      	str	r2, [r3, #92]	@ 0x5c
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80052e6:	687b      	ldr	r3, [r7, #4]
 80052e8:	2200      	movs	r2, #0
 80052ea:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 80052ec:	687b      	ldr	r3, [r7, #4]
 80052ee:	2201      	movs	r2, #1
 80052f0:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 80052f4:	687b      	ldr	r3, [r7, #4]
 80052f6:	2200      	movs	r2, #0
 80052f8:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 80052fc:	2300      	movs	r3, #0
}
 80052fe:	4618      	mov	r0, r3
 8005300:	3710      	adds	r7, #16
 8005302:	46bd      	mov	sp, r7
 8005304:	bd80      	pop	{r7, pc}
 8005306:	bf00      	nop
 8005308:	40020407 	.word	0x40020407
 800530c:	bffdfff8 	.word	0xbffdfff8
 8005310:	cccccccd 	.word	0xcccccccd
 8005314:	40020000 	.word	0x40020000
 8005318:	bffdfbf8 	.word	0xbffdfbf8
 800531c:	40020400 	.word	0x40020400

08005320 <HAL_DMA_Start_IT>:
  * @param  DataLength The length of data to be transferred from source to destination (up to 256Kbytes-1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress,
                                   uint32_t DataLength)
{
 8005320:	b580      	push	{r7, lr}
 8005322:	b086      	sub	sp, #24
 8005324:	af00      	add	r7, sp, #0
 8005326:	60f8      	str	r0, [r7, #12]
 8005328:	60b9      	str	r1, [r7, #8]
 800532a:	607a      	str	r2, [r7, #4]
 800532c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800532e:	2300      	movs	r3, #0
 8005330:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8005332:	68fb      	ldr	r3, [r7, #12]
 8005334:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8005338:	2b01      	cmp	r3, #1
 800533a:	d101      	bne.n	8005340 <HAL_DMA_Start_IT+0x20>
 800533c:	2302      	movs	r3, #2
 800533e:	e066      	b.n	800540e <HAL_DMA_Start_IT+0xee>
 8005340:	68fb      	ldr	r3, [r7, #12]
 8005342:	2201      	movs	r2, #1
 8005344:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 8005348:	68fb      	ldr	r3, [r7, #12]
 800534a:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 800534e:	b2db      	uxtb	r3, r3
 8005350:	2b01      	cmp	r3, #1
 8005352:	d155      	bne.n	8005400 <HAL_DMA_Start_IT+0xe0>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8005354:	68fb      	ldr	r3, [r7, #12]
 8005356:	2202      	movs	r2, #2
 8005358:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800535c:	68fb      	ldr	r3, [r7, #12]
 800535e:	2200      	movs	r2, #0
 8005360:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8005362:	68fb      	ldr	r3, [r7, #12]
 8005364:	681b      	ldr	r3, [r3, #0]
 8005366:	681a      	ldr	r2, [r3, #0]
 8005368:	68fb      	ldr	r3, [r7, #12]
 800536a:	681b      	ldr	r3, [r3, #0]
 800536c:	f022 0201 	bic.w	r2, r2, #1
 8005370:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8005372:	683b      	ldr	r3, [r7, #0]
 8005374:	687a      	ldr	r2, [r7, #4]
 8005376:	68b9      	ldr	r1, [r7, #8]
 8005378:	68f8      	ldr	r0, [r7, #12]
 800537a:	f000 f9bb 	bl	80056f4 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 800537e:	68fb      	ldr	r3, [r7, #12]
 8005380:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005382:	2b00      	cmp	r3, #0
 8005384:	d008      	beq.n	8005398 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8005386:	68fb      	ldr	r3, [r7, #12]
 8005388:	681b      	ldr	r3, [r3, #0]
 800538a:	681a      	ldr	r2, [r3, #0]
 800538c:	68fb      	ldr	r3, [r7, #12]
 800538e:	681b      	ldr	r3, [r3, #0]
 8005390:	f042 020e 	orr.w	r2, r2, #14
 8005394:	601a      	str	r2, [r3, #0]
 8005396:	e00f      	b.n	80053b8 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8005398:	68fb      	ldr	r3, [r7, #12]
 800539a:	681b      	ldr	r3, [r3, #0]
 800539c:	681a      	ldr	r2, [r3, #0]
 800539e:	68fb      	ldr	r3, [r7, #12]
 80053a0:	681b      	ldr	r3, [r3, #0]
 80053a2:	f022 0204 	bic.w	r2, r2, #4
 80053a6:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 80053a8:	68fb      	ldr	r3, [r7, #12]
 80053aa:	681b      	ldr	r3, [r3, #0]
 80053ac:	681a      	ldr	r2, [r3, #0]
 80053ae:	68fb      	ldr	r3, [r7, #12]
 80053b0:	681b      	ldr	r3, [r3, #0]
 80053b2:	f042 020a 	orr.w	r2, r2, #10
 80053b6:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 80053b8:	68fb      	ldr	r3, [r7, #12]
 80053ba:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80053bc:	681b      	ldr	r3, [r3, #0]
 80053be:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80053c2:	2b00      	cmp	r3, #0
 80053c4:	d007      	beq.n	80053d6 <HAL_DMA_Start_IT+0xb6>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 80053c6:	68fb      	ldr	r3, [r7, #12]
 80053c8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80053ca:	681a      	ldr	r2, [r3, #0]
 80053cc:	68fb      	ldr	r3, [r7, #12]
 80053ce:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80053d0:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80053d4:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 80053d6:	68fb      	ldr	r3, [r7, #12]
 80053d8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80053da:	2b00      	cmp	r3, #0
 80053dc:	d007      	beq.n	80053ee <HAL_DMA_Start_IT+0xce>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 80053de:	68fb      	ldr	r3, [r7, #12]
 80053e0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80053e2:	681a      	ldr	r2, [r3, #0]
 80053e4:	68fb      	ldr	r3, [r7, #12]
 80053e6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80053e8:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80053ec:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80053ee:	68fb      	ldr	r3, [r7, #12]
 80053f0:	681b      	ldr	r3, [r3, #0]
 80053f2:	681a      	ldr	r2, [r3, #0]
 80053f4:	68fb      	ldr	r3, [r7, #12]
 80053f6:	681b      	ldr	r3, [r3, #0]
 80053f8:	f042 0201 	orr.w	r2, r2, #1
 80053fc:	601a      	str	r2, [r3, #0]
 80053fe:	e005      	b.n	800540c <HAL_DMA_Start_IT+0xec>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005400:	68fb      	ldr	r3, [r7, #12]
 8005402:	2200      	movs	r2, #0
 8005404:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 8005408:	2302      	movs	r3, #2
 800540a:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 800540c:	7dfb      	ldrb	r3, [r7, #23]
}
 800540e:	4618      	mov	r0, r3
 8005410:	3718      	adds	r7, #24
 8005412:	46bd      	mov	sp, r7
 8005414:	bd80      	pop	{r7, pc}

08005416 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8005416:	b480      	push	{r7}
 8005418:	b085      	sub	sp, #20
 800541a:	af00      	add	r7, sp, #0
 800541c:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800541e:	2300      	movs	r3, #0
 8005420:	73fb      	strb	r3, [r7, #15]

  if(hdma->State != HAL_DMA_STATE_BUSY)
 8005422:	687b      	ldr	r3, [r7, #4]
 8005424:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8005428:	b2db      	uxtb	r3, r3
 800542a:	2b02      	cmp	r3, #2
 800542c:	d005      	beq.n	800543a <HAL_DMA_Abort+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800542e:	687b      	ldr	r3, [r7, #4]
 8005430:	2204      	movs	r2, #4
 8005432:	63da      	str	r2, [r3, #60]	@ 0x3c

    status = HAL_ERROR;
 8005434:	2301      	movs	r3, #1
 8005436:	73fb      	strb	r3, [r7, #15]
 8005438:	e037      	b.n	80054aa <HAL_DMA_Abort+0x94>
  }
  else
  {
     /* Disable DMA IT */
     __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800543a:	687b      	ldr	r3, [r7, #4]
 800543c:	681b      	ldr	r3, [r3, #0]
 800543e:	681a      	ldr	r2, [r3, #0]
 8005440:	687b      	ldr	r3, [r7, #4]
 8005442:	681b      	ldr	r3, [r3, #0]
 8005444:	f022 020e 	bic.w	r2, r2, #14
 8005448:	601a      	str	r2, [r3, #0]
     
     /* disable the DMAMUX sync overrun IT*/
     hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 800544a:	687b      	ldr	r3, [r7, #4]
 800544c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800544e:	681a      	ldr	r2, [r3, #0]
 8005450:	687b      	ldr	r3, [r7, #4]
 8005452:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005454:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8005458:	601a      	str	r2, [r3, #0]
     
     /* Disable the channel */
     __HAL_DMA_DISABLE(hdma);
 800545a:	687b      	ldr	r3, [r7, #4]
 800545c:	681b      	ldr	r3, [r3, #0]
 800545e:	681a      	ldr	r2, [r3, #0]
 8005460:	687b      	ldr	r3, [r7, #4]
 8005462:	681b      	ldr	r3, [r3, #0]
 8005464:	f022 0201 	bic.w	r2, r2, #1
 8005468:	601a      	str	r2, [r3, #0]
     
     /* Clear all flags */
     hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 800546a:	687b      	ldr	r3, [r7, #4]
 800546c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800546e:	f003 021f 	and.w	r2, r3, #31
 8005472:	687b      	ldr	r3, [r7, #4]
 8005474:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005476:	2101      	movs	r1, #1
 8005478:	fa01 f202 	lsl.w	r2, r1, r2
 800547c:	605a      	str	r2, [r3, #4]
     
     /* Clear the DMAMUX synchro overrun flag */
     hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800547e:	687b      	ldr	r3, [r7, #4]
 8005480:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005482:	687a      	ldr	r2, [r7, #4]
 8005484:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8005486:	605a      	str	r2, [r3, #4]
     
     if (hdma->DMAmuxRequestGen != 0U)
 8005488:	687b      	ldr	r3, [r7, #4]
 800548a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800548c:	2b00      	cmp	r3, #0
 800548e:	d00c      	beq.n	80054aa <HAL_DMA_Abort+0x94>
     {
       /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
       /* disable the request gen overrun IT*/
       hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8005490:	687b      	ldr	r3, [r7, #4]
 8005492:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005494:	681a      	ldr	r2, [r3, #0]
 8005496:	687b      	ldr	r3, [r7, #4]
 8005498:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800549a:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800549e:	601a      	str	r2, [r3, #0]
     
       /* Clear the DMAMUX request generator overrun flag */
       hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80054a0:	687b      	ldr	r3, [r7, #4]
 80054a2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80054a4:	687a      	ldr	r2, [r7, #4]
 80054a6:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 80054a8:	605a      	str	r2, [r3, #4]
     }
  }  
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80054aa:	687b      	ldr	r3, [r7, #4]
 80054ac:	2201      	movs	r2, #1
 80054ae:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 80054b2:	687b      	ldr	r3, [r7, #4]
 80054b4:	2200      	movs	r2, #0
 80054b6:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return status;
 80054ba:	7bfb      	ldrb	r3, [r7, #15]
}
 80054bc:	4618      	mov	r0, r3
 80054be:	3714      	adds	r7, #20
 80054c0:	46bd      	mov	sp, r7
 80054c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054c6:	4770      	bx	lr

080054c8 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80054c8:	b580      	push	{r7, lr}
 80054ca:	b084      	sub	sp, #16
 80054cc:	af00      	add	r7, sp, #0
 80054ce:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80054d0:	2300      	movs	r3, #0
 80054d2:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 80054d4:	687b      	ldr	r3, [r7, #4]
 80054d6:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 80054da:	b2db      	uxtb	r3, r3
 80054dc:	2b02      	cmp	r3, #2
 80054de:	d00d      	beq.n	80054fc <HAL_DMA_Abort_IT+0x34>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80054e0:	687b      	ldr	r3, [r7, #4]
 80054e2:	2204      	movs	r2, #4
 80054e4:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80054e6:	687b      	ldr	r3, [r7, #4]
 80054e8:	2201      	movs	r2, #1
 80054ea:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80054ee:	687b      	ldr	r3, [r7, #4]
 80054f0:	2200      	movs	r2, #0
 80054f2:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    status = HAL_ERROR;
 80054f6:	2301      	movs	r3, #1
 80054f8:	73fb      	strb	r3, [r7, #15]
 80054fa:	e047      	b.n	800558c <HAL_DMA_Abort_IT+0xc4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80054fc:	687b      	ldr	r3, [r7, #4]
 80054fe:	681b      	ldr	r3, [r3, #0]
 8005500:	681a      	ldr	r2, [r3, #0]
 8005502:	687b      	ldr	r3, [r7, #4]
 8005504:	681b      	ldr	r3, [r3, #0]
 8005506:	f022 020e 	bic.w	r2, r2, #14
 800550a:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800550c:	687b      	ldr	r3, [r7, #4]
 800550e:	681b      	ldr	r3, [r3, #0]
 8005510:	681a      	ldr	r2, [r3, #0]
 8005512:	687b      	ldr	r3, [r7, #4]
 8005514:	681b      	ldr	r3, [r3, #0]
 8005516:	f022 0201 	bic.w	r2, r2, #1
 800551a:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 800551c:	687b      	ldr	r3, [r7, #4]
 800551e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005520:	681a      	ldr	r2, [r3, #0]
 8005522:	687b      	ldr	r3, [r7, #4]
 8005524:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005526:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800552a:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 800552c:	687b      	ldr	r3, [r7, #4]
 800552e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005530:	f003 021f 	and.w	r2, r3, #31
 8005534:	687b      	ldr	r3, [r7, #4]
 8005536:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005538:	2101      	movs	r1, #1
 800553a:	fa01 f202 	lsl.w	r2, r1, r2
 800553e:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8005540:	687b      	ldr	r3, [r7, #4]
 8005542:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005544:	687a      	ldr	r2, [r7, #4]
 8005546:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8005548:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 800554a:	687b      	ldr	r3, [r7, #4]
 800554c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800554e:	2b00      	cmp	r3, #0
 8005550:	d00c      	beq.n	800556c <HAL_DMA_Abort_IT+0xa4>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8005552:	687b      	ldr	r3, [r7, #4]
 8005554:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005556:	681a      	ldr	r2, [r3, #0]
 8005558:	687b      	ldr	r3, [r7, #4]
 800555a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800555c:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8005560:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8005562:	687b      	ldr	r3, [r7, #4]
 8005564:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005566:	687a      	ldr	r2, [r7, #4]
 8005568:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 800556a:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800556c:	687b      	ldr	r3, [r7, #4]
 800556e:	2201      	movs	r2, #1
 8005570:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005574:	687b      	ldr	r3, [r7, #4]
 8005576:	2200      	movs	r2, #0
 8005578:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 800557c:	687b      	ldr	r3, [r7, #4]
 800557e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005580:	2b00      	cmp	r3, #0
 8005582:	d003      	beq.n	800558c <HAL_DMA_Abort_IT+0xc4>
    {
      hdma->XferAbortCallback(hdma);
 8005584:	687b      	ldr	r3, [r7, #4]
 8005586:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005588:	6878      	ldr	r0, [r7, #4]
 800558a:	4798      	blx	r3
    }
  }
  return status;
 800558c:	7bfb      	ldrb	r3, [r7, #15]
}
 800558e:	4618      	mov	r0, r3
 8005590:	3710      	adds	r7, #16
 8005592:	46bd      	mov	sp, r7
 8005594:	bd80      	pop	{r7, pc}

08005596 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8005596:	b580      	push	{r7, lr}
 8005598:	b084      	sub	sp, #16
 800559a:	af00      	add	r7, sp, #0
 800559c:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 800559e:	687b      	ldr	r3, [r7, #4]
 80055a0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80055a2:	681b      	ldr	r3, [r3, #0]
 80055a4:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 80055a6:	687b      	ldr	r3, [r7, #4]
 80055a8:	681b      	ldr	r3, [r3, #0]
 80055aa:	681b      	ldr	r3, [r3, #0]
 80055ac:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((0U != (flag_it & ((uint32_t)DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1FU)))) && (0U != (source_it & DMA_IT_HT)))
 80055ae:	687b      	ldr	r3, [r7, #4]
 80055b0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80055b2:	f003 031f 	and.w	r3, r3, #31
 80055b6:	2204      	movs	r2, #4
 80055b8:	409a      	lsls	r2, r3
 80055ba:	68fb      	ldr	r3, [r7, #12]
 80055bc:	4013      	ands	r3, r2
 80055be:	2b00      	cmp	r3, #0
 80055c0:	d026      	beq.n	8005610 <HAL_DMA_IRQHandler+0x7a>
 80055c2:	68bb      	ldr	r3, [r7, #8]
 80055c4:	f003 0304 	and.w	r3, r3, #4
 80055c8:	2b00      	cmp	r3, #0
 80055ca:	d021      	beq.n	8005610 <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80055cc:	687b      	ldr	r3, [r7, #4]
 80055ce:	681b      	ldr	r3, [r3, #0]
 80055d0:	681b      	ldr	r3, [r3, #0]
 80055d2:	f003 0320 	and.w	r3, r3, #32
 80055d6:	2b00      	cmp	r3, #0
 80055d8:	d107      	bne.n	80055ea <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80055da:	687b      	ldr	r3, [r7, #4]
 80055dc:	681b      	ldr	r3, [r3, #0]
 80055de:	681a      	ldr	r2, [r3, #0]
 80055e0:	687b      	ldr	r3, [r7, #4]
 80055e2:	681b      	ldr	r3, [r3, #0]
 80055e4:	f022 0204 	bic.w	r2, r2, #4
 80055e8:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1FU));
 80055ea:	687b      	ldr	r3, [r7, #4]
 80055ec:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80055ee:	f003 021f 	and.w	r2, r3, #31
 80055f2:	687b      	ldr	r3, [r7, #4]
 80055f4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80055f6:	2104      	movs	r1, #4
 80055f8:	fa01 f202 	lsl.w	r2, r1, r2
 80055fc:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 80055fe:	687b      	ldr	r3, [r7, #4]
 8005600:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005602:	2b00      	cmp	r3, #0
 8005604:	d071      	beq.n	80056ea <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8005606:	687b      	ldr	r3, [r7, #4]
 8005608:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800560a:	6878      	ldr	r0, [r7, #4]
 800560c:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 800560e:	e06c      	b.n	80056ea <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1FU))))
 8005610:	687b      	ldr	r3, [r7, #4]
 8005612:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005614:	f003 031f 	and.w	r3, r3, #31
 8005618:	2202      	movs	r2, #2
 800561a:	409a      	lsls	r2, r3
 800561c:	68fb      	ldr	r3, [r7, #12]
 800561e:	4013      	ands	r3, r2
 8005620:	2b00      	cmp	r3, #0
 8005622:	d02e      	beq.n	8005682 <HAL_DMA_IRQHandler+0xec>
           && (0U != (source_it & DMA_IT_TC)))
 8005624:	68bb      	ldr	r3, [r7, #8]
 8005626:	f003 0302 	and.w	r3, r3, #2
 800562a:	2b00      	cmp	r3, #0
 800562c:	d029      	beq.n	8005682 <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800562e:	687b      	ldr	r3, [r7, #4]
 8005630:	681b      	ldr	r3, [r3, #0]
 8005632:	681b      	ldr	r3, [r3, #0]
 8005634:	f003 0320 	and.w	r3, r3, #32
 8005638:	2b00      	cmp	r3, #0
 800563a:	d10b      	bne.n	8005654 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 800563c:	687b      	ldr	r3, [r7, #4]
 800563e:	681b      	ldr	r3, [r3, #0]
 8005640:	681a      	ldr	r2, [r3, #0]
 8005642:	687b      	ldr	r3, [r7, #4]
 8005644:	681b      	ldr	r3, [r3, #0]
 8005646:	f022 020a 	bic.w	r2, r2, #10
 800564a:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800564c:	687b      	ldr	r3, [r7, #4]
 800564e:	2201      	movs	r2, #1
 8005650:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1FU));
 8005654:	687b      	ldr	r3, [r7, #4]
 8005656:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005658:	f003 021f 	and.w	r2, r3, #31
 800565c:	687b      	ldr	r3, [r7, #4]
 800565e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005660:	2102      	movs	r1, #2
 8005662:	fa01 f202 	lsl.w	r2, r1, r2
 8005666:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005668:	687b      	ldr	r3, [r7, #4]
 800566a:	2200      	movs	r2, #0
 800566c:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferCpltCallback != NULL)
 8005670:	687b      	ldr	r3, [r7, #4]
 8005672:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005674:	2b00      	cmp	r3, #0
 8005676:	d038      	beq.n	80056ea <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8005678:	687b      	ldr	r3, [r7, #4]
 800567a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800567c:	6878      	ldr	r0, [r7, #4]
 800567e:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 8005680:	e033      	b.n	80056ea <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Error Interrupt management **************************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1FU))))
 8005682:	687b      	ldr	r3, [r7, #4]
 8005684:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005686:	f003 031f 	and.w	r3, r3, #31
 800568a:	2208      	movs	r2, #8
 800568c:	409a      	lsls	r2, r3
 800568e:	68fb      	ldr	r3, [r7, #12]
 8005690:	4013      	ands	r3, r2
 8005692:	2b00      	cmp	r3, #0
 8005694:	d02a      	beq.n	80056ec <HAL_DMA_IRQHandler+0x156>
           && (0U != (source_it & DMA_IT_TE)))
 8005696:	68bb      	ldr	r3, [r7, #8]
 8005698:	f003 0308 	and.w	r3, r3, #8
 800569c:	2b00      	cmp	r3, #0
 800569e:	d025      	beq.n	80056ec <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80056a0:	687b      	ldr	r3, [r7, #4]
 80056a2:	681b      	ldr	r3, [r3, #0]
 80056a4:	681a      	ldr	r2, [r3, #0]
 80056a6:	687b      	ldr	r3, [r7, #4]
 80056a8:	681b      	ldr	r3, [r3, #0]
 80056aa:	f022 020e 	bic.w	r2, r2, #14
 80056ae:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 80056b0:	687b      	ldr	r3, [r7, #4]
 80056b2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80056b4:	f003 021f 	and.w	r2, r3, #31
 80056b8:	687b      	ldr	r3, [r7, #4]
 80056ba:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80056bc:	2101      	movs	r1, #1
 80056be:	fa01 f202 	lsl.w	r2, r1, r2
 80056c2:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80056c4:	687b      	ldr	r3, [r7, #4]
 80056c6:	2201      	movs	r2, #1
 80056c8:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80056ca:	687b      	ldr	r3, [r7, #4]
 80056cc:	2201      	movs	r2, #1
 80056ce:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80056d2:	687b      	ldr	r3, [r7, #4]
 80056d4:	2200      	movs	r2, #0
 80056d6:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferErrorCallback != NULL)
 80056da:	687b      	ldr	r3, [r7, #4]
 80056dc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80056de:	2b00      	cmp	r3, #0
 80056e0:	d004      	beq.n	80056ec <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80056e2:	687b      	ldr	r3, [r7, #4]
 80056e4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80056e6:	6878      	ldr	r0, [r7, #4]
 80056e8:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 80056ea:	bf00      	nop
 80056ec:	bf00      	nop
}
 80056ee:	3710      	adds	r7, #16
 80056f0:	46bd      	mov	sp, r7
 80056f2:	bd80      	pop	{r7, pc}

080056f4 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80056f4:	b480      	push	{r7}
 80056f6:	b085      	sub	sp, #20
 80056f8:	af00      	add	r7, sp, #0
 80056fa:	60f8      	str	r0, [r7, #12]
 80056fc:	60b9      	str	r1, [r7, #8]
 80056fe:	607a      	str	r2, [r7, #4]
 8005700:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8005702:	68fb      	ldr	r3, [r7, #12]
 8005704:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005706:	68fa      	ldr	r2, [r7, #12]
 8005708:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 800570a:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 800570c:	68fb      	ldr	r3, [r7, #12]
 800570e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005710:	2b00      	cmp	r3, #0
 8005712:	d004      	beq.n	800571e <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8005714:	68fb      	ldr	r3, [r7, #12]
 8005716:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005718:	68fa      	ldr	r2, [r7, #12]
 800571a:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 800571c:	605a      	str	r2, [r3, #4]
  }

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 800571e:	68fb      	ldr	r3, [r7, #12]
 8005720:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005722:	f003 021f 	and.w	r2, r3, #31
 8005726:	68fb      	ldr	r3, [r7, #12]
 8005728:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800572a:	2101      	movs	r1, #1
 800572c:	fa01 f202 	lsl.w	r2, r1, r2
 8005730:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8005732:	68fb      	ldr	r3, [r7, #12]
 8005734:	681b      	ldr	r3, [r3, #0]
 8005736:	683a      	ldr	r2, [r7, #0]
 8005738:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800573a:	68fb      	ldr	r3, [r7, #12]
 800573c:	689b      	ldr	r3, [r3, #8]
 800573e:	2b10      	cmp	r3, #16
 8005740:	d108      	bne.n	8005754 <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8005742:	68fb      	ldr	r3, [r7, #12]
 8005744:	681b      	ldr	r3, [r3, #0]
 8005746:	687a      	ldr	r2, [r7, #4]
 8005748:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 800574a:	68fb      	ldr	r3, [r7, #12]
 800574c:	681b      	ldr	r3, [r3, #0]
 800574e:	68ba      	ldr	r2, [r7, #8]
 8005750:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8005752:	e007      	b.n	8005764 <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 8005754:	68fb      	ldr	r3, [r7, #12]
 8005756:	681b      	ldr	r3, [r3, #0]
 8005758:	68ba      	ldr	r2, [r7, #8]
 800575a:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 800575c:	68fb      	ldr	r3, [r7, #12]
 800575e:	681b      	ldr	r3, [r3, #0]
 8005760:	687a      	ldr	r2, [r7, #4]
 8005762:	60da      	str	r2, [r3, #12]
}
 8005764:	bf00      	nop
 8005766:	3714      	adds	r7, #20
 8005768:	46bd      	mov	sp, r7
 800576a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800576e:	4770      	bx	lr

08005770 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma        pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8005770:	b480      	push	{r7}
 8005772:	b087      	sub	sp, #28
 8005774:	af00      	add	r7, sp, #0
 8005776:	6078      	str	r0, [r7, #4]
  uint32_t dmamux_base_addr;
  uint32_t channel_number;
  DMAMUX_Channel_TypeDef *DMAMUX1_ChannelBase;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 8005778:	687b      	ldr	r3, [r7, #4]
 800577a:	681b      	ldr	r3, [r3, #0]
 800577c:	461a      	mov	r2, r3
 800577e:	4b16      	ldr	r3, [pc, #88]	@ (80057d8 <DMA_CalcDMAMUXChannelBaseAndMask+0x68>)
 8005780:	429a      	cmp	r2, r3
 8005782:	d802      	bhi.n	800578a <DMA_CalcDMAMUXChannelBaseAndMask+0x1a>
  {
    /* DMA1 */
    DMAMUX1_ChannelBase = DMAMUX1_Channel0;
 8005784:	4b15      	ldr	r3, [pc, #84]	@ (80057dc <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 8005786:	617b      	str	r3, [r7, #20]
 8005788:	e001      	b.n	800578e <DMA_CalcDMAMUXChannelBaseAndMask+0x1e>
  {
    /* DMA2 */
#if defined (STM32G471xx) || defined (STM32G473xx) || defined (STM32G474xx) || defined (STM32G414xx) || defined (STM32G483xx) || defined (STM32G484xx) || defined (STM32G491xx) || defined (STM32G4A1xx) || defined (STM32G411xC)
    DMAMUX1_ChannelBase = DMAMUX1_Channel8;
#elif defined (STM32G411xB) || defined (STM32G431xx) || defined (STM32G441xx) || defined (STM32GBK1CB)
    DMAMUX1_ChannelBase = DMAMUX1_Channel6;
 800578a:	4b15      	ldr	r3, [pc, #84]	@ (80057e0 <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 800578c:	617b      	str	r3, [r7, #20]
#else
    DMAMUX1_ChannelBase = DMAMUX1_Channel7;
#endif /* STM32G4x1xx) */
  }
  dmamux_base_addr = (uint32_t)DMAMUX1_ChannelBase;
 800578e:	697b      	ldr	r3, [r7, #20]
 8005790:	613b      	str	r3, [r7, #16]
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 8005792:	687b      	ldr	r3, [r7, #4]
 8005794:	681b      	ldr	r3, [r3, #0]
 8005796:	b2db      	uxtb	r3, r3
 8005798:	3b08      	subs	r3, #8
 800579a:	4a12      	ldr	r2, [pc, #72]	@ (80057e4 <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 800579c:	fba2 2303 	umull	r2, r3, r2, r3
 80057a0:	091b      	lsrs	r3, r3, #4
 80057a2:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)(dmamux_base_addr + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 80057a4:	687b      	ldr	r3, [r7, #4]
 80057a6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80057a8:	089b      	lsrs	r3, r3, #2
 80057aa:	009a      	lsls	r2, r3, #2
 80057ac:	693b      	ldr	r3, [r7, #16]
 80057ae:	4413      	add	r3, r2
 80057b0:	461a      	mov	r2, r3
 80057b2:	687b      	ldr	r3, [r7, #4]
 80057b4:	649a      	str	r2, [r3, #72]	@ 0x48
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 80057b6:	687b      	ldr	r3, [r7, #4]
 80057b8:	4a0b      	ldr	r2, [pc, #44]	@ (80057e8 <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 80057ba:	64da      	str	r2, [r3, #76]	@ 0x4c
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 80057bc:	68fb      	ldr	r3, [r7, #12]
 80057be:	f003 031f 	and.w	r3, r3, #31
 80057c2:	2201      	movs	r2, #1
 80057c4:	409a      	lsls	r2, r3
 80057c6:	687b      	ldr	r3, [r7, #4]
 80057c8:	651a      	str	r2, [r3, #80]	@ 0x50
}
 80057ca:	bf00      	nop
 80057cc:	371c      	adds	r7, #28
 80057ce:	46bd      	mov	sp, r7
 80057d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057d4:	4770      	bx	lr
 80057d6:	bf00      	nop
 80057d8:	40020407 	.word	0x40020407
 80057dc:	40020800 	.word	0x40020800
 80057e0:	40020820 	.word	0x40020820
 80057e4:	cccccccd 	.word	0xcccccccd
 80057e8:	40020880 	.word	0x40020880

080057ec <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80057ec:	b480      	push	{r7}
 80057ee:	b085      	sub	sp, #20
 80057f0:	af00      	add	r7, sp, #0
 80057f2:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 80057f4:	687b      	ldr	r3, [r7, #4]
 80057f6:	685b      	ldr	r3, [r3, #4]
 80057f8:	b2db      	uxtb	r3, r3
 80057fa:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 80057fc:	68fa      	ldr	r2, [r7, #12]
 80057fe:	4b0b      	ldr	r3, [pc, #44]	@ (800582c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 8005800:	4413      	add	r3, r2
 8005802:	009b      	lsls	r3, r3, #2
 8005804:	461a      	mov	r2, r3
 8005806:	687b      	ldr	r3, [r7, #4]
 8005808:	655a      	str	r2, [r3, #84]	@ 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 800580a:	687b      	ldr	r3, [r7, #4]
 800580c:	4a08      	ldr	r2, [pc, #32]	@ (8005830 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 800580e:	659a      	str	r2, [r3, #88]	@ 0x58

  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x1FU);
 8005810:	68fb      	ldr	r3, [r7, #12]
 8005812:	3b01      	subs	r3, #1
 8005814:	f003 031f 	and.w	r3, r3, #31
 8005818:	2201      	movs	r2, #1
 800581a:	409a      	lsls	r2, r3
 800581c:	687b      	ldr	r3, [r7, #4]
 800581e:	65da      	str	r2, [r3, #92]	@ 0x5c
}
 8005820:	bf00      	nop
 8005822:	3714      	adds	r7, #20
 8005824:	46bd      	mov	sp, r7
 8005826:	f85d 7b04 	ldr.w	r7, [sp], #4
 800582a:	4770      	bx	lr
 800582c:	1000823f 	.word	0x1000823f
 8005830:	40020940 	.word	0x40020940

08005834 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8005834:	b480      	push	{r7}
 8005836:	b087      	sub	sp, #28
 8005838:	af00      	add	r7, sp, #0
 800583a:	6078      	str	r0, [r7, #4]
 800583c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 800583e:	2300      	movs	r3, #0
 8005840:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 8005842:	e15a      	b.n	8005afa <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8005844:	683b      	ldr	r3, [r7, #0]
 8005846:	681a      	ldr	r2, [r3, #0]
 8005848:	2101      	movs	r1, #1
 800584a:	697b      	ldr	r3, [r7, #20]
 800584c:	fa01 f303 	lsl.w	r3, r1, r3
 8005850:	4013      	ands	r3, r2
 8005852:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8005854:	68fb      	ldr	r3, [r7, #12]
 8005856:	2b00      	cmp	r3, #0
 8005858:	f000 814c 	beq.w	8005af4 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 800585c:	683b      	ldr	r3, [r7, #0]
 800585e:	685b      	ldr	r3, [r3, #4]
 8005860:	f003 0303 	and.w	r3, r3, #3
 8005864:	2b01      	cmp	r3, #1
 8005866:	d005      	beq.n	8005874 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8005868:	683b      	ldr	r3, [r7, #0]
 800586a:	685b      	ldr	r3, [r3, #4]
 800586c:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8005870:	2b02      	cmp	r3, #2
 8005872:	d130      	bne.n	80058d6 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8005874:	687b      	ldr	r3, [r7, #4]
 8005876:	689b      	ldr	r3, [r3, #8]
 8005878:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800587a:	697b      	ldr	r3, [r7, #20]
 800587c:	005b      	lsls	r3, r3, #1
 800587e:	2203      	movs	r2, #3
 8005880:	fa02 f303 	lsl.w	r3, r2, r3
 8005884:	43db      	mvns	r3, r3
 8005886:	693a      	ldr	r2, [r7, #16]
 8005888:	4013      	ands	r3, r2
 800588a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800588c:	683b      	ldr	r3, [r7, #0]
 800588e:	68da      	ldr	r2, [r3, #12]
 8005890:	697b      	ldr	r3, [r7, #20]
 8005892:	005b      	lsls	r3, r3, #1
 8005894:	fa02 f303 	lsl.w	r3, r2, r3
 8005898:	693a      	ldr	r2, [r7, #16]
 800589a:	4313      	orrs	r3, r2
 800589c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800589e:	687b      	ldr	r3, [r7, #4]
 80058a0:	693a      	ldr	r2, [r7, #16]
 80058a2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80058a4:	687b      	ldr	r3, [r7, #4]
 80058a6:	685b      	ldr	r3, [r3, #4]
 80058a8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80058aa:	2201      	movs	r2, #1
 80058ac:	697b      	ldr	r3, [r7, #20]
 80058ae:	fa02 f303 	lsl.w	r3, r2, r3
 80058b2:	43db      	mvns	r3, r3
 80058b4:	693a      	ldr	r2, [r7, #16]
 80058b6:	4013      	ands	r3, r2
 80058b8:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80058ba:	683b      	ldr	r3, [r7, #0]
 80058bc:	685b      	ldr	r3, [r3, #4]
 80058be:	091b      	lsrs	r3, r3, #4
 80058c0:	f003 0201 	and.w	r2, r3, #1
 80058c4:	697b      	ldr	r3, [r7, #20]
 80058c6:	fa02 f303 	lsl.w	r3, r2, r3
 80058ca:	693a      	ldr	r2, [r7, #16]
 80058cc:	4313      	orrs	r3, r2
 80058ce:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80058d0:	687b      	ldr	r3, [r7, #4]
 80058d2:	693a      	ldr	r2, [r7, #16]
 80058d4:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80058d6:	683b      	ldr	r3, [r7, #0]
 80058d8:	685b      	ldr	r3, [r3, #4]
 80058da:	f003 0303 	and.w	r3, r3, #3
 80058de:	2b03      	cmp	r3, #3
 80058e0:	d017      	beq.n	8005912 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80058e2:	687b      	ldr	r3, [r7, #4]
 80058e4:	68db      	ldr	r3, [r3, #12]
 80058e6:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80058e8:	697b      	ldr	r3, [r7, #20]
 80058ea:	005b      	lsls	r3, r3, #1
 80058ec:	2203      	movs	r2, #3
 80058ee:	fa02 f303 	lsl.w	r3, r2, r3
 80058f2:	43db      	mvns	r3, r3
 80058f4:	693a      	ldr	r2, [r7, #16]
 80058f6:	4013      	ands	r3, r2
 80058f8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80058fa:	683b      	ldr	r3, [r7, #0]
 80058fc:	689a      	ldr	r2, [r3, #8]
 80058fe:	697b      	ldr	r3, [r7, #20]
 8005900:	005b      	lsls	r3, r3, #1
 8005902:	fa02 f303 	lsl.w	r3, r2, r3
 8005906:	693a      	ldr	r2, [r7, #16]
 8005908:	4313      	orrs	r3, r2
 800590a:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 800590c:	687b      	ldr	r3, [r7, #4]
 800590e:	693a      	ldr	r2, [r7, #16]
 8005910:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8005912:	683b      	ldr	r3, [r7, #0]
 8005914:	685b      	ldr	r3, [r3, #4]
 8005916:	f003 0303 	and.w	r3, r3, #3
 800591a:	2b02      	cmp	r3, #2
 800591c:	d123      	bne.n	8005966 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800591e:	697b      	ldr	r3, [r7, #20]
 8005920:	08da      	lsrs	r2, r3, #3
 8005922:	687b      	ldr	r3, [r7, #4]
 8005924:	3208      	adds	r2, #8
 8005926:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800592a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 800592c:	697b      	ldr	r3, [r7, #20]
 800592e:	f003 0307 	and.w	r3, r3, #7
 8005932:	009b      	lsls	r3, r3, #2
 8005934:	220f      	movs	r2, #15
 8005936:	fa02 f303 	lsl.w	r3, r2, r3
 800593a:	43db      	mvns	r3, r3
 800593c:	693a      	ldr	r2, [r7, #16]
 800593e:	4013      	ands	r3, r2
 8005940:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8005942:	683b      	ldr	r3, [r7, #0]
 8005944:	691a      	ldr	r2, [r3, #16]
 8005946:	697b      	ldr	r3, [r7, #20]
 8005948:	f003 0307 	and.w	r3, r3, #7
 800594c:	009b      	lsls	r3, r3, #2
 800594e:	fa02 f303 	lsl.w	r3, r2, r3
 8005952:	693a      	ldr	r2, [r7, #16]
 8005954:	4313      	orrs	r3, r2
 8005956:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8005958:	697b      	ldr	r3, [r7, #20]
 800595a:	08da      	lsrs	r2, r3, #3
 800595c:	687b      	ldr	r3, [r7, #4]
 800595e:	3208      	adds	r2, #8
 8005960:	6939      	ldr	r1, [r7, #16]
 8005962:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8005966:	687b      	ldr	r3, [r7, #4]
 8005968:	681b      	ldr	r3, [r3, #0]
 800596a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 800596c:	697b      	ldr	r3, [r7, #20]
 800596e:	005b      	lsls	r3, r3, #1
 8005970:	2203      	movs	r2, #3
 8005972:	fa02 f303 	lsl.w	r3, r2, r3
 8005976:	43db      	mvns	r3, r3
 8005978:	693a      	ldr	r2, [r7, #16]
 800597a:	4013      	ands	r3, r2
 800597c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800597e:	683b      	ldr	r3, [r7, #0]
 8005980:	685b      	ldr	r3, [r3, #4]
 8005982:	f003 0203 	and.w	r2, r3, #3
 8005986:	697b      	ldr	r3, [r7, #20]
 8005988:	005b      	lsls	r3, r3, #1
 800598a:	fa02 f303 	lsl.w	r3, r2, r3
 800598e:	693a      	ldr	r2, [r7, #16]
 8005990:	4313      	orrs	r3, r2
 8005992:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8005994:	687b      	ldr	r3, [r7, #4]
 8005996:	693a      	ldr	r2, [r7, #16]
 8005998:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800599a:	683b      	ldr	r3, [r7, #0]
 800599c:	685b      	ldr	r3, [r3, #4]
 800599e:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80059a2:	2b00      	cmp	r3, #0
 80059a4:	f000 80a6 	beq.w	8005af4 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80059a8:	4b5b      	ldr	r3, [pc, #364]	@ (8005b18 <HAL_GPIO_Init+0x2e4>)
 80059aa:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80059ac:	4a5a      	ldr	r2, [pc, #360]	@ (8005b18 <HAL_GPIO_Init+0x2e4>)
 80059ae:	f043 0301 	orr.w	r3, r3, #1
 80059b2:	6613      	str	r3, [r2, #96]	@ 0x60
 80059b4:	4b58      	ldr	r3, [pc, #352]	@ (8005b18 <HAL_GPIO_Init+0x2e4>)
 80059b6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80059b8:	f003 0301 	and.w	r3, r3, #1
 80059bc:	60bb      	str	r3, [r7, #8]
 80059be:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 80059c0:	4a56      	ldr	r2, [pc, #344]	@ (8005b1c <HAL_GPIO_Init+0x2e8>)
 80059c2:	697b      	ldr	r3, [r7, #20]
 80059c4:	089b      	lsrs	r3, r3, #2
 80059c6:	3302      	adds	r3, #2
 80059c8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80059cc:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 80059ce:	697b      	ldr	r3, [r7, #20]
 80059d0:	f003 0303 	and.w	r3, r3, #3
 80059d4:	009b      	lsls	r3, r3, #2
 80059d6:	220f      	movs	r2, #15
 80059d8:	fa02 f303 	lsl.w	r3, r2, r3
 80059dc:	43db      	mvns	r3, r3
 80059de:	693a      	ldr	r2, [r7, #16]
 80059e0:	4013      	ands	r3, r2
 80059e2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80059e4:	687b      	ldr	r3, [r7, #4]
 80059e6:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 80059ea:	d01f      	beq.n	8005a2c <HAL_GPIO_Init+0x1f8>
 80059ec:	687b      	ldr	r3, [r7, #4]
 80059ee:	4a4c      	ldr	r2, [pc, #304]	@ (8005b20 <HAL_GPIO_Init+0x2ec>)
 80059f0:	4293      	cmp	r3, r2
 80059f2:	d019      	beq.n	8005a28 <HAL_GPIO_Init+0x1f4>
 80059f4:	687b      	ldr	r3, [r7, #4]
 80059f6:	4a4b      	ldr	r2, [pc, #300]	@ (8005b24 <HAL_GPIO_Init+0x2f0>)
 80059f8:	4293      	cmp	r3, r2
 80059fa:	d013      	beq.n	8005a24 <HAL_GPIO_Init+0x1f0>
 80059fc:	687b      	ldr	r3, [r7, #4]
 80059fe:	4a4a      	ldr	r2, [pc, #296]	@ (8005b28 <HAL_GPIO_Init+0x2f4>)
 8005a00:	4293      	cmp	r3, r2
 8005a02:	d00d      	beq.n	8005a20 <HAL_GPIO_Init+0x1ec>
 8005a04:	687b      	ldr	r3, [r7, #4]
 8005a06:	4a49      	ldr	r2, [pc, #292]	@ (8005b2c <HAL_GPIO_Init+0x2f8>)
 8005a08:	4293      	cmp	r3, r2
 8005a0a:	d007      	beq.n	8005a1c <HAL_GPIO_Init+0x1e8>
 8005a0c:	687b      	ldr	r3, [r7, #4]
 8005a0e:	4a48      	ldr	r2, [pc, #288]	@ (8005b30 <HAL_GPIO_Init+0x2fc>)
 8005a10:	4293      	cmp	r3, r2
 8005a12:	d101      	bne.n	8005a18 <HAL_GPIO_Init+0x1e4>
 8005a14:	2305      	movs	r3, #5
 8005a16:	e00a      	b.n	8005a2e <HAL_GPIO_Init+0x1fa>
 8005a18:	2306      	movs	r3, #6
 8005a1a:	e008      	b.n	8005a2e <HAL_GPIO_Init+0x1fa>
 8005a1c:	2304      	movs	r3, #4
 8005a1e:	e006      	b.n	8005a2e <HAL_GPIO_Init+0x1fa>
 8005a20:	2303      	movs	r3, #3
 8005a22:	e004      	b.n	8005a2e <HAL_GPIO_Init+0x1fa>
 8005a24:	2302      	movs	r3, #2
 8005a26:	e002      	b.n	8005a2e <HAL_GPIO_Init+0x1fa>
 8005a28:	2301      	movs	r3, #1
 8005a2a:	e000      	b.n	8005a2e <HAL_GPIO_Init+0x1fa>
 8005a2c:	2300      	movs	r3, #0
 8005a2e:	697a      	ldr	r2, [r7, #20]
 8005a30:	f002 0203 	and.w	r2, r2, #3
 8005a34:	0092      	lsls	r2, r2, #2
 8005a36:	4093      	lsls	r3, r2
 8005a38:	693a      	ldr	r2, [r7, #16]
 8005a3a:	4313      	orrs	r3, r2
 8005a3c:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8005a3e:	4937      	ldr	r1, [pc, #220]	@ (8005b1c <HAL_GPIO_Init+0x2e8>)
 8005a40:	697b      	ldr	r3, [r7, #20]
 8005a42:	089b      	lsrs	r3, r3, #2
 8005a44:	3302      	adds	r3, #2
 8005a46:	693a      	ldr	r2, [r7, #16]
 8005a48:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8005a4c:	4b39      	ldr	r3, [pc, #228]	@ (8005b34 <HAL_GPIO_Init+0x300>)
 8005a4e:	689b      	ldr	r3, [r3, #8]
 8005a50:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8005a52:	68fb      	ldr	r3, [r7, #12]
 8005a54:	43db      	mvns	r3, r3
 8005a56:	693a      	ldr	r2, [r7, #16]
 8005a58:	4013      	ands	r3, r2
 8005a5a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8005a5c:	683b      	ldr	r3, [r7, #0]
 8005a5e:	685b      	ldr	r3, [r3, #4]
 8005a60:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8005a64:	2b00      	cmp	r3, #0
 8005a66:	d003      	beq.n	8005a70 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 8005a68:	693a      	ldr	r2, [r7, #16]
 8005a6a:	68fb      	ldr	r3, [r7, #12]
 8005a6c:	4313      	orrs	r3, r2
 8005a6e:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8005a70:	4a30      	ldr	r2, [pc, #192]	@ (8005b34 <HAL_GPIO_Init+0x300>)
 8005a72:	693b      	ldr	r3, [r7, #16]
 8005a74:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8005a76:	4b2f      	ldr	r3, [pc, #188]	@ (8005b34 <HAL_GPIO_Init+0x300>)
 8005a78:	68db      	ldr	r3, [r3, #12]
 8005a7a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8005a7c:	68fb      	ldr	r3, [r7, #12]
 8005a7e:	43db      	mvns	r3, r3
 8005a80:	693a      	ldr	r2, [r7, #16]
 8005a82:	4013      	ands	r3, r2
 8005a84:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8005a86:	683b      	ldr	r3, [r7, #0]
 8005a88:	685b      	ldr	r3, [r3, #4]
 8005a8a:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8005a8e:	2b00      	cmp	r3, #0
 8005a90:	d003      	beq.n	8005a9a <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 8005a92:	693a      	ldr	r2, [r7, #16]
 8005a94:	68fb      	ldr	r3, [r7, #12]
 8005a96:	4313      	orrs	r3, r2
 8005a98:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8005a9a:	4a26      	ldr	r2, [pc, #152]	@ (8005b34 <HAL_GPIO_Init+0x300>)
 8005a9c:	693b      	ldr	r3, [r7, #16]
 8005a9e:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 8005aa0:	4b24      	ldr	r3, [pc, #144]	@ (8005b34 <HAL_GPIO_Init+0x300>)
 8005aa2:	685b      	ldr	r3, [r3, #4]
 8005aa4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8005aa6:	68fb      	ldr	r3, [r7, #12]
 8005aa8:	43db      	mvns	r3, r3
 8005aaa:	693a      	ldr	r2, [r7, #16]
 8005aac:	4013      	ands	r3, r2
 8005aae:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8005ab0:	683b      	ldr	r3, [r7, #0]
 8005ab2:	685b      	ldr	r3, [r3, #4]
 8005ab4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005ab8:	2b00      	cmp	r3, #0
 8005aba:	d003      	beq.n	8005ac4 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8005abc:	693a      	ldr	r2, [r7, #16]
 8005abe:	68fb      	ldr	r3, [r7, #12]
 8005ac0:	4313      	orrs	r3, r2
 8005ac2:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8005ac4:	4a1b      	ldr	r2, [pc, #108]	@ (8005b34 <HAL_GPIO_Init+0x300>)
 8005ac6:	693b      	ldr	r3, [r7, #16]
 8005ac8:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8005aca:	4b1a      	ldr	r3, [pc, #104]	@ (8005b34 <HAL_GPIO_Init+0x300>)
 8005acc:	681b      	ldr	r3, [r3, #0]
 8005ace:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8005ad0:	68fb      	ldr	r3, [r7, #12]
 8005ad2:	43db      	mvns	r3, r3
 8005ad4:	693a      	ldr	r2, [r7, #16]
 8005ad6:	4013      	ands	r3, r2
 8005ad8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8005ada:	683b      	ldr	r3, [r7, #0]
 8005adc:	685b      	ldr	r3, [r3, #4]
 8005ade:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8005ae2:	2b00      	cmp	r3, #0
 8005ae4:	d003      	beq.n	8005aee <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 8005ae6:	693a      	ldr	r2, [r7, #16]
 8005ae8:	68fb      	ldr	r3, [r7, #12]
 8005aea:	4313      	orrs	r3, r2
 8005aec:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8005aee:	4a11      	ldr	r2, [pc, #68]	@ (8005b34 <HAL_GPIO_Init+0x300>)
 8005af0:	693b      	ldr	r3, [r7, #16]
 8005af2:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8005af4:	697b      	ldr	r3, [r7, #20]
 8005af6:	3301      	adds	r3, #1
 8005af8:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 8005afa:	683b      	ldr	r3, [r7, #0]
 8005afc:	681a      	ldr	r2, [r3, #0]
 8005afe:	697b      	ldr	r3, [r7, #20]
 8005b00:	fa22 f303 	lsr.w	r3, r2, r3
 8005b04:	2b00      	cmp	r3, #0
 8005b06:	f47f ae9d 	bne.w	8005844 <HAL_GPIO_Init+0x10>
  }
}
 8005b0a:	bf00      	nop
 8005b0c:	bf00      	nop
 8005b0e:	371c      	adds	r7, #28
 8005b10:	46bd      	mov	sp, r7
 8005b12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b16:	4770      	bx	lr
 8005b18:	40021000 	.word	0x40021000
 8005b1c:	40010000 	.word	0x40010000
 8005b20:	48000400 	.word	0x48000400
 8005b24:	48000800 	.word	0x48000800
 8005b28:	48000c00 	.word	0x48000c00
 8005b2c:	48001000 	.word	0x48001000
 8005b30:	48001400 	.word	0x48001400
 8005b34:	40010400 	.word	0x40010400

08005b38 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8005b38:	b480      	push	{r7}
 8005b3a:	b083      	sub	sp, #12
 8005b3c:	af00      	add	r7, sp, #0
 8005b3e:	6078      	str	r0, [r7, #4]
 8005b40:	460b      	mov	r3, r1
 8005b42:	807b      	strh	r3, [r7, #2]
 8005b44:	4613      	mov	r3, r2
 8005b46:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8005b48:	787b      	ldrb	r3, [r7, #1]
 8005b4a:	2b00      	cmp	r3, #0
 8005b4c:	d003      	beq.n	8005b56 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8005b4e:	887a      	ldrh	r2, [r7, #2]
 8005b50:	687b      	ldr	r3, [r7, #4]
 8005b52:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8005b54:	e002      	b.n	8005b5c <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8005b56:	887a      	ldrh	r2, [r7, #2]
 8005b58:	687b      	ldr	r3, [r7, #4]
 8005b5a:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8005b5c:	bf00      	nop
 8005b5e:	370c      	adds	r7, #12
 8005b60:	46bd      	mov	sp, r7
 8005b62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b66:	4770      	bx	lr

08005b68 <HAL_GPIO_TogglePin>:
  * @param  GPIO_Pin specifies the pin to be toggled.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8005b68:	b480      	push	{r7}
 8005b6a:	b085      	sub	sp, #20
 8005b6c:	af00      	add	r7, sp, #0
 8005b6e:	6078      	str	r0, [r7, #4]
 8005b70:	460b      	mov	r3, r1
 8005b72:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8005b74:	687b      	ldr	r3, [r7, #4]
 8005b76:	695b      	ldr	r3, [r3, #20]
 8005b78:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8005b7a:	887a      	ldrh	r2, [r7, #2]
 8005b7c:	68fb      	ldr	r3, [r7, #12]
 8005b7e:	4013      	ands	r3, r2
 8005b80:	041a      	lsls	r2, r3, #16
 8005b82:	68fb      	ldr	r3, [r7, #12]
 8005b84:	43d9      	mvns	r1, r3
 8005b86:	887b      	ldrh	r3, [r7, #2]
 8005b88:	400b      	ands	r3, r1
 8005b8a:	431a      	orrs	r2, r3
 8005b8c:	687b      	ldr	r3, [r7, #4]
 8005b8e:	619a      	str	r2, [r3, #24]
}
 8005b90:	bf00      	nop
 8005b92:	3714      	adds	r7, #20
 8005b94:	46bd      	mov	sp, r7
 8005b96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b9a:	4770      	bx	lr

08005b9c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8005b9c:	b580      	push	{r7, lr}
 8005b9e:	b082      	sub	sp, #8
 8005ba0:	af00      	add	r7, sp, #0
 8005ba2:	4603      	mov	r3, r0
 8005ba4:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8005ba6:	4b08      	ldr	r3, [pc, #32]	@ (8005bc8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8005ba8:	695a      	ldr	r2, [r3, #20]
 8005baa:	88fb      	ldrh	r3, [r7, #6]
 8005bac:	4013      	ands	r3, r2
 8005bae:	2b00      	cmp	r3, #0
 8005bb0:	d006      	beq.n	8005bc0 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8005bb2:	4a05      	ldr	r2, [pc, #20]	@ (8005bc8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8005bb4:	88fb      	ldrh	r3, [r7, #6]
 8005bb6:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8005bb8:	88fb      	ldrh	r3, [r7, #6]
 8005bba:	4618      	mov	r0, r3
 8005bbc:	f000 f806 	bl	8005bcc <HAL_GPIO_EXTI_Callback>
  }
}
 8005bc0:	bf00      	nop
 8005bc2:	3708      	adds	r7, #8
 8005bc4:	46bd      	mov	sp, r7
 8005bc6:	bd80      	pop	{r7, pc}
 8005bc8:	40010400 	.word	0x40010400

08005bcc <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8005bcc:	b480      	push	{r7}
 8005bce:	b083      	sub	sp, #12
 8005bd0:	af00      	add	r7, sp, #0
 8005bd2:	4603      	mov	r3, r0
 8005bd4:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8005bd6:	bf00      	nop
 8005bd8:	370c      	adds	r7, #12
 8005bda:	46bd      	mov	sp, r7
 8005bdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005be0:	4770      	bx	lr
	...

08005be4 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8005be4:	b480      	push	{r7}
 8005be6:	b085      	sub	sp, #20
 8005be8:	af00      	add	r7, sp, #0
 8005bea:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8005bec:	687b      	ldr	r3, [r7, #4]
 8005bee:	2b00      	cmp	r3, #0
 8005bf0:	d141      	bne.n	8005c76 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8005bf2:	4b4b      	ldr	r3, [pc, #300]	@ (8005d20 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005bf4:	681b      	ldr	r3, [r3, #0]
 8005bf6:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8005bfa:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005bfe:	d131      	bne.n	8005c64 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8005c00:	4b47      	ldr	r3, [pc, #284]	@ (8005d20 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005c02:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005c06:	4a46      	ldr	r2, [pc, #280]	@ (8005d20 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005c08:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8005c0c:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8005c10:	4b43      	ldr	r3, [pc, #268]	@ (8005d20 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005c12:	681b      	ldr	r3, [r3, #0]
 8005c14:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8005c18:	4a41      	ldr	r2, [pc, #260]	@ (8005d20 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005c1a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8005c1e:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8005c20:	4b40      	ldr	r3, [pc, #256]	@ (8005d24 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8005c22:	681b      	ldr	r3, [r3, #0]
 8005c24:	2232      	movs	r2, #50	@ 0x32
 8005c26:	fb02 f303 	mul.w	r3, r2, r3
 8005c2a:	4a3f      	ldr	r2, [pc, #252]	@ (8005d28 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8005c2c:	fba2 2303 	umull	r2, r3, r2, r3
 8005c30:	0c9b      	lsrs	r3, r3, #18
 8005c32:	3301      	adds	r3, #1
 8005c34:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8005c36:	e002      	b.n	8005c3e <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8005c38:	68fb      	ldr	r3, [r7, #12]
 8005c3a:	3b01      	subs	r3, #1
 8005c3c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8005c3e:	4b38      	ldr	r3, [pc, #224]	@ (8005d20 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005c40:	695b      	ldr	r3, [r3, #20]
 8005c42:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005c46:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005c4a:	d102      	bne.n	8005c52 <HAL_PWREx_ControlVoltageScaling+0x6e>
 8005c4c:	68fb      	ldr	r3, [r7, #12]
 8005c4e:	2b00      	cmp	r3, #0
 8005c50:	d1f2      	bne.n	8005c38 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8005c52:	4b33      	ldr	r3, [pc, #204]	@ (8005d20 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005c54:	695b      	ldr	r3, [r3, #20]
 8005c56:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005c5a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005c5e:	d158      	bne.n	8005d12 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8005c60:	2303      	movs	r3, #3
 8005c62:	e057      	b.n	8005d14 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8005c64:	4b2e      	ldr	r3, [pc, #184]	@ (8005d20 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005c66:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005c6a:	4a2d      	ldr	r2, [pc, #180]	@ (8005d20 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005c6c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8005c70:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8005c74:	e04d      	b.n	8005d12 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8005c76:	687b      	ldr	r3, [r7, #4]
 8005c78:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005c7c:	d141      	bne.n	8005d02 <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8005c7e:	4b28      	ldr	r3, [pc, #160]	@ (8005d20 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005c80:	681b      	ldr	r3, [r3, #0]
 8005c82:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8005c86:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005c8a:	d131      	bne.n	8005cf0 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8005c8c:	4b24      	ldr	r3, [pc, #144]	@ (8005d20 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005c8e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005c92:	4a23      	ldr	r2, [pc, #140]	@ (8005d20 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005c94:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005c98:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8005c9c:	4b20      	ldr	r3, [pc, #128]	@ (8005d20 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005c9e:	681b      	ldr	r3, [r3, #0]
 8005ca0:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8005ca4:	4a1e      	ldr	r2, [pc, #120]	@ (8005d20 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005ca6:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8005caa:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8005cac:	4b1d      	ldr	r3, [pc, #116]	@ (8005d24 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8005cae:	681b      	ldr	r3, [r3, #0]
 8005cb0:	2232      	movs	r2, #50	@ 0x32
 8005cb2:	fb02 f303 	mul.w	r3, r2, r3
 8005cb6:	4a1c      	ldr	r2, [pc, #112]	@ (8005d28 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8005cb8:	fba2 2303 	umull	r2, r3, r2, r3
 8005cbc:	0c9b      	lsrs	r3, r3, #18
 8005cbe:	3301      	adds	r3, #1
 8005cc0:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8005cc2:	e002      	b.n	8005cca <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8005cc4:	68fb      	ldr	r3, [r7, #12]
 8005cc6:	3b01      	subs	r3, #1
 8005cc8:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8005cca:	4b15      	ldr	r3, [pc, #84]	@ (8005d20 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005ccc:	695b      	ldr	r3, [r3, #20]
 8005cce:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005cd2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005cd6:	d102      	bne.n	8005cde <HAL_PWREx_ControlVoltageScaling+0xfa>
 8005cd8:	68fb      	ldr	r3, [r7, #12]
 8005cda:	2b00      	cmp	r3, #0
 8005cdc:	d1f2      	bne.n	8005cc4 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8005cde:	4b10      	ldr	r3, [pc, #64]	@ (8005d20 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005ce0:	695b      	ldr	r3, [r3, #20]
 8005ce2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005ce6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005cea:	d112      	bne.n	8005d12 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8005cec:	2303      	movs	r3, #3
 8005cee:	e011      	b.n	8005d14 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8005cf0:	4b0b      	ldr	r3, [pc, #44]	@ (8005d20 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005cf2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005cf6:	4a0a      	ldr	r2, [pc, #40]	@ (8005d20 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005cf8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005cfc:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8005d00:	e007      	b.n	8005d12 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8005d02:	4b07      	ldr	r3, [pc, #28]	@ (8005d20 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005d04:	681b      	ldr	r3, [r3, #0]
 8005d06:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8005d0a:	4a05      	ldr	r2, [pc, #20]	@ (8005d20 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005d0c:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8005d10:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 8005d12:	2300      	movs	r3, #0
}
 8005d14:	4618      	mov	r0, r3
 8005d16:	3714      	adds	r7, #20
 8005d18:	46bd      	mov	sp, r7
 8005d1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d1e:	4770      	bx	lr
 8005d20:	40007000 	.word	0x40007000
 8005d24:	20000008 	.word	0x20000008
 8005d28:	431bde83 	.word	0x431bde83

08005d2c <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 8005d2c:	b480      	push	{r7}
 8005d2e:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 8005d30:	4b05      	ldr	r3, [pc, #20]	@ (8005d48 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8005d32:	689b      	ldr	r3, [r3, #8]
 8005d34:	4a04      	ldr	r2, [pc, #16]	@ (8005d48 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8005d36:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8005d3a:	6093      	str	r3, [r2, #8]
}
 8005d3c:	bf00      	nop
 8005d3e:	46bd      	mov	sp, r7
 8005d40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d44:	4770      	bx	lr
 8005d46:	bf00      	nop
 8005d48:	40007000 	.word	0x40007000

08005d4c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005d4c:	b580      	push	{r7, lr}
 8005d4e:	b088      	sub	sp, #32
 8005d50:	af00      	add	r7, sp, #0
 8005d52:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8005d54:	687b      	ldr	r3, [r7, #4]
 8005d56:	2b00      	cmp	r3, #0
 8005d58:	d101      	bne.n	8005d5e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8005d5a:	2301      	movs	r3, #1
 8005d5c:	e2fe      	b.n	800635c <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005d5e:	687b      	ldr	r3, [r7, #4]
 8005d60:	681b      	ldr	r3, [r3, #0]
 8005d62:	f003 0301 	and.w	r3, r3, #1
 8005d66:	2b00      	cmp	r3, #0
 8005d68:	d075      	beq.n	8005e56 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005d6a:	4b97      	ldr	r3, [pc, #604]	@ (8005fc8 <HAL_RCC_OscConfig+0x27c>)
 8005d6c:	689b      	ldr	r3, [r3, #8]
 8005d6e:	f003 030c 	and.w	r3, r3, #12
 8005d72:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8005d74:	4b94      	ldr	r3, [pc, #592]	@ (8005fc8 <HAL_RCC_OscConfig+0x27c>)
 8005d76:	68db      	ldr	r3, [r3, #12]
 8005d78:	f003 0303 	and.w	r3, r3, #3
 8005d7c:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 8005d7e:	69bb      	ldr	r3, [r7, #24]
 8005d80:	2b0c      	cmp	r3, #12
 8005d82:	d102      	bne.n	8005d8a <HAL_RCC_OscConfig+0x3e>
 8005d84:	697b      	ldr	r3, [r7, #20]
 8005d86:	2b03      	cmp	r3, #3
 8005d88:	d002      	beq.n	8005d90 <HAL_RCC_OscConfig+0x44>
 8005d8a:	69bb      	ldr	r3, [r7, #24]
 8005d8c:	2b08      	cmp	r3, #8
 8005d8e:	d10b      	bne.n	8005da8 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005d90:	4b8d      	ldr	r3, [pc, #564]	@ (8005fc8 <HAL_RCC_OscConfig+0x27c>)
 8005d92:	681b      	ldr	r3, [r3, #0]
 8005d94:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005d98:	2b00      	cmp	r3, #0
 8005d9a:	d05b      	beq.n	8005e54 <HAL_RCC_OscConfig+0x108>
 8005d9c:	687b      	ldr	r3, [r7, #4]
 8005d9e:	685b      	ldr	r3, [r3, #4]
 8005da0:	2b00      	cmp	r3, #0
 8005da2:	d157      	bne.n	8005e54 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8005da4:	2301      	movs	r3, #1
 8005da6:	e2d9      	b.n	800635c <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005da8:	687b      	ldr	r3, [r7, #4]
 8005daa:	685b      	ldr	r3, [r3, #4]
 8005dac:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005db0:	d106      	bne.n	8005dc0 <HAL_RCC_OscConfig+0x74>
 8005db2:	4b85      	ldr	r3, [pc, #532]	@ (8005fc8 <HAL_RCC_OscConfig+0x27c>)
 8005db4:	681b      	ldr	r3, [r3, #0]
 8005db6:	4a84      	ldr	r2, [pc, #528]	@ (8005fc8 <HAL_RCC_OscConfig+0x27c>)
 8005db8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005dbc:	6013      	str	r3, [r2, #0]
 8005dbe:	e01d      	b.n	8005dfc <HAL_RCC_OscConfig+0xb0>
 8005dc0:	687b      	ldr	r3, [r7, #4]
 8005dc2:	685b      	ldr	r3, [r3, #4]
 8005dc4:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8005dc8:	d10c      	bne.n	8005de4 <HAL_RCC_OscConfig+0x98>
 8005dca:	4b7f      	ldr	r3, [pc, #508]	@ (8005fc8 <HAL_RCC_OscConfig+0x27c>)
 8005dcc:	681b      	ldr	r3, [r3, #0]
 8005dce:	4a7e      	ldr	r2, [pc, #504]	@ (8005fc8 <HAL_RCC_OscConfig+0x27c>)
 8005dd0:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8005dd4:	6013      	str	r3, [r2, #0]
 8005dd6:	4b7c      	ldr	r3, [pc, #496]	@ (8005fc8 <HAL_RCC_OscConfig+0x27c>)
 8005dd8:	681b      	ldr	r3, [r3, #0]
 8005dda:	4a7b      	ldr	r2, [pc, #492]	@ (8005fc8 <HAL_RCC_OscConfig+0x27c>)
 8005ddc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005de0:	6013      	str	r3, [r2, #0]
 8005de2:	e00b      	b.n	8005dfc <HAL_RCC_OscConfig+0xb0>
 8005de4:	4b78      	ldr	r3, [pc, #480]	@ (8005fc8 <HAL_RCC_OscConfig+0x27c>)
 8005de6:	681b      	ldr	r3, [r3, #0]
 8005de8:	4a77      	ldr	r2, [pc, #476]	@ (8005fc8 <HAL_RCC_OscConfig+0x27c>)
 8005dea:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005dee:	6013      	str	r3, [r2, #0]
 8005df0:	4b75      	ldr	r3, [pc, #468]	@ (8005fc8 <HAL_RCC_OscConfig+0x27c>)
 8005df2:	681b      	ldr	r3, [r3, #0]
 8005df4:	4a74      	ldr	r2, [pc, #464]	@ (8005fc8 <HAL_RCC_OscConfig+0x27c>)
 8005df6:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8005dfa:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8005dfc:	687b      	ldr	r3, [r7, #4]
 8005dfe:	685b      	ldr	r3, [r3, #4]
 8005e00:	2b00      	cmp	r3, #0
 8005e02:	d013      	beq.n	8005e2c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005e04:	f7ff f838 	bl	8004e78 <HAL_GetTick>
 8005e08:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8005e0a:	e008      	b.n	8005e1e <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005e0c:	f7ff f834 	bl	8004e78 <HAL_GetTick>
 8005e10:	4602      	mov	r2, r0
 8005e12:	693b      	ldr	r3, [r7, #16]
 8005e14:	1ad3      	subs	r3, r2, r3
 8005e16:	2b64      	cmp	r3, #100	@ 0x64
 8005e18:	d901      	bls.n	8005e1e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8005e1a:	2303      	movs	r3, #3
 8005e1c:	e29e      	b.n	800635c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8005e1e:	4b6a      	ldr	r3, [pc, #424]	@ (8005fc8 <HAL_RCC_OscConfig+0x27c>)
 8005e20:	681b      	ldr	r3, [r3, #0]
 8005e22:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005e26:	2b00      	cmp	r3, #0
 8005e28:	d0f0      	beq.n	8005e0c <HAL_RCC_OscConfig+0xc0>
 8005e2a:	e014      	b.n	8005e56 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005e2c:	f7ff f824 	bl	8004e78 <HAL_GetTick>
 8005e30:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8005e32:	e008      	b.n	8005e46 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005e34:	f7ff f820 	bl	8004e78 <HAL_GetTick>
 8005e38:	4602      	mov	r2, r0
 8005e3a:	693b      	ldr	r3, [r7, #16]
 8005e3c:	1ad3      	subs	r3, r2, r3
 8005e3e:	2b64      	cmp	r3, #100	@ 0x64
 8005e40:	d901      	bls.n	8005e46 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8005e42:	2303      	movs	r3, #3
 8005e44:	e28a      	b.n	800635c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8005e46:	4b60      	ldr	r3, [pc, #384]	@ (8005fc8 <HAL_RCC_OscConfig+0x27c>)
 8005e48:	681b      	ldr	r3, [r3, #0]
 8005e4a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005e4e:	2b00      	cmp	r3, #0
 8005e50:	d1f0      	bne.n	8005e34 <HAL_RCC_OscConfig+0xe8>
 8005e52:	e000      	b.n	8005e56 <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005e54:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005e56:	687b      	ldr	r3, [r7, #4]
 8005e58:	681b      	ldr	r3, [r3, #0]
 8005e5a:	f003 0302 	and.w	r3, r3, #2
 8005e5e:	2b00      	cmp	r3, #0
 8005e60:	d075      	beq.n	8005f4e <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005e62:	4b59      	ldr	r3, [pc, #356]	@ (8005fc8 <HAL_RCC_OscConfig+0x27c>)
 8005e64:	689b      	ldr	r3, [r3, #8]
 8005e66:	f003 030c 	and.w	r3, r3, #12
 8005e6a:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8005e6c:	4b56      	ldr	r3, [pc, #344]	@ (8005fc8 <HAL_RCC_OscConfig+0x27c>)
 8005e6e:	68db      	ldr	r3, [r3, #12]
 8005e70:	f003 0303 	and.w	r3, r3, #3
 8005e74:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 8005e76:	69bb      	ldr	r3, [r7, #24]
 8005e78:	2b0c      	cmp	r3, #12
 8005e7a:	d102      	bne.n	8005e82 <HAL_RCC_OscConfig+0x136>
 8005e7c:	697b      	ldr	r3, [r7, #20]
 8005e7e:	2b02      	cmp	r3, #2
 8005e80:	d002      	beq.n	8005e88 <HAL_RCC_OscConfig+0x13c>
 8005e82:	69bb      	ldr	r3, [r7, #24]
 8005e84:	2b04      	cmp	r3, #4
 8005e86:	d11f      	bne.n	8005ec8 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005e88:	4b4f      	ldr	r3, [pc, #316]	@ (8005fc8 <HAL_RCC_OscConfig+0x27c>)
 8005e8a:	681b      	ldr	r3, [r3, #0]
 8005e8c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005e90:	2b00      	cmp	r3, #0
 8005e92:	d005      	beq.n	8005ea0 <HAL_RCC_OscConfig+0x154>
 8005e94:	687b      	ldr	r3, [r7, #4]
 8005e96:	68db      	ldr	r3, [r3, #12]
 8005e98:	2b00      	cmp	r3, #0
 8005e9a:	d101      	bne.n	8005ea0 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 8005e9c:	2301      	movs	r3, #1
 8005e9e:	e25d      	b.n	800635c <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005ea0:	4b49      	ldr	r3, [pc, #292]	@ (8005fc8 <HAL_RCC_OscConfig+0x27c>)
 8005ea2:	685b      	ldr	r3, [r3, #4]
 8005ea4:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8005ea8:	687b      	ldr	r3, [r7, #4]
 8005eaa:	691b      	ldr	r3, [r3, #16]
 8005eac:	061b      	lsls	r3, r3, #24
 8005eae:	4946      	ldr	r1, [pc, #280]	@ (8005fc8 <HAL_RCC_OscConfig+0x27c>)
 8005eb0:	4313      	orrs	r3, r2
 8005eb2:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8005eb4:	4b45      	ldr	r3, [pc, #276]	@ (8005fcc <HAL_RCC_OscConfig+0x280>)
 8005eb6:	681b      	ldr	r3, [r3, #0]
 8005eb8:	4618      	mov	r0, r3
 8005eba:	f7fe ff91 	bl	8004de0 <HAL_InitTick>
 8005ebe:	4603      	mov	r3, r0
 8005ec0:	2b00      	cmp	r3, #0
 8005ec2:	d043      	beq.n	8005f4c <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 8005ec4:	2301      	movs	r3, #1
 8005ec6:	e249      	b.n	800635c <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8005ec8:	687b      	ldr	r3, [r7, #4]
 8005eca:	68db      	ldr	r3, [r3, #12]
 8005ecc:	2b00      	cmp	r3, #0
 8005ece:	d023      	beq.n	8005f18 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005ed0:	4b3d      	ldr	r3, [pc, #244]	@ (8005fc8 <HAL_RCC_OscConfig+0x27c>)
 8005ed2:	681b      	ldr	r3, [r3, #0]
 8005ed4:	4a3c      	ldr	r2, [pc, #240]	@ (8005fc8 <HAL_RCC_OscConfig+0x27c>)
 8005ed6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005eda:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005edc:	f7fe ffcc 	bl	8004e78 <HAL_GetTick>
 8005ee0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8005ee2:	e008      	b.n	8005ef6 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005ee4:	f7fe ffc8 	bl	8004e78 <HAL_GetTick>
 8005ee8:	4602      	mov	r2, r0
 8005eea:	693b      	ldr	r3, [r7, #16]
 8005eec:	1ad3      	subs	r3, r2, r3
 8005eee:	2b02      	cmp	r3, #2
 8005ef0:	d901      	bls.n	8005ef6 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8005ef2:	2303      	movs	r3, #3
 8005ef4:	e232      	b.n	800635c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8005ef6:	4b34      	ldr	r3, [pc, #208]	@ (8005fc8 <HAL_RCC_OscConfig+0x27c>)
 8005ef8:	681b      	ldr	r3, [r3, #0]
 8005efa:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005efe:	2b00      	cmp	r3, #0
 8005f00:	d0f0      	beq.n	8005ee4 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005f02:	4b31      	ldr	r3, [pc, #196]	@ (8005fc8 <HAL_RCC_OscConfig+0x27c>)
 8005f04:	685b      	ldr	r3, [r3, #4]
 8005f06:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8005f0a:	687b      	ldr	r3, [r7, #4]
 8005f0c:	691b      	ldr	r3, [r3, #16]
 8005f0e:	061b      	lsls	r3, r3, #24
 8005f10:	492d      	ldr	r1, [pc, #180]	@ (8005fc8 <HAL_RCC_OscConfig+0x27c>)
 8005f12:	4313      	orrs	r3, r2
 8005f14:	604b      	str	r3, [r1, #4]
 8005f16:	e01a      	b.n	8005f4e <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005f18:	4b2b      	ldr	r3, [pc, #172]	@ (8005fc8 <HAL_RCC_OscConfig+0x27c>)
 8005f1a:	681b      	ldr	r3, [r3, #0]
 8005f1c:	4a2a      	ldr	r2, [pc, #168]	@ (8005fc8 <HAL_RCC_OscConfig+0x27c>)
 8005f1e:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8005f22:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005f24:	f7fe ffa8 	bl	8004e78 <HAL_GetTick>
 8005f28:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8005f2a:	e008      	b.n	8005f3e <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005f2c:	f7fe ffa4 	bl	8004e78 <HAL_GetTick>
 8005f30:	4602      	mov	r2, r0
 8005f32:	693b      	ldr	r3, [r7, #16]
 8005f34:	1ad3      	subs	r3, r2, r3
 8005f36:	2b02      	cmp	r3, #2
 8005f38:	d901      	bls.n	8005f3e <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 8005f3a:	2303      	movs	r3, #3
 8005f3c:	e20e      	b.n	800635c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8005f3e:	4b22      	ldr	r3, [pc, #136]	@ (8005fc8 <HAL_RCC_OscConfig+0x27c>)
 8005f40:	681b      	ldr	r3, [r3, #0]
 8005f42:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005f46:	2b00      	cmp	r3, #0
 8005f48:	d1f0      	bne.n	8005f2c <HAL_RCC_OscConfig+0x1e0>
 8005f4a:	e000      	b.n	8005f4e <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005f4c:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005f4e:	687b      	ldr	r3, [r7, #4]
 8005f50:	681b      	ldr	r3, [r3, #0]
 8005f52:	f003 0308 	and.w	r3, r3, #8
 8005f56:	2b00      	cmp	r3, #0
 8005f58:	d041      	beq.n	8005fde <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8005f5a:	687b      	ldr	r3, [r7, #4]
 8005f5c:	695b      	ldr	r3, [r3, #20]
 8005f5e:	2b00      	cmp	r3, #0
 8005f60:	d01c      	beq.n	8005f9c <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005f62:	4b19      	ldr	r3, [pc, #100]	@ (8005fc8 <HAL_RCC_OscConfig+0x27c>)
 8005f64:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005f68:	4a17      	ldr	r2, [pc, #92]	@ (8005fc8 <HAL_RCC_OscConfig+0x27c>)
 8005f6a:	f043 0301 	orr.w	r3, r3, #1
 8005f6e:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005f72:	f7fe ff81 	bl	8004e78 <HAL_GetTick>
 8005f76:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8005f78:	e008      	b.n	8005f8c <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005f7a:	f7fe ff7d 	bl	8004e78 <HAL_GetTick>
 8005f7e:	4602      	mov	r2, r0
 8005f80:	693b      	ldr	r3, [r7, #16]
 8005f82:	1ad3      	subs	r3, r2, r3
 8005f84:	2b02      	cmp	r3, #2
 8005f86:	d901      	bls.n	8005f8c <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8005f88:	2303      	movs	r3, #3
 8005f8a:	e1e7      	b.n	800635c <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8005f8c:	4b0e      	ldr	r3, [pc, #56]	@ (8005fc8 <HAL_RCC_OscConfig+0x27c>)
 8005f8e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005f92:	f003 0302 	and.w	r3, r3, #2
 8005f96:	2b00      	cmp	r3, #0
 8005f98:	d0ef      	beq.n	8005f7a <HAL_RCC_OscConfig+0x22e>
 8005f9a:	e020      	b.n	8005fde <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005f9c:	4b0a      	ldr	r3, [pc, #40]	@ (8005fc8 <HAL_RCC_OscConfig+0x27c>)
 8005f9e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005fa2:	4a09      	ldr	r2, [pc, #36]	@ (8005fc8 <HAL_RCC_OscConfig+0x27c>)
 8005fa4:	f023 0301 	bic.w	r3, r3, #1
 8005fa8:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005fac:	f7fe ff64 	bl	8004e78 <HAL_GetTick>
 8005fb0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8005fb2:	e00d      	b.n	8005fd0 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005fb4:	f7fe ff60 	bl	8004e78 <HAL_GetTick>
 8005fb8:	4602      	mov	r2, r0
 8005fba:	693b      	ldr	r3, [r7, #16]
 8005fbc:	1ad3      	subs	r3, r2, r3
 8005fbe:	2b02      	cmp	r3, #2
 8005fc0:	d906      	bls.n	8005fd0 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8005fc2:	2303      	movs	r3, #3
 8005fc4:	e1ca      	b.n	800635c <HAL_RCC_OscConfig+0x610>
 8005fc6:	bf00      	nop
 8005fc8:	40021000 	.word	0x40021000
 8005fcc:	2000018c 	.word	0x2000018c
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8005fd0:	4b8c      	ldr	r3, [pc, #560]	@ (8006204 <HAL_RCC_OscConfig+0x4b8>)
 8005fd2:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005fd6:	f003 0302 	and.w	r3, r3, #2
 8005fda:	2b00      	cmp	r3, #0
 8005fdc:	d1ea      	bne.n	8005fb4 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005fde:	687b      	ldr	r3, [r7, #4]
 8005fe0:	681b      	ldr	r3, [r3, #0]
 8005fe2:	f003 0304 	and.w	r3, r3, #4
 8005fe6:	2b00      	cmp	r3, #0
 8005fe8:	f000 80a6 	beq.w	8006138 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005fec:	2300      	movs	r3, #0
 8005fee:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8005ff0:	4b84      	ldr	r3, [pc, #528]	@ (8006204 <HAL_RCC_OscConfig+0x4b8>)
 8005ff2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005ff4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005ff8:	2b00      	cmp	r3, #0
 8005ffa:	d101      	bne.n	8006000 <HAL_RCC_OscConfig+0x2b4>
 8005ffc:	2301      	movs	r3, #1
 8005ffe:	e000      	b.n	8006002 <HAL_RCC_OscConfig+0x2b6>
 8006000:	2300      	movs	r3, #0
 8006002:	2b00      	cmp	r3, #0
 8006004:	d00d      	beq.n	8006022 <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8006006:	4b7f      	ldr	r3, [pc, #508]	@ (8006204 <HAL_RCC_OscConfig+0x4b8>)
 8006008:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800600a:	4a7e      	ldr	r2, [pc, #504]	@ (8006204 <HAL_RCC_OscConfig+0x4b8>)
 800600c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8006010:	6593      	str	r3, [r2, #88]	@ 0x58
 8006012:	4b7c      	ldr	r3, [pc, #496]	@ (8006204 <HAL_RCC_OscConfig+0x4b8>)
 8006014:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006016:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800601a:	60fb      	str	r3, [r7, #12]
 800601c:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 800601e:	2301      	movs	r3, #1
 8006020:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8006022:	4b79      	ldr	r3, [pc, #484]	@ (8006208 <HAL_RCC_OscConfig+0x4bc>)
 8006024:	681b      	ldr	r3, [r3, #0]
 8006026:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800602a:	2b00      	cmp	r3, #0
 800602c:	d118      	bne.n	8006060 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800602e:	4b76      	ldr	r3, [pc, #472]	@ (8006208 <HAL_RCC_OscConfig+0x4bc>)
 8006030:	681b      	ldr	r3, [r3, #0]
 8006032:	4a75      	ldr	r2, [pc, #468]	@ (8006208 <HAL_RCC_OscConfig+0x4bc>)
 8006034:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006038:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800603a:	f7fe ff1d 	bl	8004e78 <HAL_GetTick>
 800603e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8006040:	e008      	b.n	8006054 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006042:	f7fe ff19 	bl	8004e78 <HAL_GetTick>
 8006046:	4602      	mov	r2, r0
 8006048:	693b      	ldr	r3, [r7, #16]
 800604a:	1ad3      	subs	r3, r2, r3
 800604c:	2b02      	cmp	r3, #2
 800604e:	d901      	bls.n	8006054 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 8006050:	2303      	movs	r3, #3
 8006052:	e183      	b.n	800635c <HAL_RCC_OscConfig+0x610>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8006054:	4b6c      	ldr	r3, [pc, #432]	@ (8006208 <HAL_RCC_OscConfig+0x4bc>)
 8006056:	681b      	ldr	r3, [r3, #0]
 8006058:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800605c:	2b00      	cmp	r3, #0
 800605e:	d0f0      	beq.n	8006042 <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8006060:	687b      	ldr	r3, [r7, #4]
 8006062:	689b      	ldr	r3, [r3, #8]
 8006064:	2b01      	cmp	r3, #1
 8006066:	d108      	bne.n	800607a <HAL_RCC_OscConfig+0x32e>
 8006068:	4b66      	ldr	r3, [pc, #408]	@ (8006204 <HAL_RCC_OscConfig+0x4b8>)
 800606a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800606e:	4a65      	ldr	r2, [pc, #404]	@ (8006204 <HAL_RCC_OscConfig+0x4b8>)
 8006070:	f043 0301 	orr.w	r3, r3, #1
 8006074:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8006078:	e024      	b.n	80060c4 <HAL_RCC_OscConfig+0x378>
 800607a:	687b      	ldr	r3, [r7, #4]
 800607c:	689b      	ldr	r3, [r3, #8]
 800607e:	2b05      	cmp	r3, #5
 8006080:	d110      	bne.n	80060a4 <HAL_RCC_OscConfig+0x358>
 8006082:	4b60      	ldr	r3, [pc, #384]	@ (8006204 <HAL_RCC_OscConfig+0x4b8>)
 8006084:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006088:	4a5e      	ldr	r2, [pc, #376]	@ (8006204 <HAL_RCC_OscConfig+0x4b8>)
 800608a:	f043 0304 	orr.w	r3, r3, #4
 800608e:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8006092:	4b5c      	ldr	r3, [pc, #368]	@ (8006204 <HAL_RCC_OscConfig+0x4b8>)
 8006094:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006098:	4a5a      	ldr	r2, [pc, #360]	@ (8006204 <HAL_RCC_OscConfig+0x4b8>)
 800609a:	f043 0301 	orr.w	r3, r3, #1
 800609e:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80060a2:	e00f      	b.n	80060c4 <HAL_RCC_OscConfig+0x378>
 80060a4:	4b57      	ldr	r3, [pc, #348]	@ (8006204 <HAL_RCC_OscConfig+0x4b8>)
 80060a6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80060aa:	4a56      	ldr	r2, [pc, #344]	@ (8006204 <HAL_RCC_OscConfig+0x4b8>)
 80060ac:	f023 0301 	bic.w	r3, r3, #1
 80060b0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80060b4:	4b53      	ldr	r3, [pc, #332]	@ (8006204 <HAL_RCC_OscConfig+0x4b8>)
 80060b6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80060ba:	4a52      	ldr	r2, [pc, #328]	@ (8006204 <HAL_RCC_OscConfig+0x4b8>)
 80060bc:	f023 0304 	bic.w	r3, r3, #4
 80060c0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80060c4:	687b      	ldr	r3, [r7, #4]
 80060c6:	689b      	ldr	r3, [r3, #8]
 80060c8:	2b00      	cmp	r3, #0
 80060ca:	d016      	beq.n	80060fa <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80060cc:	f7fe fed4 	bl	8004e78 <HAL_GetTick>
 80060d0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80060d2:	e00a      	b.n	80060ea <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80060d4:	f7fe fed0 	bl	8004e78 <HAL_GetTick>
 80060d8:	4602      	mov	r2, r0
 80060da:	693b      	ldr	r3, [r7, #16]
 80060dc:	1ad3      	subs	r3, r2, r3
 80060de:	f241 3288 	movw	r2, #5000	@ 0x1388
 80060e2:	4293      	cmp	r3, r2
 80060e4:	d901      	bls.n	80060ea <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 80060e6:	2303      	movs	r3, #3
 80060e8:	e138      	b.n	800635c <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80060ea:	4b46      	ldr	r3, [pc, #280]	@ (8006204 <HAL_RCC_OscConfig+0x4b8>)
 80060ec:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80060f0:	f003 0302 	and.w	r3, r3, #2
 80060f4:	2b00      	cmp	r3, #0
 80060f6:	d0ed      	beq.n	80060d4 <HAL_RCC_OscConfig+0x388>
 80060f8:	e015      	b.n	8006126 <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80060fa:	f7fe febd 	bl	8004e78 <HAL_GetTick>
 80060fe:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8006100:	e00a      	b.n	8006118 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006102:	f7fe feb9 	bl	8004e78 <HAL_GetTick>
 8006106:	4602      	mov	r2, r0
 8006108:	693b      	ldr	r3, [r7, #16]
 800610a:	1ad3      	subs	r3, r2, r3
 800610c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006110:	4293      	cmp	r3, r2
 8006112:	d901      	bls.n	8006118 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8006114:	2303      	movs	r3, #3
 8006116:	e121      	b.n	800635c <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8006118:	4b3a      	ldr	r3, [pc, #232]	@ (8006204 <HAL_RCC_OscConfig+0x4b8>)
 800611a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800611e:	f003 0302 	and.w	r3, r3, #2
 8006122:	2b00      	cmp	r3, #0
 8006124:	d1ed      	bne.n	8006102 <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8006126:	7ffb      	ldrb	r3, [r7, #31]
 8006128:	2b01      	cmp	r3, #1
 800612a:	d105      	bne.n	8006138 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800612c:	4b35      	ldr	r3, [pc, #212]	@ (8006204 <HAL_RCC_OscConfig+0x4b8>)
 800612e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006130:	4a34      	ldr	r2, [pc, #208]	@ (8006204 <HAL_RCC_OscConfig+0x4b8>)
 8006132:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8006136:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8006138:	687b      	ldr	r3, [r7, #4]
 800613a:	681b      	ldr	r3, [r3, #0]
 800613c:	f003 0320 	and.w	r3, r3, #32
 8006140:	2b00      	cmp	r3, #0
 8006142:	d03c      	beq.n	80061be <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8006144:	687b      	ldr	r3, [r7, #4]
 8006146:	699b      	ldr	r3, [r3, #24]
 8006148:	2b00      	cmp	r3, #0
 800614a:	d01c      	beq.n	8006186 <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800614c:	4b2d      	ldr	r3, [pc, #180]	@ (8006204 <HAL_RCC_OscConfig+0x4b8>)
 800614e:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8006152:	4a2c      	ldr	r2, [pc, #176]	@ (8006204 <HAL_RCC_OscConfig+0x4b8>)
 8006154:	f043 0301 	orr.w	r3, r3, #1
 8006158:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800615c:	f7fe fe8c 	bl	8004e78 <HAL_GetTick>
 8006160:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8006162:	e008      	b.n	8006176 <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8006164:	f7fe fe88 	bl	8004e78 <HAL_GetTick>
 8006168:	4602      	mov	r2, r0
 800616a:	693b      	ldr	r3, [r7, #16]
 800616c:	1ad3      	subs	r3, r2, r3
 800616e:	2b02      	cmp	r3, #2
 8006170:	d901      	bls.n	8006176 <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 8006172:	2303      	movs	r3, #3
 8006174:	e0f2      	b.n	800635c <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8006176:	4b23      	ldr	r3, [pc, #140]	@ (8006204 <HAL_RCC_OscConfig+0x4b8>)
 8006178:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800617c:	f003 0302 	and.w	r3, r3, #2
 8006180:	2b00      	cmp	r3, #0
 8006182:	d0ef      	beq.n	8006164 <HAL_RCC_OscConfig+0x418>
 8006184:	e01b      	b.n	80061be <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8006186:	4b1f      	ldr	r3, [pc, #124]	@ (8006204 <HAL_RCC_OscConfig+0x4b8>)
 8006188:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800618c:	4a1d      	ldr	r2, [pc, #116]	@ (8006204 <HAL_RCC_OscConfig+0x4b8>)
 800618e:	f023 0301 	bic.w	r3, r3, #1
 8006192:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006196:	f7fe fe6f 	bl	8004e78 <HAL_GetTick>
 800619a:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 800619c:	e008      	b.n	80061b0 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800619e:	f7fe fe6b 	bl	8004e78 <HAL_GetTick>
 80061a2:	4602      	mov	r2, r0
 80061a4:	693b      	ldr	r3, [r7, #16]
 80061a6:	1ad3      	subs	r3, r2, r3
 80061a8:	2b02      	cmp	r3, #2
 80061aa:	d901      	bls.n	80061b0 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 80061ac:	2303      	movs	r3, #3
 80061ae:	e0d5      	b.n	800635c <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80061b0:	4b14      	ldr	r3, [pc, #80]	@ (8006204 <HAL_RCC_OscConfig+0x4b8>)
 80061b2:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80061b6:	f003 0302 	and.w	r3, r3, #2
 80061ba:	2b00      	cmp	r3, #0
 80061bc:	d1ef      	bne.n	800619e <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80061be:	687b      	ldr	r3, [r7, #4]
 80061c0:	69db      	ldr	r3, [r3, #28]
 80061c2:	2b00      	cmp	r3, #0
 80061c4:	f000 80c9 	beq.w	800635a <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80061c8:	4b0e      	ldr	r3, [pc, #56]	@ (8006204 <HAL_RCC_OscConfig+0x4b8>)
 80061ca:	689b      	ldr	r3, [r3, #8]
 80061cc:	f003 030c 	and.w	r3, r3, #12
 80061d0:	2b0c      	cmp	r3, #12
 80061d2:	f000 8083 	beq.w	80062dc <HAL_RCC_OscConfig+0x590>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80061d6:	687b      	ldr	r3, [r7, #4]
 80061d8:	69db      	ldr	r3, [r3, #28]
 80061da:	2b02      	cmp	r3, #2
 80061dc:	d15e      	bne.n	800629c <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80061de:	4b09      	ldr	r3, [pc, #36]	@ (8006204 <HAL_RCC_OscConfig+0x4b8>)
 80061e0:	681b      	ldr	r3, [r3, #0]
 80061e2:	4a08      	ldr	r2, [pc, #32]	@ (8006204 <HAL_RCC_OscConfig+0x4b8>)
 80061e4:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80061e8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80061ea:	f7fe fe45 	bl	8004e78 <HAL_GetTick>
 80061ee:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80061f0:	e00c      	b.n	800620c <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80061f2:	f7fe fe41 	bl	8004e78 <HAL_GetTick>
 80061f6:	4602      	mov	r2, r0
 80061f8:	693b      	ldr	r3, [r7, #16]
 80061fa:	1ad3      	subs	r3, r2, r3
 80061fc:	2b02      	cmp	r3, #2
 80061fe:	d905      	bls.n	800620c <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 8006200:	2303      	movs	r3, #3
 8006202:	e0ab      	b.n	800635c <HAL_RCC_OscConfig+0x610>
 8006204:	40021000 	.word	0x40021000
 8006208:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800620c:	4b55      	ldr	r3, [pc, #340]	@ (8006364 <HAL_RCC_OscConfig+0x618>)
 800620e:	681b      	ldr	r3, [r3, #0]
 8006210:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006214:	2b00      	cmp	r3, #0
 8006216:	d1ec      	bne.n	80061f2 <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8006218:	4b52      	ldr	r3, [pc, #328]	@ (8006364 <HAL_RCC_OscConfig+0x618>)
 800621a:	68da      	ldr	r2, [r3, #12]
 800621c:	4b52      	ldr	r3, [pc, #328]	@ (8006368 <HAL_RCC_OscConfig+0x61c>)
 800621e:	4013      	ands	r3, r2
 8006220:	687a      	ldr	r2, [r7, #4]
 8006222:	6a11      	ldr	r1, [r2, #32]
 8006224:	687a      	ldr	r2, [r7, #4]
 8006226:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8006228:	3a01      	subs	r2, #1
 800622a:	0112      	lsls	r2, r2, #4
 800622c:	4311      	orrs	r1, r2
 800622e:	687a      	ldr	r2, [r7, #4]
 8006230:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 8006232:	0212      	lsls	r2, r2, #8
 8006234:	4311      	orrs	r1, r2
 8006236:	687a      	ldr	r2, [r7, #4]
 8006238:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 800623a:	0852      	lsrs	r2, r2, #1
 800623c:	3a01      	subs	r2, #1
 800623e:	0552      	lsls	r2, r2, #21
 8006240:	4311      	orrs	r1, r2
 8006242:	687a      	ldr	r2, [r7, #4]
 8006244:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8006246:	0852      	lsrs	r2, r2, #1
 8006248:	3a01      	subs	r2, #1
 800624a:	0652      	lsls	r2, r2, #25
 800624c:	4311      	orrs	r1, r2
 800624e:	687a      	ldr	r2, [r7, #4]
 8006250:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8006252:	06d2      	lsls	r2, r2, #27
 8006254:	430a      	orrs	r2, r1
 8006256:	4943      	ldr	r1, [pc, #268]	@ (8006364 <HAL_RCC_OscConfig+0x618>)
 8006258:	4313      	orrs	r3, r2
 800625a:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800625c:	4b41      	ldr	r3, [pc, #260]	@ (8006364 <HAL_RCC_OscConfig+0x618>)
 800625e:	681b      	ldr	r3, [r3, #0]
 8006260:	4a40      	ldr	r2, [pc, #256]	@ (8006364 <HAL_RCC_OscConfig+0x618>)
 8006262:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8006266:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8006268:	4b3e      	ldr	r3, [pc, #248]	@ (8006364 <HAL_RCC_OscConfig+0x618>)
 800626a:	68db      	ldr	r3, [r3, #12]
 800626c:	4a3d      	ldr	r2, [pc, #244]	@ (8006364 <HAL_RCC_OscConfig+0x618>)
 800626e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8006272:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006274:	f7fe fe00 	bl	8004e78 <HAL_GetTick>
 8006278:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800627a:	e008      	b.n	800628e <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800627c:	f7fe fdfc 	bl	8004e78 <HAL_GetTick>
 8006280:	4602      	mov	r2, r0
 8006282:	693b      	ldr	r3, [r7, #16]
 8006284:	1ad3      	subs	r3, r2, r3
 8006286:	2b02      	cmp	r3, #2
 8006288:	d901      	bls.n	800628e <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 800628a:	2303      	movs	r3, #3
 800628c:	e066      	b.n	800635c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800628e:	4b35      	ldr	r3, [pc, #212]	@ (8006364 <HAL_RCC_OscConfig+0x618>)
 8006290:	681b      	ldr	r3, [r3, #0]
 8006292:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006296:	2b00      	cmp	r3, #0
 8006298:	d0f0      	beq.n	800627c <HAL_RCC_OscConfig+0x530>
 800629a:	e05e      	b.n	800635a <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800629c:	4b31      	ldr	r3, [pc, #196]	@ (8006364 <HAL_RCC_OscConfig+0x618>)
 800629e:	681b      	ldr	r3, [r3, #0]
 80062a0:	4a30      	ldr	r2, [pc, #192]	@ (8006364 <HAL_RCC_OscConfig+0x618>)
 80062a2:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80062a6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80062a8:	f7fe fde6 	bl	8004e78 <HAL_GetTick>
 80062ac:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80062ae:	e008      	b.n	80062c2 <HAL_RCC_OscConfig+0x576>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80062b0:	f7fe fde2 	bl	8004e78 <HAL_GetTick>
 80062b4:	4602      	mov	r2, r0
 80062b6:	693b      	ldr	r3, [r7, #16]
 80062b8:	1ad3      	subs	r3, r2, r3
 80062ba:	2b02      	cmp	r3, #2
 80062bc:	d901      	bls.n	80062c2 <HAL_RCC_OscConfig+0x576>
          {
            return HAL_TIMEOUT;
 80062be:	2303      	movs	r3, #3
 80062c0:	e04c      	b.n	800635c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80062c2:	4b28      	ldr	r3, [pc, #160]	@ (8006364 <HAL_RCC_OscConfig+0x618>)
 80062c4:	681b      	ldr	r3, [r3, #0]
 80062c6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80062ca:	2b00      	cmp	r3, #0
 80062cc:	d1f0      	bne.n	80062b0 <HAL_RCC_OscConfig+0x564>
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 80062ce:	4b25      	ldr	r3, [pc, #148]	@ (8006364 <HAL_RCC_OscConfig+0x618>)
 80062d0:	68da      	ldr	r2, [r3, #12]
 80062d2:	4924      	ldr	r1, [pc, #144]	@ (8006364 <HAL_RCC_OscConfig+0x618>)
 80062d4:	4b25      	ldr	r3, [pc, #148]	@ (800636c <HAL_RCC_OscConfig+0x620>)
 80062d6:	4013      	ands	r3, r2
 80062d8:	60cb      	str	r3, [r1, #12]
 80062da:	e03e      	b.n	800635a <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80062dc:	687b      	ldr	r3, [r7, #4]
 80062de:	69db      	ldr	r3, [r3, #28]
 80062e0:	2b01      	cmp	r3, #1
 80062e2:	d101      	bne.n	80062e8 <HAL_RCC_OscConfig+0x59c>
      {
        return HAL_ERROR;
 80062e4:	2301      	movs	r3, #1
 80062e6:	e039      	b.n	800635c <HAL_RCC_OscConfig+0x610>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 80062e8:	4b1e      	ldr	r3, [pc, #120]	@ (8006364 <HAL_RCC_OscConfig+0x618>)
 80062ea:	68db      	ldr	r3, [r3, #12]
 80062ec:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80062ee:	697b      	ldr	r3, [r7, #20]
 80062f0:	f003 0203 	and.w	r2, r3, #3
 80062f4:	687b      	ldr	r3, [r7, #4]
 80062f6:	6a1b      	ldr	r3, [r3, #32]
 80062f8:	429a      	cmp	r2, r3
 80062fa:	d12c      	bne.n	8006356 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80062fc:	697b      	ldr	r3, [r7, #20]
 80062fe:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8006302:	687b      	ldr	r3, [r7, #4]
 8006304:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006306:	3b01      	subs	r3, #1
 8006308:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800630a:	429a      	cmp	r2, r3
 800630c:	d123      	bne.n	8006356 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 800630e:	697b      	ldr	r3, [r7, #20]
 8006310:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8006314:	687b      	ldr	r3, [r7, #4]
 8006316:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006318:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800631a:	429a      	cmp	r2, r3
 800631c:	d11b      	bne.n	8006356 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800631e:	697b      	ldr	r3, [r7, #20]
 8006320:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 8006324:	687b      	ldr	r3, [r7, #4]
 8006326:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006328:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 800632a:	429a      	cmp	r2, r3
 800632c:	d113      	bne.n	8006356 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800632e:	697b      	ldr	r3, [r7, #20]
 8006330:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8006334:	687b      	ldr	r3, [r7, #4]
 8006336:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006338:	085b      	lsrs	r3, r3, #1
 800633a:	3b01      	subs	r3, #1
 800633c:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800633e:	429a      	cmp	r2, r3
 8006340:	d109      	bne.n	8006356 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8006342:	697b      	ldr	r3, [r7, #20]
 8006344:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8006348:	687b      	ldr	r3, [r7, #4]
 800634a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800634c:	085b      	lsrs	r3, r3, #1
 800634e:	3b01      	subs	r3, #1
 8006350:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8006352:	429a      	cmp	r2, r3
 8006354:	d001      	beq.n	800635a <HAL_RCC_OscConfig+0x60e>
      {
        return HAL_ERROR;
 8006356:	2301      	movs	r3, #1
 8006358:	e000      	b.n	800635c <HAL_RCC_OscConfig+0x610>
      }
    }
  }
  }

  return HAL_OK;
 800635a:	2300      	movs	r3, #0
}
 800635c:	4618      	mov	r0, r3
 800635e:	3720      	adds	r7, #32
 8006360:	46bd      	mov	sp, r7
 8006362:	bd80      	pop	{r7, pc}
 8006364:	40021000 	.word	0x40021000
 8006368:	019f800c 	.word	0x019f800c
 800636c:	feeefffc 	.word	0xfeeefffc

08006370 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8006370:	b580      	push	{r7, lr}
 8006372:	b086      	sub	sp, #24
 8006374:	af00      	add	r7, sp, #0
 8006376:	6078      	str	r0, [r7, #4]
 8006378:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 800637a:	2300      	movs	r3, #0
 800637c:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800637e:	687b      	ldr	r3, [r7, #4]
 8006380:	2b00      	cmp	r3, #0
 8006382:	d101      	bne.n	8006388 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8006384:	2301      	movs	r3, #1
 8006386:	e11e      	b.n	80065c6 <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8006388:	4b91      	ldr	r3, [pc, #580]	@ (80065d0 <HAL_RCC_ClockConfig+0x260>)
 800638a:	681b      	ldr	r3, [r3, #0]
 800638c:	f003 030f 	and.w	r3, r3, #15
 8006390:	683a      	ldr	r2, [r7, #0]
 8006392:	429a      	cmp	r2, r3
 8006394:	d910      	bls.n	80063b8 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006396:	4b8e      	ldr	r3, [pc, #568]	@ (80065d0 <HAL_RCC_ClockConfig+0x260>)
 8006398:	681b      	ldr	r3, [r3, #0]
 800639a:	f023 020f 	bic.w	r2, r3, #15
 800639e:	498c      	ldr	r1, [pc, #560]	@ (80065d0 <HAL_RCC_ClockConfig+0x260>)
 80063a0:	683b      	ldr	r3, [r7, #0]
 80063a2:	4313      	orrs	r3, r2
 80063a4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80063a6:	4b8a      	ldr	r3, [pc, #552]	@ (80065d0 <HAL_RCC_ClockConfig+0x260>)
 80063a8:	681b      	ldr	r3, [r3, #0]
 80063aa:	f003 030f 	and.w	r3, r3, #15
 80063ae:	683a      	ldr	r2, [r7, #0]
 80063b0:	429a      	cmp	r2, r3
 80063b2:	d001      	beq.n	80063b8 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80063b4:	2301      	movs	r3, #1
 80063b6:	e106      	b.n	80065c6 <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80063b8:	687b      	ldr	r3, [r7, #4]
 80063ba:	681b      	ldr	r3, [r3, #0]
 80063bc:	f003 0301 	and.w	r3, r3, #1
 80063c0:	2b00      	cmp	r3, #0
 80063c2:	d073      	beq.n	80064ac <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80063c4:	687b      	ldr	r3, [r7, #4]
 80063c6:	685b      	ldr	r3, [r3, #4]
 80063c8:	2b03      	cmp	r3, #3
 80063ca:	d129      	bne.n	8006420 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80063cc:	4b81      	ldr	r3, [pc, #516]	@ (80065d4 <HAL_RCC_ClockConfig+0x264>)
 80063ce:	681b      	ldr	r3, [r3, #0]
 80063d0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80063d4:	2b00      	cmp	r3, #0
 80063d6:	d101      	bne.n	80063dc <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 80063d8:	2301      	movs	r3, #1
 80063da:	e0f4      	b.n	80065c6 <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 80063dc:	f000 f99c 	bl	8006718 <RCC_GetSysClockFreqFromPLLSource>
 80063e0:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 80063e2:	693b      	ldr	r3, [r7, #16]
 80063e4:	4a7c      	ldr	r2, [pc, #496]	@ (80065d8 <HAL_RCC_ClockConfig+0x268>)
 80063e6:	4293      	cmp	r3, r2
 80063e8:	d93f      	bls.n	800646a <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 80063ea:	4b7a      	ldr	r3, [pc, #488]	@ (80065d4 <HAL_RCC_ClockConfig+0x264>)
 80063ec:	689b      	ldr	r3, [r3, #8]
 80063ee:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80063f2:	2b00      	cmp	r3, #0
 80063f4:	d009      	beq.n	800640a <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 80063f6:	687b      	ldr	r3, [r7, #4]
 80063f8:	681b      	ldr	r3, [r3, #0]
 80063fa:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 80063fe:	2b00      	cmp	r3, #0
 8006400:	d033      	beq.n	800646a <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 8006402:	687b      	ldr	r3, [r7, #4]
 8006404:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8006406:	2b00      	cmp	r3, #0
 8006408:	d12f      	bne.n	800646a <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 800640a:	4b72      	ldr	r3, [pc, #456]	@ (80065d4 <HAL_RCC_ClockConfig+0x264>)
 800640c:	689b      	ldr	r3, [r3, #8]
 800640e:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8006412:	4a70      	ldr	r2, [pc, #448]	@ (80065d4 <HAL_RCC_ClockConfig+0x264>)
 8006414:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006418:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 800641a:	2380      	movs	r3, #128	@ 0x80
 800641c:	617b      	str	r3, [r7, #20]
 800641e:	e024      	b.n	800646a <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006420:	687b      	ldr	r3, [r7, #4]
 8006422:	685b      	ldr	r3, [r3, #4]
 8006424:	2b02      	cmp	r3, #2
 8006426:	d107      	bne.n	8006438 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8006428:	4b6a      	ldr	r3, [pc, #424]	@ (80065d4 <HAL_RCC_ClockConfig+0x264>)
 800642a:	681b      	ldr	r3, [r3, #0]
 800642c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006430:	2b00      	cmp	r3, #0
 8006432:	d109      	bne.n	8006448 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8006434:	2301      	movs	r3, #1
 8006436:	e0c6      	b.n	80065c6 <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8006438:	4b66      	ldr	r3, [pc, #408]	@ (80065d4 <HAL_RCC_ClockConfig+0x264>)
 800643a:	681b      	ldr	r3, [r3, #0]
 800643c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006440:	2b00      	cmp	r3, #0
 8006442:	d101      	bne.n	8006448 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8006444:	2301      	movs	r3, #1
 8006446:	e0be      	b.n	80065c6 <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8006448:	f000 f8ce 	bl	80065e8 <HAL_RCC_GetSysClockFreq>
 800644c:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 800644e:	693b      	ldr	r3, [r7, #16]
 8006450:	4a61      	ldr	r2, [pc, #388]	@ (80065d8 <HAL_RCC_ClockConfig+0x268>)
 8006452:	4293      	cmp	r3, r2
 8006454:	d909      	bls.n	800646a <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8006456:	4b5f      	ldr	r3, [pc, #380]	@ (80065d4 <HAL_RCC_ClockConfig+0x264>)
 8006458:	689b      	ldr	r3, [r3, #8]
 800645a:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800645e:	4a5d      	ldr	r2, [pc, #372]	@ (80065d4 <HAL_RCC_ClockConfig+0x264>)
 8006460:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006464:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 8006466:	2380      	movs	r3, #128	@ 0x80
 8006468:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800646a:	4b5a      	ldr	r3, [pc, #360]	@ (80065d4 <HAL_RCC_ClockConfig+0x264>)
 800646c:	689b      	ldr	r3, [r3, #8]
 800646e:	f023 0203 	bic.w	r2, r3, #3
 8006472:	687b      	ldr	r3, [r7, #4]
 8006474:	685b      	ldr	r3, [r3, #4]
 8006476:	4957      	ldr	r1, [pc, #348]	@ (80065d4 <HAL_RCC_ClockConfig+0x264>)
 8006478:	4313      	orrs	r3, r2
 800647a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800647c:	f7fe fcfc 	bl	8004e78 <HAL_GetTick>
 8006480:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006482:	e00a      	b.n	800649a <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006484:	f7fe fcf8 	bl	8004e78 <HAL_GetTick>
 8006488:	4602      	mov	r2, r0
 800648a:	68fb      	ldr	r3, [r7, #12]
 800648c:	1ad3      	subs	r3, r2, r3
 800648e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006492:	4293      	cmp	r3, r2
 8006494:	d901      	bls.n	800649a <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 8006496:	2303      	movs	r3, #3
 8006498:	e095      	b.n	80065c6 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800649a:	4b4e      	ldr	r3, [pc, #312]	@ (80065d4 <HAL_RCC_ClockConfig+0x264>)
 800649c:	689b      	ldr	r3, [r3, #8]
 800649e:	f003 020c 	and.w	r2, r3, #12
 80064a2:	687b      	ldr	r3, [r7, #4]
 80064a4:	685b      	ldr	r3, [r3, #4]
 80064a6:	009b      	lsls	r3, r3, #2
 80064a8:	429a      	cmp	r2, r3
 80064aa:	d1eb      	bne.n	8006484 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80064ac:	687b      	ldr	r3, [r7, #4]
 80064ae:	681b      	ldr	r3, [r3, #0]
 80064b0:	f003 0302 	and.w	r3, r3, #2
 80064b4:	2b00      	cmp	r3, #0
 80064b6:	d023      	beq.n	8006500 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80064b8:	687b      	ldr	r3, [r7, #4]
 80064ba:	681b      	ldr	r3, [r3, #0]
 80064bc:	f003 0304 	and.w	r3, r3, #4
 80064c0:	2b00      	cmp	r3, #0
 80064c2:	d005      	beq.n	80064d0 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80064c4:	4b43      	ldr	r3, [pc, #268]	@ (80065d4 <HAL_RCC_ClockConfig+0x264>)
 80064c6:	689b      	ldr	r3, [r3, #8]
 80064c8:	4a42      	ldr	r2, [pc, #264]	@ (80065d4 <HAL_RCC_ClockConfig+0x264>)
 80064ca:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 80064ce:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80064d0:	687b      	ldr	r3, [r7, #4]
 80064d2:	681b      	ldr	r3, [r3, #0]
 80064d4:	f003 0308 	and.w	r3, r3, #8
 80064d8:	2b00      	cmp	r3, #0
 80064da:	d007      	beq.n	80064ec <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 80064dc:	4b3d      	ldr	r3, [pc, #244]	@ (80065d4 <HAL_RCC_ClockConfig+0x264>)
 80064de:	689b      	ldr	r3, [r3, #8]
 80064e0:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 80064e4:	4a3b      	ldr	r2, [pc, #236]	@ (80065d4 <HAL_RCC_ClockConfig+0x264>)
 80064e6:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 80064ea:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80064ec:	4b39      	ldr	r3, [pc, #228]	@ (80065d4 <HAL_RCC_ClockConfig+0x264>)
 80064ee:	689b      	ldr	r3, [r3, #8]
 80064f0:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80064f4:	687b      	ldr	r3, [r7, #4]
 80064f6:	689b      	ldr	r3, [r3, #8]
 80064f8:	4936      	ldr	r1, [pc, #216]	@ (80065d4 <HAL_RCC_ClockConfig+0x264>)
 80064fa:	4313      	orrs	r3, r2
 80064fc:	608b      	str	r3, [r1, #8]
 80064fe:	e008      	b.n	8006512 <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8006500:	697b      	ldr	r3, [r7, #20]
 8006502:	2b80      	cmp	r3, #128	@ 0x80
 8006504:	d105      	bne.n	8006512 <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8006506:	4b33      	ldr	r3, [pc, #204]	@ (80065d4 <HAL_RCC_ClockConfig+0x264>)
 8006508:	689b      	ldr	r3, [r3, #8]
 800650a:	4a32      	ldr	r2, [pc, #200]	@ (80065d4 <HAL_RCC_ClockConfig+0x264>)
 800650c:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8006510:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8006512:	4b2f      	ldr	r3, [pc, #188]	@ (80065d0 <HAL_RCC_ClockConfig+0x260>)
 8006514:	681b      	ldr	r3, [r3, #0]
 8006516:	f003 030f 	and.w	r3, r3, #15
 800651a:	683a      	ldr	r2, [r7, #0]
 800651c:	429a      	cmp	r2, r3
 800651e:	d21d      	bcs.n	800655c <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006520:	4b2b      	ldr	r3, [pc, #172]	@ (80065d0 <HAL_RCC_ClockConfig+0x260>)
 8006522:	681b      	ldr	r3, [r3, #0]
 8006524:	f023 020f 	bic.w	r2, r3, #15
 8006528:	4929      	ldr	r1, [pc, #164]	@ (80065d0 <HAL_RCC_ClockConfig+0x260>)
 800652a:	683b      	ldr	r3, [r7, #0]
 800652c:	4313      	orrs	r3, r2
 800652e:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8006530:	f7fe fca2 	bl	8004e78 <HAL_GetTick>
 8006534:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006536:	e00a      	b.n	800654e <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006538:	f7fe fc9e 	bl	8004e78 <HAL_GetTick>
 800653c:	4602      	mov	r2, r0
 800653e:	68fb      	ldr	r3, [r7, #12]
 8006540:	1ad3      	subs	r3, r2, r3
 8006542:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006546:	4293      	cmp	r3, r2
 8006548:	d901      	bls.n	800654e <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 800654a:	2303      	movs	r3, #3
 800654c:	e03b      	b.n	80065c6 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800654e:	4b20      	ldr	r3, [pc, #128]	@ (80065d0 <HAL_RCC_ClockConfig+0x260>)
 8006550:	681b      	ldr	r3, [r3, #0]
 8006552:	f003 030f 	and.w	r3, r3, #15
 8006556:	683a      	ldr	r2, [r7, #0]
 8006558:	429a      	cmp	r2, r3
 800655a:	d1ed      	bne.n	8006538 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800655c:	687b      	ldr	r3, [r7, #4]
 800655e:	681b      	ldr	r3, [r3, #0]
 8006560:	f003 0304 	and.w	r3, r3, #4
 8006564:	2b00      	cmp	r3, #0
 8006566:	d008      	beq.n	800657a <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8006568:	4b1a      	ldr	r3, [pc, #104]	@ (80065d4 <HAL_RCC_ClockConfig+0x264>)
 800656a:	689b      	ldr	r3, [r3, #8]
 800656c:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8006570:	687b      	ldr	r3, [r7, #4]
 8006572:	68db      	ldr	r3, [r3, #12]
 8006574:	4917      	ldr	r1, [pc, #92]	@ (80065d4 <HAL_RCC_ClockConfig+0x264>)
 8006576:	4313      	orrs	r3, r2
 8006578:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800657a:	687b      	ldr	r3, [r7, #4]
 800657c:	681b      	ldr	r3, [r3, #0]
 800657e:	f003 0308 	and.w	r3, r3, #8
 8006582:	2b00      	cmp	r3, #0
 8006584:	d009      	beq.n	800659a <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8006586:	4b13      	ldr	r3, [pc, #76]	@ (80065d4 <HAL_RCC_ClockConfig+0x264>)
 8006588:	689b      	ldr	r3, [r3, #8]
 800658a:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 800658e:	687b      	ldr	r3, [r7, #4]
 8006590:	691b      	ldr	r3, [r3, #16]
 8006592:	00db      	lsls	r3, r3, #3
 8006594:	490f      	ldr	r1, [pc, #60]	@ (80065d4 <HAL_RCC_ClockConfig+0x264>)
 8006596:	4313      	orrs	r3, r2
 8006598:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800659a:	f000 f825 	bl	80065e8 <HAL_RCC_GetSysClockFreq>
 800659e:	4602      	mov	r2, r0
 80065a0:	4b0c      	ldr	r3, [pc, #48]	@ (80065d4 <HAL_RCC_ClockConfig+0x264>)
 80065a2:	689b      	ldr	r3, [r3, #8]
 80065a4:	091b      	lsrs	r3, r3, #4
 80065a6:	f003 030f 	and.w	r3, r3, #15
 80065aa:	490c      	ldr	r1, [pc, #48]	@ (80065dc <HAL_RCC_ClockConfig+0x26c>)
 80065ac:	5ccb      	ldrb	r3, [r1, r3]
 80065ae:	f003 031f 	and.w	r3, r3, #31
 80065b2:	fa22 f303 	lsr.w	r3, r2, r3
 80065b6:	4a0a      	ldr	r2, [pc, #40]	@ (80065e0 <HAL_RCC_ClockConfig+0x270>)
 80065b8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 80065ba:	4b0a      	ldr	r3, [pc, #40]	@ (80065e4 <HAL_RCC_ClockConfig+0x274>)
 80065bc:	681b      	ldr	r3, [r3, #0]
 80065be:	4618      	mov	r0, r3
 80065c0:	f7fe fc0e 	bl	8004de0 <HAL_InitTick>
 80065c4:	4603      	mov	r3, r0
}
 80065c6:	4618      	mov	r0, r3
 80065c8:	3718      	adds	r7, #24
 80065ca:	46bd      	mov	sp, r7
 80065cc:	bd80      	pop	{r7, pc}
 80065ce:	bf00      	nop
 80065d0:	40022000 	.word	0x40022000
 80065d4:	40021000 	.word	0x40021000
 80065d8:	04c4b400 	.word	0x04c4b400
 80065dc:	0800cdf8 	.word	0x0800cdf8
 80065e0:	20000008 	.word	0x20000008
 80065e4:	2000018c 	.word	0x2000018c

080065e8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80065e8:	b480      	push	{r7}
 80065ea:	b087      	sub	sp, #28
 80065ec:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 80065ee:	4b2c      	ldr	r3, [pc, #176]	@ (80066a0 <HAL_RCC_GetSysClockFreq+0xb8>)
 80065f0:	689b      	ldr	r3, [r3, #8]
 80065f2:	f003 030c 	and.w	r3, r3, #12
 80065f6:	2b04      	cmp	r3, #4
 80065f8:	d102      	bne.n	8006600 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80065fa:	4b2a      	ldr	r3, [pc, #168]	@ (80066a4 <HAL_RCC_GetSysClockFreq+0xbc>)
 80065fc:	613b      	str	r3, [r7, #16]
 80065fe:	e047      	b.n	8006690 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8006600:	4b27      	ldr	r3, [pc, #156]	@ (80066a0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8006602:	689b      	ldr	r3, [r3, #8]
 8006604:	f003 030c 	and.w	r3, r3, #12
 8006608:	2b08      	cmp	r3, #8
 800660a:	d102      	bne.n	8006612 <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 800660c:	4b25      	ldr	r3, [pc, #148]	@ (80066a4 <HAL_RCC_GetSysClockFreq+0xbc>)
 800660e:	613b      	str	r3, [r7, #16]
 8006610:	e03e      	b.n	8006690 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 8006612:	4b23      	ldr	r3, [pc, #140]	@ (80066a0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8006614:	689b      	ldr	r3, [r3, #8]
 8006616:	f003 030c 	and.w	r3, r3, #12
 800661a:	2b0c      	cmp	r3, #12
 800661c:	d136      	bne.n	800668c <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800661e:	4b20      	ldr	r3, [pc, #128]	@ (80066a0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8006620:	68db      	ldr	r3, [r3, #12]
 8006622:	f003 0303 	and.w	r3, r3, #3
 8006626:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8006628:	4b1d      	ldr	r3, [pc, #116]	@ (80066a0 <HAL_RCC_GetSysClockFreq+0xb8>)
 800662a:	68db      	ldr	r3, [r3, #12]
 800662c:	091b      	lsrs	r3, r3, #4
 800662e:	f003 030f 	and.w	r3, r3, #15
 8006632:	3301      	adds	r3, #1
 8006634:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8006636:	68fb      	ldr	r3, [r7, #12]
 8006638:	2b03      	cmp	r3, #3
 800663a:	d10c      	bne.n	8006656 <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800663c:	4a19      	ldr	r2, [pc, #100]	@ (80066a4 <HAL_RCC_GetSysClockFreq+0xbc>)
 800663e:	68bb      	ldr	r3, [r7, #8]
 8006640:	fbb2 f3f3 	udiv	r3, r2, r3
 8006644:	4a16      	ldr	r2, [pc, #88]	@ (80066a0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8006646:	68d2      	ldr	r2, [r2, #12]
 8006648:	0a12      	lsrs	r2, r2, #8
 800664a:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 800664e:	fb02 f303 	mul.w	r3, r2, r3
 8006652:	617b      	str	r3, [r7, #20]
      break;
 8006654:	e00c      	b.n	8006670 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8006656:	4a13      	ldr	r2, [pc, #76]	@ (80066a4 <HAL_RCC_GetSysClockFreq+0xbc>)
 8006658:	68bb      	ldr	r3, [r7, #8]
 800665a:	fbb2 f3f3 	udiv	r3, r2, r3
 800665e:	4a10      	ldr	r2, [pc, #64]	@ (80066a0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8006660:	68d2      	ldr	r2, [r2, #12]
 8006662:	0a12      	lsrs	r2, r2, #8
 8006664:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8006668:	fb02 f303 	mul.w	r3, r2, r3
 800666c:	617b      	str	r3, [r7, #20]
      break;
 800666e:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8006670:	4b0b      	ldr	r3, [pc, #44]	@ (80066a0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8006672:	68db      	ldr	r3, [r3, #12]
 8006674:	0e5b      	lsrs	r3, r3, #25
 8006676:	f003 0303 	and.w	r3, r3, #3
 800667a:	3301      	adds	r3, #1
 800667c:	005b      	lsls	r3, r3, #1
 800667e:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 8006680:	697a      	ldr	r2, [r7, #20]
 8006682:	687b      	ldr	r3, [r7, #4]
 8006684:	fbb2 f3f3 	udiv	r3, r2, r3
 8006688:	613b      	str	r3, [r7, #16]
 800668a:	e001      	b.n	8006690 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 800668c:	2300      	movs	r3, #0
 800668e:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8006690:	693b      	ldr	r3, [r7, #16]
}
 8006692:	4618      	mov	r0, r3
 8006694:	371c      	adds	r7, #28
 8006696:	46bd      	mov	sp, r7
 8006698:	f85d 7b04 	ldr.w	r7, [sp], #4
 800669c:	4770      	bx	lr
 800669e:	bf00      	nop
 80066a0:	40021000 	.word	0x40021000
 80066a4:	00f42400 	.word	0x00f42400

080066a8 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80066a8:	b480      	push	{r7}
 80066aa:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80066ac:	4b03      	ldr	r3, [pc, #12]	@ (80066bc <HAL_RCC_GetHCLKFreq+0x14>)
 80066ae:	681b      	ldr	r3, [r3, #0]
}
 80066b0:	4618      	mov	r0, r3
 80066b2:	46bd      	mov	sp, r7
 80066b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066b8:	4770      	bx	lr
 80066ba:	bf00      	nop
 80066bc:	20000008 	.word	0x20000008

080066c0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80066c0:	b580      	push	{r7, lr}
 80066c2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 80066c4:	f7ff fff0 	bl	80066a8 <HAL_RCC_GetHCLKFreq>
 80066c8:	4602      	mov	r2, r0
 80066ca:	4b06      	ldr	r3, [pc, #24]	@ (80066e4 <HAL_RCC_GetPCLK1Freq+0x24>)
 80066cc:	689b      	ldr	r3, [r3, #8]
 80066ce:	0a1b      	lsrs	r3, r3, #8
 80066d0:	f003 0307 	and.w	r3, r3, #7
 80066d4:	4904      	ldr	r1, [pc, #16]	@ (80066e8 <HAL_RCC_GetPCLK1Freq+0x28>)
 80066d6:	5ccb      	ldrb	r3, [r1, r3]
 80066d8:	f003 031f 	and.w	r3, r3, #31
 80066dc:	fa22 f303 	lsr.w	r3, r2, r3
}
 80066e0:	4618      	mov	r0, r3
 80066e2:	bd80      	pop	{r7, pc}
 80066e4:	40021000 	.word	0x40021000
 80066e8:	0800ce08 	.word	0x0800ce08

080066ec <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80066ec:	b580      	push	{r7, lr}
 80066ee:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 80066f0:	f7ff ffda 	bl	80066a8 <HAL_RCC_GetHCLKFreq>
 80066f4:	4602      	mov	r2, r0
 80066f6:	4b06      	ldr	r3, [pc, #24]	@ (8006710 <HAL_RCC_GetPCLK2Freq+0x24>)
 80066f8:	689b      	ldr	r3, [r3, #8]
 80066fa:	0adb      	lsrs	r3, r3, #11
 80066fc:	f003 0307 	and.w	r3, r3, #7
 8006700:	4904      	ldr	r1, [pc, #16]	@ (8006714 <HAL_RCC_GetPCLK2Freq+0x28>)
 8006702:	5ccb      	ldrb	r3, [r1, r3]
 8006704:	f003 031f 	and.w	r3, r3, #31
 8006708:	fa22 f303 	lsr.w	r3, r2, r3
}
 800670c:	4618      	mov	r0, r3
 800670e:	bd80      	pop	{r7, pc}
 8006710:	40021000 	.word	0x40021000
 8006714:	0800ce08 	.word	0x0800ce08

08006718 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8006718:	b480      	push	{r7}
 800671a:	b087      	sub	sp, #28
 800671c:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800671e:	4b1e      	ldr	r3, [pc, #120]	@ (8006798 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8006720:	68db      	ldr	r3, [r3, #12]
 8006722:	f003 0303 	and.w	r3, r3, #3
 8006726:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8006728:	4b1b      	ldr	r3, [pc, #108]	@ (8006798 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800672a:	68db      	ldr	r3, [r3, #12]
 800672c:	091b      	lsrs	r3, r3, #4
 800672e:	f003 030f 	and.w	r3, r3, #15
 8006732:	3301      	adds	r3, #1
 8006734:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8006736:	693b      	ldr	r3, [r7, #16]
 8006738:	2b03      	cmp	r3, #3
 800673a:	d10c      	bne.n	8006756 <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800673c:	4a17      	ldr	r2, [pc, #92]	@ (800679c <RCC_GetSysClockFreqFromPLLSource+0x84>)
 800673e:	68fb      	ldr	r3, [r7, #12]
 8006740:	fbb2 f3f3 	udiv	r3, r2, r3
 8006744:	4a14      	ldr	r2, [pc, #80]	@ (8006798 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8006746:	68d2      	ldr	r2, [r2, #12]
 8006748:	0a12      	lsrs	r2, r2, #8
 800674a:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 800674e:	fb02 f303 	mul.w	r3, r2, r3
 8006752:	617b      	str	r3, [r7, #20]
    break;
 8006754:	e00c      	b.n	8006770 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8006756:	4a11      	ldr	r2, [pc, #68]	@ (800679c <RCC_GetSysClockFreqFromPLLSource+0x84>)
 8006758:	68fb      	ldr	r3, [r7, #12]
 800675a:	fbb2 f3f3 	udiv	r3, r2, r3
 800675e:	4a0e      	ldr	r2, [pc, #56]	@ (8006798 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8006760:	68d2      	ldr	r2, [r2, #12]
 8006762:	0a12      	lsrs	r2, r2, #8
 8006764:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8006768:	fb02 f303 	mul.w	r3, r2, r3
 800676c:	617b      	str	r3, [r7, #20]
    break;
 800676e:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8006770:	4b09      	ldr	r3, [pc, #36]	@ (8006798 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8006772:	68db      	ldr	r3, [r3, #12]
 8006774:	0e5b      	lsrs	r3, r3, #25
 8006776:	f003 0303 	and.w	r3, r3, #3
 800677a:	3301      	adds	r3, #1
 800677c:	005b      	lsls	r3, r3, #1
 800677e:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 8006780:	697a      	ldr	r2, [r7, #20]
 8006782:	68bb      	ldr	r3, [r7, #8]
 8006784:	fbb2 f3f3 	udiv	r3, r2, r3
 8006788:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 800678a:	687b      	ldr	r3, [r7, #4]
}
 800678c:	4618      	mov	r0, r3
 800678e:	371c      	adds	r7, #28
 8006790:	46bd      	mov	sp, r7
 8006792:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006796:	4770      	bx	lr
 8006798:	40021000 	.word	0x40021000
 800679c:	00f42400 	.word	0x00f42400

080067a0 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80067a0:	b580      	push	{r7, lr}
 80067a2:	b086      	sub	sp, #24
 80067a4:	af00      	add	r7, sp, #0
 80067a6:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80067a8:	2300      	movs	r3, #0
 80067aa:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80067ac:	2300      	movs	r3, #0
 80067ae:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80067b0:	687b      	ldr	r3, [r7, #4]
 80067b2:	681b      	ldr	r3, [r3, #0]
 80067b4:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80067b8:	2b00      	cmp	r3, #0
 80067ba:	f000 8098 	beq.w	80068ee <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 80067be:	2300      	movs	r3, #0
 80067c0:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80067c2:	4b43      	ldr	r3, [pc, #268]	@ (80068d0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80067c4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80067c6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80067ca:	2b00      	cmp	r3, #0
 80067cc:	d10d      	bne.n	80067ea <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80067ce:	4b40      	ldr	r3, [pc, #256]	@ (80068d0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80067d0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80067d2:	4a3f      	ldr	r2, [pc, #252]	@ (80068d0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80067d4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80067d8:	6593      	str	r3, [r2, #88]	@ 0x58
 80067da:	4b3d      	ldr	r3, [pc, #244]	@ (80068d0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80067dc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80067de:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80067e2:	60bb      	str	r3, [r7, #8]
 80067e4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80067e6:	2301      	movs	r3, #1
 80067e8:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80067ea:	4b3a      	ldr	r3, [pc, #232]	@ (80068d4 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 80067ec:	681b      	ldr	r3, [r3, #0]
 80067ee:	4a39      	ldr	r2, [pc, #228]	@ (80068d4 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 80067f0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80067f4:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80067f6:	f7fe fb3f 	bl	8004e78 <HAL_GetTick>
 80067fa:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80067fc:	e009      	b.n	8006812 <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80067fe:	f7fe fb3b 	bl	8004e78 <HAL_GetTick>
 8006802:	4602      	mov	r2, r0
 8006804:	68fb      	ldr	r3, [r7, #12]
 8006806:	1ad3      	subs	r3, r2, r3
 8006808:	2b02      	cmp	r3, #2
 800680a:	d902      	bls.n	8006812 <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 800680c:	2303      	movs	r3, #3
 800680e:	74fb      	strb	r3, [r7, #19]
        break;
 8006810:	e005      	b.n	800681e <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8006812:	4b30      	ldr	r3, [pc, #192]	@ (80068d4 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8006814:	681b      	ldr	r3, [r3, #0]
 8006816:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800681a:	2b00      	cmp	r3, #0
 800681c:	d0ef      	beq.n	80067fe <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 800681e:	7cfb      	ldrb	r3, [r7, #19]
 8006820:	2b00      	cmp	r3, #0
 8006822:	d159      	bne.n	80068d8 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8006824:	4b2a      	ldr	r3, [pc, #168]	@ (80068d0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006826:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800682a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800682e:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8006830:	697b      	ldr	r3, [r7, #20]
 8006832:	2b00      	cmp	r3, #0
 8006834:	d01e      	beq.n	8006874 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8006836:	687b      	ldr	r3, [r7, #4]
 8006838:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800683a:	697a      	ldr	r2, [r7, #20]
 800683c:	429a      	cmp	r2, r3
 800683e:	d019      	beq.n	8006874 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8006840:	4b23      	ldr	r3, [pc, #140]	@ (80068d0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006842:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006846:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800684a:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800684c:	4b20      	ldr	r3, [pc, #128]	@ (80068d0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800684e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006852:	4a1f      	ldr	r2, [pc, #124]	@ (80068d0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006854:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006858:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 800685c:	4b1c      	ldr	r3, [pc, #112]	@ (80068d0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800685e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006862:	4a1b      	ldr	r2, [pc, #108]	@ (80068d0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006864:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8006868:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 800686c:	4a18      	ldr	r2, [pc, #96]	@ (80068d0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800686e:	697b      	ldr	r3, [r7, #20]
 8006870:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8006874:	697b      	ldr	r3, [r7, #20]
 8006876:	f003 0301 	and.w	r3, r3, #1
 800687a:	2b00      	cmp	r3, #0
 800687c:	d016      	beq.n	80068ac <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800687e:	f7fe fafb 	bl	8004e78 <HAL_GetTick>
 8006882:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8006884:	e00b      	b.n	800689e <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006886:	f7fe faf7 	bl	8004e78 <HAL_GetTick>
 800688a:	4602      	mov	r2, r0
 800688c:	68fb      	ldr	r3, [r7, #12]
 800688e:	1ad3      	subs	r3, r2, r3
 8006890:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006894:	4293      	cmp	r3, r2
 8006896:	d902      	bls.n	800689e <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 8006898:	2303      	movs	r3, #3
 800689a:	74fb      	strb	r3, [r7, #19]
            break;
 800689c:	e006      	b.n	80068ac <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800689e:	4b0c      	ldr	r3, [pc, #48]	@ (80068d0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80068a0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80068a4:	f003 0302 	and.w	r3, r3, #2
 80068a8:	2b00      	cmp	r3, #0
 80068aa:	d0ec      	beq.n	8006886 <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 80068ac:	7cfb      	ldrb	r3, [r7, #19]
 80068ae:	2b00      	cmp	r3, #0
 80068b0:	d10b      	bne.n	80068ca <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80068b2:	4b07      	ldr	r3, [pc, #28]	@ (80068d0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80068b4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80068b8:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80068bc:	687b      	ldr	r3, [r7, #4]
 80068be:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80068c0:	4903      	ldr	r1, [pc, #12]	@ (80068d0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80068c2:	4313      	orrs	r3, r2
 80068c4:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 80068c8:	e008      	b.n	80068dc <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80068ca:	7cfb      	ldrb	r3, [r7, #19]
 80068cc:	74bb      	strb	r3, [r7, #18]
 80068ce:	e005      	b.n	80068dc <HAL_RCCEx_PeriphCLKConfig+0x13c>
 80068d0:	40021000 	.word	0x40021000
 80068d4:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80068d8:	7cfb      	ldrb	r3, [r7, #19]
 80068da:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80068dc:	7c7b      	ldrb	r3, [r7, #17]
 80068de:	2b01      	cmp	r3, #1
 80068e0:	d105      	bne.n	80068ee <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80068e2:	4ba6      	ldr	r3, [pc, #664]	@ (8006b7c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80068e4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80068e6:	4aa5      	ldr	r2, [pc, #660]	@ (8006b7c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80068e8:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80068ec:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80068ee:	687b      	ldr	r3, [r7, #4]
 80068f0:	681b      	ldr	r3, [r3, #0]
 80068f2:	f003 0301 	and.w	r3, r3, #1
 80068f6:	2b00      	cmp	r3, #0
 80068f8:	d00a      	beq.n	8006910 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80068fa:	4ba0      	ldr	r3, [pc, #640]	@ (8006b7c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80068fc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006900:	f023 0203 	bic.w	r2, r3, #3
 8006904:	687b      	ldr	r3, [r7, #4]
 8006906:	685b      	ldr	r3, [r3, #4]
 8006908:	499c      	ldr	r1, [pc, #624]	@ (8006b7c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800690a:	4313      	orrs	r3, r2
 800690c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8006910:	687b      	ldr	r3, [r7, #4]
 8006912:	681b      	ldr	r3, [r3, #0]
 8006914:	f003 0302 	and.w	r3, r3, #2
 8006918:	2b00      	cmp	r3, #0
 800691a:	d00a      	beq.n	8006932 <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800691c:	4b97      	ldr	r3, [pc, #604]	@ (8006b7c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800691e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006922:	f023 020c 	bic.w	r2, r3, #12
 8006926:	687b      	ldr	r3, [r7, #4]
 8006928:	689b      	ldr	r3, [r3, #8]
 800692a:	4994      	ldr	r1, [pc, #592]	@ (8006b7c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800692c:	4313      	orrs	r3, r2
 800692e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8006932:	687b      	ldr	r3, [r7, #4]
 8006934:	681b      	ldr	r3, [r3, #0]
 8006936:	f003 0304 	and.w	r3, r3, #4
 800693a:	2b00      	cmp	r3, #0
 800693c:	d00a      	beq.n	8006954 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800693e:	4b8f      	ldr	r3, [pc, #572]	@ (8006b7c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006940:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006944:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8006948:	687b      	ldr	r3, [r7, #4]
 800694a:	68db      	ldr	r3, [r3, #12]
 800694c:	498b      	ldr	r1, [pc, #556]	@ (8006b7c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800694e:	4313      	orrs	r3, r2
 8006950:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#endif /* USART3 */

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8006954:	687b      	ldr	r3, [r7, #4]
 8006956:	681b      	ldr	r3, [r3, #0]
 8006958:	f003 0308 	and.w	r3, r3, #8
 800695c:	2b00      	cmp	r3, #0
 800695e:	d00a      	beq.n	8006976 <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8006960:	4b86      	ldr	r3, [pc, #536]	@ (8006b7c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006962:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006966:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 800696a:	687b      	ldr	r3, [r7, #4]
 800696c:	691b      	ldr	r3, [r3, #16]
 800696e:	4983      	ldr	r1, [pc, #524]	@ (8006b7c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006970:	4313      	orrs	r3, r2
 8006972:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8006976:	687b      	ldr	r3, [r7, #4]
 8006978:	681b      	ldr	r3, [r3, #0]
 800697a:	f003 0320 	and.w	r3, r3, #32
 800697e:	2b00      	cmp	r3, #0
 8006980:	d00a      	beq.n	8006998 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8006982:	4b7e      	ldr	r3, [pc, #504]	@ (8006b7c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006984:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006988:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 800698c:	687b      	ldr	r3, [r7, #4]
 800698e:	695b      	ldr	r3, [r3, #20]
 8006990:	497a      	ldr	r1, [pc, #488]	@ (8006b7c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006992:	4313      	orrs	r3, r2
 8006994:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8006998:	687b      	ldr	r3, [r7, #4]
 800699a:	681b      	ldr	r3, [r3, #0]
 800699c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80069a0:	2b00      	cmp	r3, #0
 80069a2:	d00a      	beq.n	80069ba <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80069a4:	4b75      	ldr	r3, [pc, #468]	@ (8006b7c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80069a6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80069aa:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 80069ae:	687b      	ldr	r3, [r7, #4]
 80069b0:	699b      	ldr	r3, [r3, #24]
 80069b2:	4972      	ldr	r1, [pc, #456]	@ (8006b7c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80069b4:	4313      	orrs	r3, r2
 80069b6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80069ba:	687b      	ldr	r3, [r7, #4]
 80069bc:	681b      	ldr	r3, [r3, #0]
 80069be:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80069c2:	2b00      	cmp	r3, #0
 80069c4:	d00a      	beq.n	80069dc <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80069c6:	4b6d      	ldr	r3, [pc, #436]	@ (8006b7c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80069c8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80069cc:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 80069d0:	687b      	ldr	r3, [r7, #4]
 80069d2:	69db      	ldr	r3, [r3, #28]
 80069d4:	4969      	ldr	r1, [pc, #420]	@ (8006b7c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80069d6:	4313      	orrs	r3, r2
 80069d8:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }
#if defined(I2C3)

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80069dc:	687b      	ldr	r3, [r7, #4]
 80069de:	681b      	ldr	r3, [r3, #0]
 80069e0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80069e4:	2b00      	cmp	r3, #0
 80069e6:	d00a      	beq.n	80069fe <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80069e8:	4b64      	ldr	r3, [pc, #400]	@ (8006b7c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80069ea:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80069ee:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 80069f2:	687b      	ldr	r3, [r7, #4]
 80069f4:	6a1b      	ldr	r3, [r3, #32]
 80069f6:	4961      	ldr	r1, [pc, #388]	@ (8006b7c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80069f8:	4313      	orrs	r3, r2
 80069fa:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80069fe:	687b      	ldr	r3, [r7, #4]
 8006a00:	681b      	ldr	r3, [r3, #0]
 8006a02:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8006a06:	2b00      	cmp	r3, #0
 8006a08:	d00a      	beq.n	8006a20 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8006a0a:	4b5c      	ldr	r3, [pc, #368]	@ (8006b7c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006a0c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006a10:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8006a14:	687b      	ldr	r3, [r7, #4]
 8006a16:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006a18:	4958      	ldr	r1, [pc, #352]	@ (8006b7c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006a1a:	4313      	orrs	r3, r2
 8006a1c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(SAI1) 
  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8006a20:	687b      	ldr	r3, [r7, #4]
 8006a22:	681b      	ldr	r3, [r3, #0]
 8006a24:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006a28:	2b00      	cmp	r3, #0
 8006a2a:	d015      	beq.n	8006a58 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8006a2c:	4b53      	ldr	r3, [pc, #332]	@ (8006b7c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006a2e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006a32:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8006a36:	687b      	ldr	r3, [r7, #4]
 8006a38:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006a3a:	4950      	ldr	r1, [pc, #320]	@ (8006b7c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006a3c:	4313      	orrs	r3, r2
 8006a3e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 8006a42:	687b      	ldr	r3, [r7, #4]
 8006a44:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006a46:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8006a4a:	d105      	bne.n	8006a58 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8006a4c:	4b4b      	ldr	r3, [pc, #300]	@ (8006b7c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006a4e:	68db      	ldr	r3, [r3, #12]
 8006a50:	4a4a      	ldr	r2, [pc, #296]	@ (8006b7c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006a52:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8006a56:	60d3      	str	r3, [r2, #12]

#endif /* SAI1 */

#if defined(SPI_I2S_SUPPORT)
  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8006a58:	687b      	ldr	r3, [r7, #4]
 8006a5a:	681b      	ldr	r3, [r3, #0]
 8006a5c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8006a60:	2b00      	cmp	r3, #0
 8006a62:	d015      	beq.n	8006a90 <HAL_RCCEx_PeriphCLKConfig+0x2f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8006a64:	4b45      	ldr	r3, [pc, #276]	@ (8006b7c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006a66:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006a6a:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8006a6e:	687b      	ldr	r3, [r7, #4]
 8006a70:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006a72:	4942      	ldr	r1, [pc, #264]	@ (8006b7c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006a74:	4313      	orrs	r3, r2
 8006a76:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 8006a7a:	687b      	ldr	r3, [r7, #4]
 8006a7c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006a7e:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8006a82:	d105      	bne.n	8006a90 <HAL_RCCEx_PeriphCLKConfig+0x2f0>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8006a84:	4b3d      	ldr	r3, [pc, #244]	@ (8006b7c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006a86:	68db      	ldr	r3, [r3, #12]
 8006a88:	4a3c      	ldr	r2, [pc, #240]	@ (8006b7c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006a8a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8006a8e:	60d3      	str	r3, [r2, #12]

#endif /* SPI_I2S_SUPPORT */

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8006a90:	687b      	ldr	r3, [r7, #4]
 8006a92:	681b      	ldr	r3, [r3, #0]
 8006a94:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8006a98:	2b00      	cmp	r3, #0
 8006a9a:	d015      	beq.n	8006ac8 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8006a9c:	4b37      	ldr	r3, [pc, #220]	@ (8006b7c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006a9e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006aa2:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 8006aa6:	687b      	ldr	r3, [r7, #4]
 8006aa8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006aaa:	4934      	ldr	r1, [pc, #208]	@ (8006b7c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006aac:	4313      	orrs	r3, r2
 8006aae:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 8006ab2:	687b      	ldr	r3, [r7, #4]
 8006ab4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006ab6:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8006aba:	d105      	bne.n	8006ac8 <HAL_RCCEx_PeriphCLKConfig+0x328>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8006abc:	4b2f      	ldr	r3, [pc, #188]	@ (8006b7c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006abe:	68db      	ldr	r3, [r3, #12]
 8006ac0:	4a2e      	ldr	r2, [pc, #184]	@ (8006b7c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006ac2:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8006ac6:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8006ac8:	687b      	ldr	r3, [r7, #4]
 8006aca:	681b      	ldr	r3, [r3, #0]
 8006acc:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8006ad0:	2b00      	cmp	r3, #0
 8006ad2:	d015      	beq.n	8006b00 <HAL_RCCEx_PeriphCLKConfig+0x360>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8006ad4:	4b29      	ldr	r3, [pc, #164]	@ (8006b7c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006ad6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006ada:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8006ade:	687b      	ldr	r3, [r7, #4]
 8006ae0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006ae2:	4926      	ldr	r1, [pc, #152]	@ (8006b7c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006ae4:	4313      	orrs	r3, r2
 8006ae6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8006aea:	687b      	ldr	r3, [r7, #4]
 8006aec:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006aee:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8006af2:	d105      	bne.n	8006b00 <HAL_RCCEx_PeriphCLKConfig+0x360>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8006af4:	4b21      	ldr	r3, [pc, #132]	@ (8006b7c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006af6:	68db      	ldr	r3, [r3, #12]
 8006af8:	4a20      	ldr	r2, [pc, #128]	@ (8006b7c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006afa:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8006afe:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8006b00:	687b      	ldr	r3, [r7, #4]
 8006b02:	681b      	ldr	r3, [r3, #0]
 8006b04:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8006b08:	2b00      	cmp	r3, #0
 8006b0a:	d015      	beq.n	8006b38 <HAL_RCCEx_PeriphCLKConfig+0x398>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8006b0c:	4b1b      	ldr	r3, [pc, #108]	@ (8006b7c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006b0e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006b12:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8006b16:	687b      	ldr	r3, [r7, #4]
 8006b18:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006b1a:	4918      	ldr	r1, [pc, #96]	@ (8006b7c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006b1c:	4313      	orrs	r3, r2
 8006b1e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8006b22:	687b      	ldr	r3, [r7, #4]
 8006b24:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006b26:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8006b2a:	d105      	bne.n	8006b38 <HAL_RCCEx_PeriphCLKConfig+0x398>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8006b2c:	4b13      	ldr	r3, [pc, #76]	@ (8006b7c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006b2e:	68db      	ldr	r3, [r3, #12]
 8006b30:	4a12      	ldr	r2, [pc, #72]	@ (8006b7c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006b32:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8006b36:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8006b38:	687b      	ldr	r3, [r7, #4]
 8006b3a:	681b      	ldr	r3, [r3, #0]
 8006b3c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8006b40:	2b00      	cmp	r3, #0
 8006b42:	d015      	beq.n	8006b70 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8006b44:	4b0d      	ldr	r3, [pc, #52]	@ (8006b7c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006b46:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006b4a:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 8006b4e:	687b      	ldr	r3, [r7, #4]
 8006b50:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006b52:	490a      	ldr	r1, [pc, #40]	@ (8006b7c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006b54:	4313      	orrs	r3, r2
 8006b56:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 8006b5a:	687b      	ldr	r3, [r7, #4]
 8006b5c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006b5e:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8006b62:	d105      	bne.n	8006b70 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8006b64:	4b05      	ldr	r3, [pc, #20]	@ (8006b7c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006b66:	68db      	ldr	r3, [r3, #12]
 8006b68:	4a04      	ldr	r2, [pc, #16]	@ (8006b7c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006b6a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006b6e:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 8006b70:	7cbb      	ldrb	r3, [r7, #18]
}
 8006b72:	4618      	mov	r0, r3
 8006b74:	3718      	adds	r7, #24
 8006b76:	46bd      	mov	sp, r7
 8006b78:	bd80      	pop	{r7, pc}
 8006b7a:	bf00      	nop
 8006b7c:	40021000 	.word	0x40021000

08006b80 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8006b80:	b580      	push	{r7, lr}
 8006b82:	b084      	sub	sp, #16
 8006b84:	af00      	add	r7, sp, #0
 8006b86:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8006b88:	687b      	ldr	r3, [r7, #4]
 8006b8a:	2b00      	cmp	r3, #0
 8006b8c:	d101      	bne.n	8006b92 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8006b8e:	2301      	movs	r3, #1
 8006b90:	e09d      	b.n	8006cce <HAL_SPI_Init+0x14e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8006b92:	687b      	ldr	r3, [r7, #4]
 8006b94:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006b96:	2b00      	cmp	r3, #0
 8006b98:	d108      	bne.n	8006bac <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8006b9a:	687b      	ldr	r3, [r7, #4]
 8006b9c:	685b      	ldr	r3, [r3, #4]
 8006b9e:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8006ba2:	d009      	beq.n	8006bb8 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8006ba4:	687b      	ldr	r3, [r7, #4]
 8006ba6:	2200      	movs	r2, #0
 8006ba8:	61da      	str	r2, [r3, #28]
 8006baa:	e005      	b.n	8006bb8 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8006bac:	687b      	ldr	r3, [r7, #4]
 8006bae:	2200      	movs	r2, #0
 8006bb0:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8006bb2:	687b      	ldr	r3, [r7, #4]
 8006bb4:	2200      	movs	r2, #0
 8006bb6:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8006bb8:	687b      	ldr	r3, [r7, #4]
 8006bba:	2200      	movs	r2, #0
 8006bbc:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8006bbe:	687b      	ldr	r3, [r7, #4]
 8006bc0:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8006bc4:	b2db      	uxtb	r3, r3
 8006bc6:	2b00      	cmp	r3, #0
 8006bc8:	d106      	bne.n	8006bd8 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8006bca:	687b      	ldr	r3, [r7, #4]
 8006bcc:	2200      	movs	r2, #0
 8006bce:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8006bd2:	6878      	ldr	r0, [r7, #4]
 8006bd4:	f7fb fa60 	bl	8002098 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8006bd8:	687b      	ldr	r3, [r7, #4]
 8006bda:	2202      	movs	r2, #2
 8006bdc:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8006be0:	687b      	ldr	r3, [r7, #4]
 8006be2:	681b      	ldr	r3, [r3, #0]
 8006be4:	681a      	ldr	r2, [r3, #0]
 8006be6:	687b      	ldr	r3, [r7, #4]
 8006be8:	681b      	ldr	r3, [r3, #0]
 8006bea:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8006bee:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8006bf0:	687b      	ldr	r3, [r7, #4]
 8006bf2:	68db      	ldr	r3, [r3, #12]
 8006bf4:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8006bf8:	d902      	bls.n	8006c00 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8006bfa:	2300      	movs	r3, #0
 8006bfc:	60fb      	str	r3, [r7, #12]
 8006bfe:	e002      	b.n	8006c06 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8006c00:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8006c04:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8006c06:	687b      	ldr	r3, [r7, #4]
 8006c08:	68db      	ldr	r3, [r3, #12]
 8006c0a:	f5b3 6f70 	cmp.w	r3, #3840	@ 0xf00
 8006c0e:	d007      	beq.n	8006c20 <HAL_SPI_Init+0xa0>
 8006c10:	687b      	ldr	r3, [r7, #4]
 8006c12:	68db      	ldr	r3, [r3, #12]
 8006c14:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8006c18:	d002      	beq.n	8006c20 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8006c1a:	687b      	ldr	r3, [r7, #4]
 8006c1c:	2200      	movs	r2, #0
 8006c1e:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8006c20:	687b      	ldr	r3, [r7, #4]
 8006c22:	685b      	ldr	r3, [r3, #4]
 8006c24:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8006c28:	687b      	ldr	r3, [r7, #4]
 8006c2a:	689b      	ldr	r3, [r3, #8]
 8006c2c:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8006c30:	431a      	orrs	r2, r3
 8006c32:	687b      	ldr	r3, [r7, #4]
 8006c34:	691b      	ldr	r3, [r3, #16]
 8006c36:	f003 0302 	and.w	r3, r3, #2
 8006c3a:	431a      	orrs	r2, r3
 8006c3c:	687b      	ldr	r3, [r7, #4]
 8006c3e:	695b      	ldr	r3, [r3, #20]
 8006c40:	f003 0301 	and.w	r3, r3, #1
 8006c44:	431a      	orrs	r2, r3
 8006c46:	687b      	ldr	r3, [r7, #4]
 8006c48:	699b      	ldr	r3, [r3, #24]
 8006c4a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8006c4e:	431a      	orrs	r2, r3
 8006c50:	687b      	ldr	r3, [r7, #4]
 8006c52:	69db      	ldr	r3, [r3, #28]
 8006c54:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8006c58:	431a      	orrs	r2, r3
 8006c5a:	687b      	ldr	r3, [r7, #4]
 8006c5c:	6a1b      	ldr	r3, [r3, #32]
 8006c5e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006c62:	ea42 0103 	orr.w	r1, r2, r3
 8006c66:	687b      	ldr	r3, [r7, #4]
 8006c68:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006c6a:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8006c6e:	687b      	ldr	r3, [r7, #4]
 8006c70:	681b      	ldr	r3, [r3, #0]
 8006c72:	430a      	orrs	r2, r1
 8006c74:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8006c76:	687b      	ldr	r3, [r7, #4]
 8006c78:	699b      	ldr	r3, [r3, #24]
 8006c7a:	0c1b      	lsrs	r3, r3, #16
 8006c7c:	f003 0204 	and.w	r2, r3, #4
 8006c80:	687b      	ldr	r3, [r7, #4]
 8006c82:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006c84:	f003 0310 	and.w	r3, r3, #16
 8006c88:	431a      	orrs	r2, r3
 8006c8a:	687b      	ldr	r3, [r7, #4]
 8006c8c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006c8e:	f003 0308 	and.w	r3, r3, #8
 8006c92:	431a      	orrs	r2, r3
 8006c94:	687b      	ldr	r3, [r7, #4]
 8006c96:	68db      	ldr	r3, [r3, #12]
 8006c98:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 8006c9c:	ea42 0103 	orr.w	r1, r2, r3
 8006ca0:	68fb      	ldr	r3, [r7, #12]
 8006ca2:	f403 5280 	and.w	r2, r3, #4096	@ 0x1000
 8006ca6:	687b      	ldr	r3, [r7, #4]
 8006ca8:	681b      	ldr	r3, [r3, #0]
 8006caa:	430a      	orrs	r2, r1
 8006cac:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8006cae:	687b      	ldr	r3, [r7, #4]
 8006cb0:	681b      	ldr	r3, [r3, #0]
 8006cb2:	69da      	ldr	r2, [r3, #28]
 8006cb4:	687b      	ldr	r3, [r7, #4]
 8006cb6:	681b      	ldr	r3, [r3, #0]
 8006cb8:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8006cbc:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8006cbe:	687b      	ldr	r3, [r7, #4]
 8006cc0:	2200      	movs	r2, #0
 8006cc2:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8006cc4:	687b      	ldr	r3, [r7, #4]
 8006cc6:	2201      	movs	r2, #1
 8006cc8:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  return HAL_OK;
 8006ccc:	2300      	movs	r3, #0
}
 8006cce:	4618      	mov	r0, r3
 8006cd0:	3710      	adds	r7, #16
 8006cd2:	46bd      	mov	sp, r7
 8006cd4:	bd80      	pop	{r7, pc}

08006cd6 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, const uint8_t *pTxData, uint8_t *pRxData,
                                          uint16_t Size, uint32_t Timeout)
{
 8006cd6:	b580      	push	{r7, lr}
 8006cd8:	b08a      	sub	sp, #40	@ 0x28
 8006cda:	af00      	add	r7, sp, #0
 8006cdc:	60f8      	str	r0, [r7, #12]
 8006cde:	60b9      	str	r1, [r7, #8]
 8006ce0:	607a      	str	r2, [r7, #4]
 8006ce2:	807b      	strh	r3, [r7, #2]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8006ce4:	2301      	movs	r3, #1
 8006ce6:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8006ce8:	f7fe f8c6 	bl	8004e78 <HAL_GetTick>
 8006cec:	6238      	str	r0, [r7, #32]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8006cee:	68fb      	ldr	r3, [r7, #12]
 8006cf0:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8006cf4:	77fb      	strb	r3, [r7, #31]
  tmp_mode            = hspi->Init.Mode;
 8006cf6:	68fb      	ldr	r3, [r7, #12]
 8006cf8:	685b      	ldr	r3, [r3, #4]
 8006cfa:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 8006cfc:	887b      	ldrh	r3, [r7, #2]
 8006cfe:	82fb      	strh	r3, [r7, #22]
  initial_RxXferCount = Size;
 8006d00:	887b      	ldrh	r3, [r7, #2]
 8006d02:	82bb      	strh	r3, [r7, #20]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8006d04:	7ffb      	ldrb	r3, [r7, #31]
 8006d06:	2b01      	cmp	r3, #1
 8006d08:	d00c      	beq.n	8006d24 <HAL_SPI_TransmitReceive+0x4e>
 8006d0a:	69bb      	ldr	r3, [r7, #24]
 8006d0c:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8006d10:	d106      	bne.n	8006d20 <HAL_SPI_TransmitReceive+0x4a>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) &&
 8006d12:	68fb      	ldr	r3, [r7, #12]
 8006d14:	689b      	ldr	r3, [r3, #8]
 8006d16:	2b00      	cmp	r3, #0
 8006d18:	d102      	bne.n	8006d20 <HAL_SPI_TransmitReceive+0x4a>
 8006d1a:	7ffb      	ldrb	r3, [r7, #31]
 8006d1c:	2b04      	cmp	r3, #4
 8006d1e:	d001      	beq.n	8006d24 <HAL_SPI_TransmitReceive+0x4e>
         (tmp_state == HAL_SPI_STATE_BUSY_RX))))
  {
    return HAL_BUSY;
 8006d20:	2302      	movs	r3, #2
 8006d22:	e1f3      	b.n	800710c <HAL_SPI_TransmitReceive+0x436>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8006d24:	68bb      	ldr	r3, [r7, #8]
 8006d26:	2b00      	cmp	r3, #0
 8006d28:	d005      	beq.n	8006d36 <HAL_SPI_TransmitReceive+0x60>
 8006d2a:	687b      	ldr	r3, [r7, #4]
 8006d2c:	2b00      	cmp	r3, #0
 8006d2e:	d002      	beq.n	8006d36 <HAL_SPI_TransmitReceive+0x60>
 8006d30:	887b      	ldrh	r3, [r7, #2]
 8006d32:	2b00      	cmp	r3, #0
 8006d34:	d101      	bne.n	8006d3a <HAL_SPI_TransmitReceive+0x64>
  {
    return HAL_ERROR;
 8006d36:	2301      	movs	r3, #1
 8006d38:	e1e8      	b.n	800710c <HAL_SPI_TransmitReceive+0x436>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8006d3a:	68fb      	ldr	r3, [r7, #12]
 8006d3c:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8006d40:	2b01      	cmp	r3, #1
 8006d42:	d101      	bne.n	8006d48 <HAL_SPI_TransmitReceive+0x72>
 8006d44:	2302      	movs	r3, #2
 8006d46:	e1e1      	b.n	800710c <HAL_SPI_TransmitReceive+0x436>
 8006d48:	68fb      	ldr	r3, [r7, #12]
 8006d4a:	2201      	movs	r2, #1
 8006d4c:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8006d50:	68fb      	ldr	r3, [r7, #12]
 8006d52:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8006d56:	b2db      	uxtb	r3, r3
 8006d58:	2b04      	cmp	r3, #4
 8006d5a:	d003      	beq.n	8006d64 <HAL_SPI_TransmitReceive+0x8e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8006d5c:	68fb      	ldr	r3, [r7, #12]
 8006d5e:	2205      	movs	r2, #5
 8006d60:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8006d64:	68fb      	ldr	r3, [r7, #12]
 8006d66:	2200      	movs	r2, #0
 8006d68:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8006d6a:	68fb      	ldr	r3, [r7, #12]
 8006d6c:	687a      	ldr	r2, [r7, #4]
 8006d6e:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferCount = Size;
 8006d70:	68fb      	ldr	r3, [r7, #12]
 8006d72:	887a      	ldrh	r2, [r7, #2]
 8006d74:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  hspi->RxXferSize  = Size;
 8006d78:	68fb      	ldr	r3, [r7, #12]
 8006d7a:	887a      	ldrh	r2, [r7, #2]
 8006d7c:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->pTxBuffPtr  = (const uint8_t *)pTxData;
 8006d80:	68fb      	ldr	r3, [r7, #12]
 8006d82:	68ba      	ldr	r2, [r7, #8]
 8006d84:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferCount = Size;
 8006d86:	68fb      	ldr	r3, [r7, #12]
 8006d88:	887a      	ldrh	r2, [r7, #2]
 8006d8a:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxXferSize  = Size;
 8006d8c:	68fb      	ldr	r3, [r7, #12]
 8006d8e:	887a      	ldrh	r2, [r7, #2]
 8006d90:	879a      	strh	r2, [r3, #60]	@ 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8006d92:	68fb      	ldr	r3, [r7, #12]
 8006d94:	2200      	movs	r2, #0
 8006d96:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi->TxISR       = NULL;
 8006d98:	68fb      	ldr	r3, [r7, #12]
 8006d9a:	2200      	movs	r2, #0
 8006d9c:	651a      	str	r2, [r3, #80]	@ 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 8006d9e:	68fb      	ldr	r3, [r7, #12]
 8006da0:	68db      	ldr	r3, [r3, #12]
 8006da2:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8006da6:	d802      	bhi.n	8006dae <HAL_SPI_TransmitReceive+0xd8>
 8006da8:	8abb      	ldrh	r3, [r7, #20]
 8006daa:	2b01      	cmp	r3, #1
 8006dac:	d908      	bls.n	8006dc0 <HAL_SPI_TransmitReceive+0xea>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8006dae:	68fb      	ldr	r3, [r7, #12]
 8006db0:	681b      	ldr	r3, [r3, #0]
 8006db2:	685a      	ldr	r2, [r3, #4]
 8006db4:	68fb      	ldr	r3, [r7, #12]
 8006db6:	681b      	ldr	r3, [r3, #0]
 8006db8:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8006dbc:	605a      	str	r2, [r3, #4]
 8006dbe:	e007      	b.n	8006dd0 <HAL_SPI_TransmitReceive+0xfa>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8006dc0:	68fb      	ldr	r3, [r7, #12]
 8006dc2:	681b      	ldr	r3, [r3, #0]
 8006dc4:	685a      	ldr	r2, [r3, #4]
 8006dc6:	68fb      	ldr	r3, [r7, #12]
 8006dc8:	681b      	ldr	r3, [r3, #0]
 8006dca:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8006dce:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8006dd0:	68fb      	ldr	r3, [r7, #12]
 8006dd2:	681b      	ldr	r3, [r3, #0]
 8006dd4:	681b      	ldr	r3, [r3, #0]
 8006dd6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006dda:	2b40      	cmp	r3, #64	@ 0x40
 8006ddc:	d007      	beq.n	8006dee <HAL_SPI_TransmitReceive+0x118>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8006dde:	68fb      	ldr	r3, [r7, #12]
 8006de0:	681b      	ldr	r3, [r3, #0]
 8006de2:	681a      	ldr	r2, [r3, #0]
 8006de4:	68fb      	ldr	r3, [r7, #12]
 8006de6:	681b      	ldr	r3, [r3, #0]
 8006de8:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8006dec:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8006dee:	68fb      	ldr	r3, [r7, #12]
 8006df0:	68db      	ldr	r3, [r3, #12]
 8006df2:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8006df6:	f240 8083 	bls.w	8006f00 <HAL_SPI_TransmitReceive+0x22a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006dfa:	68fb      	ldr	r3, [r7, #12]
 8006dfc:	685b      	ldr	r3, [r3, #4]
 8006dfe:	2b00      	cmp	r3, #0
 8006e00:	d002      	beq.n	8006e08 <HAL_SPI_TransmitReceive+0x132>
 8006e02:	8afb      	ldrh	r3, [r7, #22]
 8006e04:	2b01      	cmp	r3, #1
 8006e06:	d16f      	bne.n	8006ee8 <HAL_SPI_TransmitReceive+0x212>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8006e08:	68fb      	ldr	r3, [r7, #12]
 8006e0a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006e0c:	881a      	ldrh	r2, [r3, #0]
 8006e0e:	68fb      	ldr	r3, [r7, #12]
 8006e10:	681b      	ldr	r3, [r3, #0]
 8006e12:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8006e14:	68fb      	ldr	r3, [r7, #12]
 8006e16:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006e18:	1c9a      	adds	r2, r3, #2
 8006e1a:	68fb      	ldr	r3, [r7, #12]
 8006e1c:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 8006e1e:	68fb      	ldr	r3, [r7, #12]
 8006e20:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006e22:	b29b      	uxth	r3, r3
 8006e24:	3b01      	subs	r3, #1
 8006e26:	b29a      	uxth	r2, r3
 8006e28:	68fb      	ldr	r3, [r7, #12]
 8006e2a:	87da      	strh	r2, [r3, #62]	@ 0x3e
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8006e2c:	e05c      	b.n	8006ee8 <HAL_SPI_TransmitReceive+0x212>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8006e2e:	68fb      	ldr	r3, [r7, #12]
 8006e30:	681b      	ldr	r3, [r3, #0]
 8006e32:	689b      	ldr	r3, [r3, #8]
 8006e34:	f003 0302 	and.w	r3, r3, #2
 8006e38:	2b02      	cmp	r3, #2
 8006e3a:	d11b      	bne.n	8006e74 <HAL_SPI_TransmitReceive+0x19e>
 8006e3c:	68fb      	ldr	r3, [r7, #12]
 8006e3e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006e40:	b29b      	uxth	r3, r3
 8006e42:	2b00      	cmp	r3, #0
 8006e44:	d016      	beq.n	8006e74 <HAL_SPI_TransmitReceive+0x19e>
 8006e46:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006e48:	2b01      	cmp	r3, #1
 8006e4a:	d113      	bne.n	8006e74 <HAL_SPI_TransmitReceive+0x19e>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8006e4c:	68fb      	ldr	r3, [r7, #12]
 8006e4e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006e50:	881a      	ldrh	r2, [r3, #0]
 8006e52:	68fb      	ldr	r3, [r7, #12]
 8006e54:	681b      	ldr	r3, [r3, #0]
 8006e56:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8006e58:	68fb      	ldr	r3, [r7, #12]
 8006e5a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006e5c:	1c9a      	adds	r2, r3, #2
 8006e5e:	68fb      	ldr	r3, [r7, #12]
 8006e60:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8006e62:	68fb      	ldr	r3, [r7, #12]
 8006e64:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006e66:	b29b      	uxth	r3, r3
 8006e68:	3b01      	subs	r3, #1
 8006e6a:	b29a      	uxth	r2, r3
 8006e6c:	68fb      	ldr	r3, [r7, #12]
 8006e6e:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8006e70:	2300      	movs	r3, #0
 8006e72:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8006e74:	68fb      	ldr	r3, [r7, #12]
 8006e76:	681b      	ldr	r3, [r3, #0]
 8006e78:	689b      	ldr	r3, [r3, #8]
 8006e7a:	f003 0301 	and.w	r3, r3, #1
 8006e7e:	2b01      	cmp	r3, #1
 8006e80:	d11c      	bne.n	8006ebc <HAL_SPI_TransmitReceive+0x1e6>
 8006e82:	68fb      	ldr	r3, [r7, #12]
 8006e84:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8006e88:	b29b      	uxth	r3, r3
 8006e8a:	2b00      	cmp	r3, #0
 8006e8c:	d016      	beq.n	8006ebc <HAL_SPI_TransmitReceive+0x1e6>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8006e8e:	68fb      	ldr	r3, [r7, #12]
 8006e90:	681b      	ldr	r3, [r3, #0]
 8006e92:	68da      	ldr	r2, [r3, #12]
 8006e94:	68fb      	ldr	r3, [r7, #12]
 8006e96:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006e98:	b292      	uxth	r2, r2
 8006e9a:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8006e9c:	68fb      	ldr	r3, [r7, #12]
 8006e9e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006ea0:	1c9a      	adds	r2, r3, #2
 8006ea2:	68fb      	ldr	r3, [r7, #12]
 8006ea4:	641a      	str	r2, [r3, #64]	@ 0x40
        hspi->RxXferCount--;
 8006ea6:	68fb      	ldr	r3, [r7, #12]
 8006ea8:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8006eac:	b29b      	uxth	r3, r3
 8006eae:	3b01      	subs	r3, #1
 8006eb0:	b29a      	uxth	r2, r3
 8006eb2:	68fb      	ldr	r3, [r7, #12]
 8006eb4:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8006eb8:	2301      	movs	r3, #1
 8006eba:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8006ebc:	f7fd ffdc 	bl	8004e78 <HAL_GetTick>
 8006ec0:	4602      	mov	r2, r0
 8006ec2:	6a3b      	ldr	r3, [r7, #32]
 8006ec4:	1ad3      	subs	r3, r2, r3
 8006ec6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006ec8:	429a      	cmp	r2, r3
 8006eca:	d80d      	bhi.n	8006ee8 <HAL_SPI_TransmitReceive+0x212>
 8006ecc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006ece:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8006ed2:	d009      	beq.n	8006ee8 <HAL_SPI_TransmitReceive+0x212>
      {
        hspi->State = HAL_SPI_STATE_READY;
 8006ed4:	68fb      	ldr	r3, [r7, #12]
 8006ed6:	2201      	movs	r2, #1
 8006ed8:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
        __HAL_UNLOCK(hspi);
 8006edc:	68fb      	ldr	r3, [r7, #12]
 8006ede:	2200      	movs	r2, #0
 8006ee0:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
        return HAL_TIMEOUT;
 8006ee4:	2303      	movs	r3, #3
 8006ee6:	e111      	b.n	800710c <HAL_SPI_TransmitReceive+0x436>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8006ee8:	68fb      	ldr	r3, [r7, #12]
 8006eea:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006eec:	b29b      	uxth	r3, r3
 8006eee:	2b00      	cmp	r3, #0
 8006ef0:	d19d      	bne.n	8006e2e <HAL_SPI_TransmitReceive+0x158>
 8006ef2:	68fb      	ldr	r3, [r7, #12]
 8006ef4:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8006ef8:	b29b      	uxth	r3, r3
 8006efa:	2b00      	cmp	r3, #0
 8006efc:	d197      	bne.n	8006e2e <HAL_SPI_TransmitReceive+0x158>
 8006efe:	e0e5      	b.n	80070cc <HAL_SPI_TransmitReceive+0x3f6>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006f00:	68fb      	ldr	r3, [r7, #12]
 8006f02:	685b      	ldr	r3, [r3, #4]
 8006f04:	2b00      	cmp	r3, #0
 8006f06:	d003      	beq.n	8006f10 <HAL_SPI_TransmitReceive+0x23a>
 8006f08:	8afb      	ldrh	r3, [r7, #22]
 8006f0a:	2b01      	cmp	r3, #1
 8006f0c:	f040 80d1 	bne.w	80070b2 <HAL_SPI_TransmitReceive+0x3dc>
    {
      if (hspi->TxXferCount > 1U)
 8006f10:	68fb      	ldr	r3, [r7, #12]
 8006f12:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006f14:	b29b      	uxth	r3, r3
 8006f16:	2b01      	cmp	r3, #1
 8006f18:	d912      	bls.n	8006f40 <HAL_SPI_TransmitReceive+0x26a>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8006f1a:	68fb      	ldr	r3, [r7, #12]
 8006f1c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006f1e:	881a      	ldrh	r2, [r3, #0]
 8006f20:	68fb      	ldr	r3, [r7, #12]
 8006f22:	681b      	ldr	r3, [r3, #0]
 8006f24:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8006f26:	68fb      	ldr	r3, [r7, #12]
 8006f28:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006f2a:	1c9a      	adds	r2, r3, #2
 8006f2c:	68fb      	ldr	r3, [r7, #12]
 8006f2e:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount -= 2U;
 8006f30:	68fb      	ldr	r3, [r7, #12]
 8006f32:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006f34:	b29b      	uxth	r3, r3
 8006f36:	3b02      	subs	r3, #2
 8006f38:	b29a      	uxth	r2, r3
 8006f3a:	68fb      	ldr	r3, [r7, #12]
 8006f3c:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8006f3e:	e0b8      	b.n	80070b2 <HAL_SPI_TransmitReceive+0x3dc>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = *((const uint8_t *)hspi->pTxBuffPtr);
 8006f40:	68fb      	ldr	r3, [r7, #12]
 8006f42:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8006f44:	68fb      	ldr	r3, [r7, #12]
 8006f46:	681b      	ldr	r3, [r3, #0]
 8006f48:	330c      	adds	r3, #12
 8006f4a:	7812      	ldrb	r2, [r2, #0]
 8006f4c:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8006f4e:	68fb      	ldr	r3, [r7, #12]
 8006f50:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006f52:	1c5a      	adds	r2, r3, #1
 8006f54:	68fb      	ldr	r3, [r7, #12]
 8006f56:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8006f58:	68fb      	ldr	r3, [r7, #12]
 8006f5a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006f5c:	b29b      	uxth	r3, r3
 8006f5e:	3b01      	subs	r3, #1
 8006f60:	b29a      	uxth	r2, r3
 8006f62:	68fb      	ldr	r3, [r7, #12]
 8006f64:	87da      	strh	r2, [r3, #62]	@ 0x3e
          SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
        }
#endif /* USE_SPI_CRC */
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8006f66:	e0a4      	b.n	80070b2 <HAL_SPI_TransmitReceive+0x3dc>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8006f68:	68fb      	ldr	r3, [r7, #12]
 8006f6a:	681b      	ldr	r3, [r3, #0]
 8006f6c:	689b      	ldr	r3, [r3, #8]
 8006f6e:	f003 0302 	and.w	r3, r3, #2
 8006f72:	2b02      	cmp	r3, #2
 8006f74:	d134      	bne.n	8006fe0 <HAL_SPI_TransmitReceive+0x30a>
 8006f76:	68fb      	ldr	r3, [r7, #12]
 8006f78:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006f7a:	b29b      	uxth	r3, r3
 8006f7c:	2b00      	cmp	r3, #0
 8006f7e:	d02f      	beq.n	8006fe0 <HAL_SPI_TransmitReceive+0x30a>
 8006f80:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006f82:	2b01      	cmp	r3, #1
 8006f84:	d12c      	bne.n	8006fe0 <HAL_SPI_TransmitReceive+0x30a>
      {
        if (hspi->TxXferCount > 1U)
 8006f86:	68fb      	ldr	r3, [r7, #12]
 8006f88:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006f8a:	b29b      	uxth	r3, r3
 8006f8c:	2b01      	cmp	r3, #1
 8006f8e:	d912      	bls.n	8006fb6 <HAL_SPI_TransmitReceive+0x2e0>
        {
          hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8006f90:	68fb      	ldr	r3, [r7, #12]
 8006f92:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006f94:	881a      	ldrh	r2, [r3, #0]
 8006f96:	68fb      	ldr	r3, [r7, #12]
 8006f98:	681b      	ldr	r3, [r3, #0]
 8006f9a:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8006f9c:	68fb      	ldr	r3, [r7, #12]
 8006f9e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006fa0:	1c9a      	adds	r2, r3, #2
 8006fa2:	68fb      	ldr	r3, [r7, #12]
 8006fa4:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount -= 2U;
 8006fa6:	68fb      	ldr	r3, [r7, #12]
 8006fa8:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006faa:	b29b      	uxth	r3, r3
 8006fac:	3b02      	subs	r3, #2
 8006fae:	b29a      	uxth	r2, r3
 8006fb0:	68fb      	ldr	r3, [r7, #12]
 8006fb2:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8006fb4:	e012      	b.n	8006fdc <HAL_SPI_TransmitReceive+0x306>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = *((const uint8_t *)hspi->pTxBuffPtr);
 8006fb6:	68fb      	ldr	r3, [r7, #12]
 8006fb8:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8006fba:	68fb      	ldr	r3, [r7, #12]
 8006fbc:	681b      	ldr	r3, [r3, #0]
 8006fbe:	330c      	adds	r3, #12
 8006fc0:	7812      	ldrb	r2, [r2, #0]
 8006fc2:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8006fc4:	68fb      	ldr	r3, [r7, #12]
 8006fc6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006fc8:	1c5a      	adds	r2, r3, #1
 8006fca:	68fb      	ldr	r3, [r7, #12]
 8006fcc:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount--;
 8006fce:	68fb      	ldr	r3, [r7, #12]
 8006fd0:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006fd2:	b29b      	uxth	r3, r3
 8006fd4:	3b01      	subs	r3, #1
 8006fd6:	b29a      	uxth	r2, r3
 8006fd8:	68fb      	ldr	r3, [r7, #12]
 8006fda:	87da      	strh	r2, [r3, #62]	@ 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8006fdc:	2300      	movs	r3, #0
 8006fde:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8006fe0:	68fb      	ldr	r3, [r7, #12]
 8006fe2:	681b      	ldr	r3, [r3, #0]
 8006fe4:	689b      	ldr	r3, [r3, #8]
 8006fe6:	f003 0301 	and.w	r3, r3, #1
 8006fea:	2b01      	cmp	r3, #1
 8006fec:	d148      	bne.n	8007080 <HAL_SPI_TransmitReceive+0x3aa>
 8006fee:	68fb      	ldr	r3, [r7, #12]
 8006ff0:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8006ff4:	b29b      	uxth	r3, r3
 8006ff6:	2b00      	cmp	r3, #0
 8006ff8:	d042      	beq.n	8007080 <HAL_SPI_TransmitReceive+0x3aa>
      {
        if (hspi->RxXferCount > 1U)
 8006ffa:	68fb      	ldr	r3, [r7, #12]
 8006ffc:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8007000:	b29b      	uxth	r3, r3
 8007002:	2b01      	cmp	r3, #1
 8007004:	d923      	bls.n	800704e <HAL_SPI_TransmitReceive+0x378>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8007006:	68fb      	ldr	r3, [r7, #12]
 8007008:	681b      	ldr	r3, [r3, #0]
 800700a:	68da      	ldr	r2, [r3, #12]
 800700c:	68fb      	ldr	r3, [r7, #12]
 800700e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007010:	b292      	uxth	r2, r2
 8007012:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 8007014:	68fb      	ldr	r3, [r7, #12]
 8007016:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007018:	1c9a      	adds	r2, r3, #2
 800701a:	68fb      	ldr	r3, [r7, #12]
 800701c:	641a      	str	r2, [r3, #64]	@ 0x40
          hspi->RxXferCount -= 2U;
 800701e:	68fb      	ldr	r3, [r7, #12]
 8007020:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8007024:	b29b      	uxth	r3, r3
 8007026:	3b02      	subs	r3, #2
 8007028:	b29a      	uxth	r2, r3
 800702a:	68fb      	ldr	r3, [r7, #12]
 800702c:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
          if (hspi->RxXferCount <= 1U)
 8007030:	68fb      	ldr	r3, [r7, #12]
 8007032:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8007036:	b29b      	uxth	r3, r3
 8007038:	2b01      	cmp	r3, #1
 800703a:	d81f      	bhi.n	800707c <HAL_SPI_TransmitReceive+0x3a6>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800703c:	68fb      	ldr	r3, [r7, #12]
 800703e:	681b      	ldr	r3, [r3, #0]
 8007040:	685a      	ldr	r2, [r3, #4]
 8007042:	68fb      	ldr	r3, [r7, #12]
 8007044:	681b      	ldr	r3, [r3, #0]
 8007046:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 800704a:	605a      	str	r2, [r3, #4]
 800704c:	e016      	b.n	800707c <HAL_SPI_TransmitReceive+0x3a6>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 800704e:	68fb      	ldr	r3, [r7, #12]
 8007050:	681b      	ldr	r3, [r3, #0]
 8007052:	f103 020c 	add.w	r2, r3, #12
 8007056:	68fb      	ldr	r3, [r7, #12]
 8007058:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800705a:	7812      	ldrb	r2, [r2, #0]
 800705c:	b2d2      	uxtb	r2, r2
 800705e:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 8007060:	68fb      	ldr	r3, [r7, #12]
 8007062:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007064:	1c5a      	adds	r2, r3, #1
 8007066:	68fb      	ldr	r3, [r7, #12]
 8007068:	641a      	str	r2, [r3, #64]	@ 0x40
          hspi->RxXferCount--;
 800706a:	68fb      	ldr	r3, [r7, #12]
 800706c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8007070:	b29b      	uxth	r3, r3
 8007072:	3b01      	subs	r3, #1
 8007074:	b29a      	uxth	r2, r3
 8007076:	68fb      	ldr	r3, [r7, #12]
 8007078:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800707c:	2301      	movs	r3, #1
 800707e:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8007080:	f7fd fefa 	bl	8004e78 <HAL_GetTick>
 8007084:	4602      	mov	r2, r0
 8007086:	6a3b      	ldr	r3, [r7, #32]
 8007088:	1ad3      	subs	r3, r2, r3
 800708a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800708c:	429a      	cmp	r2, r3
 800708e:	d803      	bhi.n	8007098 <HAL_SPI_TransmitReceive+0x3c2>
 8007090:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007092:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8007096:	d102      	bne.n	800709e <HAL_SPI_TransmitReceive+0x3c8>
 8007098:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800709a:	2b00      	cmp	r3, #0
 800709c:	d109      	bne.n	80070b2 <HAL_SPI_TransmitReceive+0x3dc>
      {
        hspi->State = HAL_SPI_STATE_READY;
 800709e:	68fb      	ldr	r3, [r7, #12]
 80070a0:	2201      	movs	r2, #1
 80070a2:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
        __HAL_UNLOCK(hspi);
 80070a6:	68fb      	ldr	r3, [r7, #12]
 80070a8:	2200      	movs	r2, #0
 80070aa:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
        return HAL_TIMEOUT;
 80070ae:	2303      	movs	r3, #3
 80070b0:	e02c      	b.n	800710c <HAL_SPI_TransmitReceive+0x436>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80070b2:	68fb      	ldr	r3, [r7, #12]
 80070b4:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80070b6:	b29b      	uxth	r3, r3
 80070b8:	2b00      	cmp	r3, #0
 80070ba:	f47f af55 	bne.w	8006f68 <HAL_SPI_TransmitReceive+0x292>
 80070be:	68fb      	ldr	r3, [r7, #12]
 80070c0:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 80070c4:	b29b      	uxth	r3, r3
 80070c6:	2b00      	cmp	r3, #0
 80070c8:	f47f af4e 	bne.w	8006f68 <HAL_SPI_TransmitReceive+0x292>
    return HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80070cc:	6a3a      	ldr	r2, [r7, #32]
 80070ce:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 80070d0:	68f8      	ldr	r0, [r7, #12]
 80070d2:	f000 f93d 	bl	8007350 <SPI_EndRxTxTransaction>
 80070d6:	4603      	mov	r3, r0
 80070d8:	2b00      	cmp	r3, #0
 80070da:	d008      	beq.n	80070ee <HAL_SPI_TransmitReceive+0x418>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80070dc:	68fb      	ldr	r3, [r7, #12]
 80070de:	2220      	movs	r2, #32
 80070e0:	661a      	str	r2, [r3, #96]	@ 0x60
    __HAL_UNLOCK(hspi);
 80070e2:	68fb      	ldr	r3, [r7, #12]
 80070e4:	2200      	movs	r2, #0
 80070e6:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
    return HAL_ERROR;
 80070ea:	2301      	movs	r3, #1
 80070ec:	e00e      	b.n	800710c <HAL_SPI_TransmitReceive+0x436>
  }


  hspi->State = HAL_SPI_STATE_READY;
 80070ee:	68fb      	ldr	r3, [r7, #12]
 80070f0:	2201      	movs	r2, #1
 80070f2:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 80070f6:	68fb      	ldr	r3, [r7, #12]
 80070f8:	2200      	movs	r2, #0
 80070fa:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80070fe:	68fb      	ldr	r3, [r7, #12]
 8007100:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8007102:	2b00      	cmp	r3, #0
 8007104:	d001      	beq.n	800710a <HAL_SPI_TransmitReceive+0x434>
  {
    return HAL_ERROR;
 8007106:	2301      	movs	r3, #1
 8007108:	e000      	b.n	800710c <HAL_SPI_TransmitReceive+0x436>
  }
  else
  {
    return HAL_OK;
 800710a:	2300      	movs	r3, #0
  }
}
 800710c:	4618      	mov	r0, r3
 800710e:	3728      	adds	r7, #40	@ 0x28
 8007110:	46bd      	mov	sp, r7
 8007112:	bd80      	pop	{r7, pc}

08007114 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8007114:	b580      	push	{r7, lr}
 8007116:	b088      	sub	sp, #32
 8007118:	af00      	add	r7, sp, #0
 800711a:	60f8      	str	r0, [r7, #12]
 800711c:	60b9      	str	r1, [r7, #8]
 800711e:	603b      	str	r3, [r7, #0]
 8007120:	4613      	mov	r3, r2
 8007122:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8007124:	f7fd fea8 	bl	8004e78 <HAL_GetTick>
 8007128:	4602      	mov	r2, r0
 800712a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800712c:	1a9b      	subs	r3, r3, r2
 800712e:	683a      	ldr	r2, [r7, #0]
 8007130:	4413      	add	r3, r2
 8007132:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8007134:	f7fd fea0 	bl	8004e78 <HAL_GetTick>
 8007138:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800713a:	4b39      	ldr	r3, [pc, #228]	@ (8007220 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 800713c:	681b      	ldr	r3, [r3, #0]
 800713e:	015b      	lsls	r3, r3, #5
 8007140:	0d1b      	lsrs	r3, r3, #20
 8007142:	69fa      	ldr	r2, [r7, #28]
 8007144:	fb02 f303 	mul.w	r3, r2, r3
 8007148:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800714a:	e054      	b.n	80071f6 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 800714c:	683b      	ldr	r3, [r7, #0]
 800714e:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8007152:	d050      	beq.n	80071f6 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8007154:	f7fd fe90 	bl	8004e78 <HAL_GetTick>
 8007158:	4602      	mov	r2, r0
 800715a:	69bb      	ldr	r3, [r7, #24]
 800715c:	1ad3      	subs	r3, r2, r3
 800715e:	69fa      	ldr	r2, [r7, #28]
 8007160:	429a      	cmp	r2, r3
 8007162:	d902      	bls.n	800716a <SPI_WaitFlagStateUntilTimeout+0x56>
 8007164:	69fb      	ldr	r3, [r7, #28]
 8007166:	2b00      	cmp	r3, #0
 8007168:	d13d      	bne.n	80071e6 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800716a:	68fb      	ldr	r3, [r7, #12]
 800716c:	681b      	ldr	r3, [r3, #0]
 800716e:	685a      	ldr	r2, [r3, #4]
 8007170:	68fb      	ldr	r3, [r7, #12]
 8007172:	681b      	ldr	r3, [r3, #0]
 8007174:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8007178:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800717a:	68fb      	ldr	r3, [r7, #12]
 800717c:	685b      	ldr	r3, [r3, #4]
 800717e:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8007182:	d111      	bne.n	80071a8 <SPI_WaitFlagStateUntilTimeout+0x94>
 8007184:	68fb      	ldr	r3, [r7, #12]
 8007186:	689b      	ldr	r3, [r3, #8]
 8007188:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800718c:	d004      	beq.n	8007198 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800718e:	68fb      	ldr	r3, [r7, #12]
 8007190:	689b      	ldr	r3, [r3, #8]
 8007192:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007196:	d107      	bne.n	80071a8 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8007198:	68fb      	ldr	r3, [r7, #12]
 800719a:	681b      	ldr	r3, [r3, #0]
 800719c:	681a      	ldr	r2, [r3, #0]
 800719e:	68fb      	ldr	r3, [r7, #12]
 80071a0:	681b      	ldr	r3, [r3, #0]
 80071a2:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80071a6:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80071a8:	68fb      	ldr	r3, [r7, #12]
 80071aa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80071ac:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80071b0:	d10f      	bne.n	80071d2 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 80071b2:	68fb      	ldr	r3, [r7, #12]
 80071b4:	681b      	ldr	r3, [r3, #0]
 80071b6:	681a      	ldr	r2, [r3, #0]
 80071b8:	68fb      	ldr	r3, [r7, #12]
 80071ba:	681b      	ldr	r3, [r3, #0]
 80071bc:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80071c0:	601a      	str	r2, [r3, #0]
 80071c2:	68fb      	ldr	r3, [r7, #12]
 80071c4:	681b      	ldr	r3, [r3, #0]
 80071c6:	681a      	ldr	r2, [r3, #0]
 80071c8:	68fb      	ldr	r3, [r7, #12]
 80071ca:	681b      	ldr	r3, [r3, #0]
 80071cc:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80071d0:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80071d2:	68fb      	ldr	r3, [r7, #12]
 80071d4:	2201      	movs	r2, #1
 80071d6:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80071da:	68fb      	ldr	r3, [r7, #12]
 80071dc:	2200      	movs	r2, #0
 80071de:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 80071e2:	2303      	movs	r3, #3
 80071e4:	e017      	b.n	8007216 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80071e6:	697b      	ldr	r3, [r7, #20]
 80071e8:	2b00      	cmp	r3, #0
 80071ea:	d101      	bne.n	80071f0 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 80071ec:	2300      	movs	r3, #0
 80071ee:	61fb      	str	r3, [r7, #28]
      }
      count--;
 80071f0:	697b      	ldr	r3, [r7, #20]
 80071f2:	3b01      	subs	r3, #1
 80071f4:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80071f6:	68fb      	ldr	r3, [r7, #12]
 80071f8:	681b      	ldr	r3, [r3, #0]
 80071fa:	689a      	ldr	r2, [r3, #8]
 80071fc:	68bb      	ldr	r3, [r7, #8]
 80071fe:	4013      	ands	r3, r2
 8007200:	68ba      	ldr	r2, [r7, #8]
 8007202:	429a      	cmp	r2, r3
 8007204:	bf0c      	ite	eq
 8007206:	2301      	moveq	r3, #1
 8007208:	2300      	movne	r3, #0
 800720a:	b2db      	uxtb	r3, r3
 800720c:	461a      	mov	r2, r3
 800720e:	79fb      	ldrb	r3, [r7, #7]
 8007210:	429a      	cmp	r2, r3
 8007212:	d19b      	bne.n	800714c <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8007214:	2300      	movs	r3, #0
}
 8007216:	4618      	mov	r0, r3
 8007218:	3720      	adds	r7, #32
 800721a:	46bd      	mov	sp, r7
 800721c:	bd80      	pop	{r7, pc}
 800721e:	bf00      	nop
 8007220:	20000008 	.word	0x20000008

08007224 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8007224:	b580      	push	{r7, lr}
 8007226:	b08a      	sub	sp, #40	@ 0x28
 8007228:	af00      	add	r7, sp, #0
 800722a:	60f8      	str	r0, [r7, #12]
 800722c:	60b9      	str	r1, [r7, #8]
 800722e:	607a      	str	r2, [r7, #4]
 8007230:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO const uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 8007232:	2300      	movs	r3, #0
 8007234:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8007236:	f7fd fe1f 	bl	8004e78 <HAL_GetTick>
 800723a:	4602      	mov	r2, r0
 800723c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800723e:	1a9b      	subs	r3, r3, r2
 8007240:	683a      	ldr	r2, [r7, #0]
 8007242:	4413      	add	r3, r2
 8007244:	627b      	str	r3, [r7, #36]	@ 0x24
  tmp_tickstart = HAL_GetTick();
 8007246:	f7fd fe17 	bl	8004e78 <HAL_GetTick>
 800724a:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 800724c:	68fb      	ldr	r3, [r7, #12]
 800724e:	681b      	ldr	r3, [r3, #0]
 8007250:	330c      	adds	r3, #12
 8007252:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8007254:	4b3d      	ldr	r3, [pc, #244]	@ (800734c <SPI_WaitFifoStateUntilTimeout+0x128>)
 8007256:	681a      	ldr	r2, [r3, #0]
 8007258:	4613      	mov	r3, r2
 800725a:	009b      	lsls	r3, r3, #2
 800725c:	4413      	add	r3, r2
 800725e:	00da      	lsls	r2, r3, #3
 8007260:	1ad3      	subs	r3, r2, r3
 8007262:	0d1b      	lsrs	r3, r3, #20
 8007264:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007266:	fb02 f303 	mul.w	r3, r2, r3
 800726a:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 800726c:	e060      	b.n	8007330 <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 800726e:	68bb      	ldr	r3, [r7, #8]
 8007270:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 8007274:	d107      	bne.n	8007286 <SPI_WaitFifoStateUntilTimeout+0x62>
 8007276:	687b      	ldr	r3, [r7, #4]
 8007278:	2b00      	cmp	r3, #0
 800727a:	d104      	bne.n	8007286 <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 800727c:	69fb      	ldr	r3, [r7, #28]
 800727e:	781b      	ldrb	r3, [r3, #0]
 8007280:	b2db      	uxtb	r3, r3
 8007282:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 8007284:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 8007286:	683b      	ldr	r3, [r7, #0]
 8007288:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800728c:	d050      	beq.n	8007330 <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800728e:	f7fd fdf3 	bl	8004e78 <HAL_GetTick>
 8007292:	4602      	mov	r2, r0
 8007294:	6a3b      	ldr	r3, [r7, #32]
 8007296:	1ad3      	subs	r3, r2, r3
 8007298:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800729a:	429a      	cmp	r2, r3
 800729c:	d902      	bls.n	80072a4 <SPI_WaitFifoStateUntilTimeout+0x80>
 800729e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80072a0:	2b00      	cmp	r3, #0
 80072a2:	d13d      	bne.n	8007320 <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80072a4:	68fb      	ldr	r3, [r7, #12]
 80072a6:	681b      	ldr	r3, [r3, #0]
 80072a8:	685a      	ldr	r2, [r3, #4]
 80072aa:	68fb      	ldr	r3, [r7, #12]
 80072ac:	681b      	ldr	r3, [r3, #0]
 80072ae:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 80072b2:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80072b4:	68fb      	ldr	r3, [r7, #12]
 80072b6:	685b      	ldr	r3, [r3, #4]
 80072b8:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80072bc:	d111      	bne.n	80072e2 <SPI_WaitFifoStateUntilTimeout+0xbe>
 80072be:	68fb      	ldr	r3, [r7, #12]
 80072c0:	689b      	ldr	r3, [r3, #8]
 80072c2:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80072c6:	d004      	beq.n	80072d2 <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80072c8:	68fb      	ldr	r3, [r7, #12]
 80072ca:	689b      	ldr	r3, [r3, #8]
 80072cc:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80072d0:	d107      	bne.n	80072e2 <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80072d2:	68fb      	ldr	r3, [r7, #12]
 80072d4:	681b      	ldr	r3, [r3, #0]
 80072d6:	681a      	ldr	r2, [r3, #0]
 80072d8:	68fb      	ldr	r3, [r7, #12]
 80072da:	681b      	ldr	r3, [r3, #0]
 80072dc:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80072e0:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80072e2:	68fb      	ldr	r3, [r7, #12]
 80072e4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80072e6:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80072ea:	d10f      	bne.n	800730c <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 80072ec:	68fb      	ldr	r3, [r7, #12]
 80072ee:	681b      	ldr	r3, [r3, #0]
 80072f0:	681a      	ldr	r2, [r3, #0]
 80072f2:	68fb      	ldr	r3, [r7, #12]
 80072f4:	681b      	ldr	r3, [r3, #0]
 80072f6:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80072fa:	601a      	str	r2, [r3, #0]
 80072fc:	68fb      	ldr	r3, [r7, #12]
 80072fe:	681b      	ldr	r3, [r3, #0]
 8007300:	681a      	ldr	r2, [r3, #0]
 8007302:	68fb      	ldr	r3, [r7, #12]
 8007304:	681b      	ldr	r3, [r3, #0]
 8007306:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800730a:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800730c:	68fb      	ldr	r3, [r7, #12]
 800730e:	2201      	movs	r2, #1
 8007310:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8007314:	68fb      	ldr	r3, [r7, #12]
 8007316:	2200      	movs	r2, #0
 8007318:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 800731c:	2303      	movs	r3, #3
 800731e:	e010      	b.n	8007342 <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8007320:	69bb      	ldr	r3, [r7, #24]
 8007322:	2b00      	cmp	r3, #0
 8007324:	d101      	bne.n	800732a <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 8007326:	2300      	movs	r3, #0
 8007328:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      count--;
 800732a:	69bb      	ldr	r3, [r7, #24]
 800732c:	3b01      	subs	r3, #1
 800732e:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 8007330:	68fb      	ldr	r3, [r7, #12]
 8007332:	681b      	ldr	r3, [r3, #0]
 8007334:	689a      	ldr	r2, [r3, #8]
 8007336:	68bb      	ldr	r3, [r7, #8]
 8007338:	4013      	ands	r3, r2
 800733a:	687a      	ldr	r2, [r7, #4]
 800733c:	429a      	cmp	r2, r3
 800733e:	d196      	bne.n	800726e <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 8007340:	2300      	movs	r3, #0
}
 8007342:	4618      	mov	r0, r3
 8007344:	3728      	adds	r7, #40	@ 0x28
 8007346:	46bd      	mov	sp, r7
 8007348:	bd80      	pop	{r7, pc}
 800734a:	bf00      	nop
 800734c:	20000008 	.word	0x20000008

08007350 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8007350:	b580      	push	{r7, lr}
 8007352:	b086      	sub	sp, #24
 8007354:	af02      	add	r7, sp, #8
 8007356:	60f8      	str	r0, [r7, #12]
 8007358:	60b9      	str	r1, [r7, #8]
 800735a:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800735c:	687b      	ldr	r3, [r7, #4]
 800735e:	9300      	str	r3, [sp, #0]
 8007360:	68bb      	ldr	r3, [r7, #8]
 8007362:	2200      	movs	r2, #0
 8007364:	f44f 51c0 	mov.w	r1, #6144	@ 0x1800
 8007368:	68f8      	ldr	r0, [r7, #12]
 800736a:	f7ff ff5b 	bl	8007224 <SPI_WaitFifoStateUntilTimeout>
 800736e:	4603      	mov	r3, r0
 8007370:	2b00      	cmp	r3, #0
 8007372:	d007      	beq.n	8007384 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007374:	68fb      	ldr	r3, [r7, #12]
 8007376:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8007378:	f043 0220 	orr.w	r2, r3, #32
 800737c:	68fb      	ldr	r3, [r7, #12]
 800737e:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8007380:	2303      	movs	r3, #3
 8007382:	e027      	b.n	80073d4 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8007384:	687b      	ldr	r3, [r7, #4]
 8007386:	9300      	str	r3, [sp, #0]
 8007388:	68bb      	ldr	r3, [r7, #8]
 800738a:	2200      	movs	r2, #0
 800738c:	2180      	movs	r1, #128	@ 0x80
 800738e:	68f8      	ldr	r0, [r7, #12]
 8007390:	f7ff fec0 	bl	8007114 <SPI_WaitFlagStateUntilTimeout>
 8007394:	4603      	mov	r3, r0
 8007396:	2b00      	cmp	r3, #0
 8007398:	d007      	beq.n	80073aa <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800739a:	68fb      	ldr	r3, [r7, #12]
 800739c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800739e:	f043 0220 	orr.w	r2, r3, #32
 80073a2:	68fb      	ldr	r3, [r7, #12]
 80073a4:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 80073a6:	2303      	movs	r3, #3
 80073a8:	e014      	b.n	80073d4 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80073aa:	687b      	ldr	r3, [r7, #4]
 80073ac:	9300      	str	r3, [sp, #0]
 80073ae:	68bb      	ldr	r3, [r7, #8]
 80073b0:	2200      	movs	r2, #0
 80073b2:	f44f 61c0 	mov.w	r1, #1536	@ 0x600
 80073b6:	68f8      	ldr	r0, [r7, #12]
 80073b8:	f7ff ff34 	bl	8007224 <SPI_WaitFifoStateUntilTimeout>
 80073bc:	4603      	mov	r3, r0
 80073be:	2b00      	cmp	r3, #0
 80073c0:	d007      	beq.n	80073d2 <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80073c2:	68fb      	ldr	r3, [r7, #12]
 80073c4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80073c6:	f043 0220 	orr.w	r2, r3, #32
 80073ca:	68fb      	ldr	r3, [r7, #12]
 80073cc:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 80073ce:	2303      	movs	r3, #3
 80073d0:	e000      	b.n	80073d4 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 80073d2:	2300      	movs	r3, #0
}
 80073d4:	4618      	mov	r0, r3
 80073d6:	3710      	adds	r7, #16
 80073d8:	46bd      	mov	sp, r7
 80073da:	bd80      	pop	{r7, pc}

080073dc <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80073dc:	b580      	push	{r7, lr}
 80073de:	b082      	sub	sp, #8
 80073e0:	af00      	add	r7, sp, #0
 80073e2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80073e4:	687b      	ldr	r3, [r7, #4]
 80073e6:	2b00      	cmp	r3, #0
 80073e8:	d101      	bne.n	80073ee <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80073ea:	2301      	movs	r3, #1
 80073ec:	e049      	b.n	8007482 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80073ee:	687b      	ldr	r3, [r7, #4]
 80073f0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80073f4:	b2db      	uxtb	r3, r3
 80073f6:	2b00      	cmp	r3, #0
 80073f8:	d106      	bne.n	8007408 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80073fa:	687b      	ldr	r3, [r7, #4]
 80073fc:	2200      	movs	r2, #0
 80073fe:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8007402:	6878      	ldr	r0, [r7, #4]
 8007404:	f7fa fe8c 	bl	8002120 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007408:	687b      	ldr	r3, [r7, #4]
 800740a:	2202      	movs	r2, #2
 800740c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007410:	687b      	ldr	r3, [r7, #4]
 8007412:	681a      	ldr	r2, [r3, #0]
 8007414:	687b      	ldr	r3, [r7, #4]
 8007416:	3304      	adds	r3, #4
 8007418:	4619      	mov	r1, r3
 800741a:	4610      	mov	r0, r2
 800741c:	f000 fe1e 	bl	800805c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007420:	687b      	ldr	r3, [r7, #4]
 8007422:	2201      	movs	r2, #1
 8007424:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007428:	687b      	ldr	r3, [r7, #4]
 800742a:	2201      	movs	r2, #1
 800742c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8007430:	687b      	ldr	r3, [r7, #4]
 8007432:	2201      	movs	r2, #1
 8007434:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8007438:	687b      	ldr	r3, [r7, #4]
 800743a:	2201      	movs	r2, #1
 800743c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8007440:	687b      	ldr	r3, [r7, #4]
 8007442:	2201      	movs	r2, #1
 8007444:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8007448:	687b      	ldr	r3, [r7, #4]
 800744a:	2201      	movs	r2, #1
 800744c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8007450:	687b      	ldr	r3, [r7, #4]
 8007452:	2201      	movs	r2, #1
 8007454:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007458:	687b      	ldr	r3, [r7, #4]
 800745a:	2201      	movs	r2, #1
 800745c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8007460:	687b      	ldr	r3, [r7, #4]
 8007462:	2201      	movs	r2, #1
 8007464:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8007468:	687b      	ldr	r3, [r7, #4]
 800746a:	2201      	movs	r2, #1
 800746c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8007470:	687b      	ldr	r3, [r7, #4]
 8007472:	2201      	movs	r2, #1
 8007474:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007478:	687b      	ldr	r3, [r7, #4]
 800747a:	2201      	movs	r2, #1
 800747c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8007480:	2300      	movs	r3, #0
}
 8007482:	4618      	mov	r0, r3
 8007484:	3708      	adds	r7, #8
 8007486:	46bd      	mov	sp, r7
 8007488:	bd80      	pop	{r7, pc}
	...

0800748c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800748c:	b480      	push	{r7}
 800748e:	b085      	sub	sp, #20
 8007490:	af00      	add	r7, sp, #0
 8007492:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8007494:	687b      	ldr	r3, [r7, #4]
 8007496:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800749a:	b2db      	uxtb	r3, r3
 800749c:	2b01      	cmp	r3, #1
 800749e:	d001      	beq.n	80074a4 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80074a0:	2301      	movs	r3, #1
 80074a2:	e04a      	b.n	800753a <HAL_TIM_Base_Start_IT+0xae>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80074a4:	687b      	ldr	r3, [r7, #4]
 80074a6:	2202      	movs	r2, #2
 80074a8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80074ac:	687b      	ldr	r3, [r7, #4]
 80074ae:	681b      	ldr	r3, [r3, #0]
 80074b0:	68da      	ldr	r2, [r3, #12]
 80074b2:	687b      	ldr	r3, [r7, #4]
 80074b4:	681b      	ldr	r3, [r3, #0]
 80074b6:	f042 0201 	orr.w	r2, r2, #1
 80074ba:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80074bc:	687b      	ldr	r3, [r7, #4]
 80074be:	681b      	ldr	r3, [r3, #0]
 80074c0:	4a21      	ldr	r2, [pc, #132]	@ (8007548 <HAL_TIM_Base_Start_IT+0xbc>)
 80074c2:	4293      	cmp	r3, r2
 80074c4:	d018      	beq.n	80074f8 <HAL_TIM_Base_Start_IT+0x6c>
 80074c6:	687b      	ldr	r3, [r7, #4]
 80074c8:	681b      	ldr	r3, [r3, #0]
 80074ca:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80074ce:	d013      	beq.n	80074f8 <HAL_TIM_Base_Start_IT+0x6c>
 80074d0:	687b      	ldr	r3, [r7, #4]
 80074d2:	681b      	ldr	r3, [r3, #0]
 80074d4:	4a1d      	ldr	r2, [pc, #116]	@ (800754c <HAL_TIM_Base_Start_IT+0xc0>)
 80074d6:	4293      	cmp	r3, r2
 80074d8:	d00e      	beq.n	80074f8 <HAL_TIM_Base_Start_IT+0x6c>
 80074da:	687b      	ldr	r3, [r7, #4]
 80074dc:	681b      	ldr	r3, [r3, #0]
 80074de:	4a1c      	ldr	r2, [pc, #112]	@ (8007550 <HAL_TIM_Base_Start_IT+0xc4>)
 80074e0:	4293      	cmp	r3, r2
 80074e2:	d009      	beq.n	80074f8 <HAL_TIM_Base_Start_IT+0x6c>
 80074e4:	687b      	ldr	r3, [r7, #4]
 80074e6:	681b      	ldr	r3, [r3, #0]
 80074e8:	4a1a      	ldr	r2, [pc, #104]	@ (8007554 <HAL_TIM_Base_Start_IT+0xc8>)
 80074ea:	4293      	cmp	r3, r2
 80074ec:	d004      	beq.n	80074f8 <HAL_TIM_Base_Start_IT+0x6c>
 80074ee:	687b      	ldr	r3, [r7, #4]
 80074f0:	681b      	ldr	r3, [r3, #0]
 80074f2:	4a19      	ldr	r2, [pc, #100]	@ (8007558 <HAL_TIM_Base_Start_IT+0xcc>)
 80074f4:	4293      	cmp	r3, r2
 80074f6:	d115      	bne.n	8007524 <HAL_TIM_Base_Start_IT+0x98>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80074f8:	687b      	ldr	r3, [r7, #4]
 80074fa:	681b      	ldr	r3, [r3, #0]
 80074fc:	689a      	ldr	r2, [r3, #8]
 80074fe:	4b17      	ldr	r3, [pc, #92]	@ (800755c <HAL_TIM_Base_Start_IT+0xd0>)
 8007500:	4013      	ands	r3, r2
 8007502:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007504:	68fb      	ldr	r3, [r7, #12]
 8007506:	2b06      	cmp	r3, #6
 8007508:	d015      	beq.n	8007536 <HAL_TIM_Base_Start_IT+0xaa>
 800750a:	68fb      	ldr	r3, [r7, #12]
 800750c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007510:	d011      	beq.n	8007536 <HAL_TIM_Base_Start_IT+0xaa>
    {
      __HAL_TIM_ENABLE(htim);
 8007512:	687b      	ldr	r3, [r7, #4]
 8007514:	681b      	ldr	r3, [r3, #0]
 8007516:	681a      	ldr	r2, [r3, #0]
 8007518:	687b      	ldr	r3, [r7, #4]
 800751a:	681b      	ldr	r3, [r3, #0]
 800751c:	f042 0201 	orr.w	r2, r2, #1
 8007520:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007522:	e008      	b.n	8007536 <HAL_TIM_Base_Start_IT+0xaa>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8007524:	687b      	ldr	r3, [r7, #4]
 8007526:	681b      	ldr	r3, [r3, #0]
 8007528:	681a      	ldr	r2, [r3, #0]
 800752a:	687b      	ldr	r3, [r7, #4]
 800752c:	681b      	ldr	r3, [r3, #0]
 800752e:	f042 0201 	orr.w	r2, r2, #1
 8007532:	601a      	str	r2, [r3, #0]
 8007534:	e000      	b.n	8007538 <HAL_TIM_Base_Start_IT+0xac>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007536:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8007538:	2300      	movs	r3, #0
}
 800753a:	4618      	mov	r0, r3
 800753c:	3714      	adds	r7, #20
 800753e:	46bd      	mov	sp, r7
 8007540:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007544:	4770      	bx	lr
 8007546:	bf00      	nop
 8007548:	40012c00 	.word	0x40012c00
 800754c:	40000400 	.word	0x40000400
 8007550:	40000800 	.word	0x40000800
 8007554:	40013400 	.word	0x40013400
 8007558:	40014000 	.word	0x40014000
 800755c:	00010007 	.word	0x00010007

08007560 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8007560:	b580      	push	{r7, lr}
 8007562:	b082      	sub	sp, #8
 8007564:	af00      	add	r7, sp, #0
 8007566:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007568:	687b      	ldr	r3, [r7, #4]
 800756a:	2b00      	cmp	r3, #0
 800756c:	d101      	bne.n	8007572 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800756e:	2301      	movs	r3, #1
 8007570:	e049      	b.n	8007606 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007572:	687b      	ldr	r3, [r7, #4]
 8007574:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8007578:	b2db      	uxtb	r3, r3
 800757a:	2b00      	cmp	r3, #0
 800757c:	d106      	bne.n	800758c <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800757e:	687b      	ldr	r3, [r7, #4]
 8007580:	2200      	movs	r2, #0
 8007582:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8007586:	6878      	ldr	r0, [r7, #4]
 8007588:	f000 f841 	bl	800760e <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800758c:	687b      	ldr	r3, [r7, #4]
 800758e:	2202      	movs	r2, #2
 8007590:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007594:	687b      	ldr	r3, [r7, #4]
 8007596:	681a      	ldr	r2, [r3, #0]
 8007598:	687b      	ldr	r3, [r7, #4]
 800759a:	3304      	adds	r3, #4
 800759c:	4619      	mov	r1, r3
 800759e:	4610      	mov	r0, r2
 80075a0:	f000 fd5c 	bl	800805c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80075a4:	687b      	ldr	r3, [r7, #4]
 80075a6:	2201      	movs	r2, #1
 80075a8:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80075ac:	687b      	ldr	r3, [r7, #4]
 80075ae:	2201      	movs	r2, #1
 80075b0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80075b4:	687b      	ldr	r3, [r7, #4]
 80075b6:	2201      	movs	r2, #1
 80075b8:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80075bc:	687b      	ldr	r3, [r7, #4]
 80075be:	2201      	movs	r2, #1
 80075c0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80075c4:	687b      	ldr	r3, [r7, #4]
 80075c6:	2201      	movs	r2, #1
 80075c8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80075cc:	687b      	ldr	r3, [r7, #4]
 80075ce:	2201      	movs	r2, #1
 80075d0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80075d4:	687b      	ldr	r3, [r7, #4]
 80075d6:	2201      	movs	r2, #1
 80075d8:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80075dc:	687b      	ldr	r3, [r7, #4]
 80075de:	2201      	movs	r2, #1
 80075e0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80075e4:	687b      	ldr	r3, [r7, #4]
 80075e6:	2201      	movs	r2, #1
 80075e8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80075ec:	687b      	ldr	r3, [r7, #4]
 80075ee:	2201      	movs	r2, #1
 80075f0:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 80075f4:	687b      	ldr	r3, [r7, #4]
 80075f6:	2201      	movs	r2, #1
 80075f8:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80075fc:	687b      	ldr	r3, [r7, #4]
 80075fe:	2201      	movs	r2, #1
 8007600:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8007604:	2300      	movs	r3, #0
}
 8007606:	4618      	mov	r0, r3
 8007608:	3708      	adds	r7, #8
 800760a:	46bd      	mov	sp, r7
 800760c:	bd80      	pop	{r7, pc}

0800760e <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800760e:	b480      	push	{r7}
 8007610:	b083      	sub	sp, #12
 8007612:	af00      	add	r7, sp, #0
 8007614:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8007616:	bf00      	nop
 8007618:	370c      	adds	r7, #12
 800761a:	46bd      	mov	sp, r7
 800761c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007620:	4770      	bx	lr
	...

08007624 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8007624:	b580      	push	{r7, lr}
 8007626:	b084      	sub	sp, #16
 8007628:	af00      	add	r7, sp, #0
 800762a:	6078      	str	r0, [r7, #4]
 800762c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800762e:	683b      	ldr	r3, [r7, #0]
 8007630:	2b00      	cmp	r3, #0
 8007632:	d109      	bne.n	8007648 <HAL_TIM_PWM_Start+0x24>
 8007634:	687b      	ldr	r3, [r7, #4]
 8007636:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800763a:	b2db      	uxtb	r3, r3
 800763c:	2b01      	cmp	r3, #1
 800763e:	bf14      	ite	ne
 8007640:	2301      	movne	r3, #1
 8007642:	2300      	moveq	r3, #0
 8007644:	b2db      	uxtb	r3, r3
 8007646:	e03c      	b.n	80076c2 <HAL_TIM_PWM_Start+0x9e>
 8007648:	683b      	ldr	r3, [r7, #0]
 800764a:	2b04      	cmp	r3, #4
 800764c:	d109      	bne.n	8007662 <HAL_TIM_PWM_Start+0x3e>
 800764e:	687b      	ldr	r3, [r7, #4]
 8007650:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8007654:	b2db      	uxtb	r3, r3
 8007656:	2b01      	cmp	r3, #1
 8007658:	bf14      	ite	ne
 800765a:	2301      	movne	r3, #1
 800765c:	2300      	moveq	r3, #0
 800765e:	b2db      	uxtb	r3, r3
 8007660:	e02f      	b.n	80076c2 <HAL_TIM_PWM_Start+0x9e>
 8007662:	683b      	ldr	r3, [r7, #0]
 8007664:	2b08      	cmp	r3, #8
 8007666:	d109      	bne.n	800767c <HAL_TIM_PWM_Start+0x58>
 8007668:	687b      	ldr	r3, [r7, #4]
 800766a:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800766e:	b2db      	uxtb	r3, r3
 8007670:	2b01      	cmp	r3, #1
 8007672:	bf14      	ite	ne
 8007674:	2301      	movne	r3, #1
 8007676:	2300      	moveq	r3, #0
 8007678:	b2db      	uxtb	r3, r3
 800767a:	e022      	b.n	80076c2 <HAL_TIM_PWM_Start+0x9e>
 800767c:	683b      	ldr	r3, [r7, #0]
 800767e:	2b0c      	cmp	r3, #12
 8007680:	d109      	bne.n	8007696 <HAL_TIM_PWM_Start+0x72>
 8007682:	687b      	ldr	r3, [r7, #4]
 8007684:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8007688:	b2db      	uxtb	r3, r3
 800768a:	2b01      	cmp	r3, #1
 800768c:	bf14      	ite	ne
 800768e:	2301      	movne	r3, #1
 8007690:	2300      	moveq	r3, #0
 8007692:	b2db      	uxtb	r3, r3
 8007694:	e015      	b.n	80076c2 <HAL_TIM_PWM_Start+0x9e>
 8007696:	683b      	ldr	r3, [r7, #0]
 8007698:	2b10      	cmp	r3, #16
 800769a:	d109      	bne.n	80076b0 <HAL_TIM_PWM_Start+0x8c>
 800769c:	687b      	ldr	r3, [r7, #4]
 800769e:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80076a2:	b2db      	uxtb	r3, r3
 80076a4:	2b01      	cmp	r3, #1
 80076a6:	bf14      	ite	ne
 80076a8:	2301      	movne	r3, #1
 80076aa:	2300      	moveq	r3, #0
 80076ac:	b2db      	uxtb	r3, r3
 80076ae:	e008      	b.n	80076c2 <HAL_TIM_PWM_Start+0x9e>
 80076b0:	687b      	ldr	r3, [r7, #4]
 80076b2:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 80076b6:	b2db      	uxtb	r3, r3
 80076b8:	2b01      	cmp	r3, #1
 80076ba:	bf14      	ite	ne
 80076bc:	2301      	movne	r3, #1
 80076be:	2300      	moveq	r3, #0
 80076c0:	b2db      	uxtb	r3, r3
 80076c2:	2b00      	cmp	r3, #0
 80076c4:	d001      	beq.n	80076ca <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 80076c6:	2301      	movs	r3, #1
 80076c8:	e097      	b.n	80077fa <HAL_TIM_PWM_Start+0x1d6>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80076ca:	683b      	ldr	r3, [r7, #0]
 80076cc:	2b00      	cmp	r3, #0
 80076ce:	d104      	bne.n	80076da <HAL_TIM_PWM_Start+0xb6>
 80076d0:	687b      	ldr	r3, [r7, #4]
 80076d2:	2202      	movs	r2, #2
 80076d4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80076d8:	e023      	b.n	8007722 <HAL_TIM_PWM_Start+0xfe>
 80076da:	683b      	ldr	r3, [r7, #0]
 80076dc:	2b04      	cmp	r3, #4
 80076de:	d104      	bne.n	80076ea <HAL_TIM_PWM_Start+0xc6>
 80076e0:	687b      	ldr	r3, [r7, #4]
 80076e2:	2202      	movs	r2, #2
 80076e4:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80076e8:	e01b      	b.n	8007722 <HAL_TIM_PWM_Start+0xfe>
 80076ea:	683b      	ldr	r3, [r7, #0]
 80076ec:	2b08      	cmp	r3, #8
 80076ee:	d104      	bne.n	80076fa <HAL_TIM_PWM_Start+0xd6>
 80076f0:	687b      	ldr	r3, [r7, #4]
 80076f2:	2202      	movs	r2, #2
 80076f4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80076f8:	e013      	b.n	8007722 <HAL_TIM_PWM_Start+0xfe>
 80076fa:	683b      	ldr	r3, [r7, #0]
 80076fc:	2b0c      	cmp	r3, #12
 80076fe:	d104      	bne.n	800770a <HAL_TIM_PWM_Start+0xe6>
 8007700:	687b      	ldr	r3, [r7, #4]
 8007702:	2202      	movs	r2, #2
 8007704:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8007708:	e00b      	b.n	8007722 <HAL_TIM_PWM_Start+0xfe>
 800770a:	683b      	ldr	r3, [r7, #0]
 800770c:	2b10      	cmp	r3, #16
 800770e:	d104      	bne.n	800771a <HAL_TIM_PWM_Start+0xf6>
 8007710:	687b      	ldr	r3, [r7, #4]
 8007712:	2202      	movs	r2, #2
 8007714:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8007718:	e003      	b.n	8007722 <HAL_TIM_PWM_Start+0xfe>
 800771a:	687b      	ldr	r3, [r7, #4]
 800771c:	2202      	movs	r2, #2
 800771e:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8007722:	687b      	ldr	r3, [r7, #4]
 8007724:	681b      	ldr	r3, [r3, #0]
 8007726:	2201      	movs	r2, #1
 8007728:	6839      	ldr	r1, [r7, #0]
 800772a:	4618      	mov	r0, r3
 800772c:	f001 f8c4 	bl	80088b8 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8007730:	687b      	ldr	r3, [r7, #4]
 8007732:	681b      	ldr	r3, [r3, #0]
 8007734:	4a33      	ldr	r2, [pc, #204]	@ (8007804 <HAL_TIM_PWM_Start+0x1e0>)
 8007736:	4293      	cmp	r3, r2
 8007738:	d013      	beq.n	8007762 <HAL_TIM_PWM_Start+0x13e>
 800773a:	687b      	ldr	r3, [r7, #4]
 800773c:	681b      	ldr	r3, [r3, #0]
 800773e:	4a32      	ldr	r2, [pc, #200]	@ (8007808 <HAL_TIM_PWM_Start+0x1e4>)
 8007740:	4293      	cmp	r3, r2
 8007742:	d00e      	beq.n	8007762 <HAL_TIM_PWM_Start+0x13e>
 8007744:	687b      	ldr	r3, [r7, #4]
 8007746:	681b      	ldr	r3, [r3, #0]
 8007748:	4a30      	ldr	r2, [pc, #192]	@ (800780c <HAL_TIM_PWM_Start+0x1e8>)
 800774a:	4293      	cmp	r3, r2
 800774c:	d009      	beq.n	8007762 <HAL_TIM_PWM_Start+0x13e>
 800774e:	687b      	ldr	r3, [r7, #4]
 8007750:	681b      	ldr	r3, [r3, #0]
 8007752:	4a2f      	ldr	r2, [pc, #188]	@ (8007810 <HAL_TIM_PWM_Start+0x1ec>)
 8007754:	4293      	cmp	r3, r2
 8007756:	d004      	beq.n	8007762 <HAL_TIM_PWM_Start+0x13e>
 8007758:	687b      	ldr	r3, [r7, #4]
 800775a:	681b      	ldr	r3, [r3, #0]
 800775c:	4a2d      	ldr	r2, [pc, #180]	@ (8007814 <HAL_TIM_PWM_Start+0x1f0>)
 800775e:	4293      	cmp	r3, r2
 8007760:	d101      	bne.n	8007766 <HAL_TIM_PWM_Start+0x142>
 8007762:	2301      	movs	r3, #1
 8007764:	e000      	b.n	8007768 <HAL_TIM_PWM_Start+0x144>
 8007766:	2300      	movs	r3, #0
 8007768:	2b00      	cmp	r3, #0
 800776a:	d007      	beq.n	800777c <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800776c:	687b      	ldr	r3, [r7, #4]
 800776e:	681b      	ldr	r3, [r3, #0]
 8007770:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8007772:	687b      	ldr	r3, [r7, #4]
 8007774:	681b      	ldr	r3, [r3, #0]
 8007776:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800777a:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800777c:	687b      	ldr	r3, [r7, #4]
 800777e:	681b      	ldr	r3, [r3, #0]
 8007780:	4a20      	ldr	r2, [pc, #128]	@ (8007804 <HAL_TIM_PWM_Start+0x1e0>)
 8007782:	4293      	cmp	r3, r2
 8007784:	d018      	beq.n	80077b8 <HAL_TIM_PWM_Start+0x194>
 8007786:	687b      	ldr	r3, [r7, #4]
 8007788:	681b      	ldr	r3, [r3, #0]
 800778a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800778e:	d013      	beq.n	80077b8 <HAL_TIM_PWM_Start+0x194>
 8007790:	687b      	ldr	r3, [r7, #4]
 8007792:	681b      	ldr	r3, [r3, #0]
 8007794:	4a20      	ldr	r2, [pc, #128]	@ (8007818 <HAL_TIM_PWM_Start+0x1f4>)
 8007796:	4293      	cmp	r3, r2
 8007798:	d00e      	beq.n	80077b8 <HAL_TIM_PWM_Start+0x194>
 800779a:	687b      	ldr	r3, [r7, #4]
 800779c:	681b      	ldr	r3, [r3, #0]
 800779e:	4a1f      	ldr	r2, [pc, #124]	@ (800781c <HAL_TIM_PWM_Start+0x1f8>)
 80077a0:	4293      	cmp	r3, r2
 80077a2:	d009      	beq.n	80077b8 <HAL_TIM_PWM_Start+0x194>
 80077a4:	687b      	ldr	r3, [r7, #4]
 80077a6:	681b      	ldr	r3, [r3, #0]
 80077a8:	4a17      	ldr	r2, [pc, #92]	@ (8007808 <HAL_TIM_PWM_Start+0x1e4>)
 80077aa:	4293      	cmp	r3, r2
 80077ac:	d004      	beq.n	80077b8 <HAL_TIM_PWM_Start+0x194>
 80077ae:	687b      	ldr	r3, [r7, #4]
 80077b0:	681b      	ldr	r3, [r3, #0]
 80077b2:	4a16      	ldr	r2, [pc, #88]	@ (800780c <HAL_TIM_PWM_Start+0x1e8>)
 80077b4:	4293      	cmp	r3, r2
 80077b6:	d115      	bne.n	80077e4 <HAL_TIM_PWM_Start+0x1c0>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80077b8:	687b      	ldr	r3, [r7, #4]
 80077ba:	681b      	ldr	r3, [r3, #0]
 80077bc:	689a      	ldr	r2, [r3, #8]
 80077be:	4b18      	ldr	r3, [pc, #96]	@ (8007820 <HAL_TIM_PWM_Start+0x1fc>)
 80077c0:	4013      	ands	r3, r2
 80077c2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80077c4:	68fb      	ldr	r3, [r7, #12]
 80077c6:	2b06      	cmp	r3, #6
 80077c8:	d015      	beq.n	80077f6 <HAL_TIM_PWM_Start+0x1d2>
 80077ca:	68fb      	ldr	r3, [r7, #12]
 80077cc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80077d0:	d011      	beq.n	80077f6 <HAL_TIM_PWM_Start+0x1d2>
    {
      __HAL_TIM_ENABLE(htim);
 80077d2:	687b      	ldr	r3, [r7, #4]
 80077d4:	681b      	ldr	r3, [r3, #0]
 80077d6:	681a      	ldr	r2, [r3, #0]
 80077d8:	687b      	ldr	r3, [r7, #4]
 80077da:	681b      	ldr	r3, [r3, #0]
 80077dc:	f042 0201 	orr.w	r2, r2, #1
 80077e0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80077e2:	e008      	b.n	80077f6 <HAL_TIM_PWM_Start+0x1d2>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80077e4:	687b      	ldr	r3, [r7, #4]
 80077e6:	681b      	ldr	r3, [r3, #0]
 80077e8:	681a      	ldr	r2, [r3, #0]
 80077ea:	687b      	ldr	r3, [r7, #4]
 80077ec:	681b      	ldr	r3, [r3, #0]
 80077ee:	f042 0201 	orr.w	r2, r2, #1
 80077f2:	601a      	str	r2, [r3, #0]
 80077f4:	e000      	b.n	80077f8 <HAL_TIM_PWM_Start+0x1d4>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80077f6:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80077f8:	2300      	movs	r3, #0
}
 80077fa:	4618      	mov	r0, r3
 80077fc:	3710      	adds	r7, #16
 80077fe:	46bd      	mov	sp, r7
 8007800:	bd80      	pop	{r7, pc}
 8007802:	bf00      	nop
 8007804:	40012c00 	.word	0x40012c00
 8007808:	40013400 	.word	0x40013400
 800780c:	40014000 	.word	0x40014000
 8007810:	40014400 	.word	0x40014400
 8007814:	40014800 	.word	0x40014800
 8007818:	40000400 	.word	0x40000400
 800781c:	40000800 	.word	0x40000800
 8007820:	00010007 	.word	0x00010007

08007824 <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8007824:	b580      	push	{r7, lr}
 8007826:	b082      	sub	sp, #8
 8007828:	af00      	add	r7, sp, #0
 800782a:	6078      	str	r0, [r7, #4]
 800782c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 800782e:	687b      	ldr	r3, [r7, #4]
 8007830:	681b      	ldr	r3, [r3, #0]
 8007832:	2200      	movs	r2, #0
 8007834:	6839      	ldr	r1, [r7, #0]
 8007836:	4618      	mov	r0, r3
 8007838:	f001 f83e 	bl	80088b8 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800783c:	687b      	ldr	r3, [r7, #4]
 800783e:	681b      	ldr	r3, [r3, #0]
 8007840:	4a3e      	ldr	r2, [pc, #248]	@ (800793c <HAL_TIM_PWM_Stop+0x118>)
 8007842:	4293      	cmp	r3, r2
 8007844:	d013      	beq.n	800786e <HAL_TIM_PWM_Stop+0x4a>
 8007846:	687b      	ldr	r3, [r7, #4]
 8007848:	681b      	ldr	r3, [r3, #0]
 800784a:	4a3d      	ldr	r2, [pc, #244]	@ (8007940 <HAL_TIM_PWM_Stop+0x11c>)
 800784c:	4293      	cmp	r3, r2
 800784e:	d00e      	beq.n	800786e <HAL_TIM_PWM_Stop+0x4a>
 8007850:	687b      	ldr	r3, [r7, #4]
 8007852:	681b      	ldr	r3, [r3, #0]
 8007854:	4a3b      	ldr	r2, [pc, #236]	@ (8007944 <HAL_TIM_PWM_Stop+0x120>)
 8007856:	4293      	cmp	r3, r2
 8007858:	d009      	beq.n	800786e <HAL_TIM_PWM_Stop+0x4a>
 800785a:	687b      	ldr	r3, [r7, #4]
 800785c:	681b      	ldr	r3, [r3, #0]
 800785e:	4a3a      	ldr	r2, [pc, #232]	@ (8007948 <HAL_TIM_PWM_Stop+0x124>)
 8007860:	4293      	cmp	r3, r2
 8007862:	d004      	beq.n	800786e <HAL_TIM_PWM_Stop+0x4a>
 8007864:	687b      	ldr	r3, [r7, #4]
 8007866:	681b      	ldr	r3, [r3, #0]
 8007868:	4a38      	ldr	r2, [pc, #224]	@ (800794c <HAL_TIM_PWM_Stop+0x128>)
 800786a:	4293      	cmp	r3, r2
 800786c:	d101      	bne.n	8007872 <HAL_TIM_PWM_Stop+0x4e>
 800786e:	2301      	movs	r3, #1
 8007870:	e000      	b.n	8007874 <HAL_TIM_PWM_Stop+0x50>
 8007872:	2300      	movs	r3, #0
 8007874:	2b00      	cmp	r3, #0
 8007876:	d017      	beq.n	80078a8 <HAL_TIM_PWM_Stop+0x84>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 8007878:	687b      	ldr	r3, [r7, #4]
 800787a:	681b      	ldr	r3, [r3, #0]
 800787c:	6a1a      	ldr	r2, [r3, #32]
 800787e:	f241 1311 	movw	r3, #4369	@ 0x1111
 8007882:	4013      	ands	r3, r2
 8007884:	2b00      	cmp	r3, #0
 8007886:	d10f      	bne.n	80078a8 <HAL_TIM_PWM_Stop+0x84>
 8007888:	687b      	ldr	r3, [r7, #4]
 800788a:	681b      	ldr	r3, [r3, #0]
 800788c:	6a1a      	ldr	r2, [r3, #32]
 800788e:	f244 4344 	movw	r3, #17476	@ 0x4444
 8007892:	4013      	ands	r3, r2
 8007894:	2b00      	cmp	r3, #0
 8007896:	d107      	bne.n	80078a8 <HAL_TIM_PWM_Stop+0x84>
 8007898:	687b      	ldr	r3, [r7, #4]
 800789a:	681b      	ldr	r3, [r3, #0]
 800789c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800789e:	687b      	ldr	r3, [r7, #4]
 80078a0:	681b      	ldr	r3, [r3, #0]
 80078a2:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80078a6:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 80078a8:	687b      	ldr	r3, [r7, #4]
 80078aa:	681b      	ldr	r3, [r3, #0]
 80078ac:	6a1a      	ldr	r2, [r3, #32]
 80078ae:	f241 1311 	movw	r3, #4369	@ 0x1111
 80078b2:	4013      	ands	r3, r2
 80078b4:	2b00      	cmp	r3, #0
 80078b6:	d10f      	bne.n	80078d8 <HAL_TIM_PWM_Stop+0xb4>
 80078b8:	687b      	ldr	r3, [r7, #4]
 80078ba:	681b      	ldr	r3, [r3, #0]
 80078bc:	6a1a      	ldr	r2, [r3, #32]
 80078be:	f244 4344 	movw	r3, #17476	@ 0x4444
 80078c2:	4013      	ands	r3, r2
 80078c4:	2b00      	cmp	r3, #0
 80078c6:	d107      	bne.n	80078d8 <HAL_TIM_PWM_Stop+0xb4>
 80078c8:	687b      	ldr	r3, [r7, #4]
 80078ca:	681b      	ldr	r3, [r3, #0]
 80078cc:	681a      	ldr	r2, [r3, #0]
 80078ce:	687b      	ldr	r3, [r7, #4]
 80078d0:	681b      	ldr	r3, [r3, #0]
 80078d2:	f022 0201 	bic.w	r2, r2, #1
 80078d6:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 80078d8:	683b      	ldr	r3, [r7, #0]
 80078da:	2b00      	cmp	r3, #0
 80078dc:	d104      	bne.n	80078e8 <HAL_TIM_PWM_Stop+0xc4>
 80078de:	687b      	ldr	r3, [r7, #4]
 80078e0:	2201      	movs	r2, #1
 80078e2:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80078e6:	e023      	b.n	8007930 <HAL_TIM_PWM_Stop+0x10c>
 80078e8:	683b      	ldr	r3, [r7, #0]
 80078ea:	2b04      	cmp	r3, #4
 80078ec:	d104      	bne.n	80078f8 <HAL_TIM_PWM_Stop+0xd4>
 80078ee:	687b      	ldr	r3, [r7, #4]
 80078f0:	2201      	movs	r2, #1
 80078f2:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80078f6:	e01b      	b.n	8007930 <HAL_TIM_PWM_Stop+0x10c>
 80078f8:	683b      	ldr	r3, [r7, #0]
 80078fa:	2b08      	cmp	r3, #8
 80078fc:	d104      	bne.n	8007908 <HAL_TIM_PWM_Stop+0xe4>
 80078fe:	687b      	ldr	r3, [r7, #4]
 8007900:	2201      	movs	r2, #1
 8007902:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8007906:	e013      	b.n	8007930 <HAL_TIM_PWM_Stop+0x10c>
 8007908:	683b      	ldr	r3, [r7, #0]
 800790a:	2b0c      	cmp	r3, #12
 800790c:	d104      	bne.n	8007918 <HAL_TIM_PWM_Stop+0xf4>
 800790e:	687b      	ldr	r3, [r7, #4]
 8007910:	2201      	movs	r2, #1
 8007912:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8007916:	e00b      	b.n	8007930 <HAL_TIM_PWM_Stop+0x10c>
 8007918:	683b      	ldr	r3, [r7, #0]
 800791a:	2b10      	cmp	r3, #16
 800791c:	d104      	bne.n	8007928 <HAL_TIM_PWM_Stop+0x104>
 800791e:	687b      	ldr	r3, [r7, #4]
 8007920:	2201      	movs	r2, #1
 8007922:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8007926:	e003      	b.n	8007930 <HAL_TIM_PWM_Stop+0x10c>
 8007928:	687b      	ldr	r3, [r7, #4]
 800792a:	2201      	movs	r2, #1
 800792c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Return function status */
  return HAL_OK;
 8007930:	2300      	movs	r3, #0
}
 8007932:	4618      	mov	r0, r3
 8007934:	3708      	adds	r7, #8
 8007936:	46bd      	mov	sp, r7
 8007938:	bd80      	pop	{r7, pc}
 800793a:	bf00      	nop
 800793c:	40012c00 	.word	0x40012c00
 8007940:	40013400 	.word	0x40013400
 8007944:	40014000 	.word	0x40014000
 8007948:	40014400 	.word	0x40014400
 800794c:	40014800 	.word	0x40014800

08007950 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8007950:	b580      	push	{r7, lr}
 8007952:	b084      	sub	sp, #16
 8007954:	af00      	add	r7, sp, #0
 8007956:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8007958:	687b      	ldr	r3, [r7, #4]
 800795a:	681b      	ldr	r3, [r3, #0]
 800795c:	68db      	ldr	r3, [r3, #12]
 800795e:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8007960:	687b      	ldr	r3, [r7, #4]
 8007962:	681b      	ldr	r3, [r3, #0]
 8007964:	691b      	ldr	r3, [r3, #16]
 8007966:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8007968:	68bb      	ldr	r3, [r7, #8]
 800796a:	f003 0302 	and.w	r3, r3, #2
 800796e:	2b00      	cmp	r3, #0
 8007970:	d020      	beq.n	80079b4 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8007972:	68fb      	ldr	r3, [r7, #12]
 8007974:	f003 0302 	and.w	r3, r3, #2
 8007978:	2b00      	cmp	r3, #0
 800797a:	d01b      	beq.n	80079b4 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 800797c:	687b      	ldr	r3, [r7, #4]
 800797e:	681b      	ldr	r3, [r3, #0]
 8007980:	f06f 0202 	mvn.w	r2, #2
 8007984:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8007986:	687b      	ldr	r3, [r7, #4]
 8007988:	2201      	movs	r2, #1
 800798a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800798c:	687b      	ldr	r3, [r7, #4]
 800798e:	681b      	ldr	r3, [r3, #0]
 8007990:	699b      	ldr	r3, [r3, #24]
 8007992:	f003 0303 	and.w	r3, r3, #3
 8007996:	2b00      	cmp	r3, #0
 8007998:	d003      	beq.n	80079a2 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800799a:	6878      	ldr	r0, [r7, #4]
 800799c:	f000 fb40 	bl	8008020 <HAL_TIM_IC_CaptureCallback>
 80079a0:	e005      	b.n	80079ae <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80079a2:	6878      	ldr	r0, [r7, #4]
 80079a4:	f000 fb32 	bl	800800c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80079a8:	6878      	ldr	r0, [r7, #4]
 80079aa:	f000 fb43 	bl	8008034 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80079ae:	687b      	ldr	r3, [r7, #4]
 80079b0:	2200      	movs	r2, #0
 80079b2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 80079b4:	68bb      	ldr	r3, [r7, #8]
 80079b6:	f003 0304 	and.w	r3, r3, #4
 80079ba:	2b00      	cmp	r3, #0
 80079bc:	d020      	beq.n	8007a00 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 80079be:	68fb      	ldr	r3, [r7, #12]
 80079c0:	f003 0304 	and.w	r3, r3, #4
 80079c4:	2b00      	cmp	r3, #0
 80079c6:	d01b      	beq.n	8007a00 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 80079c8:	687b      	ldr	r3, [r7, #4]
 80079ca:	681b      	ldr	r3, [r3, #0]
 80079cc:	f06f 0204 	mvn.w	r2, #4
 80079d0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80079d2:	687b      	ldr	r3, [r7, #4]
 80079d4:	2202      	movs	r2, #2
 80079d6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80079d8:	687b      	ldr	r3, [r7, #4]
 80079da:	681b      	ldr	r3, [r3, #0]
 80079dc:	699b      	ldr	r3, [r3, #24]
 80079de:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80079e2:	2b00      	cmp	r3, #0
 80079e4:	d003      	beq.n	80079ee <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80079e6:	6878      	ldr	r0, [r7, #4]
 80079e8:	f000 fb1a 	bl	8008020 <HAL_TIM_IC_CaptureCallback>
 80079ec:	e005      	b.n	80079fa <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80079ee:	6878      	ldr	r0, [r7, #4]
 80079f0:	f000 fb0c 	bl	800800c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80079f4:	6878      	ldr	r0, [r7, #4]
 80079f6:	f000 fb1d 	bl	8008034 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80079fa:	687b      	ldr	r3, [r7, #4]
 80079fc:	2200      	movs	r2, #0
 80079fe:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8007a00:	68bb      	ldr	r3, [r7, #8]
 8007a02:	f003 0308 	and.w	r3, r3, #8
 8007a06:	2b00      	cmp	r3, #0
 8007a08:	d020      	beq.n	8007a4c <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8007a0a:	68fb      	ldr	r3, [r7, #12]
 8007a0c:	f003 0308 	and.w	r3, r3, #8
 8007a10:	2b00      	cmp	r3, #0
 8007a12:	d01b      	beq.n	8007a4c <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8007a14:	687b      	ldr	r3, [r7, #4]
 8007a16:	681b      	ldr	r3, [r3, #0]
 8007a18:	f06f 0208 	mvn.w	r2, #8
 8007a1c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8007a1e:	687b      	ldr	r3, [r7, #4]
 8007a20:	2204      	movs	r2, #4
 8007a22:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8007a24:	687b      	ldr	r3, [r7, #4]
 8007a26:	681b      	ldr	r3, [r3, #0]
 8007a28:	69db      	ldr	r3, [r3, #28]
 8007a2a:	f003 0303 	and.w	r3, r3, #3
 8007a2e:	2b00      	cmp	r3, #0
 8007a30:	d003      	beq.n	8007a3a <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007a32:	6878      	ldr	r0, [r7, #4]
 8007a34:	f000 faf4 	bl	8008020 <HAL_TIM_IC_CaptureCallback>
 8007a38:	e005      	b.n	8007a46 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007a3a:	6878      	ldr	r0, [r7, #4]
 8007a3c:	f000 fae6 	bl	800800c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007a40:	6878      	ldr	r0, [r7, #4]
 8007a42:	f000 faf7 	bl	8008034 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007a46:	687b      	ldr	r3, [r7, #4]
 8007a48:	2200      	movs	r2, #0
 8007a4a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8007a4c:	68bb      	ldr	r3, [r7, #8]
 8007a4e:	f003 0310 	and.w	r3, r3, #16
 8007a52:	2b00      	cmp	r3, #0
 8007a54:	d020      	beq.n	8007a98 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8007a56:	68fb      	ldr	r3, [r7, #12]
 8007a58:	f003 0310 	and.w	r3, r3, #16
 8007a5c:	2b00      	cmp	r3, #0
 8007a5e:	d01b      	beq.n	8007a98 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8007a60:	687b      	ldr	r3, [r7, #4]
 8007a62:	681b      	ldr	r3, [r3, #0]
 8007a64:	f06f 0210 	mvn.w	r2, #16
 8007a68:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8007a6a:	687b      	ldr	r3, [r7, #4]
 8007a6c:	2208      	movs	r2, #8
 8007a6e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8007a70:	687b      	ldr	r3, [r7, #4]
 8007a72:	681b      	ldr	r3, [r3, #0]
 8007a74:	69db      	ldr	r3, [r3, #28]
 8007a76:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8007a7a:	2b00      	cmp	r3, #0
 8007a7c:	d003      	beq.n	8007a86 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007a7e:	6878      	ldr	r0, [r7, #4]
 8007a80:	f000 face 	bl	8008020 <HAL_TIM_IC_CaptureCallback>
 8007a84:	e005      	b.n	8007a92 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007a86:	6878      	ldr	r0, [r7, #4]
 8007a88:	f000 fac0 	bl	800800c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007a8c:	6878      	ldr	r0, [r7, #4]
 8007a8e:	f000 fad1 	bl	8008034 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007a92:	687b      	ldr	r3, [r7, #4]
 8007a94:	2200      	movs	r2, #0
 8007a96:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8007a98:	68bb      	ldr	r3, [r7, #8]
 8007a9a:	f003 0301 	and.w	r3, r3, #1
 8007a9e:	2b00      	cmp	r3, #0
 8007aa0:	d00c      	beq.n	8007abc <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8007aa2:	68fb      	ldr	r3, [r7, #12]
 8007aa4:	f003 0301 	and.w	r3, r3, #1
 8007aa8:	2b00      	cmp	r3, #0
 8007aaa:	d007      	beq.n	8007abc <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8007aac:	687b      	ldr	r3, [r7, #4]
 8007aae:	681b      	ldr	r3, [r3, #0]
 8007ab0:	f06f 0201 	mvn.w	r2, #1
 8007ab4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8007ab6:	6878      	ldr	r0, [r7, #4]
 8007ab8:	f7f9 fa2a 	bl	8000f10 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8007abc:	68bb      	ldr	r3, [r7, #8]
 8007abe:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007ac2:	2b00      	cmp	r3, #0
 8007ac4:	d104      	bne.n	8007ad0 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 8007ac6:	68bb      	ldr	r3, [r7, #8]
 8007ac8:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8007acc:	2b00      	cmp	r3, #0
 8007ace:	d00c      	beq.n	8007aea <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8007ad0:	68fb      	ldr	r3, [r7, #12]
 8007ad2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007ad6:	2b00      	cmp	r3, #0
 8007ad8:	d007      	beq.n	8007aea <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 8007ada:	687b      	ldr	r3, [r7, #4]
 8007adc:	681b      	ldr	r3, [r3, #0]
 8007ade:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 8007ae2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8007ae4:	6878      	ldr	r0, [r7, #4]
 8007ae6:	f001 f937 	bl	8008d58 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8007aea:	68bb      	ldr	r3, [r7, #8]
 8007aec:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007af0:	2b00      	cmp	r3, #0
 8007af2:	d00c      	beq.n	8007b0e <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8007af4:	68fb      	ldr	r3, [r7, #12]
 8007af6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007afa:	2b00      	cmp	r3, #0
 8007afc:	d007      	beq.n	8007b0e <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8007afe:	687b      	ldr	r3, [r7, #4]
 8007b00:	681b      	ldr	r3, [r3, #0]
 8007b02:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 8007b06:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8007b08:	6878      	ldr	r0, [r7, #4]
 8007b0a:	f001 f92f 	bl	8008d6c <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8007b0e:	68bb      	ldr	r3, [r7, #8]
 8007b10:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007b14:	2b00      	cmp	r3, #0
 8007b16:	d00c      	beq.n	8007b32 <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8007b18:	68fb      	ldr	r3, [r7, #12]
 8007b1a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007b1e:	2b00      	cmp	r3, #0
 8007b20:	d007      	beq.n	8007b32 <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8007b22:	687b      	ldr	r3, [r7, #4]
 8007b24:	681b      	ldr	r3, [r3, #0]
 8007b26:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8007b2a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8007b2c:	6878      	ldr	r0, [r7, #4]
 8007b2e:	f000 fa8b 	bl	8008048 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8007b32:	68bb      	ldr	r3, [r7, #8]
 8007b34:	f003 0320 	and.w	r3, r3, #32
 8007b38:	2b00      	cmp	r3, #0
 8007b3a:	d00c      	beq.n	8007b56 <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8007b3c:	68fb      	ldr	r3, [r7, #12]
 8007b3e:	f003 0320 	and.w	r3, r3, #32
 8007b42:	2b00      	cmp	r3, #0
 8007b44:	d007      	beq.n	8007b56 <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8007b46:	687b      	ldr	r3, [r7, #4]
 8007b48:	681b      	ldr	r3, [r3, #0]
 8007b4a:	f06f 0220 	mvn.w	r2, #32
 8007b4e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8007b50:	6878      	ldr	r0, [r7, #4]
 8007b52:	f001 f8f7 	bl	8008d44 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Encoder index event */
  if ((itflag & (TIM_FLAG_IDX)) == (TIM_FLAG_IDX))
 8007b56:	68bb      	ldr	r3, [r7, #8]
 8007b58:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8007b5c:	2b00      	cmp	r3, #0
 8007b5e:	d00c      	beq.n	8007b7a <HAL_TIM_IRQHandler+0x22a>
  {
    if ((itsource & (TIM_IT_IDX)) == (TIM_IT_IDX))
 8007b60:	68fb      	ldr	r3, [r7, #12]
 8007b62:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8007b66:	2b00      	cmp	r3, #0
 8007b68:	d007      	beq.n	8007b7a <HAL_TIM_IRQHandler+0x22a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IDX);
 8007b6a:	687b      	ldr	r3, [r7, #4]
 8007b6c:	681b      	ldr	r3, [r3, #0]
 8007b6e:	f46f 1280 	mvn.w	r2, #1048576	@ 0x100000
 8007b72:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->EncoderIndexCallback(htim);
#else
      HAL_TIMEx_EncoderIndexCallback(htim);
 8007b74:	6878      	ldr	r0, [r7, #4]
 8007b76:	f001 f903 	bl	8008d80 <HAL_TIMEx_EncoderIndexCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Direction change event */
  if ((itflag & (TIM_FLAG_DIR)) == (TIM_FLAG_DIR))
 8007b7a:	68bb      	ldr	r3, [r7, #8]
 8007b7c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8007b80:	2b00      	cmp	r3, #0
 8007b82:	d00c      	beq.n	8007b9e <HAL_TIM_IRQHandler+0x24e>
  {
    if ((itsource & (TIM_IT_DIR)) == (TIM_IT_DIR))
 8007b84:	68fb      	ldr	r3, [r7, #12]
 8007b86:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8007b8a:	2b00      	cmp	r3, #0
 8007b8c:	d007      	beq.n	8007b9e <HAL_TIM_IRQHandler+0x24e>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_DIR);
 8007b8e:	687b      	ldr	r3, [r7, #4]
 8007b90:	681b      	ldr	r3, [r3, #0]
 8007b92:	f46f 1200 	mvn.w	r2, #2097152	@ 0x200000
 8007b96:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->DirectionChangeCallback(htim);
#else
      HAL_TIMEx_DirectionChangeCallback(htim);
 8007b98:	6878      	ldr	r0, [r7, #4]
 8007b9a:	f001 f8fb 	bl	8008d94 <HAL_TIMEx_DirectionChangeCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Index error event */
  if ((itflag & (TIM_FLAG_IERR)) == (TIM_FLAG_IERR))
 8007b9e:	68bb      	ldr	r3, [r7, #8]
 8007ba0:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8007ba4:	2b00      	cmp	r3, #0
 8007ba6:	d00c      	beq.n	8007bc2 <HAL_TIM_IRQHandler+0x272>
  {
    if ((itsource & (TIM_IT_IERR)) == (TIM_IT_IERR))
 8007ba8:	68fb      	ldr	r3, [r7, #12]
 8007baa:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8007bae:	2b00      	cmp	r3, #0
 8007bb0:	d007      	beq.n	8007bc2 <HAL_TIM_IRQHandler+0x272>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IERR);
 8007bb2:	687b      	ldr	r3, [r7, #4]
 8007bb4:	681b      	ldr	r3, [r3, #0]
 8007bb6:	f46f 0280 	mvn.w	r2, #4194304	@ 0x400000
 8007bba:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->IndexErrorCallback(htim);
#else
      HAL_TIMEx_IndexErrorCallback(htim);
 8007bbc:	6878      	ldr	r0, [r7, #4]
 8007bbe:	f001 f8f3 	bl	8008da8 <HAL_TIMEx_IndexErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Transition error event */
  if ((itflag & (TIM_FLAG_TERR)) == (TIM_FLAG_TERR))
 8007bc2:	68bb      	ldr	r3, [r7, #8]
 8007bc4:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8007bc8:	2b00      	cmp	r3, #0
 8007bca:	d00c      	beq.n	8007be6 <HAL_TIM_IRQHandler+0x296>
  {
    if ((itsource & (TIM_IT_TERR)) == (TIM_IT_TERR))
 8007bcc:	68fb      	ldr	r3, [r7, #12]
 8007bce:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8007bd2:	2b00      	cmp	r3, #0
 8007bd4:	d007      	beq.n	8007be6 <HAL_TIM_IRQHandler+0x296>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TERR);
 8007bd6:	687b      	ldr	r3, [r7, #4]
 8007bd8:	681b      	ldr	r3, [r3, #0]
 8007bda:	f46f 0200 	mvn.w	r2, #8388608	@ 0x800000
 8007bde:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TransitionErrorCallback(htim);
#else
      HAL_TIMEx_TransitionErrorCallback(htim);
 8007be0:	6878      	ldr	r0, [r7, #4]
 8007be2:	f001 f8eb 	bl	8008dbc <HAL_TIMEx_TransitionErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8007be6:	bf00      	nop
 8007be8:	3710      	adds	r7, #16
 8007bea:	46bd      	mov	sp, r7
 8007bec:	bd80      	pop	{r7, pc}
	...

08007bf0 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8007bf0:	b580      	push	{r7, lr}
 8007bf2:	b086      	sub	sp, #24
 8007bf4:	af00      	add	r7, sp, #0
 8007bf6:	60f8      	str	r0, [r7, #12]
 8007bf8:	60b9      	str	r1, [r7, #8]
 8007bfa:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8007bfc:	2300      	movs	r3, #0
 8007bfe:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8007c00:	68fb      	ldr	r3, [r7, #12]
 8007c02:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8007c06:	2b01      	cmp	r3, #1
 8007c08:	d101      	bne.n	8007c0e <HAL_TIM_PWM_ConfigChannel+0x1e>
 8007c0a:	2302      	movs	r3, #2
 8007c0c:	e0ff      	b.n	8007e0e <HAL_TIM_PWM_ConfigChannel+0x21e>
 8007c0e:	68fb      	ldr	r3, [r7, #12]
 8007c10:	2201      	movs	r2, #1
 8007c12:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8007c16:	687b      	ldr	r3, [r7, #4]
 8007c18:	2b14      	cmp	r3, #20
 8007c1a:	f200 80f0 	bhi.w	8007dfe <HAL_TIM_PWM_ConfigChannel+0x20e>
 8007c1e:	a201      	add	r2, pc, #4	@ (adr r2, 8007c24 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8007c20:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007c24:	08007c79 	.word	0x08007c79
 8007c28:	08007dff 	.word	0x08007dff
 8007c2c:	08007dff 	.word	0x08007dff
 8007c30:	08007dff 	.word	0x08007dff
 8007c34:	08007cb9 	.word	0x08007cb9
 8007c38:	08007dff 	.word	0x08007dff
 8007c3c:	08007dff 	.word	0x08007dff
 8007c40:	08007dff 	.word	0x08007dff
 8007c44:	08007cfb 	.word	0x08007cfb
 8007c48:	08007dff 	.word	0x08007dff
 8007c4c:	08007dff 	.word	0x08007dff
 8007c50:	08007dff 	.word	0x08007dff
 8007c54:	08007d3b 	.word	0x08007d3b
 8007c58:	08007dff 	.word	0x08007dff
 8007c5c:	08007dff 	.word	0x08007dff
 8007c60:	08007dff 	.word	0x08007dff
 8007c64:	08007d7d 	.word	0x08007d7d
 8007c68:	08007dff 	.word	0x08007dff
 8007c6c:	08007dff 	.word	0x08007dff
 8007c70:	08007dff 	.word	0x08007dff
 8007c74:	08007dbd 	.word	0x08007dbd
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8007c78:	68fb      	ldr	r3, [r7, #12]
 8007c7a:	681b      	ldr	r3, [r3, #0]
 8007c7c:	68b9      	ldr	r1, [r7, #8]
 8007c7e:	4618      	mov	r0, r3
 8007c80:	f000 fa88 	bl	8008194 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8007c84:	68fb      	ldr	r3, [r7, #12]
 8007c86:	681b      	ldr	r3, [r3, #0]
 8007c88:	699a      	ldr	r2, [r3, #24]
 8007c8a:	68fb      	ldr	r3, [r7, #12]
 8007c8c:	681b      	ldr	r3, [r3, #0]
 8007c8e:	f042 0208 	orr.w	r2, r2, #8
 8007c92:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8007c94:	68fb      	ldr	r3, [r7, #12]
 8007c96:	681b      	ldr	r3, [r3, #0]
 8007c98:	699a      	ldr	r2, [r3, #24]
 8007c9a:	68fb      	ldr	r3, [r7, #12]
 8007c9c:	681b      	ldr	r3, [r3, #0]
 8007c9e:	f022 0204 	bic.w	r2, r2, #4
 8007ca2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8007ca4:	68fb      	ldr	r3, [r7, #12]
 8007ca6:	681b      	ldr	r3, [r3, #0]
 8007ca8:	6999      	ldr	r1, [r3, #24]
 8007caa:	68bb      	ldr	r3, [r7, #8]
 8007cac:	691a      	ldr	r2, [r3, #16]
 8007cae:	68fb      	ldr	r3, [r7, #12]
 8007cb0:	681b      	ldr	r3, [r3, #0]
 8007cb2:	430a      	orrs	r2, r1
 8007cb4:	619a      	str	r2, [r3, #24]
      break;
 8007cb6:	e0a5      	b.n	8007e04 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8007cb8:	68fb      	ldr	r3, [r7, #12]
 8007cba:	681b      	ldr	r3, [r3, #0]
 8007cbc:	68b9      	ldr	r1, [r7, #8]
 8007cbe:	4618      	mov	r0, r3
 8007cc0:	f000 faf8 	bl	80082b4 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8007cc4:	68fb      	ldr	r3, [r7, #12]
 8007cc6:	681b      	ldr	r3, [r3, #0]
 8007cc8:	699a      	ldr	r2, [r3, #24]
 8007cca:	68fb      	ldr	r3, [r7, #12]
 8007ccc:	681b      	ldr	r3, [r3, #0]
 8007cce:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8007cd2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8007cd4:	68fb      	ldr	r3, [r7, #12]
 8007cd6:	681b      	ldr	r3, [r3, #0]
 8007cd8:	699a      	ldr	r2, [r3, #24]
 8007cda:	68fb      	ldr	r3, [r7, #12]
 8007cdc:	681b      	ldr	r3, [r3, #0]
 8007cde:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8007ce2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8007ce4:	68fb      	ldr	r3, [r7, #12]
 8007ce6:	681b      	ldr	r3, [r3, #0]
 8007ce8:	6999      	ldr	r1, [r3, #24]
 8007cea:	68bb      	ldr	r3, [r7, #8]
 8007cec:	691b      	ldr	r3, [r3, #16]
 8007cee:	021a      	lsls	r2, r3, #8
 8007cf0:	68fb      	ldr	r3, [r7, #12]
 8007cf2:	681b      	ldr	r3, [r3, #0]
 8007cf4:	430a      	orrs	r2, r1
 8007cf6:	619a      	str	r2, [r3, #24]
      break;
 8007cf8:	e084      	b.n	8007e04 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8007cfa:	68fb      	ldr	r3, [r7, #12]
 8007cfc:	681b      	ldr	r3, [r3, #0]
 8007cfe:	68b9      	ldr	r1, [r7, #8]
 8007d00:	4618      	mov	r0, r3
 8007d02:	f000 fb61 	bl	80083c8 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8007d06:	68fb      	ldr	r3, [r7, #12]
 8007d08:	681b      	ldr	r3, [r3, #0]
 8007d0a:	69da      	ldr	r2, [r3, #28]
 8007d0c:	68fb      	ldr	r3, [r7, #12]
 8007d0e:	681b      	ldr	r3, [r3, #0]
 8007d10:	f042 0208 	orr.w	r2, r2, #8
 8007d14:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8007d16:	68fb      	ldr	r3, [r7, #12]
 8007d18:	681b      	ldr	r3, [r3, #0]
 8007d1a:	69da      	ldr	r2, [r3, #28]
 8007d1c:	68fb      	ldr	r3, [r7, #12]
 8007d1e:	681b      	ldr	r3, [r3, #0]
 8007d20:	f022 0204 	bic.w	r2, r2, #4
 8007d24:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8007d26:	68fb      	ldr	r3, [r7, #12]
 8007d28:	681b      	ldr	r3, [r3, #0]
 8007d2a:	69d9      	ldr	r1, [r3, #28]
 8007d2c:	68bb      	ldr	r3, [r7, #8]
 8007d2e:	691a      	ldr	r2, [r3, #16]
 8007d30:	68fb      	ldr	r3, [r7, #12]
 8007d32:	681b      	ldr	r3, [r3, #0]
 8007d34:	430a      	orrs	r2, r1
 8007d36:	61da      	str	r2, [r3, #28]
      break;
 8007d38:	e064      	b.n	8007e04 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8007d3a:	68fb      	ldr	r3, [r7, #12]
 8007d3c:	681b      	ldr	r3, [r3, #0]
 8007d3e:	68b9      	ldr	r1, [r7, #8]
 8007d40:	4618      	mov	r0, r3
 8007d42:	f000 fbc9 	bl	80084d8 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8007d46:	68fb      	ldr	r3, [r7, #12]
 8007d48:	681b      	ldr	r3, [r3, #0]
 8007d4a:	69da      	ldr	r2, [r3, #28]
 8007d4c:	68fb      	ldr	r3, [r7, #12]
 8007d4e:	681b      	ldr	r3, [r3, #0]
 8007d50:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8007d54:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8007d56:	68fb      	ldr	r3, [r7, #12]
 8007d58:	681b      	ldr	r3, [r3, #0]
 8007d5a:	69da      	ldr	r2, [r3, #28]
 8007d5c:	68fb      	ldr	r3, [r7, #12]
 8007d5e:	681b      	ldr	r3, [r3, #0]
 8007d60:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8007d64:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8007d66:	68fb      	ldr	r3, [r7, #12]
 8007d68:	681b      	ldr	r3, [r3, #0]
 8007d6a:	69d9      	ldr	r1, [r3, #28]
 8007d6c:	68bb      	ldr	r3, [r7, #8]
 8007d6e:	691b      	ldr	r3, [r3, #16]
 8007d70:	021a      	lsls	r2, r3, #8
 8007d72:	68fb      	ldr	r3, [r7, #12]
 8007d74:	681b      	ldr	r3, [r3, #0]
 8007d76:	430a      	orrs	r2, r1
 8007d78:	61da      	str	r2, [r3, #28]
      break;
 8007d7a:	e043      	b.n	8007e04 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8007d7c:	68fb      	ldr	r3, [r7, #12]
 8007d7e:	681b      	ldr	r3, [r3, #0]
 8007d80:	68b9      	ldr	r1, [r7, #8]
 8007d82:	4618      	mov	r0, r3
 8007d84:	f000 fc32 	bl	80085ec <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8007d88:	68fb      	ldr	r3, [r7, #12]
 8007d8a:	681b      	ldr	r3, [r3, #0]
 8007d8c:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8007d8e:	68fb      	ldr	r3, [r7, #12]
 8007d90:	681b      	ldr	r3, [r3, #0]
 8007d92:	f042 0208 	orr.w	r2, r2, #8
 8007d96:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8007d98:	68fb      	ldr	r3, [r7, #12]
 8007d9a:	681b      	ldr	r3, [r3, #0]
 8007d9c:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8007d9e:	68fb      	ldr	r3, [r7, #12]
 8007da0:	681b      	ldr	r3, [r3, #0]
 8007da2:	f022 0204 	bic.w	r2, r2, #4
 8007da6:	651a      	str	r2, [r3, #80]	@ 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8007da8:	68fb      	ldr	r3, [r7, #12]
 8007daa:	681b      	ldr	r3, [r3, #0]
 8007dac:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 8007dae:	68bb      	ldr	r3, [r7, #8]
 8007db0:	691a      	ldr	r2, [r3, #16]
 8007db2:	68fb      	ldr	r3, [r7, #12]
 8007db4:	681b      	ldr	r3, [r3, #0]
 8007db6:	430a      	orrs	r2, r1
 8007db8:	651a      	str	r2, [r3, #80]	@ 0x50
      break;
 8007dba:	e023      	b.n	8007e04 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8007dbc:	68fb      	ldr	r3, [r7, #12]
 8007dbe:	681b      	ldr	r3, [r3, #0]
 8007dc0:	68b9      	ldr	r1, [r7, #8]
 8007dc2:	4618      	mov	r0, r3
 8007dc4:	f000 fc76 	bl	80086b4 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8007dc8:	68fb      	ldr	r3, [r7, #12]
 8007dca:	681b      	ldr	r3, [r3, #0]
 8007dcc:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8007dce:	68fb      	ldr	r3, [r7, #12]
 8007dd0:	681b      	ldr	r3, [r3, #0]
 8007dd2:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8007dd6:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8007dd8:	68fb      	ldr	r3, [r7, #12]
 8007dda:	681b      	ldr	r3, [r3, #0]
 8007ddc:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8007dde:	68fb      	ldr	r3, [r7, #12]
 8007de0:	681b      	ldr	r3, [r3, #0]
 8007de2:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8007de6:	651a      	str	r2, [r3, #80]	@ 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8007de8:	68fb      	ldr	r3, [r7, #12]
 8007dea:	681b      	ldr	r3, [r3, #0]
 8007dec:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 8007dee:	68bb      	ldr	r3, [r7, #8]
 8007df0:	691b      	ldr	r3, [r3, #16]
 8007df2:	021a      	lsls	r2, r3, #8
 8007df4:	68fb      	ldr	r3, [r7, #12]
 8007df6:	681b      	ldr	r3, [r3, #0]
 8007df8:	430a      	orrs	r2, r1
 8007dfa:	651a      	str	r2, [r3, #80]	@ 0x50
      break;
 8007dfc:	e002      	b.n	8007e04 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 8007dfe:	2301      	movs	r3, #1
 8007e00:	75fb      	strb	r3, [r7, #23]
      break;
 8007e02:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8007e04:	68fb      	ldr	r3, [r7, #12]
 8007e06:	2200      	movs	r2, #0
 8007e08:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8007e0c:	7dfb      	ldrb	r3, [r7, #23]
}
 8007e0e:	4618      	mov	r0, r3
 8007e10:	3718      	adds	r7, #24
 8007e12:	46bd      	mov	sp, r7
 8007e14:	bd80      	pop	{r7, pc}
 8007e16:	bf00      	nop

08007e18 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8007e18:	b580      	push	{r7, lr}
 8007e1a:	b084      	sub	sp, #16
 8007e1c:	af00      	add	r7, sp, #0
 8007e1e:	6078      	str	r0, [r7, #4]
 8007e20:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8007e22:	2300      	movs	r3, #0
 8007e24:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8007e26:	687b      	ldr	r3, [r7, #4]
 8007e28:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8007e2c:	2b01      	cmp	r3, #1
 8007e2e:	d101      	bne.n	8007e34 <HAL_TIM_ConfigClockSource+0x1c>
 8007e30:	2302      	movs	r3, #2
 8007e32:	e0de      	b.n	8007ff2 <HAL_TIM_ConfigClockSource+0x1da>
 8007e34:	687b      	ldr	r3, [r7, #4]
 8007e36:	2201      	movs	r2, #1
 8007e38:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8007e3c:	687b      	ldr	r3, [r7, #4]
 8007e3e:	2202      	movs	r2, #2
 8007e40:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8007e44:	687b      	ldr	r3, [r7, #4]
 8007e46:	681b      	ldr	r3, [r3, #0]
 8007e48:	689b      	ldr	r3, [r3, #8]
 8007e4a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8007e4c:	68bb      	ldr	r3, [r7, #8]
 8007e4e:	f423 1344 	bic.w	r3, r3, #3211264	@ 0x310000
 8007e52:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8007e56:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007e58:	68bb      	ldr	r3, [r7, #8]
 8007e5a:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8007e5e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8007e60:	687b      	ldr	r3, [r7, #4]
 8007e62:	681b      	ldr	r3, [r3, #0]
 8007e64:	68ba      	ldr	r2, [r7, #8]
 8007e66:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8007e68:	683b      	ldr	r3, [r7, #0]
 8007e6a:	681b      	ldr	r3, [r3, #0]
 8007e6c:	4a63      	ldr	r2, [pc, #396]	@ (8007ffc <HAL_TIM_ConfigClockSource+0x1e4>)
 8007e6e:	4293      	cmp	r3, r2
 8007e70:	f000 80a9 	beq.w	8007fc6 <HAL_TIM_ConfigClockSource+0x1ae>
 8007e74:	4a61      	ldr	r2, [pc, #388]	@ (8007ffc <HAL_TIM_ConfigClockSource+0x1e4>)
 8007e76:	4293      	cmp	r3, r2
 8007e78:	f200 80ae 	bhi.w	8007fd8 <HAL_TIM_ConfigClockSource+0x1c0>
 8007e7c:	4a60      	ldr	r2, [pc, #384]	@ (8008000 <HAL_TIM_ConfigClockSource+0x1e8>)
 8007e7e:	4293      	cmp	r3, r2
 8007e80:	f000 80a1 	beq.w	8007fc6 <HAL_TIM_ConfigClockSource+0x1ae>
 8007e84:	4a5e      	ldr	r2, [pc, #376]	@ (8008000 <HAL_TIM_ConfigClockSource+0x1e8>)
 8007e86:	4293      	cmp	r3, r2
 8007e88:	f200 80a6 	bhi.w	8007fd8 <HAL_TIM_ConfigClockSource+0x1c0>
 8007e8c:	4a5d      	ldr	r2, [pc, #372]	@ (8008004 <HAL_TIM_ConfigClockSource+0x1ec>)
 8007e8e:	4293      	cmp	r3, r2
 8007e90:	f000 8099 	beq.w	8007fc6 <HAL_TIM_ConfigClockSource+0x1ae>
 8007e94:	4a5b      	ldr	r2, [pc, #364]	@ (8008004 <HAL_TIM_ConfigClockSource+0x1ec>)
 8007e96:	4293      	cmp	r3, r2
 8007e98:	f200 809e 	bhi.w	8007fd8 <HAL_TIM_ConfigClockSource+0x1c0>
 8007e9c:	4a5a      	ldr	r2, [pc, #360]	@ (8008008 <HAL_TIM_ConfigClockSource+0x1f0>)
 8007e9e:	4293      	cmp	r3, r2
 8007ea0:	f000 8091 	beq.w	8007fc6 <HAL_TIM_ConfigClockSource+0x1ae>
 8007ea4:	4a58      	ldr	r2, [pc, #352]	@ (8008008 <HAL_TIM_ConfigClockSource+0x1f0>)
 8007ea6:	4293      	cmp	r3, r2
 8007ea8:	f200 8096 	bhi.w	8007fd8 <HAL_TIM_ConfigClockSource+0x1c0>
 8007eac:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 8007eb0:	f000 8089 	beq.w	8007fc6 <HAL_TIM_ConfigClockSource+0x1ae>
 8007eb4:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 8007eb8:	f200 808e 	bhi.w	8007fd8 <HAL_TIM_ConfigClockSource+0x1c0>
 8007ebc:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8007ec0:	d03e      	beq.n	8007f40 <HAL_TIM_ConfigClockSource+0x128>
 8007ec2:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8007ec6:	f200 8087 	bhi.w	8007fd8 <HAL_TIM_ConfigClockSource+0x1c0>
 8007eca:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007ece:	f000 8086 	beq.w	8007fde <HAL_TIM_ConfigClockSource+0x1c6>
 8007ed2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007ed6:	d87f      	bhi.n	8007fd8 <HAL_TIM_ConfigClockSource+0x1c0>
 8007ed8:	2b70      	cmp	r3, #112	@ 0x70
 8007eda:	d01a      	beq.n	8007f12 <HAL_TIM_ConfigClockSource+0xfa>
 8007edc:	2b70      	cmp	r3, #112	@ 0x70
 8007ede:	d87b      	bhi.n	8007fd8 <HAL_TIM_ConfigClockSource+0x1c0>
 8007ee0:	2b60      	cmp	r3, #96	@ 0x60
 8007ee2:	d050      	beq.n	8007f86 <HAL_TIM_ConfigClockSource+0x16e>
 8007ee4:	2b60      	cmp	r3, #96	@ 0x60
 8007ee6:	d877      	bhi.n	8007fd8 <HAL_TIM_ConfigClockSource+0x1c0>
 8007ee8:	2b50      	cmp	r3, #80	@ 0x50
 8007eea:	d03c      	beq.n	8007f66 <HAL_TIM_ConfigClockSource+0x14e>
 8007eec:	2b50      	cmp	r3, #80	@ 0x50
 8007eee:	d873      	bhi.n	8007fd8 <HAL_TIM_ConfigClockSource+0x1c0>
 8007ef0:	2b40      	cmp	r3, #64	@ 0x40
 8007ef2:	d058      	beq.n	8007fa6 <HAL_TIM_ConfigClockSource+0x18e>
 8007ef4:	2b40      	cmp	r3, #64	@ 0x40
 8007ef6:	d86f      	bhi.n	8007fd8 <HAL_TIM_ConfigClockSource+0x1c0>
 8007ef8:	2b30      	cmp	r3, #48	@ 0x30
 8007efa:	d064      	beq.n	8007fc6 <HAL_TIM_ConfigClockSource+0x1ae>
 8007efc:	2b30      	cmp	r3, #48	@ 0x30
 8007efe:	d86b      	bhi.n	8007fd8 <HAL_TIM_ConfigClockSource+0x1c0>
 8007f00:	2b20      	cmp	r3, #32
 8007f02:	d060      	beq.n	8007fc6 <HAL_TIM_ConfigClockSource+0x1ae>
 8007f04:	2b20      	cmp	r3, #32
 8007f06:	d867      	bhi.n	8007fd8 <HAL_TIM_ConfigClockSource+0x1c0>
 8007f08:	2b00      	cmp	r3, #0
 8007f0a:	d05c      	beq.n	8007fc6 <HAL_TIM_ConfigClockSource+0x1ae>
 8007f0c:	2b10      	cmp	r3, #16
 8007f0e:	d05a      	beq.n	8007fc6 <HAL_TIM_ConfigClockSource+0x1ae>
 8007f10:	e062      	b.n	8007fd8 <HAL_TIM_ConfigClockSource+0x1c0>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8007f12:	687b      	ldr	r3, [r7, #4]
 8007f14:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8007f16:	683b      	ldr	r3, [r7, #0]
 8007f18:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8007f1a:	683b      	ldr	r3, [r7, #0]
 8007f1c:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8007f1e:	683b      	ldr	r3, [r7, #0]
 8007f20:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8007f22:	f000 fca9 	bl	8008878 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8007f26:	687b      	ldr	r3, [r7, #4]
 8007f28:	681b      	ldr	r3, [r3, #0]
 8007f2a:	689b      	ldr	r3, [r3, #8]
 8007f2c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8007f2e:	68bb      	ldr	r3, [r7, #8]
 8007f30:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8007f34:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8007f36:	687b      	ldr	r3, [r7, #4]
 8007f38:	681b      	ldr	r3, [r3, #0]
 8007f3a:	68ba      	ldr	r2, [r7, #8]
 8007f3c:	609a      	str	r2, [r3, #8]
      break;
 8007f3e:	e04f      	b.n	8007fe0 <HAL_TIM_ConfigClockSource+0x1c8>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8007f40:	687b      	ldr	r3, [r7, #4]
 8007f42:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8007f44:	683b      	ldr	r3, [r7, #0]
 8007f46:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8007f48:	683b      	ldr	r3, [r7, #0]
 8007f4a:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8007f4c:	683b      	ldr	r3, [r7, #0]
 8007f4e:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8007f50:	f000 fc92 	bl	8008878 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8007f54:	687b      	ldr	r3, [r7, #4]
 8007f56:	681b      	ldr	r3, [r3, #0]
 8007f58:	689a      	ldr	r2, [r3, #8]
 8007f5a:	687b      	ldr	r3, [r7, #4]
 8007f5c:	681b      	ldr	r3, [r3, #0]
 8007f5e:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8007f62:	609a      	str	r2, [r3, #8]
      break;
 8007f64:	e03c      	b.n	8007fe0 <HAL_TIM_ConfigClockSource+0x1c8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8007f66:	687b      	ldr	r3, [r7, #4]
 8007f68:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8007f6a:	683b      	ldr	r3, [r7, #0]
 8007f6c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8007f6e:	683b      	ldr	r3, [r7, #0]
 8007f70:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8007f72:	461a      	mov	r2, r3
 8007f74:	f000 fc04 	bl	8008780 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8007f78:	687b      	ldr	r3, [r7, #4]
 8007f7a:	681b      	ldr	r3, [r3, #0]
 8007f7c:	2150      	movs	r1, #80	@ 0x50
 8007f7e:	4618      	mov	r0, r3
 8007f80:	f000 fc5d 	bl	800883e <TIM_ITRx_SetConfig>
      break;
 8007f84:	e02c      	b.n	8007fe0 <HAL_TIM_ConfigClockSource+0x1c8>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8007f86:	687b      	ldr	r3, [r7, #4]
 8007f88:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8007f8a:	683b      	ldr	r3, [r7, #0]
 8007f8c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8007f8e:	683b      	ldr	r3, [r7, #0]
 8007f90:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8007f92:	461a      	mov	r2, r3
 8007f94:	f000 fc23 	bl	80087de <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8007f98:	687b      	ldr	r3, [r7, #4]
 8007f9a:	681b      	ldr	r3, [r3, #0]
 8007f9c:	2160      	movs	r1, #96	@ 0x60
 8007f9e:	4618      	mov	r0, r3
 8007fa0:	f000 fc4d 	bl	800883e <TIM_ITRx_SetConfig>
      break;
 8007fa4:	e01c      	b.n	8007fe0 <HAL_TIM_ConfigClockSource+0x1c8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8007fa6:	687b      	ldr	r3, [r7, #4]
 8007fa8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8007faa:	683b      	ldr	r3, [r7, #0]
 8007fac:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8007fae:	683b      	ldr	r3, [r7, #0]
 8007fb0:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8007fb2:	461a      	mov	r2, r3
 8007fb4:	f000 fbe4 	bl	8008780 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8007fb8:	687b      	ldr	r3, [r7, #4]
 8007fba:	681b      	ldr	r3, [r3, #0]
 8007fbc:	2140      	movs	r1, #64	@ 0x40
 8007fbe:	4618      	mov	r0, r3
 8007fc0:	f000 fc3d 	bl	800883e <TIM_ITRx_SetConfig>
      break;
 8007fc4:	e00c      	b.n	8007fe0 <HAL_TIM_ConfigClockSource+0x1c8>
    case TIM_CLOCKSOURCE_ITR11:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_INSTANCE((htim->Instance), sClockSourceConfig->ClockSource));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8007fc6:	687b      	ldr	r3, [r7, #4]
 8007fc8:	681a      	ldr	r2, [r3, #0]
 8007fca:	683b      	ldr	r3, [r7, #0]
 8007fcc:	681b      	ldr	r3, [r3, #0]
 8007fce:	4619      	mov	r1, r3
 8007fd0:	4610      	mov	r0, r2
 8007fd2:	f000 fc34 	bl	800883e <TIM_ITRx_SetConfig>
      break;
 8007fd6:	e003      	b.n	8007fe0 <HAL_TIM_ConfigClockSource+0x1c8>
    }

    default:
      status = HAL_ERROR;
 8007fd8:	2301      	movs	r3, #1
 8007fda:	73fb      	strb	r3, [r7, #15]
      break;
 8007fdc:	e000      	b.n	8007fe0 <HAL_TIM_ConfigClockSource+0x1c8>
      break;
 8007fde:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8007fe0:	687b      	ldr	r3, [r7, #4]
 8007fe2:	2201      	movs	r2, #1
 8007fe4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8007fe8:	687b      	ldr	r3, [r7, #4]
 8007fea:	2200      	movs	r2, #0
 8007fec:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8007ff0:	7bfb      	ldrb	r3, [r7, #15]
}
 8007ff2:	4618      	mov	r0, r3
 8007ff4:	3710      	adds	r7, #16
 8007ff6:	46bd      	mov	sp, r7
 8007ff8:	bd80      	pop	{r7, pc}
 8007ffa:	bf00      	nop
 8007ffc:	00100070 	.word	0x00100070
 8008000:	00100040 	.word	0x00100040
 8008004:	00100030 	.word	0x00100030
 8008008:	00100020 	.word	0x00100020

0800800c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800800c:	b480      	push	{r7}
 800800e:	b083      	sub	sp, #12
 8008010:	af00      	add	r7, sp, #0
 8008012:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8008014:	bf00      	nop
 8008016:	370c      	adds	r7, #12
 8008018:	46bd      	mov	sp, r7
 800801a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800801e:	4770      	bx	lr

08008020 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8008020:	b480      	push	{r7}
 8008022:	b083      	sub	sp, #12
 8008024:	af00      	add	r7, sp, #0
 8008026:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8008028:	bf00      	nop
 800802a:	370c      	adds	r7, #12
 800802c:	46bd      	mov	sp, r7
 800802e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008032:	4770      	bx	lr

08008034 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8008034:	b480      	push	{r7}
 8008036:	b083      	sub	sp, #12
 8008038:	af00      	add	r7, sp, #0
 800803a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800803c:	bf00      	nop
 800803e:	370c      	adds	r7, #12
 8008040:	46bd      	mov	sp, r7
 8008042:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008046:	4770      	bx	lr

08008048 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8008048:	b480      	push	{r7}
 800804a:	b083      	sub	sp, #12
 800804c:	af00      	add	r7, sp, #0
 800804e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8008050:	bf00      	nop
 8008052:	370c      	adds	r7, #12
 8008054:	46bd      	mov	sp, r7
 8008056:	f85d 7b04 	ldr.w	r7, [sp], #4
 800805a:	4770      	bx	lr

0800805c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800805c:	b480      	push	{r7}
 800805e:	b085      	sub	sp, #20
 8008060:	af00      	add	r7, sp, #0
 8008062:	6078      	str	r0, [r7, #4]
 8008064:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8008066:	687b      	ldr	r3, [r7, #4]
 8008068:	681b      	ldr	r3, [r3, #0]
 800806a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800806c:	687b      	ldr	r3, [r7, #4]
 800806e:	4a42      	ldr	r2, [pc, #264]	@ (8008178 <TIM_Base_SetConfig+0x11c>)
 8008070:	4293      	cmp	r3, r2
 8008072:	d00f      	beq.n	8008094 <TIM_Base_SetConfig+0x38>
 8008074:	687b      	ldr	r3, [r7, #4]
 8008076:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800807a:	d00b      	beq.n	8008094 <TIM_Base_SetConfig+0x38>
 800807c:	687b      	ldr	r3, [r7, #4]
 800807e:	4a3f      	ldr	r2, [pc, #252]	@ (800817c <TIM_Base_SetConfig+0x120>)
 8008080:	4293      	cmp	r3, r2
 8008082:	d007      	beq.n	8008094 <TIM_Base_SetConfig+0x38>
 8008084:	687b      	ldr	r3, [r7, #4]
 8008086:	4a3e      	ldr	r2, [pc, #248]	@ (8008180 <TIM_Base_SetConfig+0x124>)
 8008088:	4293      	cmp	r3, r2
 800808a:	d003      	beq.n	8008094 <TIM_Base_SetConfig+0x38>
 800808c:	687b      	ldr	r3, [r7, #4]
 800808e:	4a3d      	ldr	r2, [pc, #244]	@ (8008184 <TIM_Base_SetConfig+0x128>)
 8008090:	4293      	cmp	r3, r2
 8008092:	d108      	bne.n	80080a6 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8008094:	68fb      	ldr	r3, [r7, #12]
 8008096:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800809a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800809c:	683b      	ldr	r3, [r7, #0]
 800809e:	685b      	ldr	r3, [r3, #4]
 80080a0:	68fa      	ldr	r2, [r7, #12]
 80080a2:	4313      	orrs	r3, r2
 80080a4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80080a6:	687b      	ldr	r3, [r7, #4]
 80080a8:	4a33      	ldr	r2, [pc, #204]	@ (8008178 <TIM_Base_SetConfig+0x11c>)
 80080aa:	4293      	cmp	r3, r2
 80080ac:	d01b      	beq.n	80080e6 <TIM_Base_SetConfig+0x8a>
 80080ae:	687b      	ldr	r3, [r7, #4]
 80080b0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80080b4:	d017      	beq.n	80080e6 <TIM_Base_SetConfig+0x8a>
 80080b6:	687b      	ldr	r3, [r7, #4]
 80080b8:	4a30      	ldr	r2, [pc, #192]	@ (800817c <TIM_Base_SetConfig+0x120>)
 80080ba:	4293      	cmp	r3, r2
 80080bc:	d013      	beq.n	80080e6 <TIM_Base_SetConfig+0x8a>
 80080be:	687b      	ldr	r3, [r7, #4]
 80080c0:	4a2f      	ldr	r2, [pc, #188]	@ (8008180 <TIM_Base_SetConfig+0x124>)
 80080c2:	4293      	cmp	r3, r2
 80080c4:	d00f      	beq.n	80080e6 <TIM_Base_SetConfig+0x8a>
 80080c6:	687b      	ldr	r3, [r7, #4]
 80080c8:	4a2e      	ldr	r2, [pc, #184]	@ (8008184 <TIM_Base_SetConfig+0x128>)
 80080ca:	4293      	cmp	r3, r2
 80080cc:	d00b      	beq.n	80080e6 <TIM_Base_SetConfig+0x8a>
 80080ce:	687b      	ldr	r3, [r7, #4]
 80080d0:	4a2d      	ldr	r2, [pc, #180]	@ (8008188 <TIM_Base_SetConfig+0x12c>)
 80080d2:	4293      	cmp	r3, r2
 80080d4:	d007      	beq.n	80080e6 <TIM_Base_SetConfig+0x8a>
 80080d6:	687b      	ldr	r3, [r7, #4]
 80080d8:	4a2c      	ldr	r2, [pc, #176]	@ (800818c <TIM_Base_SetConfig+0x130>)
 80080da:	4293      	cmp	r3, r2
 80080dc:	d003      	beq.n	80080e6 <TIM_Base_SetConfig+0x8a>
 80080de:	687b      	ldr	r3, [r7, #4]
 80080e0:	4a2b      	ldr	r2, [pc, #172]	@ (8008190 <TIM_Base_SetConfig+0x134>)
 80080e2:	4293      	cmp	r3, r2
 80080e4:	d108      	bne.n	80080f8 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80080e6:	68fb      	ldr	r3, [r7, #12]
 80080e8:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80080ec:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80080ee:	683b      	ldr	r3, [r7, #0]
 80080f0:	68db      	ldr	r3, [r3, #12]
 80080f2:	68fa      	ldr	r2, [r7, #12]
 80080f4:	4313      	orrs	r3, r2
 80080f6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80080f8:	68fb      	ldr	r3, [r7, #12]
 80080fa:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80080fe:	683b      	ldr	r3, [r7, #0]
 8008100:	695b      	ldr	r3, [r3, #20]
 8008102:	4313      	orrs	r3, r2
 8008104:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8008106:	687b      	ldr	r3, [r7, #4]
 8008108:	68fa      	ldr	r2, [r7, #12]
 800810a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800810c:	683b      	ldr	r3, [r7, #0]
 800810e:	689a      	ldr	r2, [r3, #8]
 8008110:	687b      	ldr	r3, [r7, #4]
 8008112:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8008114:	683b      	ldr	r3, [r7, #0]
 8008116:	681a      	ldr	r2, [r3, #0]
 8008118:	687b      	ldr	r3, [r7, #4]
 800811a:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800811c:	687b      	ldr	r3, [r7, #4]
 800811e:	4a16      	ldr	r2, [pc, #88]	@ (8008178 <TIM_Base_SetConfig+0x11c>)
 8008120:	4293      	cmp	r3, r2
 8008122:	d00f      	beq.n	8008144 <TIM_Base_SetConfig+0xe8>
 8008124:	687b      	ldr	r3, [r7, #4]
 8008126:	4a17      	ldr	r2, [pc, #92]	@ (8008184 <TIM_Base_SetConfig+0x128>)
 8008128:	4293      	cmp	r3, r2
 800812a:	d00b      	beq.n	8008144 <TIM_Base_SetConfig+0xe8>
 800812c:	687b      	ldr	r3, [r7, #4]
 800812e:	4a16      	ldr	r2, [pc, #88]	@ (8008188 <TIM_Base_SetConfig+0x12c>)
 8008130:	4293      	cmp	r3, r2
 8008132:	d007      	beq.n	8008144 <TIM_Base_SetConfig+0xe8>
 8008134:	687b      	ldr	r3, [r7, #4]
 8008136:	4a15      	ldr	r2, [pc, #84]	@ (800818c <TIM_Base_SetConfig+0x130>)
 8008138:	4293      	cmp	r3, r2
 800813a:	d003      	beq.n	8008144 <TIM_Base_SetConfig+0xe8>
 800813c:	687b      	ldr	r3, [r7, #4]
 800813e:	4a14      	ldr	r2, [pc, #80]	@ (8008190 <TIM_Base_SetConfig+0x134>)
 8008140:	4293      	cmp	r3, r2
 8008142:	d103      	bne.n	800814c <TIM_Base_SetConfig+0xf0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8008144:	683b      	ldr	r3, [r7, #0]
 8008146:	691a      	ldr	r2, [r3, #16]
 8008148:	687b      	ldr	r3, [r7, #4]
 800814a:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800814c:	687b      	ldr	r3, [r7, #4]
 800814e:	2201      	movs	r2, #1
 8008150:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8008152:	687b      	ldr	r3, [r7, #4]
 8008154:	691b      	ldr	r3, [r3, #16]
 8008156:	f003 0301 	and.w	r3, r3, #1
 800815a:	2b01      	cmp	r3, #1
 800815c:	d105      	bne.n	800816a <TIM_Base_SetConfig+0x10e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800815e:	687b      	ldr	r3, [r7, #4]
 8008160:	691b      	ldr	r3, [r3, #16]
 8008162:	f023 0201 	bic.w	r2, r3, #1
 8008166:	687b      	ldr	r3, [r7, #4]
 8008168:	611a      	str	r2, [r3, #16]
  }
}
 800816a:	bf00      	nop
 800816c:	3714      	adds	r7, #20
 800816e:	46bd      	mov	sp, r7
 8008170:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008174:	4770      	bx	lr
 8008176:	bf00      	nop
 8008178:	40012c00 	.word	0x40012c00
 800817c:	40000400 	.word	0x40000400
 8008180:	40000800 	.word	0x40000800
 8008184:	40013400 	.word	0x40013400
 8008188:	40014000 	.word	0x40014000
 800818c:	40014400 	.word	0x40014400
 8008190:	40014800 	.word	0x40014800

08008194 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8008194:	b480      	push	{r7}
 8008196:	b087      	sub	sp, #28
 8008198:	af00      	add	r7, sp, #0
 800819a:	6078      	str	r0, [r7, #4]
 800819c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800819e:	687b      	ldr	r3, [r7, #4]
 80081a0:	6a1b      	ldr	r3, [r3, #32]
 80081a2:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80081a4:	687b      	ldr	r3, [r7, #4]
 80081a6:	6a1b      	ldr	r3, [r3, #32]
 80081a8:	f023 0201 	bic.w	r2, r3, #1
 80081ac:	687b      	ldr	r3, [r7, #4]
 80081ae:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80081b0:	687b      	ldr	r3, [r7, #4]
 80081b2:	685b      	ldr	r3, [r3, #4]
 80081b4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80081b6:	687b      	ldr	r3, [r7, #4]
 80081b8:	699b      	ldr	r3, [r3, #24]
 80081ba:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80081bc:	68fb      	ldr	r3, [r7, #12]
 80081be:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80081c2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80081c6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80081c8:	68fb      	ldr	r3, [r7, #12]
 80081ca:	f023 0303 	bic.w	r3, r3, #3
 80081ce:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80081d0:	683b      	ldr	r3, [r7, #0]
 80081d2:	681b      	ldr	r3, [r3, #0]
 80081d4:	68fa      	ldr	r2, [r7, #12]
 80081d6:	4313      	orrs	r3, r2
 80081d8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80081da:	697b      	ldr	r3, [r7, #20]
 80081dc:	f023 0302 	bic.w	r3, r3, #2
 80081e0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80081e2:	683b      	ldr	r3, [r7, #0]
 80081e4:	689b      	ldr	r3, [r3, #8]
 80081e6:	697a      	ldr	r2, [r7, #20]
 80081e8:	4313      	orrs	r3, r2
 80081ea:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80081ec:	687b      	ldr	r3, [r7, #4]
 80081ee:	4a2c      	ldr	r2, [pc, #176]	@ (80082a0 <TIM_OC1_SetConfig+0x10c>)
 80081f0:	4293      	cmp	r3, r2
 80081f2:	d00f      	beq.n	8008214 <TIM_OC1_SetConfig+0x80>
 80081f4:	687b      	ldr	r3, [r7, #4]
 80081f6:	4a2b      	ldr	r2, [pc, #172]	@ (80082a4 <TIM_OC1_SetConfig+0x110>)
 80081f8:	4293      	cmp	r3, r2
 80081fa:	d00b      	beq.n	8008214 <TIM_OC1_SetConfig+0x80>
 80081fc:	687b      	ldr	r3, [r7, #4]
 80081fe:	4a2a      	ldr	r2, [pc, #168]	@ (80082a8 <TIM_OC1_SetConfig+0x114>)
 8008200:	4293      	cmp	r3, r2
 8008202:	d007      	beq.n	8008214 <TIM_OC1_SetConfig+0x80>
 8008204:	687b      	ldr	r3, [r7, #4]
 8008206:	4a29      	ldr	r2, [pc, #164]	@ (80082ac <TIM_OC1_SetConfig+0x118>)
 8008208:	4293      	cmp	r3, r2
 800820a:	d003      	beq.n	8008214 <TIM_OC1_SetConfig+0x80>
 800820c:	687b      	ldr	r3, [r7, #4]
 800820e:	4a28      	ldr	r2, [pc, #160]	@ (80082b0 <TIM_OC1_SetConfig+0x11c>)
 8008210:	4293      	cmp	r3, r2
 8008212:	d10c      	bne.n	800822e <TIM_OC1_SetConfig+0x9a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8008214:	697b      	ldr	r3, [r7, #20]
 8008216:	f023 0308 	bic.w	r3, r3, #8
 800821a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800821c:	683b      	ldr	r3, [r7, #0]
 800821e:	68db      	ldr	r3, [r3, #12]
 8008220:	697a      	ldr	r2, [r7, #20]
 8008222:	4313      	orrs	r3, r2
 8008224:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8008226:	697b      	ldr	r3, [r7, #20]
 8008228:	f023 0304 	bic.w	r3, r3, #4
 800822c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800822e:	687b      	ldr	r3, [r7, #4]
 8008230:	4a1b      	ldr	r2, [pc, #108]	@ (80082a0 <TIM_OC1_SetConfig+0x10c>)
 8008232:	4293      	cmp	r3, r2
 8008234:	d00f      	beq.n	8008256 <TIM_OC1_SetConfig+0xc2>
 8008236:	687b      	ldr	r3, [r7, #4]
 8008238:	4a1a      	ldr	r2, [pc, #104]	@ (80082a4 <TIM_OC1_SetConfig+0x110>)
 800823a:	4293      	cmp	r3, r2
 800823c:	d00b      	beq.n	8008256 <TIM_OC1_SetConfig+0xc2>
 800823e:	687b      	ldr	r3, [r7, #4]
 8008240:	4a19      	ldr	r2, [pc, #100]	@ (80082a8 <TIM_OC1_SetConfig+0x114>)
 8008242:	4293      	cmp	r3, r2
 8008244:	d007      	beq.n	8008256 <TIM_OC1_SetConfig+0xc2>
 8008246:	687b      	ldr	r3, [r7, #4]
 8008248:	4a18      	ldr	r2, [pc, #96]	@ (80082ac <TIM_OC1_SetConfig+0x118>)
 800824a:	4293      	cmp	r3, r2
 800824c:	d003      	beq.n	8008256 <TIM_OC1_SetConfig+0xc2>
 800824e:	687b      	ldr	r3, [r7, #4]
 8008250:	4a17      	ldr	r2, [pc, #92]	@ (80082b0 <TIM_OC1_SetConfig+0x11c>)
 8008252:	4293      	cmp	r3, r2
 8008254:	d111      	bne.n	800827a <TIM_OC1_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8008256:	693b      	ldr	r3, [r7, #16]
 8008258:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800825c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800825e:	693b      	ldr	r3, [r7, #16]
 8008260:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8008264:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8008266:	683b      	ldr	r3, [r7, #0]
 8008268:	695b      	ldr	r3, [r3, #20]
 800826a:	693a      	ldr	r2, [r7, #16]
 800826c:	4313      	orrs	r3, r2
 800826e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8008270:	683b      	ldr	r3, [r7, #0]
 8008272:	699b      	ldr	r3, [r3, #24]
 8008274:	693a      	ldr	r2, [r7, #16]
 8008276:	4313      	orrs	r3, r2
 8008278:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800827a:	687b      	ldr	r3, [r7, #4]
 800827c:	693a      	ldr	r2, [r7, #16]
 800827e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8008280:	687b      	ldr	r3, [r7, #4]
 8008282:	68fa      	ldr	r2, [r7, #12]
 8008284:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8008286:	683b      	ldr	r3, [r7, #0]
 8008288:	685a      	ldr	r2, [r3, #4]
 800828a:	687b      	ldr	r3, [r7, #4]
 800828c:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800828e:	687b      	ldr	r3, [r7, #4]
 8008290:	697a      	ldr	r2, [r7, #20]
 8008292:	621a      	str	r2, [r3, #32]
}
 8008294:	bf00      	nop
 8008296:	371c      	adds	r7, #28
 8008298:	46bd      	mov	sp, r7
 800829a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800829e:	4770      	bx	lr
 80082a0:	40012c00 	.word	0x40012c00
 80082a4:	40013400 	.word	0x40013400
 80082a8:	40014000 	.word	0x40014000
 80082ac:	40014400 	.word	0x40014400
 80082b0:	40014800 	.word	0x40014800

080082b4 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80082b4:	b480      	push	{r7}
 80082b6:	b087      	sub	sp, #28
 80082b8:	af00      	add	r7, sp, #0
 80082ba:	6078      	str	r0, [r7, #4]
 80082bc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80082be:	687b      	ldr	r3, [r7, #4]
 80082c0:	6a1b      	ldr	r3, [r3, #32]
 80082c2:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80082c4:	687b      	ldr	r3, [r7, #4]
 80082c6:	6a1b      	ldr	r3, [r3, #32]
 80082c8:	f023 0210 	bic.w	r2, r3, #16
 80082cc:	687b      	ldr	r3, [r7, #4]
 80082ce:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80082d0:	687b      	ldr	r3, [r7, #4]
 80082d2:	685b      	ldr	r3, [r3, #4]
 80082d4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80082d6:	687b      	ldr	r3, [r7, #4]
 80082d8:	699b      	ldr	r3, [r3, #24]
 80082da:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80082dc:	68fb      	ldr	r3, [r7, #12]
 80082de:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80082e2:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80082e6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80082e8:	68fb      	ldr	r3, [r7, #12]
 80082ea:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80082ee:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80082f0:	683b      	ldr	r3, [r7, #0]
 80082f2:	681b      	ldr	r3, [r3, #0]
 80082f4:	021b      	lsls	r3, r3, #8
 80082f6:	68fa      	ldr	r2, [r7, #12]
 80082f8:	4313      	orrs	r3, r2
 80082fa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80082fc:	697b      	ldr	r3, [r7, #20]
 80082fe:	f023 0320 	bic.w	r3, r3, #32
 8008302:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8008304:	683b      	ldr	r3, [r7, #0]
 8008306:	689b      	ldr	r3, [r3, #8]
 8008308:	011b      	lsls	r3, r3, #4
 800830a:	697a      	ldr	r2, [r7, #20]
 800830c:	4313      	orrs	r3, r2
 800830e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8008310:	687b      	ldr	r3, [r7, #4]
 8008312:	4a28      	ldr	r2, [pc, #160]	@ (80083b4 <TIM_OC2_SetConfig+0x100>)
 8008314:	4293      	cmp	r3, r2
 8008316:	d003      	beq.n	8008320 <TIM_OC2_SetConfig+0x6c>
 8008318:	687b      	ldr	r3, [r7, #4]
 800831a:	4a27      	ldr	r2, [pc, #156]	@ (80083b8 <TIM_OC2_SetConfig+0x104>)
 800831c:	4293      	cmp	r3, r2
 800831e:	d10d      	bne.n	800833c <TIM_OC2_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8008320:	697b      	ldr	r3, [r7, #20]
 8008322:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8008326:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8008328:	683b      	ldr	r3, [r7, #0]
 800832a:	68db      	ldr	r3, [r3, #12]
 800832c:	011b      	lsls	r3, r3, #4
 800832e:	697a      	ldr	r2, [r7, #20]
 8008330:	4313      	orrs	r3, r2
 8008332:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8008334:	697b      	ldr	r3, [r7, #20]
 8008336:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800833a:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800833c:	687b      	ldr	r3, [r7, #4]
 800833e:	4a1d      	ldr	r2, [pc, #116]	@ (80083b4 <TIM_OC2_SetConfig+0x100>)
 8008340:	4293      	cmp	r3, r2
 8008342:	d00f      	beq.n	8008364 <TIM_OC2_SetConfig+0xb0>
 8008344:	687b      	ldr	r3, [r7, #4]
 8008346:	4a1c      	ldr	r2, [pc, #112]	@ (80083b8 <TIM_OC2_SetConfig+0x104>)
 8008348:	4293      	cmp	r3, r2
 800834a:	d00b      	beq.n	8008364 <TIM_OC2_SetConfig+0xb0>
 800834c:	687b      	ldr	r3, [r7, #4]
 800834e:	4a1b      	ldr	r2, [pc, #108]	@ (80083bc <TIM_OC2_SetConfig+0x108>)
 8008350:	4293      	cmp	r3, r2
 8008352:	d007      	beq.n	8008364 <TIM_OC2_SetConfig+0xb0>
 8008354:	687b      	ldr	r3, [r7, #4]
 8008356:	4a1a      	ldr	r2, [pc, #104]	@ (80083c0 <TIM_OC2_SetConfig+0x10c>)
 8008358:	4293      	cmp	r3, r2
 800835a:	d003      	beq.n	8008364 <TIM_OC2_SetConfig+0xb0>
 800835c:	687b      	ldr	r3, [r7, #4]
 800835e:	4a19      	ldr	r2, [pc, #100]	@ (80083c4 <TIM_OC2_SetConfig+0x110>)
 8008360:	4293      	cmp	r3, r2
 8008362:	d113      	bne.n	800838c <TIM_OC2_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8008364:	693b      	ldr	r3, [r7, #16]
 8008366:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800836a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800836c:	693b      	ldr	r3, [r7, #16]
 800836e:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8008372:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8008374:	683b      	ldr	r3, [r7, #0]
 8008376:	695b      	ldr	r3, [r3, #20]
 8008378:	009b      	lsls	r3, r3, #2
 800837a:	693a      	ldr	r2, [r7, #16]
 800837c:	4313      	orrs	r3, r2
 800837e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8008380:	683b      	ldr	r3, [r7, #0]
 8008382:	699b      	ldr	r3, [r3, #24]
 8008384:	009b      	lsls	r3, r3, #2
 8008386:	693a      	ldr	r2, [r7, #16]
 8008388:	4313      	orrs	r3, r2
 800838a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800838c:	687b      	ldr	r3, [r7, #4]
 800838e:	693a      	ldr	r2, [r7, #16]
 8008390:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8008392:	687b      	ldr	r3, [r7, #4]
 8008394:	68fa      	ldr	r2, [r7, #12]
 8008396:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8008398:	683b      	ldr	r3, [r7, #0]
 800839a:	685a      	ldr	r2, [r3, #4]
 800839c:	687b      	ldr	r3, [r7, #4]
 800839e:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80083a0:	687b      	ldr	r3, [r7, #4]
 80083a2:	697a      	ldr	r2, [r7, #20]
 80083a4:	621a      	str	r2, [r3, #32]
}
 80083a6:	bf00      	nop
 80083a8:	371c      	adds	r7, #28
 80083aa:	46bd      	mov	sp, r7
 80083ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083b0:	4770      	bx	lr
 80083b2:	bf00      	nop
 80083b4:	40012c00 	.word	0x40012c00
 80083b8:	40013400 	.word	0x40013400
 80083bc:	40014000 	.word	0x40014000
 80083c0:	40014400 	.word	0x40014400
 80083c4:	40014800 	.word	0x40014800

080083c8 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80083c8:	b480      	push	{r7}
 80083ca:	b087      	sub	sp, #28
 80083cc:	af00      	add	r7, sp, #0
 80083ce:	6078      	str	r0, [r7, #4]
 80083d0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80083d2:	687b      	ldr	r3, [r7, #4]
 80083d4:	6a1b      	ldr	r3, [r3, #32]
 80083d6:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80083d8:	687b      	ldr	r3, [r7, #4]
 80083da:	6a1b      	ldr	r3, [r3, #32]
 80083dc:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80083e0:	687b      	ldr	r3, [r7, #4]
 80083e2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80083e4:	687b      	ldr	r3, [r7, #4]
 80083e6:	685b      	ldr	r3, [r3, #4]
 80083e8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80083ea:	687b      	ldr	r3, [r7, #4]
 80083ec:	69db      	ldr	r3, [r3, #28]
 80083ee:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80083f0:	68fb      	ldr	r3, [r7, #12]
 80083f2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80083f6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80083fa:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80083fc:	68fb      	ldr	r3, [r7, #12]
 80083fe:	f023 0303 	bic.w	r3, r3, #3
 8008402:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8008404:	683b      	ldr	r3, [r7, #0]
 8008406:	681b      	ldr	r3, [r3, #0]
 8008408:	68fa      	ldr	r2, [r7, #12]
 800840a:	4313      	orrs	r3, r2
 800840c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800840e:	697b      	ldr	r3, [r7, #20]
 8008410:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8008414:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8008416:	683b      	ldr	r3, [r7, #0]
 8008418:	689b      	ldr	r3, [r3, #8]
 800841a:	021b      	lsls	r3, r3, #8
 800841c:	697a      	ldr	r2, [r7, #20]
 800841e:	4313      	orrs	r3, r2
 8008420:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8008422:	687b      	ldr	r3, [r7, #4]
 8008424:	4a27      	ldr	r2, [pc, #156]	@ (80084c4 <TIM_OC3_SetConfig+0xfc>)
 8008426:	4293      	cmp	r3, r2
 8008428:	d003      	beq.n	8008432 <TIM_OC3_SetConfig+0x6a>
 800842a:	687b      	ldr	r3, [r7, #4]
 800842c:	4a26      	ldr	r2, [pc, #152]	@ (80084c8 <TIM_OC3_SetConfig+0x100>)
 800842e:	4293      	cmp	r3, r2
 8008430:	d10d      	bne.n	800844e <TIM_OC3_SetConfig+0x86>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8008432:	697b      	ldr	r3, [r7, #20]
 8008434:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8008438:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800843a:	683b      	ldr	r3, [r7, #0]
 800843c:	68db      	ldr	r3, [r3, #12]
 800843e:	021b      	lsls	r3, r3, #8
 8008440:	697a      	ldr	r2, [r7, #20]
 8008442:	4313      	orrs	r3, r2
 8008444:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8008446:	697b      	ldr	r3, [r7, #20]
 8008448:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800844c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800844e:	687b      	ldr	r3, [r7, #4]
 8008450:	4a1c      	ldr	r2, [pc, #112]	@ (80084c4 <TIM_OC3_SetConfig+0xfc>)
 8008452:	4293      	cmp	r3, r2
 8008454:	d00f      	beq.n	8008476 <TIM_OC3_SetConfig+0xae>
 8008456:	687b      	ldr	r3, [r7, #4]
 8008458:	4a1b      	ldr	r2, [pc, #108]	@ (80084c8 <TIM_OC3_SetConfig+0x100>)
 800845a:	4293      	cmp	r3, r2
 800845c:	d00b      	beq.n	8008476 <TIM_OC3_SetConfig+0xae>
 800845e:	687b      	ldr	r3, [r7, #4]
 8008460:	4a1a      	ldr	r2, [pc, #104]	@ (80084cc <TIM_OC3_SetConfig+0x104>)
 8008462:	4293      	cmp	r3, r2
 8008464:	d007      	beq.n	8008476 <TIM_OC3_SetConfig+0xae>
 8008466:	687b      	ldr	r3, [r7, #4]
 8008468:	4a19      	ldr	r2, [pc, #100]	@ (80084d0 <TIM_OC3_SetConfig+0x108>)
 800846a:	4293      	cmp	r3, r2
 800846c:	d003      	beq.n	8008476 <TIM_OC3_SetConfig+0xae>
 800846e:	687b      	ldr	r3, [r7, #4]
 8008470:	4a18      	ldr	r2, [pc, #96]	@ (80084d4 <TIM_OC3_SetConfig+0x10c>)
 8008472:	4293      	cmp	r3, r2
 8008474:	d113      	bne.n	800849e <TIM_OC3_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8008476:	693b      	ldr	r3, [r7, #16]
 8008478:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800847c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800847e:	693b      	ldr	r3, [r7, #16]
 8008480:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8008484:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8008486:	683b      	ldr	r3, [r7, #0]
 8008488:	695b      	ldr	r3, [r3, #20]
 800848a:	011b      	lsls	r3, r3, #4
 800848c:	693a      	ldr	r2, [r7, #16]
 800848e:	4313      	orrs	r3, r2
 8008490:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8008492:	683b      	ldr	r3, [r7, #0]
 8008494:	699b      	ldr	r3, [r3, #24]
 8008496:	011b      	lsls	r3, r3, #4
 8008498:	693a      	ldr	r2, [r7, #16]
 800849a:	4313      	orrs	r3, r2
 800849c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800849e:	687b      	ldr	r3, [r7, #4]
 80084a0:	693a      	ldr	r2, [r7, #16]
 80084a2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80084a4:	687b      	ldr	r3, [r7, #4]
 80084a6:	68fa      	ldr	r2, [r7, #12]
 80084a8:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80084aa:	683b      	ldr	r3, [r7, #0]
 80084ac:	685a      	ldr	r2, [r3, #4]
 80084ae:	687b      	ldr	r3, [r7, #4]
 80084b0:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80084b2:	687b      	ldr	r3, [r7, #4]
 80084b4:	697a      	ldr	r2, [r7, #20]
 80084b6:	621a      	str	r2, [r3, #32]
}
 80084b8:	bf00      	nop
 80084ba:	371c      	adds	r7, #28
 80084bc:	46bd      	mov	sp, r7
 80084be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084c2:	4770      	bx	lr
 80084c4:	40012c00 	.word	0x40012c00
 80084c8:	40013400 	.word	0x40013400
 80084cc:	40014000 	.word	0x40014000
 80084d0:	40014400 	.word	0x40014400
 80084d4:	40014800 	.word	0x40014800

080084d8 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80084d8:	b480      	push	{r7}
 80084da:	b087      	sub	sp, #28
 80084dc:	af00      	add	r7, sp, #0
 80084de:	6078      	str	r0, [r7, #4]
 80084e0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80084e2:	687b      	ldr	r3, [r7, #4]
 80084e4:	6a1b      	ldr	r3, [r3, #32]
 80084e6:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80084e8:	687b      	ldr	r3, [r7, #4]
 80084ea:	6a1b      	ldr	r3, [r3, #32]
 80084ec:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 80084f0:	687b      	ldr	r3, [r7, #4]
 80084f2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80084f4:	687b      	ldr	r3, [r7, #4]
 80084f6:	685b      	ldr	r3, [r3, #4]
 80084f8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80084fa:	687b      	ldr	r3, [r7, #4]
 80084fc:	69db      	ldr	r3, [r3, #28]
 80084fe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8008500:	68fb      	ldr	r3, [r7, #12]
 8008502:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8008506:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800850a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800850c:	68fb      	ldr	r3, [r7, #12]
 800850e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8008512:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8008514:	683b      	ldr	r3, [r7, #0]
 8008516:	681b      	ldr	r3, [r3, #0]
 8008518:	021b      	lsls	r3, r3, #8
 800851a:	68fa      	ldr	r2, [r7, #12]
 800851c:	4313      	orrs	r3, r2
 800851e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8008520:	697b      	ldr	r3, [r7, #20]
 8008522:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8008526:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8008528:	683b      	ldr	r3, [r7, #0]
 800852a:	689b      	ldr	r3, [r3, #8]
 800852c:	031b      	lsls	r3, r3, #12
 800852e:	697a      	ldr	r2, [r7, #20]
 8008530:	4313      	orrs	r3, r2
 8008532:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_4))
 8008534:	687b      	ldr	r3, [r7, #4]
 8008536:	4a28      	ldr	r2, [pc, #160]	@ (80085d8 <TIM_OC4_SetConfig+0x100>)
 8008538:	4293      	cmp	r3, r2
 800853a:	d003      	beq.n	8008544 <TIM_OC4_SetConfig+0x6c>
 800853c:	687b      	ldr	r3, [r7, #4]
 800853e:	4a27      	ldr	r2, [pc, #156]	@ (80085dc <TIM_OC4_SetConfig+0x104>)
 8008540:	4293      	cmp	r3, r2
 8008542:	d10d      	bne.n	8008560 <TIM_OC4_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC4NP;
 8008544:	697b      	ldr	r3, [r7, #20]
 8008546:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 800854a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 12U);
 800854c:	683b      	ldr	r3, [r7, #0]
 800854e:	68db      	ldr	r3, [r3, #12]
 8008550:	031b      	lsls	r3, r3, #12
 8008552:	697a      	ldr	r2, [r7, #20]
 8008554:	4313      	orrs	r3, r2
 8008556:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC4NE;
 8008558:	697b      	ldr	r3, [r7, #20]
 800855a:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800855e:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008560:	687b      	ldr	r3, [r7, #4]
 8008562:	4a1d      	ldr	r2, [pc, #116]	@ (80085d8 <TIM_OC4_SetConfig+0x100>)
 8008564:	4293      	cmp	r3, r2
 8008566:	d00f      	beq.n	8008588 <TIM_OC4_SetConfig+0xb0>
 8008568:	687b      	ldr	r3, [r7, #4]
 800856a:	4a1c      	ldr	r2, [pc, #112]	@ (80085dc <TIM_OC4_SetConfig+0x104>)
 800856c:	4293      	cmp	r3, r2
 800856e:	d00b      	beq.n	8008588 <TIM_OC4_SetConfig+0xb0>
 8008570:	687b      	ldr	r3, [r7, #4]
 8008572:	4a1b      	ldr	r2, [pc, #108]	@ (80085e0 <TIM_OC4_SetConfig+0x108>)
 8008574:	4293      	cmp	r3, r2
 8008576:	d007      	beq.n	8008588 <TIM_OC4_SetConfig+0xb0>
 8008578:	687b      	ldr	r3, [r7, #4]
 800857a:	4a1a      	ldr	r2, [pc, #104]	@ (80085e4 <TIM_OC4_SetConfig+0x10c>)
 800857c:	4293      	cmp	r3, r2
 800857e:	d003      	beq.n	8008588 <TIM_OC4_SetConfig+0xb0>
 8008580:	687b      	ldr	r3, [r7, #4]
 8008582:	4a19      	ldr	r2, [pc, #100]	@ (80085e8 <TIM_OC4_SetConfig+0x110>)
 8008584:	4293      	cmp	r3, r2
 8008586:	d113      	bne.n	80085b0 <TIM_OC4_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8008588:	693b      	ldr	r3, [r7, #16]
 800858a:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800858e:	613b      	str	r3, [r7, #16]
    /* Reset the Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4N;
 8008590:	693b      	ldr	r3, [r7, #16]
 8008592:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8008596:	613b      	str	r3, [r7, #16]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8008598:	683b      	ldr	r3, [r7, #0]
 800859a:	695b      	ldr	r3, [r3, #20]
 800859c:	019b      	lsls	r3, r3, #6
 800859e:	693a      	ldr	r2, [r7, #16]
 80085a0:	4313      	orrs	r3, r2
 80085a2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 6U);
 80085a4:	683b      	ldr	r3, [r7, #0]
 80085a6:	699b      	ldr	r3, [r3, #24]
 80085a8:	019b      	lsls	r3, r3, #6
 80085aa:	693a      	ldr	r2, [r7, #16]
 80085ac:	4313      	orrs	r3, r2
 80085ae:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80085b0:	687b      	ldr	r3, [r7, #4]
 80085b2:	693a      	ldr	r2, [r7, #16]
 80085b4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80085b6:	687b      	ldr	r3, [r7, #4]
 80085b8:	68fa      	ldr	r2, [r7, #12]
 80085ba:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80085bc:	683b      	ldr	r3, [r7, #0]
 80085be:	685a      	ldr	r2, [r3, #4]
 80085c0:	687b      	ldr	r3, [r7, #4]
 80085c2:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80085c4:	687b      	ldr	r3, [r7, #4]
 80085c6:	697a      	ldr	r2, [r7, #20]
 80085c8:	621a      	str	r2, [r3, #32]
}
 80085ca:	bf00      	nop
 80085cc:	371c      	adds	r7, #28
 80085ce:	46bd      	mov	sp, r7
 80085d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085d4:	4770      	bx	lr
 80085d6:	bf00      	nop
 80085d8:	40012c00 	.word	0x40012c00
 80085dc:	40013400 	.word	0x40013400
 80085e0:	40014000 	.word	0x40014000
 80085e4:	40014400 	.word	0x40014400
 80085e8:	40014800 	.word	0x40014800

080085ec <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 80085ec:	b480      	push	{r7}
 80085ee:	b087      	sub	sp, #28
 80085f0:	af00      	add	r7, sp, #0
 80085f2:	6078      	str	r0, [r7, #4]
 80085f4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80085f6:	687b      	ldr	r3, [r7, #4]
 80085f8:	6a1b      	ldr	r3, [r3, #32]
 80085fa:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 80085fc:	687b      	ldr	r3, [r7, #4]
 80085fe:	6a1b      	ldr	r3, [r3, #32]
 8008600:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8008604:	687b      	ldr	r3, [r7, #4]
 8008606:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008608:	687b      	ldr	r3, [r7, #4]
 800860a:	685b      	ldr	r3, [r3, #4]
 800860c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800860e:	687b      	ldr	r3, [r7, #4]
 8008610:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008612:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8008614:	68fb      	ldr	r3, [r7, #12]
 8008616:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800861a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800861e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8008620:	683b      	ldr	r3, [r7, #0]
 8008622:	681b      	ldr	r3, [r3, #0]
 8008624:	68fa      	ldr	r2, [r7, #12]
 8008626:	4313      	orrs	r3, r2
 8008628:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800862a:	693b      	ldr	r3, [r7, #16]
 800862c:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 8008630:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8008632:	683b      	ldr	r3, [r7, #0]
 8008634:	689b      	ldr	r3, [r3, #8]
 8008636:	041b      	lsls	r3, r3, #16
 8008638:	693a      	ldr	r2, [r7, #16]
 800863a:	4313      	orrs	r3, r2
 800863c:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800863e:	687b      	ldr	r3, [r7, #4]
 8008640:	4a17      	ldr	r2, [pc, #92]	@ (80086a0 <TIM_OC5_SetConfig+0xb4>)
 8008642:	4293      	cmp	r3, r2
 8008644:	d00f      	beq.n	8008666 <TIM_OC5_SetConfig+0x7a>
 8008646:	687b      	ldr	r3, [r7, #4]
 8008648:	4a16      	ldr	r2, [pc, #88]	@ (80086a4 <TIM_OC5_SetConfig+0xb8>)
 800864a:	4293      	cmp	r3, r2
 800864c:	d00b      	beq.n	8008666 <TIM_OC5_SetConfig+0x7a>
 800864e:	687b      	ldr	r3, [r7, #4]
 8008650:	4a15      	ldr	r2, [pc, #84]	@ (80086a8 <TIM_OC5_SetConfig+0xbc>)
 8008652:	4293      	cmp	r3, r2
 8008654:	d007      	beq.n	8008666 <TIM_OC5_SetConfig+0x7a>
 8008656:	687b      	ldr	r3, [r7, #4]
 8008658:	4a14      	ldr	r2, [pc, #80]	@ (80086ac <TIM_OC5_SetConfig+0xc0>)
 800865a:	4293      	cmp	r3, r2
 800865c:	d003      	beq.n	8008666 <TIM_OC5_SetConfig+0x7a>
 800865e:	687b      	ldr	r3, [r7, #4]
 8008660:	4a13      	ldr	r2, [pc, #76]	@ (80086b0 <TIM_OC5_SetConfig+0xc4>)
 8008662:	4293      	cmp	r3, r2
 8008664:	d109      	bne.n	800867a <TIM_OC5_SetConfig+0x8e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8008666:	697b      	ldr	r3, [r7, #20]
 8008668:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800866c:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800866e:	683b      	ldr	r3, [r7, #0]
 8008670:	695b      	ldr	r3, [r3, #20]
 8008672:	021b      	lsls	r3, r3, #8
 8008674:	697a      	ldr	r2, [r7, #20]
 8008676:	4313      	orrs	r3, r2
 8008678:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800867a:	687b      	ldr	r3, [r7, #4]
 800867c:	697a      	ldr	r2, [r7, #20]
 800867e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8008680:	687b      	ldr	r3, [r7, #4]
 8008682:	68fa      	ldr	r2, [r7, #12]
 8008684:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8008686:	683b      	ldr	r3, [r7, #0]
 8008688:	685a      	ldr	r2, [r3, #4]
 800868a:	687b      	ldr	r3, [r7, #4]
 800868c:	649a      	str	r2, [r3, #72]	@ 0x48

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800868e:	687b      	ldr	r3, [r7, #4]
 8008690:	693a      	ldr	r2, [r7, #16]
 8008692:	621a      	str	r2, [r3, #32]
}
 8008694:	bf00      	nop
 8008696:	371c      	adds	r7, #28
 8008698:	46bd      	mov	sp, r7
 800869a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800869e:	4770      	bx	lr
 80086a0:	40012c00 	.word	0x40012c00
 80086a4:	40013400 	.word	0x40013400
 80086a8:	40014000 	.word	0x40014000
 80086ac:	40014400 	.word	0x40014400
 80086b0:	40014800 	.word	0x40014800

080086b4 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 80086b4:	b480      	push	{r7}
 80086b6:	b087      	sub	sp, #28
 80086b8:	af00      	add	r7, sp, #0
 80086ba:	6078      	str	r0, [r7, #4]
 80086bc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80086be:	687b      	ldr	r3, [r7, #4]
 80086c0:	6a1b      	ldr	r3, [r3, #32]
 80086c2:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 80086c4:	687b      	ldr	r3, [r7, #4]
 80086c6:	6a1b      	ldr	r3, [r3, #32]
 80086c8:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 80086cc:	687b      	ldr	r3, [r7, #4]
 80086ce:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80086d0:	687b      	ldr	r3, [r7, #4]
 80086d2:	685b      	ldr	r3, [r3, #4]
 80086d4:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80086d6:	687b      	ldr	r3, [r7, #4]
 80086d8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80086da:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 80086dc:	68fb      	ldr	r3, [r7, #12]
 80086de:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80086e2:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80086e6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80086e8:	683b      	ldr	r3, [r7, #0]
 80086ea:	681b      	ldr	r3, [r3, #0]
 80086ec:	021b      	lsls	r3, r3, #8
 80086ee:	68fa      	ldr	r2, [r7, #12]
 80086f0:	4313      	orrs	r3, r2
 80086f2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 80086f4:	693b      	ldr	r3, [r7, #16]
 80086f6:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 80086fa:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 80086fc:	683b      	ldr	r3, [r7, #0]
 80086fe:	689b      	ldr	r3, [r3, #8]
 8008700:	051b      	lsls	r3, r3, #20
 8008702:	693a      	ldr	r2, [r7, #16]
 8008704:	4313      	orrs	r3, r2
 8008706:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008708:	687b      	ldr	r3, [r7, #4]
 800870a:	4a18      	ldr	r2, [pc, #96]	@ (800876c <TIM_OC6_SetConfig+0xb8>)
 800870c:	4293      	cmp	r3, r2
 800870e:	d00f      	beq.n	8008730 <TIM_OC6_SetConfig+0x7c>
 8008710:	687b      	ldr	r3, [r7, #4]
 8008712:	4a17      	ldr	r2, [pc, #92]	@ (8008770 <TIM_OC6_SetConfig+0xbc>)
 8008714:	4293      	cmp	r3, r2
 8008716:	d00b      	beq.n	8008730 <TIM_OC6_SetConfig+0x7c>
 8008718:	687b      	ldr	r3, [r7, #4]
 800871a:	4a16      	ldr	r2, [pc, #88]	@ (8008774 <TIM_OC6_SetConfig+0xc0>)
 800871c:	4293      	cmp	r3, r2
 800871e:	d007      	beq.n	8008730 <TIM_OC6_SetConfig+0x7c>
 8008720:	687b      	ldr	r3, [r7, #4]
 8008722:	4a15      	ldr	r2, [pc, #84]	@ (8008778 <TIM_OC6_SetConfig+0xc4>)
 8008724:	4293      	cmp	r3, r2
 8008726:	d003      	beq.n	8008730 <TIM_OC6_SetConfig+0x7c>
 8008728:	687b      	ldr	r3, [r7, #4]
 800872a:	4a14      	ldr	r2, [pc, #80]	@ (800877c <TIM_OC6_SetConfig+0xc8>)
 800872c:	4293      	cmp	r3, r2
 800872e:	d109      	bne.n	8008744 <TIM_OC6_SetConfig+0x90>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8008730:	697b      	ldr	r3, [r7, #20]
 8008732:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8008736:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8008738:	683b      	ldr	r3, [r7, #0]
 800873a:	695b      	ldr	r3, [r3, #20]
 800873c:	029b      	lsls	r3, r3, #10
 800873e:	697a      	ldr	r2, [r7, #20]
 8008740:	4313      	orrs	r3, r2
 8008742:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008744:	687b      	ldr	r3, [r7, #4]
 8008746:	697a      	ldr	r2, [r7, #20]
 8008748:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800874a:	687b      	ldr	r3, [r7, #4]
 800874c:	68fa      	ldr	r2, [r7, #12]
 800874e:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8008750:	683b      	ldr	r3, [r7, #0]
 8008752:	685a      	ldr	r2, [r3, #4]
 8008754:	687b      	ldr	r3, [r7, #4]
 8008756:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008758:	687b      	ldr	r3, [r7, #4]
 800875a:	693a      	ldr	r2, [r7, #16]
 800875c:	621a      	str	r2, [r3, #32]
}
 800875e:	bf00      	nop
 8008760:	371c      	adds	r7, #28
 8008762:	46bd      	mov	sp, r7
 8008764:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008768:	4770      	bx	lr
 800876a:	bf00      	nop
 800876c:	40012c00 	.word	0x40012c00
 8008770:	40013400 	.word	0x40013400
 8008774:	40014000 	.word	0x40014000
 8008778:	40014400 	.word	0x40014400
 800877c:	40014800 	.word	0x40014800

08008780 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8008780:	b480      	push	{r7}
 8008782:	b087      	sub	sp, #28
 8008784:	af00      	add	r7, sp, #0
 8008786:	60f8      	str	r0, [r7, #12]
 8008788:	60b9      	str	r1, [r7, #8]
 800878a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800878c:	68fb      	ldr	r3, [r7, #12]
 800878e:	6a1b      	ldr	r3, [r3, #32]
 8008790:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8008792:	68fb      	ldr	r3, [r7, #12]
 8008794:	6a1b      	ldr	r3, [r3, #32]
 8008796:	f023 0201 	bic.w	r2, r3, #1
 800879a:	68fb      	ldr	r3, [r7, #12]
 800879c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800879e:	68fb      	ldr	r3, [r7, #12]
 80087a0:	699b      	ldr	r3, [r3, #24]
 80087a2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80087a4:	693b      	ldr	r3, [r7, #16]
 80087a6:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80087aa:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80087ac:	687b      	ldr	r3, [r7, #4]
 80087ae:	011b      	lsls	r3, r3, #4
 80087b0:	693a      	ldr	r2, [r7, #16]
 80087b2:	4313      	orrs	r3, r2
 80087b4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80087b6:	697b      	ldr	r3, [r7, #20]
 80087b8:	f023 030a 	bic.w	r3, r3, #10
 80087bc:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80087be:	697a      	ldr	r2, [r7, #20]
 80087c0:	68bb      	ldr	r3, [r7, #8]
 80087c2:	4313      	orrs	r3, r2
 80087c4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80087c6:	68fb      	ldr	r3, [r7, #12]
 80087c8:	693a      	ldr	r2, [r7, #16]
 80087ca:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80087cc:	68fb      	ldr	r3, [r7, #12]
 80087ce:	697a      	ldr	r2, [r7, #20]
 80087d0:	621a      	str	r2, [r3, #32]
}
 80087d2:	bf00      	nop
 80087d4:	371c      	adds	r7, #28
 80087d6:	46bd      	mov	sp, r7
 80087d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087dc:	4770      	bx	lr

080087de <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80087de:	b480      	push	{r7}
 80087e0:	b087      	sub	sp, #28
 80087e2:	af00      	add	r7, sp, #0
 80087e4:	60f8      	str	r0, [r7, #12]
 80087e6:	60b9      	str	r1, [r7, #8]
 80087e8:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 80087ea:	68fb      	ldr	r3, [r7, #12]
 80087ec:	6a1b      	ldr	r3, [r3, #32]
 80087ee:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80087f0:	68fb      	ldr	r3, [r7, #12]
 80087f2:	6a1b      	ldr	r3, [r3, #32]
 80087f4:	f023 0210 	bic.w	r2, r3, #16
 80087f8:	68fb      	ldr	r3, [r7, #12]
 80087fa:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80087fc:	68fb      	ldr	r3, [r7, #12]
 80087fe:	699b      	ldr	r3, [r3, #24]
 8008800:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8008802:	693b      	ldr	r3, [r7, #16]
 8008804:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8008808:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800880a:	687b      	ldr	r3, [r7, #4]
 800880c:	031b      	lsls	r3, r3, #12
 800880e:	693a      	ldr	r2, [r7, #16]
 8008810:	4313      	orrs	r3, r2
 8008812:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8008814:	697b      	ldr	r3, [r7, #20]
 8008816:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 800881a:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 800881c:	68bb      	ldr	r3, [r7, #8]
 800881e:	011b      	lsls	r3, r3, #4
 8008820:	697a      	ldr	r2, [r7, #20]
 8008822:	4313      	orrs	r3, r2
 8008824:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8008826:	68fb      	ldr	r3, [r7, #12]
 8008828:	693a      	ldr	r2, [r7, #16]
 800882a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800882c:	68fb      	ldr	r3, [r7, #12]
 800882e:	697a      	ldr	r2, [r7, #20]
 8008830:	621a      	str	r2, [r3, #32]
}
 8008832:	bf00      	nop
 8008834:	371c      	adds	r7, #28
 8008836:	46bd      	mov	sp, r7
 8008838:	f85d 7b04 	ldr.w	r7, [sp], #4
 800883c:	4770      	bx	lr

0800883e <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800883e:	b480      	push	{r7}
 8008840:	b085      	sub	sp, #20
 8008842:	af00      	add	r7, sp, #0
 8008844:	6078      	str	r0, [r7, #4]
 8008846:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8008848:	687b      	ldr	r3, [r7, #4]
 800884a:	689b      	ldr	r3, [r3, #8]
 800884c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800884e:	68fb      	ldr	r3, [r7, #12]
 8008850:	f423 1340 	bic.w	r3, r3, #3145728	@ 0x300000
 8008854:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008858:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800885a:	683a      	ldr	r2, [r7, #0]
 800885c:	68fb      	ldr	r3, [r7, #12]
 800885e:	4313      	orrs	r3, r2
 8008860:	f043 0307 	orr.w	r3, r3, #7
 8008864:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8008866:	687b      	ldr	r3, [r7, #4]
 8008868:	68fa      	ldr	r2, [r7, #12]
 800886a:	609a      	str	r2, [r3, #8]
}
 800886c:	bf00      	nop
 800886e:	3714      	adds	r7, #20
 8008870:	46bd      	mov	sp, r7
 8008872:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008876:	4770      	bx	lr

08008878 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8008878:	b480      	push	{r7}
 800887a:	b087      	sub	sp, #28
 800887c:	af00      	add	r7, sp, #0
 800887e:	60f8      	str	r0, [r7, #12]
 8008880:	60b9      	str	r1, [r7, #8]
 8008882:	607a      	str	r2, [r7, #4]
 8008884:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8008886:	68fb      	ldr	r3, [r7, #12]
 8008888:	689b      	ldr	r3, [r3, #8]
 800888a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800888c:	697b      	ldr	r3, [r7, #20]
 800888e:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8008892:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8008894:	683b      	ldr	r3, [r7, #0]
 8008896:	021a      	lsls	r2, r3, #8
 8008898:	687b      	ldr	r3, [r7, #4]
 800889a:	431a      	orrs	r2, r3
 800889c:	68bb      	ldr	r3, [r7, #8]
 800889e:	4313      	orrs	r3, r2
 80088a0:	697a      	ldr	r2, [r7, #20]
 80088a2:	4313      	orrs	r3, r2
 80088a4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80088a6:	68fb      	ldr	r3, [r7, #12]
 80088a8:	697a      	ldr	r2, [r7, #20]
 80088aa:	609a      	str	r2, [r3, #8]
}
 80088ac:	bf00      	nop
 80088ae:	371c      	adds	r7, #28
 80088b0:	46bd      	mov	sp, r7
 80088b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088b6:	4770      	bx	lr

080088b8 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80088b8:	b480      	push	{r7}
 80088ba:	b087      	sub	sp, #28
 80088bc:	af00      	add	r7, sp, #0
 80088be:	60f8      	str	r0, [r7, #12]
 80088c0:	60b9      	str	r1, [r7, #8]
 80088c2:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80088c4:	68bb      	ldr	r3, [r7, #8]
 80088c6:	f003 031f 	and.w	r3, r3, #31
 80088ca:	2201      	movs	r2, #1
 80088cc:	fa02 f303 	lsl.w	r3, r2, r3
 80088d0:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80088d2:	68fb      	ldr	r3, [r7, #12]
 80088d4:	6a1a      	ldr	r2, [r3, #32]
 80088d6:	697b      	ldr	r3, [r7, #20]
 80088d8:	43db      	mvns	r3, r3
 80088da:	401a      	ands	r2, r3
 80088dc:	68fb      	ldr	r3, [r7, #12]
 80088de:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80088e0:	68fb      	ldr	r3, [r7, #12]
 80088e2:	6a1a      	ldr	r2, [r3, #32]
 80088e4:	68bb      	ldr	r3, [r7, #8]
 80088e6:	f003 031f 	and.w	r3, r3, #31
 80088ea:	6879      	ldr	r1, [r7, #4]
 80088ec:	fa01 f303 	lsl.w	r3, r1, r3
 80088f0:	431a      	orrs	r2, r3
 80088f2:	68fb      	ldr	r3, [r7, #12]
 80088f4:	621a      	str	r2, [r3, #32]
}
 80088f6:	bf00      	nop
 80088f8:	371c      	adds	r7, #28
 80088fa:	46bd      	mov	sp, r7
 80088fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008900:	4770      	bx	lr
	...

08008904 <HAL_TIMEx_PWMN_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_PWMN_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8008904:	b580      	push	{r7, lr}
 8008906:	b084      	sub	sp, #16
 8008908:	af00      	add	r7, sp, #0
 800890a:	6078      	str	r0, [r7, #4]
 800890c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCXN_INSTANCE(htim->Instance, Channel));

  /* Check the TIM complementary channel state */
  if (TIM_CHANNEL_N_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800890e:	683b      	ldr	r3, [r7, #0]
 8008910:	2b00      	cmp	r3, #0
 8008912:	d109      	bne.n	8008928 <HAL_TIMEx_PWMN_Start+0x24>
 8008914:	687b      	ldr	r3, [r7, #4]
 8008916:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800891a:	b2db      	uxtb	r3, r3
 800891c:	2b01      	cmp	r3, #1
 800891e:	bf14      	ite	ne
 8008920:	2301      	movne	r3, #1
 8008922:	2300      	moveq	r3, #0
 8008924:	b2db      	uxtb	r3, r3
 8008926:	e022      	b.n	800896e <HAL_TIMEx_PWMN_Start+0x6a>
 8008928:	683b      	ldr	r3, [r7, #0]
 800892a:	2b04      	cmp	r3, #4
 800892c:	d109      	bne.n	8008942 <HAL_TIMEx_PWMN_Start+0x3e>
 800892e:	687b      	ldr	r3, [r7, #4]
 8008930:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8008934:	b2db      	uxtb	r3, r3
 8008936:	2b01      	cmp	r3, #1
 8008938:	bf14      	ite	ne
 800893a:	2301      	movne	r3, #1
 800893c:	2300      	moveq	r3, #0
 800893e:	b2db      	uxtb	r3, r3
 8008940:	e015      	b.n	800896e <HAL_TIMEx_PWMN_Start+0x6a>
 8008942:	683b      	ldr	r3, [r7, #0]
 8008944:	2b08      	cmp	r3, #8
 8008946:	d109      	bne.n	800895c <HAL_TIMEx_PWMN_Start+0x58>
 8008948:	687b      	ldr	r3, [r7, #4]
 800894a:	f893 3046 	ldrb.w	r3, [r3, #70]	@ 0x46
 800894e:	b2db      	uxtb	r3, r3
 8008950:	2b01      	cmp	r3, #1
 8008952:	bf14      	ite	ne
 8008954:	2301      	movne	r3, #1
 8008956:	2300      	moveq	r3, #0
 8008958:	b2db      	uxtb	r3, r3
 800895a:	e008      	b.n	800896e <HAL_TIMEx_PWMN_Start+0x6a>
 800895c:	687b      	ldr	r3, [r7, #4]
 800895e:	f893 3047 	ldrb.w	r3, [r3, #71]	@ 0x47
 8008962:	b2db      	uxtb	r3, r3
 8008964:	2b01      	cmp	r3, #1
 8008966:	bf14      	ite	ne
 8008968:	2301      	movne	r3, #1
 800896a:	2300      	moveq	r3, #0
 800896c:	b2db      	uxtb	r3, r3
 800896e:	2b00      	cmp	r3, #0
 8008970:	d001      	beq.n	8008976 <HAL_TIMEx_PWMN_Start+0x72>
  {
    return HAL_ERROR;
 8008972:	2301      	movs	r3, #1
 8008974:	e069      	b.n	8008a4a <HAL_TIMEx_PWMN_Start+0x146>
  }

  /* Set the TIM complementary channel state */
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8008976:	683b      	ldr	r3, [r7, #0]
 8008978:	2b00      	cmp	r3, #0
 800897a:	d104      	bne.n	8008986 <HAL_TIMEx_PWMN_Start+0x82>
 800897c:	687b      	ldr	r3, [r7, #4]
 800897e:	2202      	movs	r2, #2
 8008980:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8008984:	e013      	b.n	80089ae <HAL_TIMEx_PWMN_Start+0xaa>
 8008986:	683b      	ldr	r3, [r7, #0]
 8008988:	2b04      	cmp	r3, #4
 800898a:	d104      	bne.n	8008996 <HAL_TIMEx_PWMN_Start+0x92>
 800898c:	687b      	ldr	r3, [r7, #4]
 800898e:	2202      	movs	r2, #2
 8008990:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8008994:	e00b      	b.n	80089ae <HAL_TIMEx_PWMN_Start+0xaa>
 8008996:	683b      	ldr	r3, [r7, #0]
 8008998:	2b08      	cmp	r3, #8
 800899a:	d104      	bne.n	80089a6 <HAL_TIMEx_PWMN_Start+0xa2>
 800899c:	687b      	ldr	r3, [r7, #4]
 800899e:	2202      	movs	r2, #2
 80089a0:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 80089a4:	e003      	b.n	80089ae <HAL_TIMEx_PWMN_Start+0xaa>
 80089a6:	687b      	ldr	r3, [r7, #4]
 80089a8:	2202      	movs	r2, #2
 80089aa:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Enable the complementary PWM output  */
  TIM_CCxNChannelCmd(htim->Instance, Channel, TIM_CCxN_ENABLE);
 80089ae:	687b      	ldr	r3, [r7, #4]
 80089b0:	681b      	ldr	r3, [r3, #0]
 80089b2:	2204      	movs	r2, #4
 80089b4:	6839      	ldr	r1, [r7, #0]
 80089b6:	4618      	mov	r0, r3
 80089b8:	f000 fa0a 	bl	8008dd0 <TIM_CCxNChannelCmd>

  /* Enable the Main Output */
  __HAL_TIM_MOE_ENABLE(htim);
 80089bc:	687b      	ldr	r3, [r7, #4]
 80089be:	681b      	ldr	r3, [r3, #0]
 80089c0:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80089c2:	687b      	ldr	r3, [r7, #4]
 80089c4:	681b      	ldr	r3, [r3, #0]
 80089c6:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80089ca:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80089cc:	687b      	ldr	r3, [r7, #4]
 80089ce:	681b      	ldr	r3, [r3, #0]
 80089d0:	4a20      	ldr	r2, [pc, #128]	@ (8008a54 <HAL_TIMEx_PWMN_Start+0x150>)
 80089d2:	4293      	cmp	r3, r2
 80089d4:	d018      	beq.n	8008a08 <HAL_TIMEx_PWMN_Start+0x104>
 80089d6:	687b      	ldr	r3, [r7, #4]
 80089d8:	681b      	ldr	r3, [r3, #0]
 80089da:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80089de:	d013      	beq.n	8008a08 <HAL_TIMEx_PWMN_Start+0x104>
 80089e0:	687b      	ldr	r3, [r7, #4]
 80089e2:	681b      	ldr	r3, [r3, #0]
 80089e4:	4a1c      	ldr	r2, [pc, #112]	@ (8008a58 <HAL_TIMEx_PWMN_Start+0x154>)
 80089e6:	4293      	cmp	r3, r2
 80089e8:	d00e      	beq.n	8008a08 <HAL_TIMEx_PWMN_Start+0x104>
 80089ea:	687b      	ldr	r3, [r7, #4]
 80089ec:	681b      	ldr	r3, [r3, #0]
 80089ee:	4a1b      	ldr	r2, [pc, #108]	@ (8008a5c <HAL_TIMEx_PWMN_Start+0x158>)
 80089f0:	4293      	cmp	r3, r2
 80089f2:	d009      	beq.n	8008a08 <HAL_TIMEx_PWMN_Start+0x104>
 80089f4:	687b      	ldr	r3, [r7, #4]
 80089f6:	681b      	ldr	r3, [r3, #0]
 80089f8:	4a19      	ldr	r2, [pc, #100]	@ (8008a60 <HAL_TIMEx_PWMN_Start+0x15c>)
 80089fa:	4293      	cmp	r3, r2
 80089fc:	d004      	beq.n	8008a08 <HAL_TIMEx_PWMN_Start+0x104>
 80089fe:	687b      	ldr	r3, [r7, #4]
 8008a00:	681b      	ldr	r3, [r3, #0]
 8008a02:	4a18      	ldr	r2, [pc, #96]	@ (8008a64 <HAL_TIMEx_PWMN_Start+0x160>)
 8008a04:	4293      	cmp	r3, r2
 8008a06:	d115      	bne.n	8008a34 <HAL_TIMEx_PWMN_Start+0x130>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8008a08:	687b      	ldr	r3, [r7, #4]
 8008a0a:	681b      	ldr	r3, [r3, #0]
 8008a0c:	689a      	ldr	r2, [r3, #8]
 8008a0e:	4b16      	ldr	r3, [pc, #88]	@ (8008a68 <HAL_TIMEx_PWMN_Start+0x164>)
 8008a10:	4013      	ands	r3, r2
 8008a12:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008a14:	68fb      	ldr	r3, [r7, #12]
 8008a16:	2b06      	cmp	r3, #6
 8008a18:	d015      	beq.n	8008a46 <HAL_TIMEx_PWMN_Start+0x142>
 8008a1a:	68fb      	ldr	r3, [r7, #12]
 8008a1c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8008a20:	d011      	beq.n	8008a46 <HAL_TIMEx_PWMN_Start+0x142>
    {
      __HAL_TIM_ENABLE(htim);
 8008a22:	687b      	ldr	r3, [r7, #4]
 8008a24:	681b      	ldr	r3, [r3, #0]
 8008a26:	681a      	ldr	r2, [r3, #0]
 8008a28:	687b      	ldr	r3, [r7, #4]
 8008a2a:	681b      	ldr	r3, [r3, #0]
 8008a2c:	f042 0201 	orr.w	r2, r2, #1
 8008a30:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008a32:	e008      	b.n	8008a46 <HAL_TIMEx_PWMN_Start+0x142>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8008a34:	687b      	ldr	r3, [r7, #4]
 8008a36:	681b      	ldr	r3, [r3, #0]
 8008a38:	681a      	ldr	r2, [r3, #0]
 8008a3a:	687b      	ldr	r3, [r7, #4]
 8008a3c:	681b      	ldr	r3, [r3, #0]
 8008a3e:	f042 0201 	orr.w	r2, r2, #1
 8008a42:	601a      	str	r2, [r3, #0]
 8008a44:	e000      	b.n	8008a48 <HAL_TIMEx_PWMN_Start+0x144>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008a46:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8008a48:	2300      	movs	r3, #0
}
 8008a4a:	4618      	mov	r0, r3
 8008a4c:	3710      	adds	r7, #16
 8008a4e:	46bd      	mov	sp, r7
 8008a50:	bd80      	pop	{r7, pc}
 8008a52:	bf00      	nop
 8008a54:	40012c00 	.word	0x40012c00
 8008a58:	40000400 	.word	0x40000400
 8008a5c:	40000800 	.word	0x40000800
 8008a60:	40013400 	.word	0x40013400
 8008a64:	40014000 	.word	0x40014000
 8008a68:	00010007 	.word	0x00010007

08008a6c <HAL_TIMEx_PWMN_Stop>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_PWMN_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8008a6c:	b580      	push	{r7, lr}
 8008a6e:	b082      	sub	sp, #8
 8008a70:	af00      	add	r7, sp, #0
 8008a72:	6078      	str	r0, [r7, #4]
 8008a74:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCXN_INSTANCE(htim->Instance, Channel));

  /* Disable the complementary PWM output  */
  TIM_CCxNChannelCmd(htim->Instance, Channel, TIM_CCxN_DISABLE);
 8008a76:	687b      	ldr	r3, [r7, #4]
 8008a78:	681b      	ldr	r3, [r3, #0]
 8008a7a:	2200      	movs	r2, #0
 8008a7c:	6839      	ldr	r1, [r7, #0]
 8008a7e:	4618      	mov	r0, r3
 8008a80:	f000 f9a6 	bl	8008dd0 <TIM_CCxNChannelCmd>

  /* Disable the Main Output */
  __HAL_TIM_MOE_DISABLE(htim);
 8008a84:	687b      	ldr	r3, [r7, #4]
 8008a86:	681b      	ldr	r3, [r3, #0]
 8008a88:	6a1a      	ldr	r2, [r3, #32]
 8008a8a:	f241 1311 	movw	r3, #4369	@ 0x1111
 8008a8e:	4013      	ands	r3, r2
 8008a90:	2b00      	cmp	r3, #0
 8008a92:	d10f      	bne.n	8008ab4 <HAL_TIMEx_PWMN_Stop+0x48>
 8008a94:	687b      	ldr	r3, [r7, #4]
 8008a96:	681b      	ldr	r3, [r3, #0]
 8008a98:	6a1a      	ldr	r2, [r3, #32]
 8008a9a:	f244 4344 	movw	r3, #17476	@ 0x4444
 8008a9e:	4013      	ands	r3, r2
 8008aa0:	2b00      	cmp	r3, #0
 8008aa2:	d107      	bne.n	8008ab4 <HAL_TIMEx_PWMN_Stop+0x48>
 8008aa4:	687b      	ldr	r3, [r7, #4]
 8008aa6:	681b      	ldr	r3, [r3, #0]
 8008aa8:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8008aaa:	687b      	ldr	r3, [r7, #4]
 8008aac:	681b      	ldr	r3, [r3, #0]
 8008aae:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8008ab2:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8008ab4:	687b      	ldr	r3, [r7, #4]
 8008ab6:	681b      	ldr	r3, [r3, #0]
 8008ab8:	6a1a      	ldr	r2, [r3, #32]
 8008aba:	f241 1311 	movw	r3, #4369	@ 0x1111
 8008abe:	4013      	ands	r3, r2
 8008ac0:	2b00      	cmp	r3, #0
 8008ac2:	d10f      	bne.n	8008ae4 <HAL_TIMEx_PWMN_Stop+0x78>
 8008ac4:	687b      	ldr	r3, [r7, #4]
 8008ac6:	681b      	ldr	r3, [r3, #0]
 8008ac8:	6a1a      	ldr	r2, [r3, #32]
 8008aca:	f244 4344 	movw	r3, #17476	@ 0x4444
 8008ace:	4013      	ands	r3, r2
 8008ad0:	2b00      	cmp	r3, #0
 8008ad2:	d107      	bne.n	8008ae4 <HAL_TIMEx_PWMN_Stop+0x78>
 8008ad4:	687b      	ldr	r3, [r7, #4]
 8008ad6:	681b      	ldr	r3, [r3, #0]
 8008ad8:	681a      	ldr	r2, [r3, #0]
 8008ada:	687b      	ldr	r3, [r7, #4]
 8008adc:	681b      	ldr	r3, [r3, #0]
 8008ade:	f022 0201 	bic.w	r2, r2, #1
 8008ae2:	601a      	str	r2, [r3, #0]

  /* Set the TIM complementary channel state */
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8008ae4:	683b      	ldr	r3, [r7, #0]
 8008ae6:	2b00      	cmp	r3, #0
 8008ae8:	d104      	bne.n	8008af4 <HAL_TIMEx_PWMN_Stop+0x88>
 8008aea:	687b      	ldr	r3, [r7, #4]
 8008aec:	2201      	movs	r2, #1
 8008aee:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8008af2:	e013      	b.n	8008b1c <HAL_TIMEx_PWMN_Stop+0xb0>
 8008af4:	683b      	ldr	r3, [r7, #0]
 8008af6:	2b04      	cmp	r3, #4
 8008af8:	d104      	bne.n	8008b04 <HAL_TIMEx_PWMN_Stop+0x98>
 8008afa:	687b      	ldr	r3, [r7, #4]
 8008afc:	2201      	movs	r2, #1
 8008afe:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8008b02:	e00b      	b.n	8008b1c <HAL_TIMEx_PWMN_Stop+0xb0>
 8008b04:	683b      	ldr	r3, [r7, #0]
 8008b06:	2b08      	cmp	r3, #8
 8008b08:	d104      	bne.n	8008b14 <HAL_TIMEx_PWMN_Stop+0xa8>
 8008b0a:	687b      	ldr	r3, [r7, #4]
 8008b0c:	2201      	movs	r2, #1
 8008b0e:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8008b12:	e003      	b.n	8008b1c <HAL_TIMEx_PWMN_Stop+0xb0>
 8008b14:	687b      	ldr	r3, [r7, #4]
 8008b16:	2201      	movs	r2, #1
 8008b18:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Return function status */
  return HAL_OK;
 8008b1c:	2300      	movs	r3, #0
}
 8008b1e:	4618      	mov	r0, r3
 8008b20:	3708      	adds	r7, #8
 8008b22:	46bd      	mov	sp, r7
 8008b24:	bd80      	pop	{r7, pc}
	...

08008b28 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8008b28:	b480      	push	{r7}
 8008b2a:	b085      	sub	sp, #20
 8008b2c:	af00      	add	r7, sp, #0
 8008b2e:	6078      	str	r0, [r7, #4]
 8008b30:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8008b32:	687b      	ldr	r3, [r7, #4]
 8008b34:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8008b38:	2b01      	cmp	r3, #1
 8008b3a:	d101      	bne.n	8008b40 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8008b3c:	2302      	movs	r3, #2
 8008b3e:	e065      	b.n	8008c0c <HAL_TIMEx_MasterConfigSynchronization+0xe4>
 8008b40:	687b      	ldr	r3, [r7, #4]
 8008b42:	2201      	movs	r2, #1
 8008b44:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008b48:	687b      	ldr	r3, [r7, #4]
 8008b4a:	2202      	movs	r2, #2
 8008b4c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8008b50:	687b      	ldr	r3, [r7, #4]
 8008b52:	681b      	ldr	r3, [r3, #0]
 8008b54:	685b      	ldr	r3, [r3, #4]
 8008b56:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8008b58:	687b      	ldr	r3, [r7, #4]
 8008b5a:	681b      	ldr	r3, [r3, #0]
 8008b5c:	689b      	ldr	r3, [r3, #8]
 8008b5e:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8008b60:	687b      	ldr	r3, [r7, #4]
 8008b62:	681b      	ldr	r3, [r3, #0]
 8008b64:	4a2c      	ldr	r2, [pc, #176]	@ (8008c18 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8008b66:	4293      	cmp	r3, r2
 8008b68:	d004      	beq.n	8008b74 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8008b6a:	687b      	ldr	r3, [r7, #4]
 8008b6c:	681b      	ldr	r3, [r3, #0]
 8008b6e:	4a2b      	ldr	r2, [pc, #172]	@ (8008c1c <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8008b70:	4293      	cmp	r3, r2
 8008b72:	d108      	bne.n	8008b86 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8008b74:	68fb      	ldr	r3, [r7, #12]
 8008b76:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 8008b7a:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8008b7c:	683b      	ldr	r3, [r7, #0]
 8008b7e:	685b      	ldr	r3, [r3, #4]
 8008b80:	68fa      	ldr	r2, [r7, #12]
 8008b82:	4313      	orrs	r3, r2
 8008b84:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8008b86:	68fb      	ldr	r3, [r7, #12]
 8008b88:	f023 7300 	bic.w	r3, r3, #33554432	@ 0x2000000
 8008b8c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008b90:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8008b92:	683b      	ldr	r3, [r7, #0]
 8008b94:	681b      	ldr	r3, [r3, #0]
 8008b96:	68fa      	ldr	r2, [r7, #12]
 8008b98:	4313      	orrs	r3, r2
 8008b9a:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8008b9c:	687b      	ldr	r3, [r7, #4]
 8008b9e:	681b      	ldr	r3, [r3, #0]
 8008ba0:	68fa      	ldr	r2, [r7, #12]
 8008ba2:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008ba4:	687b      	ldr	r3, [r7, #4]
 8008ba6:	681b      	ldr	r3, [r3, #0]
 8008ba8:	4a1b      	ldr	r2, [pc, #108]	@ (8008c18 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8008baa:	4293      	cmp	r3, r2
 8008bac:	d018      	beq.n	8008be0 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8008bae:	687b      	ldr	r3, [r7, #4]
 8008bb0:	681b      	ldr	r3, [r3, #0]
 8008bb2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008bb6:	d013      	beq.n	8008be0 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8008bb8:	687b      	ldr	r3, [r7, #4]
 8008bba:	681b      	ldr	r3, [r3, #0]
 8008bbc:	4a18      	ldr	r2, [pc, #96]	@ (8008c20 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8008bbe:	4293      	cmp	r3, r2
 8008bc0:	d00e      	beq.n	8008be0 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8008bc2:	687b      	ldr	r3, [r7, #4]
 8008bc4:	681b      	ldr	r3, [r3, #0]
 8008bc6:	4a17      	ldr	r2, [pc, #92]	@ (8008c24 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8008bc8:	4293      	cmp	r3, r2
 8008bca:	d009      	beq.n	8008be0 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8008bcc:	687b      	ldr	r3, [r7, #4]
 8008bce:	681b      	ldr	r3, [r3, #0]
 8008bd0:	4a12      	ldr	r2, [pc, #72]	@ (8008c1c <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8008bd2:	4293      	cmp	r3, r2
 8008bd4:	d004      	beq.n	8008be0 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8008bd6:	687b      	ldr	r3, [r7, #4]
 8008bd8:	681b      	ldr	r3, [r3, #0]
 8008bda:	4a13      	ldr	r2, [pc, #76]	@ (8008c28 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8008bdc:	4293      	cmp	r3, r2
 8008bde:	d10c      	bne.n	8008bfa <HAL_TIMEx_MasterConfigSynchronization+0xd2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8008be0:	68bb      	ldr	r3, [r7, #8]
 8008be2:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8008be6:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8008be8:	683b      	ldr	r3, [r7, #0]
 8008bea:	689b      	ldr	r3, [r3, #8]
 8008bec:	68ba      	ldr	r2, [r7, #8]
 8008bee:	4313      	orrs	r3, r2
 8008bf0:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8008bf2:	687b      	ldr	r3, [r7, #4]
 8008bf4:	681b      	ldr	r3, [r3, #0]
 8008bf6:	68ba      	ldr	r2, [r7, #8]
 8008bf8:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8008bfa:	687b      	ldr	r3, [r7, #4]
 8008bfc:	2201      	movs	r2, #1
 8008bfe:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8008c02:	687b      	ldr	r3, [r7, #4]
 8008c04:	2200      	movs	r2, #0
 8008c06:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8008c0a:	2300      	movs	r3, #0
}
 8008c0c:	4618      	mov	r0, r3
 8008c0e:	3714      	adds	r7, #20
 8008c10:	46bd      	mov	sp, r7
 8008c12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c16:	4770      	bx	lr
 8008c18:	40012c00 	.word	0x40012c00
 8008c1c:	40013400 	.word	0x40013400
 8008c20:	40000400 	.word	0x40000400
 8008c24:	40000800 	.word	0x40000800
 8008c28:	40014000 	.word	0x40014000

08008c2c <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8008c2c:	b480      	push	{r7}
 8008c2e:	b085      	sub	sp, #20
 8008c30:	af00      	add	r7, sp, #0
 8008c32:	6078      	str	r0, [r7, #4]
 8008c34:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8008c36:	2300      	movs	r3, #0
 8008c38:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));
  assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8008c3a:	687b      	ldr	r3, [r7, #4]
 8008c3c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8008c40:	2b01      	cmp	r3, #1
 8008c42:	d101      	bne.n	8008c48 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8008c44:	2302      	movs	r3, #2
 8008c46:	e073      	b.n	8008d30 <HAL_TIMEx_ConfigBreakDeadTime+0x104>
 8008c48:	687b      	ldr	r3, [r7, #4]
 8008c4a:	2201      	movs	r2, #1
 8008c4c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8008c50:	68fb      	ldr	r3, [r7, #12]
 8008c52:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 8008c56:	683b      	ldr	r3, [r7, #0]
 8008c58:	68db      	ldr	r3, [r3, #12]
 8008c5a:	4313      	orrs	r3, r2
 8008c5c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8008c5e:	68fb      	ldr	r3, [r7, #12]
 8008c60:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8008c64:	683b      	ldr	r3, [r7, #0]
 8008c66:	689b      	ldr	r3, [r3, #8]
 8008c68:	4313      	orrs	r3, r2
 8008c6a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8008c6c:	68fb      	ldr	r3, [r7, #12]
 8008c6e:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 8008c72:	683b      	ldr	r3, [r7, #0]
 8008c74:	685b      	ldr	r3, [r3, #4]
 8008c76:	4313      	orrs	r3, r2
 8008c78:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8008c7a:	68fb      	ldr	r3, [r7, #12]
 8008c7c:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 8008c80:	683b      	ldr	r3, [r7, #0]
 8008c82:	681b      	ldr	r3, [r3, #0]
 8008c84:	4313      	orrs	r3, r2
 8008c86:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8008c88:	68fb      	ldr	r3, [r7, #12]
 8008c8a:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8008c8e:	683b      	ldr	r3, [r7, #0]
 8008c90:	691b      	ldr	r3, [r3, #16]
 8008c92:	4313      	orrs	r3, r2
 8008c94:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8008c96:	68fb      	ldr	r3, [r7, #12]
 8008c98:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 8008c9c:	683b      	ldr	r3, [r7, #0]
 8008c9e:	695b      	ldr	r3, [r3, #20]
 8008ca0:	4313      	orrs	r3, r2
 8008ca2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8008ca4:	68fb      	ldr	r3, [r7, #12]
 8008ca6:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 8008caa:	683b      	ldr	r3, [r7, #0]
 8008cac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008cae:	4313      	orrs	r3, r2
 8008cb0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8008cb2:	68fb      	ldr	r3, [r7, #12]
 8008cb4:	f423 2270 	bic.w	r2, r3, #983040	@ 0xf0000
 8008cb8:	683b      	ldr	r3, [r7, #0]
 8008cba:	699b      	ldr	r3, [r3, #24]
 8008cbc:	041b      	lsls	r3, r3, #16
 8008cbe:	4313      	orrs	r3, r2
 8008cc0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 8008cc2:	68fb      	ldr	r3, [r7, #12]
 8008cc4:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 8008cc8:	683b      	ldr	r3, [r7, #0]
 8008cca:	69db      	ldr	r3, [r3, #28]
 8008ccc:	4313      	orrs	r3, r2
 8008cce:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8008cd0:	687b      	ldr	r3, [r7, #4]
 8008cd2:	681b      	ldr	r3, [r3, #0]
 8008cd4:	4a19      	ldr	r2, [pc, #100]	@ (8008d3c <HAL_TIMEx_ConfigBreakDeadTime+0x110>)
 8008cd6:	4293      	cmp	r3, r2
 8008cd8:	d004      	beq.n	8008ce4 <HAL_TIMEx_ConfigBreakDeadTime+0xb8>
 8008cda:	687b      	ldr	r3, [r7, #4]
 8008cdc:	681b      	ldr	r3, [r3, #0]
 8008cde:	4a18      	ldr	r2, [pc, #96]	@ (8008d40 <HAL_TIMEx_ConfigBreakDeadTime+0x114>)
 8008ce0:	4293      	cmp	r3, r2
 8008ce2:	d11c      	bne.n	8008d1e <HAL_TIMEx_ConfigBreakDeadTime+0xf2>
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));
    assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8008ce4:	68fb      	ldr	r3, [r7, #12]
 8008ce6:	f423 0270 	bic.w	r2, r3, #15728640	@ 0xf00000
 8008cea:	683b      	ldr	r3, [r7, #0]
 8008cec:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008cee:	051b      	lsls	r3, r3, #20
 8008cf0:	4313      	orrs	r3, r2
 8008cf2:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8008cf4:	68fb      	ldr	r3, [r7, #12]
 8008cf6:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 8008cfa:	683b      	ldr	r3, [r7, #0]
 8008cfc:	6a1b      	ldr	r3, [r3, #32]
 8008cfe:	4313      	orrs	r3, r2
 8008d00:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8008d02:	68fb      	ldr	r3, [r7, #12]
 8008d04:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 8008d08:	683b      	ldr	r3, [r7, #0]
 8008d0a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008d0c:	4313      	orrs	r3, r2
 8008d0e:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 8008d10:	68fb      	ldr	r3, [r7, #12]
 8008d12:	f023 5200 	bic.w	r2, r3, #536870912	@ 0x20000000
 8008d16:	683b      	ldr	r3, [r7, #0]
 8008d18:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008d1a:	4313      	orrs	r3, r2
 8008d1c:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8008d1e:	687b      	ldr	r3, [r7, #4]
 8008d20:	681b      	ldr	r3, [r3, #0]
 8008d22:	68fa      	ldr	r2, [r7, #12]
 8008d24:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 8008d26:	687b      	ldr	r3, [r7, #4]
 8008d28:	2200      	movs	r2, #0
 8008d2a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8008d2e:	2300      	movs	r3, #0
}
 8008d30:	4618      	mov	r0, r3
 8008d32:	3714      	adds	r7, #20
 8008d34:	46bd      	mov	sp, r7
 8008d36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d3a:	4770      	bx	lr
 8008d3c:	40012c00 	.word	0x40012c00
 8008d40:	40013400 	.word	0x40013400

08008d44 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8008d44:	b480      	push	{r7}
 8008d46:	b083      	sub	sp, #12
 8008d48:	af00      	add	r7, sp, #0
 8008d4a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8008d4c:	bf00      	nop
 8008d4e:	370c      	adds	r7, #12
 8008d50:	46bd      	mov	sp, r7
 8008d52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d56:	4770      	bx	lr

08008d58 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8008d58:	b480      	push	{r7}
 8008d5a:	b083      	sub	sp, #12
 8008d5c:	af00      	add	r7, sp, #0
 8008d5e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8008d60:	bf00      	nop
 8008d62:	370c      	adds	r7, #12
 8008d64:	46bd      	mov	sp, r7
 8008d66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d6a:	4770      	bx	lr

08008d6c <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8008d6c:	b480      	push	{r7}
 8008d6e:	b083      	sub	sp, #12
 8008d70:	af00      	add	r7, sp, #0
 8008d72:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8008d74:	bf00      	nop
 8008d76:	370c      	adds	r7, #12
 8008d78:	46bd      	mov	sp, r7
 8008d7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d7e:	4770      	bx	lr

08008d80 <HAL_TIMEx_EncoderIndexCallback>:
  * @brief  Encoder index callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_EncoderIndexCallback(TIM_HandleTypeDef *htim)
{
 8008d80:	b480      	push	{r7}
 8008d82:	b083      	sub	sp, #12
 8008d84:	af00      	add	r7, sp, #0
 8008d86:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_EncoderIndexCallback could be implemented in the user file
   */
}
 8008d88:	bf00      	nop
 8008d8a:	370c      	adds	r7, #12
 8008d8c:	46bd      	mov	sp, r7
 8008d8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d92:	4770      	bx	lr

08008d94 <HAL_TIMEx_DirectionChangeCallback>:
  * @brief  Direction change callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_DirectionChangeCallback(TIM_HandleTypeDef *htim)
{
 8008d94:	b480      	push	{r7}
 8008d96:	b083      	sub	sp, #12
 8008d98:	af00      	add	r7, sp, #0
 8008d9a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_DirectionChangeCallback could be implemented in the user file
   */
}
 8008d9c:	bf00      	nop
 8008d9e:	370c      	adds	r7, #12
 8008da0:	46bd      	mov	sp, r7
 8008da2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008da6:	4770      	bx	lr

08008da8 <HAL_TIMEx_IndexErrorCallback>:
  * @brief  Index error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_IndexErrorCallback(TIM_HandleTypeDef *htim)
{
 8008da8:	b480      	push	{r7}
 8008daa:	b083      	sub	sp, #12
 8008dac:	af00      	add	r7, sp, #0
 8008dae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_IndexErrorCallback could be implemented in the user file
   */
}
 8008db0:	bf00      	nop
 8008db2:	370c      	adds	r7, #12
 8008db4:	46bd      	mov	sp, r7
 8008db6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008dba:	4770      	bx	lr

08008dbc <HAL_TIMEx_TransitionErrorCallback>:
  * @brief  Transition error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_TransitionErrorCallback(TIM_HandleTypeDef *htim)
{
 8008dbc:	b480      	push	{r7}
 8008dbe:	b083      	sub	sp, #12
 8008dc0:	af00      	add	r7, sp, #0
 8008dc2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_TransitionErrorCallback could be implemented in the user file
   */
}
 8008dc4:	bf00      	nop
 8008dc6:	370c      	adds	r7, #12
 8008dc8:	46bd      	mov	sp, r7
 8008dca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008dce:	4770      	bx	lr

08008dd0 <TIM_CCxNChannelCmd>:
  * @param  ChannelNState specifies the TIM Channel CCxNE bit new state.
  *          This parameter can be: TIM_CCxN_ENABLE or TIM_CCxN_Disable.
  * @retval None
  */
static void TIM_CCxNChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelNState)
{
 8008dd0:	b480      	push	{r7}
 8008dd2:	b087      	sub	sp, #28
 8008dd4:	af00      	add	r7, sp, #0
 8008dd6:	60f8      	str	r0, [r7, #12]
 8008dd8:	60b9      	str	r1, [r7, #8]
 8008dda:	607a      	str	r2, [r7, #4]
  uint32_t tmp;

  tmp = TIM_CCER_CC1NE << (Channel & 0xFU); /* 0xFU = 15 bits max shift */
 8008ddc:	68bb      	ldr	r3, [r7, #8]
 8008dde:	f003 030f 	and.w	r3, r3, #15
 8008de2:	2204      	movs	r2, #4
 8008de4:	fa02 f303 	lsl.w	r3, r2, r3
 8008de8:	617b      	str	r3, [r7, #20]

  /* Reset the CCxNE Bit */
  TIMx->CCER &=  ~tmp;
 8008dea:	68fb      	ldr	r3, [r7, #12]
 8008dec:	6a1a      	ldr	r2, [r3, #32]
 8008dee:	697b      	ldr	r3, [r7, #20]
 8008df0:	43db      	mvns	r3, r3
 8008df2:	401a      	ands	r2, r3
 8008df4:	68fb      	ldr	r3, [r7, #12]
 8008df6:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxNE Bit */
  TIMx->CCER |= (uint32_t)(ChannelNState << (Channel & 0xFU)); /* 0xFU = 15 bits max shift */
 8008df8:	68fb      	ldr	r3, [r7, #12]
 8008dfa:	6a1a      	ldr	r2, [r3, #32]
 8008dfc:	68bb      	ldr	r3, [r7, #8]
 8008dfe:	f003 030f 	and.w	r3, r3, #15
 8008e02:	6879      	ldr	r1, [r7, #4]
 8008e04:	fa01 f303 	lsl.w	r3, r1, r3
 8008e08:	431a      	orrs	r2, r3
 8008e0a:	68fb      	ldr	r3, [r7, #12]
 8008e0c:	621a      	str	r2, [r3, #32]
}
 8008e0e:	bf00      	nop
 8008e10:	371c      	adds	r7, #28
 8008e12:	46bd      	mov	sp, r7
 8008e14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e18:	4770      	bx	lr

08008e1a <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8008e1a:	b580      	push	{r7, lr}
 8008e1c:	b082      	sub	sp, #8
 8008e1e:	af00      	add	r7, sp, #0
 8008e20:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8008e22:	687b      	ldr	r3, [r7, #4]
 8008e24:	2b00      	cmp	r3, #0
 8008e26:	d101      	bne.n	8008e2c <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8008e28:	2301      	movs	r3, #1
 8008e2a:	e042      	b.n	8008eb2 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8008e2c:	687b      	ldr	r3, [r7, #4]
 8008e2e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008e32:	2b00      	cmp	r3, #0
 8008e34:	d106      	bne.n	8008e44 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8008e36:	687b      	ldr	r3, [r7, #4]
 8008e38:	2200      	movs	r2, #0
 8008e3a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8008e3e:	6878      	ldr	r0, [r7, #4]
 8008e40:	f7f9 fa34 	bl	80022ac <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8008e44:	687b      	ldr	r3, [r7, #4]
 8008e46:	2224      	movs	r2, #36	@ 0x24
 8008e48:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 8008e4c:	687b      	ldr	r3, [r7, #4]
 8008e4e:	681b      	ldr	r3, [r3, #0]
 8008e50:	681a      	ldr	r2, [r3, #0]
 8008e52:	687b      	ldr	r3, [r7, #4]
 8008e54:	681b      	ldr	r3, [r3, #0]
 8008e56:	f022 0201 	bic.w	r2, r2, #1
 8008e5a:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8008e5c:	687b      	ldr	r3, [r7, #4]
 8008e5e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008e60:	2b00      	cmp	r3, #0
 8008e62:	d002      	beq.n	8008e6a <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 8008e64:	6878      	ldr	r0, [r7, #4]
 8008e66:	f000 fed7 	bl	8009c18 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8008e6a:	6878      	ldr	r0, [r7, #4]
 8008e6c:	f000 fc08 	bl	8009680 <UART_SetConfig>
 8008e70:	4603      	mov	r3, r0
 8008e72:	2b01      	cmp	r3, #1
 8008e74:	d101      	bne.n	8008e7a <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 8008e76:	2301      	movs	r3, #1
 8008e78:	e01b      	b.n	8008eb2 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8008e7a:	687b      	ldr	r3, [r7, #4]
 8008e7c:	681b      	ldr	r3, [r3, #0]
 8008e7e:	685a      	ldr	r2, [r3, #4]
 8008e80:	687b      	ldr	r3, [r7, #4]
 8008e82:	681b      	ldr	r3, [r3, #0]
 8008e84:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8008e88:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8008e8a:	687b      	ldr	r3, [r7, #4]
 8008e8c:	681b      	ldr	r3, [r3, #0]
 8008e8e:	689a      	ldr	r2, [r3, #8]
 8008e90:	687b      	ldr	r3, [r7, #4]
 8008e92:	681b      	ldr	r3, [r3, #0]
 8008e94:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8008e98:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8008e9a:	687b      	ldr	r3, [r7, #4]
 8008e9c:	681b      	ldr	r3, [r3, #0]
 8008e9e:	681a      	ldr	r2, [r3, #0]
 8008ea0:	687b      	ldr	r3, [r7, #4]
 8008ea2:	681b      	ldr	r3, [r3, #0]
 8008ea4:	f042 0201 	orr.w	r2, r2, #1
 8008ea8:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8008eaa:	6878      	ldr	r0, [r7, #4]
 8008eac:	f000 ff56 	bl	8009d5c <UART_CheckIdleState>
 8008eb0:	4603      	mov	r3, r0
}
 8008eb2:	4618      	mov	r0, r3
 8008eb4:	3708      	adds	r7, #8
 8008eb6:	46bd      	mov	sp, r7
 8008eb8:	bd80      	pop	{r7, pc}
	...

08008ebc <HAL_UART_Transmit_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8008ebc:	b580      	push	{r7, lr}
 8008ebe:	b08a      	sub	sp, #40	@ 0x28
 8008ec0:	af00      	add	r7, sp, #0
 8008ec2:	60f8      	str	r0, [r7, #12]
 8008ec4:	60b9      	str	r1, [r7, #8]
 8008ec6:	4613      	mov	r3, r2
 8008ec8:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8008eca:	68fb      	ldr	r3, [r7, #12]
 8008ecc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008ed0:	2b20      	cmp	r3, #32
 8008ed2:	d167      	bne.n	8008fa4 <HAL_UART_Transmit_DMA+0xe8>
  {
    if ((pData == NULL) || (Size == 0U))
 8008ed4:	68bb      	ldr	r3, [r7, #8]
 8008ed6:	2b00      	cmp	r3, #0
 8008ed8:	d002      	beq.n	8008ee0 <HAL_UART_Transmit_DMA+0x24>
 8008eda:	88fb      	ldrh	r3, [r7, #6]
 8008edc:	2b00      	cmp	r3, #0
 8008ede:	d101      	bne.n	8008ee4 <HAL_UART_Transmit_DMA+0x28>
    {
      return HAL_ERROR;
 8008ee0:	2301      	movs	r3, #1
 8008ee2:	e060      	b.n	8008fa6 <HAL_UART_Transmit_DMA+0xea>
    }

    huart->pTxBuffPtr  = pData;
 8008ee4:	68fb      	ldr	r3, [r7, #12]
 8008ee6:	68ba      	ldr	r2, [r7, #8]
 8008ee8:	651a      	str	r2, [r3, #80]	@ 0x50
    huart->TxXferSize  = Size;
 8008eea:	68fb      	ldr	r3, [r7, #12]
 8008eec:	88fa      	ldrh	r2, [r7, #6]
 8008eee:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 8008ef2:	68fb      	ldr	r3, [r7, #12]
 8008ef4:	88fa      	ldrh	r2, [r7, #6]
 8008ef6:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008efa:	68fb      	ldr	r3, [r7, #12]
 8008efc:	2200      	movs	r2, #0
 8008efe:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8008f02:	68fb      	ldr	r3, [r7, #12]
 8008f04:	2221      	movs	r2, #33	@ 0x21
 8008f06:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    if (huart->hdmatx != NULL)
 8008f0a:	68fb      	ldr	r3, [r7, #12]
 8008f0c:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8008f0e:	2b00      	cmp	r3, #0
 8008f10:	d028      	beq.n	8008f64 <HAL_UART_Transmit_DMA+0xa8>
    {
      /* Set the UART DMA transfer complete callback */
      huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 8008f12:	68fb      	ldr	r3, [r7, #12]
 8008f14:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8008f16:	4a26      	ldr	r2, [pc, #152]	@ (8008fb0 <HAL_UART_Transmit_DMA+0xf4>)
 8008f18:	62da      	str	r2, [r3, #44]	@ 0x2c

      /* Set the UART DMA Half transfer complete callback */
      huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 8008f1a:	68fb      	ldr	r3, [r7, #12]
 8008f1c:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8008f1e:	4a25      	ldr	r2, [pc, #148]	@ (8008fb4 <HAL_UART_Transmit_DMA+0xf8>)
 8008f20:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Set the DMA error callback */
      huart->hdmatx->XferErrorCallback = UART_DMAError;
 8008f22:	68fb      	ldr	r3, [r7, #12]
 8008f24:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8008f26:	4a24      	ldr	r2, [pc, #144]	@ (8008fb8 <HAL_UART_Transmit_DMA+0xfc>)
 8008f28:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Set the DMA abort callback */
      huart->hdmatx->XferAbortCallback = NULL;
 8008f2a:	68fb      	ldr	r3, [r7, #12]
 8008f2c:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8008f2e:	2200      	movs	r2, #0
 8008f30:	639a      	str	r2, [r3, #56]	@ 0x38

      /* Enable the UART transmit DMA channel */
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 8008f32:	68fb      	ldr	r3, [r7, #12]
 8008f34:	6fd8      	ldr	r0, [r3, #124]	@ 0x7c
 8008f36:	68fb      	ldr	r3, [r7, #12]
 8008f38:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008f3a:	4619      	mov	r1, r3
 8008f3c:	68fb      	ldr	r3, [r7, #12]
 8008f3e:	681b      	ldr	r3, [r3, #0]
 8008f40:	3328      	adds	r3, #40	@ 0x28
 8008f42:	461a      	mov	r2, r3
 8008f44:	88fb      	ldrh	r3, [r7, #6]
 8008f46:	f7fc f9eb 	bl	8005320 <HAL_DMA_Start_IT>
 8008f4a:	4603      	mov	r3, r0
 8008f4c:	2b00      	cmp	r3, #0
 8008f4e:	d009      	beq.n	8008f64 <HAL_UART_Transmit_DMA+0xa8>
      {
        /* Set error code to DMA */
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 8008f50:	68fb      	ldr	r3, [r7, #12]
 8008f52:	2210      	movs	r2, #16
 8008f54:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

        /* Restore huart->gState to ready */
        huart->gState = HAL_UART_STATE_READY;
 8008f58:	68fb      	ldr	r3, [r7, #12]
 8008f5a:	2220      	movs	r2, #32
 8008f5c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_ERROR;
 8008f60:	2301      	movs	r3, #1
 8008f62:	e020      	b.n	8008fa6 <HAL_UART_Transmit_DMA+0xea>
      }
    }
    /* Clear the TC flag in the ICR register */
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 8008f64:	68fb      	ldr	r3, [r7, #12]
 8008f66:	681b      	ldr	r3, [r3, #0]
 8008f68:	2240      	movs	r2, #64	@ 0x40
 8008f6a:	621a      	str	r2, [r3, #32]

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
    in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8008f6c:	68fb      	ldr	r3, [r7, #12]
 8008f6e:	681b      	ldr	r3, [r3, #0]
 8008f70:	3308      	adds	r3, #8
 8008f72:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008f74:	697b      	ldr	r3, [r7, #20]
 8008f76:	e853 3f00 	ldrex	r3, [r3]
 8008f7a:	613b      	str	r3, [r7, #16]
   return(result);
 8008f7c:	693b      	ldr	r3, [r7, #16]
 8008f7e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008f82:	627b      	str	r3, [r7, #36]	@ 0x24
 8008f84:	68fb      	ldr	r3, [r7, #12]
 8008f86:	681b      	ldr	r3, [r3, #0]
 8008f88:	3308      	adds	r3, #8
 8008f8a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8008f8c:	623a      	str	r2, [r7, #32]
 8008f8e:	61fb      	str	r3, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008f90:	69f9      	ldr	r1, [r7, #28]
 8008f92:	6a3a      	ldr	r2, [r7, #32]
 8008f94:	e841 2300 	strex	r3, r2, [r1]
 8008f98:	61bb      	str	r3, [r7, #24]
   return(result);
 8008f9a:	69bb      	ldr	r3, [r7, #24]
 8008f9c:	2b00      	cmp	r3, #0
 8008f9e:	d1e5      	bne.n	8008f6c <HAL_UART_Transmit_DMA+0xb0>

    return HAL_OK;
 8008fa0:	2300      	movs	r3, #0
 8008fa2:	e000      	b.n	8008fa6 <HAL_UART_Transmit_DMA+0xea>
  }
  else
  {
    return HAL_BUSY;
 8008fa4:	2302      	movs	r3, #2
  }
}
 8008fa6:	4618      	mov	r0, r3
 8008fa8:	3728      	adds	r7, #40	@ 0x28
 8008faa:	46bd      	mov	sp, r7
 8008fac:	bd80      	pop	{r7, pc}
 8008fae:	bf00      	nop
 8008fb0:	0800a0d9 	.word	0x0800a0d9
 8008fb4:	0800a173 	.word	0x0800a173
 8008fb8:	0800a18f 	.word	0x0800a18f

08008fbc <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8008fbc:	b580      	push	{r7, lr}
 8008fbe:	b0ba      	sub	sp, #232	@ 0xe8
 8008fc0:	af00      	add	r7, sp, #0
 8008fc2:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8008fc4:	687b      	ldr	r3, [r7, #4]
 8008fc6:	681b      	ldr	r3, [r3, #0]
 8008fc8:	69db      	ldr	r3, [r3, #28]
 8008fca:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8008fce:	687b      	ldr	r3, [r7, #4]
 8008fd0:	681b      	ldr	r3, [r3, #0]
 8008fd2:	681b      	ldr	r3, [r3, #0]
 8008fd4:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8008fd8:	687b      	ldr	r3, [r7, #4]
 8008fda:	681b      	ldr	r3, [r3, #0]
 8008fdc:	689b      	ldr	r3, [r3, #8]
 8008fde:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8008fe2:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 8008fe6:	f640 030f 	movw	r3, #2063	@ 0x80f
 8008fea:	4013      	ands	r3, r2
 8008fec:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 8008ff0:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8008ff4:	2b00      	cmp	r3, #0
 8008ff6:	d11b      	bne.n	8009030 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8008ff8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008ffc:	f003 0320 	and.w	r3, r3, #32
 8009000:	2b00      	cmp	r3, #0
 8009002:	d015      	beq.n	8009030 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8009004:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8009008:	f003 0320 	and.w	r3, r3, #32
 800900c:	2b00      	cmp	r3, #0
 800900e:	d105      	bne.n	800901c <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8009010:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8009014:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8009018:	2b00      	cmp	r3, #0
 800901a:	d009      	beq.n	8009030 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 800901c:	687b      	ldr	r3, [r7, #4]
 800901e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8009020:	2b00      	cmp	r3, #0
 8009022:	f000 8300 	beq.w	8009626 <HAL_UART_IRQHandler+0x66a>
      {
        huart->RxISR(huart);
 8009026:	687b      	ldr	r3, [r7, #4]
 8009028:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800902a:	6878      	ldr	r0, [r7, #4]
 800902c:	4798      	blx	r3
      }
      return;
 800902e:	e2fa      	b.n	8009626 <HAL_UART_IRQHandler+0x66a>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8009030:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8009034:	2b00      	cmp	r3, #0
 8009036:	f000 8123 	beq.w	8009280 <HAL_UART_IRQHandler+0x2c4>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 800903a:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 800903e:	4b8d      	ldr	r3, [pc, #564]	@ (8009274 <HAL_UART_IRQHandler+0x2b8>)
 8009040:	4013      	ands	r3, r2
 8009042:	2b00      	cmp	r3, #0
 8009044:	d106      	bne.n	8009054 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 8009046:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 800904a:	4b8b      	ldr	r3, [pc, #556]	@ (8009278 <HAL_UART_IRQHandler+0x2bc>)
 800904c:	4013      	ands	r3, r2
 800904e:	2b00      	cmp	r3, #0
 8009050:	f000 8116 	beq.w	8009280 <HAL_UART_IRQHandler+0x2c4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8009054:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009058:	f003 0301 	and.w	r3, r3, #1
 800905c:	2b00      	cmp	r3, #0
 800905e:	d011      	beq.n	8009084 <HAL_UART_IRQHandler+0xc8>
 8009060:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8009064:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8009068:	2b00      	cmp	r3, #0
 800906a:	d00b      	beq.n	8009084 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800906c:	687b      	ldr	r3, [r7, #4]
 800906e:	681b      	ldr	r3, [r3, #0]
 8009070:	2201      	movs	r2, #1
 8009072:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8009074:	687b      	ldr	r3, [r7, #4]
 8009076:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800907a:	f043 0201 	orr.w	r2, r3, #1
 800907e:	687b      	ldr	r3, [r7, #4]
 8009080:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8009084:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009088:	f003 0302 	and.w	r3, r3, #2
 800908c:	2b00      	cmp	r3, #0
 800908e:	d011      	beq.n	80090b4 <HAL_UART_IRQHandler+0xf8>
 8009090:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8009094:	f003 0301 	and.w	r3, r3, #1
 8009098:	2b00      	cmp	r3, #0
 800909a:	d00b      	beq.n	80090b4 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800909c:	687b      	ldr	r3, [r7, #4]
 800909e:	681b      	ldr	r3, [r3, #0]
 80090a0:	2202      	movs	r2, #2
 80090a2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80090a4:	687b      	ldr	r3, [r7, #4]
 80090a6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80090aa:	f043 0204 	orr.w	r2, r3, #4
 80090ae:	687b      	ldr	r3, [r7, #4]
 80090b0:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80090b4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80090b8:	f003 0304 	and.w	r3, r3, #4
 80090bc:	2b00      	cmp	r3, #0
 80090be:	d011      	beq.n	80090e4 <HAL_UART_IRQHandler+0x128>
 80090c0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80090c4:	f003 0301 	and.w	r3, r3, #1
 80090c8:	2b00      	cmp	r3, #0
 80090ca:	d00b      	beq.n	80090e4 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80090cc:	687b      	ldr	r3, [r7, #4]
 80090ce:	681b      	ldr	r3, [r3, #0]
 80090d0:	2204      	movs	r2, #4
 80090d2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80090d4:	687b      	ldr	r3, [r7, #4]
 80090d6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80090da:	f043 0202 	orr.w	r2, r3, #2
 80090de:	687b      	ldr	r3, [r7, #4]
 80090e0:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 80090e4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80090e8:	f003 0308 	and.w	r3, r3, #8
 80090ec:	2b00      	cmp	r3, #0
 80090ee:	d017      	beq.n	8009120 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 80090f0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80090f4:	f003 0320 	and.w	r3, r3, #32
 80090f8:	2b00      	cmp	r3, #0
 80090fa:	d105      	bne.n	8009108 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 80090fc:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 8009100:	4b5c      	ldr	r3, [pc, #368]	@ (8009274 <HAL_UART_IRQHandler+0x2b8>)
 8009102:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8009104:	2b00      	cmp	r3, #0
 8009106:	d00b      	beq.n	8009120 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8009108:	687b      	ldr	r3, [r7, #4]
 800910a:	681b      	ldr	r3, [r3, #0]
 800910c:	2208      	movs	r2, #8
 800910e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8009110:	687b      	ldr	r3, [r7, #4]
 8009112:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009116:	f043 0208 	orr.w	r2, r3, #8
 800911a:	687b      	ldr	r3, [r7, #4]
 800911c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8009120:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009124:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8009128:	2b00      	cmp	r3, #0
 800912a:	d012      	beq.n	8009152 <HAL_UART_IRQHandler+0x196>
 800912c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8009130:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8009134:	2b00      	cmp	r3, #0
 8009136:	d00c      	beq.n	8009152 <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8009138:	687b      	ldr	r3, [r7, #4]
 800913a:	681b      	ldr	r3, [r3, #0]
 800913c:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8009140:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8009142:	687b      	ldr	r3, [r7, #4]
 8009144:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009148:	f043 0220 	orr.w	r2, r3, #32
 800914c:	687b      	ldr	r3, [r7, #4]
 800914e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8009152:	687b      	ldr	r3, [r7, #4]
 8009154:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009158:	2b00      	cmp	r3, #0
 800915a:	f000 8266 	beq.w	800962a <HAL_UART_IRQHandler+0x66e>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800915e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009162:	f003 0320 	and.w	r3, r3, #32
 8009166:	2b00      	cmp	r3, #0
 8009168:	d013      	beq.n	8009192 <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800916a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800916e:	f003 0320 	and.w	r3, r3, #32
 8009172:	2b00      	cmp	r3, #0
 8009174:	d105      	bne.n	8009182 <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8009176:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800917a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800917e:	2b00      	cmp	r3, #0
 8009180:	d007      	beq.n	8009192 <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 8009182:	687b      	ldr	r3, [r7, #4]
 8009184:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8009186:	2b00      	cmp	r3, #0
 8009188:	d003      	beq.n	8009192 <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 800918a:	687b      	ldr	r3, [r7, #4]
 800918c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800918e:	6878      	ldr	r0, [r7, #4]
 8009190:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8009192:	687b      	ldr	r3, [r7, #4]
 8009194:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009198:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800919c:	687b      	ldr	r3, [r7, #4]
 800919e:	681b      	ldr	r3, [r3, #0]
 80091a0:	689b      	ldr	r3, [r3, #8]
 80091a2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80091a6:	2b40      	cmp	r3, #64	@ 0x40
 80091a8:	d005      	beq.n	80091b6 <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 80091aa:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80091ae:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80091b2:	2b00      	cmp	r3, #0
 80091b4:	d054      	beq.n	8009260 <HAL_UART_IRQHandler+0x2a4>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80091b6:	6878      	ldr	r0, [r7, #4]
 80091b8:	f000 ff28 	bl	800a00c <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80091bc:	687b      	ldr	r3, [r7, #4]
 80091be:	681b      	ldr	r3, [r3, #0]
 80091c0:	689b      	ldr	r3, [r3, #8]
 80091c2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80091c6:	2b40      	cmp	r3, #64	@ 0x40
 80091c8:	d146      	bne.n	8009258 <HAL_UART_IRQHandler+0x29c>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80091ca:	687b      	ldr	r3, [r7, #4]
 80091cc:	681b      	ldr	r3, [r3, #0]
 80091ce:	3308      	adds	r3, #8
 80091d0:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80091d4:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80091d8:	e853 3f00 	ldrex	r3, [r3]
 80091dc:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 80091e0:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80091e4:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80091e8:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80091ec:	687b      	ldr	r3, [r7, #4]
 80091ee:	681b      	ldr	r3, [r3, #0]
 80091f0:	3308      	adds	r3, #8
 80091f2:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 80091f6:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 80091fa:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80091fe:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8009202:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8009206:	e841 2300 	strex	r3, r2, [r1]
 800920a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 800920e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8009212:	2b00      	cmp	r3, #0
 8009214:	d1d9      	bne.n	80091ca <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8009216:	687b      	ldr	r3, [r7, #4]
 8009218:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800921c:	2b00      	cmp	r3, #0
 800921e:	d017      	beq.n	8009250 <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8009220:	687b      	ldr	r3, [r7, #4]
 8009222:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009226:	4a15      	ldr	r2, [pc, #84]	@ (800927c <HAL_UART_IRQHandler+0x2c0>)
 8009228:	639a      	str	r2, [r3, #56]	@ 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800922a:	687b      	ldr	r3, [r7, #4]
 800922c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009230:	4618      	mov	r0, r3
 8009232:	f7fc f949 	bl	80054c8 <HAL_DMA_Abort_IT>
 8009236:	4603      	mov	r3, r0
 8009238:	2b00      	cmp	r3, #0
 800923a:	d019      	beq.n	8009270 <HAL_UART_IRQHandler+0x2b4>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800923c:	687b      	ldr	r3, [r7, #4]
 800923e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009242:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009244:	687a      	ldr	r2, [r7, #4]
 8009246:	f8d2 2080 	ldr.w	r2, [r2, #128]	@ 0x80
 800924a:	4610      	mov	r0, r2
 800924c:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800924e:	e00f      	b.n	8009270 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8009250:	6878      	ldr	r0, [r7, #4]
 8009252:	f000 f9ff 	bl	8009654 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009256:	e00b      	b.n	8009270 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8009258:	6878      	ldr	r0, [r7, #4]
 800925a:	f000 f9fb 	bl	8009654 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800925e:	e007      	b.n	8009270 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8009260:	6878      	ldr	r0, [r7, #4]
 8009262:	f000 f9f7 	bl	8009654 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009266:	687b      	ldr	r3, [r7, #4]
 8009268:	2200      	movs	r2, #0
 800926a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
      }
    }
    return;
 800926e:	e1dc      	b.n	800962a <HAL_UART_IRQHandler+0x66e>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009270:	bf00      	nop
    return;
 8009272:	e1da      	b.n	800962a <HAL_UART_IRQHandler+0x66e>
 8009274:	10000001 	.word	0x10000001
 8009278:	04000120 	.word	0x04000120
 800927c:	0800a20f 	.word	0x0800a20f

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009280:	687b      	ldr	r3, [r7, #4]
 8009282:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8009284:	2b01      	cmp	r3, #1
 8009286:	f040 8170 	bne.w	800956a <HAL_UART_IRQHandler+0x5ae>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800928a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800928e:	f003 0310 	and.w	r3, r3, #16
 8009292:	2b00      	cmp	r3, #0
 8009294:	f000 8169 	beq.w	800956a <HAL_UART_IRQHandler+0x5ae>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8009298:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800929c:	f003 0310 	and.w	r3, r3, #16
 80092a0:	2b00      	cmp	r3, #0
 80092a2:	f000 8162 	beq.w	800956a <HAL_UART_IRQHandler+0x5ae>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80092a6:	687b      	ldr	r3, [r7, #4]
 80092a8:	681b      	ldr	r3, [r3, #0]
 80092aa:	2210      	movs	r2, #16
 80092ac:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80092ae:	687b      	ldr	r3, [r7, #4]
 80092b0:	681b      	ldr	r3, [r3, #0]
 80092b2:	689b      	ldr	r3, [r3, #8]
 80092b4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80092b8:	2b40      	cmp	r3, #64	@ 0x40
 80092ba:	f040 80d8 	bne.w	800946e <HAL_UART_IRQHandler+0x4b2>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80092be:	687b      	ldr	r3, [r7, #4]
 80092c0:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80092c4:	681b      	ldr	r3, [r3, #0]
 80092c6:	685b      	ldr	r3, [r3, #4]
 80092c8:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 80092cc:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 80092d0:	2b00      	cmp	r3, #0
 80092d2:	f000 80af 	beq.w	8009434 <HAL_UART_IRQHandler+0x478>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80092d6:	687b      	ldr	r3, [r7, #4]
 80092d8:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 80092dc:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80092e0:	429a      	cmp	r2, r3
 80092e2:	f080 80a7 	bcs.w	8009434 <HAL_UART_IRQHandler+0x478>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80092e6:	687b      	ldr	r3, [r7, #4]
 80092e8:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80092ec:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 80092f0:	687b      	ldr	r3, [r7, #4]
 80092f2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80092f6:	681b      	ldr	r3, [r3, #0]
 80092f8:	681b      	ldr	r3, [r3, #0]
 80092fa:	f003 0320 	and.w	r3, r3, #32
 80092fe:	2b00      	cmp	r3, #0
 8009300:	f040 8087 	bne.w	8009412 <HAL_UART_IRQHandler+0x456>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8009304:	687b      	ldr	r3, [r7, #4]
 8009306:	681b      	ldr	r3, [r3, #0]
 8009308:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800930c:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8009310:	e853 3f00 	ldrex	r3, [r3]
 8009314:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8009318:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800931c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8009320:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8009324:	687b      	ldr	r3, [r7, #4]
 8009326:	681b      	ldr	r3, [r3, #0]
 8009328:	461a      	mov	r2, r3
 800932a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800932e:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8009332:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009336:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 800933a:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 800933e:	e841 2300 	strex	r3, r2, [r1]
 8009342:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8009346:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800934a:	2b00      	cmp	r3, #0
 800934c:	d1da      	bne.n	8009304 <HAL_UART_IRQHandler+0x348>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800934e:	687b      	ldr	r3, [r7, #4]
 8009350:	681b      	ldr	r3, [r3, #0]
 8009352:	3308      	adds	r3, #8
 8009354:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009356:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8009358:	e853 3f00 	ldrex	r3, [r3]
 800935c:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 800935e:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8009360:	f023 0301 	bic.w	r3, r3, #1
 8009364:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8009368:	687b      	ldr	r3, [r7, #4]
 800936a:	681b      	ldr	r3, [r3, #0]
 800936c:	3308      	adds	r3, #8
 800936e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8009372:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8009376:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009378:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 800937a:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 800937e:	e841 2300 	strex	r3, r2, [r1]
 8009382:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8009384:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8009386:	2b00      	cmp	r3, #0
 8009388:	d1e1      	bne.n	800934e <HAL_UART_IRQHandler+0x392>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800938a:	687b      	ldr	r3, [r7, #4]
 800938c:	681b      	ldr	r3, [r3, #0]
 800938e:	3308      	adds	r3, #8
 8009390:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009392:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8009394:	e853 3f00 	ldrex	r3, [r3]
 8009398:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 800939a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800939c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80093a0:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80093a4:	687b      	ldr	r3, [r7, #4]
 80093a6:	681b      	ldr	r3, [r3, #0]
 80093a8:	3308      	adds	r3, #8
 80093aa:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 80093ae:	66fa      	str	r2, [r7, #108]	@ 0x6c
 80093b0:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80093b2:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 80093b4:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 80093b6:	e841 2300 	strex	r3, r2, [r1]
 80093ba:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 80093bc:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80093be:	2b00      	cmp	r3, #0
 80093c0:	d1e3      	bne.n	800938a <HAL_UART_IRQHandler+0x3ce>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80093c2:	687b      	ldr	r3, [r7, #4]
 80093c4:	2220      	movs	r2, #32
 80093c6:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80093ca:	687b      	ldr	r3, [r7, #4]
 80093cc:	2200      	movs	r2, #0
 80093ce:	66da      	str	r2, [r3, #108]	@ 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80093d0:	687b      	ldr	r3, [r7, #4]
 80093d2:	681b      	ldr	r3, [r3, #0]
 80093d4:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80093d6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80093d8:	e853 3f00 	ldrex	r3, [r3]
 80093dc:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 80093de:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80093e0:	f023 0310 	bic.w	r3, r3, #16
 80093e4:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 80093e8:	687b      	ldr	r3, [r7, #4]
 80093ea:	681b      	ldr	r3, [r3, #0]
 80093ec:	461a      	mov	r2, r3
 80093ee:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80093f2:	65bb      	str	r3, [r7, #88]	@ 0x58
 80093f4:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80093f6:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80093f8:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80093fa:	e841 2300 	strex	r3, r2, [r1]
 80093fe:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8009400:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8009402:	2b00      	cmp	r3, #0
 8009404:	d1e4      	bne.n	80093d0 <HAL_UART_IRQHandler+0x414>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8009406:	687b      	ldr	r3, [r7, #4]
 8009408:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800940c:	4618      	mov	r0, r3
 800940e:	f7fc f802 	bl	8005416 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8009412:	687b      	ldr	r3, [r7, #4]
 8009414:	2202      	movs	r2, #2
 8009416:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8009418:	687b      	ldr	r3, [r7, #4]
 800941a:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 800941e:	687b      	ldr	r3, [r7, #4]
 8009420:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8009424:	b29b      	uxth	r3, r3
 8009426:	1ad3      	subs	r3, r2, r3
 8009428:	b29b      	uxth	r3, r3
 800942a:	4619      	mov	r1, r3
 800942c:	6878      	ldr	r0, [r7, #4]
 800942e:	f000 f91b 	bl	8009668 <HAL_UARTEx_RxEventCallback>
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
          }
        }
      }
      return;
 8009432:	e0fc      	b.n	800962e <HAL_UART_IRQHandler+0x672>
        if (nb_remaining_rx_data == huart->RxXferSize)
 8009434:	687b      	ldr	r3, [r7, #4]
 8009436:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800943a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800943e:	429a      	cmp	r2, r3
 8009440:	f040 80f5 	bne.w	800962e <HAL_UART_IRQHandler+0x672>
          if (HAL_IS_BIT_SET(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8009444:	687b      	ldr	r3, [r7, #4]
 8009446:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800944a:	681b      	ldr	r3, [r3, #0]
 800944c:	681b      	ldr	r3, [r3, #0]
 800944e:	f003 0320 	and.w	r3, r3, #32
 8009452:	2b20      	cmp	r3, #32
 8009454:	f040 80eb 	bne.w	800962e <HAL_UART_IRQHandler+0x672>
            huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8009458:	687b      	ldr	r3, [r7, #4]
 800945a:	2202      	movs	r2, #2
 800945c:	671a      	str	r2, [r3, #112]	@ 0x70
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800945e:	687b      	ldr	r3, [r7, #4]
 8009460:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8009464:	4619      	mov	r1, r3
 8009466:	6878      	ldr	r0, [r7, #4]
 8009468:	f000 f8fe 	bl	8009668 <HAL_UARTEx_RxEventCallback>
      return;
 800946c:	e0df      	b.n	800962e <HAL_UART_IRQHandler+0x672>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800946e:	687b      	ldr	r3, [r7, #4]
 8009470:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 8009474:	687b      	ldr	r3, [r7, #4]
 8009476:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800947a:	b29b      	uxth	r3, r3
 800947c:	1ad3      	subs	r3, r2, r3
 800947e:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8009482:	687b      	ldr	r3, [r7, #4]
 8009484:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8009488:	b29b      	uxth	r3, r3
 800948a:	2b00      	cmp	r3, #0
 800948c:	f000 80d1 	beq.w	8009632 <HAL_UART_IRQHandler+0x676>
          && (nb_rx_data > 0U))
 8009490:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8009494:	2b00      	cmp	r3, #0
 8009496:	f000 80cc 	beq.w	8009632 <HAL_UART_IRQHandler+0x676>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800949a:	687b      	ldr	r3, [r7, #4]
 800949c:	681b      	ldr	r3, [r3, #0]
 800949e:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80094a0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80094a2:	e853 3f00 	ldrex	r3, [r3]
 80094a6:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80094a8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80094aa:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80094ae:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80094b2:	687b      	ldr	r3, [r7, #4]
 80094b4:	681b      	ldr	r3, [r3, #0]
 80094b6:	461a      	mov	r2, r3
 80094b8:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 80094bc:	647b      	str	r3, [r7, #68]	@ 0x44
 80094be:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80094c0:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80094c2:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80094c4:	e841 2300 	strex	r3, r2, [r1]
 80094c8:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80094ca:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80094cc:	2b00      	cmp	r3, #0
 80094ce:	d1e4      	bne.n	800949a <HAL_UART_IRQHandler+0x4de>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80094d0:	687b      	ldr	r3, [r7, #4]
 80094d2:	681b      	ldr	r3, [r3, #0]
 80094d4:	3308      	adds	r3, #8
 80094d6:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80094d8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80094da:	e853 3f00 	ldrex	r3, [r3]
 80094de:	623b      	str	r3, [r7, #32]
   return(result);
 80094e0:	6a3b      	ldr	r3, [r7, #32]
 80094e2:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80094e6:	f023 0301 	bic.w	r3, r3, #1
 80094ea:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 80094ee:	687b      	ldr	r3, [r7, #4]
 80094f0:	681b      	ldr	r3, [r3, #0]
 80094f2:	3308      	adds	r3, #8
 80094f4:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 80094f8:	633a      	str	r2, [r7, #48]	@ 0x30
 80094fa:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80094fc:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80094fe:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8009500:	e841 2300 	strex	r3, r2, [r1]
 8009504:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8009506:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009508:	2b00      	cmp	r3, #0
 800950a:	d1e1      	bne.n	80094d0 <HAL_UART_IRQHandler+0x514>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800950c:	687b      	ldr	r3, [r7, #4]
 800950e:	2220      	movs	r2, #32
 8009510:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009514:	687b      	ldr	r3, [r7, #4]
 8009516:	2200      	movs	r2, #0
 8009518:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800951a:	687b      	ldr	r3, [r7, #4]
 800951c:	2200      	movs	r2, #0
 800951e:	675a      	str	r2, [r3, #116]	@ 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009520:	687b      	ldr	r3, [r7, #4]
 8009522:	681b      	ldr	r3, [r3, #0]
 8009524:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009526:	693b      	ldr	r3, [r7, #16]
 8009528:	e853 3f00 	ldrex	r3, [r3]
 800952c:	60fb      	str	r3, [r7, #12]
   return(result);
 800952e:	68fb      	ldr	r3, [r7, #12]
 8009530:	f023 0310 	bic.w	r3, r3, #16
 8009534:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8009538:	687b      	ldr	r3, [r7, #4]
 800953a:	681b      	ldr	r3, [r3, #0]
 800953c:	461a      	mov	r2, r3
 800953e:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8009542:	61fb      	str	r3, [r7, #28]
 8009544:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009546:	69b9      	ldr	r1, [r7, #24]
 8009548:	69fa      	ldr	r2, [r7, #28]
 800954a:	e841 2300 	strex	r3, r2, [r1]
 800954e:	617b      	str	r3, [r7, #20]
   return(result);
 8009550:	697b      	ldr	r3, [r7, #20]
 8009552:	2b00      	cmp	r3, #0
 8009554:	d1e4      	bne.n	8009520 <HAL_UART_IRQHandler+0x564>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8009556:	687b      	ldr	r3, [r7, #4]
 8009558:	2202      	movs	r2, #2
 800955a:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800955c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8009560:	4619      	mov	r1, r3
 8009562:	6878      	ldr	r0, [r7, #4]
 8009564:	f000 f880 	bl	8009668 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8009568:	e063      	b.n	8009632 <HAL_UART_IRQHandler+0x676>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800956a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800956e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8009572:	2b00      	cmp	r3, #0
 8009574:	d00e      	beq.n	8009594 <HAL_UART_IRQHandler+0x5d8>
 8009576:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800957a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800957e:	2b00      	cmp	r3, #0
 8009580:	d008      	beq.n	8009594 <HAL_UART_IRQHandler+0x5d8>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8009582:	687b      	ldr	r3, [r7, #4]
 8009584:	681b      	ldr	r3, [r3, #0]
 8009586:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 800958a:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 800958c:	6878      	ldr	r0, [r7, #4]
 800958e:	f000 fe7b 	bl	800a288 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8009592:	e051      	b.n	8009638 <HAL_UART_IRQHandler+0x67c>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 8009594:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009598:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800959c:	2b00      	cmp	r3, #0
 800959e:	d014      	beq.n	80095ca <HAL_UART_IRQHandler+0x60e>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 80095a0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80095a4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80095a8:	2b00      	cmp	r3, #0
 80095aa:	d105      	bne.n	80095b8 <HAL_UART_IRQHandler+0x5fc>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 80095ac:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80095b0:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80095b4:	2b00      	cmp	r3, #0
 80095b6:	d008      	beq.n	80095ca <HAL_UART_IRQHandler+0x60e>
  {
    if (huart->TxISR != NULL)
 80095b8:	687b      	ldr	r3, [r7, #4]
 80095ba:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80095bc:	2b00      	cmp	r3, #0
 80095be:	d03a      	beq.n	8009636 <HAL_UART_IRQHandler+0x67a>
    {
      huart->TxISR(huart);
 80095c0:	687b      	ldr	r3, [r7, #4]
 80095c2:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80095c4:	6878      	ldr	r0, [r7, #4]
 80095c6:	4798      	blx	r3
    }
    return;
 80095c8:	e035      	b.n	8009636 <HAL_UART_IRQHandler+0x67a>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 80095ca:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80095ce:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80095d2:	2b00      	cmp	r3, #0
 80095d4:	d009      	beq.n	80095ea <HAL_UART_IRQHandler+0x62e>
 80095d6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80095da:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80095de:	2b00      	cmp	r3, #0
 80095e0:	d003      	beq.n	80095ea <HAL_UART_IRQHandler+0x62e>
  {
    UART_EndTransmit_IT(huart);
 80095e2:	6878      	ldr	r0, [r7, #4]
 80095e4:	f000 fe25 	bl	800a232 <UART_EndTransmit_IT>
    return;
 80095e8:	e026      	b.n	8009638 <HAL_UART_IRQHandler+0x67c>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 80095ea:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80095ee:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80095f2:	2b00      	cmp	r3, #0
 80095f4:	d009      	beq.n	800960a <HAL_UART_IRQHandler+0x64e>
 80095f6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80095fa:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 80095fe:	2b00      	cmp	r3, #0
 8009600:	d003      	beq.n	800960a <HAL_UART_IRQHandler+0x64e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 8009602:	6878      	ldr	r0, [r7, #4]
 8009604:	f000 fe54 	bl	800a2b0 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8009608:	e016      	b.n	8009638 <HAL_UART_IRQHandler+0x67c>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 800960a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800960e:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8009612:	2b00      	cmp	r3, #0
 8009614:	d010      	beq.n	8009638 <HAL_UART_IRQHandler+0x67c>
 8009616:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800961a:	2b00      	cmp	r3, #0
 800961c:	da0c      	bge.n	8009638 <HAL_UART_IRQHandler+0x67c>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 800961e:	6878      	ldr	r0, [r7, #4]
 8009620:	f000 fe3c 	bl	800a29c <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8009624:	e008      	b.n	8009638 <HAL_UART_IRQHandler+0x67c>
      return;
 8009626:	bf00      	nop
 8009628:	e006      	b.n	8009638 <HAL_UART_IRQHandler+0x67c>
    return;
 800962a:	bf00      	nop
 800962c:	e004      	b.n	8009638 <HAL_UART_IRQHandler+0x67c>
      return;
 800962e:	bf00      	nop
 8009630:	e002      	b.n	8009638 <HAL_UART_IRQHandler+0x67c>
      return;
 8009632:	bf00      	nop
 8009634:	e000      	b.n	8009638 <HAL_UART_IRQHandler+0x67c>
    return;
 8009636:	bf00      	nop
  }
}
 8009638:	37e8      	adds	r7, #232	@ 0xe8
 800963a:	46bd      	mov	sp, r7
 800963c:	bd80      	pop	{r7, pc}
 800963e:	bf00      	nop

08009640 <HAL_UART_TxHalfCpltCallback>:
  * @brief  Tx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8009640:	b480      	push	{r7}
 8009642:	b083      	sub	sp, #12
 8009644:	af00      	add	r7, sp, #0
 8009646:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback can be implemented in the user file.
   */
}
 8009648:	bf00      	nop
 800964a:	370c      	adds	r7, #12
 800964c:	46bd      	mov	sp, r7
 800964e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009652:	4770      	bx	lr

08009654 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8009654:	b480      	push	{r7}
 8009656:	b083      	sub	sp, #12
 8009658:	af00      	add	r7, sp, #0
 800965a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 800965c:	bf00      	nop
 800965e:	370c      	adds	r7, #12
 8009660:	46bd      	mov	sp, r7
 8009662:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009666:	4770      	bx	lr

08009668 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8009668:	b480      	push	{r7}
 800966a:	b083      	sub	sp, #12
 800966c:	af00      	add	r7, sp, #0
 800966e:	6078      	str	r0, [r7, #4]
 8009670:	460b      	mov	r3, r1
 8009672:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8009674:	bf00      	nop
 8009676:	370c      	adds	r7, #12
 8009678:	46bd      	mov	sp, r7
 800967a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800967e:	4770      	bx	lr

08009680 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8009680:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8009684:	b08c      	sub	sp, #48	@ 0x30
 8009686:	af00      	add	r7, sp, #0
 8009688:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800968a:	2300      	movs	r3, #0
 800968c:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8009690:	697b      	ldr	r3, [r7, #20]
 8009692:	689a      	ldr	r2, [r3, #8]
 8009694:	697b      	ldr	r3, [r7, #20]
 8009696:	691b      	ldr	r3, [r3, #16]
 8009698:	431a      	orrs	r2, r3
 800969a:	697b      	ldr	r3, [r7, #20]
 800969c:	695b      	ldr	r3, [r3, #20]
 800969e:	431a      	orrs	r2, r3
 80096a0:	697b      	ldr	r3, [r7, #20]
 80096a2:	69db      	ldr	r3, [r3, #28]
 80096a4:	4313      	orrs	r3, r2
 80096a6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80096a8:	697b      	ldr	r3, [r7, #20]
 80096aa:	681b      	ldr	r3, [r3, #0]
 80096ac:	681a      	ldr	r2, [r3, #0]
 80096ae:	4bab      	ldr	r3, [pc, #684]	@ (800995c <UART_SetConfig+0x2dc>)
 80096b0:	4013      	ands	r3, r2
 80096b2:	697a      	ldr	r2, [r7, #20]
 80096b4:	6812      	ldr	r2, [r2, #0]
 80096b6:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80096b8:	430b      	orrs	r3, r1
 80096ba:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80096bc:	697b      	ldr	r3, [r7, #20]
 80096be:	681b      	ldr	r3, [r3, #0]
 80096c0:	685b      	ldr	r3, [r3, #4]
 80096c2:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 80096c6:	697b      	ldr	r3, [r7, #20]
 80096c8:	68da      	ldr	r2, [r3, #12]
 80096ca:	697b      	ldr	r3, [r7, #20]
 80096cc:	681b      	ldr	r3, [r3, #0]
 80096ce:	430a      	orrs	r2, r1
 80096d0:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80096d2:	697b      	ldr	r3, [r7, #20]
 80096d4:	699b      	ldr	r3, [r3, #24]
 80096d6:	62fb      	str	r3, [r7, #44]	@ 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80096d8:	697b      	ldr	r3, [r7, #20]
 80096da:	681b      	ldr	r3, [r3, #0]
 80096dc:	4aa0      	ldr	r2, [pc, #640]	@ (8009960 <UART_SetConfig+0x2e0>)
 80096de:	4293      	cmp	r3, r2
 80096e0:	d004      	beq.n	80096ec <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80096e2:	697b      	ldr	r3, [r7, #20]
 80096e4:	6a1b      	ldr	r3, [r3, #32]
 80096e6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80096e8:	4313      	orrs	r3, r2
 80096ea:	62fb      	str	r3, [r7, #44]	@ 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80096ec:	697b      	ldr	r3, [r7, #20]
 80096ee:	681b      	ldr	r3, [r3, #0]
 80096f0:	689b      	ldr	r3, [r3, #8]
 80096f2:	f023 436e 	bic.w	r3, r3, #3992977408	@ 0xee000000
 80096f6:	f423 6330 	bic.w	r3, r3, #2816	@ 0xb00
 80096fa:	697a      	ldr	r2, [r7, #20]
 80096fc:	6812      	ldr	r2, [r2, #0]
 80096fe:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8009700:	430b      	orrs	r3, r1
 8009702:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8009704:	697b      	ldr	r3, [r7, #20]
 8009706:	681b      	ldr	r3, [r3, #0]
 8009708:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800970a:	f023 010f 	bic.w	r1, r3, #15
 800970e:	697b      	ldr	r3, [r7, #20]
 8009710:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8009712:	697b      	ldr	r3, [r7, #20]
 8009714:	681b      	ldr	r3, [r3, #0]
 8009716:	430a      	orrs	r2, r1
 8009718:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800971a:	697b      	ldr	r3, [r7, #20]
 800971c:	681b      	ldr	r3, [r3, #0]
 800971e:	4a91      	ldr	r2, [pc, #580]	@ (8009964 <UART_SetConfig+0x2e4>)
 8009720:	4293      	cmp	r3, r2
 8009722:	d125      	bne.n	8009770 <UART_SetConfig+0xf0>
 8009724:	4b90      	ldr	r3, [pc, #576]	@ (8009968 <UART_SetConfig+0x2e8>)
 8009726:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800972a:	f003 0303 	and.w	r3, r3, #3
 800972e:	2b03      	cmp	r3, #3
 8009730:	d81a      	bhi.n	8009768 <UART_SetConfig+0xe8>
 8009732:	a201      	add	r2, pc, #4	@ (adr r2, 8009738 <UART_SetConfig+0xb8>)
 8009734:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009738:	08009749 	.word	0x08009749
 800973c:	08009759 	.word	0x08009759
 8009740:	08009751 	.word	0x08009751
 8009744:	08009761 	.word	0x08009761
 8009748:	2301      	movs	r3, #1
 800974a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800974e:	e0d6      	b.n	80098fe <UART_SetConfig+0x27e>
 8009750:	2302      	movs	r3, #2
 8009752:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8009756:	e0d2      	b.n	80098fe <UART_SetConfig+0x27e>
 8009758:	2304      	movs	r3, #4
 800975a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800975e:	e0ce      	b.n	80098fe <UART_SetConfig+0x27e>
 8009760:	2308      	movs	r3, #8
 8009762:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8009766:	e0ca      	b.n	80098fe <UART_SetConfig+0x27e>
 8009768:	2310      	movs	r3, #16
 800976a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800976e:	e0c6      	b.n	80098fe <UART_SetConfig+0x27e>
 8009770:	697b      	ldr	r3, [r7, #20]
 8009772:	681b      	ldr	r3, [r3, #0]
 8009774:	4a7d      	ldr	r2, [pc, #500]	@ (800996c <UART_SetConfig+0x2ec>)
 8009776:	4293      	cmp	r3, r2
 8009778:	d138      	bne.n	80097ec <UART_SetConfig+0x16c>
 800977a:	4b7b      	ldr	r3, [pc, #492]	@ (8009968 <UART_SetConfig+0x2e8>)
 800977c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009780:	f003 030c 	and.w	r3, r3, #12
 8009784:	2b0c      	cmp	r3, #12
 8009786:	d82d      	bhi.n	80097e4 <UART_SetConfig+0x164>
 8009788:	a201      	add	r2, pc, #4	@ (adr r2, 8009790 <UART_SetConfig+0x110>)
 800978a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800978e:	bf00      	nop
 8009790:	080097c5 	.word	0x080097c5
 8009794:	080097e5 	.word	0x080097e5
 8009798:	080097e5 	.word	0x080097e5
 800979c:	080097e5 	.word	0x080097e5
 80097a0:	080097d5 	.word	0x080097d5
 80097a4:	080097e5 	.word	0x080097e5
 80097a8:	080097e5 	.word	0x080097e5
 80097ac:	080097e5 	.word	0x080097e5
 80097b0:	080097cd 	.word	0x080097cd
 80097b4:	080097e5 	.word	0x080097e5
 80097b8:	080097e5 	.word	0x080097e5
 80097bc:	080097e5 	.word	0x080097e5
 80097c0:	080097dd 	.word	0x080097dd
 80097c4:	2300      	movs	r3, #0
 80097c6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80097ca:	e098      	b.n	80098fe <UART_SetConfig+0x27e>
 80097cc:	2302      	movs	r3, #2
 80097ce:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80097d2:	e094      	b.n	80098fe <UART_SetConfig+0x27e>
 80097d4:	2304      	movs	r3, #4
 80097d6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80097da:	e090      	b.n	80098fe <UART_SetConfig+0x27e>
 80097dc:	2308      	movs	r3, #8
 80097de:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80097e2:	e08c      	b.n	80098fe <UART_SetConfig+0x27e>
 80097e4:	2310      	movs	r3, #16
 80097e6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80097ea:	e088      	b.n	80098fe <UART_SetConfig+0x27e>
 80097ec:	697b      	ldr	r3, [r7, #20]
 80097ee:	681b      	ldr	r3, [r3, #0]
 80097f0:	4a5f      	ldr	r2, [pc, #380]	@ (8009970 <UART_SetConfig+0x2f0>)
 80097f2:	4293      	cmp	r3, r2
 80097f4:	d125      	bne.n	8009842 <UART_SetConfig+0x1c2>
 80097f6:	4b5c      	ldr	r3, [pc, #368]	@ (8009968 <UART_SetConfig+0x2e8>)
 80097f8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80097fc:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8009800:	2b30      	cmp	r3, #48	@ 0x30
 8009802:	d016      	beq.n	8009832 <UART_SetConfig+0x1b2>
 8009804:	2b30      	cmp	r3, #48	@ 0x30
 8009806:	d818      	bhi.n	800983a <UART_SetConfig+0x1ba>
 8009808:	2b20      	cmp	r3, #32
 800980a:	d00a      	beq.n	8009822 <UART_SetConfig+0x1a2>
 800980c:	2b20      	cmp	r3, #32
 800980e:	d814      	bhi.n	800983a <UART_SetConfig+0x1ba>
 8009810:	2b00      	cmp	r3, #0
 8009812:	d002      	beq.n	800981a <UART_SetConfig+0x19a>
 8009814:	2b10      	cmp	r3, #16
 8009816:	d008      	beq.n	800982a <UART_SetConfig+0x1aa>
 8009818:	e00f      	b.n	800983a <UART_SetConfig+0x1ba>
 800981a:	2300      	movs	r3, #0
 800981c:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8009820:	e06d      	b.n	80098fe <UART_SetConfig+0x27e>
 8009822:	2302      	movs	r3, #2
 8009824:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8009828:	e069      	b.n	80098fe <UART_SetConfig+0x27e>
 800982a:	2304      	movs	r3, #4
 800982c:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8009830:	e065      	b.n	80098fe <UART_SetConfig+0x27e>
 8009832:	2308      	movs	r3, #8
 8009834:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8009838:	e061      	b.n	80098fe <UART_SetConfig+0x27e>
 800983a:	2310      	movs	r3, #16
 800983c:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8009840:	e05d      	b.n	80098fe <UART_SetConfig+0x27e>
 8009842:	697b      	ldr	r3, [r7, #20]
 8009844:	681b      	ldr	r3, [r3, #0]
 8009846:	4a4b      	ldr	r2, [pc, #300]	@ (8009974 <UART_SetConfig+0x2f4>)
 8009848:	4293      	cmp	r3, r2
 800984a:	d125      	bne.n	8009898 <UART_SetConfig+0x218>
 800984c:	4b46      	ldr	r3, [pc, #280]	@ (8009968 <UART_SetConfig+0x2e8>)
 800984e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009852:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8009856:	2bc0      	cmp	r3, #192	@ 0xc0
 8009858:	d016      	beq.n	8009888 <UART_SetConfig+0x208>
 800985a:	2bc0      	cmp	r3, #192	@ 0xc0
 800985c:	d818      	bhi.n	8009890 <UART_SetConfig+0x210>
 800985e:	2b80      	cmp	r3, #128	@ 0x80
 8009860:	d00a      	beq.n	8009878 <UART_SetConfig+0x1f8>
 8009862:	2b80      	cmp	r3, #128	@ 0x80
 8009864:	d814      	bhi.n	8009890 <UART_SetConfig+0x210>
 8009866:	2b00      	cmp	r3, #0
 8009868:	d002      	beq.n	8009870 <UART_SetConfig+0x1f0>
 800986a:	2b40      	cmp	r3, #64	@ 0x40
 800986c:	d008      	beq.n	8009880 <UART_SetConfig+0x200>
 800986e:	e00f      	b.n	8009890 <UART_SetConfig+0x210>
 8009870:	2300      	movs	r3, #0
 8009872:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8009876:	e042      	b.n	80098fe <UART_SetConfig+0x27e>
 8009878:	2302      	movs	r3, #2
 800987a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800987e:	e03e      	b.n	80098fe <UART_SetConfig+0x27e>
 8009880:	2304      	movs	r3, #4
 8009882:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8009886:	e03a      	b.n	80098fe <UART_SetConfig+0x27e>
 8009888:	2308      	movs	r3, #8
 800988a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800988e:	e036      	b.n	80098fe <UART_SetConfig+0x27e>
 8009890:	2310      	movs	r3, #16
 8009892:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8009896:	e032      	b.n	80098fe <UART_SetConfig+0x27e>
 8009898:	697b      	ldr	r3, [r7, #20]
 800989a:	681b      	ldr	r3, [r3, #0]
 800989c:	4a30      	ldr	r2, [pc, #192]	@ (8009960 <UART_SetConfig+0x2e0>)
 800989e:	4293      	cmp	r3, r2
 80098a0:	d12a      	bne.n	80098f8 <UART_SetConfig+0x278>
 80098a2:	4b31      	ldr	r3, [pc, #196]	@ (8009968 <UART_SetConfig+0x2e8>)
 80098a4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80098a8:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 80098ac:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80098b0:	d01a      	beq.n	80098e8 <UART_SetConfig+0x268>
 80098b2:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80098b6:	d81b      	bhi.n	80098f0 <UART_SetConfig+0x270>
 80098b8:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80098bc:	d00c      	beq.n	80098d8 <UART_SetConfig+0x258>
 80098be:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80098c2:	d815      	bhi.n	80098f0 <UART_SetConfig+0x270>
 80098c4:	2b00      	cmp	r3, #0
 80098c6:	d003      	beq.n	80098d0 <UART_SetConfig+0x250>
 80098c8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80098cc:	d008      	beq.n	80098e0 <UART_SetConfig+0x260>
 80098ce:	e00f      	b.n	80098f0 <UART_SetConfig+0x270>
 80098d0:	2300      	movs	r3, #0
 80098d2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80098d6:	e012      	b.n	80098fe <UART_SetConfig+0x27e>
 80098d8:	2302      	movs	r3, #2
 80098da:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80098de:	e00e      	b.n	80098fe <UART_SetConfig+0x27e>
 80098e0:	2304      	movs	r3, #4
 80098e2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80098e6:	e00a      	b.n	80098fe <UART_SetConfig+0x27e>
 80098e8:	2308      	movs	r3, #8
 80098ea:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80098ee:	e006      	b.n	80098fe <UART_SetConfig+0x27e>
 80098f0:	2310      	movs	r3, #16
 80098f2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80098f6:	e002      	b.n	80098fe <UART_SetConfig+0x27e>
 80098f8:	2310      	movs	r3, #16
 80098fa:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80098fe:	697b      	ldr	r3, [r7, #20]
 8009900:	681b      	ldr	r3, [r3, #0]
 8009902:	4a17      	ldr	r2, [pc, #92]	@ (8009960 <UART_SetConfig+0x2e0>)
 8009904:	4293      	cmp	r3, r2
 8009906:	f040 80a8 	bne.w	8009a5a <UART_SetConfig+0x3da>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800990a:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800990e:	2b08      	cmp	r3, #8
 8009910:	d834      	bhi.n	800997c <UART_SetConfig+0x2fc>
 8009912:	a201      	add	r2, pc, #4	@ (adr r2, 8009918 <UART_SetConfig+0x298>)
 8009914:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009918:	0800993d 	.word	0x0800993d
 800991c:	0800997d 	.word	0x0800997d
 8009920:	08009945 	.word	0x08009945
 8009924:	0800997d 	.word	0x0800997d
 8009928:	0800994b 	.word	0x0800994b
 800992c:	0800997d 	.word	0x0800997d
 8009930:	0800997d 	.word	0x0800997d
 8009934:	0800997d 	.word	0x0800997d
 8009938:	08009953 	.word	0x08009953
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800993c:	f7fc fec0 	bl	80066c0 <HAL_RCC_GetPCLK1Freq>
 8009940:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8009942:	e021      	b.n	8009988 <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8009944:	4b0c      	ldr	r3, [pc, #48]	@ (8009978 <UART_SetConfig+0x2f8>)
 8009946:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8009948:	e01e      	b.n	8009988 <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800994a:	f7fc fe4d 	bl	80065e8 <HAL_RCC_GetSysClockFreq>
 800994e:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8009950:	e01a      	b.n	8009988 <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8009952:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8009956:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8009958:	e016      	b.n	8009988 <UART_SetConfig+0x308>
 800995a:	bf00      	nop
 800995c:	cfff69f3 	.word	0xcfff69f3
 8009960:	40008000 	.word	0x40008000
 8009964:	40013800 	.word	0x40013800
 8009968:	40021000 	.word	0x40021000
 800996c:	40004400 	.word	0x40004400
 8009970:	40004800 	.word	0x40004800
 8009974:	40004c00 	.word	0x40004c00
 8009978:	00f42400 	.word	0x00f42400
      default:
        pclk = 0U;
 800997c:	2300      	movs	r3, #0
 800997e:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8009980:	2301      	movs	r3, #1
 8009982:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8009986:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8009988:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800998a:	2b00      	cmp	r3, #0
 800998c:	f000 812a 	beq.w	8009be4 <UART_SetConfig+0x564>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8009990:	697b      	ldr	r3, [r7, #20]
 8009992:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009994:	4a9e      	ldr	r2, [pc, #632]	@ (8009c10 <UART_SetConfig+0x590>)
 8009996:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800999a:	461a      	mov	r2, r3
 800999c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800999e:	fbb3 f3f2 	udiv	r3, r3, r2
 80099a2:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80099a4:	697b      	ldr	r3, [r7, #20]
 80099a6:	685a      	ldr	r2, [r3, #4]
 80099a8:	4613      	mov	r3, r2
 80099aa:	005b      	lsls	r3, r3, #1
 80099ac:	4413      	add	r3, r2
 80099ae:	69ba      	ldr	r2, [r7, #24]
 80099b0:	429a      	cmp	r2, r3
 80099b2:	d305      	bcc.n	80099c0 <UART_SetConfig+0x340>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 80099b4:	697b      	ldr	r3, [r7, #20]
 80099b6:	685b      	ldr	r3, [r3, #4]
 80099b8:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80099ba:	69ba      	ldr	r2, [r7, #24]
 80099bc:	429a      	cmp	r2, r3
 80099be:	d903      	bls.n	80099c8 <UART_SetConfig+0x348>
      {
        ret = HAL_ERROR;
 80099c0:	2301      	movs	r3, #1
 80099c2:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 80099c6:	e10d      	b.n	8009be4 <UART_SetConfig+0x564>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80099c8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80099ca:	2200      	movs	r2, #0
 80099cc:	60bb      	str	r3, [r7, #8]
 80099ce:	60fa      	str	r2, [r7, #12]
 80099d0:	697b      	ldr	r3, [r7, #20]
 80099d2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80099d4:	4a8e      	ldr	r2, [pc, #568]	@ (8009c10 <UART_SetConfig+0x590>)
 80099d6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80099da:	b29b      	uxth	r3, r3
 80099dc:	2200      	movs	r2, #0
 80099de:	603b      	str	r3, [r7, #0]
 80099e0:	607a      	str	r2, [r7, #4]
 80099e2:	e9d7 2300 	ldrd	r2, r3, [r7]
 80099e6:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80099ea:	f7f7 f905 	bl	8000bf8 <__aeabi_uldivmod>
 80099ee:	4602      	mov	r2, r0
 80099f0:	460b      	mov	r3, r1
 80099f2:	4610      	mov	r0, r2
 80099f4:	4619      	mov	r1, r3
 80099f6:	f04f 0200 	mov.w	r2, #0
 80099fa:	f04f 0300 	mov.w	r3, #0
 80099fe:	020b      	lsls	r3, r1, #8
 8009a00:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8009a04:	0202      	lsls	r2, r0, #8
 8009a06:	6979      	ldr	r1, [r7, #20]
 8009a08:	6849      	ldr	r1, [r1, #4]
 8009a0a:	0849      	lsrs	r1, r1, #1
 8009a0c:	2000      	movs	r0, #0
 8009a0e:	460c      	mov	r4, r1
 8009a10:	4605      	mov	r5, r0
 8009a12:	eb12 0804 	adds.w	r8, r2, r4
 8009a16:	eb43 0905 	adc.w	r9, r3, r5
 8009a1a:	697b      	ldr	r3, [r7, #20]
 8009a1c:	685b      	ldr	r3, [r3, #4]
 8009a1e:	2200      	movs	r2, #0
 8009a20:	469a      	mov	sl, r3
 8009a22:	4693      	mov	fp, r2
 8009a24:	4652      	mov	r2, sl
 8009a26:	465b      	mov	r3, fp
 8009a28:	4640      	mov	r0, r8
 8009a2a:	4649      	mov	r1, r9
 8009a2c:	f7f7 f8e4 	bl	8000bf8 <__aeabi_uldivmod>
 8009a30:	4602      	mov	r2, r0
 8009a32:	460b      	mov	r3, r1
 8009a34:	4613      	mov	r3, r2
 8009a36:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8009a38:	6a3b      	ldr	r3, [r7, #32]
 8009a3a:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8009a3e:	d308      	bcc.n	8009a52 <UART_SetConfig+0x3d2>
 8009a40:	6a3b      	ldr	r3, [r7, #32]
 8009a42:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8009a46:	d204      	bcs.n	8009a52 <UART_SetConfig+0x3d2>
        {
          huart->Instance->BRR = usartdiv;
 8009a48:	697b      	ldr	r3, [r7, #20]
 8009a4a:	681b      	ldr	r3, [r3, #0]
 8009a4c:	6a3a      	ldr	r2, [r7, #32]
 8009a4e:	60da      	str	r2, [r3, #12]
 8009a50:	e0c8      	b.n	8009be4 <UART_SetConfig+0x564>
        }
        else
        {
          ret = HAL_ERROR;
 8009a52:	2301      	movs	r3, #1
 8009a54:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8009a58:	e0c4      	b.n	8009be4 <UART_SetConfig+0x564>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8009a5a:	697b      	ldr	r3, [r7, #20]
 8009a5c:	69db      	ldr	r3, [r3, #28]
 8009a5e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8009a62:	d167      	bne.n	8009b34 <UART_SetConfig+0x4b4>
  {
    switch (clocksource)
 8009a64:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8009a68:	2b08      	cmp	r3, #8
 8009a6a:	d828      	bhi.n	8009abe <UART_SetConfig+0x43e>
 8009a6c:	a201      	add	r2, pc, #4	@ (adr r2, 8009a74 <UART_SetConfig+0x3f4>)
 8009a6e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009a72:	bf00      	nop
 8009a74:	08009a99 	.word	0x08009a99
 8009a78:	08009aa1 	.word	0x08009aa1
 8009a7c:	08009aa9 	.word	0x08009aa9
 8009a80:	08009abf 	.word	0x08009abf
 8009a84:	08009aaf 	.word	0x08009aaf
 8009a88:	08009abf 	.word	0x08009abf
 8009a8c:	08009abf 	.word	0x08009abf
 8009a90:	08009abf 	.word	0x08009abf
 8009a94:	08009ab7 	.word	0x08009ab7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8009a98:	f7fc fe12 	bl	80066c0 <HAL_RCC_GetPCLK1Freq>
 8009a9c:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8009a9e:	e014      	b.n	8009aca <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8009aa0:	f7fc fe24 	bl	80066ec <HAL_RCC_GetPCLK2Freq>
 8009aa4:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8009aa6:	e010      	b.n	8009aca <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8009aa8:	4b5a      	ldr	r3, [pc, #360]	@ (8009c14 <UART_SetConfig+0x594>)
 8009aaa:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8009aac:	e00d      	b.n	8009aca <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8009aae:	f7fc fd9b 	bl	80065e8 <HAL_RCC_GetSysClockFreq>
 8009ab2:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8009ab4:	e009      	b.n	8009aca <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8009ab6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8009aba:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8009abc:	e005      	b.n	8009aca <UART_SetConfig+0x44a>
      default:
        pclk = 0U;
 8009abe:	2300      	movs	r3, #0
 8009ac0:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8009ac2:	2301      	movs	r3, #1
 8009ac4:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8009ac8:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8009aca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009acc:	2b00      	cmp	r3, #0
 8009ace:	f000 8089 	beq.w	8009be4 <UART_SetConfig+0x564>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8009ad2:	697b      	ldr	r3, [r7, #20]
 8009ad4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009ad6:	4a4e      	ldr	r2, [pc, #312]	@ (8009c10 <UART_SetConfig+0x590>)
 8009ad8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8009adc:	461a      	mov	r2, r3
 8009ade:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009ae0:	fbb3 f3f2 	udiv	r3, r3, r2
 8009ae4:	005a      	lsls	r2, r3, #1
 8009ae6:	697b      	ldr	r3, [r7, #20]
 8009ae8:	685b      	ldr	r3, [r3, #4]
 8009aea:	085b      	lsrs	r3, r3, #1
 8009aec:	441a      	add	r2, r3
 8009aee:	697b      	ldr	r3, [r7, #20]
 8009af0:	685b      	ldr	r3, [r3, #4]
 8009af2:	fbb2 f3f3 	udiv	r3, r2, r3
 8009af6:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8009af8:	6a3b      	ldr	r3, [r7, #32]
 8009afa:	2b0f      	cmp	r3, #15
 8009afc:	d916      	bls.n	8009b2c <UART_SetConfig+0x4ac>
 8009afe:	6a3b      	ldr	r3, [r7, #32]
 8009b00:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8009b04:	d212      	bcs.n	8009b2c <UART_SetConfig+0x4ac>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8009b06:	6a3b      	ldr	r3, [r7, #32]
 8009b08:	b29b      	uxth	r3, r3
 8009b0a:	f023 030f 	bic.w	r3, r3, #15
 8009b0e:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8009b10:	6a3b      	ldr	r3, [r7, #32]
 8009b12:	085b      	lsrs	r3, r3, #1
 8009b14:	b29b      	uxth	r3, r3
 8009b16:	f003 0307 	and.w	r3, r3, #7
 8009b1a:	b29a      	uxth	r2, r3
 8009b1c:	8bfb      	ldrh	r3, [r7, #30]
 8009b1e:	4313      	orrs	r3, r2
 8009b20:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 8009b22:	697b      	ldr	r3, [r7, #20]
 8009b24:	681b      	ldr	r3, [r3, #0]
 8009b26:	8bfa      	ldrh	r2, [r7, #30]
 8009b28:	60da      	str	r2, [r3, #12]
 8009b2a:	e05b      	b.n	8009be4 <UART_SetConfig+0x564>
      }
      else
      {
        ret = HAL_ERROR;
 8009b2c:	2301      	movs	r3, #1
 8009b2e:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8009b32:	e057      	b.n	8009be4 <UART_SetConfig+0x564>
      }
    }
  }
  else
  {
    switch (clocksource)
 8009b34:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8009b38:	2b08      	cmp	r3, #8
 8009b3a:	d828      	bhi.n	8009b8e <UART_SetConfig+0x50e>
 8009b3c:	a201      	add	r2, pc, #4	@ (adr r2, 8009b44 <UART_SetConfig+0x4c4>)
 8009b3e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009b42:	bf00      	nop
 8009b44:	08009b69 	.word	0x08009b69
 8009b48:	08009b71 	.word	0x08009b71
 8009b4c:	08009b79 	.word	0x08009b79
 8009b50:	08009b8f 	.word	0x08009b8f
 8009b54:	08009b7f 	.word	0x08009b7f
 8009b58:	08009b8f 	.word	0x08009b8f
 8009b5c:	08009b8f 	.word	0x08009b8f
 8009b60:	08009b8f 	.word	0x08009b8f
 8009b64:	08009b87 	.word	0x08009b87
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8009b68:	f7fc fdaa 	bl	80066c0 <HAL_RCC_GetPCLK1Freq>
 8009b6c:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8009b6e:	e014      	b.n	8009b9a <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8009b70:	f7fc fdbc 	bl	80066ec <HAL_RCC_GetPCLK2Freq>
 8009b74:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8009b76:	e010      	b.n	8009b9a <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8009b78:	4b26      	ldr	r3, [pc, #152]	@ (8009c14 <UART_SetConfig+0x594>)
 8009b7a:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8009b7c:	e00d      	b.n	8009b9a <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8009b7e:	f7fc fd33 	bl	80065e8 <HAL_RCC_GetSysClockFreq>
 8009b82:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8009b84:	e009      	b.n	8009b9a <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8009b86:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8009b8a:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8009b8c:	e005      	b.n	8009b9a <UART_SetConfig+0x51a>
      default:
        pclk = 0U;
 8009b8e:	2300      	movs	r3, #0
 8009b90:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8009b92:	2301      	movs	r3, #1
 8009b94:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8009b98:	bf00      	nop
    }

    if (pclk != 0U)
 8009b9a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009b9c:	2b00      	cmp	r3, #0
 8009b9e:	d021      	beq.n	8009be4 <UART_SetConfig+0x564>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8009ba0:	697b      	ldr	r3, [r7, #20]
 8009ba2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009ba4:	4a1a      	ldr	r2, [pc, #104]	@ (8009c10 <UART_SetConfig+0x590>)
 8009ba6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8009baa:	461a      	mov	r2, r3
 8009bac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009bae:	fbb3 f2f2 	udiv	r2, r3, r2
 8009bb2:	697b      	ldr	r3, [r7, #20]
 8009bb4:	685b      	ldr	r3, [r3, #4]
 8009bb6:	085b      	lsrs	r3, r3, #1
 8009bb8:	441a      	add	r2, r3
 8009bba:	697b      	ldr	r3, [r7, #20]
 8009bbc:	685b      	ldr	r3, [r3, #4]
 8009bbe:	fbb2 f3f3 	udiv	r3, r2, r3
 8009bc2:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8009bc4:	6a3b      	ldr	r3, [r7, #32]
 8009bc6:	2b0f      	cmp	r3, #15
 8009bc8:	d909      	bls.n	8009bde <UART_SetConfig+0x55e>
 8009bca:	6a3b      	ldr	r3, [r7, #32]
 8009bcc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8009bd0:	d205      	bcs.n	8009bde <UART_SetConfig+0x55e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8009bd2:	6a3b      	ldr	r3, [r7, #32]
 8009bd4:	b29a      	uxth	r2, r3
 8009bd6:	697b      	ldr	r3, [r7, #20]
 8009bd8:	681b      	ldr	r3, [r3, #0]
 8009bda:	60da      	str	r2, [r3, #12]
 8009bdc:	e002      	b.n	8009be4 <UART_SetConfig+0x564>
      }
      else
      {
        ret = HAL_ERROR;
 8009bde:	2301      	movs	r3, #1
 8009be0:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8009be4:	697b      	ldr	r3, [r7, #20]
 8009be6:	2201      	movs	r2, #1
 8009be8:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 8009bec:	697b      	ldr	r3, [r7, #20]
 8009bee:	2201      	movs	r2, #1
 8009bf0:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8009bf4:	697b      	ldr	r3, [r7, #20]
 8009bf6:	2200      	movs	r2, #0
 8009bf8:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 8009bfa:	697b      	ldr	r3, [r7, #20]
 8009bfc:	2200      	movs	r2, #0
 8009bfe:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 8009c00:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
}
 8009c04:	4618      	mov	r0, r3
 8009c06:	3730      	adds	r7, #48	@ 0x30
 8009c08:	46bd      	mov	sp, r7
 8009c0a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8009c0e:	bf00      	nop
 8009c10:	0800ce10 	.word	0x0800ce10
 8009c14:	00f42400 	.word	0x00f42400

08009c18 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8009c18:	b480      	push	{r7}
 8009c1a:	b083      	sub	sp, #12
 8009c1c:	af00      	add	r7, sp, #0
 8009c1e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8009c20:	687b      	ldr	r3, [r7, #4]
 8009c22:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009c24:	f003 0308 	and.w	r3, r3, #8
 8009c28:	2b00      	cmp	r3, #0
 8009c2a:	d00a      	beq.n	8009c42 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8009c2c:	687b      	ldr	r3, [r7, #4]
 8009c2e:	681b      	ldr	r3, [r3, #0]
 8009c30:	685b      	ldr	r3, [r3, #4]
 8009c32:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8009c36:	687b      	ldr	r3, [r7, #4]
 8009c38:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8009c3a:	687b      	ldr	r3, [r7, #4]
 8009c3c:	681b      	ldr	r3, [r3, #0]
 8009c3e:	430a      	orrs	r2, r1
 8009c40:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8009c42:	687b      	ldr	r3, [r7, #4]
 8009c44:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009c46:	f003 0301 	and.w	r3, r3, #1
 8009c4a:	2b00      	cmp	r3, #0
 8009c4c:	d00a      	beq.n	8009c64 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8009c4e:	687b      	ldr	r3, [r7, #4]
 8009c50:	681b      	ldr	r3, [r3, #0]
 8009c52:	685b      	ldr	r3, [r3, #4]
 8009c54:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8009c58:	687b      	ldr	r3, [r7, #4]
 8009c5a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009c5c:	687b      	ldr	r3, [r7, #4]
 8009c5e:	681b      	ldr	r3, [r3, #0]
 8009c60:	430a      	orrs	r2, r1
 8009c62:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8009c64:	687b      	ldr	r3, [r7, #4]
 8009c66:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009c68:	f003 0302 	and.w	r3, r3, #2
 8009c6c:	2b00      	cmp	r3, #0
 8009c6e:	d00a      	beq.n	8009c86 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8009c70:	687b      	ldr	r3, [r7, #4]
 8009c72:	681b      	ldr	r3, [r3, #0]
 8009c74:	685b      	ldr	r3, [r3, #4]
 8009c76:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8009c7a:	687b      	ldr	r3, [r7, #4]
 8009c7c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8009c7e:	687b      	ldr	r3, [r7, #4]
 8009c80:	681b      	ldr	r3, [r3, #0]
 8009c82:	430a      	orrs	r2, r1
 8009c84:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8009c86:	687b      	ldr	r3, [r7, #4]
 8009c88:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009c8a:	f003 0304 	and.w	r3, r3, #4
 8009c8e:	2b00      	cmp	r3, #0
 8009c90:	d00a      	beq.n	8009ca8 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8009c92:	687b      	ldr	r3, [r7, #4]
 8009c94:	681b      	ldr	r3, [r3, #0]
 8009c96:	685b      	ldr	r3, [r3, #4]
 8009c98:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8009c9c:	687b      	ldr	r3, [r7, #4]
 8009c9e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8009ca0:	687b      	ldr	r3, [r7, #4]
 8009ca2:	681b      	ldr	r3, [r3, #0]
 8009ca4:	430a      	orrs	r2, r1
 8009ca6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8009ca8:	687b      	ldr	r3, [r7, #4]
 8009caa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009cac:	f003 0310 	and.w	r3, r3, #16
 8009cb0:	2b00      	cmp	r3, #0
 8009cb2:	d00a      	beq.n	8009cca <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8009cb4:	687b      	ldr	r3, [r7, #4]
 8009cb6:	681b      	ldr	r3, [r3, #0]
 8009cb8:	689b      	ldr	r3, [r3, #8]
 8009cba:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8009cbe:	687b      	ldr	r3, [r7, #4]
 8009cc0:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8009cc2:	687b      	ldr	r3, [r7, #4]
 8009cc4:	681b      	ldr	r3, [r3, #0]
 8009cc6:	430a      	orrs	r2, r1
 8009cc8:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8009cca:	687b      	ldr	r3, [r7, #4]
 8009ccc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009cce:	f003 0320 	and.w	r3, r3, #32
 8009cd2:	2b00      	cmp	r3, #0
 8009cd4:	d00a      	beq.n	8009cec <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8009cd6:	687b      	ldr	r3, [r7, #4]
 8009cd8:	681b      	ldr	r3, [r3, #0]
 8009cda:	689b      	ldr	r3, [r3, #8]
 8009cdc:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8009ce0:	687b      	ldr	r3, [r7, #4]
 8009ce2:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8009ce4:	687b      	ldr	r3, [r7, #4]
 8009ce6:	681b      	ldr	r3, [r3, #0]
 8009ce8:	430a      	orrs	r2, r1
 8009cea:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8009cec:	687b      	ldr	r3, [r7, #4]
 8009cee:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009cf0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009cf4:	2b00      	cmp	r3, #0
 8009cf6:	d01a      	beq.n	8009d2e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8009cf8:	687b      	ldr	r3, [r7, #4]
 8009cfa:	681b      	ldr	r3, [r3, #0]
 8009cfc:	685b      	ldr	r3, [r3, #4]
 8009cfe:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8009d02:	687b      	ldr	r3, [r7, #4]
 8009d04:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8009d06:	687b      	ldr	r3, [r7, #4]
 8009d08:	681b      	ldr	r3, [r3, #0]
 8009d0a:	430a      	orrs	r2, r1
 8009d0c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8009d0e:	687b      	ldr	r3, [r7, #4]
 8009d10:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009d12:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8009d16:	d10a      	bne.n	8009d2e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8009d18:	687b      	ldr	r3, [r7, #4]
 8009d1a:	681b      	ldr	r3, [r3, #0]
 8009d1c:	685b      	ldr	r3, [r3, #4]
 8009d1e:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8009d22:	687b      	ldr	r3, [r7, #4]
 8009d24:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8009d26:	687b      	ldr	r3, [r7, #4]
 8009d28:	681b      	ldr	r3, [r3, #0]
 8009d2a:	430a      	orrs	r2, r1
 8009d2c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8009d2e:	687b      	ldr	r3, [r7, #4]
 8009d30:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009d32:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8009d36:	2b00      	cmp	r3, #0
 8009d38:	d00a      	beq.n	8009d50 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8009d3a:	687b      	ldr	r3, [r7, #4]
 8009d3c:	681b      	ldr	r3, [r3, #0]
 8009d3e:	685b      	ldr	r3, [r3, #4]
 8009d40:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8009d44:	687b      	ldr	r3, [r7, #4]
 8009d46:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8009d48:	687b      	ldr	r3, [r7, #4]
 8009d4a:	681b      	ldr	r3, [r3, #0]
 8009d4c:	430a      	orrs	r2, r1
 8009d4e:	605a      	str	r2, [r3, #4]
  }
}
 8009d50:	bf00      	nop
 8009d52:	370c      	adds	r7, #12
 8009d54:	46bd      	mov	sp, r7
 8009d56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d5a:	4770      	bx	lr

08009d5c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8009d5c:	b580      	push	{r7, lr}
 8009d5e:	b098      	sub	sp, #96	@ 0x60
 8009d60:	af02      	add	r7, sp, #8
 8009d62:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009d64:	687b      	ldr	r3, [r7, #4]
 8009d66:	2200      	movs	r2, #0
 8009d68:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8009d6c:	f7fb f884 	bl	8004e78 <HAL_GetTick>
 8009d70:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8009d72:	687b      	ldr	r3, [r7, #4]
 8009d74:	681b      	ldr	r3, [r3, #0]
 8009d76:	681b      	ldr	r3, [r3, #0]
 8009d78:	f003 0308 	and.w	r3, r3, #8
 8009d7c:	2b08      	cmp	r3, #8
 8009d7e:	d12f      	bne.n	8009de0 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8009d80:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8009d84:	9300      	str	r3, [sp, #0]
 8009d86:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8009d88:	2200      	movs	r2, #0
 8009d8a:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8009d8e:	6878      	ldr	r0, [r7, #4]
 8009d90:	f000 f88e 	bl	8009eb0 <UART_WaitOnFlagUntilTimeout>
 8009d94:	4603      	mov	r3, r0
 8009d96:	2b00      	cmp	r3, #0
 8009d98:	d022      	beq.n	8009de0 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8009d9a:	687b      	ldr	r3, [r7, #4]
 8009d9c:	681b      	ldr	r3, [r3, #0]
 8009d9e:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009da0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009da2:	e853 3f00 	ldrex	r3, [r3]
 8009da6:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8009da8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009daa:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8009dae:	653b      	str	r3, [r7, #80]	@ 0x50
 8009db0:	687b      	ldr	r3, [r7, #4]
 8009db2:	681b      	ldr	r3, [r3, #0]
 8009db4:	461a      	mov	r2, r3
 8009db6:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8009db8:	647b      	str	r3, [r7, #68]	@ 0x44
 8009dba:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009dbc:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8009dbe:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8009dc0:	e841 2300 	strex	r3, r2, [r1]
 8009dc4:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8009dc6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009dc8:	2b00      	cmp	r3, #0
 8009dca:	d1e6      	bne.n	8009d9a <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8009dcc:	687b      	ldr	r3, [r7, #4]
 8009dce:	2220      	movs	r2, #32
 8009dd0:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 8009dd4:	687b      	ldr	r3, [r7, #4]
 8009dd6:	2200      	movs	r2, #0
 8009dd8:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8009ddc:	2303      	movs	r3, #3
 8009dde:	e063      	b.n	8009ea8 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8009de0:	687b      	ldr	r3, [r7, #4]
 8009de2:	681b      	ldr	r3, [r3, #0]
 8009de4:	681b      	ldr	r3, [r3, #0]
 8009de6:	f003 0304 	and.w	r3, r3, #4
 8009dea:	2b04      	cmp	r3, #4
 8009dec:	d149      	bne.n	8009e82 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8009dee:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8009df2:	9300      	str	r3, [sp, #0]
 8009df4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8009df6:	2200      	movs	r2, #0
 8009df8:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8009dfc:	6878      	ldr	r0, [r7, #4]
 8009dfe:	f000 f857 	bl	8009eb0 <UART_WaitOnFlagUntilTimeout>
 8009e02:	4603      	mov	r3, r0
 8009e04:	2b00      	cmp	r3, #0
 8009e06:	d03c      	beq.n	8009e82 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8009e08:	687b      	ldr	r3, [r7, #4]
 8009e0a:	681b      	ldr	r3, [r3, #0]
 8009e0c:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009e0e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009e10:	e853 3f00 	ldrex	r3, [r3]
 8009e14:	623b      	str	r3, [r7, #32]
   return(result);
 8009e16:	6a3b      	ldr	r3, [r7, #32]
 8009e18:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8009e1c:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8009e1e:	687b      	ldr	r3, [r7, #4]
 8009e20:	681b      	ldr	r3, [r3, #0]
 8009e22:	461a      	mov	r2, r3
 8009e24:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8009e26:	633b      	str	r3, [r7, #48]	@ 0x30
 8009e28:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009e2a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8009e2c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8009e2e:	e841 2300 	strex	r3, r2, [r1]
 8009e32:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8009e34:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009e36:	2b00      	cmp	r3, #0
 8009e38:	d1e6      	bne.n	8009e08 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009e3a:	687b      	ldr	r3, [r7, #4]
 8009e3c:	681b      	ldr	r3, [r3, #0]
 8009e3e:	3308      	adds	r3, #8
 8009e40:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009e42:	693b      	ldr	r3, [r7, #16]
 8009e44:	e853 3f00 	ldrex	r3, [r3]
 8009e48:	60fb      	str	r3, [r7, #12]
   return(result);
 8009e4a:	68fb      	ldr	r3, [r7, #12]
 8009e4c:	f023 0301 	bic.w	r3, r3, #1
 8009e50:	64bb      	str	r3, [r7, #72]	@ 0x48
 8009e52:	687b      	ldr	r3, [r7, #4]
 8009e54:	681b      	ldr	r3, [r3, #0]
 8009e56:	3308      	adds	r3, #8
 8009e58:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8009e5a:	61fa      	str	r2, [r7, #28]
 8009e5c:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009e5e:	69b9      	ldr	r1, [r7, #24]
 8009e60:	69fa      	ldr	r2, [r7, #28]
 8009e62:	e841 2300 	strex	r3, r2, [r1]
 8009e66:	617b      	str	r3, [r7, #20]
   return(result);
 8009e68:	697b      	ldr	r3, [r7, #20]
 8009e6a:	2b00      	cmp	r3, #0
 8009e6c:	d1e5      	bne.n	8009e3a <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 8009e6e:	687b      	ldr	r3, [r7, #4]
 8009e70:	2220      	movs	r2, #32
 8009e72:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 8009e76:	687b      	ldr	r3, [r7, #4]
 8009e78:	2200      	movs	r2, #0
 8009e7a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8009e7e:	2303      	movs	r3, #3
 8009e80:	e012      	b.n	8009ea8 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8009e82:	687b      	ldr	r3, [r7, #4]
 8009e84:	2220      	movs	r2, #32
 8009e86:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8009e8a:	687b      	ldr	r3, [r7, #4]
 8009e8c:	2220      	movs	r2, #32
 8009e8e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009e92:	687b      	ldr	r3, [r7, #4]
 8009e94:	2200      	movs	r2, #0
 8009e96:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8009e98:	687b      	ldr	r3, [r7, #4]
 8009e9a:	2200      	movs	r2, #0
 8009e9c:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 8009e9e:	687b      	ldr	r3, [r7, #4]
 8009ea0:	2200      	movs	r2, #0
 8009ea2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8009ea6:	2300      	movs	r3, #0
}
 8009ea8:	4618      	mov	r0, r3
 8009eaa:	3758      	adds	r7, #88	@ 0x58
 8009eac:	46bd      	mov	sp, r7
 8009eae:	bd80      	pop	{r7, pc}

08009eb0 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8009eb0:	b580      	push	{r7, lr}
 8009eb2:	b084      	sub	sp, #16
 8009eb4:	af00      	add	r7, sp, #0
 8009eb6:	60f8      	str	r0, [r7, #12]
 8009eb8:	60b9      	str	r1, [r7, #8]
 8009eba:	603b      	str	r3, [r7, #0]
 8009ebc:	4613      	mov	r3, r2
 8009ebe:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8009ec0:	e04f      	b.n	8009f62 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8009ec2:	69bb      	ldr	r3, [r7, #24]
 8009ec4:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8009ec8:	d04b      	beq.n	8009f62 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8009eca:	f7fa ffd5 	bl	8004e78 <HAL_GetTick>
 8009ece:	4602      	mov	r2, r0
 8009ed0:	683b      	ldr	r3, [r7, #0]
 8009ed2:	1ad3      	subs	r3, r2, r3
 8009ed4:	69ba      	ldr	r2, [r7, #24]
 8009ed6:	429a      	cmp	r2, r3
 8009ed8:	d302      	bcc.n	8009ee0 <UART_WaitOnFlagUntilTimeout+0x30>
 8009eda:	69bb      	ldr	r3, [r7, #24]
 8009edc:	2b00      	cmp	r3, #0
 8009ede:	d101      	bne.n	8009ee4 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8009ee0:	2303      	movs	r3, #3
 8009ee2:	e04e      	b.n	8009f82 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8009ee4:	68fb      	ldr	r3, [r7, #12]
 8009ee6:	681b      	ldr	r3, [r3, #0]
 8009ee8:	681b      	ldr	r3, [r3, #0]
 8009eea:	f003 0304 	and.w	r3, r3, #4
 8009eee:	2b00      	cmp	r3, #0
 8009ef0:	d037      	beq.n	8009f62 <UART_WaitOnFlagUntilTimeout+0xb2>
 8009ef2:	68bb      	ldr	r3, [r7, #8]
 8009ef4:	2b80      	cmp	r3, #128	@ 0x80
 8009ef6:	d034      	beq.n	8009f62 <UART_WaitOnFlagUntilTimeout+0xb2>
 8009ef8:	68bb      	ldr	r3, [r7, #8]
 8009efa:	2b40      	cmp	r3, #64	@ 0x40
 8009efc:	d031      	beq.n	8009f62 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8009efe:	68fb      	ldr	r3, [r7, #12]
 8009f00:	681b      	ldr	r3, [r3, #0]
 8009f02:	69db      	ldr	r3, [r3, #28]
 8009f04:	f003 0308 	and.w	r3, r3, #8
 8009f08:	2b08      	cmp	r3, #8
 8009f0a:	d110      	bne.n	8009f2e <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8009f0c:	68fb      	ldr	r3, [r7, #12]
 8009f0e:	681b      	ldr	r3, [r3, #0]
 8009f10:	2208      	movs	r2, #8
 8009f12:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8009f14:	68f8      	ldr	r0, [r7, #12]
 8009f16:	f000 f879 	bl	800a00c <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8009f1a:	68fb      	ldr	r3, [r7, #12]
 8009f1c:	2208      	movs	r2, #8
 8009f1e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8009f22:	68fb      	ldr	r3, [r7, #12]
 8009f24:	2200      	movs	r2, #0
 8009f26:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 8009f2a:	2301      	movs	r3, #1
 8009f2c:	e029      	b.n	8009f82 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8009f2e:	68fb      	ldr	r3, [r7, #12]
 8009f30:	681b      	ldr	r3, [r3, #0]
 8009f32:	69db      	ldr	r3, [r3, #28]
 8009f34:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8009f38:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8009f3c:	d111      	bne.n	8009f62 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8009f3e:	68fb      	ldr	r3, [r7, #12]
 8009f40:	681b      	ldr	r3, [r3, #0]
 8009f42:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8009f46:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8009f48:	68f8      	ldr	r0, [r7, #12]
 8009f4a:	f000 f85f 	bl	800a00c <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8009f4e:	68fb      	ldr	r3, [r7, #12]
 8009f50:	2220      	movs	r2, #32
 8009f52:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8009f56:	68fb      	ldr	r3, [r7, #12]
 8009f58:	2200      	movs	r2, #0
 8009f5a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 8009f5e:	2303      	movs	r3, #3
 8009f60:	e00f      	b.n	8009f82 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8009f62:	68fb      	ldr	r3, [r7, #12]
 8009f64:	681b      	ldr	r3, [r3, #0]
 8009f66:	69da      	ldr	r2, [r3, #28]
 8009f68:	68bb      	ldr	r3, [r7, #8]
 8009f6a:	4013      	ands	r3, r2
 8009f6c:	68ba      	ldr	r2, [r7, #8]
 8009f6e:	429a      	cmp	r2, r3
 8009f70:	bf0c      	ite	eq
 8009f72:	2301      	moveq	r3, #1
 8009f74:	2300      	movne	r3, #0
 8009f76:	b2db      	uxtb	r3, r3
 8009f78:	461a      	mov	r2, r3
 8009f7a:	79fb      	ldrb	r3, [r7, #7]
 8009f7c:	429a      	cmp	r2, r3
 8009f7e:	d0a0      	beq.n	8009ec2 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8009f80:	2300      	movs	r3, #0
}
 8009f82:	4618      	mov	r0, r3
 8009f84:	3710      	adds	r7, #16
 8009f86:	46bd      	mov	sp, r7
 8009f88:	bd80      	pop	{r7, pc}

08009f8a <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8009f8a:	b480      	push	{r7}
 8009f8c:	b08f      	sub	sp, #60	@ 0x3c
 8009f8e:	af00      	add	r7, sp, #0
 8009f90:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
 8009f92:	687b      	ldr	r3, [r7, #4]
 8009f94:	681b      	ldr	r3, [r3, #0]
 8009f96:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009f98:	6a3b      	ldr	r3, [r7, #32]
 8009f9a:	e853 3f00 	ldrex	r3, [r3]
 8009f9e:	61fb      	str	r3, [r7, #28]
   return(result);
 8009fa0:	69fb      	ldr	r3, [r7, #28]
 8009fa2:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 8009fa6:	637b      	str	r3, [r7, #52]	@ 0x34
 8009fa8:	687b      	ldr	r3, [r7, #4]
 8009faa:	681b      	ldr	r3, [r3, #0]
 8009fac:	461a      	mov	r2, r3
 8009fae:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009fb0:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8009fb2:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009fb4:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8009fb6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8009fb8:	e841 2300 	strex	r3, r2, [r1]
 8009fbc:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8009fbe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009fc0:	2b00      	cmp	r3, #0
 8009fc2:	d1e6      	bne.n	8009f92 <UART_EndTxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
 8009fc4:	687b      	ldr	r3, [r7, #4]
 8009fc6:	681b      	ldr	r3, [r3, #0]
 8009fc8:	3308      	adds	r3, #8
 8009fca:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009fcc:	68fb      	ldr	r3, [r7, #12]
 8009fce:	e853 3f00 	ldrex	r3, [r3]
 8009fd2:	60bb      	str	r3, [r7, #8]
   return(result);
 8009fd4:	68bb      	ldr	r3, [r7, #8]
 8009fd6:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 8009fda:	633b      	str	r3, [r7, #48]	@ 0x30
 8009fdc:	687b      	ldr	r3, [r7, #4]
 8009fde:	681b      	ldr	r3, [r3, #0]
 8009fe0:	3308      	adds	r3, #8
 8009fe2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8009fe4:	61ba      	str	r2, [r7, #24]
 8009fe6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009fe8:	6979      	ldr	r1, [r7, #20]
 8009fea:	69ba      	ldr	r2, [r7, #24]
 8009fec:	e841 2300 	strex	r3, r2, [r1]
 8009ff0:	613b      	str	r3, [r7, #16]
   return(result);
 8009ff2:	693b      	ldr	r3, [r7, #16]
 8009ff4:	2b00      	cmp	r3, #0
 8009ff6:	d1e5      	bne.n	8009fc4 <UART_EndTxTransfer+0x3a>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8009ff8:	687b      	ldr	r3, [r7, #4]
 8009ffa:	2220      	movs	r2, #32
 8009ffc:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
}
 800a000:	bf00      	nop
 800a002:	373c      	adds	r7, #60	@ 0x3c
 800a004:	46bd      	mov	sp, r7
 800a006:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a00a:	4770      	bx	lr

0800a00c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800a00c:	b480      	push	{r7}
 800a00e:	b095      	sub	sp, #84	@ 0x54
 800a010:	af00      	add	r7, sp, #0
 800a012:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800a014:	687b      	ldr	r3, [r7, #4]
 800a016:	681b      	ldr	r3, [r3, #0]
 800a018:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a01a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a01c:	e853 3f00 	ldrex	r3, [r3]
 800a020:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800a022:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a024:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800a028:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800a02a:	687b      	ldr	r3, [r7, #4]
 800a02c:	681b      	ldr	r3, [r3, #0]
 800a02e:	461a      	mov	r2, r3
 800a030:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800a032:	643b      	str	r3, [r7, #64]	@ 0x40
 800a034:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a036:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800a038:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800a03a:	e841 2300 	strex	r3, r2, [r1]
 800a03e:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800a040:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a042:	2b00      	cmp	r3, #0
 800a044:	d1e6      	bne.n	800a014 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800a046:	687b      	ldr	r3, [r7, #4]
 800a048:	681b      	ldr	r3, [r3, #0]
 800a04a:	3308      	adds	r3, #8
 800a04c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a04e:	6a3b      	ldr	r3, [r7, #32]
 800a050:	e853 3f00 	ldrex	r3, [r3]
 800a054:	61fb      	str	r3, [r7, #28]
   return(result);
 800a056:	69fb      	ldr	r3, [r7, #28]
 800a058:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800a05c:	f023 0301 	bic.w	r3, r3, #1
 800a060:	64bb      	str	r3, [r7, #72]	@ 0x48
 800a062:	687b      	ldr	r3, [r7, #4]
 800a064:	681b      	ldr	r3, [r3, #0]
 800a066:	3308      	adds	r3, #8
 800a068:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800a06a:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800a06c:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a06e:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800a070:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800a072:	e841 2300 	strex	r3, r2, [r1]
 800a076:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800a078:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a07a:	2b00      	cmp	r3, #0
 800a07c:	d1e3      	bne.n	800a046 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a07e:	687b      	ldr	r3, [r7, #4]
 800a080:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800a082:	2b01      	cmp	r3, #1
 800a084:	d118      	bne.n	800a0b8 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a086:	687b      	ldr	r3, [r7, #4]
 800a088:	681b      	ldr	r3, [r3, #0]
 800a08a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a08c:	68fb      	ldr	r3, [r7, #12]
 800a08e:	e853 3f00 	ldrex	r3, [r3]
 800a092:	60bb      	str	r3, [r7, #8]
   return(result);
 800a094:	68bb      	ldr	r3, [r7, #8]
 800a096:	f023 0310 	bic.w	r3, r3, #16
 800a09a:	647b      	str	r3, [r7, #68]	@ 0x44
 800a09c:	687b      	ldr	r3, [r7, #4]
 800a09e:	681b      	ldr	r3, [r3, #0]
 800a0a0:	461a      	mov	r2, r3
 800a0a2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800a0a4:	61bb      	str	r3, [r7, #24]
 800a0a6:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a0a8:	6979      	ldr	r1, [r7, #20]
 800a0aa:	69ba      	ldr	r2, [r7, #24]
 800a0ac:	e841 2300 	strex	r3, r2, [r1]
 800a0b0:	613b      	str	r3, [r7, #16]
   return(result);
 800a0b2:	693b      	ldr	r3, [r7, #16]
 800a0b4:	2b00      	cmp	r3, #0
 800a0b6:	d1e6      	bne.n	800a086 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800a0b8:	687b      	ldr	r3, [r7, #4]
 800a0ba:	2220      	movs	r2, #32
 800a0bc:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a0c0:	687b      	ldr	r3, [r7, #4]
 800a0c2:	2200      	movs	r2, #0
 800a0c4:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800a0c6:	687b      	ldr	r3, [r7, #4]
 800a0c8:	2200      	movs	r2, #0
 800a0ca:	675a      	str	r2, [r3, #116]	@ 0x74
}
 800a0cc:	bf00      	nop
 800a0ce:	3754      	adds	r7, #84	@ 0x54
 800a0d0:	46bd      	mov	sp, r7
 800a0d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0d6:	4770      	bx	lr

0800a0d8 <UART_DMATransmitCplt>:
  * @brief DMA UART transmit process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 800a0d8:	b580      	push	{r7, lr}
 800a0da:	b090      	sub	sp, #64	@ 0x40
 800a0dc:	af00      	add	r7, sp, #0
 800a0de:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800a0e0:	687b      	ldr	r3, [r7, #4]
 800a0e2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a0e4:	63fb      	str	r3, [r7, #60]	@ 0x3c

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 800a0e6:	687b      	ldr	r3, [r7, #4]
 800a0e8:	681b      	ldr	r3, [r3, #0]
 800a0ea:	681b      	ldr	r3, [r3, #0]
 800a0ec:	f003 0320 	and.w	r3, r3, #32
 800a0f0:	2b00      	cmp	r3, #0
 800a0f2:	d137      	bne.n	800a164 <UART_DMATransmitCplt+0x8c>
  {
    huart->TxXferCount = 0U;
 800a0f4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a0f6:	2200      	movs	r2, #0
 800a0f8:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* Disable the DMA transfer for transmit request by resetting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800a0fc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a0fe:	681b      	ldr	r3, [r3, #0]
 800a100:	3308      	adds	r3, #8
 800a102:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a104:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a106:	e853 3f00 	ldrex	r3, [r3]
 800a10a:	623b      	str	r3, [r7, #32]
   return(result);
 800a10c:	6a3b      	ldr	r3, [r7, #32]
 800a10e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800a112:	63bb      	str	r3, [r7, #56]	@ 0x38
 800a114:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a116:	681b      	ldr	r3, [r3, #0]
 800a118:	3308      	adds	r3, #8
 800a11a:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800a11c:	633a      	str	r2, [r7, #48]	@ 0x30
 800a11e:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a120:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800a122:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800a124:	e841 2300 	strex	r3, r2, [r1]
 800a128:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800a12a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a12c:	2b00      	cmp	r3, #0
 800a12e:	d1e5      	bne.n	800a0fc <UART_DMATransmitCplt+0x24>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800a130:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a132:	681b      	ldr	r3, [r3, #0]
 800a134:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a136:	693b      	ldr	r3, [r7, #16]
 800a138:	e853 3f00 	ldrex	r3, [r3]
 800a13c:	60fb      	str	r3, [r7, #12]
   return(result);
 800a13e:	68fb      	ldr	r3, [r7, #12]
 800a140:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800a144:	637b      	str	r3, [r7, #52]	@ 0x34
 800a146:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a148:	681b      	ldr	r3, [r3, #0]
 800a14a:	461a      	mov	r2, r3
 800a14c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a14e:	61fb      	str	r3, [r7, #28]
 800a150:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a152:	69b9      	ldr	r1, [r7, #24]
 800a154:	69fa      	ldr	r2, [r7, #28]
 800a156:	e841 2300 	strex	r3, r2, [r1]
 800a15a:	617b      	str	r3, [r7, #20]
   return(result);
 800a15c:	697b      	ldr	r3, [r7, #20]
 800a15e:	2b00      	cmp	r3, #0
 800a160:	d1e6      	bne.n	800a130 <UART_DMATransmitCplt+0x58>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800a162:	e002      	b.n	800a16a <UART_DMATransmitCplt+0x92>
    HAL_UART_TxCpltCallback(huart);
 800a164:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 800a166:	f7f6 febf 	bl	8000ee8 <HAL_UART_TxCpltCallback>
}
 800a16a:	bf00      	nop
 800a16c:	3740      	adds	r7, #64	@ 0x40
 800a16e:	46bd      	mov	sp, r7
 800a170:	bd80      	pop	{r7, pc}

0800a172 <UART_DMATxHalfCplt>:
  * @brief DMA UART transmit process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800a172:	b580      	push	{r7, lr}
 800a174:	b084      	sub	sp, #16
 800a176:	af00      	add	r7, sp, #0
 800a178:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800a17a:	687b      	ldr	r3, [r7, #4]
 800a17c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a17e:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx Half complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx Half complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 800a180:	68f8      	ldr	r0, [r7, #12]
 800a182:	f7ff fa5d 	bl	8009640 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800a186:	bf00      	nop
 800a188:	3710      	adds	r7, #16
 800a18a:	46bd      	mov	sp, r7
 800a18c:	bd80      	pop	{r7, pc}

0800a18e <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800a18e:	b580      	push	{r7, lr}
 800a190:	b086      	sub	sp, #24
 800a192:	af00      	add	r7, sp, #0
 800a194:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800a196:	687b      	ldr	r3, [r7, #4]
 800a198:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a19a:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 800a19c:	697b      	ldr	r3, [r7, #20]
 800a19e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800a1a2:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 800a1a4:	697b      	ldr	r3, [r7, #20]
 800a1a6:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800a1aa:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 800a1ac:	697b      	ldr	r3, [r7, #20]
 800a1ae:	681b      	ldr	r3, [r3, #0]
 800a1b0:	689b      	ldr	r3, [r3, #8]
 800a1b2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800a1b6:	2b80      	cmp	r3, #128	@ 0x80
 800a1b8:	d109      	bne.n	800a1ce <UART_DMAError+0x40>
 800a1ba:	693b      	ldr	r3, [r7, #16]
 800a1bc:	2b21      	cmp	r3, #33	@ 0x21
 800a1be:	d106      	bne.n	800a1ce <UART_DMAError+0x40>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 800a1c0:	697b      	ldr	r3, [r7, #20]
 800a1c2:	2200      	movs	r2, #0
 800a1c4:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    UART_EndTxTransfer(huart);
 800a1c8:	6978      	ldr	r0, [r7, #20]
 800a1ca:	f7ff fede 	bl	8009f8a <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 800a1ce:	697b      	ldr	r3, [r7, #20]
 800a1d0:	681b      	ldr	r3, [r3, #0]
 800a1d2:	689b      	ldr	r3, [r3, #8]
 800a1d4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a1d8:	2b40      	cmp	r3, #64	@ 0x40
 800a1da:	d109      	bne.n	800a1f0 <UART_DMAError+0x62>
 800a1dc:	68fb      	ldr	r3, [r7, #12]
 800a1de:	2b22      	cmp	r3, #34	@ 0x22
 800a1e0:	d106      	bne.n	800a1f0 <UART_DMAError+0x62>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 800a1e2:	697b      	ldr	r3, [r7, #20]
 800a1e4:	2200      	movs	r2, #0
 800a1e6:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
    UART_EndRxTransfer(huart);
 800a1ea:	6978      	ldr	r0, [r7, #20]
 800a1ec:	f7ff ff0e 	bl	800a00c <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800a1f0:	697b      	ldr	r3, [r7, #20]
 800a1f2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800a1f6:	f043 0210 	orr.w	r2, r3, #16
 800a1fa:	697b      	ldr	r3, [r7, #20]
 800a1fc:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800a200:	6978      	ldr	r0, [r7, #20]
 800a202:	f7ff fa27 	bl	8009654 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800a206:	bf00      	nop
 800a208:	3718      	adds	r7, #24
 800a20a:	46bd      	mov	sp, r7
 800a20c:	bd80      	pop	{r7, pc}

0800a20e <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800a20e:	b580      	push	{r7, lr}
 800a210:	b084      	sub	sp, #16
 800a212:	af00      	add	r7, sp, #0
 800a214:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800a216:	687b      	ldr	r3, [r7, #4]
 800a218:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a21a:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800a21c:	68fb      	ldr	r3, [r7, #12]
 800a21e:	2200      	movs	r2, #0
 800a220:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800a224:	68f8      	ldr	r0, [r7, #12]
 800a226:	f7ff fa15 	bl	8009654 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800a22a:	bf00      	nop
 800a22c:	3710      	adds	r7, #16
 800a22e:	46bd      	mov	sp, r7
 800a230:	bd80      	pop	{r7, pc}

0800a232 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800a232:	b580      	push	{r7, lr}
 800a234:	b088      	sub	sp, #32
 800a236:	af00      	add	r7, sp, #0
 800a238:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800a23a:	687b      	ldr	r3, [r7, #4]
 800a23c:	681b      	ldr	r3, [r3, #0]
 800a23e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a240:	68fb      	ldr	r3, [r7, #12]
 800a242:	e853 3f00 	ldrex	r3, [r3]
 800a246:	60bb      	str	r3, [r7, #8]
   return(result);
 800a248:	68bb      	ldr	r3, [r7, #8]
 800a24a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800a24e:	61fb      	str	r3, [r7, #28]
 800a250:	687b      	ldr	r3, [r7, #4]
 800a252:	681b      	ldr	r3, [r3, #0]
 800a254:	461a      	mov	r2, r3
 800a256:	69fb      	ldr	r3, [r7, #28]
 800a258:	61bb      	str	r3, [r7, #24]
 800a25a:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a25c:	6979      	ldr	r1, [r7, #20]
 800a25e:	69ba      	ldr	r2, [r7, #24]
 800a260:	e841 2300 	strex	r3, r2, [r1]
 800a264:	613b      	str	r3, [r7, #16]
   return(result);
 800a266:	693b      	ldr	r3, [r7, #16]
 800a268:	2b00      	cmp	r3, #0
 800a26a:	d1e6      	bne.n	800a23a <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800a26c:	687b      	ldr	r3, [r7, #4]
 800a26e:	2220      	movs	r2, #32
 800a270:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800a274:	687b      	ldr	r3, [r7, #4]
 800a276:	2200      	movs	r2, #0
 800a278:	679a      	str	r2, [r3, #120]	@ 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800a27a:	6878      	ldr	r0, [r7, #4]
 800a27c:	f7f6 fe34 	bl	8000ee8 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800a280:	bf00      	nop
 800a282:	3720      	adds	r7, #32
 800a284:	46bd      	mov	sp, r7
 800a286:	bd80      	pop	{r7, pc}

0800a288 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800a288:	b480      	push	{r7}
 800a28a:	b083      	sub	sp, #12
 800a28c:	af00      	add	r7, sp, #0
 800a28e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800a290:	bf00      	nop
 800a292:	370c      	adds	r7, #12
 800a294:	46bd      	mov	sp, r7
 800a296:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a29a:	4770      	bx	lr

0800a29c <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 800a29c:	b480      	push	{r7}
 800a29e:	b083      	sub	sp, #12
 800a2a0:	af00      	add	r7, sp, #0
 800a2a2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 800a2a4:	bf00      	nop
 800a2a6:	370c      	adds	r7, #12
 800a2a8:	46bd      	mov	sp, r7
 800a2aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2ae:	4770      	bx	lr

0800a2b0 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 800a2b0:	b480      	push	{r7}
 800a2b2:	b083      	sub	sp, #12
 800a2b4:	af00      	add	r7, sp, #0
 800a2b6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 800a2b8:	bf00      	nop
 800a2ba:	370c      	adds	r7, #12
 800a2bc:	46bd      	mov	sp, r7
 800a2be:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2c2:	4770      	bx	lr

0800a2c4 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800a2c4:	b480      	push	{r7}
 800a2c6:	b085      	sub	sp, #20
 800a2c8:	af00      	add	r7, sp, #0
 800a2ca:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800a2cc:	687b      	ldr	r3, [r7, #4]
 800a2ce:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800a2d2:	2b01      	cmp	r3, #1
 800a2d4:	d101      	bne.n	800a2da <HAL_UARTEx_DisableFifoMode+0x16>
 800a2d6:	2302      	movs	r3, #2
 800a2d8:	e027      	b.n	800a32a <HAL_UARTEx_DisableFifoMode+0x66>
 800a2da:	687b      	ldr	r3, [r7, #4]
 800a2dc:	2201      	movs	r2, #1
 800a2de:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800a2e2:	687b      	ldr	r3, [r7, #4]
 800a2e4:	2224      	movs	r2, #36	@ 0x24
 800a2e6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800a2ea:	687b      	ldr	r3, [r7, #4]
 800a2ec:	681b      	ldr	r3, [r3, #0]
 800a2ee:	681b      	ldr	r3, [r3, #0]
 800a2f0:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800a2f2:	687b      	ldr	r3, [r7, #4]
 800a2f4:	681b      	ldr	r3, [r3, #0]
 800a2f6:	681a      	ldr	r2, [r3, #0]
 800a2f8:	687b      	ldr	r3, [r7, #4]
 800a2fa:	681b      	ldr	r3, [r3, #0]
 800a2fc:	f022 0201 	bic.w	r2, r2, #1
 800a300:	601a      	str	r2, [r3, #0]

  /* Disable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800a302:	68fb      	ldr	r3, [r7, #12]
 800a304:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 800a308:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800a30a:	687b      	ldr	r3, [r7, #4]
 800a30c:	2200      	movs	r2, #0
 800a30e:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800a310:	687b      	ldr	r3, [r7, #4]
 800a312:	681b      	ldr	r3, [r3, #0]
 800a314:	68fa      	ldr	r2, [r7, #12]
 800a316:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800a318:	687b      	ldr	r3, [r7, #4]
 800a31a:	2220      	movs	r2, #32
 800a31c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800a320:	687b      	ldr	r3, [r7, #4]
 800a322:	2200      	movs	r2, #0
 800a324:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800a328:	2300      	movs	r3, #0
}
 800a32a:	4618      	mov	r0, r3
 800a32c:	3714      	adds	r7, #20
 800a32e:	46bd      	mov	sp, r7
 800a330:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a334:	4770      	bx	lr

0800a336 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800a336:	b580      	push	{r7, lr}
 800a338:	b084      	sub	sp, #16
 800a33a:	af00      	add	r7, sp, #0
 800a33c:	6078      	str	r0, [r7, #4]
 800a33e:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800a340:	687b      	ldr	r3, [r7, #4]
 800a342:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800a346:	2b01      	cmp	r3, #1
 800a348:	d101      	bne.n	800a34e <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800a34a:	2302      	movs	r3, #2
 800a34c:	e02d      	b.n	800a3aa <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800a34e:	687b      	ldr	r3, [r7, #4]
 800a350:	2201      	movs	r2, #1
 800a352:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800a356:	687b      	ldr	r3, [r7, #4]
 800a358:	2224      	movs	r2, #36	@ 0x24
 800a35a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800a35e:	687b      	ldr	r3, [r7, #4]
 800a360:	681b      	ldr	r3, [r3, #0]
 800a362:	681b      	ldr	r3, [r3, #0]
 800a364:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800a366:	687b      	ldr	r3, [r7, #4]
 800a368:	681b      	ldr	r3, [r3, #0]
 800a36a:	681a      	ldr	r2, [r3, #0]
 800a36c:	687b      	ldr	r3, [r7, #4]
 800a36e:	681b      	ldr	r3, [r3, #0]
 800a370:	f022 0201 	bic.w	r2, r2, #1
 800a374:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800a376:	687b      	ldr	r3, [r7, #4]
 800a378:	681b      	ldr	r3, [r3, #0]
 800a37a:	689b      	ldr	r3, [r3, #8]
 800a37c:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 800a380:	687b      	ldr	r3, [r7, #4]
 800a382:	681b      	ldr	r3, [r3, #0]
 800a384:	683a      	ldr	r2, [r7, #0]
 800a386:	430a      	orrs	r2, r1
 800a388:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800a38a:	6878      	ldr	r0, [r7, #4]
 800a38c:	f000 f850 	bl	800a430 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800a390:	687b      	ldr	r3, [r7, #4]
 800a392:	681b      	ldr	r3, [r3, #0]
 800a394:	68fa      	ldr	r2, [r7, #12]
 800a396:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800a398:	687b      	ldr	r3, [r7, #4]
 800a39a:	2220      	movs	r2, #32
 800a39c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800a3a0:	687b      	ldr	r3, [r7, #4]
 800a3a2:	2200      	movs	r2, #0
 800a3a4:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800a3a8:	2300      	movs	r3, #0
}
 800a3aa:	4618      	mov	r0, r3
 800a3ac:	3710      	adds	r7, #16
 800a3ae:	46bd      	mov	sp, r7
 800a3b0:	bd80      	pop	{r7, pc}

0800a3b2 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800a3b2:	b580      	push	{r7, lr}
 800a3b4:	b084      	sub	sp, #16
 800a3b6:	af00      	add	r7, sp, #0
 800a3b8:	6078      	str	r0, [r7, #4]
 800a3ba:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800a3bc:	687b      	ldr	r3, [r7, #4]
 800a3be:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800a3c2:	2b01      	cmp	r3, #1
 800a3c4:	d101      	bne.n	800a3ca <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800a3c6:	2302      	movs	r3, #2
 800a3c8:	e02d      	b.n	800a426 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800a3ca:	687b      	ldr	r3, [r7, #4]
 800a3cc:	2201      	movs	r2, #1
 800a3ce:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800a3d2:	687b      	ldr	r3, [r7, #4]
 800a3d4:	2224      	movs	r2, #36	@ 0x24
 800a3d6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800a3da:	687b      	ldr	r3, [r7, #4]
 800a3dc:	681b      	ldr	r3, [r3, #0]
 800a3de:	681b      	ldr	r3, [r3, #0]
 800a3e0:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800a3e2:	687b      	ldr	r3, [r7, #4]
 800a3e4:	681b      	ldr	r3, [r3, #0]
 800a3e6:	681a      	ldr	r2, [r3, #0]
 800a3e8:	687b      	ldr	r3, [r7, #4]
 800a3ea:	681b      	ldr	r3, [r3, #0]
 800a3ec:	f022 0201 	bic.w	r2, r2, #1
 800a3f0:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800a3f2:	687b      	ldr	r3, [r7, #4]
 800a3f4:	681b      	ldr	r3, [r3, #0]
 800a3f6:	689b      	ldr	r3, [r3, #8]
 800a3f8:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 800a3fc:	687b      	ldr	r3, [r7, #4]
 800a3fe:	681b      	ldr	r3, [r3, #0]
 800a400:	683a      	ldr	r2, [r7, #0]
 800a402:	430a      	orrs	r2, r1
 800a404:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800a406:	6878      	ldr	r0, [r7, #4]
 800a408:	f000 f812 	bl	800a430 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800a40c:	687b      	ldr	r3, [r7, #4]
 800a40e:	681b      	ldr	r3, [r3, #0]
 800a410:	68fa      	ldr	r2, [r7, #12]
 800a412:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800a414:	687b      	ldr	r3, [r7, #4]
 800a416:	2220      	movs	r2, #32
 800a418:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800a41c:	687b      	ldr	r3, [r7, #4]
 800a41e:	2200      	movs	r2, #0
 800a420:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800a424:	2300      	movs	r3, #0
}
 800a426:	4618      	mov	r0, r3
 800a428:	3710      	adds	r7, #16
 800a42a:	46bd      	mov	sp, r7
 800a42c:	bd80      	pop	{r7, pc}
	...

0800a430 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800a430:	b480      	push	{r7}
 800a432:	b085      	sub	sp, #20
 800a434:	af00      	add	r7, sp, #0
 800a436:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800a438:	687b      	ldr	r3, [r7, #4]
 800a43a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800a43c:	2b00      	cmp	r3, #0
 800a43e:	d108      	bne.n	800a452 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800a440:	687b      	ldr	r3, [r7, #4]
 800a442:	2201      	movs	r2, #1
 800a444:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 800a448:	687b      	ldr	r3, [r7, #4]
 800a44a:	2201      	movs	r2, #1
 800a44c:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800a450:	e031      	b.n	800a4b6 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800a452:	2308      	movs	r3, #8
 800a454:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800a456:	2308      	movs	r3, #8
 800a458:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800a45a:	687b      	ldr	r3, [r7, #4]
 800a45c:	681b      	ldr	r3, [r3, #0]
 800a45e:	689b      	ldr	r3, [r3, #8]
 800a460:	0e5b      	lsrs	r3, r3, #25
 800a462:	b2db      	uxtb	r3, r3
 800a464:	f003 0307 	and.w	r3, r3, #7
 800a468:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800a46a:	687b      	ldr	r3, [r7, #4]
 800a46c:	681b      	ldr	r3, [r3, #0]
 800a46e:	689b      	ldr	r3, [r3, #8]
 800a470:	0f5b      	lsrs	r3, r3, #29
 800a472:	b2db      	uxtb	r3, r3
 800a474:	f003 0307 	and.w	r3, r3, #7
 800a478:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800a47a:	7bbb      	ldrb	r3, [r7, #14]
 800a47c:	7b3a      	ldrb	r2, [r7, #12]
 800a47e:	4911      	ldr	r1, [pc, #68]	@ (800a4c4 <UARTEx_SetNbDataToProcess+0x94>)
 800a480:	5c8a      	ldrb	r2, [r1, r2]
 800a482:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800a486:	7b3a      	ldrb	r2, [r7, #12]
 800a488:	490f      	ldr	r1, [pc, #60]	@ (800a4c8 <UARTEx_SetNbDataToProcess+0x98>)
 800a48a:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800a48c:	fb93 f3f2 	sdiv	r3, r3, r2
 800a490:	b29a      	uxth	r2, r3
 800a492:	687b      	ldr	r3, [r7, #4]
 800a494:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800a498:	7bfb      	ldrb	r3, [r7, #15]
 800a49a:	7b7a      	ldrb	r2, [r7, #13]
 800a49c:	4909      	ldr	r1, [pc, #36]	@ (800a4c4 <UARTEx_SetNbDataToProcess+0x94>)
 800a49e:	5c8a      	ldrb	r2, [r1, r2]
 800a4a0:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800a4a4:	7b7a      	ldrb	r2, [r7, #13]
 800a4a6:	4908      	ldr	r1, [pc, #32]	@ (800a4c8 <UARTEx_SetNbDataToProcess+0x98>)
 800a4a8:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800a4aa:	fb93 f3f2 	sdiv	r3, r3, r2
 800a4ae:	b29a      	uxth	r2, r3
 800a4b0:	687b      	ldr	r3, [r7, #4]
 800a4b2:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 800a4b6:	bf00      	nop
 800a4b8:	3714      	adds	r7, #20
 800a4ba:	46bd      	mov	sp, r7
 800a4bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4c0:	4770      	bx	lr
 800a4c2:	bf00      	nop
 800a4c4:	0800ce28 	.word	0x0800ce28
 800a4c8:	0800ce30 	.word	0x0800ce30

0800a4cc <__cvt>:
 800a4cc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800a4d0:	ec57 6b10 	vmov	r6, r7, d0
 800a4d4:	2f00      	cmp	r7, #0
 800a4d6:	460c      	mov	r4, r1
 800a4d8:	4619      	mov	r1, r3
 800a4da:	463b      	mov	r3, r7
 800a4dc:	bfbb      	ittet	lt
 800a4de:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 800a4e2:	461f      	movlt	r7, r3
 800a4e4:	2300      	movge	r3, #0
 800a4e6:	232d      	movlt	r3, #45	@ 0x2d
 800a4e8:	700b      	strb	r3, [r1, #0]
 800a4ea:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800a4ec:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 800a4f0:	4691      	mov	r9, r2
 800a4f2:	f023 0820 	bic.w	r8, r3, #32
 800a4f6:	bfbc      	itt	lt
 800a4f8:	4632      	movlt	r2, r6
 800a4fa:	4616      	movlt	r6, r2
 800a4fc:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800a500:	d005      	beq.n	800a50e <__cvt+0x42>
 800a502:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 800a506:	d100      	bne.n	800a50a <__cvt+0x3e>
 800a508:	3401      	adds	r4, #1
 800a50a:	2102      	movs	r1, #2
 800a50c:	e000      	b.n	800a510 <__cvt+0x44>
 800a50e:	2103      	movs	r1, #3
 800a510:	ab03      	add	r3, sp, #12
 800a512:	9301      	str	r3, [sp, #4]
 800a514:	ab02      	add	r3, sp, #8
 800a516:	9300      	str	r3, [sp, #0]
 800a518:	ec47 6b10 	vmov	d0, r6, r7
 800a51c:	4653      	mov	r3, sl
 800a51e:	4622      	mov	r2, r4
 800a520:	f000 fe3a 	bl	800b198 <_dtoa_r>
 800a524:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 800a528:	4605      	mov	r5, r0
 800a52a:	d119      	bne.n	800a560 <__cvt+0x94>
 800a52c:	f019 0f01 	tst.w	r9, #1
 800a530:	d00e      	beq.n	800a550 <__cvt+0x84>
 800a532:	eb00 0904 	add.w	r9, r0, r4
 800a536:	2200      	movs	r2, #0
 800a538:	2300      	movs	r3, #0
 800a53a:	4630      	mov	r0, r6
 800a53c:	4639      	mov	r1, r7
 800a53e:	f7f6 faeb 	bl	8000b18 <__aeabi_dcmpeq>
 800a542:	b108      	cbz	r0, 800a548 <__cvt+0x7c>
 800a544:	f8cd 900c 	str.w	r9, [sp, #12]
 800a548:	2230      	movs	r2, #48	@ 0x30
 800a54a:	9b03      	ldr	r3, [sp, #12]
 800a54c:	454b      	cmp	r3, r9
 800a54e:	d31e      	bcc.n	800a58e <__cvt+0xc2>
 800a550:	9b03      	ldr	r3, [sp, #12]
 800a552:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800a554:	1b5b      	subs	r3, r3, r5
 800a556:	4628      	mov	r0, r5
 800a558:	6013      	str	r3, [r2, #0]
 800a55a:	b004      	add	sp, #16
 800a55c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a560:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800a564:	eb00 0904 	add.w	r9, r0, r4
 800a568:	d1e5      	bne.n	800a536 <__cvt+0x6a>
 800a56a:	7803      	ldrb	r3, [r0, #0]
 800a56c:	2b30      	cmp	r3, #48	@ 0x30
 800a56e:	d10a      	bne.n	800a586 <__cvt+0xba>
 800a570:	2200      	movs	r2, #0
 800a572:	2300      	movs	r3, #0
 800a574:	4630      	mov	r0, r6
 800a576:	4639      	mov	r1, r7
 800a578:	f7f6 face 	bl	8000b18 <__aeabi_dcmpeq>
 800a57c:	b918      	cbnz	r0, 800a586 <__cvt+0xba>
 800a57e:	f1c4 0401 	rsb	r4, r4, #1
 800a582:	f8ca 4000 	str.w	r4, [sl]
 800a586:	f8da 3000 	ldr.w	r3, [sl]
 800a58a:	4499      	add	r9, r3
 800a58c:	e7d3      	b.n	800a536 <__cvt+0x6a>
 800a58e:	1c59      	adds	r1, r3, #1
 800a590:	9103      	str	r1, [sp, #12]
 800a592:	701a      	strb	r2, [r3, #0]
 800a594:	e7d9      	b.n	800a54a <__cvt+0x7e>

0800a596 <__exponent>:
 800a596:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800a598:	2900      	cmp	r1, #0
 800a59a:	bfba      	itte	lt
 800a59c:	4249      	neglt	r1, r1
 800a59e:	232d      	movlt	r3, #45	@ 0x2d
 800a5a0:	232b      	movge	r3, #43	@ 0x2b
 800a5a2:	2909      	cmp	r1, #9
 800a5a4:	7002      	strb	r2, [r0, #0]
 800a5a6:	7043      	strb	r3, [r0, #1]
 800a5a8:	dd29      	ble.n	800a5fe <__exponent+0x68>
 800a5aa:	f10d 0307 	add.w	r3, sp, #7
 800a5ae:	461d      	mov	r5, r3
 800a5b0:	270a      	movs	r7, #10
 800a5b2:	461a      	mov	r2, r3
 800a5b4:	fbb1 f6f7 	udiv	r6, r1, r7
 800a5b8:	fb07 1416 	mls	r4, r7, r6, r1
 800a5bc:	3430      	adds	r4, #48	@ 0x30
 800a5be:	f802 4c01 	strb.w	r4, [r2, #-1]
 800a5c2:	460c      	mov	r4, r1
 800a5c4:	2c63      	cmp	r4, #99	@ 0x63
 800a5c6:	f103 33ff 	add.w	r3, r3, #4294967295	@ 0xffffffff
 800a5ca:	4631      	mov	r1, r6
 800a5cc:	dcf1      	bgt.n	800a5b2 <__exponent+0x1c>
 800a5ce:	3130      	adds	r1, #48	@ 0x30
 800a5d0:	1e94      	subs	r4, r2, #2
 800a5d2:	f803 1c01 	strb.w	r1, [r3, #-1]
 800a5d6:	1c41      	adds	r1, r0, #1
 800a5d8:	4623      	mov	r3, r4
 800a5da:	42ab      	cmp	r3, r5
 800a5dc:	d30a      	bcc.n	800a5f4 <__exponent+0x5e>
 800a5de:	f10d 0309 	add.w	r3, sp, #9
 800a5e2:	1a9b      	subs	r3, r3, r2
 800a5e4:	42ac      	cmp	r4, r5
 800a5e6:	bf88      	it	hi
 800a5e8:	2300      	movhi	r3, #0
 800a5ea:	3302      	adds	r3, #2
 800a5ec:	4403      	add	r3, r0
 800a5ee:	1a18      	subs	r0, r3, r0
 800a5f0:	b003      	add	sp, #12
 800a5f2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a5f4:	f813 6b01 	ldrb.w	r6, [r3], #1
 800a5f8:	f801 6f01 	strb.w	r6, [r1, #1]!
 800a5fc:	e7ed      	b.n	800a5da <__exponent+0x44>
 800a5fe:	2330      	movs	r3, #48	@ 0x30
 800a600:	3130      	adds	r1, #48	@ 0x30
 800a602:	7083      	strb	r3, [r0, #2]
 800a604:	70c1      	strb	r1, [r0, #3]
 800a606:	1d03      	adds	r3, r0, #4
 800a608:	e7f1      	b.n	800a5ee <__exponent+0x58>
	...

0800a60c <_printf_float>:
 800a60c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a610:	b08d      	sub	sp, #52	@ 0x34
 800a612:	460c      	mov	r4, r1
 800a614:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 800a618:	4616      	mov	r6, r2
 800a61a:	461f      	mov	r7, r3
 800a61c:	4605      	mov	r5, r0
 800a61e:	f000 fcbb 	bl	800af98 <_localeconv_r>
 800a622:	6803      	ldr	r3, [r0, #0]
 800a624:	9304      	str	r3, [sp, #16]
 800a626:	4618      	mov	r0, r3
 800a628:	f7f5 fe4a 	bl	80002c0 <strlen>
 800a62c:	2300      	movs	r3, #0
 800a62e:	930a      	str	r3, [sp, #40]	@ 0x28
 800a630:	f8d8 3000 	ldr.w	r3, [r8]
 800a634:	9005      	str	r0, [sp, #20]
 800a636:	3307      	adds	r3, #7
 800a638:	f023 0307 	bic.w	r3, r3, #7
 800a63c:	f103 0208 	add.w	r2, r3, #8
 800a640:	f894 a018 	ldrb.w	sl, [r4, #24]
 800a644:	f8d4 b000 	ldr.w	fp, [r4]
 800a648:	f8c8 2000 	str.w	r2, [r8]
 800a64c:	e9d3 8900 	ldrd	r8, r9, [r3]
 800a650:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 800a654:	9307      	str	r3, [sp, #28]
 800a656:	f8cd 8018 	str.w	r8, [sp, #24]
 800a65a:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 800a65e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800a662:	4b9c      	ldr	r3, [pc, #624]	@ (800a8d4 <_printf_float+0x2c8>)
 800a664:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800a668:	f7f6 fa88 	bl	8000b7c <__aeabi_dcmpun>
 800a66c:	bb70      	cbnz	r0, 800a6cc <_printf_float+0xc0>
 800a66e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800a672:	4b98      	ldr	r3, [pc, #608]	@ (800a8d4 <_printf_float+0x2c8>)
 800a674:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800a678:	f7f6 fa62 	bl	8000b40 <__aeabi_dcmple>
 800a67c:	bb30      	cbnz	r0, 800a6cc <_printf_float+0xc0>
 800a67e:	2200      	movs	r2, #0
 800a680:	2300      	movs	r3, #0
 800a682:	4640      	mov	r0, r8
 800a684:	4649      	mov	r1, r9
 800a686:	f7f6 fa51 	bl	8000b2c <__aeabi_dcmplt>
 800a68a:	b110      	cbz	r0, 800a692 <_printf_float+0x86>
 800a68c:	232d      	movs	r3, #45	@ 0x2d
 800a68e:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800a692:	4a91      	ldr	r2, [pc, #580]	@ (800a8d8 <_printf_float+0x2cc>)
 800a694:	4b91      	ldr	r3, [pc, #580]	@ (800a8dc <_printf_float+0x2d0>)
 800a696:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 800a69a:	bf94      	ite	ls
 800a69c:	4690      	movls	r8, r2
 800a69e:	4698      	movhi	r8, r3
 800a6a0:	2303      	movs	r3, #3
 800a6a2:	6123      	str	r3, [r4, #16]
 800a6a4:	f02b 0304 	bic.w	r3, fp, #4
 800a6a8:	6023      	str	r3, [r4, #0]
 800a6aa:	f04f 0900 	mov.w	r9, #0
 800a6ae:	9700      	str	r7, [sp, #0]
 800a6b0:	4633      	mov	r3, r6
 800a6b2:	aa0b      	add	r2, sp, #44	@ 0x2c
 800a6b4:	4621      	mov	r1, r4
 800a6b6:	4628      	mov	r0, r5
 800a6b8:	f000 f9d2 	bl	800aa60 <_printf_common>
 800a6bc:	3001      	adds	r0, #1
 800a6be:	f040 808d 	bne.w	800a7dc <_printf_float+0x1d0>
 800a6c2:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800a6c6:	b00d      	add	sp, #52	@ 0x34
 800a6c8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a6cc:	4642      	mov	r2, r8
 800a6ce:	464b      	mov	r3, r9
 800a6d0:	4640      	mov	r0, r8
 800a6d2:	4649      	mov	r1, r9
 800a6d4:	f7f6 fa52 	bl	8000b7c <__aeabi_dcmpun>
 800a6d8:	b140      	cbz	r0, 800a6ec <_printf_float+0xe0>
 800a6da:	464b      	mov	r3, r9
 800a6dc:	2b00      	cmp	r3, #0
 800a6de:	bfbc      	itt	lt
 800a6e0:	232d      	movlt	r3, #45	@ 0x2d
 800a6e2:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 800a6e6:	4a7e      	ldr	r2, [pc, #504]	@ (800a8e0 <_printf_float+0x2d4>)
 800a6e8:	4b7e      	ldr	r3, [pc, #504]	@ (800a8e4 <_printf_float+0x2d8>)
 800a6ea:	e7d4      	b.n	800a696 <_printf_float+0x8a>
 800a6ec:	6863      	ldr	r3, [r4, #4]
 800a6ee:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 800a6f2:	9206      	str	r2, [sp, #24]
 800a6f4:	1c5a      	adds	r2, r3, #1
 800a6f6:	d13b      	bne.n	800a770 <_printf_float+0x164>
 800a6f8:	2306      	movs	r3, #6
 800a6fa:	6063      	str	r3, [r4, #4]
 800a6fc:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 800a700:	2300      	movs	r3, #0
 800a702:	6022      	str	r2, [r4, #0]
 800a704:	9303      	str	r3, [sp, #12]
 800a706:	ab0a      	add	r3, sp, #40	@ 0x28
 800a708:	e9cd a301 	strd	sl, r3, [sp, #4]
 800a70c:	ab09      	add	r3, sp, #36	@ 0x24
 800a70e:	9300      	str	r3, [sp, #0]
 800a710:	6861      	ldr	r1, [r4, #4]
 800a712:	ec49 8b10 	vmov	d0, r8, r9
 800a716:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 800a71a:	4628      	mov	r0, r5
 800a71c:	f7ff fed6 	bl	800a4cc <__cvt>
 800a720:	9b06      	ldr	r3, [sp, #24]
 800a722:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800a724:	2b47      	cmp	r3, #71	@ 0x47
 800a726:	4680      	mov	r8, r0
 800a728:	d129      	bne.n	800a77e <_printf_float+0x172>
 800a72a:	1cc8      	adds	r0, r1, #3
 800a72c:	db02      	blt.n	800a734 <_printf_float+0x128>
 800a72e:	6863      	ldr	r3, [r4, #4]
 800a730:	4299      	cmp	r1, r3
 800a732:	dd41      	ble.n	800a7b8 <_printf_float+0x1ac>
 800a734:	f1aa 0a02 	sub.w	sl, sl, #2
 800a738:	fa5f fa8a 	uxtb.w	sl, sl
 800a73c:	3901      	subs	r1, #1
 800a73e:	4652      	mov	r2, sl
 800a740:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 800a744:	9109      	str	r1, [sp, #36]	@ 0x24
 800a746:	f7ff ff26 	bl	800a596 <__exponent>
 800a74a:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800a74c:	1813      	adds	r3, r2, r0
 800a74e:	2a01      	cmp	r2, #1
 800a750:	4681      	mov	r9, r0
 800a752:	6123      	str	r3, [r4, #16]
 800a754:	dc02      	bgt.n	800a75c <_printf_float+0x150>
 800a756:	6822      	ldr	r2, [r4, #0]
 800a758:	07d2      	lsls	r2, r2, #31
 800a75a:	d501      	bpl.n	800a760 <_printf_float+0x154>
 800a75c:	3301      	adds	r3, #1
 800a75e:	6123      	str	r3, [r4, #16]
 800a760:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 800a764:	2b00      	cmp	r3, #0
 800a766:	d0a2      	beq.n	800a6ae <_printf_float+0xa2>
 800a768:	232d      	movs	r3, #45	@ 0x2d
 800a76a:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800a76e:	e79e      	b.n	800a6ae <_printf_float+0xa2>
 800a770:	9a06      	ldr	r2, [sp, #24]
 800a772:	2a47      	cmp	r2, #71	@ 0x47
 800a774:	d1c2      	bne.n	800a6fc <_printf_float+0xf0>
 800a776:	2b00      	cmp	r3, #0
 800a778:	d1c0      	bne.n	800a6fc <_printf_float+0xf0>
 800a77a:	2301      	movs	r3, #1
 800a77c:	e7bd      	b.n	800a6fa <_printf_float+0xee>
 800a77e:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800a782:	d9db      	bls.n	800a73c <_printf_float+0x130>
 800a784:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 800a788:	d118      	bne.n	800a7bc <_printf_float+0x1b0>
 800a78a:	2900      	cmp	r1, #0
 800a78c:	6863      	ldr	r3, [r4, #4]
 800a78e:	dd0b      	ble.n	800a7a8 <_printf_float+0x19c>
 800a790:	6121      	str	r1, [r4, #16]
 800a792:	b913      	cbnz	r3, 800a79a <_printf_float+0x18e>
 800a794:	6822      	ldr	r2, [r4, #0]
 800a796:	07d0      	lsls	r0, r2, #31
 800a798:	d502      	bpl.n	800a7a0 <_printf_float+0x194>
 800a79a:	3301      	adds	r3, #1
 800a79c:	440b      	add	r3, r1
 800a79e:	6123      	str	r3, [r4, #16]
 800a7a0:	65a1      	str	r1, [r4, #88]	@ 0x58
 800a7a2:	f04f 0900 	mov.w	r9, #0
 800a7a6:	e7db      	b.n	800a760 <_printf_float+0x154>
 800a7a8:	b913      	cbnz	r3, 800a7b0 <_printf_float+0x1a4>
 800a7aa:	6822      	ldr	r2, [r4, #0]
 800a7ac:	07d2      	lsls	r2, r2, #31
 800a7ae:	d501      	bpl.n	800a7b4 <_printf_float+0x1a8>
 800a7b0:	3302      	adds	r3, #2
 800a7b2:	e7f4      	b.n	800a79e <_printf_float+0x192>
 800a7b4:	2301      	movs	r3, #1
 800a7b6:	e7f2      	b.n	800a79e <_printf_float+0x192>
 800a7b8:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 800a7bc:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800a7be:	4299      	cmp	r1, r3
 800a7c0:	db05      	blt.n	800a7ce <_printf_float+0x1c2>
 800a7c2:	6823      	ldr	r3, [r4, #0]
 800a7c4:	6121      	str	r1, [r4, #16]
 800a7c6:	07d8      	lsls	r0, r3, #31
 800a7c8:	d5ea      	bpl.n	800a7a0 <_printf_float+0x194>
 800a7ca:	1c4b      	adds	r3, r1, #1
 800a7cc:	e7e7      	b.n	800a79e <_printf_float+0x192>
 800a7ce:	2900      	cmp	r1, #0
 800a7d0:	bfd4      	ite	le
 800a7d2:	f1c1 0202 	rsble	r2, r1, #2
 800a7d6:	2201      	movgt	r2, #1
 800a7d8:	4413      	add	r3, r2
 800a7da:	e7e0      	b.n	800a79e <_printf_float+0x192>
 800a7dc:	6823      	ldr	r3, [r4, #0]
 800a7de:	055a      	lsls	r2, r3, #21
 800a7e0:	d407      	bmi.n	800a7f2 <_printf_float+0x1e6>
 800a7e2:	6923      	ldr	r3, [r4, #16]
 800a7e4:	4642      	mov	r2, r8
 800a7e6:	4631      	mov	r1, r6
 800a7e8:	4628      	mov	r0, r5
 800a7ea:	47b8      	blx	r7
 800a7ec:	3001      	adds	r0, #1
 800a7ee:	d12b      	bne.n	800a848 <_printf_float+0x23c>
 800a7f0:	e767      	b.n	800a6c2 <_printf_float+0xb6>
 800a7f2:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800a7f6:	f240 80dd 	bls.w	800a9b4 <_printf_float+0x3a8>
 800a7fa:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800a7fe:	2200      	movs	r2, #0
 800a800:	2300      	movs	r3, #0
 800a802:	f7f6 f989 	bl	8000b18 <__aeabi_dcmpeq>
 800a806:	2800      	cmp	r0, #0
 800a808:	d033      	beq.n	800a872 <_printf_float+0x266>
 800a80a:	4a37      	ldr	r2, [pc, #220]	@ (800a8e8 <_printf_float+0x2dc>)
 800a80c:	2301      	movs	r3, #1
 800a80e:	4631      	mov	r1, r6
 800a810:	4628      	mov	r0, r5
 800a812:	47b8      	blx	r7
 800a814:	3001      	adds	r0, #1
 800a816:	f43f af54 	beq.w	800a6c2 <_printf_float+0xb6>
 800a81a:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 800a81e:	4543      	cmp	r3, r8
 800a820:	db02      	blt.n	800a828 <_printf_float+0x21c>
 800a822:	6823      	ldr	r3, [r4, #0]
 800a824:	07d8      	lsls	r0, r3, #31
 800a826:	d50f      	bpl.n	800a848 <_printf_float+0x23c>
 800a828:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800a82c:	4631      	mov	r1, r6
 800a82e:	4628      	mov	r0, r5
 800a830:	47b8      	blx	r7
 800a832:	3001      	adds	r0, #1
 800a834:	f43f af45 	beq.w	800a6c2 <_printf_float+0xb6>
 800a838:	f04f 0900 	mov.w	r9, #0
 800a83c:	f108 38ff 	add.w	r8, r8, #4294967295	@ 0xffffffff
 800a840:	f104 0a1a 	add.w	sl, r4, #26
 800a844:	45c8      	cmp	r8, r9
 800a846:	dc09      	bgt.n	800a85c <_printf_float+0x250>
 800a848:	6823      	ldr	r3, [r4, #0]
 800a84a:	079b      	lsls	r3, r3, #30
 800a84c:	f100 8103 	bmi.w	800aa56 <_printf_float+0x44a>
 800a850:	68e0      	ldr	r0, [r4, #12]
 800a852:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800a854:	4298      	cmp	r0, r3
 800a856:	bfb8      	it	lt
 800a858:	4618      	movlt	r0, r3
 800a85a:	e734      	b.n	800a6c6 <_printf_float+0xba>
 800a85c:	2301      	movs	r3, #1
 800a85e:	4652      	mov	r2, sl
 800a860:	4631      	mov	r1, r6
 800a862:	4628      	mov	r0, r5
 800a864:	47b8      	blx	r7
 800a866:	3001      	adds	r0, #1
 800a868:	f43f af2b 	beq.w	800a6c2 <_printf_float+0xb6>
 800a86c:	f109 0901 	add.w	r9, r9, #1
 800a870:	e7e8      	b.n	800a844 <_printf_float+0x238>
 800a872:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a874:	2b00      	cmp	r3, #0
 800a876:	dc39      	bgt.n	800a8ec <_printf_float+0x2e0>
 800a878:	4a1b      	ldr	r2, [pc, #108]	@ (800a8e8 <_printf_float+0x2dc>)
 800a87a:	2301      	movs	r3, #1
 800a87c:	4631      	mov	r1, r6
 800a87e:	4628      	mov	r0, r5
 800a880:	47b8      	blx	r7
 800a882:	3001      	adds	r0, #1
 800a884:	f43f af1d 	beq.w	800a6c2 <_printf_float+0xb6>
 800a888:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 800a88c:	ea59 0303 	orrs.w	r3, r9, r3
 800a890:	d102      	bne.n	800a898 <_printf_float+0x28c>
 800a892:	6823      	ldr	r3, [r4, #0]
 800a894:	07d9      	lsls	r1, r3, #31
 800a896:	d5d7      	bpl.n	800a848 <_printf_float+0x23c>
 800a898:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800a89c:	4631      	mov	r1, r6
 800a89e:	4628      	mov	r0, r5
 800a8a0:	47b8      	blx	r7
 800a8a2:	3001      	adds	r0, #1
 800a8a4:	f43f af0d 	beq.w	800a6c2 <_printf_float+0xb6>
 800a8a8:	f04f 0a00 	mov.w	sl, #0
 800a8ac:	f104 0b1a 	add.w	fp, r4, #26
 800a8b0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a8b2:	425b      	negs	r3, r3
 800a8b4:	4553      	cmp	r3, sl
 800a8b6:	dc01      	bgt.n	800a8bc <_printf_float+0x2b0>
 800a8b8:	464b      	mov	r3, r9
 800a8ba:	e793      	b.n	800a7e4 <_printf_float+0x1d8>
 800a8bc:	2301      	movs	r3, #1
 800a8be:	465a      	mov	r2, fp
 800a8c0:	4631      	mov	r1, r6
 800a8c2:	4628      	mov	r0, r5
 800a8c4:	47b8      	blx	r7
 800a8c6:	3001      	adds	r0, #1
 800a8c8:	f43f aefb 	beq.w	800a6c2 <_printf_float+0xb6>
 800a8cc:	f10a 0a01 	add.w	sl, sl, #1
 800a8d0:	e7ee      	b.n	800a8b0 <_printf_float+0x2a4>
 800a8d2:	bf00      	nop
 800a8d4:	7fefffff 	.word	0x7fefffff
 800a8d8:	0800ce38 	.word	0x0800ce38
 800a8dc:	0800ce3c 	.word	0x0800ce3c
 800a8e0:	0800ce40 	.word	0x0800ce40
 800a8e4:	0800ce44 	.word	0x0800ce44
 800a8e8:	0800ce48 	.word	0x0800ce48
 800a8ec:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800a8ee:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800a8f2:	4553      	cmp	r3, sl
 800a8f4:	bfa8      	it	ge
 800a8f6:	4653      	movge	r3, sl
 800a8f8:	2b00      	cmp	r3, #0
 800a8fa:	4699      	mov	r9, r3
 800a8fc:	dc36      	bgt.n	800a96c <_printf_float+0x360>
 800a8fe:	f04f 0b00 	mov.w	fp, #0
 800a902:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800a906:	f104 021a 	add.w	r2, r4, #26
 800a90a:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800a90c:	9306      	str	r3, [sp, #24]
 800a90e:	eba3 0309 	sub.w	r3, r3, r9
 800a912:	455b      	cmp	r3, fp
 800a914:	dc31      	bgt.n	800a97a <_printf_float+0x36e>
 800a916:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a918:	459a      	cmp	sl, r3
 800a91a:	dc3a      	bgt.n	800a992 <_printf_float+0x386>
 800a91c:	6823      	ldr	r3, [r4, #0]
 800a91e:	07da      	lsls	r2, r3, #31
 800a920:	d437      	bmi.n	800a992 <_printf_float+0x386>
 800a922:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a924:	ebaa 0903 	sub.w	r9, sl, r3
 800a928:	9b06      	ldr	r3, [sp, #24]
 800a92a:	ebaa 0303 	sub.w	r3, sl, r3
 800a92e:	4599      	cmp	r9, r3
 800a930:	bfa8      	it	ge
 800a932:	4699      	movge	r9, r3
 800a934:	f1b9 0f00 	cmp.w	r9, #0
 800a938:	dc33      	bgt.n	800a9a2 <_printf_float+0x396>
 800a93a:	f04f 0800 	mov.w	r8, #0
 800a93e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800a942:	f104 0b1a 	add.w	fp, r4, #26
 800a946:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a948:	ebaa 0303 	sub.w	r3, sl, r3
 800a94c:	eba3 0309 	sub.w	r3, r3, r9
 800a950:	4543      	cmp	r3, r8
 800a952:	f77f af79 	ble.w	800a848 <_printf_float+0x23c>
 800a956:	2301      	movs	r3, #1
 800a958:	465a      	mov	r2, fp
 800a95a:	4631      	mov	r1, r6
 800a95c:	4628      	mov	r0, r5
 800a95e:	47b8      	blx	r7
 800a960:	3001      	adds	r0, #1
 800a962:	f43f aeae 	beq.w	800a6c2 <_printf_float+0xb6>
 800a966:	f108 0801 	add.w	r8, r8, #1
 800a96a:	e7ec      	b.n	800a946 <_printf_float+0x33a>
 800a96c:	4642      	mov	r2, r8
 800a96e:	4631      	mov	r1, r6
 800a970:	4628      	mov	r0, r5
 800a972:	47b8      	blx	r7
 800a974:	3001      	adds	r0, #1
 800a976:	d1c2      	bne.n	800a8fe <_printf_float+0x2f2>
 800a978:	e6a3      	b.n	800a6c2 <_printf_float+0xb6>
 800a97a:	2301      	movs	r3, #1
 800a97c:	4631      	mov	r1, r6
 800a97e:	4628      	mov	r0, r5
 800a980:	9206      	str	r2, [sp, #24]
 800a982:	47b8      	blx	r7
 800a984:	3001      	adds	r0, #1
 800a986:	f43f ae9c 	beq.w	800a6c2 <_printf_float+0xb6>
 800a98a:	9a06      	ldr	r2, [sp, #24]
 800a98c:	f10b 0b01 	add.w	fp, fp, #1
 800a990:	e7bb      	b.n	800a90a <_printf_float+0x2fe>
 800a992:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800a996:	4631      	mov	r1, r6
 800a998:	4628      	mov	r0, r5
 800a99a:	47b8      	blx	r7
 800a99c:	3001      	adds	r0, #1
 800a99e:	d1c0      	bne.n	800a922 <_printf_float+0x316>
 800a9a0:	e68f      	b.n	800a6c2 <_printf_float+0xb6>
 800a9a2:	9a06      	ldr	r2, [sp, #24]
 800a9a4:	464b      	mov	r3, r9
 800a9a6:	4442      	add	r2, r8
 800a9a8:	4631      	mov	r1, r6
 800a9aa:	4628      	mov	r0, r5
 800a9ac:	47b8      	blx	r7
 800a9ae:	3001      	adds	r0, #1
 800a9b0:	d1c3      	bne.n	800a93a <_printf_float+0x32e>
 800a9b2:	e686      	b.n	800a6c2 <_printf_float+0xb6>
 800a9b4:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800a9b8:	f1ba 0f01 	cmp.w	sl, #1
 800a9bc:	dc01      	bgt.n	800a9c2 <_printf_float+0x3b6>
 800a9be:	07db      	lsls	r3, r3, #31
 800a9c0:	d536      	bpl.n	800aa30 <_printf_float+0x424>
 800a9c2:	2301      	movs	r3, #1
 800a9c4:	4642      	mov	r2, r8
 800a9c6:	4631      	mov	r1, r6
 800a9c8:	4628      	mov	r0, r5
 800a9ca:	47b8      	blx	r7
 800a9cc:	3001      	adds	r0, #1
 800a9ce:	f43f ae78 	beq.w	800a6c2 <_printf_float+0xb6>
 800a9d2:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800a9d6:	4631      	mov	r1, r6
 800a9d8:	4628      	mov	r0, r5
 800a9da:	47b8      	blx	r7
 800a9dc:	3001      	adds	r0, #1
 800a9de:	f43f ae70 	beq.w	800a6c2 <_printf_float+0xb6>
 800a9e2:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800a9e6:	2200      	movs	r2, #0
 800a9e8:	2300      	movs	r3, #0
 800a9ea:	f10a 3aff 	add.w	sl, sl, #4294967295	@ 0xffffffff
 800a9ee:	f7f6 f893 	bl	8000b18 <__aeabi_dcmpeq>
 800a9f2:	b9c0      	cbnz	r0, 800aa26 <_printf_float+0x41a>
 800a9f4:	4653      	mov	r3, sl
 800a9f6:	f108 0201 	add.w	r2, r8, #1
 800a9fa:	4631      	mov	r1, r6
 800a9fc:	4628      	mov	r0, r5
 800a9fe:	47b8      	blx	r7
 800aa00:	3001      	adds	r0, #1
 800aa02:	d10c      	bne.n	800aa1e <_printf_float+0x412>
 800aa04:	e65d      	b.n	800a6c2 <_printf_float+0xb6>
 800aa06:	2301      	movs	r3, #1
 800aa08:	465a      	mov	r2, fp
 800aa0a:	4631      	mov	r1, r6
 800aa0c:	4628      	mov	r0, r5
 800aa0e:	47b8      	blx	r7
 800aa10:	3001      	adds	r0, #1
 800aa12:	f43f ae56 	beq.w	800a6c2 <_printf_float+0xb6>
 800aa16:	f108 0801 	add.w	r8, r8, #1
 800aa1a:	45d0      	cmp	r8, sl
 800aa1c:	dbf3      	blt.n	800aa06 <_printf_float+0x3fa>
 800aa1e:	464b      	mov	r3, r9
 800aa20:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 800aa24:	e6df      	b.n	800a7e6 <_printf_float+0x1da>
 800aa26:	f04f 0800 	mov.w	r8, #0
 800aa2a:	f104 0b1a 	add.w	fp, r4, #26
 800aa2e:	e7f4      	b.n	800aa1a <_printf_float+0x40e>
 800aa30:	2301      	movs	r3, #1
 800aa32:	4642      	mov	r2, r8
 800aa34:	e7e1      	b.n	800a9fa <_printf_float+0x3ee>
 800aa36:	2301      	movs	r3, #1
 800aa38:	464a      	mov	r2, r9
 800aa3a:	4631      	mov	r1, r6
 800aa3c:	4628      	mov	r0, r5
 800aa3e:	47b8      	blx	r7
 800aa40:	3001      	adds	r0, #1
 800aa42:	f43f ae3e 	beq.w	800a6c2 <_printf_float+0xb6>
 800aa46:	f108 0801 	add.w	r8, r8, #1
 800aa4a:	68e3      	ldr	r3, [r4, #12]
 800aa4c:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800aa4e:	1a5b      	subs	r3, r3, r1
 800aa50:	4543      	cmp	r3, r8
 800aa52:	dcf0      	bgt.n	800aa36 <_printf_float+0x42a>
 800aa54:	e6fc      	b.n	800a850 <_printf_float+0x244>
 800aa56:	f04f 0800 	mov.w	r8, #0
 800aa5a:	f104 0919 	add.w	r9, r4, #25
 800aa5e:	e7f4      	b.n	800aa4a <_printf_float+0x43e>

0800aa60 <_printf_common>:
 800aa60:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800aa64:	4616      	mov	r6, r2
 800aa66:	4698      	mov	r8, r3
 800aa68:	688a      	ldr	r2, [r1, #8]
 800aa6a:	690b      	ldr	r3, [r1, #16]
 800aa6c:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800aa70:	4293      	cmp	r3, r2
 800aa72:	bfb8      	it	lt
 800aa74:	4613      	movlt	r3, r2
 800aa76:	6033      	str	r3, [r6, #0]
 800aa78:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800aa7c:	4607      	mov	r7, r0
 800aa7e:	460c      	mov	r4, r1
 800aa80:	b10a      	cbz	r2, 800aa86 <_printf_common+0x26>
 800aa82:	3301      	adds	r3, #1
 800aa84:	6033      	str	r3, [r6, #0]
 800aa86:	6823      	ldr	r3, [r4, #0]
 800aa88:	0699      	lsls	r1, r3, #26
 800aa8a:	bf42      	ittt	mi
 800aa8c:	6833      	ldrmi	r3, [r6, #0]
 800aa8e:	3302      	addmi	r3, #2
 800aa90:	6033      	strmi	r3, [r6, #0]
 800aa92:	6825      	ldr	r5, [r4, #0]
 800aa94:	f015 0506 	ands.w	r5, r5, #6
 800aa98:	d106      	bne.n	800aaa8 <_printf_common+0x48>
 800aa9a:	f104 0a19 	add.w	sl, r4, #25
 800aa9e:	68e3      	ldr	r3, [r4, #12]
 800aaa0:	6832      	ldr	r2, [r6, #0]
 800aaa2:	1a9b      	subs	r3, r3, r2
 800aaa4:	42ab      	cmp	r3, r5
 800aaa6:	dc26      	bgt.n	800aaf6 <_printf_common+0x96>
 800aaa8:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800aaac:	6822      	ldr	r2, [r4, #0]
 800aaae:	3b00      	subs	r3, #0
 800aab0:	bf18      	it	ne
 800aab2:	2301      	movne	r3, #1
 800aab4:	0692      	lsls	r2, r2, #26
 800aab6:	d42b      	bmi.n	800ab10 <_printf_common+0xb0>
 800aab8:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800aabc:	4641      	mov	r1, r8
 800aabe:	4638      	mov	r0, r7
 800aac0:	47c8      	blx	r9
 800aac2:	3001      	adds	r0, #1
 800aac4:	d01e      	beq.n	800ab04 <_printf_common+0xa4>
 800aac6:	6823      	ldr	r3, [r4, #0]
 800aac8:	6922      	ldr	r2, [r4, #16]
 800aaca:	f003 0306 	and.w	r3, r3, #6
 800aace:	2b04      	cmp	r3, #4
 800aad0:	bf02      	ittt	eq
 800aad2:	68e5      	ldreq	r5, [r4, #12]
 800aad4:	6833      	ldreq	r3, [r6, #0]
 800aad6:	1aed      	subeq	r5, r5, r3
 800aad8:	68a3      	ldr	r3, [r4, #8]
 800aada:	bf0c      	ite	eq
 800aadc:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800aae0:	2500      	movne	r5, #0
 800aae2:	4293      	cmp	r3, r2
 800aae4:	bfc4      	itt	gt
 800aae6:	1a9b      	subgt	r3, r3, r2
 800aae8:	18ed      	addgt	r5, r5, r3
 800aaea:	2600      	movs	r6, #0
 800aaec:	341a      	adds	r4, #26
 800aaee:	42b5      	cmp	r5, r6
 800aaf0:	d11a      	bne.n	800ab28 <_printf_common+0xc8>
 800aaf2:	2000      	movs	r0, #0
 800aaf4:	e008      	b.n	800ab08 <_printf_common+0xa8>
 800aaf6:	2301      	movs	r3, #1
 800aaf8:	4652      	mov	r2, sl
 800aafa:	4641      	mov	r1, r8
 800aafc:	4638      	mov	r0, r7
 800aafe:	47c8      	blx	r9
 800ab00:	3001      	adds	r0, #1
 800ab02:	d103      	bne.n	800ab0c <_printf_common+0xac>
 800ab04:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800ab08:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ab0c:	3501      	adds	r5, #1
 800ab0e:	e7c6      	b.n	800aa9e <_printf_common+0x3e>
 800ab10:	18e1      	adds	r1, r4, r3
 800ab12:	1c5a      	adds	r2, r3, #1
 800ab14:	2030      	movs	r0, #48	@ 0x30
 800ab16:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800ab1a:	4422      	add	r2, r4
 800ab1c:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800ab20:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800ab24:	3302      	adds	r3, #2
 800ab26:	e7c7      	b.n	800aab8 <_printf_common+0x58>
 800ab28:	2301      	movs	r3, #1
 800ab2a:	4622      	mov	r2, r4
 800ab2c:	4641      	mov	r1, r8
 800ab2e:	4638      	mov	r0, r7
 800ab30:	47c8      	blx	r9
 800ab32:	3001      	adds	r0, #1
 800ab34:	d0e6      	beq.n	800ab04 <_printf_common+0xa4>
 800ab36:	3601      	adds	r6, #1
 800ab38:	e7d9      	b.n	800aaee <_printf_common+0x8e>
	...

0800ab3c <_printf_i>:
 800ab3c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800ab40:	7e0f      	ldrb	r7, [r1, #24]
 800ab42:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800ab44:	2f78      	cmp	r7, #120	@ 0x78
 800ab46:	4691      	mov	r9, r2
 800ab48:	4680      	mov	r8, r0
 800ab4a:	460c      	mov	r4, r1
 800ab4c:	469a      	mov	sl, r3
 800ab4e:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800ab52:	d807      	bhi.n	800ab64 <_printf_i+0x28>
 800ab54:	2f62      	cmp	r7, #98	@ 0x62
 800ab56:	d80a      	bhi.n	800ab6e <_printf_i+0x32>
 800ab58:	2f00      	cmp	r7, #0
 800ab5a:	f000 80d2 	beq.w	800ad02 <_printf_i+0x1c6>
 800ab5e:	2f58      	cmp	r7, #88	@ 0x58
 800ab60:	f000 80b9 	beq.w	800acd6 <_printf_i+0x19a>
 800ab64:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800ab68:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800ab6c:	e03a      	b.n	800abe4 <_printf_i+0xa8>
 800ab6e:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800ab72:	2b15      	cmp	r3, #21
 800ab74:	d8f6      	bhi.n	800ab64 <_printf_i+0x28>
 800ab76:	a101      	add	r1, pc, #4	@ (adr r1, 800ab7c <_printf_i+0x40>)
 800ab78:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800ab7c:	0800abd5 	.word	0x0800abd5
 800ab80:	0800abe9 	.word	0x0800abe9
 800ab84:	0800ab65 	.word	0x0800ab65
 800ab88:	0800ab65 	.word	0x0800ab65
 800ab8c:	0800ab65 	.word	0x0800ab65
 800ab90:	0800ab65 	.word	0x0800ab65
 800ab94:	0800abe9 	.word	0x0800abe9
 800ab98:	0800ab65 	.word	0x0800ab65
 800ab9c:	0800ab65 	.word	0x0800ab65
 800aba0:	0800ab65 	.word	0x0800ab65
 800aba4:	0800ab65 	.word	0x0800ab65
 800aba8:	0800ace9 	.word	0x0800ace9
 800abac:	0800ac13 	.word	0x0800ac13
 800abb0:	0800aca3 	.word	0x0800aca3
 800abb4:	0800ab65 	.word	0x0800ab65
 800abb8:	0800ab65 	.word	0x0800ab65
 800abbc:	0800ad0b 	.word	0x0800ad0b
 800abc0:	0800ab65 	.word	0x0800ab65
 800abc4:	0800ac13 	.word	0x0800ac13
 800abc8:	0800ab65 	.word	0x0800ab65
 800abcc:	0800ab65 	.word	0x0800ab65
 800abd0:	0800acab 	.word	0x0800acab
 800abd4:	6833      	ldr	r3, [r6, #0]
 800abd6:	1d1a      	adds	r2, r3, #4
 800abd8:	681b      	ldr	r3, [r3, #0]
 800abda:	6032      	str	r2, [r6, #0]
 800abdc:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800abe0:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800abe4:	2301      	movs	r3, #1
 800abe6:	e09d      	b.n	800ad24 <_printf_i+0x1e8>
 800abe8:	6833      	ldr	r3, [r6, #0]
 800abea:	6820      	ldr	r0, [r4, #0]
 800abec:	1d19      	adds	r1, r3, #4
 800abee:	6031      	str	r1, [r6, #0]
 800abf0:	0606      	lsls	r6, r0, #24
 800abf2:	d501      	bpl.n	800abf8 <_printf_i+0xbc>
 800abf4:	681d      	ldr	r5, [r3, #0]
 800abf6:	e003      	b.n	800ac00 <_printf_i+0xc4>
 800abf8:	0645      	lsls	r5, r0, #25
 800abfa:	d5fb      	bpl.n	800abf4 <_printf_i+0xb8>
 800abfc:	f9b3 5000 	ldrsh.w	r5, [r3]
 800ac00:	2d00      	cmp	r5, #0
 800ac02:	da03      	bge.n	800ac0c <_printf_i+0xd0>
 800ac04:	232d      	movs	r3, #45	@ 0x2d
 800ac06:	426d      	negs	r5, r5
 800ac08:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800ac0c:	4859      	ldr	r0, [pc, #356]	@ (800ad74 <_printf_i+0x238>)
 800ac0e:	230a      	movs	r3, #10
 800ac10:	e011      	b.n	800ac36 <_printf_i+0xfa>
 800ac12:	6821      	ldr	r1, [r4, #0]
 800ac14:	6833      	ldr	r3, [r6, #0]
 800ac16:	0608      	lsls	r0, r1, #24
 800ac18:	f853 5b04 	ldr.w	r5, [r3], #4
 800ac1c:	d402      	bmi.n	800ac24 <_printf_i+0xe8>
 800ac1e:	0649      	lsls	r1, r1, #25
 800ac20:	bf48      	it	mi
 800ac22:	b2ad      	uxthmi	r5, r5
 800ac24:	2f6f      	cmp	r7, #111	@ 0x6f
 800ac26:	4853      	ldr	r0, [pc, #332]	@ (800ad74 <_printf_i+0x238>)
 800ac28:	6033      	str	r3, [r6, #0]
 800ac2a:	bf14      	ite	ne
 800ac2c:	230a      	movne	r3, #10
 800ac2e:	2308      	moveq	r3, #8
 800ac30:	2100      	movs	r1, #0
 800ac32:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800ac36:	6866      	ldr	r6, [r4, #4]
 800ac38:	60a6      	str	r6, [r4, #8]
 800ac3a:	2e00      	cmp	r6, #0
 800ac3c:	bfa2      	ittt	ge
 800ac3e:	6821      	ldrge	r1, [r4, #0]
 800ac40:	f021 0104 	bicge.w	r1, r1, #4
 800ac44:	6021      	strge	r1, [r4, #0]
 800ac46:	b90d      	cbnz	r5, 800ac4c <_printf_i+0x110>
 800ac48:	2e00      	cmp	r6, #0
 800ac4a:	d04b      	beq.n	800ace4 <_printf_i+0x1a8>
 800ac4c:	4616      	mov	r6, r2
 800ac4e:	fbb5 f1f3 	udiv	r1, r5, r3
 800ac52:	fb03 5711 	mls	r7, r3, r1, r5
 800ac56:	5dc7      	ldrb	r7, [r0, r7]
 800ac58:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800ac5c:	462f      	mov	r7, r5
 800ac5e:	42bb      	cmp	r3, r7
 800ac60:	460d      	mov	r5, r1
 800ac62:	d9f4      	bls.n	800ac4e <_printf_i+0x112>
 800ac64:	2b08      	cmp	r3, #8
 800ac66:	d10b      	bne.n	800ac80 <_printf_i+0x144>
 800ac68:	6823      	ldr	r3, [r4, #0]
 800ac6a:	07df      	lsls	r7, r3, #31
 800ac6c:	d508      	bpl.n	800ac80 <_printf_i+0x144>
 800ac6e:	6923      	ldr	r3, [r4, #16]
 800ac70:	6861      	ldr	r1, [r4, #4]
 800ac72:	4299      	cmp	r1, r3
 800ac74:	bfde      	ittt	le
 800ac76:	2330      	movle	r3, #48	@ 0x30
 800ac78:	f806 3c01 	strble.w	r3, [r6, #-1]
 800ac7c:	f106 36ff 	addle.w	r6, r6, #4294967295	@ 0xffffffff
 800ac80:	1b92      	subs	r2, r2, r6
 800ac82:	6122      	str	r2, [r4, #16]
 800ac84:	f8cd a000 	str.w	sl, [sp]
 800ac88:	464b      	mov	r3, r9
 800ac8a:	aa03      	add	r2, sp, #12
 800ac8c:	4621      	mov	r1, r4
 800ac8e:	4640      	mov	r0, r8
 800ac90:	f7ff fee6 	bl	800aa60 <_printf_common>
 800ac94:	3001      	adds	r0, #1
 800ac96:	d14a      	bne.n	800ad2e <_printf_i+0x1f2>
 800ac98:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800ac9c:	b004      	add	sp, #16
 800ac9e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800aca2:	6823      	ldr	r3, [r4, #0]
 800aca4:	f043 0320 	orr.w	r3, r3, #32
 800aca8:	6023      	str	r3, [r4, #0]
 800acaa:	4833      	ldr	r0, [pc, #204]	@ (800ad78 <_printf_i+0x23c>)
 800acac:	2778      	movs	r7, #120	@ 0x78
 800acae:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800acb2:	6823      	ldr	r3, [r4, #0]
 800acb4:	6831      	ldr	r1, [r6, #0]
 800acb6:	061f      	lsls	r7, r3, #24
 800acb8:	f851 5b04 	ldr.w	r5, [r1], #4
 800acbc:	d402      	bmi.n	800acc4 <_printf_i+0x188>
 800acbe:	065f      	lsls	r7, r3, #25
 800acc0:	bf48      	it	mi
 800acc2:	b2ad      	uxthmi	r5, r5
 800acc4:	6031      	str	r1, [r6, #0]
 800acc6:	07d9      	lsls	r1, r3, #31
 800acc8:	bf44      	itt	mi
 800acca:	f043 0320 	orrmi.w	r3, r3, #32
 800acce:	6023      	strmi	r3, [r4, #0]
 800acd0:	b11d      	cbz	r5, 800acda <_printf_i+0x19e>
 800acd2:	2310      	movs	r3, #16
 800acd4:	e7ac      	b.n	800ac30 <_printf_i+0xf4>
 800acd6:	4827      	ldr	r0, [pc, #156]	@ (800ad74 <_printf_i+0x238>)
 800acd8:	e7e9      	b.n	800acae <_printf_i+0x172>
 800acda:	6823      	ldr	r3, [r4, #0]
 800acdc:	f023 0320 	bic.w	r3, r3, #32
 800ace0:	6023      	str	r3, [r4, #0]
 800ace2:	e7f6      	b.n	800acd2 <_printf_i+0x196>
 800ace4:	4616      	mov	r6, r2
 800ace6:	e7bd      	b.n	800ac64 <_printf_i+0x128>
 800ace8:	6833      	ldr	r3, [r6, #0]
 800acea:	6825      	ldr	r5, [r4, #0]
 800acec:	6961      	ldr	r1, [r4, #20]
 800acee:	1d18      	adds	r0, r3, #4
 800acf0:	6030      	str	r0, [r6, #0]
 800acf2:	062e      	lsls	r6, r5, #24
 800acf4:	681b      	ldr	r3, [r3, #0]
 800acf6:	d501      	bpl.n	800acfc <_printf_i+0x1c0>
 800acf8:	6019      	str	r1, [r3, #0]
 800acfa:	e002      	b.n	800ad02 <_printf_i+0x1c6>
 800acfc:	0668      	lsls	r0, r5, #25
 800acfe:	d5fb      	bpl.n	800acf8 <_printf_i+0x1bc>
 800ad00:	8019      	strh	r1, [r3, #0]
 800ad02:	2300      	movs	r3, #0
 800ad04:	6123      	str	r3, [r4, #16]
 800ad06:	4616      	mov	r6, r2
 800ad08:	e7bc      	b.n	800ac84 <_printf_i+0x148>
 800ad0a:	6833      	ldr	r3, [r6, #0]
 800ad0c:	1d1a      	adds	r2, r3, #4
 800ad0e:	6032      	str	r2, [r6, #0]
 800ad10:	681e      	ldr	r6, [r3, #0]
 800ad12:	6862      	ldr	r2, [r4, #4]
 800ad14:	2100      	movs	r1, #0
 800ad16:	4630      	mov	r0, r6
 800ad18:	f7f5 fa82 	bl	8000220 <memchr>
 800ad1c:	b108      	cbz	r0, 800ad22 <_printf_i+0x1e6>
 800ad1e:	1b80      	subs	r0, r0, r6
 800ad20:	6060      	str	r0, [r4, #4]
 800ad22:	6863      	ldr	r3, [r4, #4]
 800ad24:	6123      	str	r3, [r4, #16]
 800ad26:	2300      	movs	r3, #0
 800ad28:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800ad2c:	e7aa      	b.n	800ac84 <_printf_i+0x148>
 800ad2e:	6923      	ldr	r3, [r4, #16]
 800ad30:	4632      	mov	r2, r6
 800ad32:	4649      	mov	r1, r9
 800ad34:	4640      	mov	r0, r8
 800ad36:	47d0      	blx	sl
 800ad38:	3001      	adds	r0, #1
 800ad3a:	d0ad      	beq.n	800ac98 <_printf_i+0x15c>
 800ad3c:	6823      	ldr	r3, [r4, #0]
 800ad3e:	079b      	lsls	r3, r3, #30
 800ad40:	d413      	bmi.n	800ad6a <_printf_i+0x22e>
 800ad42:	68e0      	ldr	r0, [r4, #12]
 800ad44:	9b03      	ldr	r3, [sp, #12]
 800ad46:	4298      	cmp	r0, r3
 800ad48:	bfb8      	it	lt
 800ad4a:	4618      	movlt	r0, r3
 800ad4c:	e7a6      	b.n	800ac9c <_printf_i+0x160>
 800ad4e:	2301      	movs	r3, #1
 800ad50:	4632      	mov	r2, r6
 800ad52:	4649      	mov	r1, r9
 800ad54:	4640      	mov	r0, r8
 800ad56:	47d0      	blx	sl
 800ad58:	3001      	adds	r0, #1
 800ad5a:	d09d      	beq.n	800ac98 <_printf_i+0x15c>
 800ad5c:	3501      	adds	r5, #1
 800ad5e:	68e3      	ldr	r3, [r4, #12]
 800ad60:	9903      	ldr	r1, [sp, #12]
 800ad62:	1a5b      	subs	r3, r3, r1
 800ad64:	42ab      	cmp	r3, r5
 800ad66:	dcf2      	bgt.n	800ad4e <_printf_i+0x212>
 800ad68:	e7eb      	b.n	800ad42 <_printf_i+0x206>
 800ad6a:	2500      	movs	r5, #0
 800ad6c:	f104 0619 	add.w	r6, r4, #25
 800ad70:	e7f5      	b.n	800ad5e <_printf_i+0x222>
 800ad72:	bf00      	nop
 800ad74:	0800ce4a 	.word	0x0800ce4a
 800ad78:	0800ce5b 	.word	0x0800ce5b

0800ad7c <std>:
 800ad7c:	2300      	movs	r3, #0
 800ad7e:	b510      	push	{r4, lr}
 800ad80:	4604      	mov	r4, r0
 800ad82:	e9c0 3300 	strd	r3, r3, [r0]
 800ad86:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800ad8a:	6083      	str	r3, [r0, #8]
 800ad8c:	8181      	strh	r1, [r0, #12]
 800ad8e:	6643      	str	r3, [r0, #100]	@ 0x64
 800ad90:	81c2      	strh	r2, [r0, #14]
 800ad92:	6183      	str	r3, [r0, #24]
 800ad94:	4619      	mov	r1, r3
 800ad96:	2208      	movs	r2, #8
 800ad98:	305c      	adds	r0, #92	@ 0x5c
 800ad9a:	f000 f8f4 	bl	800af86 <memset>
 800ad9e:	4b0d      	ldr	r3, [pc, #52]	@ (800add4 <std+0x58>)
 800ada0:	6263      	str	r3, [r4, #36]	@ 0x24
 800ada2:	4b0d      	ldr	r3, [pc, #52]	@ (800add8 <std+0x5c>)
 800ada4:	62a3      	str	r3, [r4, #40]	@ 0x28
 800ada6:	4b0d      	ldr	r3, [pc, #52]	@ (800addc <std+0x60>)
 800ada8:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800adaa:	4b0d      	ldr	r3, [pc, #52]	@ (800ade0 <std+0x64>)
 800adac:	6323      	str	r3, [r4, #48]	@ 0x30
 800adae:	4b0d      	ldr	r3, [pc, #52]	@ (800ade4 <std+0x68>)
 800adb0:	6224      	str	r4, [r4, #32]
 800adb2:	429c      	cmp	r4, r3
 800adb4:	d006      	beq.n	800adc4 <std+0x48>
 800adb6:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800adba:	4294      	cmp	r4, r2
 800adbc:	d002      	beq.n	800adc4 <std+0x48>
 800adbe:	33d0      	adds	r3, #208	@ 0xd0
 800adc0:	429c      	cmp	r4, r3
 800adc2:	d105      	bne.n	800add0 <std+0x54>
 800adc4:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800adc8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800adcc:	f000 b958 	b.w	800b080 <__retarget_lock_init_recursive>
 800add0:	bd10      	pop	{r4, pc}
 800add2:	bf00      	nop
 800add4:	0800af01 	.word	0x0800af01
 800add8:	0800af23 	.word	0x0800af23
 800addc:	0800af5b 	.word	0x0800af5b
 800ade0:	0800af7f 	.word	0x0800af7f
 800ade4:	200018b4 	.word	0x200018b4

0800ade8 <stdio_exit_handler>:
 800ade8:	4a02      	ldr	r2, [pc, #8]	@ (800adf4 <stdio_exit_handler+0xc>)
 800adea:	4903      	ldr	r1, [pc, #12]	@ (800adf8 <stdio_exit_handler+0x10>)
 800adec:	4803      	ldr	r0, [pc, #12]	@ (800adfc <stdio_exit_handler+0x14>)
 800adee:	f000 b869 	b.w	800aec4 <_fwalk_sglue>
 800adf2:	bf00      	nop
 800adf4:	20000194 	.word	0x20000194
 800adf8:	0800c72d 	.word	0x0800c72d
 800adfc:	200001a4 	.word	0x200001a4

0800ae00 <cleanup_stdio>:
 800ae00:	6841      	ldr	r1, [r0, #4]
 800ae02:	4b0c      	ldr	r3, [pc, #48]	@ (800ae34 <cleanup_stdio+0x34>)
 800ae04:	4299      	cmp	r1, r3
 800ae06:	b510      	push	{r4, lr}
 800ae08:	4604      	mov	r4, r0
 800ae0a:	d001      	beq.n	800ae10 <cleanup_stdio+0x10>
 800ae0c:	f001 fc8e 	bl	800c72c <_fflush_r>
 800ae10:	68a1      	ldr	r1, [r4, #8]
 800ae12:	4b09      	ldr	r3, [pc, #36]	@ (800ae38 <cleanup_stdio+0x38>)
 800ae14:	4299      	cmp	r1, r3
 800ae16:	d002      	beq.n	800ae1e <cleanup_stdio+0x1e>
 800ae18:	4620      	mov	r0, r4
 800ae1a:	f001 fc87 	bl	800c72c <_fflush_r>
 800ae1e:	68e1      	ldr	r1, [r4, #12]
 800ae20:	4b06      	ldr	r3, [pc, #24]	@ (800ae3c <cleanup_stdio+0x3c>)
 800ae22:	4299      	cmp	r1, r3
 800ae24:	d004      	beq.n	800ae30 <cleanup_stdio+0x30>
 800ae26:	4620      	mov	r0, r4
 800ae28:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800ae2c:	f001 bc7e 	b.w	800c72c <_fflush_r>
 800ae30:	bd10      	pop	{r4, pc}
 800ae32:	bf00      	nop
 800ae34:	200018b4 	.word	0x200018b4
 800ae38:	2000191c 	.word	0x2000191c
 800ae3c:	20001984 	.word	0x20001984

0800ae40 <global_stdio_init.part.0>:
 800ae40:	b510      	push	{r4, lr}
 800ae42:	4b0b      	ldr	r3, [pc, #44]	@ (800ae70 <global_stdio_init.part.0+0x30>)
 800ae44:	4c0b      	ldr	r4, [pc, #44]	@ (800ae74 <global_stdio_init.part.0+0x34>)
 800ae46:	4a0c      	ldr	r2, [pc, #48]	@ (800ae78 <global_stdio_init.part.0+0x38>)
 800ae48:	601a      	str	r2, [r3, #0]
 800ae4a:	4620      	mov	r0, r4
 800ae4c:	2200      	movs	r2, #0
 800ae4e:	2104      	movs	r1, #4
 800ae50:	f7ff ff94 	bl	800ad7c <std>
 800ae54:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800ae58:	2201      	movs	r2, #1
 800ae5a:	2109      	movs	r1, #9
 800ae5c:	f7ff ff8e 	bl	800ad7c <std>
 800ae60:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800ae64:	2202      	movs	r2, #2
 800ae66:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800ae6a:	2112      	movs	r1, #18
 800ae6c:	f7ff bf86 	b.w	800ad7c <std>
 800ae70:	200019ec 	.word	0x200019ec
 800ae74:	200018b4 	.word	0x200018b4
 800ae78:	0800ade9 	.word	0x0800ade9

0800ae7c <__sfp_lock_acquire>:
 800ae7c:	4801      	ldr	r0, [pc, #4]	@ (800ae84 <__sfp_lock_acquire+0x8>)
 800ae7e:	f000 b900 	b.w	800b082 <__retarget_lock_acquire_recursive>
 800ae82:	bf00      	nop
 800ae84:	200019f5 	.word	0x200019f5

0800ae88 <__sfp_lock_release>:
 800ae88:	4801      	ldr	r0, [pc, #4]	@ (800ae90 <__sfp_lock_release+0x8>)
 800ae8a:	f000 b8fb 	b.w	800b084 <__retarget_lock_release_recursive>
 800ae8e:	bf00      	nop
 800ae90:	200019f5 	.word	0x200019f5

0800ae94 <__sinit>:
 800ae94:	b510      	push	{r4, lr}
 800ae96:	4604      	mov	r4, r0
 800ae98:	f7ff fff0 	bl	800ae7c <__sfp_lock_acquire>
 800ae9c:	6a23      	ldr	r3, [r4, #32]
 800ae9e:	b11b      	cbz	r3, 800aea8 <__sinit+0x14>
 800aea0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800aea4:	f7ff bff0 	b.w	800ae88 <__sfp_lock_release>
 800aea8:	4b04      	ldr	r3, [pc, #16]	@ (800aebc <__sinit+0x28>)
 800aeaa:	6223      	str	r3, [r4, #32]
 800aeac:	4b04      	ldr	r3, [pc, #16]	@ (800aec0 <__sinit+0x2c>)
 800aeae:	681b      	ldr	r3, [r3, #0]
 800aeb0:	2b00      	cmp	r3, #0
 800aeb2:	d1f5      	bne.n	800aea0 <__sinit+0xc>
 800aeb4:	f7ff ffc4 	bl	800ae40 <global_stdio_init.part.0>
 800aeb8:	e7f2      	b.n	800aea0 <__sinit+0xc>
 800aeba:	bf00      	nop
 800aebc:	0800ae01 	.word	0x0800ae01
 800aec0:	200019ec 	.word	0x200019ec

0800aec4 <_fwalk_sglue>:
 800aec4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800aec8:	4607      	mov	r7, r0
 800aeca:	4688      	mov	r8, r1
 800aecc:	4614      	mov	r4, r2
 800aece:	2600      	movs	r6, #0
 800aed0:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800aed4:	f1b9 0901 	subs.w	r9, r9, #1
 800aed8:	d505      	bpl.n	800aee6 <_fwalk_sglue+0x22>
 800aeda:	6824      	ldr	r4, [r4, #0]
 800aedc:	2c00      	cmp	r4, #0
 800aede:	d1f7      	bne.n	800aed0 <_fwalk_sglue+0xc>
 800aee0:	4630      	mov	r0, r6
 800aee2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800aee6:	89ab      	ldrh	r3, [r5, #12]
 800aee8:	2b01      	cmp	r3, #1
 800aeea:	d907      	bls.n	800aefc <_fwalk_sglue+0x38>
 800aeec:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800aef0:	3301      	adds	r3, #1
 800aef2:	d003      	beq.n	800aefc <_fwalk_sglue+0x38>
 800aef4:	4629      	mov	r1, r5
 800aef6:	4638      	mov	r0, r7
 800aef8:	47c0      	blx	r8
 800aefa:	4306      	orrs	r6, r0
 800aefc:	3568      	adds	r5, #104	@ 0x68
 800aefe:	e7e9      	b.n	800aed4 <_fwalk_sglue+0x10>

0800af00 <__sread>:
 800af00:	b510      	push	{r4, lr}
 800af02:	460c      	mov	r4, r1
 800af04:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800af08:	f000 f86c 	bl	800afe4 <_read_r>
 800af0c:	2800      	cmp	r0, #0
 800af0e:	bfab      	itete	ge
 800af10:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800af12:	89a3      	ldrhlt	r3, [r4, #12]
 800af14:	181b      	addge	r3, r3, r0
 800af16:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800af1a:	bfac      	ite	ge
 800af1c:	6563      	strge	r3, [r4, #84]	@ 0x54
 800af1e:	81a3      	strhlt	r3, [r4, #12]
 800af20:	bd10      	pop	{r4, pc}

0800af22 <__swrite>:
 800af22:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800af26:	461f      	mov	r7, r3
 800af28:	898b      	ldrh	r3, [r1, #12]
 800af2a:	05db      	lsls	r3, r3, #23
 800af2c:	4605      	mov	r5, r0
 800af2e:	460c      	mov	r4, r1
 800af30:	4616      	mov	r6, r2
 800af32:	d505      	bpl.n	800af40 <__swrite+0x1e>
 800af34:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800af38:	2302      	movs	r3, #2
 800af3a:	2200      	movs	r2, #0
 800af3c:	f000 f840 	bl	800afc0 <_lseek_r>
 800af40:	89a3      	ldrh	r3, [r4, #12]
 800af42:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800af46:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800af4a:	81a3      	strh	r3, [r4, #12]
 800af4c:	4632      	mov	r2, r6
 800af4e:	463b      	mov	r3, r7
 800af50:	4628      	mov	r0, r5
 800af52:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800af56:	f000 b857 	b.w	800b008 <_write_r>

0800af5a <__sseek>:
 800af5a:	b510      	push	{r4, lr}
 800af5c:	460c      	mov	r4, r1
 800af5e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800af62:	f000 f82d 	bl	800afc0 <_lseek_r>
 800af66:	1c43      	adds	r3, r0, #1
 800af68:	89a3      	ldrh	r3, [r4, #12]
 800af6a:	bf15      	itete	ne
 800af6c:	6560      	strne	r0, [r4, #84]	@ 0x54
 800af6e:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800af72:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800af76:	81a3      	strheq	r3, [r4, #12]
 800af78:	bf18      	it	ne
 800af7a:	81a3      	strhne	r3, [r4, #12]
 800af7c:	bd10      	pop	{r4, pc}

0800af7e <__sclose>:
 800af7e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800af82:	f000 b80d 	b.w	800afa0 <_close_r>

0800af86 <memset>:
 800af86:	4402      	add	r2, r0
 800af88:	4603      	mov	r3, r0
 800af8a:	4293      	cmp	r3, r2
 800af8c:	d100      	bne.n	800af90 <memset+0xa>
 800af8e:	4770      	bx	lr
 800af90:	f803 1b01 	strb.w	r1, [r3], #1
 800af94:	e7f9      	b.n	800af8a <memset+0x4>
	...

0800af98 <_localeconv_r>:
 800af98:	4800      	ldr	r0, [pc, #0]	@ (800af9c <_localeconv_r+0x4>)
 800af9a:	4770      	bx	lr
 800af9c:	200002e0 	.word	0x200002e0

0800afa0 <_close_r>:
 800afa0:	b538      	push	{r3, r4, r5, lr}
 800afa2:	4d06      	ldr	r5, [pc, #24]	@ (800afbc <_close_r+0x1c>)
 800afa4:	2300      	movs	r3, #0
 800afa6:	4604      	mov	r4, r0
 800afa8:	4608      	mov	r0, r1
 800afaa:	602b      	str	r3, [r5, #0]
 800afac:	f7f7 fae0 	bl	8002570 <_close>
 800afb0:	1c43      	adds	r3, r0, #1
 800afb2:	d102      	bne.n	800afba <_close_r+0x1a>
 800afb4:	682b      	ldr	r3, [r5, #0]
 800afb6:	b103      	cbz	r3, 800afba <_close_r+0x1a>
 800afb8:	6023      	str	r3, [r4, #0]
 800afba:	bd38      	pop	{r3, r4, r5, pc}
 800afbc:	200019f0 	.word	0x200019f0

0800afc0 <_lseek_r>:
 800afc0:	b538      	push	{r3, r4, r5, lr}
 800afc2:	4d07      	ldr	r5, [pc, #28]	@ (800afe0 <_lseek_r+0x20>)
 800afc4:	4604      	mov	r4, r0
 800afc6:	4608      	mov	r0, r1
 800afc8:	4611      	mov	r1, r2
 800afca:	2200      	movs	r2, #0
 800afcc:	602a      	str	r2, [r5, #0]
 800afce:	461a      	mov	r2, r3
 800afd0:	f7f7 faf5 	bl	80025be <_lseek>
 800afd4:	1c43      	adds	r3, r0, #1
 800afd6:	d102      	bne.n	800afde <_lseek_r+0x1e>
 800afd8:	682b      	ldr	r3, [r5, #0]
 800afda:	b103      	cbz	r3, 800afde <_lseek_r+0x1e>
 800afdc:	6023      	str	r3, [r4, #0]
 800afde:	bd38      	pop	{r3, r4, r5, pc}
 800afe0:	200019f0 	.word	0x200019f0

0800afe4 <_read_r>:
 800afe4:	b538      	push	{r3, r4, r5, lr}
 800afe6:	4d07      	ldr	r5, [pc, #28]	@ (800b004 <_read_r+0x20>)
 800afe8:	4604      	mov	r4, r0
 800afea:	4608      	mov	r0, r1
 800afec:	4611      	mov	r1, r2
 800afee:	2200      	movs	r2, #0
 800aff0:	602a      	str	r2, [r5, #0]
 800aff2:	461a      	mov	r2, r3
 800aff4:	f7f7 fa83 	bl	80024fe <_read>
 800aff8:	1c43      	adds	r3, r0, #1
 800affa:	d102      	bne.n	800b002 <_read_r+0x1e>
 800affc:	682b      	ldr	r3, [r5, #0]
 800affe:	b103      	cbz	r3, 800b002 <_read_r+0x1e>
 800b000:	6023      	str	r3, [r4, #0]
 800b002:	bd38      	pop	{r3, r4, r5, pc}
 800b004:	200019f0 	.word	0x200019f0

0800b008 <_write_r>:
 800b008:	b538      	push	{r3, r4, r5, lr}
 800b00a:	4d07      	ldr	r5, [pc, #28]	@ (800b028 <_write_r+0x20>)
 800b00c:	4604      	mov	r4, r0
 800b00e:	4608      	mov	r0, r1
 800b010:	4611      	mov	r1, r2
 800b012:	2200      	movs	r2, #0
 800b014:	602a      	str	r2, [r5, #0]
 800b016:	461a      	mov	r2, r3
 800b018:	f7f7 fa8e 	bl	8002538 <_write>
 800b01c:	1c43      	adds	r3, r0, #1
 800b01e:	d102      	bne.n	800b026 <_write_r+0x1e>
 800b020:	682b      	ldr	r3, [r5, #0]
 800b022:	b103      	cbz	r3, 800b026 <_write_r+0x1e>
 800b024:	6023      	str	r3, [r4, #0]
 800b026:	bd38      	pop	{r3, r4, r5, pc}
 800b028:	200019f0 	.word	0x200019f0

0800b02c <__errno>:
 800b02c:	4b01      	ldr	r3, [pc, #4]	@ (800b034 <__errno+0x8>)
 800b02e:	6818      	ldr	r0, [r3, #0]
 800b030:	4770      	bx	lr
 800b032:	bf00      	nop
 800b034:	200001a0 	.word	0x200001a0

0800b038 <__libc_init_array>:
 800b038:	b570      	push	{r4, r5, r6, lr}
 800b03a:	4d0d      	ldr	r5, [pc, #52]	@ (800b070 <__libc_init_array+0x38>)
 800b03c:	4c0d      	ldr	r4, [pc, #52]	@ (800b074 <__libc_init_array+0x3c>)
 800b03e:	1b64      	subs	r4, r4, r5
 800b040:	10a4      	asrs	r4, r4, #2
 800b042:	2600      	movs	r6, #0
 800b044:	42a6      	cmp	r6, r4
 800b046:	d109      	bne.n	800b05c <__libc_init_array+0x24>
 800b048:	4d0b      	ldr	r5, [pc, #44]	@ (800b078 <__libc_init_array+0x40>)
 800b04a:	4c0c      	ldr	r4, [pc, #48]	@ (800b07c <__libc_init_array+0x44>)
 800b04c:	f001 febc 	bl	800cdc8 <_init>
 800b050:	1b64      	subs	r4, r4, r5
 800b052:	10a4      	asrs	r4, r4, #2
 800b054:	2600      	movs	r6, #0
 800b056:	42a6      	cmp	r6, r4
 800b058:	d105      	bne.n	800b066 <__libc_init_array+0x2e>
 800b05a:	bd70      	pop	{r4, r5, r6, pc}
 800b05c:	f855 3b04 	ldr.w	r3, [r5], #4
 800b060:	4798      	blx	r3
 800b062:	3601      	adds	r6, #1
 800b064:	e7ee      	b.n	800b044 <__libc_init_array+0xc>
 800b066:	f855 3b04 	ldr.w	r3, [r5], #4
 800b06a:	4798      	blx	r3
 800b06c:	3601      	adds	r6, #1
 800b06e:	e7f2      	b.n	800b056 <__libc_init_array+0x1e>
 800b070:	0800d1b0 	.word	0x0800d1b0
 800b074:	0800d1b0 	.word	0x0800d1b0
 800b078:	0800d1b0 	.word	0x0800d1b0
 800b07c:	0800d1b4 	.word	0x0800d1b4

0800b080 <__retarget_lock_init_recursive>:
 800b080:	4770      	bx	lr

0800b082 <__retarget_lock_acquire_recursive>:
 800b082:	4770      	bx	lr

0800b084 <__retarget_lock_release_recursive>:
 800b084:	4770      	bx	lr

0800b086 <quorem>:
 800b086:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b08a:	6903      	ldr	r3, [r0, #16]
 800b08c:	690c      	ldr	r4, [r1, #16]
 800b08e:	42a3      	cmp	r3, r4
 800b090:	4607      	mov	r7, r0
 800b092:	db7e      	blt.n	800b192 <quorem+0x10c>
 800b094:	3c01      	subs	r4, #1
 800b096:	f101 0814 	add.w	r8, r1, #20
 800b09a:	00a3      	lsls	r3, r4, #2
 800b09c:	f100 0514 	add.w	r5, r0, #20
 800b0a0:	9300      	str	r3, [sp, #0]
 800b0a2:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800b0a6:	9301      	str	r3, [sp, #4]
 800b0a8:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800b0ac:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800b0b0:	3301      	adds	r3, #1
 800b0b2:	429a      	cmp	r2, r3
 800b0b4:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800b0b8:	fbb2 f6f3 	udiv	r6, r2, r3
 800b0bc:	d32e      	bcc.n	800b11c <quorem+0x96>
 800b0be:	f04f 0a00 	mov.w	sl, #0
 800b0c2:	46c4      	mov	ip, r8
 800b0c4:	46ae      	mov	lr, r5
 800b0c6:	46d3      	mov	fp, sl
 800b0c8:	f85c 3b04 	ldr.w	r3, [ip], #4
 800b0cc:	b298      	uxth	r0, r3
 800b0ce:	fb06 a000 	mla	r0, r6, r0, sl
 800b0d2:	0c02      	lsrs	r2, r0, #16
 800b0d4:	0c1b      	lsrs	r3, r3, #16
 800b0d6:	fb06 2303 	mla	r3, r6, r3, r2
 800b0da:	f8de 2000 	ldr.w	r2, [lr]
 800b0de:	b280      	uxth	r0, r0
 800b0e0:	b292      	uxth	r2, r2
 800b0e2:	1a12      	subs	r2, r2, r0
 800b0e4:	445a      	add	r2, fp
 800b0e6:	f8de 0000 	ldr.w	r0, [lr]
 800b0ea:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800b0ee:	b29b      	uxth	r3, r3
 800b0f0:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 800b0f4:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 800b0f8:	b292      	uxth	r2, r2
 800b0fa:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 800b0fe:	45e1      	cmp	r9, ip
 800b100:	f84e 2b04 	str.w	r2, [lr], #4
 800b104:	ea4f 4b23 	mov.w	fp, r3, asr #16
 800b108:	d2de      	bcs.n	800b0c8 <quorem+0x42>
 800b10a:	9b00      	ldr	r3, [sp, #0]
 800b10c:	58eb      	ldr	r3, [r5, r3]
 800b10e:	b92b      	cbnz	r3, 800b11c <quorem+0x96>
 800b110:	9b01      	ldr	r3, [sp, #4]
 800b112:	3b04      	subs	r3, #4
 800b114:	429d      	cmp	r5, r3
 800b116:	461a      	mov	r2, r3
 800b118:	d32f      	bcc.n	800b17a <quorem+0xf4>
 800b11a:	613c      	str	r4, [r7, #16]
 800b11c:	4638      	mov	r0, r7
 800b11e:	f001 f979 	bl	800c414 <__mcmp>
 800b122:	2800      	cmp	r0, #0
 800b124:	db25      	blt.n	800b172 <quorem+0xec>
 800b126:	4629      	mov	r1, r5
 800b128:	2000      	movs	r0, #0
 800b12a:	f858 2b04 	ldr.w	r2, [r8], #4
 800b12e:	f8d1 c000 	ldr.w	ip, [r1]
 800b132:	fa1f fe82 	uxth.w	lr, r2
 800b136:	fa1f f38c 	uxth.w	r3, ip
 800b13a:	eba3 030e 	sub.w	r3, r3, lr
 800b13e:	4403      	add	r3, r0
 800b140:	0c12      	lsrs	r2, r2, #16
 800b142:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 800b146:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 800b14a:	b29b      	uxth	r3, r3
 800b14c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800b150:	45c1      	cmp	r9, r8
 800b152:	f841 3b04 	str.w	r3, [r1], #4
 800b156:	ea4f 4022 	mov.w	r0, r2, asr #16
 800b15a:	d2e6      	bcs.n	800b12a <quorem+0xa4>
 800b15c:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800b160:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800b164:	b922      	cbnz	r2, 800b170 <quorem+0xea>
 800b166:	3b04      	subs	r3, #4
 800b168:	429d      	cmp	r5, r3
 800b16a:	461a      	mov	r2, r3
 800b16c:	d30b      	bcc.n	800b186 <quorem+0x100>
 800b16e:	613c      	str	r4, [r7, #16]
 800b170:	3601      	adds	r6, #1
 800b172:	4630      	mov	r0, r6
 800b174:	b003      	add	sp, #12
 800b176:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b17a:	6812      	ldr	r2, [r2, #0]
 800b17c:	3b04      	subs	r3, #4
 800b17e:	2a00      	cmp	r2, #0
 800b180:	d1cb      	bne.n	800b11a <quorem+0x94>
 800b182:	3c01      	subs	r4, #1
 800b184:	e7c6      	b.n	800b114 <quorem+0x8e>
 800b186:	6812      	ldr	r2, [r2, #0]
 800b188:	3b04      	subs	r3, #4
 800b18a:	2a00      	cmp	r2, #0
 800b18c:	d1ef      	bne.n	800b16e <quorem+0xe8>
 800b18e:	3c01      	subs	r4, #1
 800b190:	e7ea      	b.n	800b168 <quorem+0xe2>
 800b192:	2000      	movs	r0, #0
 800b194:	e7ee      	b.n	800b174 <quorem+0xee>
	...

0800b198 <_dtoa_r>:
 800b198:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b19c:	69c7      	ldr	r7, [r0, #28]
 800b19e:	b099      	sub	sp, #100	@ 0x64
 800b1a0:	ed8d 0b02 	vstr	d0, [sp, #8]
 800b1a4:	ec55 4b10 	vmov	r4, r5, d0
 800b1a8:	9e22      	ldr	r6, [sp, #136]	@ 0x88
 800b1aa:	9109      	str	r1, [sp, #36]	@ 0x24
 800b1ac:	4683      	mov	fp, r0
 800b1ae:	920e      	str	r2, [sp, #56]	@ 0x38
 800b1b0:	9313      	str	r3, [sp, #76]	@ 0x4c
 800b1b2:	b97f      	cbnz	r7, 800b1d4 <_dtoa_r+0x3c>
 800b1b4:	2010      	movs	r0, #16
 800b1b6:	f000 fdfd 	bl	800bdb4 <malloc>
 800b1ba:	4602      	mov	r2, r0
 800b1bc:	f8cb 001c 	str.w	r0, [fp, #28]
 800b1c0:	b920      	cbnz	r0, 800b1cc <_dtoa_r+0x34>
 800b1c2:	4ba7      	ldr	r3, [pc, #668]	@ (800b460 <_dtoa_r+0x2c8>)
 800b1c4:	21ef      	movs	r1, #239	@ 0xef
 800b1c6:	48a7      	ldr	r0, [pc, #668]	@ (800b464 <_dtoa_r+0x2cc>)
 800b1c8:	f001 faf6 	bl	800c7b8 <__assert_func>
 800b1cc:	e9c0 7701 	strd	r7, r7, [r0, #4]
 800b1d0:	6007      	str	r7, [r0, #0]
 800b1d2:	60c7      	str	r7, [r0, #12]
 800b1d4:	f8db 301c 	ldr.w	r3, [fp, #28]
 800b1d8:	6819      	ldr	r1, [r3, #0]
 800b1da:	b159      	cbz	r1, 800b1f4 <_dtoa_r+0x5c>
 800b1dc:	685a      	ldr	r2, [r3, #4]
 800b1de:	604a      	str	r2, [r1, #4]
 800b1e0:	2301      	movs	r3, #1
 800b1e2:	4093      	lsls	r3, r2
 800b1e4:	608b      	str	r3, [r1, #8]
 800b1e6:	4658      	mov	r0, fp
 800b1e8:	f000 feda 	bl	800bfa0 <_Bfree>
 800b1ec:	f8db 301c 	ldr.w	r3, [fp, #28]
 800b1f0:	2200      	movs	r2, #0
 800b1f2:	601a      	str	r2, [r3, #0]
 800b1f4:	1e2b      	subs	r3, r5, #0
 800b1f6:	bfb9      	ittee	lt
 800b1f8:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 800b1fc:	9303      	strlt	r3, [sp, #12]
 800b1fe:	2300      	movge	r3, #0
 800b200:	6033      	strge	r3, [r6, #0]
 800b202:	9f03      	ldr	r7, [sp, #12]
 800b204:	4b98      	ldr	r3, [pc, #608]	@ (800b468 <_dtoa_r+0x2d0>)
 800b206:	bfbc      	itt	lt
 800b208:	2201      	movlt	r2, #1
 800b20a:	6032      	strlt	r2, [r6, #0]
 800b20c:	43bb      	bics	r3, r7
 800b20e:	d112      	bne.n	800b236 <_dtoa_r+0x9e>
 800b210:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 800b212:	f242 730f 	movw	r3, #9999	@ 0x270f
 800b216:	6013      	str	r3, [r2, #0]
 800b218:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800b21c:	4323      	orrs	r3, r4
 800b21e:	f000 854d 	beq.w	800bcbc <_dtoa_r+0xb24>
 800b222:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800b224:	f8df a254 	ldr.w	sl, [pc, #596]	@ 800b47c <_dtoa_r+0x2e4>
 800b228:	2b00      	cmp	r3, #0
 800b22a:	f000 854f 	beq.w	800bccc <_dtoa_r+0xb34>
 800b22e:	f10a 0303 	add.w	r3, sl, #3
 800b232:	f000 bd49 	b.w	800bcc8 <_dtoa_r+0xb30>
 800b236:	ed9d 7b02 	vldr	d7, [sp, #8]
 800b23a:	2200      	movs	r2, #0
 800b23c:	ec51 0b17 	vmov	r0, r1, d7
 800b240:	2300      	movs	r3, #0
 800b242:	ed8d 7b0c 	vstr	d7, [sp, #48]	@ 0x30
 800b246:	f7f5 fc67 	bl	8000b18 <__aeabi_dcmpeq>
 800b24a:	4680      	mov	r8, r0
 800b24c:	b158      	cbz	r0, 800b266 <_dtoa_r+0xce>
 800b24e:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 800b250:	2301      	movs	r3, #1
 800b252:	6013      	str	r3, [r2, #0]
 800b254:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800b256:	b113      	cbz	r3, 800b25e <_dtoa_r+0xc6>
 800b258:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 800b25a:	4b84      	ldr	r3, [pc, #528]	@ (800b46c <_dtoa_r+0x2d4>)
 800b25c:	6013      	str	r3, [r2, #0]
 800b25e:	f8df a220 	ldr.w	sl, [pc, #544]	@ 800b480 <_dtoa_r+0x2e8>
 800b262:	f000 bd33 	b.w	800bccc <_dtoa_r+0xb34>
 800b266:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 800b26a:	aa16      	add	r2, sp, #88	@ 0x58
 800b26c:	a917      	add	r1, sp, #92	@ 0x5c
 800b26e:	4658      	mov	r0, fp
 800b270:	f001 f980 	bl	800c574 <__d2b>
 800b274:	f3c7 560a 	ubfx	r6, r7, #20, #11
 800b278:	4681      	mov	r9, r0
 800b27a:	2e00      	cmp	r6, #0
 800b27c:	d077      	beq.n	800b36e <_dtoa_r+0x1d6>
 800b27e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800b280:	f8cd 8050 	str.w	r8, [sp, #80]	@ 0x50
 800b284:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800b288:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800b28c:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 800b290:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 800b294:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 800b298:	4619      	mov	r1, r3
 800b29a:	2200      	movs	r2, #0
 800b29c:	4b74      	ldr	r3, [pc, #464]	@ (800b470 <_dtoa_r+0x2d8>)
 800b29e:	f7f5 f81b 	bl	80002d8 <__aeabi_dsub>
 800b2a2:	a369      	add	r3, pc, #420	@ (adr r3, 800b448 <_dtoa_r+0x2b0>)
 800b2a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b2a8:	f7f5 f9ce 	bl	8000648 <__aeabi_dmul>
 800b2ac:	a368      	add	r3, pc, #416	@ (adr r3, 800b450 <_dtoa_r+0x2b8>)
 800b2ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b2b2:	f7f5 f813 	bl	80002dc <__adddf3>
 800b2b6:	4604      	mov	r4, r0
 800b2b8:	4630      	mov	r0, r6
 800b2ba:	460d      	mov	r5, r1
 800b2bc:	f7f5 f95a 	bl	8000574 <__aeabi_i2d>
 800b2c0:	a365      	add	r3, pc, #404	@ (adr r3, 800b458 <_dtoa_r+0x2c0>)
 800b2c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b2c6:	f7f5 f9bf 	bl	8000648 <__aeabi_dmul>
 800b2ca:	4602      	mov	r2, r0
 800b2cc:	460b      	mov	r3, r1
 800b2ce:	4620      	mov	r0, r4
 800b2d0:	4629      	mov	r1, r5
 800b2d2:	f7f5 f803 	bl	80002dc <__adddf3>
 800b2d6:	4604      	mov	r4, r0
 800b2d8:	460d      	mov	r5, r1
 800b2da:	f7f5 fc65 	bl	8000ba8 <__aeabi_d2iz>
 800b2de:	2200      	movs	r2, #0
 800b2e0:	4607      	mov	r7, r0
 800b2e2:	2300      	movs	r3, #0
 800b2e4:	4620      	mov	r0, r4
 800b2e6:	4629      	mov	r1, r5
 800b2e8:	f7f5 fc20 	bl	8000b2c <__aeabi_dcmplt>
 800b2ec:	b140      	cbz	r0, 800b300 <_dtoa_r+0x168>
 800b2ee:	4638      	mov	r0, r7
 800b2f0:	f7f5 f940 	bl	8000574 <__aeabi_i2d>
 800b2f4:	4622      	mov	r2, r4
 800b2f6:	462b      	mov	r3, r5
 800b2f8:	f7f5 fc0e 	bl	8000b18 <__aeabi_dcmpeq>
 800b2fc:	b900      	cbnz	r0, 800b300 <_dtoa_r+0x168>
 800b2fe:	3f01      	subs	r7, #1
 800b300:	2f16      	cmp	r7, #22
 800b302:	d851      	bhi.n	800b3a8 <_dtoa_r+0x210>
 800b304:	4b5b      	ldr	r3, [pc, #364]	@ (800b474 <_dtoa_r+0x2dc>)
 800b306:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800b30a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b30e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800b312:	f7f5 fc0b 	bl	8000b2c <__aeabi_dcmplt>
 800b316:	2800      	cmp	r0, #0
 800b318:	d048      	beq.n	800b3ac <_dtoa_r+0x214>
 800b31a:	3f01      	subs	r7, #1
 800b31c:	2300      	movs	r3, #0
 800b31e:	9312      	str	r3, [sp, #72]	@ 0x48
 800b320:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 800b322:	1b9b      	subs	r3, r3, r6
 800b324:	1e5a      	subs	r2, r3, #1
 800b326:	bf44      	itt	mi
 800b328:	f1c3 0801 	rsbmi	r8, r3, #1
 800b32c:	2300      	movmi	r3, #0
 800b32e:	9208      	str	r2, [sp, #32]
 800b330:	bf54      	ite	pl
 800b332:	f04f 0800 	movpl.w	r8, #0
 800b336:	9308      	strmi	r3, [sp, #32]
 800b338:	2f00      	cmp	r7, #0
 800b33a:	db39      	blt.n	800b3b0 <_dtoa_r+0x218>
 800b33c:	9b08      	ldr	r3, [sp, #32]
 800b33e:	970f      	str	r7, [sp, #60]	@ 0x3c
 800b340:	443b      	add	r3, r7
 800b342:	9308      	str	r3, [sp, #32]
 800b344:	2300      	movs	r3, #0
 800b346:	930a      	str	r3, [sp, #40]	@ 0x28
 800b348:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b34a:	2b09      	cmp	r3, #9
 800b34c:	d864      	bhi.n	800b418 <_dtoa_r+0x280>
 800b34e:	2b05      	cmp	r3, #5
 800b350:	bfc4      	itt	gt
 800b352:	3b04      	subgt	r3, #4
 800b354:	9309      	strgt	r3, [sp, #36]	@ 0x24
 800b356:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b358:	f1a3 0302 	sub.w	r3, r3, #2
 800b35c:	bfcc      	ite	gt
 800b35e:	2400      	movgt	r4, #0
 800b360:	2401      	movle	r4, #1
 800b362:	2b03      	cmp	r3, #3
 800b364:	d863      	bhi.n	800b42e <_dtoa_r+0x296>
 800b366:	e8df f003 	tbb	[pc, r3]
 800b36a:	372a      	.short	0x372a
 800b36c:	5535      	.short	0x5535
 800b36e:	e9dd 6316 	ldrd	r6, r3, [sp, #88]	@ 0x58
 800b372:	441e      	add	r6, r3
 800b374:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 800b378:	2b20      	cmp	r3, #32
 800b37a:	bfc1      	itttt	gt
 800b37c:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 800b380:	409f      	lslgt	r7, r3
 800b382:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 800b386:	fa24 f303 	lsrgt.w	r3, r4, r3
 800b38a:	bfd6      	itet	le
 800b38c:	f1c3 0320 	rsble	r3, r3, #32
 800b390:	ea47 0003 	orrgt.w	r0, r7, r3
 800b394:	fa04 f003 	lslle.w	r0, r4, r3
 800b398:	f7f5 f8dc 	bl	8000554 <__aeabi_ui2d>
 800b39c:	2201      	movs	r2, #1
 800b39e:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 800b3a2:	3e01      	subs	r6, #1
 800b3a4:	9214      	str	r2, [sp, #80]	@ 0x50
 800b3a6:	e777      	b.n	800b298 <_dtoa_r+0x100>
 800b3a8:	2301      	movs	r3, #1
 800b3aa:	e7b8      	b.n	800b31e <_dtoa_r+0x186>
 800b3ac:	9012      	str	r0, [sp, #72]	@ 0x48
 800b3ae:	e7b7      	b.n	800b320 <_dtoa_r+0x188>
 800b3b0:	427b      	negs	r3, r7
 800b3b2:	930a      	str	r3, [sp, #40]	@ 0x28
 800b3b4:	2300      	movs	r3, #0
 800b3b6:	eba8 0807 	sub.w	r8, r8, r7
 800b3ba:	930f      	str	r3, [sp, #60]	@ 0x3c
 800b3bc:	e7c4      	b.n	800b348 <_dtoa_r+0x1b0>
 800b3be:	2300      	movs	r3, #0
 800b3c0:	930b      	str	r3, [sp, #44]	@ 0x2c
 800b3c2:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800b3c4:	2b00      	cmp	r3, #0
 800b3c6:	dc35      	bgt.n	800b434 <_dtoa_r+0x29c>
 800b3c8:	2301      	movs	r3, #1
 800b3ca:	9300      	str	r3, [sp, #0]
 800b3cc:	9307      	str	r3, [sp, #28]
 800b3ce:	461a      	mov	r2, r3
 800b3d0:	920e      	str	r2, [sp, #56]	@ 0x38
 800b3d2:	e00b      	b.n	800b3ec <_dtoa_r+0x254>
 800b3d4:	2301      	movs	r3, #1
 800b3d6:	e7f3      	b.n	800b3c0 <_dtoa_r+0x228>
 800b3d8:	2300      	movs	r3, #0
 800b3da:	930b      	str	r3, [sp, #44]	@ 0x2c
 800b3dc:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800b3de:	18fb      	adds	r3, r7, r3
 800b3e0:	9300      	str	r3, [sp, #0]
 800b3e2:	3301      	adds	r3, #1
 800b3e4:	2b01      	cmp	r3, #1
 800b3e6:	9307      	str	r3, [sp, #28]
 800b3e8:	bfb8      	it	lt
 800b3ea:	2301      	movlt	r3, #1
 800b3ec:	f8db 001c 	ldr.w	r0, [fp, #28]
 800b3f0:	2100      	movs	r1, #0
 800b3f2:	2204      	movs	r2, #4
 800b3f4:	f102 0514 	add.w	r5, r2, #20
 800b3f8:	429d      	cmp	r5, r3
 800b3fa:	d91f      	bls.n	800b43c <_dtoa_r+0x2a4>
 800b3fc:	6041      	str	r1, [r0, #4]
 800b3fe:	4658      	mov	r0, fp
 800b400:	f000 fd8e 	bl	800bf20 <_Balloc>
 800b404:	4682      	mov	sl, r0
 800b406:	2800      	cmp	r0, #0
 800b408:	d13c      	bne.n	800b484 <_dtoa_r+0x2ec>
 800b40a:	4b1b      	ldr	r3, [pc, #108]	@ (800b478 <_dtoa_r+0x2e0>)
 800b40c:	4602      	mov	r2, r0
 800b40e:	f240 11af 	movw	r1, #431	@ 0x1af
 800b412:	e6d8      	b.n	800b1c6 <_dtoa_r+0x2e>
 800b414:	2301      	movs	r3, #1
 800b416:	e7e0      	b.n	800b3da <_dtoa_r+0x242>
 800b418:	2401      	movs	r4, #1
 800b41a:	2300      	movs	r3, #0
 800b41c:	9309      	str	r3, [sp, #36]	@ 0x24
 800b41e:	940b      	str	r4, [sp, #44]	@ 0x2c
 800b420:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800b424:	9300      	str	r3, [sp, #0]
 800b426:	9307      	str	r3, [sp, #28]
 800b428:	2200      	movs	r2, #0
 800b42a:	2312      	movs	r3, #18
 800b42c:	e7d0      	b.n	800b3d0 <_dtoa_r+0x238>
 800b42e:	2301      	movs	r3, #1
 800b430:	930b      	str	r3, [sp, #44]	@ 0x2c
 800b432:	e7f5      	b.n	800b420 <_dtoa_r+0x288>
 800b434:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800b436:	9300      	str	r3, [sp, #0]
 800b438:	9307      	str	r3, [sp, #28]
 800b43a:	e7d7      	b.n	800b3ec <_dtoa_r+0x254>
 800b43c:	3101      	adds	r1, #1
 800b43e:	0052      	lsls	r2, r2, #1
 800b440:	e7d8      	b.n	800b3f4 <_dtoa_r+0x25c>
 800b442:	bf00      	nop
 800b444:	f3af 8000 	nop.w
 800b448:	636f4361 	.word	0x636f4361
 800b44c:	3fd287a7 	.word	0x3fd287a7
 800b450:	8b60c8b3 	.word	0x8b60c8b3
 800b454:	3fc68a28 	.word	0x3fc68a28
 800b458:	509f79fb 	.word	0x509f79fb
 800b45c:	3fd34413 	.word	0x3fd34413
 800b460:	0800ce79 	.word	0x0800ce79
 800b464:	0800ce90 	.word	0x0800ce90
 800b468:	7ff00000 	.word	0x7ff00000
 800b46c:	0800ce49 	.word	0x0800ce49
 800b470:	3ff80000 	.word	0x3ff80000
 800b474:	0800cf88 	.word	0x0800cf88
 800b478:	0800cee8 	.word	0x0800cee8
 800b47c:	0800ce75 	.word	0x0800ce75
 800b480:	0800ce48 	.word	0x0800ce48
 800b484:	f8db 301c 	ldr.w	r3, [fp, #28]
 800b488:	6018      	str	r0, [r3, #0]
 800b48a:	9b07      	ldr	r3, [sp, #28]
 800b48c:	2b0e      	cmp	r3, #14
 800b48e:	f200 80a4 	bhi.w	800b5da <_dtoa_r+0x442>
 800b492:	2c00      	cmp	r4, #0
 800b494:	f000 80a1 	beq.w	800b5da <_dtoa_r+0x442>
 800b498:	2f00      	cmp	r7, #0
 800b49a:	dd33      	ble.n	800b504 <_dtoa_r+0x36c>
 800b49c:	4bad      	ldr	r3, [pc, #692]	@ (800b754 <_dtoa_r+0x5bc>)
 800b49e:	f007 020f 	and.w	r2, r7, #15
 800b4a2:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800b4a6:	ed93 7b00 	vldr	d7, [r3]
 800b4aa:	05f8      	lsls	r0, r7, #23
 800b4ac:	ed8d 7b04 	vstr	d7, [sp, #16]
 800b4b0:	ea4f 1427 	mov.w	r4, r7, asr #4
 800b4b4:	d516      	bpl.n	800b4e4 <_dtoa_r+0x34c>
 800b4b6:	4ba8      	ldr	r3, [pc, #672]	@ (800b758 <_dtoa_r+0x5c0>)
 800b4b8:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800b4bc:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800b4c0:	f7f5 f9ec 	bl	800089c <__aeabi_ddiv>
 800b4c4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800b4c8:	f004 040f 	and.w	r4, r4, #15
 800b4cc:	2603      	movs	r6, #3
 800b4ce:	4da2      	ldr	r5, [pc, #648]	@ (800b758 <_dtoa_r+0x5c0>)
 800b4d0:	b954      	cbnz	r4, 800b4e8 <_dtoa_r+0x350>
 800b4d2:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800b4d6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800b4da:	f7f5 f9df 	bl	800089c <__aeabi_ddiv>
 800b4de:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800b4e2:	e028      	b.n	800b536 <_dtoa_r+0x39e>
 800b4e4:	2602      	movs	r6, #2
 800b4e6:	e7f2      	b.n	800b4ce <_dtoa_r+0x336>
 800b4e8:	07e1      	lsls	r1, r4, #31
 800b4ea:	d508      	bpl.n	800b4fe <_dtoa_r+0x366>
 800b4ec:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800b4f0:	e9d5 2300 	ldrd	r2, r3, [r5]
 800b4f4:	f7f5 f8a8 	bl	8000648 <__aeabi_dmul>
 800b4f8:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800b4fc:	3601      	adds	r6, #1
 800b4fe:	1064      	asrs	r4, r4, #1
 800b500:	3508      	adds	r5, #8
 800b502:	e7e5      	b.n	800b4d0 <_dtoa_r+0x338>
 800b504:	f000 80d2 	beq.w	800b6ac <_dtoa_r+0x514>
 800b508:	427c      	negs	r4, r7
 800b50a:	4b92      	ldr	r3, [pc, #584]	@ (800b754 <_dtoa_r+0x5bc>)
 800b50c:	4d92      	ldr	r5, [pc, #584]	@ (800b758 <_dtoa_r+0x5c0>)
 800b50e:	f004 020f 	and.w	r2, r4, #15
 800b512:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800b516:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b51a:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800b51e:	f7f5 f893 	bl	8000648 <__aeabi_dmul>
 800b522:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800b526:	1124      	asrs	r4, r4, #4
 800b528:	2300      	movs	r3, #0
 800b52a:	2602      	movs	r6, #2
 800b52c:	2c00      	cmp	r4, #0
 800b52e:	f040 80b2 	bne.w	800b696 <_dtoa_r+0x4fe>
 800b532:	2b00      	cmp	r3, #0
 800b534:	d1d3      	bne.n	800b4de <_dtoa_r+0x346>
 800b536:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800b538:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 800b53c:	2b00      	cmp	r3, #0
 800b53e:	f000 80b7 	beq.w	800b6b0 <_dtoa_r+0x518>
 800b542:	4b86      	ldr	r3, [pc, #536]	@ (800b75c <_dtoa_r+0x5c4>)
 800b544:	2200      	movs	r2, #0
 800b546:	4620      	mov	r0, r4
 800b548:	4629      	mov	r1, r5
 800b54a:	f7f5 faef 	bl	8000b2c <__aeabi_dcmplt>
 800b54e:	2800      	cmp	r0, #0
 800b550:	f000 80ae 	beq.w	800b6b0 <_dtoa_r+0x518>
 800b554:	9b07      	ldr	r3, [sp, #28]
 800b556:	2b00      	cmp	r3, #0
 800b558:	f000 80aa 	beq.w	800b6b0 <_dtoa_r+0x518>
 800b55c:	9b00      	ldr	r3, [sp, #0]
 800b55e:	2b00      	cmp	r3, #0
 800b560:	dd37      	ble.n	800b5d2 <_dtoa_r+0x43a>
 800b562:	1e7b      	subs	r3, r7, #1
 800b564:	9304      	str	r3, [sp, #16]
 800b566:	4620      	mov	r0, r4
 800b568:	4b7d      	ldr	r3, [pc, #500]	@ (800b760 <_dtoa_r+0x5c8>)
 800b56a:	2200      	movs	r2, #0
 800b56c:	4629      	mov	r1, r5
 800b56e:	f7f5 f86b 	bl	8000648 <__aeabi_dmul>
 800b572:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800b576:	9c00      	ldr	r4, [sp, #0]
 800b578:	3601      	adds	r6, #1
 800b57a:	4630      	mov	r0, r6
 800b57c:	f7f4 fffa 	bl	8000574 <__aeabi_i2d>
 800b580:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800b584:	f7f5 f860 	bl	8000648 <__aeabi_dmul>
 800b588:	4b76      	ldr	r3, [pc, #472]	@ (800b764 <_dtoa_r+0x5cc>)
 800b58a:	2200      	movs	r2, #0
 800b58c:	f7f4 fea6 	bl	80002dc <__adddf3>
 800b590:	4605      	mov	r5, r0
 800b592:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 800b596:	2c00      	cmp	r4, #0
 800b598:	f040 808d 	bne.w	800b6b6 <_dtoa_r+0x51e>
 800b59c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800b5a0:	4b71      	ldr	r3, [pc, #452]	@ (800b768 <_dtoa_r+0x5d0>)
 800b5a2:	2200      	movs	r2, #0
 800b5a4:	f7f4 fe98 	bl	80002d8 <__aeabi_dsub>
 800b5a8:	4602      	mov	r2, r0
 800b5aa:	460b      	mov	r3, r1
 800b5ac:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800b5b0:	462a      	mov	r2, r5
 800b5b2:	4633      	mov	r3, r6
 800b5b4:	f7f5 fad8 	bl	8000b68 <__aeabi_dcmpgt>
 800b5b8:	2800      	cmp	r0, #0
 800b5ba:	f040 828b 	bne.w	800bad4 <_dtoa_r+0x93c>
 800b5be:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800b5c2:	462a      	mov	r2, r5
 800b5c4:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 800b5c8:	f7f5 fab0 	bl	8000b2c <__aeabi_dcmplt>
 800b5cc:	2800      	cmp	r0, #0
 800b5ce:	f040 8128 	bne.w	800b822 <_dtoa_r+0x68a>
 800b5d2:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 800b5d6:	e9cd 3402 	strd	r3, r4, [sp, #8]
 800b5da:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800b5dc:	2b00      	cmp	r3, #0
 800b5de:	f2c0 815a 	blt.w	800b896 <_dtoa_r+0x6fe>
 800b5e2:	2f0e      	cmp	r7, #14
 800b5e4:	f300 8157 	bgt.w	800b896 <_dtoa_r+0x6fe>
 800b5e8:	4b5a      	ldr	r3, [pc, #360]	@ (800b754 <_dtoa_r+0x5bc>)
 800b5ea:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800b5ee:	ed93 7b00 	vldr	d7, [r3]
 800b5f2:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800b5f4:	2b00      	cmp	r3, #0
 800b5f6:	ed8d 7b00 	vstr	d7, [sp]
 800b5fa:	da03      	bge.n	800b604 <_dtoa_r+0x46c>
 800b5fc:	9b07      	ldr	r3, [sp, #28]
 800b5fe:	2b00      	cmp	r3, #0
 800b600:	f340 8101 	ble.w	800b806 <_dtoa_r+0x66e>
 800b604:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 800b608:	4656      	mov	r6, sl
 800b60a:	e9dd 2300 	ldrd	r2, r3, [sp]
 800b60e:	4620      	mov	r0, r4
 800b610:	4629      	mov	r1, r5
 800b612:	f7f5 f943 	bl	800089c <__aeabi_ddiv>
 800b616:	f7f5 fac7 	bl	8000ba8 <__aeabi_d2iz>
 800b61a:	4680      	mov	r8, r0
 800b61c:	f7f4 ffaa 	bl	8000574 <__aeabi_i2d>
 800b620:	e9dd 2300 	ldrd	r2, r3, [sp]
 800b624:	f7f5 f810 	bl	8000648 <__aeabi_dmul>
 800b628:	4602      	mov	r2, r0
 800b62a:	460b      	mov	r3, r1
 800b62c:	4620      	mov	r0, r4
 800b62e:	4629      	mov	r1, r5
 800b630:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 800b634:	f7f4 fe50 	bl	80002d8 <__aeabi_dsub>
 800b638:	f806 4b01 	strb.w	r4, [r6], #1
 800b63c:	9d07      	ldr	r5, [sp, #28]
 800b63e:	eba6 040a 	sub.w	r4, r6, sl
 800b642:	42a5      	cmp	r5, r4
 800b644:	4602      	mov	r2, r0
 800b646:	460b      	mov	r3, r1
 800b648:	f040 8117 	bne.w	800b87a <_dtoa_r+0x6e2>
 800b64c:	f7f4 fe46 	bl	80002dc <__adddf3>
 800b650:	e9dd 2300 	ldrd	r2, r3, [sp]
 800b654:	4604      	mov	r4, r0
 800b656:	460d      	mov	r5, r1
 800b658:	f7f5 fa86 	bl	8000b68 <__aeabi_dcmpgt>
 800b65c:	2800      	cmp	r0, #0
 800b65e:	f040 80f9 	bne.w	800b854 <_dtoa_r+0x6bc>
 800b662:	e9dd 2300 	ldrd	r2, r3, [sp]
 800b666:	4620      	mov	r0, r4
 800b668:	4629      	mov	r1, r5
 800b66a:	f7f5 fa55 	bl	8000b18 <__aeabi_dcmpeq>
 800b66e:	b118      	cbz	r0, 800b678 <_dtoa_r+0x4e0>
 800b670:	f018 0f01 	tst.w	r8, #1
 800b674:	f040 80ee 	bne.w	800b854 <_dtoa_r+0x6bc>
 800b678:	4649      	mov	r1, r9
 800b67a:	4658      	mov	r0, fp
 800b67c:	f000 fc90 	bl	800bfa0 <_Bfree>
 800b680:	2300      	movs	r3, #0
 800b682:	7033      	strb	r3, [r6, #0]
 800b684:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800b686:	3701      	adds	r7, #1
 800b688:	601f      	str	r7, [r3, #0]
 800b68a:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800b68c:	2b00      	cmp	r3, #0
 800b68e:	f000 831d 	beq.w	800bccc <_dtoa_r+0xb34>
 800b692:	601e      	str	r6, [r3, #0]
 800b694:	e31a      	b.n	800bccc <_dtoa_r+0xb34>
 800b696:	07e2      	lsls	r2, r4, #31
 800b698:	d505      	bpl.n	800b6a6 <_dtoa_r+0x50e>
 800b69a:	e9d5 2300 	ldrd	r2, r3, [r5]
 800b69e:	f7f4 ffd3 	bl	8000648 <__aeabi_dmul>
 800b6a2:	3601      	adds	r6, #1
 800b6a4:	2301      	movs	r3, #1
 800b6a6:	1064      	asrs	r4, r4, #1
 800b6a8:	3508      	adds	r5, #8
 800b6aa:	e73f      	b.n	800b52c <_dtoa_r+0x394>
 800b6ac:	2602      	movs	r6, #2
 800b6ae:	e742      	b.n	800b536 <_dtoa_r+0x39e>
 800b6b0:	9c07      	ldr	r4, [sp, #28]
 800b6b2:	9704      	str	r7, [sp, #16]
 800b6b4:	e761      	b.n	800b57a <_dtoa_r+0x3e2>
 800b6b6:	4b27      	ldr	r3, [pc, #156]	@ (800b754 <_dtoa_r+0x5bc>)
 800b6b8:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800b6ba:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800b6be:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800b6c2:	4454      	add	r4, sl
 800b6c4:	2900      	cmp	r1, #0
 800b6c6:	d053      	beq.n	800b770 <_dtoa_r+0x5d8>
 800b6c8:	4928      	ldr	r1, [pc, #160]	@ (800b76c <_dtoa_r+0x5d4>)
 800b6ca:	2000      	movs	r0, #0
 800b6cc:	f7f5 f8e6 	bl	800089c <__aeabi_ddiv>
 800b6d0:	4633      	mov	r3, r6
 800b6d2:	462a      	mov	r2, r5
 800b6d4:	f7f4 fe00 	bl	80002d8 <__aeabi_dsub>
 800b6d8:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800b6dc:	4656      	mov	r6, sl
 800b6de:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800b6e2:	f7f5 fa61 	bl	8000ba8 <__aeabi_d2iz>
 800b6e6:	4605      	mov	r5, r0
 800b6e8:	f7f4 ff44 	bl	8000574 <__aeabi_i2d>
 800b6ec:	4602      	mov	r2, r0
 800b6ee:	460b      	mov	r3, r1
 800b6f0:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800b6f4:	f7f4 fdf0 	bl	80002d8 <__aeabi_dsub>
 800b6f8:	3530      	adds	r5, #48	@ 0x30
 800b6fa:	4602      	mov	r2, r0
 800b6fc:	460b      	mov	r3, r1
 800b6fe:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800b702:	f806 5b01 	strb.w	r5, [r6], #1
 800b706:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800b70a:	f7f5 fa0f 	bl	8000b2c <__aeabi_dcmplt>
 800b70e:	2800      	cmp	r0, #0
 800b710:	d171      	bne.n	800b7f6 <_dtoa_r+0x65e>
 800b712:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800b716:	4911      	ldr	r1, [pc, #68]	@ (800b75c <_dtoa_r+0x5c4>)
 800b718:	2000      	movs	r0, #0
 800b71a:	f7f4 fddd 	bl	80002d8 <__aeabi_dsub>
 800b71e:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800b722:	f7f5 fa03 	bl	8000b2c <__aeabi_dcmplt>
 800b726:	2800      	cmp	r0, #0
 800b728:	f040 8095 	bne.w	800b856 <_dtoa_r+0x6be>
 800b72c:	42a6      	cmp	r6, r4
 800b72e:	f43f af50 	beq.w	800b5d2 <_dtoa_r+0x43a>
 800b732:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 800b736:	4b0a      	ldr	r3, [pc, #40]	@ (800b760 <_dtoa_r+0x5c8>)
 800b738:	2200      	movs	r2, #0
 800b73a:	f7f4 ff85 	bl	8000648 <__aeabi_dmul>
 800b73e:	4b08      	ldr	r3, [pc, #32]	@ (800b760 <_dtoa_r+0x5c8>)
 800b740:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800b744:	2200      	movs	r2, #0
 800b746:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800b74a:	f7f4 ff7d 	bl	8000648 <__aeabi_dmul>
 800b74e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800b752:	e7c4      	b.n	800b6de <_dtoa_r+0x546>
 800b754:	0800cf88 	.word	0x0800cf88
 800b758:	0800cf60 	.word	0x0800cf60
 800b75c:	3ff00000 	.word	0x3ff00000
 800b760:	40240000 	.word	0x40240000
 800b764:	401c0000 	.word	0x401c0000
 800b768:	40140000 	.word	0x40140000
 800b76c:	3fe00000 	.word	0x3fe00000
 800b770:	4631      	mov	r1, r6
 800b772:	4628      	mov	r0, r5
 800b774:	f7f4 ff68 	bl	8000648 <__aeabi_dmul>
 800b778:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800b77c:	9415      	str	r4, [sp, #84]	@ 0x54
 800b77e:	4656      	mov	r6, sl
 800b780:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800b784:	f7f5 fa10 	bl	8000ba8 <__aeabi_d2iz>
 800b788:	4605      	mov	r5, r0
 800b78a:	f7f4 fef3 	bl	8000574 <__aeabi_i2d>
 800b78e:	4602      	mov	r2, r0
 800b790:	460b      	mov	r3, r1
 800b792:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800b796:	f7f4 fd9f 	bl	80002d8 <__aeabi_dsub>
 800b79a:	3530      	adds	r5, #48	@ 0x30
 800b79c:	f806 5b01 	strb.w	r5, [r6], #1
 800b7a0:	4602      	mov	r2, r0
 800b7a2:	460b      	mov	r3, r1
 800b7a4:	42a6      	cmp	r6, r4
 800b7a6:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800b7aa:	f04f 0200 	mov.w	r2, #0
 800b7ae:	d124      	bne.n	800b7fa <_dtoa_r+0x662>
 800b7b0:	4bac      	ldr	r3, [pc, #688]	@ (800ba64 <_dtoa_r+0x8cc>)
 800b7b2:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 800b7b6:	f7f4 fd91 	bl	80002dc <__adddf3>
 800b7ba:	4602      	mov	r2, r0
 800b7bc:	460b      	mov	r3, r1
 800b7be:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800b7c2:	f7f5 f9d1 	bl	8000b68 <__aeabi_dcmpgt>
 800b7c6:	2800      	cmp	r0, #0
 800b7c8:	d145      	bne.n	800b856 <_dtoa_r+0x6be>
 800b7ca:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800b7ce:	49a5      	ldr	r1, [pc, #660]	@ (800ba64 <_dtoa_r+0x8cc>)
 800b7d0:	2000      	movs	r0, #0
 800b7d2:	f7f4 fd81 	bl	80002d8 <__aeabi_dsub>
 800b7d6:	4602      	mov	r2, r0
 800b7d8:	460b      	mov	r3, r1
 800b7da:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800b7de:	f7f5 f9a5 	bl	8000b2c <__aeabi_dcmplt>
 800b7e2:	2800      	cmp	r0, #0
 800b7e4:	f43f aef5 	beq.w	800b5d2 <_dtoa_r+0x43a>
 800b7e8:	9e15      	ldr	r6, [sp, #84]	@ 0x54
 800b7ea:	1e73      	subs	r3, r6, #1
 800b7ec:	9315      	str	r3, [sp, #84]	@ 0x54
 800b7ee:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800b7f2:	2b30      	cmp	r3, #48	@ 0x30
 800b7f4:	d0f8      	beq.n	800b7e8 <_dtoa_r+0x650>
 800b7f6:	9f04      	ldr	r7, [sp, #16]
 800b7f8:	e73e      	b.n	800b678 <_dtoa_r+0x4e0>
 800b7fa:	4b9b      	ldr	r3, [pc, #620]	@ (800ba68 <_dtoa_r+0x8d0>)
 800b7fc:	f7f4 ff24 	bl	8000648 <__aeabi_dmul>
 800b800:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800b804:	e7bc      	b.n	800b780 <_dtoa_r+0x5e8>
 800b806:	d10c      	bne.n	800b822 <_dtoa_r+0x68a>
 800b808:	4b98      	ldr	r3, [pc, #608]	@ (800ba6c <_dtoa_r+0x8d4>)
 800b80a:	2200      	movs	r2, #0
 800b80c:	e9dd 0100 	ldrd	r0, r1, [sp]
 800b810:	f7f4 ff1a 	bl	8000648 <__aeabi_dmul>
 800b814:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800b818:	f7f5 f99c 	bl	8000b54 <__aeabi_dcmpge>
 800b81c:	2800      	cmp	r0, #0
 800b81e:	f000 8157 	beq.w	800bad0 <_dtoa_r+0x938>
 800b822:	2400      	movs	r4, #0
 800b824:	4625      	mov	r5, r4
 800b826:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800b828:	43db      	mvns	r3, r3
 800b82a:	9304      	str	r3, [sp, #16]
 800b82c:	4656      	mov	r6, sl
 800b82e:	2700      	movs	r7, #0
 800b830:	4621      	mov	r1, r4
 800b832:	4658      	mov	r0, fp
 800b834:	f000 fbb4 	bl	800bfa0 <_Bfree>
 800b838:	2d00      	cmp	r5, #0
 800b83a:	d0dc      	beq.n	800b7f6 <_dtoa_r+0x65e>
 800b83c:	b12f      	cbz	r7, 800b84a <_dtoa_r+0x6b2>
 800b83e:	42af      	cmp	r7, r5
 800b840:	d003      	beq.n	800b84a <_dtoa_r+0x6b2>
 800b842:	4639      	mov	r1, r7
 800b844:	4658      	mov	r0, fp
 800b846:	f000 fbab 	bl	800bfa0 <_Bfree>
 800b84a:	4629      	mov	r1, r5
 800b84c:	4658      	mov	r0, fp
 800b84e:	f000 fba7 	bl	800bfa0 <_Bfree>
 800b852:	e7d0      	b.n	800b7f6 <_dtoa_r+0x65e>
 800b854:	9704      	str	r7, [sp, #16]
 800b856:	4633      	mov	r3, r6
 800b858:	461e      	mov	r6, r3
 800b85a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800b85e:	2a39      	cmp	r2, #57	@ 0x39
 800b860:	d107      	bne.n	800b872 <_dtoa_r+0x6da>
 800b862:	459a      	cmp	sl, r3
 800b864:	d1f8      	bne.n	800b858 <_dtoa_r+0x6c0>
 800b866:	9a04      	ldr	r2, [sp, #16]
 800b868:	3201      	adds	r2, #1
 800b86a:	9204      	str	r2, [sp, #16]
 800b86c:	2230      	movs	r2, #48	@ 0x30
 800b86e:	f88a 2000 	strb.w	r2, [sl]
 800b872:	781a      	ldrb	r2, [r3, #0]
 800b874:	3201      	adds	r2, #1
 800b876:	701a      	strb	r2, [r3, #0]
 800b878:	e7bd      	b.n	800b7f6 <_dtoa_r+0x65e>
 800b87a:	4b7b      	ldr	r3, [pc, #492]	@ (800ba68 <_dtoa_r+0x8d0>)
 800b87c:	2200      	movs	r2, #0
 800b87e:	f7f4 fee3 	bl	8000648 <__aeabi_dmul>
 800b882:	2200      	movs	r2, #0
 800b884:	2300      	movs	r3, #0
 800b886:	4604      	mov	r4, r0
 800b888:	460d      	mov	r5, r1
 800b88a:	f7f5 f945 	bl	8000b18 <__aeabi_dcmpeq>
 800b88e:	2800      	cmp	r0, #0
 800b890:	f43f aebb 	beq.w	800b60a <_dtoa_r+0x472>
 800b894:	e6f0      	b.n	800b678 <_dtoa_r+0x4e0>
 800b896:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 800b898:	2a00      	cmp	r2, #0
 800b89a:	f000 80db 	beq.w	800ba54 <_dtoa_r+0x8bc>
 800b89e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800b8a0:	2a01      	cmp	r2, #1
 800b8a2:	f300 80bf 	bgt.w	800ba24 <_dtoa_r+0x88c>
 800b8a6:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 800b8a8:	2a00      	cmp	r2, #0
 800b8aa:	f000 80b7 	beq.w	800ba1c <_dtoa_r+0x884>
 800b8ae:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 800b8b2:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800b8b4:	4646      	mov	r6, r8
 800b8b6:	9a08      	ldr	r2, [sp, #32]
 800b8b8:	2101      	movs	r1, #1
 800b8ba:	441a      	add	r2, r3
 800b8bc:	4658      	mov	r0, fp
 800b8be:	4498      	add	r8, r3
 800b8c0:	9208      	str	r2, [sp, #32]
 800b8c2:	f000 fc21 	bl	800c108 <__i2b>
 800b8c6:	4605      	mov	r5, r0
 800b8c8:	b15e      	cbz	r6, 800b8e2 <_dtoa_r+0x74a>
 800b8ca:	9b08      	ldr	r3, [sp, #32]
 800b8cc:	2b00      	cmp	r3, #0
 800b8ce:	dd08      	ble.n	800b8e2 <_dtoa_r+0x74a>
 800b8d0:	42b3      	cmp	r3, r6
 800b8d2:	9a08      	ldr	r2, [sp, #32]
 800b8d4:	bfa8      	it	ge
 800b8d6:	4633      	movge	r3, r6
 800b8d8:	eba8 0803 	sub.w	r8, r8, r3
 800b8dc:	1af6      	subs	r6, r6, r3
 800b8de:	1ad3      	subs	r3, r2, r3
 800b8e0:	9308      	str	r3, [sp, #32]
 800b8e2:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800b8e4:	b1f3      	cbz	r3, 800b924 <_dtoa_r+0x78c>
 800b8e6:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800b8e8:	2b00      	cmp	r3, #0
 800b8ea:	f000 80b7 	beq.w	800ba5c <_dtoa_r+0x8c4>
 800b8ee:	b18c      	cbz	r4, 800b914 <_dtoa_r+0x77c>
 800b8f0:	4629      	mov	r1, r5
 800b8f2:	4622      	mov	r2, r4
 800b8f4:	4658      	mov	r0, fp
 800b8f6:	f000 fcc7 	bl	800c288 <__pow5mult>
 800b8fa:	464a      	mov	r2, r9
 800b8fc:	4601      	mov	r1, r0
 800b8fe:	4605      	mov	r5, r0
 800b900:	4658      	mov	r0, fp
 800b902:	f000 fc17 	bl	800c134 <__multiply>
 800b906:	4649      	mov	r1, r9
 800b908:	9004      	str	r0, [sp, #16]
 800b90a:	4658      	mov	r0, fp
 800b90c:	f000 fb48 	bl	800bfa0 <_Bfree>
 800b910:	9b04      	ldr	r3, [sp, #16]
 800b912:	4699      	mov	r9, r3
 800b914:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800b916:	1b1a      	subs	r2, r3, r4
 800b918:	d004      	beq.n	800b924 <_dtoa_r+0x78c>
 800b91a:	4649      	mov	r1, r9
 800b91c:	4658      	mov	r0, fp
 800b91e:	f000 fcb3 	bl	800c288 <__pow5mult>
 800b922:	4681      	mov	r9, r0
 800b924:	2101      	movs	r1, #1
 800b926:	4658      	mov	r0, fp
 800b928:	f000 fbee 	bl	800c108 <__i2b>
 800b92c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800b92e:	4604      	mov	r4, r0
 800b930:	2b00      	cmp	r3, #0
 800b932:	f000 81cf 	beq.w	800bcd4 <_dtoa_r+0xb3c>
 800b936:	461a      	mov	r2, r3
 800b938:	4601      	mov	r1, r0
 800b93a:	4658      	mov	r0, fp
 800b93c:	f000 fca4 	bl	800c288 <__pow5mult>
 800b940:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b942:	2b01      	cmp	r3, #1
 800b944:	4604      	mov	r4, r0
 800b946:	f300 8095 	bgt.w	800ba74 <_dtoa_r+0x8dc>
 800b94a:	9b02      	ldr	r3, [sp, #8]
 800b94c:	2b00      	cmp	r3, #0
 800b94e:	f040 8087 	bne.w	800ba60 <_dtoa_r+0x8c8>
 800b952:	9b03      	ldr	r3, [sp, #12]
 800b954:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800b958:	2b00      	cmp	r3, #0
 800b95a:	f040 8089 	bne.w	800ba70 <_dtoa_r+0x8d8>
 800b95e:	9b03      	ldr	r3, [sp, #12]
 800b960:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800b964:	0d1b      	lsrs	r3, r3, #20
 800b966:	051b      	lsls	r3, r3, #20
 800b968:	b12b      	cbz	r3, 800b976 <_dtoa_r+0x7de>
 800b96a:	9b08      	ldr	r3, [sp, #32]
 800b96c:	3301      	adds	r3, #1
 800b96e:	9308      	str	r3, [sp, #32]
 800b970:	f108 0801 	add.w	r8, r8, #1
 800b974:	2301      	movs	r3, #1
 800b976:	930a      	str	r3, [sp, #40]	@ 0x28
 800b978:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800b97a:	2b00      	cmp	r3, #0
 800b97c:	f000 81b0 	beq.w	800bce0 <_dtoa_r+0xb48>
 800b980:	6923      	ldr	r3, [r4, #16]
 800b982:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800b986:	6918      	ldr	r0, [r3, #16]
 800b988:	f000 fb72 	bl	800c070 <__hi0bits>
 800b98c:	f1c0 0020 	rsb	r0, r0, #32
 800b990:	9b08      	ldr	r3, [sp, #32]
 800b992:	4418      	add	r0, r3
 800b994:	f010 001f 	ands.w	r0, r0, #31
 800b998:	d077      	beq.n	800ba8a <_dtoa_r+0x8f2>
 800b99a:	f1c0 0320 	rsb	r3, r0, #32
 800b99e:	2b04      	cmp	r3, #4
 800b9a0:	dd6b      	ble.n	800ba7a <_dtoa_r+0x8e2>
 800b9a2:	9b08      	ldr	r3, [sp, #32]
 800b9a4:	f1c0 001c 	rsb	r0, r0, #28
 800b9a8:	4403      	add	r3, r0
 800b9aa:	4480      	add	r8, r0
 800b9ac:	4406      	add	r6, r0
 800b9ae:	9308      	str	r3, [sp, #32]
 800b9b0:	f1b8 0f00 	cmp.w	r8, #0
 800b9b4:	dd05      	ble.n	800b9c2 <_dtoa_r+0x82a>
 800b9b6:	4649      	mov	r1, r9
 800b9b8:	4642      	mov	r2, r8
 800b9ba:	4658      	mov	r0, fp
 800b9bc:	f000 fcbe 	bl	800c33c <__lshift>
 800b9c0:	4681      	mov	r9, r0
 800b9c2:	9b08      	ldr	r3, [sp, #32]
 800b9c4:	2b00      	cmp	r3, #0
 800b9c6:	dd05      	ble.n	800b9d4 <_dtoa_r+0x83c>
 800b9c8:	4621      	mov	r1, r4
 800b9ca:	461a      	mov	r2, r3
 800b9cc:	4658      	mov	r0, fp
 800b9ce:	f000 fcb5 	bl	800c33c <__lshift>
 800b9d2:	4604      	mov	r4, r0
 800b9d4:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800b9d6:	2b00      	cmp	r3, #0
 800b9d8:	d059      	beq.n	800ba8e <_dtoa_r+0x8f6>
 800b9da:	4621      	mov	r1, r4
 800b9dc:	4648      	mov	r0, r9
 800b9de:	f000 fd19 	bl	800c414 <__mcmp>
 800b9e2:	2800      	cmp	r0, #0
 800b9e4:	da53      	bge.n	800ba8e <_dtoa_r+0x8f6>
 800b9e6:	1e7b      	subs	r3, r7, #1
 800b9e8:	9304      	str	r3, [sp, #16]
 800b9ea:	4649      	mov	r1, r9
 800b9ec:	2300      	movs	r3, #0
 800b9ee:	220a      	movs	r2, #10
 800b9f0:	4658      	mov	r0, fp
 800b9f2:	f000 faf7 	bl	800bfe4 <__multadd>
 800b9f6:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800b9f8:	4681      	mov	r9, r0
 800b9fa:	2b00      	cmp	r3, #0
 800b9fc:	f000 8172 	beq.w	800bce4 <_dtoa_r+0xb4c>
 800ba00:	2300      	movs	r3, #0
 800ba02:	4629      	mov	r1, r5
 800ba04:	220a      	movs	r2, #10
 800ba06:	4658      	mov	r0, fp
 800ba08:	f000 faec 	bl	800bfe4 <__multadd>
 800ba0c:	9b00      	ldr	r3, [sp, #0]
 800ba0e:	2b00      	cmp	r3, #0
 800ba10:	4605      	mov	r5, r0
 800ba12:	dc67      	bgt.n	800bae4 <_dtoa_r+0x94c>
 800ba14:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ba16:	2b02      	cmp	r3, #2
 800ba18:	dc41      	bgt.n	800ba9e <_dtoa_r+0x906>
 800ba1a:	e063      	b.n	800bae4 <_dtoa_r+0x94c>
 800ba1c:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 800ba1e:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 800ba22:	e746      	b.n	800b8b2 <_dtoa_r+0x71a>
 800ba24:	9b07      	ldr	r3, [sp, #28]
 800ba26:	1e5c      	subs	r4, r3, #1
 800ba28:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800ba2a:	42a3      	cmp	r3, r4
 800ba2c:	bfbf      	itttt	lt
 800ba2e:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 800ba30:	9a0f      	ldrlt	r2, [sp, #60]	@ 0x3c
 800ba32:	940a      	strlt	r4, [sp, #40]	@ 0x28
 800ba34:	1ae3      	sublt	r3, r4, r3
 800ba36:	bfb4      	ite	lt
 800ba38:	18d2      	addlt	r2, r2, r3
 800ba3a:	1b1c      	subge	r4, r3, r4
 800ba3c:	9b07      	ldr	r3, [sp, #28]
 800ba3e:	bfbc      	itt	lt
 800ba40:	920f      	strlt	r2, [sp, #60]	@ 0x3c
 800ba42:	2400      	movlt	r4, #0
 800ba44:	2b00      	cmp	r3, #0
 800ba46:	bfb5      	itete	lt
 800ba48:	eba8 0603 	sublt.w	r6, r8, r3
 800ba4c:	9b07      	ldrge	r3, [sp, #28]
 800ba4e:	2300      	movlt	r3, #0
 800ba50:	4646      	movge	r6, r8
 800ba52:	e730      	b.n	800b8b6 <_dtoa_r+0x71e>
 800ba54:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800ba56:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 800ba58:	4646      	mov	r6, r8
 800ba5a:	e735      	b.n	800b8c8 <_dtoa_r+0x730>
 800ba5c:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800ba5e:	e75c      	b.n	800b91a <_dtoa_r+0x782>
 800ba60:	2300      	movs	r3, #0
 800ba62:	e788      	b.n	800b976 <_dtoa_r+0x7de>
 800ba64:	3fe00000 	.word	0x3fe00000
 800ba68:	40240000 	.word	0x40240000
 800ba6c:	40140000 	.word	0x40140000
 800ba70:	9b02      	ldr	r3, [sp, #8]
 800ba72:	e780      	b.n	800b976 <_dtoa_r+0x7de>
 800ba74:	2300      	movs	r3, #0
 800ba76:	930a      	str	r3, [sp, #40]	@ 0x28
 800ba78:	e782      	b.n	800b980 <_dtoa_r+0x7e8>
 800ba7a:	d099      	beq.n	800b9b0 <_dtoa_r+0x818>
 800ba7c:	9a08      	ldr	r2, [sp, #32]
 800ba7e:	331c      	adds	r3, #28
 800ba80:	441a      	add	r2, r3
 800ba82:	4498      	add	r8, r3
 800ba84:	441e      	add	r6, r3
 800ba86:	9208      	str	r2, [sp, #32]
 800ba88:	e792      	b.n	800b9b0 <_dtoa_r+0x818>
 800ba8a:	4603      	mov	r3, r0
 800ba8c:	e7f6      	b.n	800ba7c <_dtoa_r+0x8e4>
 800ba8e:	9b07      	ldr	r3, [sp, #28]
 800ba90:	9704      	str	r7, [sp, #16]
 800ba92:	2b00      	cmp	r3, #0
 800ba94:	dc20      	bgt.n	800bad8 <_dtoa_r+0x940>
 800ba96:	9300      	str	r3, [sp, #0]
 800ba98:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ba9a:	2b02      	cmp	r3, #2
 800ba9c:	dd1e      	ble.n	800badc <_dtoa_r+0x944>
 800ba9e:	9b00      	ldr	r3, [sp, #0]
 800baa0:	2b00      	cmp	r3, #0
 800baa2:	f47f aec0 	bne.w	800b826 <_dtoa_r+0x68e>
 800baa6:	4621      	mov	r1, r4
 800baa8:	2205      	movs	r2, #5
 800baaa:	4658      	mov	r0, fp
 800baac:	f000 fa9a 	bl	800bfe4 <__multadd>
 800bab0:	4601      	mov	r1, r0
 800bab2:	4604      	mov	r4, r0
 800bab4:	4648      	mov	r0, r9
 800bab6:	f000 fcad 	bl	800c414 <__mcmp>
 800baba:	2800      	cmp	r0, #0
 800babc:	f77f aeb3 	ble.w	800b826 <_dtoa_r+0x68e>
 800bac0:	4656      	mov	r6, sl
 800bac2:	2331      	movs	r3, #49	@ 0x31
 800bac4:	f806 3b01 	strb.w	r3, [r6], #1
 800bac8:	9b04      	ldr	r3, [sp, #16]
 800baca:	3301      	adds	r3, #1
 800bacc:	9304      	str	r3, [sp, #16]
 800bace:	e6ae      	b.n	800b82e <_dtoa_r+0x696>
 800bad0:	9c07      	ldr	r4, [sp, #28]
 800bad2:	9704      	str	r7, [sp, #16]
 800bad4:	4625      	mov	r5, r4
 800bad6:	e7f3      	b.n	800bac0 <_dtoa_r+0x928>
 800bad8:	9b07      	ldr	r3, [sp, #28]
 800bada:	9300      	str	r3, [sp, #0]
 800badc:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800bade:	2b00      	cmp	r3, #0
 800bae0:	f000 8104 	beq.w	800bcec <_dtoa_r+0xb54>
 800bae4:	2e00      	cmp	r6, #0
 800bae6:	dd05      	ble.n	800baf4 <_dtoa_r+0x95c>
 800bae8:	4629      	mov	r1, r5
 800baea:	4632      	mov	r2, r6
 800baec:	4658      	mov	r0, fp
 800baee:	f000 fc25 	bl	800c33c <__lshift>
 800baf2:	4605      	mov	r5, r0
 800baf4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800baf6:	2b00      	cmp	r3, #0
 800baf8:	d05a      	beq.n	800bbb0 <_dtoa_r+0xa18>
 800bafa:	6869      	ldr	r1, [r5, #4]
 800bafc:	4658      	mov	r0, fp
 800bafe:	f000 fa0f 	bl	800bf20 <_Balloc>
 800bb02:	4606      	mov	r6, r0
 800bb04:	b928      	cbnz	r0, 800bb12 <_dtoa_r+0x97a>
 800bb06:	4b84      	ldr	r3, [pc, #528]	@ (800bd18 <_dtoa_r+0xb80>)
 800bb08:	4602      	mov	r2, r0
 800bb0a:	f240 21ef 	movw	r1, #751	@ 0x2ef
 800bb0e:	f7ff bb5a 	b.w	800b1c6 <_dtoa_r+0x2e>
 800bb12:	692a      	ldr	r2, [r5, #16]
 800bb14:	3202      	adds	r2, #2
 800bb16:	0092      	lsls	r2, r2, #2
 800bb18:	f105 010c 	add.w	r1, r5, #12
 800bb1c:	300c      	adds	r0, #12
 800bb1e:	f000 fe3d 	bl	800c79c <memcpy>
 800bb22:	2201      	movs	r2, #1
 800bb24:	4631      	mov	r1, r6
 800bb26:	4658      	mov	r0, fp
 800bb28:	f000 fc08 	bl	800c33c <__lshift>
 800bb2c:	f10a 0301 	add.w	r3, sl, #1
 800bb30:	9307      	str	r3, [sp, #28]
 800bb32:	9b00      	ldr	r3, [sp, #0]
 800bb34:	4453      	add	r3, sl
 800bb36:	930b      	str	r3, [sp, #44]	@ 0x2c
 800bb38:	9b02      	ldr	r3, [sp, #8]
 800bb3a:	f003 0301 	and.w	r3, r3, #1
 800bb3e:	462f      	mov	r7, r5
 800bb40:	930a      	str	r3, [sp, #40]	@ 0x28
 800bb42:	4605      	mov	r5, r0
 800bb44:	9b07      	ldr	r3, [sp, #28]
 800bb46:	4621      	mov	r1, r4
 800bb48:	3b01      	subs	r3, #1
 800bb4a:	4648      	mov	r0, r9
 800bb4c:	9300      	str	r3, [sp, #0]
 800bb4e:	f7ff fa9a 	bl	800b086 <quorem>
 800bb52:	4639      	mov	r1, r7
 800bb54:	9002      	str	r0, [sp, #8]
 800bb56:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 800bb5a:	4648      	mov	r0, r9
 800bb5c:	f000 fc5a 	bl	800c414 <__mcmp>
 800bb60:	462a      	mov	r2, r5
 800bb62:	9008      	str	r0, [sp, #32]
 800bb64:	4621      	mov	r1, r4
 800bb66:	4658      	mov	r0, fp
 800bb68:	f000 fc70 	bl	800c44c <__mdiff>
 800bb6c:	68c2      	ldr	r2, [r0, #12]
 800bb6e:	4606      	mov	r6, r0
 800bb70:	bb02      	cbnz	r2, 800bbb4 <_dtoa_r+0xa1c>
 800bb72:	4601      	mov	r1, r0
 800bb74:	4648      	mov	r0, r9
 800bb76:	f000 fc4d 	bl	800c414 <__mcmp>
 800bb7a:	4602      	mov	r2, r0
 800bb7c:	4631      	mov	r1, r6
 800bb7e:	4658      	mov	r0, fp
 800bb80:	920e      	str	r2, [sp, #56]	@ 0x38
 800bb82:	f000 fa0d 	bl	800bfa0 <_Bfree>
 800bb86:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800bb88:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800bb8a:	9e07      	ldr	r6, [sp, #28]
 800bb8c:	ea43 0102 	orr.w	r1, r3, r2
 800bb90:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800bb92:	4319      	orrs	r1, r3
 800bb94:	d110      	bne.n	800bbb8 <_dtoa_r+0xa20>
 800bb96:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800bb9a:	d029      	beq.n	800bbf0 <_dtoa_r+0xa58>
 800bb9c:	9b08      	ldr	r3, [sp, #32]
 800bb9e:	2b00      	cmp	r3, #0
 800bba0:	dd02      	ble.n	800bba8 <_dtoa_r+0xa10>
 800bba2:	9b02      	ldr	r3, [sp, #8]
 800bba4:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 800bba8:	9b00      	ldr	r3, [sp, #0]
 800bbaa:	f883 8000 	strb.w	r8, [r3]
 800bbae:	e63f      	b.n	800b830 <_dtoa_r+0x698>
 800bbb0:	4628      	mov	r0, r5
 800bbb2:	e7bb      	b.n	800bb2c <_dtoa_r+0x994>
 800bbb4:	2201      	movs	r2, #1
 800bbb6:	e7e1      	b.n	800bb7c <_dtoa_r+0x9e4>
 800bbb8:	9b08      	ldr	r3, [sp, #32]
 800bbba:	2b00      	cmp	r3, #0
 800bbbc:	db04      	blt.n	800bbc8 <_dtoa_r+0xa30>
 800bbbe:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800bbc0:	430b      	orrs	r3, r1
 800bbc2:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800bbc4:	430b      	orrs	r3, r1
 800bbc6:	d120      	bne.n	800bc0a <_dtoa_r+0xa72>
 800bbc8:	2a00      	cmp	r2, #0
 800bbca:	dded      	ble.n	800bba8 <_dtoa_r+0xa10>
 800bbcc:	4649      	mov	r1, r9
 800bbce:	2201      	movs	r2, #1
 800bbd0:	4658      	mov	r0, fp
 800bbd2:	f000 fbb3 	bl	800c33c <__lshift>
 800bbd6:	4621      	mov	r1, r4
 800bbd8:	4681      	mov	r9, r0
 800bbda:	f000 fc1b 	bl	800c414 <__mcmp>
 800bbde:	2800      	cmp	r0, #0
 800bbe0:	dc03      	bgt.n	800bbea <_dtoa_r+0xa52>
 800bbe2:	d1e1      	bne.n	800bba8 <_dtoa_r+0xa10>
 800bbe4:	f018 0f01 	tst.w	r8, #1
 800bbe8:	d0de      	beq.n	800bba8 <_dtoa_r+0xa10>
 800bbea:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800bbee:	d1d8      	bne.n	800bba2 <_dtoa_r+0xa0a>
 800bbf0:	9a00      	ldr	r2, [sp, #0]
 800bbf2:	2339      	movs	r3, #57	@ 0x39
 800bbf4:	7013      	strb	r3, [r2, #0]
 800bbf6:	4633      	mov	r3, r6
 800bbf8:	461e      	mov	r6, r3
 800bbfa:	3b01      	subs	r3, #1
 800bbfc:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 800bc00:	2a39      	cmp	r2, #57	@ 0x39
 800bc02:	d052      	beq.n	800bcaa <_dtoa_r+0xb12>
 800bc04:	3201      	adds	r2, #1
 800bc06:	701a      	strb	r2, [r3, #0]
 800bc08:	e612      	b.n	800b830 <_dtoa_r+0x698>
 800bc0a:	2a00      	cmp	r2, #0
 800bc0c:	dd07      	ble.n	800bc1e <_dtoa_r+0xa86>
 800bc0e:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800bc12:	d0ed      	beq.n	800bbf0 <_dtoa_r+0xa58>
 800bc14:	9a00      	ldr	r2, [sp, #0]
 800bc16:	f108 0301 	add.w	r3, r8, #1
 800bc1a:	7013      	strb	r3, [r2, #0]
 800bc1c:	e608      	b.n	800b830 <_dtoa_r+0x698>
 800bc1e:	9b07      	ldr	r3, [sp, #28]
 800bc20:	9a07      	ldr	r2, [sp, #28]
 800bc22:	f803 8c01 	strb.w	r8, [r3, #-1]
 800bc26:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800bc28:	4293      	cmp	r3, r2
 800bc2a:	d028      	beq.n	800bc7e <_dtoa_r+0xae6>
 800bc2c:	4649      	mov	r1, r9
 800bc2e:	2300      	movs	r3, #0
 800bc30:	220a      	movs	r2, #10
 800bc32:	4658      	mov	r0, fp
 800bc34:	f000 f9d6 	bl	800bfe4 <__multadd>
 800bc38:	42af      	cmp	r7, r5
 800bc3a:	4681      	mov	r9, r0
 800bc3c:	f04f 0300 	mov.w	r3, #0
 800bc40:	f04f 020a 	mov.w	r2, #10
 800bc44:	4639      	mov	r1, r7
 800bc46:	4658      	mov	r0, fp
 800bc48:	d107      	bne.n	800bc5a <_dtoa_r+0xac2>
 800bc4a:	f000 f9cb 	bl	800bfe4 <__multadd>
 800bc4e:	4607      	mov	r7, r0
 800bc50:	4605      	mov	r5, r0
 800bc52:	9b07      	ldr	r3, [sp, #28]
 800bc54:	3301      	adds	r3, #1
 800bc56:	9307      	str	r3, [sp, #28]
 800bc58:	e774      	b.n	800bb44 <_dtoa_r+0x9ac>
 800bc5a:	f000 f9c3 	bl	800bfe4 <__multadd>
 800bc5e:	4629      	mov	r1, r5
 800bc60:	4607      	mov	r7, r0
 800bc62:	2300      	movs	r3, #0
 800bc64:	220a      	movs	r2, #10
 800bc66:	4658      	mov	r0, fp
 800bc68:	f000 f9bc 	bl	800bfe4 <__multadd>
 800bc6c:	4605      	mov	r5, r0
 800bc6e:	e7f0      	b.n	800bc52 <_dtoa_r+0xaba>
 800bc70:	9b00      	ldr	r3, [sp, #0]
 800bc72:	2b00      	cmp	r3, #0
 800bc74:	bfcc      	ite	gt
 800bc76:	461e      	movgt	r6, r3
 800bc78:	2601      	movle	r6, #1
 800bc7a:	4456      	add	r6, sl
 800bc7c:	2700      	movs	r7, #0
 800bc7e:	4649      	mov	r1, r9
 800bc80:	2201      	movs	r2, #1
 800bc82:	4658      	mov	r0, fp
 800bc84:	f000 fb5a 	bl	800c33c <__lshift>
 800bc88:	4621      	mov	r1, r4
 800bc8a:	4681      	mov	r9, r0
 800bc8c:	f000 fbc2 	bl	800c414 <__mcmp>
 800bc90:	2800      	cmp	r0, #0
 800bc92:	dcb0      	bgt.n	800bbf6 <_dtoa_r+0xa5e>
 800bc94:	d102      	bne.n	800bc9c <_dtoa_r+0xb04>
 800bc96:	f018 0f01 	tst.w	r8, #1
 800bc9a:	d1ac      	bne.n	800bbf6 <_dtoa_r+0xa5e>
 800bc9c:	4633      	mov	r3, r6
 800bc9e:	461e      	mov	r6, r3
 800bca0:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800bca4:	2a30      	cmp	r2, #48	@ 0x30
 800bca6:	d0fa      	beq.n	800bc9e <_dtoa_r+0xb06>
 800bca8:	e5c2      	b.n	800b830 <_dtoa_r+0x698>
 800bcaa:	459a      	cmp	sl, r3
 800bcac:	d1a4      	bne.n	800bbf8 <_dtoa_r+0xa60>
 800bcae:	9b04      	ldr	r3, [sp, #16]
 800bcb0:	3301      	adds	r3, #1
 800bcb2:	9304      	str	r3, [sp, #16]
 800bcb4:	2331      	movs	r3, #49	@ 0x31
 800bcb6:	f88a 3000 	strb.w	r3, [sl]
 800bcba:	e5b9      	b.n	800b830 <_dtoa_r+0x698>
 800bcbc:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800bcbe:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 800bd1c <_dtoa_r+0xb84>
 800bcc2:	b11b      	cbz	r3, 800bccc <_dtoa_r+0xb34>
 800bcc4:	f10a 0308 	add.w	r3, sl, #8
 800bcc8:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 800bcca:	6013      	str	r3, [r2, #0]
 800bccc:	4650      	mov	r0, sl
 800bcce:	b019      	add	sp, #100	@ 0x64
 800bcd0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bcd4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800bcd6:	2b01      	cmp	r3, #1
 800bcd8:	f77f ae37 	ble.w	800b94a <_dtoa_r+0x7b2>
 800bcdc:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800bcde:	930a      	str	r3, [sp, #40]	@ 0x28
 800bce0:	2001      	movs	r0, #1
 800bce2:	e655      	b.n	800b990 <_dtoa_r+0x7f8>
 800bce4:	9b00      	ldr	r3, [sp, #0]
 800bce6:	2b00      	cmp	r3, #0
 800bce8:	f77f aed6 	ble.w	800ba98 <_dtoa_r+0x900>
 800bcec:	4656      	mov	r6, sl
 800bcee:	4621      	mov	r1, r4
 800bcf0:	4648      	mov	r0, r9
 800bcf2:	f7ff f9c8 	bl	800b086 <quorem>
 800bcf6:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 800bcfa:	f806 8b01 	strb.w	r8, [r6], #1
 800bcfe:	9b00      	ldr	r3, [sp, #0]
 800bd00:	eba6 020a 	sub.w	r2, r6, sl
 800bd04:	4293      	cmp	r3, r2
 800bd06:	ddb3      	ble.n	800bc70 <_dtoa_r+0xad8>
 800bd08:	4649      	mov	r1, r9
 800bd0a:	2300      	movs	r3, #0
 800bd0c:	220a      	movs	r2, #10
 800bd0e:	4658      	mov	r0, fp
 800bd10:	f000 f968 	bl	800bfe4 <__multadd>
 800bd14:	4681      	mov	r9, r0
 800bd16:	e7ea      	b.n	800bcee <_dtoa_r+0xb56>
 800bd18:	0800cee8 	.word	0x0800cee8
 800bd1c:	0800ce6c 	.word	0x0800ce6c

0800bd20 <_free_r>:
 800bd20:	b538      	push	{r3, r4, r5, lr}
 800bd22:	4605      	mov	r5, r0
 800bd24:	2900      	cmp	r1, #0
 800bd26:	d041      	beq.n	800bdac <_free_r+0x8c>
 800bd28:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800bd2c:	1f0c      	subs	r4, r1, #4
 800bd2e:	2b00      	cmp	r3, #0
 800bd30:	bfb8      	it	lt
 800bd32:	18e4      	addlt	r4, r4, r3
 800bd34:	f000 f8e8 	bl	800bf08 <__malloc_lock>
 800bd38:	4a1d      	ldr	r2, [pc, #116]	@ (800bdb0 <_free_r+0x90>)
 800bd3a:	6813      	ldr	r3, [r2, #0]
 800bd3c:	b933      	cbnz	r3, 800bd4c <_free_r+0x2c>
 800bd3e:	6063      	str	r3, [r4, #4]
 800bd40:	6014      	str	r4, [r2, #0]
 800bd42:	4628      	mov	r0, r5
 800bd44:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800bd48:	f000 b8e4 	b.w	800bf14 <__malloc_unlock>
 800bd4c:	42a3      	cmp	r3, r4
 800bd4e:	d908      	bls.n	800bd62 <_free_r+0x42>
 800bd50:	6820      	ldr	r0, [r4, #0]
 800bd52:	1821      	adds	r1, r4, r0
 800bd54:	428b      	cmp	r3, r1
 800bd56:	bf01      	itttt	eq
 800bd58:	6819      	ldreq	r1, [r3, #0]
 800bd5a:	685b      	ldreq	r3, [r3, #4]
 800bd5c:	1809      	addeq	r1, r1, r0
 800bd5e:	6021      	streq	r1, [r4, #0]
 800bd60:	e7ed      	b.n	800bd3e <_free_r+0x1e>
 800bd62:	461a      	mov	r2, r3
 800bd64:	685b      	ldr	r3, [r3, #4]
 800bd66:	b10b      	cbz	r3, 800bd6c <_free_r+0x4c>
 800bd68:	42a3      	cmp	r3, r4
 800bd6a:	d9fa      	bls.n	800bd62 <_free_r+0x42>
 800bd6c:	6811      	ldr	r1, [r2, #0]
 800bd6e:	1850      	adds	r0, r2, r1
 800bd70:	42a0      	cmp	r0, r4
 800bd72:	d10b      	bne.n	800bd8c <_free_r+0x6c>
 800bd74:	6820      	ldr	r0, [r4, #0]
 800bd76:	4401      	add	r1, r0
 800bd78:	1850      	adds	r0, r2, r1
 800bd7a:	4283      	cmp	r3, r0
 800bd7c:	6011      	str	r1, [r2, #0]
 800bd7e:	d1e0      	bne.n	800bd42 <_free_r+0x22>
 800bd80:	6818      	ldr	r0, [r3, #0]
 800bd82:	685b      	ldr	r3, [r3, #4]
 800bd84:	6053      	str	r3, [r2, #4]
 800bd86:	4408      	add	r0, r1
 800bd88:	6010      	str	r0, [r2, #0]
 800bd8a:	e7da      	b.n	800bd42 <_free_r+0x22>
 800bd8c:	d902      	bls.n	800bd94 <_free_r+0x74>
 800bd8e:	230c      	movs	r3, #12
 800bd90:	602b      	str	r3, [r5, #0]
 800bd92:	e7d6      	b.n	800bd42 <_free_r+0x22>
 800bd94:	6820      	ldr	r0, [r4, #0]
 800bd96:	1821      	adds	r1, r4, r0
 800bd98:	428b      	cmp	r3, r1
 800bd9a:	bf04      	itt	eq
 800bd9c:	6819      	ldreq	r1, [r3, #0]
 800bd9e:	685b      	ldreq	r3, [r3, #4]
 800bda0:	6063      	str	r3, [r4, #4]
 800bda2:	bf04      	itt	eq
 800bda4:	1809      	addeq	r1, r1, r0
 800bda6:	6021      	streq	r1, [r4, #0]
 800bda8:	6054      	str	r4, [r2, #4]
 800bdaa:	e7ca      	b.n	800bd42 <_free_r+0x22>
 800bdac:	bd38      	pop	{r3, r4, r5, pc}
 800bdae:	bf00      	nop
 800bdb0:	200019fc 	.word	0x200019fc

0800bdb4 <malloc>:
 800bdb4:	4b02      	ldr	r3, [pc, #8]	@ (800bdc0 <malloc+0xc>)
 800bdb6:	4601      	mov	r1, r0
 800bdb8:	6818      	ldr	r0, [r3, #0]
 800bdba:	f000 b825 	b.w	800be08 <_malloc_r>
 800bdbe:	bf00      	nop
 800bdc0:	200001a0 	.word	0x200001a0

0800bdc4 <sbrk_aligned>:
 800bdc4:	b570      	push	{r4, r5, r6, lr}
 800bdc6:	4e0f      	ldr	r6, [pc, #60]	@ (800be04 <sbrk_aligned+0x40>)
 800bdc8:	460c      	mov	r4, r1
 800bdca:	6831      	ldr	r1, [r6, #0]
 800bdcc:	4605      	mov	r5, r0
 800bdce:	b911      	cbnz	r1, 800bdd6 <sbrk_aligned+0x12>
 800bdd0:	f000 fcd4 	bl	800c77c <_sbrk_r>
 800bdd4:	6030      	str	r0, [r6, #0]
 800bdd6:	4621      	mov	r1, r4
 800bdd8:	4628      	mov	r0, r5
 800bdda:	f000 fccf 	bl	800c77c <_sbrk_r>
 800bdde:	1c43      	adds	r3, r0, #1
 800bde0:	d103      	bne.n	800bdea <sbrk_aligned+0x26>
 800bde2:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 800bde6:	4620      	mov	r0, r4
 800bde8:	bd70      	pop	{r4, r5, r6, pc}
 800bdea:	1cc4      	adds	r4, r0, #3
 800bdec:	f024 0403 	bic.w	r4, r4, #3
 800bdf0:	42a0      	cmp	r0, r4
 800bdf2:	d0f8      	beq.n	800bde6 <sbrk_aligned+0x22>
 800bdf4:	1a21      	subs	r1, r4, r0
 800bdf6:	4628      	mov	r0, r5
 800bdf8:	f000 fcc0 	bl	800c77c <_sbrk_r>
 800bdfc:	3001      	adds	r0, #1
 800bdfe:	d1f2      	bne.n	800bde6 <sbrk_aligned+0x22>
 800be00:	e7ef      	b.n	800bde2 <sbrk_aligned+0x1e>
 800be02:	bf00      	nop
 800be04:	200019f8 	.word	0x200019f8

0800be08 <_malloc_r>:
 800be08:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800be0c:	1ccd      	adds	r5, r1, #3
 800be0e:	f025 0503 	bic.w	r5, r5, #3
 800be12:	3508      	adds	r5, #8
 800be14:	2d0c      	cmp	r5, #12
 800be16:	bf38      	it	cc
 800be18:	250c      	movcc	r5, #12
 800be1a:	2d00      	cmp	r5, #0
 800be1c:	4606      	mov	r6, r0
 800be1e:	db01      	blt.n	800be24 <_malloc_r+0x1c>
 800be20:	42a9      	cmp	r1, r5
 800be22:	d904      	bls.n	800be2e <_malloc_r+0x26>
 800be24:	230c      	movs	r3, #12
 800be26:	6033      	str	r3, [r6, #0]
 800be28:	2000      	movs	r0, #0
 800be2a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800be2e:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800bf04 <_malloc_r+0xfc>
 800be32:	f000 f869 	bl	800bf08 <__malloc_lock>
 800be36:	f8d8 3000 	ldr.w	r3, [r8]
 800be3a:	461c      	mov	r4, r3
 800be3c:	bb44      	cbnz	r4, 800be90 <_malloc_r+0x88>
 800be3e:	4629      	mov	r1, r5
 800be40:	4630      	mov	r0, r6
 800be42:	f7ff ffbf 	bl	800bdc4 <sbrk_aligned>
 800be46:	1c43      	adds	r3, r0, #1
 800be48:	4604      	mov	r4, r0
 800be4a:	d158      	bne.n	800befe <_malloc_r+0xf6>
 800be4c:	f8d8 4000 	ldr.w	r4, [r8]
 800be50:	4627      	mov	r7, r4
 800be52:	2f00      	cmp	r7, #0
 800be54:	d143      	bne.n	800bede <_malloc_r+0xd6>
 800be56:	2c00      	cmp	r4, #0
 800be58:	d04b      	beq.n	800bef2 <_malloc_r+0xea>
 800be5a:	6823      	ldr	r3, [r4, #0]
 800be5c:	4639      	mov	r1, r7
 800be5e:	4630      	mov	r0, r6
 800be60:	eb04 0903 	add.w	r9, r4, r3
 800be64:	f000 fc8a 	bl	800c77c <_sbrk_r>
 800be68:	4581      	cmp	r9, r0
 800be6a:	d142      	bne.n	800bef2 <_malloc_r+0xea>
 800be6c:	6821      	ldr	r1, [r4, #0]
 800be6e:	1a6d      	subs	r5, r5, r1
 800be70:	4629      	mov	r1, r5
 800be72:	4630      	mov	r0, r6
 800be74:	f7ff ffa6 	bl	800bdc4 <sbrk_aligned>
 800be78:	3001      	adds	r0, #1
 800be7a:	d03a      	beq.n	800bef2 <_malloc_r+0xea>
 800be7c:	6823      	ldr	r3, [r4, #0]
 800be7e:	442b      	add	r3, r5
 800be80:	6023      	str	r3, [r4, #0]
 800be82:	f8d8 3000 	ldr.w	r3, [r8]
 800be86:	685a      	ldr	r2, [r3, #4]
 800be88:	bb62      	cbnz	r2, 800bee4 <_malloc_r+0xdc>
 800be8a:	f8c8 7000 	str.w	r7, [r8]
 800be8e:	e00f      	b.n	800beb0 <_malloc_r+0xa8>
 800be90:	6822      	ldr	r2, [r4, #0]
 800be92:	1b52      	subs	r2, r2, r5
 800be94:	d420      	bmi.n	800bed8 <_malloc_r+0xd0>
 800be96:	2a0b      	cmp	r2, #11
 800be98:	d917      	bls.n	800beca <_malloc_r+0xc2>
 800be9a:	1961      	adds	r1, r4, r5
 800be9c:	42a3      	cmp	r3, r4
 800be9e:	6025      	str	r5, [r4, #0]
 800bea0:	bf18      	it	ne
 800bea2:	6059      	strne	r1, [r3, #4]
 800bea4:	6863      	ldr	r3, [r4, #4]
 800bea6:	bf08      	it	eq
 800bea8:	f8c8 1000 	streq.w	r1, [r8]
 800beac:	5162      	str	r2, [r4, r5]
 800beae:	604b      	str	r3, [r1, #4]
 800beb0:	4630      	mov	r0, r6
 800beb2:	f000 f82f 	bl	800bf14 <__malloc_unlock>
 800beb6:	f104 000b 	add.w	r0, r4, #11
 800beba:	1d23      	adds	r3, r4, #4
 800bebc:	f020 0007 	bic.w	r0, r0, #7
 800bec0:	1ac2      	subs	r2, r0, r3
 800bec2:	bf1c      	itt	ne
 800bec4:	1a1b      	subne	r3, r3, r0
 800bec6:	50a3      	strne	r3, [r4, r2]
 800bec8:	e7af      	b.n	800be2a <_malloc_r+0x22>
 800beca:	6862      	ldr	r2, [r4, #4]
 800becc:	42a3      	cmp	r3, r4
 800bece:	bf0c      	ite	eq
 800bed0:	f8c8 2000 	streq.w	r2, [r8]
 800bed4:	605a      	strne	r2, [r3, #4]
 800bed6:	e7eb      	b.n	800beb0 <_malloc_r+0xa8>
 800bed8:	4623      	mov	r3, r4
 800beda:	6864      	ldr	r4, [r4, #4]
 800bedc:	e7ae      	b.n	800be3c <_malloc_r+0x34>
 800bede:	463c      	mov	r4, r7
 800bee0:	687f      	ldr	r7, [r7, #4]
 800bee2:	e7b6      	b.n	800be52 <_malloc_r+0x4a>
 800bee4:	461a      	mov	r2, r3
 800bee6:	685b      	ldr	r3, [r3, #4]
 800bee8:	42a3      	cmp	r3, r4
 800beea:	d1fb      	bne.n	800bee4 <_malloc_r+0xdc>
 800beec:	2300      	movs	r3, #0
 800beee:	6053      	str	r3, [r2, #4]
 800bef0:	e7de      	b.n	800beb0 <_malloc_r+0xa8>
 800bef2:	230c      	movs	r3, #12
 800bef4:	6033      	str	r3, [r6, #0]
 800bef6:	4630      	mov	r0, r6
 800bef8:	f000 f80c 	bl	800bf14 <__malloc_unlock>
 800befc:	e794      	b.n	800be28 <_malloc_r+0x20>
 800befe:	6005      	str	r5, [r0, #0]
 800bf00:	e7d6      	b.n	800beb0 <_malloc_r+0xa8>
 800bf02:	bf00      	nop
 800bf04:	200019fc 	.word	0x200019fc

0800bf08 <__malloc_lock>:
 800bf08:	4801      	ldr	r0, [pc, #4]	@ (800bf10 <__malloc_lock+0x8>)
 800bf0a:	f7ff b8ba 	b.w	800b082 <__retarget_lock_acquire_recursive>
 800bf0e:	bf00      	nop
 800bf10:	200019f4 	.word	0x200019f4

0800bf14 <__malloc_unlock>:
 800bf14:	4801      	ldr	r0, [pc, #4]	@ (800bf1c <__malloc_unlock+0x8>)
 800bf16:	f7ff b8b5 	b.w	800b084 <__retarget_lock_release_recursive>
 800bf1a:	bf00      	nop
 800bf1c:	200019f4 	.word	0x200019f4

0800bf20 <_Balloc>:
 800bf20:	b570      	push	{r4, r5, r6, lr}
 800bf22:	69c6      	ldr	r6, [r0, #28]
 800bf24:	4604      	mov	r4, r0
 800bf26:	460d      	mov	r5, r1
 800bf28:	b976      	cbnz	r6, 800bf48 <_Balloc+0x28>
 800bf2a:	2010      	movs	r0, #16
 800bf2c:	f7ff ff42 	bl	800bdb4 <malloc>
 800bf30:	4602      	mov	r2, r0
 800bf32:	61e0      	str	r0, [r4, #28]
 800bf34:	b920      	cbnz	r0, 800bf40 <_Balloc+0x20>
 800bf36:	4b18      	ldr	r3, [pc, #96]	@ (800bf98 <_Balloc+0x78>)
 800bf38:	4818      	ldr	r0, [pc, #96]	@ (800bf9c <_Balloc+0x7c>)
 800bf3a:	216b      	movs	r1, #107	@ 0x6b
 800bf3c:	f000 fc3c 	bl	800c7b8 <__assert_func>
 800bf40:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800bf44:	6006      	str	r6, [r0, #0]
 800bf46:	60c6      	str	r6, [r0, #12]
 800bf48:	69e6      	ldr	r6, [r4, #28]
 800bf4a:	68f3      	ldr	r3, [r6, #12]
 800bf4c:	b183      	cbz	r3, 800bf70 <_Balloc+0x50>
 800bf4e:	69e3      	ldr	r3, [r4, #28]
 800bf50:	68db      	ldr	r3, [r3, #12]
 800bf52:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800bf56:	b9b8      	cbnz	r0, 800bf88 <_Balloc+0x68>
 800bf58:	2101      	movs	r1, #1
 800bf5a:	fa01 f605 	lsl.w	r6, r1, r5
 800bf5e:	1d72      	adds	r2, r6, #5
 800bf60:	0092      	lsls	r2, r2, #2
 800bf62:	4620      	mov	r0, r4
 800bf64:	f000 fc46 	bl	800c7f4 <_calloc_r>
 800bf68:	b160      	cbz	r0, 800bf84 <_Balloc+0x64>
 800bf6a:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800bf6e:	e00e      	b.n	800bf8e <_Balloc+0x6e>
 800bf70:	2221      	movs	r2, #33	@ 0x21
 800bf72:	2104      	movs	r1, #4
 800bf74:	4620      	mov	r0, r4
 800bf76:	f000 fc3d 	bl	800c7f4 <_calloc_r>
 800bf7a:	69e3      	ldr	r3, [r4, #28]
 800bf7c:	60f0      	str	r0, [r6, #12]
 800bf7e:	68db      	ldr	r3, [r3, #12]
 800bf80:	2b00      	cmp	r3, #0
 800bf82:	d1e4      	bne.n	800bf4e <_Balloc+0x2e>
 800bf84:	2000      	movs	r0, #0
 800bf86:	bd70      	pop	{r4, r5, r6, pc}
 800bf88:	6802      	ldr	r2, [r0, #0]
 800bf8a:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800bf8e:	2300      	movs	r3, #0
 800bf90:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800bf94:	e7f7      	b.n	800bf86 <_Balloc+0x66>
 800bf96:	bf00      	nop
 800bf98:	0800ce79 	.word	0x0800ce79
 800bf9c:	0800cef9 	.word	0x0800cef9

0800bfa0 <_Bfree>:
 800bfa0:	b570      	push	{r4, r5, r6, lr}
 800bfa2:	69c6      	ldr	r6, [r0, #28]
 800bfa4:	4605      	mov	r5, r0
 800bfa6:	460c      	mov	r4, r1
 800bfa8:	b976      	cbnz	r6, 800bfc8 <_Bfree+0x28>
 800bfaa:	2010      	movs	r0, #16
 800bfac:	f7ff ff02 	bl	800bdb4 <malloc>
 800bfb0:	4602      	mov	r2, r0
 800bfb2:	61e8      	str	r0, [r5, #28]
 800bfb4:	b920      	cbnz	r0, 800bfc0 <_Bfree+0x20>
 800bfb6:	4b09      	ldr	r3, [pc, #36]	@ (800bfdc <_Bfree+0x3c>)
 800bfb8:	4809      	ldr	r0, [pc, #36]	@ (800bfe0 <_Bfree+0x40>)
 800bfba:	218f      	movs	r1, #143	@ 0x8f
 800bfbc:	f000 fbfc 	bl	800c7b8 <__assert_func>
 800bfc0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800bfc4:	6006      	str	r6, [r0, #0]
 800bfc6:	60c6      	str	r6, [r0, #12]
 800bfc8:	b13c      	cbz	r4, 800bfda <_Bfree+0x3a>
 800bfca:	69eb      	ldr	r3, [r5, #28]
 800bfcc:	6862      	ldr	r2, [r4, #4]
 800bfce:	68db      	ldr	r3, [r3, #12]
 800bfd0:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800bfd4:	6021      	str	r1, [r4, #0]
 800bfd6:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800bfda:	bd70      	pop	{r4, r5, r6, pc}
 800bfdc:	0800ce79 	.word	0x0800ce79
 800bfe0:	0800cef9 	.word	0x0800cef9

0800bfe4 <__multadd>:
 800bfe4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800bfe8:	690d      	ldr	r5, [r1, #16]
 800bfea:	4607      	mov	r7, r0
 800bfec:	460c      	mov	r4, r1
 800bfee:	461e      	mov	r6, r3
 800bff0:	f101 0c14 	add.w	ip, r1, #20
 800bff4:	2000      	movs	r0, #0
 800bff6:	f8dc 3000 	ldr.w	r3, [ip]
 800bffa:	b299      	uxth	r1, r3
 800bffc:	fb02 6101 	mla	r1, r2, r1, r6
 800c000:	0c1e      	lsrs	r6, r3, #16
 800c002:	0c0b      	lsrs	r3, r1, #16
 800c004:	fb02 3306 	mla	r3, r2, r6, r3
 800c008:	b289      	uxth	r1, r1
 800c00a:	3001      	adds	r0, #1
 800c00c:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800c010:	4285      	cmp	r5, r0
 800c012:	f84c 1b04 	str.w	r1, [ip], #4
 800c016:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800c01a:	dcec      	bgt.n	800bff6 <__multadd+0x12>
 800c01c:	b30e      	cbz	r6, 800c062 <__multadd+0x7e>
 800c01e:	68a3      	ldr	r3, [r4, #8]
 800c020:	42ab      	cmp	r3, r5
 800c022:	dc19      	bgt.n	800c058 <__multadd+0x74>
 800c024:	6861      	ldr	r1, [r4, #4]
 800c026:	4638      	mov	r0, r7
 800c028:	3101      	adds	r1, #1
 800c02a:	f7ff ff79 	bl	800bf20 <_Balloc>
 800c02e:	4680      	mov	r8, r0
 800c030:	b928      	cbnz	r0, 800c03e <__multadd+0x5a>
 800c032:	4602      	mov	r2, r0
 800c034:	4b0c      	ldr	r3, [pc, #48]	@ (800c068 <__multadd+0x84>)
 800c036:	480d      	ldr	r0, [pc, #52]	@ (800c06c <__multadd+0x88>)
 800c038:	21ba      	movs	r1, #186	@ 0xba
 800c03a:	f000 fbbd 	bl	800c7b8 <__assert_func>
 800c03e:	6922      	ldr	r2, [r4, #16]
 800c040:	3202      	adds	r2, #2
 800c042:	f104 010c 	add.w	r1, r4, #12
 800c046:	0092      	lsls	r2, r2, #2
 800c048:	300c      	adds	r0, #12
 800c04a:	f000 fba7 	bl	800c79c <memcpy>
 800c04e:	4621      	mov	r1, r4
 800c050:	4638      	mov	r0, r7
 800c052:	f7ff ffa5 	bl	800bfa0 <_Bfree>
 800c056:	4644      	mov	r4, r8
 800c058:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800c05c:	3501      	adds	r5, #1
 800c05e:	615e      	str	r6, [r3, #20]
 800c060:	6125      	str	r5, [r4, #16]
 800c062:	4620      	mov	r0, r4
 800c064:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c068:	0800cee8 	.word	0x0800cee8
 800c06c:	0800cef9 	.word	0x0800cef9

0800c070 <__hi0bits>:
 800c070:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 800c074:	4603      	mov	r3, r0
 800c076:	bf36      	itet	cc
 800c078:	0403      	lslcc	r3, r0, #16
 800c07a:	2000      	movcs	r0, #0
 800c07c:	2010      	movcc	r0, #16
 800c07e:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800c082:	bf3c      	itt	cc
 800c084:	021b      	lslcc	r3, r3, #8
 800c086:	3008      	addcc	r0, #8
 800c088:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800c08c:	bf3c      	itt	cc
 800c08e:	011b      	lslcc	r3, r3, #4
 800c090:	3004      	addcc	r0, #4
 800c092:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800c096:	bf3c      	itt	cc
 800c098:	009b      	lslcc	r3, r3, #2
 800c09a:	3002      	addcc	r0, #2
 800c09c:	2b00      	cmp	r3, #0
 800c09e:	db05      	blt.n	800c0ac <__hi0bits+0x3c>
 800c0a0:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 800c0a4:	f100 0001 	add.w	r0, r0, #1
 800c0a8:	bf08      	it	eq
 800c0aa:	2020      	moveq	r0, #32
 800c0ac:	4770      	bx	lr

0800c0ae <__lo0bits>:
 800c0ae:	6803      	ldr	r3, [r0, #0]
 800c0b0:	4602      	mov	r2, r0
 800c0b2:	f013 0007 	ands.w	r0, r3, #7
 800c0b6:	d00b      	beq.n	800c0d0 <__lo0bits+0x22>
 800c0b8:	07d9      	lsls	r1, r3, #31
 800c0ba:	d421      	bmi.n	800c100 <__lo0bits+0x52>
 800c0bc:	0798      	lsls	r0, r3, #30
 800c0be:	bf49      	itett	mi
 800c0c0:	085b      	lsrmi	r3, r3, #1
 800c0c2:	089b      	lsrpl	r3, r3, #2
 800c0c4:	2001      	movmi	r0, #1
 800c0c6:	6013      	strmi	r3, [r2, #0]
 800c0c8:	bf5c      	itt	pl
 800c0ca:	6013      	strpl	r3, [r2, #0]
 800c0cc:	2002      	movpl	r0, #2
 800c0ce:	4770      	bx	lr
 800c0d0:	b299      	uxth	r1, r3
 800c0d2:	b909      	cbnz	r1, 800c0d8 <__lo0bits+0x2a>
 800c0d4:	0c1b      	lsrs	r3, r3, #16
 800c0d6:	2010      	movs	r0, #16
 800c0d8:	b2d9      	uxtb	r1, r3
 800c0da:	b909      	cbnz	r1, 800c0e0 <__lo0bits+0x32>
 800c0dc:	3008      	adds	r0, #8
 800c0de:	0a1b      	lsrs	r3, r3, #8
 800c0e0:	0719      	lsls	r1, r3, #28
 800c0e2:	bf04      	itt	eq
 800c0e4:	091b      	lsreq	r3, r3, #4
 800c0e6:	3004      	addeq	r0, #4
 800c0e8:	0799      	lsls	r1, r3, #30
 800c0ea:	bf04      	itt	eq
 800c0ec:	089b      	lsreq	r3, r3, #2
 800c0ee:	3002      	addeq	r0, #2
 800c0f0:	07d9      	lsls	r1, r3, #31
 800c0f2:	d403      	bmi.n	800c0fc <__lo0bits+0x4e>
 800c0f4:	085b      	lsrs	r3, r3, #1
 800c0f6:	f100 0001 	add.w	r0, r0, #1
 800c0fa:	d003      	beq.n	800c104 <__lo0bits+0x56>
 800c0fc:	6013      	str	r3, [r2, #0]
 800c0fe:	4770      	bx	lr
 800c100:	2000      	movs	r0, #0
 800c102:	4770      	bx	lr
 800c104:	2020      	movs	r0, #32
 800c106:	4770      	bx	lr

0800c108 <__i2b>:
 800c108:	b510      	push	{r4, lr}
 800c10a:	460c      	mov	r4, r1
 800c10c:	2101      	movs	r1, #1
 800c10e:	f7ff ff07 	bl	800bf20 <_Balloc>
 800c112:	4602      	mov	r2, r0
 800c114:	b928      	cbnz	r0, 800c122 <__i2b+0x1a>
 800c116:	4b05      	ldr	r3, [pc, #20]	@ (800c12c <__i2b+0x24>)
 800c118:	4805      	ldr	r0, [pc, #20]	@ (800c130 <__i2b+0x28>)
 800c11a:	f240 1145 	movw	r1, #325	@ 0x145
 800c11e:	f000 fb4b 	bl	800c7b8 <__assert_func>
 800c122:	2301      	movs	r3, #1
 800c124:	6144      	str	r4, [r0, #20]
 800c126:	6103      	str	r3, [r0, #16]
 800c128:	bd10      	pop	{r4, pc}
 800c12a:	bf00      	nop
 800c12c:	0800cee8 	.word	0x0800cee8
 800c130:	0800cef9 	.word	0x0800cef9

0800c134 <__multiply>:
 800c134:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c138:	4614      	mov	r4, r2
 800c13a:	690a      	ldr	r2, [r1, #16]
 800c13c:	6923      	ldr	r3, [r4, #16]
 800c13e:	429a      	cmp	r2, r3
 800c140:	bfa8      	it	ge
 800c142:	4623      	movge	r3, r4
 800c144:	460f      	mov	r7, r1
 800c146:	bfa4      	itt	ge
 800c148:	460c      	movge	r4, r1
 800c14a:	461f      	movge	r7, r3
 800c14c:	f8d4 a010 	ldr.w	sl, [r4, #16]
 800c150:	f8d7 9010 	ldr.w	r9, [r7, #16]
 800c154:	68a3      	ldr	r3, [r4, #8]
 800c156:	6861      	ldr	r1, [r4, #4]
 800c158:	eb0a 0609 	add.w	r6, sl, r9
 800c15c:	42b3      	cmp	r3, r6
 800c15e:	b085      	sub	sp, #20
 800c160:	bfb8      	it	lt
 800c162:	3101      	addlt	r1, #1
 800c164:	f7ff fedc 	bl	800bf20 <_Balloc>
 800c168:	b930      	cbnz	r0, 800c178 <__multiply+0x44>
 800c16a:	4602      	mov	r2, r0
 800c16c:	4b44      	ldr	r3, [pc, #272]	@ (800c280 <__multiply+0x14c>)
 800c16e:	4845      	ldr	r0, [pc, #276]	@ (800c284 <__multiply+0x150>)
 800c170:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 800c174:	f000 fb20 	bl	800c7b8 <__assert_func>
 800c178:	f100 0514 	add.w	r5, r0, #20
 800c17c:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800c180:	462b      	mov	r3, r5
 800c182:	2200      	movs	r2, #0
 800c184:	4543      	cmp	r3, r8
 800c186:	d321      	bcc.n	800c1cc <__multiply+0x98>
 800c188:	f107 0114 	add.w	r1, r7, #20
 800c18c:	f104 0214 	add.w	r2, r4, #20
 800c190:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 800c194:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 800c198:	9302      	str	r3, [sp, #8]
 800c19a:	1b13      	subs	r3, r2, r4
 800c19c:	3b15      	subs	r3, #21
 800c19e:	f023 0303 	bic.w	r3, r3, #3
 800c1a2:	3304      	adds	r3, #4
 800c1a4:	f104 0715 	add.w	r7, r4, #21
 800c1a8:	42ba      	cmp	r2, r7
 800c1aa:	bf38      	it	cc
 800c1ac:	2304      	movcc	r3, #4
 800c1ae:	9301      	str	r3, [sp, #4]
 800c1b0:	9b02      	ldr	r3, [sp, #8]
 800c1b2:	9103      	str	r1, [sp, #12]
 800c1b4:	428b      	cmp	r3, r1
 800c1b6:	d80c      	bhi.n	800c1d2 <__multiply+0x9e>
 800c1b8:	2e00      	cmp	r6, #0
 800c1ba:	dd03      	ble.n	800c1c4 <__multiply+0x90>
 800c1bc:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800c1c0:	2b00      	cmp	r3, #0
 800c1c2:	d05b      	beq.n	800c27c <__multiply+0x148>
 800c1c4:	6106      	str	r6, [r0, #16]
 800c1c6:	b005      	add	sp, #20
 800c1c8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c1cc:	f843 2b04 	str.w	r2, [r3], #4
 800c1d0:	e7d8      	b.n	800c184 <__multiply+0x50>
 800c1d2:	f8b1 a000 	ldrh.w	sl, [r1]
 800c1d6:	f1ba 0f00 	cmp.w	sl, #0
 800c1da:	d024      	beq.n	800c226 <__multiply+0xf2>
 800c1dc:	f104 0e14 	add.w	lr, r4, #20
 800c1e0:	46a9      	mov	r9, r5
 800c1e2:	f04f 0c00 	mov.w	ip, #0
 800c1e6:	f85e 7b04 	ldr.w	r7, [lr], #4
 800c1ea:	f8d9 3000 	ldr.w	r3, [r9]
 800c1ee:	fa1f fb87 	uxth.w	fp, r7
 800c1f2:	b29b      	uxth	r3, r3
 800c1f4:	fb0a 330b 	mla	r3, sl, fp, r3
 800c1f8:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 800c1fc:	f8d9 7000 	ldr.w	r7, [r9]
 800c200:	4463      	add	r3, ip
 800c202:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800c206:	fb0a c70b 	mla	r7, sl, fp, ip
 800c20a:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 800c20e:	b29b      	uxth	r3, r3
 800c210:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800c214:	4572      	cmp	r2, lr
 800c216:	f849 3b04 	str.w	r3, [r9], #4
 800c21a:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800c21e:	d8e2      	bhi.n	800c1e6 <__multiply+0xb2>
 800c220:	9b01      	ldr	r3, [sp, #4]
 800c222:	f845 c003 	str.w	ip, [r5, r3]
 800c226:	9b03      	ldr	r3, [sp, #12]
 800c228:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 800c22c:	3104      	adds	r1, #4
 800c22e:	f1b9 0f00 	cmp.w	r9, #0
 800c232:	d021      	beq.n	800c278 <__multiply+0x144>
 800c234:	682b      	ldr	r3, [r5, #0]
 800c236:	f104 0c14 	add.w	ip, r4, #20
 800c23a:	46ae      	mov	lr, r5
 800c23c:	f04f 0a00 	mov.w	sl, #0
 800c240:	f8bc b000 	ldrh.w	fp, [ip]
 800c244:	f8be 7002 	ldrh.w	r7, [lr, #2]
 800c248:	fb09 770b 	mla	r7, r9, fp, r7
 800c24c:	4457      	add	r7, sl
 800c24e:	b29b      	uxth	r3, r3
 800c250:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800c254:	f84e 3b04 	str.w	r3, [lr], #4
 800c258:	f85c 3b04 	ldr.w	r3, [ip], #4
 800c25c:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800c260:	f8be 3000 	ldrh.w	r3, [lr]
 800c264:	fb09 330a 	mla	r3, r9, sl, r3
 800c268:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 800c26c:	4562      	cmp	r2, ip
 800c26e:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800c272:	d8e5      	bhi.n	800c240 <__multiply+0x10c>
 800c274:	9f01      	ldr	r7, [sp, #4]
 800c276:	51eb      	str	r3, [r5, r7]
 800c278:	3504      	adds	r5, #4
 800c27a:	e799      	b.n	800c1b0 <__multiply+0x7c>
 800c27c:	3e01      	subs	r6, #1
 800c27e:	e79b      	b.n	800c1b8 <__multiply+0x84>
 800c280:	0800cee8 	.word	0x0800cee8
 800c284:	0800cef9 	.word	0x0800cef9

0800c288 <__pow5mult>:
 800c288:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c28c:	4615      	mov	r5, r2
 800c28e:	f012 0203 	ands.w	r2, r2, #3
 800c292:	4607      	mov	r7, r0
 800c294:	460e      	mov	r6, r1
 800c296:	d007      	beq.n	800c2a8 <__pow5mult+0x20>
 800c298:	4c25      	ldr	r4, [pc, #148]	@ (800c330 <__pow5mult+0xa8>)
 800c29a:	3a01      	subs	r2, #1
 800c29c:	2300      	movs	r3, #0
 800c29e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800c2a2:	f7ff fe9f 	bl	800bfe4 <__multadd>
 800c2a6:	4606      	mov	r6, r0
 800c2a8:	10ad      	asrs	r5, r5, #2
 800c2aa:	d03d      	beq.n	800c328 <__pow5mult+0xa0>
 800c2ac:	69fc      	ldr	r4, [r7, #28]
 800c2ae:	b97c      	cbnz	r4, 800c2d0 <__pow5mult+0x48>
 800c2b0:	2010      	movs	r0, #16
 800c2b2:	f7ff fd7f 	bl	800bdb4 <malloc>
 800c2b6:	4602      	mov	r2, r0
 800c2b8:	61f8      	str	r0, [r7, #28]
 800c2ba:	b928      	cbnz	r0, 800c2c8 <__pow5mult+0x40>
 800c2bc:	4b1d      	ldr	r3, [pc, #116]	@ (800c334 <__pow5mult+0xac>)
 800c2be:	481e      	ldr	r0, [pc, #120]	@ (800c338 <__pow5mult+0xb0>)
 800c2c0:	f240 11b3 	movw	r1, #435	@ 0x1b3
 800c2c4:	f000 fa78 	bl	800c7b8 <__assert_func>
 800c2c8:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800c2cc:	6004      	str	r4, [r0, #0]
 800c2ce:	60c4      	str	r4, [r0, #12]
 800c2d0:	f8d7 801c 	ldr.w	r8, [r7, #28]
 800c2d4:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800c2d8:	b94c      	cbnz	r4, 800c2ee <__pow5mult+0x66>
 800c2da:	f240 2171 	movw	r1, #625	@ 0x271
 800c2de:	4638      	mov	r0, r7
 800c2e0:	f7ff ff12 	bl	800c108 <__i2b>
 800c2e4:	2300      	movs	r3, #0
 800c2e6:	f8c8 0008 	str.w	r0, [r8, #8]
 800c2ea:	4604      	mov	r4, r0
 800c2ec:	6003      	str	r3, [r0, #0]
 800c2ee:	f04f 0900 	mov.w	r9, #0
 800c2f2:	07eb      	lsls	r3, r5, #31
 800c2f4:	d50a      	bpl.n	800c30c <__pow5mult+0x84>
 800c2f6:	4631      	mov	r1, r6
 800c2f8:	4622      	mov	r2, r4
 800c2fa:	4638      	mov	r0, r7
 800c2fc:	f7ff ff1a 	bl	800c134 <__multiply>
 800c300:	4631      	mov	r1, r6
 800c302:	4680      	mov	r8, r0
 800c304:	4638      	mov	r0, r7
 800c306:	f7ff fe4b 	bl	800bfa0 <_Bfree>
 800c30a:	4646      	mov	r6, r8
 800c30c:	106d      	asrs	r5, r5, #1
 800c30e:	d00b      	beq.n	800c328 <__pow5mult+0xa0>
 800c310:	6820      	ldr	r0, [r4, #0]
 800c312:	b938      	cbnz	r0, 800c324 <__pow5mult+0x9c>
 800c314:	4622      	mov	r2, r4
 800c316:	4621      	mov	r1, r4
 800c318:	4638      	mov	r0, r7
 800c31a:	f7ff ff0b 	bl	800c134 <__multiply>
 800c31e:	6020      	str	r0, [r4, #0]
 800c320:	f8c0 9000 	str.w	r9, [r0]
 800c324:	4604      	mov	r4, r0
 800c326:	e7e4      	b.n	800c2f2 <__pow5mult+0x6a>
 800c328:	4630      	mov	r0, r6
 800c32a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c32e:	bf00      	nop
 800c330:	0800cf54 	.word	0x0800cf54
 800c334:	0800ce79 	.word	0x0800ce79
 800c338:	0800cef9 	.word	0x0800cef9

0800c33c <__lshift>:
 800c33c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c340:	460c      	mov	r4, r1
 800c342:	6849      	ldr	r1, [r1, #4]
 800c344:	6923      	ldr	r3, [r4, #16]
 800c346:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800c34a:	68a3      	ldr	r3, [r4, #8]
 800c34c:	4607      	mov	r7, r0
 800c34e:	4691      	mov	r9, r2
 800c350:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800c354:	f108 0601 	add.w	r6, r8, #1
 800c358:	42b3      	cmp	r3, r6
 800c35a:	db0b      	blt.n	800c374 <__lshift+0x38>
 800c35c:	4638      	mov	r0, r7
 800c35e:	f7ff fddf 	bl	800bf20 <_Balloc>
 800c362:	4605      	mov	r5, r0
 800c364:	b948      	cbnz	r0, 800c37a <__lshift+0x3e>
 800c366:	4602      	mov	r2, r0
 800c368:	4b28      	ldr	r3, [pc, #160]	@ (800c40c <__lshift+0xd0>)
 800c36a:	4829      	ldr	r0, [pc, #164]	@ (800c410 <__lshift+0xd4>)
 800c36c:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 800c370:	f000 fa22 	bl	800c7b8 <__assert_func>
 800c374:	3101      	adds	r1, #1
 800c376:	005b      	lsls	r3, r3, #1
 800c378:	e7ee      	b.n	800c358 <__lshift+0x1c>
 800c37a:	2300      	movs	r3, #0
 800c37c:	f100 0114 	add.w	r1, r0, #20
 800c380:	f100 0210 	add.w	r2, r0, #16
 800c384:	4618      	mov	r0, r3
 800c386:	4553      	cmp	r3, sl
 800c388:	db33      	blt.n	800c3f2 <__lshift+0xb6>
 800c38a:	6920      	ldr	r0, [r4, #16]
 800c38c:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800c390:	f104 0314 	add.w	r3, r4, #20
 800c394:	f019 091f 	ands.w	r9, r9, #31
 800c398:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800c39c:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800c3a0:	d02b      	beq.n	800c3fa <__lshift+0xbe>
 800c3a2:	f1c9 0e20 	rsb	lr, r9, #32
 800c3a6:	468a      	mov	sl, r1
 800c3a8:	2200      	movs	r2, #0
 800c3aa:	6818      	ldr	r0, [r3, #0]
 800c3ac:	fa00 f009 	lsl.w	r0, r0, r9
 800c3b0:	4310      	orrs	r0, r2
 800c3b2:	f84a 0b04 	str.w	r0, [sl], #4
 800c3b6:	f853 2b04 	ldr.w	r2, [r3], #4
 800c3ba:	459c      	cmp	ip, r3
 800c3bc:	fa22 f20e 	lsr.w	r2, r2, lr
 800c3c0:	d8f3      	bhi.n	800c3aa <__lshift+0x6e>
 800c3c2:	ebac 0304 	sub.w	r3, ip, r4
 800c3c6:	3b15      	subs	r3, #21
 800c3c8:	f023 0303 	bic.w	r3, r3, #3
 800c3cc:	3304      	adds	r3, #4
 800c3ce:	f104 0015 	add.w	r0, r4, #21
 800c3d2:	4584      	cmp	ip, r0
 800c3d4:	bf38      	it	cc
 800c3d6:	2304      	movcc	r3, #4
 800c3d8:	50ca      	str	r2, [r1, r3]
 800c3da:	b10a      	cbz	r2, 800c3e0 <__lshift+0xa4>
 800c3dc:	f108 0602 	add.w	r6, r8, #2
 800c3e0:	3e01      	subs	r6, #1
 800c3e2:	4638      	mov	r0, r7
 800c3e4:	612e      	str	r6, [r5, #16]
 800c3e6:	4621      	mov	r1, r4
 800c3e8:	f7ff fdda 	bl	800bfa0 <_Bfree>
 800c3ec:	4628      	mov	r0, r5
 800c3ee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c3f2:	f842 0f04 	str.w	r0, [r2, #4]!
 800c3f6:	3301      	adds	r3, #1
 800c3f8:	e7c5      	b.n	800c386 <__lshift+0x4a>
 800c3fa:	3904      	subs	r1, #4
 800c3fc:	f853 2b04 	ldr.w	r2, [r3], #4
 800c400:	f841 2f04 	str.w	r2, [r1, #4]!
 800c404:	459c      	cmp	ip, r3
 800c406:	d8f9      	bhi.n	800c3fc <__lshift+0xc0>
 800c408:	e7ea      	b.n	800c3e0 <__lshift+0xa4>
 800c40a:	bf00      	nop
 800c40c:	0800cee8 	.word	0x0800cee8
 800c410:	0800cef9 	.word	0x0800cef9

0800c414 <__mcmp>:
 800c414:	690a      	ldr	r2, [r1, #16]
 800c416:	4603      	mov	r3, r0
 800c418:	6900      	ldr	r0, [r0, #16]
 800c41a:	1a80      	subs	r0, r0, r2
 800c41c:	b530      	push	{r4, r5, lr}
 800c41e:	d10e      	bne.n	800c43e <__mcmp+0x2a>
 800c420:	3314      	adds	r3, #20
 800c422:	3114      	adds	r1, #20
 800c424:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 800c428:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800c42c:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800c430:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800c434:	4295      	cmp	r5, r2
 800c436:	d003      	beq.n	800c440 <__mcmp+0x2c>
 800c438:	d205      	bcs.n	800c446 <__mcmp+0x32>
 800c43a:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800c43e:	bd30      	pop	{r4, r5, pc}
 800c440:	42a3      	cmp	r3, r4
 800c442:	d3f3      	bcc.n	800c42c <__mcmp+0x18>
 800c444:	e7fb      	b.n	800c43e <__mcmp+0x2a>
 800c446:	2001      	movs	r0, #1
 800c448:	e7f9      	b.n	800c43e <__mcmp+0x2a>
	...

0800c44c <__mdiff>:
 800c44c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c450:	4689      	mov	r9, r1
 800c452:	4606      	mov	r6, r0
 800c454:	4611      	mov	r1, r2
 800c456:	4648      	mov	r0, r9
 800c458:	4614      	mov	r4, r2
 800c45a:	f7ff ffdb 	bl	800c414 <__mcmp>
 800c45e:	1e05      	subs	r5, r0, #0
 800c460:	d112      	bne.n	800c488 <__mdiff+0x3c>
 800c462:	4629      	mov	r1, r5
 800c464:	4630      	mov	r0, r6
 800c466:	f7ff fd5b 	bl	800bf20 <_Balloc>
 800c46a:	4602      	mov	r2, r0
 800c46c:	b928      	cbnz	r0, 800c47a <__mdiff+0x2e>
 800c46e:	4b3f      	ldr	r3, [pc, #252]	@ (800c56c <__mdiff+0x120>)
 800c470:	f240 2137 	movw	r1, #567	@ 0x237
 800c474:	483e      	ldr	r0, [pc, #248]	@ (800c570 <__mdiff+0x124>)
 800c476:	f000 f99f 	bl	800c7b8 <__assert_func>
 800c47a:	2301      	movs	r3, #1
 800c47c:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800c480:	4610      	mov	r0, r2
 800c482:	b003      	add	sp, #12
 800c484:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c488:	bfbc      	itt	lt
 800c48a:	464b      	movlt	r3, r9
 800c48c:	46a1      	movlt	r9, r4
 800c48e:	4630      	mov	r0, r6
 800c490:	f8d9 1004 	ldr.w	r1, [r9, #4]
 800c494:	bfba      	itte	lt
 800c496:	461c      	movlt	r4, r3
 800c498:	2501      	movlt	r5, #1
 800c49a:	2500      	movge	r5, #0
 800c49c:	f7ff fd40 	bl	800bf20 <_Balloc>
 800c4a0:	4602      	mov	r2, r0
 800c4a2:	b918      	cbnz	r0, 800c4ac <__mdiff+0x60>
 800c4a4:	4b31      	ldr	r3, [pc, #196]	@ (800c56c <__mdiff+0x120>)
 800c4a6:	f240 2145 	movw	r1, #581	@ 0x245
 800c4aa:	e7e3      	b.n	800c474 <__mdiff+0x28>
 800c4ac:	f8d9 7010 	ldr.w	r7, [r9, #16]
 800c4b0:	6926      	ldr	r6, [r4, #16]
 800c4b2:	60c5      	str	r5, [r0, #12]
 800c4b4:	f109 0310 	add.w	r3, r9, #16
 800c4b8:	f109 0514 	add.w	r5, r9, #20
 800c4bc:	f104 0e14 	add.w	lr, r4, #20
 800c4c0:	f100 0b14 	add.w	fp, r0, #20
 800c4c4:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 800c4c8:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 800c4cc:	9301      	str	r3, [sp, #4]
 800c4ce:	46d9      	mov	r9, fp
 800c4d0:	f04f 0c00 	mov.w	ip, #0
 800c4d4:	9b01      	ldr	r3, [sp, #4]
 800c4d6:	f85e 0b04 	ldr.w	r0, [lr], #4
 800c4da:	f853 af04 	ldr.w	sl, [r3, #4]!
 800c4de:	9301      	str	r3, [sp, #4]
 800c4e0:	fa1f f38a 	uxth.w	r3, sl
 800c4e4:	4619      	mov	r1, r3
 800c4e6:	b283      	uxth	r3, r0
 800c4e8:	1acb      	subs	r3, r1, r3
 800c4ea:	0c00      	lsrs	r0, r0, #16
 800c4ec:	4463      	add	r3, ip
 800c4ee:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 800c4f2:	eb00 4023 	add.w	r0, r0, r3, asr #16
 800c4f6:	b29b      	uxth	r3, r3
 800c4f8:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 800c4fc:	4576      	cmp	r6, lr
 800c4fe:	f849 3b04 	str.w	r3, [r9], #4
 800c502:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800c506:	d8e5      	bhi.n	800c4d4 <__mdiff+0x88>
 800c508:	1b33      	subs	r3, r6, r4
 800c50a:	3b15      	subs	r3, #21
 800c50c:	f023 0303 	bic.w	r3, r3, #3
 800c510:	3415      	adds	r4, #21
 800c512:	3304      	adds	r3, #4
 800c514:	42a6      	cmp	r6, r4
 800c516:	bf38      	it	cc
 800c518:	2304      	movcc	r3, #4
 800c51a:	441d      	add	r5, r3
 800c51c:	445b      	add	r3, fp
 800c51e:	461e      	mov	r6, r3
 800c520:	462c      	mov	r4, r5
 800c522:	4544      	cmp	r4, r8
 800c524:	d30e      	bcc.n	800c544 <__mdiff+0xf8>
 800c526:	f108 0103 	add.w	r1, r8, #3
 800c52a:	1b49      	subs	r1, r1, r5
 800c52c:	f021 0103 	bic.w	r1, r1, #3
 800c530:	3d03      	subs	r5, #3
 800c532:	45a8      	cmp	r8, r5
 800c534:	bf38      	it	cc
 800c536:	2100      	movcc	r1, #0
 800c538:	440b      	add	r3, r1
 800c53a:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800c53e:	b191      	cbz	r1, 800c566 <__mdiff+0x11a>
 800c540:	6117      	str	r7, [r2, #16]
 800c542:	e79d      	b.n	800c480 <__mdiff+0x34>
 800c544:	f854 1b04 	ldr.w	r1, [r4], #4
 800c548:	46e6      	mov	lr, ip
 800c54a:	0c08      	lsrs	r0, r1, #16
 800c54c:	fa1c fc81 	uxtah	ip, ip, r1
 800c550:	4471      	add	r1, lr
 800c552:	eb00 402c 	add.w	r0, r0, ip, asr #16
 800c556:	b289      	uxth	r1, r1
 800c558:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800c55c:	f846 1b04 	str.w	r1, [r6], #4
 800c560:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800c564:	e7dd      	b.n	800c522 <__mdiff+0xd6>
 800c566:	3f01      	subs	r7, #1
 800c568:	e7e7      	b.n	800c53a <__mdiff+0xee>
 800c56a:	bf00      	nop
 800c56c:	0800cee8 	.word	0x0800cee8
 800c570:	0800cef9 	.word	0x0800cef9

0800c574 <__d2b>:
 800c574:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800c578:	460f      	mov	r7, r1
 800c57a:	2101      	movs	r1, #1
 800c57c:	ec59 8b10 	vmov	r8, r9, d0
 800c580:	4616      	mov	r6, r2
 800c582:	f7ff fccd 	bl	800bf20 <_Balloc>
 800c586:	4604      	mov	r4, r0
 800c588:	b930      	cbnz	r0, 800c598 <__d2b+0x24>
 800c58a:	4602      	mov	r2, r0
 800c58c:	4b23      	ldr	r3, [pc, #140]	@ (800c61c <__d2b+0xa8>)
 800c58e:	4824      	ldr	r0, [pc, #144]	@ (800c620 <__d2b+0xac>)
 800c590:	f240 310f 	movw	r1, #783	@ 0x30f
 800c594:	f000 f910 	bl	800c7b8 <__assert_func>
 800c598:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800c59c:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800c5a0:	b10d      	cbz	r5, 800c5a6 <__d2b+0x32>
 800c5a2:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800c5a6:	9301      	str	r3, [sp, #4]
 800c5a8:	f1b8 0300 	subs.w	r3, r8, #0
 800c5ac:	d023      	beq.n	800c5f6 <__d2b+0x82>
 800c5ae:	4668      	mov	r0, sp
 800c5b0:	9300      	str	r3, [sp, #0]
 800c5b2:	f7ff fd7c 	bl	800c0ae <__lo0bits>
 800c5b6:	e9dd 1200 	ldrd	r1, r2, [sp]
 800c5ba:	b1d0      	cbz	r0, 800c5f2 <__d2b+0x7e>
 800c5bc:	f1c0 0320 	rsb	r3, r0, #32
 800c5c0:	fa02 f303 	lsl.w	r3, r2, r3
 800c5c4:	430b      	orrs	r3, r1
 800c5c6:	40c2      	lsrs	r2, r0
 800c5c8:	6163      	str	r3, [r4, #20]
 800c5ca:	9201      	str	r2, [sp, #4]
 800c5cc:	9b01      	ldr	r3, [sp, #4]
 800c5ce:	61a3      	str	r3, [r4, #24]
 800c5d0:	2b00      	cmp	r3, #0
 800c5d2:	bf0c      	ite	eq
 800c5d4:	2201      	moveq	r2, #1
 800c5d6:	2202      	movne	r2, #2
 800c5d8:	6122      	str	r2, [r4, #16]
 800c5da:	b1a5      	cbz	r5, 800c606 <__d2b+0x92>
 800c5dc:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 800c5e0:	4405      	add	r5, r0
 800c5e2:	603d      	str	r5, [r7, #0]
 800c5e4:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 800c5e8:	6030      	str	r0, [r6, #0]
 800c5ea:	4620      	mov	r0, r4
 800c5ec:	b003      	add	sp, #12
 800c5ee:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800c5f2:	6161      	str	r1, [r4, #20]
 800c5f4:	e7ea      	b.n	800c5cc <__d2b+0x58>
 800c5f6:	a801      	add	r0, sp, #4
 800c5f8:	f7ff fd59 	bl	800c0ae <__lo0bits>
 800c5fc:	9b01      	ldr	r3, [sp, #4]
 800c5fe:	6163      	str	r3, [r4, #20]
 800c600:	3020      	adds	r0, #32
 800c602:	2201      	movs	r2, #1
 800c604:	e7e8      	b.n	800c5d8 <__d2b+0x64>
 800c606:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800c60a:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 800c60e:	6038      	str	r0, [r7, #0]
 800c610:	6918      	ldr	r0, [r3, #16]
 800c612:	f7ff fd2d 	bl	800c070 <__hi0bits>
 800c616:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800c61a:	e7e5      	b.n	800c5e8 <__d2b+0x74>
 800c61c:	0800cee8 	.word	0x0800cee8
 800c620:	0800cef9 	.word	0x0800cef9

0800c624 <__sflush_r>:
 800c624:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800c628:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c62c:	0716      	lsls	r6, r2, #28
 800c62e:	4605      	mov	r5, r0
 800c630:	460c      	mov	r4, r1
 800c632:	d454      	bmi.n	800c6de <__sflush_r+0xba>
 800c634:	684b      	ldr	r3, [r1, #4]
 800c636:	2b00      	cmp	r3, #0
 800c638:	dc02      	bgt.n	800c640 <__sflush_r+0x1c>
 800c63a:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800c63c:	2b00      	cmp	r3, #0
 800c63e:	dd48      	ble.n	800c6d2 <__sflush_r+0xae>
 800c640:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800c642:	2e00      	cmp	r6, #0
 800c644:	d045      	beq.n	800c6d2 <__sflush_r+0xae>
 800c646:	2300      	movs	r3, #0
 800c648:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800c64c:	682f      	ldr	r7, [r5, #0]
 800c64e:	6a21      	ldr	r1, [r4, #32]
 800c650:	602b      	str	r3, [r5, #0]
 800c652:	d030      	beq.n	800c6b6 <__sflush_r+0x92>
 800c654:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800c656:	89a3      	ldrh	r3, [r4, #12]
 800c658:	0759      	lsls	r1, r3, #29
 800c65a:	d505      	bpl.n	800c668 <__sflush_r+0x44>
 800c65c:	6863      	ldr	r3, [r4, #4]
 800c65e:	1ad2      	subs	r2, r2, r3
 800c660:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800c662:	b10b      	cbz	r3, 800c668 <__sflush_r+0x44>
 800c664:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800c666:	1ad2      	subs	r2, r2, r3
 800c668:	2300      	movs	r3, #0
 800c66a:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800c66c:	6a21      	ldr	r1, [r4, #32]
 800c66e:	4628      	mov	r0, r5
 800c670:	47b0      	blx	r6
 800c672:	1c43      	adds	r3, r0, #1
 800c674:	89a3      	ldrh	r3, [r4, #12]
 800c676:	d106      	bne.n	800c686 <__sflush_r+0x62>
 800c678:	6829      	ldr	r1, [r5, #0]
 800c67a:	291d      	cmp	r1, #29
 800c67c:	d82b      	bhi.n	800c6d6 <__sflush_r+0xb2>
 800c67e:	4a2a      	ldr	r2, [pc, #168]	@ (800c728 <__sflush_r+0x104>)
 800c680:	410a      	asrs	r2, r1
 800c682:	07d6      	lsls	r6, r2, #31
 800c684:	d427      	bmi.n	800c6d6 <__sflush_r+0xb2>
 800c686:	2200      	movs	r2, #0
 800c688:	6062      	str	r2, [r4, #4]
 800c68a:	04d9      	lsls	r1, r3, #19
 800c68c:	6922      	ldr	r2, [r4, #16]
 800c68e:	6022      	str	r2, [r4, #0]
 800c690:	d504      	bpl.n	800c69c <__sflush_r+0x78>
 800c692:	1c42      	adds	r2, r0, #1
 800c694:	d101      	bne.n	800c69a <__sflush_r+0x76>
 800c696:	682b      	ldr	r3, [r5, #0]
 800c698:	b903      	cbnz	r3, 800c69c <__sflush_r+0x78>
 800c69a:	6560      	str	r0, [r4, #84]	@ 0x54
 800c69c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800c69e:	602f      	str	r7, [r5, #0]
 800c6a0:	b1b9      	cbz	r1, 800c6d2 <__sflush_r+0xae>
 800c6a2:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800c6a6:	4299      	cmp	r1, r3
 800c6a8:	d002      	beq.n	800c6b0 <__sflush_r+0x8c>
 800c6aa:	4628      	mov	r0, r5
 800c6ac:	f7ff fb38 	bl	800bd20 <_free_r>
 800c6b0:	2300      	movs	r3, #0
 800c6b2:	6363      	str	r3, [r4, #52]	@ 0x34
 800c6b4:	e00d      	b.n	800c6d2 <__sflush_r+0xae>
 800c6b6:	2301      	movs	r3, #1
 800c6b8:	4628      	mov	r0, r5
 800c6ba:	47b0      	blx	r6
 800c6bc:	4602      	mov	r2, r0
 800c6be:	1c50      	adds	r0, r2, #1
 800c6c0:	d1c9      	bne.n	800c656 <__sflush_r+0x32>
 800c6c2:	682b      	ldr	r3, [r5, #0]
 800c6c4:	2b00      	cmp	r3, #0
 800c6c6:	d0c6      	beq.n	800c656 <__sflush_r+0x32>
 800c6c8:	2b1d      	cmp	r3, #29
 800c6ca:	d001      	beq.n	800c6d0 <__sflush_r+0xac>
 800c6cc:	2b16      	cmp	r3, #22
 800c6ce:	d11e      	bne.n	800c70e <__sflush_r+0xea>
 800c6d0:	602f      	str	r7, [r5, #0]
 800c6d2:	2000      	movs	r0, #0
 800c6d4:	e022      	b.n	800c71c <__sflush_r+0xf8>
 800c6d6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800c6da:	b21b      	sxth	r3, r3
 800c6dc:	e01b      	b.n	800c716 <__sflush_r+0xf2>
 800c6de:	690f      	ldr	r7, [r1, #16]
 800c6e0:	2f00      	cmp	r7, #0
 800c6e2:	d0f6      	beq.n	800c6d2 <__sflush_r+0xae>
 800c6e4:	0793      	lsls	r3, r2, #30
 800c6e6:	680e      	ldr	r6, [r1, #0]
 800c6e8:	bf08      	it	eq
 800c6ea:	694b      	ldreq	r3, [r1, #20]
 800c6ec:	600f      	str	r7, [r1, #0]
 800c6ee:	bf18      	it	ne
 800c6f0:	2300      	movne	r3, #0
 800c6f2:	eba6 0807 	sub.w	r8, r6, r7
 800c6f6:	608b      	str	r3, [r1, #8]
 800c6f8:	f1b8 0f00 	cmp.w	r8, #0
 800c6fc:	dde9      	ble.n	800c6d2 <__sflush_r+0xae>
 800c6fe:	6a21      	ldr	r1, [r4, #32]
 800c700:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800c702:	4643      	mov	r3, r8
 800c704:	463a      	mov	r2, r7
 800c706:	4628      	mov	r0, r5
 800c708:	47b0      	blx	r6
 800c70a:	2800      	cmp	r0, #0
 800c70c:	dc08      	bgt.n	800c720 <__sflush_r+0xfc>
 800c70e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c712:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800c716:	81a3      	strh	r3, [r4, #12]
 800c718:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800c71c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c720:	4407      	add	r7, r0
 800c722:	eba8 0800 	sub.w	r8, r8, r0
 800c726:	e7e7      	b.n	800c6f8 <__sflush_r+0xd4>
 800c728:	dfbffffe 	.word	0xdfbffffe

0800c72c <_fflush_r>:
 800c72c:	b538      	push	{r3, r4, r5, lr}
 800c72e:	690b      	ldr	r3, [r1, #16]
 800c730:	4605      	mov	r5, r0
 800c732:	460c      	mov	r4, r1
 800c734:	b913      	cbnz	r3, 800c73c <_fflush_r+0x10>
 800c736:	2500      	movs	r5, #0
 800c738:	4628      	mov	r0, r5
 800c73a:	bd38      	pop	{r3, r4, r5, pc}
 800c73c:	b118      	cbz	r0, 800c746 <_fflush_r+0x1a>
 800c73e:	6a03      	ldr	r3, [r0, #32]
 800c740:	b90b      	cbnz	r3, 800c746 <_fflush_r+0x1a>
 800c742:	f7fe fba7 	bl	800ae94 <__sinit>
 800c746:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c74a:	2b00      	cmp	r3, #0
 800c74c:	d0f3      	beq.n	800c736 <_fflush_r+0xa>
 800c74e:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800c750:	07d0      	lsls	r0, r2, #31
 800c752:	d404      	bmi.n	800c75e <_fflush_r+0x32>
 800c754:	0599      	lsls	r1, r3, #22
 800c756:	d402      	bmi.n	800c75e <_fflush_r+0x32>
 800c758:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800c75a:	f7fe fc92 	bl	800b082 <__retarget_lock_acquire_recursive>
 800c75e:	4628      	mov	r0, r5
 800c760:	4621      	mov	r1, r4
 800c762:	f7ff ff5f 	bl	800c624 <__sflush_r>
 800c766:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800c768:	07da      	lsls	r2, r3, #31
 800c76a:	4605      	mov	r5, r0
 800c76c:	d4e4      	bmi.n	800c738 <_fflush_r+0xc>
 800c76e:	89a3      	ldrh	r3, [r4, #12]
 800c770:	059b      	lsls	r3, r3, #22
 800c772:	d4e1      	bmi.n	800c738 <_fflush_r+0xc>
 800c774:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800c776:	f7fe fc85 	bl	800b084 <__retarget_lock_release_recursive>
 800c77a:	e7dd      	b.n	800c738 <_fflush_r+0xc>

0800c77c <_sbrk_r>:
 800c77c:	b538      	push	{r3, r4, r5, lr}
 800c77e:	4d06      	ldr	r5, [pc, #24]	@ (800c798 <_sbrk_r+0x1c>)
 800c780:	2300      	movs	r3, #0
 800c782:	4604      	mov	r4, r0
 800c784:	4608      	mov	r0, r1
 800c786:	602b      	str	r3, [r5, #0]
 800c788:	f7f5 ff26 	bl	80025d8 <_sbrk>
 800c78c:	1c43      	adds	r3, r0, #1
 800c78e:	d102      	bne.n	800c796 <_sbrk_r+0x1a>
 800c790:	682b      	ldr	r3, [r5, #0]
 800c792:	b103      	cbz	r3, 800c796 <_sbrk_r+0x1a>
 800c794:	6023      	str	r3, [r4, #0]
 800c796:	bd38      	pop	{r3, r4, r5, pc}
 800c798:	200019f0 	.word	0x200019f0

0800c79c <memcpy>:
 800c79c:	440a      	add	r2, r1
 800c79e:	4291      	cmp	r1, r2
 800c7a0:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
 800c7a4:	d100      	bne.n	800c7a8 <memcpy+0xc>
 800c7a6:	4770      	bx	lr
 800c7a8:	b510      	push	{r4, lr}
 800c7aa:	f811 4b01 	ldrb.w	r4, [r1], #1
 800c7ae:	f803 4f01 	strb.w	r4, [r3, #1]!
 800c7b2:	4291      	cmp	r1, r2
 800c7b4:	d1f9      	bne.n	800c7aa <memcpy+0xe>
 800c7b6:	bd10      	pop	{r4, pc}

0800c7b8 <__assert_func>:
 800c7b8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800c7ba:	4614      	mov	r4, r2
 800c7bc:	461a      	mov	r2, r3
 800c7be:	4b09      	ldr	r3, [pc, #36]	@ (800c7e4 <__assert_func+0x2c>)
 800c7c0:	681b      	ldr	r3, [r3, #0]
 800c7c2:	4605      	mov	r5, r0
 800c7c4:	68d8      	ldr	r0, [r3, #12]
 800c7c6:	b954      	cbnz	r4, 800c7de <__assert_func+0x26>
 800c7c8:	4b07      	ldr	r3, [pc, #28]	@ (800c7e8 <__assert_func+0x30>)
 800c7ca:	461c      	mov	r4, r3
 800c7cc:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800c7d0:	9100      	str	r1, [sp, #0]
 800c7d2:	462b      	mov	r3, r5
 800c7d4:	4905      	ldr	r1, [pc, #20]	@ (800c7ec <__assert_func+0x34>)
 800c7d6:	f000 f841 	bl	800c85c <fiprintf>
 800c7da:	f000 f851 	bl	800c880 <abort>
 800c7de:	4b04      	ldr	r3, [pc, #16]	@ (800c7f0 <__assert_func+0x38>)
 800c7e0:	e7f4      	b.n	800c7cc <__assert_func+0x14>
 800c7e2:	bf00      	nop
 800c7e4:	200001a0 	.word	0x200001a0
 800c7e8:	0800d095 	.word	0x0800d095
 800c7ec:	0800d067 	.word	0x0800d067
 800c7f0:	0800d05a 	.word	0x0800d05a

0800c7f4 <_calloc_r>:
 800c7f4:	b570      	push	{r4, r5, r6, lr}
 800c7f6:	fba1 5402 	umull	r5, r4, r1, r2
 800c7fa:	b93c      	cbnz	r4, 800c80c <_calloc_r+0x18>
 800c7fc:	4629      	mov	r1, r5
 800c7fe:	f7ff fb03 	bl	800be08 <_malloc_r>
 800c802:	4606      	mov	r6, r0
 800c804:	b928      	cbnz	r0, 800c812 <_calloc_r+0x1e>
 800c806:	2600      	movs	r6, #0
 800c808:	4630      	mov	r0, r6
 800c80a:	bd70      	pop	{r4, r5, r6, pc}
 800c80c:	220c      	movs	r2, #12
 800c80e:	6002      	str	r2, [r0, #0]
 800c810:	e7f9      	b.n	800c806 <_calloc_r+0x12>
 800c812:	462a      	mov	r2, r5
 800c814:	4621      	mov	r1, r4
 800c816:	f7fe fbb6 	bl	800af86 <memset>
 800c81a:	e7f5      	b.n	800c808 <_calloc_r+0x14>

0800c81c <__ascii_mbtowc>:
 800c81c:	b082      	sub	sp, #8
 800c81e:	b901      	cbnz	r1, 800c822 <__ascii_mbtowc+0x6>
 800c820:	a901      	add	r1, sp, #4
 800c822:	b142      	cbz	r2, 800c836 <__ascii_mbtowc+0x1a>
 800c824:	b14b      	cbz	r3, 800c83a <__ascii_mbtowc+0x1e>
 800c826:	7813      	ldrb	r3, [r2, #0]
 800c828:	600b      	str	r3, [r1, #0]
 800c82a:	7812      	ldrb	r2, [r2, #0]
 800c82c:	1e10      	subs	r0, r2, #0
 800c82e:	bf18      	it	ne
 800c830:	2001      	movne	r0, #1
 800c832:	b002      	add	sp, #8
 800c834:	4770      	bx	lr
 800c836:	4610      	mov	r0, r2
 800c838:	e7fb      	b.n	800c832 <__ascii_mbtowc+0x16>
 800c83a:	f06f 0001 	mvn.w	r0, #1
 800c83e:	e7f8      	b.n	800c832 <__ascii_mbtowc+0x16>

0800c840 <__ascii_wctomb>:
 800c840:	4603      	mov	r3, r0
 800c842:	4608      	mov	r0, r1
 800c844:	b141      	cbz	r1, 800c858 <__ascii_wctomb+0x18>
 800c846:	2aff      	cmp	r2, #255	@ 0xff
 800c848:	d904      	bls.n	800c854 <__ascii_wctomb+0x14>
 800c84a:	228a      	movs	r2, #138	@ 0x8a
 800c84c:	601a      	str	r2, [r3, #0]
 800c84e:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800c852:	4770      	bx	lr
 800c854:	700a      	strb	r2, [r1, #0]
 800c856:	2001      	movs	r0, #1
 800c858:	4770      	bx	lr
	...

0800c85c <fiprintf>:
 800c85c:	b40e      	push	{r1, r2, r3}
 800c85e:	b503      	push	{r0, r1, lr}
 800c860:	4601      	mov	r1, r0
 800c862:	ab03      	add	r3, sp, #12
 800c864:	4805      	ldr	r0, [pc, #20]	@ (800c87c <fiprintf+0x20>)
 800c866:	f853 2b04 	ldr.w	r2, [r3], #4
 800c86a:	6800      	ldr	r0, [r0, #0]
 800c86c:	9301      	str	r3, [sp, #4]
 800c86e:	f000 f837 	bl	800c8e0 <_vfiprintf_r>
 800c872:	b002      	add	sp, #8
 800c874:	f85d eb04 	ldr.w	lr, [sp], #4
 800c878:	b003      	add	sp, #12
 800c87a:	4770      	bx	lr
 800c87c:	200001a0 	.word	0x200001a0

0800c880 <abort>:
 800c880:	b508      	push	{r3, lr}
 800c882:	2006      	movs	r0, #6
 800c884:	f000 fa00 	bl	800cc88 <raise>
 800c888:	2001      	movs	r0, #1
 800c88a:	f7f5 fe2d 	bl	80024e8 <_exit>

0800c88e <__sfputc_r>:
 800c88e:	6893      	ldr	r3, [r2, #8]
 800c890:	3b01      	subs	r3, #1
 800c892:	2b00      	cmp	r3, #0
 800c894:	b410      	push	{r4}
 800c896:	6093      	str	r3, [r2, #8]
 800c898:	da08      	bge.n	800c8ac <__sfputc_r+0x1e>
 800c89a:	6994      	ldr	r4, [r2, #24]
 800c89c:	42a3      	cmp	r3, r4
 800c89e:	db01      	blt.n	800c8a4 <__sfputc_r+0x16>
 800c8a0:	290a      	cmp	r1, #10
 800c8a2:	d103      	bne.n	800c8ac <__sfputc_r+0x1e>
 800c8a4:	f85d 4b04 	ldr.w	r4, [sp], #4
 800c8a8:	f000 b932 	b.w	800cb10 <__swbuf_r>
 800c8ac:	6813      	ldr	r3, [r2, #0]
 800c8ae:	1c58      	adds	r0, r3, #1
 800c8b0:	6010      	str	r0, [r2, #0]
 800c8b2:	7019      	strb	r1, [r3, #0]
 800c8b4:	4608      	mov	r0, r1
 800c8b6:	f85d 4b04 	ldr.w	r4, [sp], #4
 800c8ba:	4770      	bx	lr

0800c8bc <__sfputs_r>:
 800c8bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c8be:	4606      	mov	r6, r0
 800c8c0:	460f      	mov	r7, r1
 800c8c2:	4614      	mov	r4, r2
 800c8c4:	18d5      	adds	r5, r2, r3
 800c8c6:	42ac      	cmp	r4, r5
 800c8c8:	d101      	bne.n	800c8ce <__sfputs_r+0x12>
 800c8ca:	2000      	movs	r0, #0
 800c8cc:	e007      	b.n	800c8de <__sfputs_r+0x22>
 800c8ce:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c8d2:	463a      	mov	r2, r7
 800c8d4:	4630      	mov	r0, r6
 800c8d6:	f7ff ffda 	bl	800c88e <__sfputc_r>
 800c8da:	1c43      	adds	r3, r0, #1
 800c8dc:	d1f3      	bne.n	800c8c6 <__sfputs_r+0xa>
 800c8de:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800c8e0 <_vfiprintf_r>:
 800c8e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c8e4:	460d      	mov	r5, r1
 800c8e6:	b09d      	sub	sp, #116	@ 0x74
 800c8e8:	4614      	mov	r4, r2
 800c8ea:	4698      	mov	r8, r3
 800c8ec:	4606      	mov	r6, r0
 800c8ee:	b118      	cbz	r0, 800c8f8 <_vfiprintf_r+0x18>
 800c8f0:	6a03      	ldr	r3, [r0, #32]
 800c8f2:	b90b      	cbnz	r3, 800c8f8 <_vfiprintf_r+0x18>
 800c8f4:	f7fe face 	bl	800ae94 <__sinit>
 800c8f8:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800c8fa:	07d9      	lsls	r1, r3, #31
 800c8fc:	d405      	bmi.n	800c90a <_vfiprintf_r+0x2a>
 800c8fe:	89ab      	ldrh	r3, [r5, #12]
 800c900:	059a      	lsls	r2, r3, #22
 800c902:	d402      	bmi.n	800c90a <_vfiprintf_r+0x2a>
 800c904:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800c906:	f7fe fbbc 	bl	800b082 <__retarget_lock_acquire_recursive>
 800c90a:	89ab      	ldrh	r3, [r5, #12]
 800c90c:	071b      	lsls	r3, r3, #28
 800c90e:	d501      	bpl.n	800c914 <_vfiprintf_r+0x34>
 800c910:	692b      	ldr	r3, [r5, #16]
 800c912:	b99b      	cbnz	r3, 800c93c <_vfiprintf_r+0x5c>
 800c914:	4629      	mov	r1, r5
 800c916:	4630      	mov	r0, r6
 800c918:	f000 f938 	bl	800cb8c <__swsetup_r>
 800c91c:	b170      	cbz	r0, 800c93c <_vfiprintf_r+0x5c>
 800c91e:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800c920:	07dc      	lsls	r4, r3, #31
 800c922:	d504      	bpl.n	800c92e <_vfiprintf_r+0x4e>
 800c924:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800c928:	b01d      	add	sp, #116	@ 0x74
 800c92a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c92e:	89ab      	ldrh	r3, [r5, #12]
 800c930:	0598      	lsls	r0, r3, #22
 800c932:	d4f7      	bmi.n	800c924 <_vfiprintf_r+0x44>
 800c934:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800c936:	f7fe fba5 	bl	800b084 <__retarget_lock_release_recursive>
 800c93a:	e7f3      	b.n	800c924 <_vfiprintf_r+0x44>
 800c93c:	2300      	movs	r3, #0
 800c93e:	9309      	str	r3, [sp, #36]	@ 0x24
 800c940:	2320      	movs	r3, #32
 800c942:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800c946:	f8cd 800c 	str.w	r8, [sp, #12]
 800c94a:	2330      	movs	r3, #48	@ 0x30
 800c94c:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800cafc <_vfiprintf_r+0x21c>
 800c950:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800c954:	f04f 0901 	mov.w	r9, #1
 800c958:	4623      	mov	r3, r4
 800c95a:	469a      	mov	sl, r3
 800c95c:	f813 2b01 	ldrb.w	r2, [r3], #1
 800c960:	b10a      	cbz	r2, 800c966 <_vfiprintf_r+0x86>
 800c962:	2a25      	cmp	r2, #37	@ 0x25
 800c964:	d1f9      	bne.n	800c95a <_vfiprintf_r+0x7a>
 800c966:	ebba 0b04 	subs.w	fp, sl, r4
 800c96a:	d00b      	beq.n	800c984 <_vfiprintf_r+0xa4>
 800c96c:	465b      	mov	r3, fp
 800c96e:	4622      	mov	r2, r4
 800c970:	4629      	mov	r1, r5
 800c972:	4630      	mov	r0, r6
 800c974:	f7ff ffa2 	bl	800c8bc <__sfputs_r>
 800c978:	3001      	adds	r0, #1
 800c97a:	f000 80a7 	beq.w	800cacc <_vfiprintf_r+0x1ec>
 800c97e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800c980:	445a      	add	r2, fp
 800c982:	9209      	str	r2, [sp, #36]	@ 0x24
 800c984:	f89a 3000 	ldrb.w	r3, [sl]
 800c988:	2b00      	cmp	r3, #0
 800c98a:	f000 809f 	beq.w	800cacc <_vfiprintf_r+0x1ec>
 800c98e:	2300      	movs	r3, #0
 800c990:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800c994:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800c998:	f10a 0a01 	add.w	sl, sl, #1
 800c99c:	9304      	str	r3, [sp, #16]
 800c99e:	9307      	str	r3, [sp, #28]
 800c9a0:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800c9a4:	931a      	str	r3, [sp, #104]	@ 0x68
 800c9a6:	4654      	mov	r4, sl
 800c9a8:	2205      	movs	r2, #5
 800c9aa:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c9ae:	4853      	ldr	r0, [pc, #332]	@ (800cafc <_vfiprintf_r+0x21c>)
 800c9b0:	f7f3 fc36 	bl	8000220 <memchr>
 800c9b4:	9a04      	ldr	r2, [sp, #16]
 800c9b6:	b9d8      	cbnz	r0, 800c9f0 <_vfiprintf_r+0x110>
 800c9b8:	06d1      	lsls	r1, r2, #27
 800c9ba:	bf44      	itt	mi
 800c9bc:	2320      	movmi	r3, #32
 800c9be:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800c9c2:	0713      	lsls	r3, r2, #28
 800c9c4:	bf44      	itt	mi
 800c9c6:	232b      	movmi	r3, #43	@ 0x2b
 800c9c8:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800c9cc:	f89a 3000 	ldrb.w	r3, [sl]
 800c9d0:	2b2a      	cmp	r3, #42	@ 0x2a
 800c9d2:	d015      	beq.n	800ca00 <_vfiprintf_r+0x120>
 800c9d4:	9a07      	ldr	r2, [sp, #28]
 800c9d6:	4654      	mov	r4, sl
 800c9d8:	2000      	movs	r0, #0
 800c9da:	f04f 0c0a 	mov.w	ip, #10
 800c9de:	4621      	mov	r1, r4
 800c9e0:	f811 3b01 	ldrb.w	r3, [r1], #1
 800c9e4:	3b30      	subs	r3, #48	@ 0x30
 800c9e6:	2b09      	cmp	r3, #9
 800c9e8:	d94b      	bls.n	800ca82 <_vfiprintf_r+0x1a2>
 800c9ea:	b1b0      	cbz	r0, 800ca1a <_vfiprintf_r+0x13a>
 800c9ec:	9207      	str	r2, [sp, #28]
 800c9ee:	e014      	b.n	800ca1a <_vfiprintf_r+0x13a>
 800c9f0:	eba0 0308 	sub.w	r3, r0, r8
 800c9f4:	fa09 f303 	lsl.w	r3, r9, r3
 800c9f8:	4313      	orrs	r3, r2
 800c9fa:	9304      	str	r3, [sp, #16]
 800c9fc:	46a2      	mov	sl, r4
 800c9fe:	e7d2      	b.n	800c9a6 <_vfiprintf_r+0xc6>
 800ca00:	9b03      	ldr	r3, [sp, #12]
 800ca02:	1d19      	adds	r1, r3, #4
 800ca04:	681b      	ldr	r3, [r3, #0]
 800ca06:	9103      	str	r1, [sp, #12]
 800ca08:	2b00      	cmp	r3, #0
 800ca0a:	bfbb      	ittet	lt
 800ca0c:	425b      	neglt	r3, r3
 800ca0e:	f042 0202 	orrlt.w	r2, r2, #2
 800ca12:	9307      	strge	r3, [sp, #28]
 800ca14:	9307      	strlt	r3, [sp, #28]
 800ca16:	bfb8      	it	lt
 800ca18:	9204      	strlt	r2, [sp, #16]
 800ca1a:	7823      	ldrb	r3, [r4, #0]
 800ca1c:	2b2e      	cmp	r3, #46	@ 0x2e
 800ca1e:	d10a      	bne.n	800ca36 <_vfiprintf_r+0x156>
 800ca20:	7863      	ldrb	r3, [r4, #1]
 800ca22:	2b2a      	cmp	r3, #42	@ 0x2a
 800ca24:	d132      	bne.n	800ca8c <_vfiprintf_r+0x1ac>
 800ca26:	9b03      	ldr	r3, [sp, #12]
 800ca28:	1d1a      	adds	r2, r3, #4
 800ca2a:	681b      	ldr	r3, [r3, #0]
 800ca2c:	9203      	str	r2, [sp, #12]
 800ca2e:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800ca32:	3402      	adds	r4, #2
 800ca34:	9305      	str	r3, [sp, #20]
 800ca36:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800cb0c <_vfiprintf_r+0x22c>
 800ca3a:	7821      	ldrb	r1, [r4, #0]
 800ca3c:	2203      	movs	r2, #3
 800ca3e:	4650      	mov	r0, sl
 800ca40:	f7f3 fbee 	bl	8000220 <memchr>
 800ca44:	b138      	cbz	r0, 800ca56 <_vfiprintf_r+0x176>
 800ca46:	9b04      	ldr	r3, [sp, #16]
 800ca48:	eba0 000a 	sub.w	r0, r0, sl
 800ca4c:	2240      	movs	r2, #64	@ 0x40
 800ca4e:	4082      	lsls	r2, r0
 800ca50:	4313      	orrs	r3, r2
 800ca52:	3401      	adds	r4, #1
 800ca54:	9304      	str	r3, [sp, #16]
 800ca56:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ca5a:	4829      	ldr	r0, [pc, #164]	@ (800cb00 <_vfiprintf_r+0x220>)
 800ca5c:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800ca60:	2206      	movs	r2, #6
 800ca62:	f7f3 fbdd 	bl	8000220 <memchr>
 800ca66:	2800      	cmp	r0, #0
 800ca68:	d03f      	beq.n	800caea <_vfiprintf_r+0x20a>
 800ca6a:	4b26      	ldr	r3, [pc, #152]	@ (800cb04 <_vfiprintf_r+0x224>)
 800ca6c:	bb1b      	cbnz	r3, 800cab6 <_vfiprintf_r+0x1d6>
 800ca6e:	9b03      	ldr	r3, [sp, #12]
 800ca70:	3307      	adds	r3, #7
 800ca72:	f023 0307 	bic.w	r3, r3, #7
 800ca76:	3308      	adds	r3, #8
 800ca78:	9303      	str	r3, [sp, #12]
 800ca7a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ca7c:	443b      	add	r3, r7
 800ca7e:	9309      	str	r3, [sp, #36]	@ 0x24
 800ca80:	e76a      	b.n	800c958 <_vfiprintf_r+0x78>
 800ca82:	fb0c 3202 	mla	r2, ip, r2, r3
 800ca86:	460c      	mov	r4, r1
 800ca88:	2001      	movs	r0, #1
 800ca8a:	e7a8      	b.n	800c9de <_vfiprintf_r+0xfe>
 800ca8c:	2300      	movs	r3, #0
 800ca8e:	3401      	adds	r4, #1
 800ca90:	9305      	str	r3, [sp, #20]
 800ca92:	4619      	mov	r1, r3
 800ca94:	f04f 0c0a 	mov.w	ip, #10
 800ca98:	4620      	mov	r0, r4
 800ca9a:	f810 2b01 	ldrb.w	r2, [r0], #1
 800ca9e:	3a30      	subs	r2, #48	@ 0x30
 800caa0:	2a09      	cmp	r2, #9
 800caa2:	d903      	bls.n	800caac <_vfiprintf_r+0x1cc>
 800caa4:	2b00      	cmp	r3, #0
 800caa6:	d0c6      	beq.n	800ca36 <_vfiprintf_r+0x156>
 800caa8:	9105      	str	r1, [sp, #20]
 800caaa:	e7c4      	b.n	800ca36 <_vfiprintf_r+0x156>
 800caac:	fb0c 2101 	mla	r1, ip, r1, r2
 800cab0:	4604      	mov	r4, r0
 800cab2:	2301      	movs	r3, #1
 800cab4:	e7f0      	b.n	800ca98 <_vfiprintf_r+0x1b8>
 800cab6:	ab03      	add	r3, sp, #12
 800cab8:	9300      	str	r3, [sp, #0]
 800caba:	462a      	mov	r2, r5
 800cabc:	4b12      	ldr	r3, [pc, #72]	@ (800cb08 <_vfiprintf_r+0x228>)
 800cabe:	a904      	add	r1, sp, #16
 800cac0:	4630      	mov	r0, r6
 800cac2:	f7fd fda3 	bl	800a60c <_printf_float>
 800cac6:	4607      	mov	r7, r0
 800cac8:	1c78      	adds	r0, r7, #1
 800caca:	d1d6      	bne.n	800ca7a <_vfiprintf_r+0x19a>
 800cacc:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800cace:	07d9      	lsls	r1, r3, #31
 800cad0:	d405      	bmi.n	800cade <_vfiprintf_r+0x1fe>
 800cad2:	89ab      	ldrh	r3, [r5, #12]
 800cad4:	059a      	lsls	r2, r3, #22
 800cad6:	d402      	bmi.n	800cade <_vfiprintf_r+0x1fe>
 800cad8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800cada:	f7fe fad3 	bl	800b084 <__retarget_lock_release_recursive>
 800cade:	89ab      	ldrh	r3, [r5, #12]
 800cae0:	065b      	lsls	r3, r3, #25
 800cae2:	f53f af1f 	bmi.w	800c924 <_vfiprintf_r+0x44>
 800cae6:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800cae8:	e71e      	b.n	800c928 <_vfiprintf_r+0x48>
 800caea:	ab03      	add	r3, sp, #12
 800caec:	9300      	str	r3, [sp, #0]
 800caee:	462a      	mov	r2, r5
 800caf0:	4b05      	ldr	r3, [pc, #20]	@ (800cb08 <_vfiprintf_r+0x228>)
 800caf2:	a904      	add	r1, sp, #16
 800caf4:	4630      	mov	r0, r6
 800caf6:	f7fe f821 	bl	800ab3c <_printf_i>
 800cafa:	e7e4      	b.n	800cac6 <_vfiprintf_r+0x1e6>
 800cafc:	0800d197 	.word	0x0800d197
 800cb00:	0800d1a1 	.word	0x0800d1a1
 800cb04:	0800a60d 	.word	0x0800a60d
 800cb08:	0800c8bd 	.word	0x0800c8bd
 800cb0c:	0800d19d 	.word	0x0800d19d

0800cb10 <__swbuf_r>:
 800cb10:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cb12:	460e      	mov	r6, r1
 800cb14:	4614      	mov	r4, r2
 800cb16:	4605      	mov	r5, r0
 800cb18:	b118      	cbz	r0, 800cb22 <__swbuf_r+0x12>
 800cb1a:	6a03      	ldr	r3, [r0, #32]
 800cb1c:	b90b      	cbnz	r3, 800cb22 <__swbuf_r+0x12>
 800cb1e:	f7fe f9b9 	bl	800ae94 <__sinit>
 800cb22:	69a3      	ldr	r3, [r4, #24]
 800cb24:	60a3      	str	r3, [r4, #8]
 800cb26:	89a3      	ldrh	r3, [r4, #12]
 800cb28:	071a      	lsls	r2, r3, #28
 800cb2a:	d501      	bpl.n	800cb30 <__swbuf_r+0x20>
 800cb2c:	6923      	ldr	r3, [r4, #16]
 800cb2e:	b943      	cbnz	r3, 800cb42 <__swbuf_r+0x32>
 800cb30:	4621      	mov	r1, r4
 800cb32:	4628      	mov	r0, r5
 800cb34:	f000 f82a 	bl	800cb8c <__swsetup_r>
 800cb38:	b118      	cbz	r0, 800cb42 <__swbuf_r+0x32>
 800cb3a:	f04f 37ff 	mov.w	r7, #4294967295	@ 0xffffffff
 800cb3e:	4638      	mov	r0, r7
 800cb40:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800cb42:	6823      	ldr	r3, [r4, #0]
 800cb44:	6922      	ldr	r2, [r4, #16]
 800cb46:	1a98      	subs	r0, r3, r2
 800cb48:	6963      	ldr	r3, [r4, #20]
 800cb4a:	b2f6      	uxtb	r6, r6
 800cb4c:	4283      	cmp	r3, r0
 800cb4e:	4637      	mov	r7, r6
 800cb50:	dc05      	bgt.n	800cb5e <__swbuf_r+0x4e>
 800cb52:	4621      	mov	r1, r4
 800cb54:	4628      	mov	r0, r5
 800cb56:	f7ff fde9 	bl	800c72c <_fflush_r>
 800cb5a:	2800      	cmp	r0, #0
 800cb5c:	d1ed      	bne.n	800cb3a <__swbuf_r+0x2a>
 800cb5e:	68a3      	ldr	r3, [r4, #8]
 800cb60:	3b01      	subs	r3, #1
 800cb62:	60a3      	str	r3, [r4, #8]
 800cb64:	6823      	ldr	r3, [r4, #0]
 800cb66:	1c5a      	adds	r2, r3, #1
 800cb68:	6022      	str	r2, [r4, #0]
 800cb6a:	701e      	strb	r6, [r3, #0]
 800cb6c:	6962      	ldr	r2, [r4, #20]
 800cb6e:	1c43      	adds	r3, r0, #1
 800cb70:	429a      	cmp	r2, r3
 800cb72:	d004      	beq.n	800cb7e <__swbuf_r+0x6e>
 800cb74:	89a3      	ldrh	r3, [r4, #12]
 800cb76:	07db      	lsls	r3, r3, #31
 800cb78:	d5e1      	bpl.n	800cb3e <__swbuf_r+0x2e>
 800cb7a:	2e0a      	cmp	r6, #10
 800cb7c:	d1df      	bne.n	800cb3e <__swbuf_r+0x2e>
 800cb7e:	4621      	mov	r1, r4
 800cb80:	4628      	mov	r0, r5
 800cb82:	f7ff fdd3 	bl	800c72c <_fflush_r>
 800cb86:	2800      	cmp	r0, #0
 800cb88:	d0d9      	beq.n	800cb3e <__swbuf_r+0x2e>
 800cb8a:	e7d6      	b.n	800cb3a <__swbuf_r+0x2a>

0800cb8c <__swsetup_r>:
 800cb8c:	b538      	push	{r3, r4, r5, lr}
 800cb8e:	4b29      	ldr	r3, [pc, #164]	@ (800cc34 <__swsetup_r+0xa8>)
 800cb90:	4605      	mov	r5, r0
 800cb92:	6818      	ldr	r0, [r3, #0]
 800cb94:	460c      	mov	r4, r1
 800cb96:	b118      	cbz	r0, 800cba0 <__swsetup_r+0x14>
 800cb98:	6a03      	ldr	r3, [r0, #32]
 800cb9a:	b90b      	cbnz	r3, 800cba0 <__swsetup_r+0x14>
 800cb9c:	f7fe f97a 	bl	800ae94 <__sinit>
 800cba0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800cba4:	0719      	lsls	r1, r3, #28
 800cba6:	d422      	bmi.n	800cbee <__swsetup_r+0x62>
 800cba8:	06da      	lsls	r2, r3, #27
 800cbaa:	d407      	bmi.n	800cbbc <__swsetup_r+0x30>
 800cbac:	2209      	movs	r2, #9
 800cbae:	602a      	str	r2, [r5, #0]
 800cbb0:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800cbb4:	81a3      	strh	r3, [r4, #12]
 800cbb6:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800cbba:	e033      	b.n	800cc24 <__swsetup_r+0x98>
 800cbbc:	0758      	lsls	r0, r3, #29
 800cbbe:	d512      	bpl.n	800cbe6 <__swsetup_r+0x5a>
 800cbc0:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800cbc2:	b141      	cbz	r1, 800cbd6 <__swsetup_r+0x4a>
 800cbc4:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800cbc8:	4299      	cmp	r1, r3
 800cbca:	d002      	beq.n	800cbd2 <__swsetup_r+0x46>
 800cbcc:	4628      	mov	r0, r5
 800cbce:	f7ff f8a7 	bl	800bd20 <_free_r>
 800cbd2:	2300      	movs	r3, #0
 800cbd4:	6363      	str	r3, [r4, #52]	@ 0x34
 800cbd6:	89a3      	ldrh	r3, [r4, #12]
 800cbd8:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800cbdc:	81a3      	strh	r3, [r4, #12]
 800cbde:	2300      	movs	r3, #0
 800cbe0:	6063      	str	r3, [r4, #4]
 800cbe2:	6923      	ldr	r3, [r4, #16]
 800cbe4:	6023      	str	r3, [r4, #0]
 800cbe6:	89a3      	ldrh	r3, [r4, #12]
 800cbe8:	f043 0308 	orr.w	r3, r3, #8
 800cbec:	81a3      	strh	r3, [r4, #12]
 800cbee:	6923      	ldr	r3, [r4, #16]
 800cbf0:	b94b      	cbnz	r3, 800cc06 <__swsetup_r+0x7a>
 800cbf2:	89a3      	ldrh	r3, [r4, #12]
 800cbf4:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800cbf8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800cbfc:	d003      	beq.n	800cc06 <__swsetup_r+0x7a>
 800cbfe:	4621      	mov	r1, r4
 800cc00:	4628      	mov	r0, r5
 800cc02:	f000 f883 	bl	800cd0c <__smakebuf_r>
 800cc06:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800cc0a:	f013 0201 	ands.w	r2, r3, #1
 800cc0e:	d00a      	beq.n	800cc26 <__swsetup_r+0x9a>
 800cc10:	2200      	movs	r2, #0
 800cc12:	60a2      	str	r2, [r4, #8]
 800cc14:	6962      	ldr	r2, [r4, #20]
 800cc16:	4252      	negs	r2, r2
 800cc18:	61a2      	str	r2, [r4, #24]
 800cc1a:	6922      	ldr	r2, [r4, #16]
 800cc1c:	b942      	cbnz	r2, 800cc30 <__swsetup_r+0xa4>
 800cc1e:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800cc22:	d1c5      	bne.n	800cbb0 <__swsetup_r+0x24>
 800cc24:	bd38      	pop	{r3, r4, r5, pc}
 800cc26:	0799      	lsls	r1, r3, #30
 800cc28:	bf58      	it	pl
 800cc2a:	6962      	ldrpl	r2, [r4, #20]
 800cc2c:	60a2      	str	r2, [r4, #8]
 800cc2e:	e7f4      	b.n	800cc1a <__swsetup_r+0x8e>
 800cc30:	2000      	movs	r0, #0
 800cc32:	e7f7      	b.n	800cc24 <__swsetup_r+0x98>
 800cc34:	200001a0 	.word	0x200001a0

0800cc38 <_raise_r>:
 800cc38:	291f      	cmp	r1, #31
 800cc3a:	b538      	push	{r3, r4, r5, lr}
 800cc3c:	4605      	mov	r5, r0
 800cc3e:	460c      	mov	r4, r1
 800cc40:	d904      	bls.n	800cc4c <_raise_r+0x14>
 800cc42:	2316      	movs	r3, #22
 800cc44:	6003      	str	r3, [r0, #0]
 800cc46:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800cc4a:	bd38      	pop	{r3, r4, r5, pc}
 800cc4c:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800cc4e:	b112      	cbz	r2, 800cc56 <_raise_r+0x1e>
 800cc50:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800cc54:	b94b      	cbnz	r3, 800cc6a <_raise_r+0x32>
 800cc56:	4628      	mov	r0, r5
 800cc58:	f000 f830 	bl	800ccbc <_getpid_r>
 800cc5c:	4622      	mov	r2, r4
 800cc5e:	4601      	mov	r1, r0
 800cc60:	4628      	mov	r0, r5
 800cc62:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800cc66:	f000 b817 	b.w	800cc98 <_kill_r>
 800cc6a:	2b01      	cmp	r3, #1
 800cc6c:	d00a      	beq.n	800cc84 <_raise_r+0x4c>
 800cc6e:	1c59      	adds	r1, r3, #1
 800cc70:	d103      	bne.n	800cc7a <_raise_r+0x42>
 800cc72:	2316      	movs	r3, #22
 800cc74:	6003      	str	r3, [r0, #0]
 800cc76:	2001      	movs	r0, #1
 800cc78:	e7e7      	b.n	800cc4a <_raise_r+0x12>
 800cc7a:	2100      	movs	r1, #0
 800cc7c:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800cc80:	4620      	mov	r0, r4
 800cc82:	4798      	blx	r3
 800cc84:	2000      	movs	r0, #0
 800cc86:	e7e0      	b.n	800cc4a <_raise_r+0x12>

0800cc88 <raise>:
 800cc88:	4b02      	ldr	r3, [pc, #8]	@ (800cc94 <raise+0xc>)
 800cc8a:	4601      	mov	r1, r0
 800cc8c:	6818      	ldr	r0, [r3, #0]
 800cc8e:	f7ff bfd3 	b.w	800cc38 <_raise_r>
 800cc92:	bf00      	nop
 800cc94:	200001a0 	.word	0x200001a0

0800cc98 <_kill_r>:
 800cc98:	b538      	push	{r3, r4, r5, lr}
 800cc9a:	4d07      	ldr	r5, [pc, #28]	@ (800ccb8 <_kill_r+0x20>)
 800cc9c:	2300      	movs	r3, #0
 800cc9e:	4604      	mov	r4, r0
 800cca0:	4608      	mov	r0, r1
 800cca2:	4611      	mov	r1, r2
 800cca4:	602b      	str	r3, [r5, #0]
 800cca6:	f7f5 fc0f 	bl	80024c8 <_kill>
 800ccaa:	1c43      	adds	r3, r0, #1
 800ccac:	d102      	bne.n	800ccb4 <_kill_r+0x1c>
 800ccae:	682b      	ldr	r3, [r5, #0]
 800ccb0:	b103      	cbz	r3, 800ccb4 <_kill_r+0x1c>
 800ccb2:	6023      	str	r3, [r4, #0]
 800ccb4:	bd38      	pop	{r3, r4, r5, pc}
 800ccb6:	bf00      	nop
 800ccb8:	200019f0 	.word	0x200019f0

0800ccbc <_getpid_r>:
 800ccbc:	f7f5 bbfc 	b.w	80024b8 <_getpid>

0800ccc0 <__swhatbuf_r>:
 800ccc0:	b570      	push	{r4, r5, r6, lr}
 800ccc2:	460c      	mov	r4, r1
 800ccc4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ccc8:	2900      	cmp	r1, #0
 800ccca:	b096      	sub	sp, #88	@ 0x58
 800cccc:	4615      	mov	r5, r2
 800ccce:	461e      	mov	r6, r3
 800ccd0:	da0d      	bge.n	800ccee <__swhatbuf_r+0x2e>
 800ccd2:	89a3      	ldrh	r3, [r4, #12]
 800ccd4:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800ccd8:	f04f 0100 	mov.w	r1, #0
 800ccdc:	bf14      	ite	ne
 800ccde:	2340      	movne	r3, #64	@ 0x40
 800cce0:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800cce4:	2000      	movs	r0, #0
 800cce6:	6031      	str	r1, [r6, #0]
 800cce8:	602b      	str	r3, [r5, #0]
 800ccea:	b016      	add	sp, #88	@ 0x58
 800ccec:	bd70      	pop	{r4, r5, r6, pc}
 800ccee:	466a      	mov	r2, sp
 800ccf0:	f000 f848 	bl	800cd84 <_fstat_r>
 800ccf4:	2800      	cmp	r0, #0
 800ccf6:	dbec      	blt.n	800ccd2 <__swhatbuf_r+0x12>
 800ccf8:	9901      	ldr	r1, [sp, #4]
 800ccfa:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800ccfe:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800cd02:	4259      	negs	r1, r3
 800cd04:	4159      	adcs	r1, r3
 800cd06:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800cd0a:	e7eb      	b.n	800cce4 <__swhatbuf_r+0x24>

0800cd0c <__smakebuf_r>:
 800cd0c:	898b      	ldrh	r3, [r1, #12]
 800cd0e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800cd10:	079d      	lsls	r5, r3, #30
 800cd12:	4606      	mov	r6, r0
 800cd14:	460c      	mov	r4, r1
 800cd16:	d507      	bpl.n	800cd28 <__smakebuf_r+0x1c>
 800cd18:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800cd1c:	6023      	str	r3, [r4, #0]
 800cd1e:	6123      	str	r3, [r4, #16]
 800cd20:	2301      	movs	r3, #1
 800cd22:	6163      	str	r3, [r4, #20]
 800cd24:	b003      	add	sp, #12
 800cd26:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800cd28:	ab01      	add	r3, sp, #4
 800cd2a:	466a      	mov	r2, sp
 800cd2c:	f7ff ffc8 	bl	800ccc0 <__swhatbuf_r>
 800cd30:	9f00      	ldr	r7, [sp, #0]
 800cd32:	4605      	mov	r5, r0
 800cd34:	4639      	mov	r1, r7
 800cd36:	4630      	mov	r0, r6
 800cd38:	f7ff f866 	bl	800be08 <_malloc_r>
 800cd3c:	b948      	cbnz	r0, 800cd52 <__smakebuf_r+0x46>
 800cd3e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800cd42:	059a      	lsls	r2, r3, #22
 800cd44:	d4ee      	bmi.n	800cd24 <__smakebuf_r+0x18>
 800cd46:	f023 0303 	bic.w	r3, r3, #3
 800cd4a:	f043 0302 	orr.w	r3, r3, #2
 800cd4e:	81a3      	strh	r3, [r4, #12]
 800cd50:	e7e2      	b.n	800cd18 <__smakebuf_r+0xc>
 800cd52:	89a3      	ldrh	r3, [r4, #12]
 800cd54:	6020      	str	r0, [r4, #0]
 800cd56:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800cd5a:	81a3      	strh	r3, [r4, #12]
 800cd5c:	9b01      	ldr	r3, [sp, #4]
 800cd5e:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800cd62:	b15b      	cbz	r3, 800cd7c <__smakebuf_r+0x70>
 800cd64:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800cd68:	4630      	mov	r0, r6
 800cd6a:	f000 f81d 	bl	800cda8 <_isatty_r>
 800cd6e:	b128      	cbz	r0, 800cd7c <__smakebuf_r+0x70>
 800cd70:	89a3      	ldrh	r3, [r4, #12]
 800cd72:	f023 0303 	bic.w	r3, r3, #3
 800cd76:	f043 0301 	orr.w	r3, r3, #1
 800cd7a:	81a3      	strh	r3, [r4, #12]
 800cd7c:	89a3      	ldrh	r3, [r4, #12]
 800cd7e:	431d      	orrs	r5, r3
 800cd80:	81a5      	strh	r5, [r4, #12]
 800cd82:	e7cf      	b.n	800cd24 <__smakebuf_r+0x18>

0800cd84 <_fstat_r>:
 800cd84:	b538      	push	{r3, r4, r5, lr}
 800cd86:	4d07      	ldr	r5, [pc, #28]	@ (800cda4 <_fstat_r+0x20>)
 800cd88:	2300      	movs	r3, #0
 800cd8a:	4604      	mov	r4, r0
 800cd8c:	4608      	mov	r0, r1
 800cd8e:	4611      	mov	r1, r2
 800cd90:	602b      	str	r3, [r5, #0]
 800cd92:	f7f5 fbf9 	bl	8002588 <_fstat>
 800cd96:	1c43      	adds	r3, r0, #1
 800cd98:	d102      	bne.n	800cda0 <_fstat_r+0x1c>
 800cd9a:	682b      	ldr	r3, [r5, #0]
 800cd9c:	b103      	cbz	r3, 800cda0 <_fstat_r+0x1c>
 800cd9e:	6023      	str	r3, [r4, #0]
 800cda0:	bd38      	pop	{r3, r4, r5, pc}
 800cda2:	bf00      	nop
 800cda4:	200019f0 	.word	0x200019f0

0800cda8 <_isatty_r>:
 800cda8:	b538      	push	{r3, r4, r5, lr}
 800cdaa:	4d06      	ldr	r5, [pc, #24]	@ (800cdc4 <_isatty_r+0x1c>)
 800cdac:	2300      	movs	r3, #0
 800cdae:	4604      	mov	r4, r0
 800cdb0:	4608      	mov	r0, r1
 800cdb2:	602b      	str	r3, [r5, #0]
 800cdb4:	f7f5 fbf8 	bl	80025a8 <_isatty>
 800cdb8:	1c43      	adds	r3, r0, #1
 800cdba:	d102      	bne.n	800cdc2 <_isatty_r+0x1a>
 800cdbc:	682b      	ldr	r3, [r5, #0]
 800cdbe:	b103      	cbz	r3, 800cdc2 <_isatty_r+0x1a>
 800cdc0:	6023      	str	r3, [r4, #0]
 800cdc2:	bd38      	pop	{r3, r4, r5, pc}
 800cdc4:	200019f0 	.word	0x200019f0

0800cdc8 <_init>:
 800cdc8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cdca:	bf00      	nop
 800cdcc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800cdce:	bc08      	pop	{r3}
 800cdd0:	469e      	mov	lr, r3
 800cdd2:	4770      	bx	lr

0800cdd4 <_fini>:
 800cdd4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cdd6:	bf00      	nop
 800cdd8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800cdda:	bc08      	pop	{r3}
 800cddc:	469e      	mov	lr, r3
 800cdde:	4770      	bx	lr
